/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/axios/dist/browser/axios.cjs
var require_axios = __commonJS({
  "node_modules/axios/dist/browser/axios.cjs"(exports2, module2) {
    "use strict";
    function bind(fn, thisArg) {
      return function wrap() {
        return fn.apply(thisArg, arguments);
      };
    }
    var { toString } = Object.prototype;
    var { getPrototypeOf } = Object;
    var kindOf = ((cache) => (thing) => {
      const str = toString.call(thing);
      return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
    })(/* @__PURE__ */ Object.create(null));
    var kindOfTest = (type2) => {
      type2 = type2.toLowerCase();
      return (thing) => kindOf(thing) === type2;
    };
    var typeOfTest = (type2) => (thing) => typeof thing === type2;
    var { isArray } = Array;
    var isUndefined = typeOfTest("undefined");
    function isBuffer(val) {
      return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);
    }
    var isArrayBuffer = kindOfTest("ArrayBuffer");
    function isArrayBufferView(val) {
      let result2;
      if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
        result2 = ArrayBuffer.isView(val);
      } else {
        result2 = val && val.buffer && isArrayBuffer(val.buffer);
      }
      return result2;
    }
    var isString = typeOfTest("string");
    var isFunction = typeOfTest("function");
    var isNumber = typeOfTest("number");
    var isObject = (thing) => thing !== null && typeof thing === "object";
    var isBoolean = (thing) => thing === true || thing === false;
    var isPlainObject = (val) => {
      if (kindOf(val) !== "object") {
        return false;
      }
      const prototype2 = getPrototypeOf(val);
      return (prototype2 === null || prototype2 === Object.prototype || Object.getPrototypeOf(prototype2) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);
    };
    var isDate = kindOfTest("Date");
    var isFile = kindOfTest("File");
    var isBlob = kindOfTest("Blob");
    var isFileList = kindOfTest("FileList");
    var isStream = (val) => isObject(val) && isFunction(val.pipe);
    var isFormData = (thing) => {
      let kind;
      return thing && (typeof FormData === "function" && thing instanceof FormData || isFunction(thing.append) && ((kind = kindOf(thing)) === "formdata" || // detect form-data instance
      kind === "object" && isFunction(thing.toString) && thing.toString() === "[object FormData]"));
    };
    var isURLSearchParams = kindOfTest("URLSearchParams");
    var [isReadableStream, isRequest, isResponse, isHeaders] = ["ReadableStream", "Request", "Response", "Headers"].map(kindOfTest);
    var trim = (str) => str.trim ? str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
    function forEach(obj, fn, { allOwnKeys = false } = {}) {
      if (obj === null || typeof obj === "undefined") {
        return;
      }
      let i;
      let l;
      if (typeof obj !== "object") {
        obj = [obj];
      }
      if (isArray(obj)) {
        for (i = 0, l = obj.length; i < l; i++) {
          fn.call(null, obj[i], i, obj);
        }
      } else {
        const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
        const len = keys.length;
        let key;
        for (i = 0; i < len; i++) {
          key = keys[i];
          fn.call(null, obj[key], key, obj);
        }
      }
    }
    function findKey(obj, key) {
      key = key.toLowerCase();
      const keys = Object.keys(obj);
      let i = keys.length;
      let _key;
      while (i-- > 0) {
        _key = keys[i];
        if (key === _key.toLowerCase()) {
          return _key;
        }
      }
      return null;
    }
    var _global = (() => {
      if (typeof globalThis !== "undefined")
        return globalThis;
      return typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : global;
    })();
    var isContextDefined = (context) => !isUndefined(context) && context !== _global;
    function merge() {
      const { caseless } = isContextDefined(this) && this || {};
      const result2 = {};
      const assignValue = (val, key) => {
        const targetKey = caseless && findKey(result2, key) || key;
        if (isPlainObject(result2[targetKey]) && isPlainObject(val)) {
          result2[targetKey] = merge(result2[targetKey], val);
        } else if (isPlainObject(val)) {
          result2[targetKey] = merge({}, val);
        } else if (isArray(val)) {
          result2[targetKey] = val.slice();
        } else {
          result2[targetKey] = val;
        }
      };
      for (let i = 0, l = arguments.length; i < l; i++) {
        arguments[i] && forEach(arguments[i], assignValue);
      }
      return result2;
    }
    var extend2 = (a2, b, thisArg, { allOwnKeys } = {}) => {
      forEach(b, (val, key) => {
        if (thisArg && isFunction(val)) {
          a2[key] = bind(val, thisArg);
        } else {
          a2[key] = val;
        }
      }, { allOwnKeys });
      return a2;
    };
    var stripBOM = (content2) => {
      if (content2.charCodeAt(0) === 65279) {
        content2 = content2.slice(1);
      }
      return content2;
    };
    var inherits = (constructor, superConstructor, props, descriptors2) => {
      constructor.prototype = Object.create(superConstructor.prototype, descriptors2);
      constructor.prototype.constructor = constructor;
      Object.defineProperty(constructor, "super", {
        value: superConstructor.prototype
      });
      props && Object.assign(constructor.prototype, props);
    };
    var toFlatObject = (sourceObj, destObj, filter2, propFilter) => {
      let props;
      let i;
      let prop;
      const merged = {};
      destObj = destObj || {};
      if (sourceObj == null)
        return destObj;
      do {
        props = Object.getOwnPropertyNames(sourceObj);
        i = props.length;
        while (i-- > 0) {
          prop = props[i];
          if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
            destObj[prop] = sourceObj[prop];
            merged[prop] = true;
          }
        }
        sourceObj = filter2 !== false && getPrototypeOf(sourceObj);
      } while (sourceObj && (!filter2 || filter2(sourceObj, destObj)) && sourceObj !== Object.prototype);
      return destObj;
    };
    var endsWith = (str, searchString, position) => {
      str = String(str);
      if (position === void 0 || position > str.length) {
        position = str.length;
      }
      position -= searchString.length;
      const lastIndex = str.indexOf(searchString, position);
      return lastIndex !== -1 && lastIndex === position;
    };
    var toArray = (thing) => {
      if (!thing)
        return null;
      if (isArray(thing))
        return thing;
      let i = thing.length;
      if (!isNumber(i))
        return null;
      const arr = new Array(i);
      while (i-- > 0) {
        arr[i] = thing[i];
      }
      return arr;
    };
    var isTypedArray = ((TypedArray) => {
      return (thing) => {
        return TypedArray && thing instanceof TypedArray;
      };
    })(typeof Uint8Array !== "undefined" && getPrototypeOf(Uint8Array));
    var forEachEntry = (obj, fn) => {
      const generator = obj && obj[Symbol.iterator];
      const iterator = generator.call(obj);
      let result2;
      while ((result2 = iterator.next()) && !result2.done) {
        const pair = result2.value;
        fn.call(obj, pair[0], pair[1]);
      }
    };
    var matchAll = (regExp, str) => {
      let matches;
      const arr = [];
      while ((matches = regExp.exec(str)) !== null) {
        arr.push(matches);
      }
      return arr;
    };
    var isHTMLForm = kindOfTest("HTMLFormElement");
    var toCamelCase = (str) => {
      return str.toLowerCase().replace(
        /[-_\s]([a-z\d])(\w*)/g,
        function replacer(m2, p1, p2) {
          return p1.toUpperCase() + p2;
        }
      );
    };
    var hasOwnProperty = (({ hasOwnProperty: hasOwnProperty2 }) => (obj, prop) => hasOwnProperty2.call(obj, prop))(Object.prototype);
    var isRegExp = kindOfTest("RegExp");
    var reduceDescriptors = (obj, reducer) => {
      const descriptors2 = Object.getOwnPropertyDescriptors(obj);
      const reducedDescriptors = {};
      forEach(descriptors2, (descriptor, name) => {
        let ret;
        if ((ret = reducer(descriptor, name, obj)) !== false) {
          reducedDescriptors[name] = ret || descriptor;
        }
      });
      Object.defineProperties(obj, reducedDescriptors);
    };
    var freezeMethods = (obj) => {
      reduceDescriptors(obj, (descriptor, name) => {
        if (isFunction(obj) && ["arguments", "caller", "callee"].indexOf(name) !== -1) {
          return false;
        }
        const value = obj[name];
        if (!isFunction(value))
          return;
        descriptor.enumerable = false;
        if ("writable" in descriptor) {
          descriptor.writable = false;
          return;
        }
        if (!descriptor.set) {
          descriptor.set = () => {
            throw Error("Can not rewrite read-only method '" + name + "'");
          };
        }
      });
    };
    var toObjectSet = (arrayOrString, delimiter) => {
      const obj = {};
      const define = (arr) => {
        arr.forEach((value) => {
          obj[value] = true;
        });
      };
      isArray(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));
      return obj;
    };
    var noop2 = () => {
    };
    var toFiniteNumber = (value, defaultValue) => {
      return value != null && Number.isFinite(value = +value) ? value : defaultValue;
    };
    var ALPHA = "abcdefghijklmnopqrstuvwxyz";
    var DIGIT = "0123456789";
    var ALPHABET = {
      DIGIT,
      ALPHA,
      ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT
    };
    var generateString = (size = 16, alphabet = ALPHABET.ALPHA_DIGIT) => {
      let str = "";
      const { length } = alphabet;
      while (size--) {
        str += alphabet[Math.random() * length | 0];
      }
      return str;
    };
    function isSpecCompliantForm(thing) {
      return !!(thing && isFunction(thing.append) && thing[Symbol.toStringTag] === "FormData" && thing[Symbol.iterator]);
    }
    var toJSONObject = (obj) => {
      const stack = new Array(10);
      const visit = (source, i) => {
        if (isObject(source)) {
          if (stack.indexOf(source) >= 0) {
            return;
          }
          if (!("toJSON" in source)) {
            stack[i] = source;
            const target = isArray(source) ? [] : {};
            forEach(source, (value, key) => {
              const reducedValue = visit(value, i + 1);
              !isUndefined(reducedValue) && (target[key] = reducedValue);
            });
            stack[i] = void 0;
            return target;
          }
        }
        return source;
      };
      return visit(obj, 0);
    };
    var isAsyncFn = kindOfTest("AsyncFunction");
    var isThenable = (thing) => thing && (isObject(thing) || isFunction(thing)) && isFunction(thing.then) && isFunction(thing.catch);
    var _setImmediate = ((setImmediateSupported, postMessageSupported) => {
      if (setImmediateSupported) {
        return setImmediate;
      }
      return postMessageSupported ? ((token, callbacks) => {
        _global.addEventListener("message", ({ source, data }) => {
          if (source === _global && data === token) {
            callbacks.length && callbacks.shift()();
          }
        }, false);
        return (cb) => {
          callbacks.push(cb);
          _global.postMessage(token, "*");
        };
      })(`axios@${Math.random()}`, []) : (cb) => setTimeout(cb);
    })(
      typeof setImmediate === "function",
      isFunction(_global.postMessage)
    );
    var asap = typeof queueMicrotask !== "undefined" ? queueMicrotask.bind(_global) : typeof process !== "undefined" && process.nextTick || _setImmediate;
    var utils$1 = {
      isArray,
      isArrayBuffer,
      isBuffer,
      isFormData,
      isArrayBufferView,
      isString,
      isNumber,
      isBoolean,
      isObject,
      isPlainObject,
      isReadableStream,
      isRequest,
      isResponse,
      isHeaders,
      isUndefined,
      isDate,
      isFile,
      isBlob,
      isRegExp,
      isFunction,
      isStream,
      isURLSearchParams,
      isTypedArray,
      isFileList,
      forEach,
      merge,
      extend: extend2,
      trim,
      stripBOM,
      inherits,
      toFlatObject,
      kindOf,
      kindOfTest,
      endsWith,
      toArray,
      forEachEntry,
      matchAll,
      isHTMLForm,
      hasOwnProperty,
      hasOwnProp: hasOwnProperty,
      // an alias to avoid ESLint no-prototype-builtins detection
      reduceDescriptors,
      freezeMethods,
      toObjectSet,
      toCamelCase,
      noop: noop2,
      toFiniteNumber,
      findKey,
      global: _global,
      isContextDefined,
      ALPHABET,
      generateString,
      isSpecCompliantForm,
      toJSONObject,
      isAsyncFn,
      isThenable,
      setImmediate: _setImmediate,
      asap
    };
    function AxiosError(message, code, config, request, response) {
      Error.call(this);
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, this.constructor);
      } else {
        this.stack = new Error().stack;
      }
      this.message = message;
      this.name = "AxiosError";
      code && (this.code = code);
      config && (this.config = config);
      request && (this.request = request);
      if (response) {
        this.response = response;
        this.status = response.status ? response.status : null;
      }
    }
    utils$1.inherits(AxiosError, Error, {
      toJSON: function toJSON() {
        return {
          // Standard
          message: this.message,
          name: this.name,
          // Microsoft
          description: this.description,
          number: this.number,
          // Mozilla
          fileName: this.fileName,
          lineNumber: this.lineNumber,
          columnNumber: this.columnNumber,
          stack: this.stack,
          // Axios
          config: utils$1.toJSONObject(this.config),
          code: this.code,
          status: this.status
        };
      }
    });
    var prototype$1 = AxiosError.prototype;
    var descriptors = {};
    [
      "ERR_BAD_OPTION_VALUE",
      "ERR_BAD_OPTION",
      "ECONNABORTED",
      "ETIMEDOUT",
      "ERR_NETWORK",
      "ERR_FR_TOO_MANY_REDIRECTS",
      "ERR_DEPRECATED",
      "ERR_BAD_RESPONSE",
      "ERR_BAD_REQUEST",
      "ERR_CANCELED",
      "ERR_NOT_SUPPORT",
      "ERR_INVALID_URL"
      // eslint-disable-next-line func-names
    ].forEach((code) => {
      descriptors[code] = { value: code };
    });
    Object.defineProperties(AxiosError, descriptors);
    Object.defineProperty(prototype$1, "isAxiosError", { value: true });
    AxiosError.from = (error, code, config, request, response, customProps) => {
      const axiosError = Object.create(prototype$1);
      utils$1.toFlatObject(error, axiosError, function filter2(obj) {
        return obj !== Error.prototype;
      }, (prop) => {
        return prop !== "isAxiosError";
      });
      AxiosError.call(axiosError, error.message, code, config, request, response);
      axiosError.cause = error;
      axiosError.name = error.name;
      customProps && Object.assign(axiosError, customProps);
      return axiosError;
    };
    var httpAdapter = null;
    function isVisitable(thing) {
      return utils$1.isPlainObject(thing) || utils$1.isArray(thing);
    }
    function removeBrackets(key) {
      return utils$1.endsWith(key, "[]") ? key.slice(0, -2) : key;
    }
    function renderKey(path, key, dots) {
      if (!path)
        return key;
      return path.concat(key).map(function each(token, i) {
        token = removeBrackets(token);
        return !dots && i ? "[" + token + "]" : token;
      }).join(dots ? "." : "");
    }
    function isFlatArray(arr) {
      return utils$1.isArray(arr) && !arr.some(isVisitable);
    }
    var predicates = utils$1.toFlatObject(utils$1, {}, null, function filter2(prop) {
      return /^is[A-Z]/.test(prop);
    });
    function toFormData(obj, formData, options) {
      if (!utils$1.isObject(obj)) {
        throw new TypeError("target must be an object");
      }
      formData = formData || new FormData();
      options = utils$1.toFlatObject(options, {
        metaTokens: true,
        dots: false,
        indexes: false
      }, false, function defined(option, source) {
        return !utils$1.isUndefined(source[option]);
      });
      const metaTokens = options.metaTokens;
      const visitor = options.visitor || defaultVisitor;
      const dots = options.dots;
      const indexes = options.indexes;
      const _Blob = options.Blob || typeof Blob !== "undefined" && Blob;
      const useBlob = _Blob && utils$1.isSpecCompliantForm(formData);
      if (!utils$1.isFunction(visitor)) {
        throw new TypeError("visitor must be a function");
      }
      function convertValue(value) {
        if (value === null)
          return "";
        if (utils$1.isDate(value)) {
          return value.toISOString();
        }
        if (!useBlob && utils$1.isBlob(value)) {
          throw new AxiosError("Blob is not supported. Use a Buffer instead.");
        }
        if (utils$1.isArrayBuffer(value) || utils$1.isTypedArray(value)) {
          return useBlob && typeof Blob === "function" ? new Blob([value]) : Buffer.from(value);
        }
        return value;
      }
      function defaultVisitor(value, key, path) {
        let arr = value;
        if (value && !path && typeof value === "object") {
          if (utils$1.endsWith(key, "{}")) {
            key = metaTokens ? key : key.slice(0, -2);
            value = JSON.stringify(value);
          } else if (utils$1.isArray(value) && isFlatArray(value) || (utils$1.isFileList(value) || utils$1.endsWith(key, "[]")) && (arr = utils$1.toArray(value))) {
            key = removeBrackets(key);
            arr.forEach(function each(el, index2) {
              !(utils$1.isUndefined(el) || el === null) && formData.append(
                // eslint-disable-next-line no-nested-ternary
                indexes === true ? renderKey([key], index2, dots) : indexes === null ? key : key + "[]",
                convertValue(el)
              );
            });
            return false;
          }
        }
        if (isVisitable(value)) {
          return true;
        }
        formData.append(renderKey(path, key, dots), convertValue(value));
        return false;
      }
      const stack = [];
      const exposedHelpers = Object.assign(predicates, {
        defaultVisitor,
        convertValue,
        isVisitable
      });
      function build(value, path) {
        if (utils$1.isUndefined(value))
          return;
        if (stack.indexOf(value) !== -1) {
          throw Error("Circular reference detected in " + path.join("."));
        }
        stack.push(value);
        utils$1.forEach(value, function each(el, key) {
          const result2 = !(utils$1.isUndefined(el) || el === null) && visitor.call(
            formData,
            el,
            utils$1.isString(key) ? key.trim() : key,
            path,
            exposedHelpers
          );
          if (result2 === true) {
            build(el, path ? path.concat(key) : [key]);
          }
        });
        stack.pop();
      }
      if (!utils$1.isObject(obj)) {
        throw new TypeError("data must be an object");
      }
      build(obj);
      return formData;
    }
    function encode$1(str) {
      const charMap = {
        "!": "%21",
        "'": "%27",
        "(": "%28",
        ")": "%29",
        "~": "%7E",
        "%20": "+",
        "%00": "\0"
      };
      return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {
        return charMap[match];
      });
    }
    function AxiosURLSearchParams(params, options) {
      this._pairs = [];
      params && toFormData(params, this, options);
    }
    var prototype = AxiosURLSearchParams.prototype;
    prototype.append = function append(name, value) {
      this._pairs.push([name, value]);
    };
    prototype.toString = function toString2(encoder) {
      const _encode = encoder ? function(value) {
        return encoder.call(this, value, encode$1);
      } : encode$1;
      return this._pairs.map(function each(pair) {
        return _encode(pair[0]) + "=" + _encode(pair[1]);
      }, "").join("&");
    };
    function encode(val) {
      return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
    }
    function buildURL(url, params, options) {
      if (!params) {
        return url;
      }
      const _encode = options && options.encode || encode;
      if (utils$1.isFunction(options)) {
        options = {
          serialize: options
        };
      }
      const serializeFn = options && options.serialize;
      let serializedParams;
      if (serializeFn) {
        serializedParams = serializeFn(params, options);
      } else {
        serializedParams = utils$1.isURLSearchParams(params) ? params.toString() : new AxiosURLSearchParams(params, options).toString(_encode);
      }
      if (serializedParams) {
        const hashmarkIndex = url.indexOf("#");
        if (hashmarkIndex !== -1) {
          url = url.slice(0, hashmarkIndex);
        }
        url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
      }
      return url;
    }
    var InterceptorManager = class {
      constructor() {
        this.handlers = [];
      }
      /**
       * Add a new interceptor to the stack
       *
       * @param {Function} fulfilled The function to handle `then` for a `Promise`
       * @param {Function} rejected The function to handle `reject` for a `Promise`
       *
       * @return {Number} An ID used to remove interceptor later
       */
      use(fulfilled, rejected, options) {
        this.handlers.push({
          fulfilled,
          rejected,
          synchronous: options ? options.synchronous : false,
          runWhen: options ? options.runWhen : null
        });
        return this.handlers.length - 1;
      }
      /**
       * Remove an interceptor from the stack
       *
       * @param {Number} id The ID that was returned by `use`
       *
       * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
       */
      eject(id2) {
        if (this.handlers[id2]) {
          this.handlers[id2] = null;
        }
      }
      /**
       * Clear all interceptors from the stack
       *
       * @returns {void}
       */
      clear() {
        if (this.handlers) {
          this.handlers = [];
        }
      }
      /**
       * Iterate over all the registered interceptors
       *
       * This method is particularly useful for skipping over any
       * interceptors that may have become `null` calling `eject`.
       *
       * @param {Function} fn The function to call for each interceptor
       *
       * @returns {void}
       */
      forEach(fn) {
        utils$1.forEach(this.handlers, function forEachHandler(h) {
          if (h !== null) {
            fn(h);
          }
        });
      }
    };
    var InterceptorManager$1 = InterceptorManager;
    var transitionalDefaults = {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    };
    var URLSearchParams$1 = typeof URLSearchParams !== "undefined" ? URLSearchParams : AxiosURLSearchParams;
    var FormData$1 = typeof FormData !== "undefined" ? FormData : null;
    var Blob$1 = typeof Blob !== "undefined" ? Blob : null;
    var platform$1 = {
      isBrowser: true,
      classes: {
        URLSearchParams: URLSearchParams$1,
        FormData: FormData$1,
        Blob: Blob$1
      },
      protocols: ["http", "https", "file", "blob", "url", "data"]
    };
    var hasBrowserEnv = typeof window !== "undefined" && typeof document !== "undefined";
    var _navigator = typeof navigator === "object" && navigator || void 0;
    var hasStandardBrowserEnv = hasBrowserEnv && (!_navigator || ["ReactNative", "NativeScript", "NS"].indexOf(_navigator.product) < 0);
    var hasStandardBrowserWebWorkerEnv = (() => {
      return typeof WorkerGlobalScope !== "undefined" && // eslint-disable-next-line no-undef
      self instanceof WorkerGlobalScope && typeof self.importScripts === "function";
    })();
    var origin = hasBrowserEnv && window.location.href || "http://localhost";
    var utils = /* @__PURE__ */ Object.freeze({
      __proto__: null,
      hasBrowserEnv,
      hasStandardBrowserWebWorkerEnv,
      hasStandardBrowserEnv,
      navigator: _navigator,
      origin
    });
    var platform = {
      ...utils,
      ...platform$1
    };
    function toURLEncodedForm(data, options) {
      return toFormData(data, new platform.classes.URLSearchParams(), Object.assign({
        visitor: function(value, key, path, helpers) {
          if (platform.isNode && utils$1.isBuffer(value)) {
            this.append(key, value.toString("base64"));
            return false;
          }
          return helpers.defaultVisitor.apply(this, arguments);
        }
      }, options));
    }
    function parsePropPath(name) {
      return utils$1.matchAll(/\w+|\[(\w*)]/g, name).map((match) => {
        return match[0] === "[]" ? "" : match[1] || match[0];
      });
    }
    function arrayToObject(arr) {
      const obj = {};
      const keys = Object.keys(arr);
      let i;
      const len = keys.length;
      let key;
      for (i = 0; i < len; i++) {
        key = keys[i];
        obj[key] = arr[key];
      }
      return obj;
    }
    function formDataToJSON(formData) {
      function buildPath(path, value, target, index2) {
        let name = path[index2++];
        if (name === "__proto__")
          return true;
        const isNumericKey = Number.isFinite(+name);
        const isLast = index2 >= path.length;
        name = !name && utils$1.isArray(target) ? target.length : name;
        if (isLast) {
          if (utils$1.hasOwnProp(target, name)) {
            target[name] = [target[name], value];
          } else {
            target[name] = value;
          }
          return !isNumericKey;
        }
        if (!target[name] || !utils$1.isObject(target[name])) {
          target[name] = [];
        }
        const result2 = buildPath(path, value, target[name], index2);
        if (result2 && utils$1.isArray(target[name])) {
          target[name] = arrayToObject(target[name]);
        }
        return !isNumericKey;
      }
      if (utils$1.isFormData(formData) && utils$1.isFunction(formData.entries)) {
        const obj = {};
        utils$1.forEachEntry(formData, (name, value) => {
          buildPath(parsePropPath(name), value, obj, 0);
        });
        return obj;
      }
      return null;
    }
    function stringifySafely(rawValue, parser, encoder) {
      if (utils$1.isString(rawValue)) {
        try {
          (parser || JSON.parse)(rawValue);
          return utils$1.trim(rawValue);
        } catch (e) {
          if (e.name !== "SyntaxError") {
            throw e;
          }
        }
      }
      return (encoder || JSON.stringify)(rawValue);
    }
    var defaults = {
      transitional: transitionalDefaults,
      adapter: ["xhr", "http", "fetch"],
      transformRequest: [function transformRequest(data, headers) {
        const contentType = headers.getContentType() || "";
        const hasJSONContentType = contentType.indexOf("application/json") > -1;
        const isObjectPayload = utils$1.isObject(data);
        if (isObjectPayload && utils$1.isHTMLForm(data)) {
          data = new FormData(data);
        }
        const isFormData2 = utils$1.isFormData(data);
        if (isFormData2) {
          return hasJSONContentType ? JSON.stringify(formDataToJSON(data)) : data;
        }
        if (utils$1.isArrayBuffer(data) || utils$1.isBuffer(data) || utils$1.isStream(data) || utils$1.isFile(data) || utils$1.isBlob(data) || utils$1.isReadableStream(data)) {
          return data;
        }
        if (utils$1.isArrayBufferView(data)) {
          return data.buffer;
        }
        if (utils$1.isURLSearchParams(data)) {
          headers.setContentType("application/x-www-form-urlencoded;charset=utf-8", false);
          return data.toString();
        }
        let isFileList2;
        if (isObjectPayload) {
          if (contentType.indexOf("application/x-www-form-urlencoded") > -1) {
            return toURLEncodedForm(data, this.formSerializer).toString();
          }
          if ((isFileList2 = utils$1.isFileList(data)) || contentType.indexOf("multipart/form-data") > -1) {
            const _FormData = this.env && this.env.FormData;
            return toFormData(
              isFileList2 ? { "files[]": data } : data,
              _FormData && new _FormData(),
              this.formSerializer
            );
          }
        }
        if (isObjectPayload || hasJSONContentType) {
          headers.setContentType("application/json", false);
          return stringifySafely(data);
        }
        return data;
      }],
      transformResponse: [function transformResponse(data) {
        const transitional = this.transitional || defaults.transitional;
        const forcedJSONParsing = transitional && transitional.forcedJSONParsing;
        const JSONRequested = this.responseType === "json";
        if (utils$1.isResponse(data) || utils$1.isReadableStream(data)) {
          return data;
        }
        if (data && utils$1.isString(data) && (forcedJSONParsing && !this.responseType || JSONRequested)) {
          const silentJSONParsing = transitional && transitional.silentJSONParsing;
          const strictJSONParsing = !silentJSONParsing && JSONRequested;
          try {
            return JSON.parse(data);
          } catch (e) {
            if (strictJSONParsing) {
              if (e.name === "SyntaxError") {
                throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);
              }
              throw e;
            }
          }
        }
        return data;
      }],
      /**
       * A timeout in milliseconds to abort a request. If set to 0 (default) a
       * timeout is not created.
       */
      timeout: 0,
      xsrfCookieName: "XSRF-TOKEN",
      xsrfHeaderName: "X-XSRF-TOKEN",
      maxContentLength: -1,
      maxBodyLength: -1,
      env: {
        FormData: platform.classes.FormData,
        Blob: platform.classes.Blob
      },
      validateStatus: function validateStatus(status) {
        return status >= 200 && status < 300;
      },
      headers: {
        common: {
          "Accept": "application/json, text/plain, */*",
          "Content-Type": void 0
        }
      }
    };
    utils$1.forEach(["delete", "get", "head", "post", "put", "patch"], (method) => {
      defaults.headers[method] = {};
    });
    var defaults$1 = defaults;
    var ignoreDuplicateOf = utils$1.toObjectSet([
      "age",
      "authorization",
      "content-length",
      "content-type",
      "etag",
      "expires",
      "from",
      "host",
      "if-modified-since",
      "if-unmodified-since",
      "last-modified",
      "location",
      "max-forwards",
      "proxy-authorization",
      "referer",
      "retry-after",
      "user-agent"
    ]);
    var parseHeaders = (rawHeaders) => {
      const parsed = {};
      let key;
      let val;
      let i;
      rawHeaders && rawHeaders.split("\n").forEach(function parser(line) {
        i = line.indexOf(":");
        key = line.substring(0, i).trim().toLowerCase();
        val = line.substring(i + 1).trim();
        if (!key || parsed[key] && ignoreDuplicateOf[key]) {
          return;
        }
        if (key === "set-cookie") {
          if (parsed[key]) {
            parsed[key].push(val);
          } else {
            parsed[key] = [val];
          }
        } else {
          parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
        }
      });
      return parsed;
    };
    var $internals = Symbol("internals");
    function normalizeHeader(header) {
      return header && String(header).trim().toLowerCase();
    }
    function normalizeValue(value) {
      if (value === false || value == null) {
        return value;
      }
      return utils$1.isArray(value) ? value.map(normalizeValue) : String(value);
    }
    function parseTokens(str) {
      const tokens = /* @__PURE__ */ Object.create(null);
      const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
      let match;
      while (match = tokensRE.exec(str)) {
        tokens[match[1]] = match[2];
      }
      return tokens;
    }
    var isValidHeaderName = (str) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());
    function matchHeaderValue(context, value, header, filter2, isHeaderNameFilter) {
      if (utils$1.isFunction(filter2)) {
        return filter2.call(this, value, header);
      }
      if (isHeaderNameFilter) {
        value = header;
      }
      if (!utils$1.isString(value))
        return;
      if (utils$1.isString(filter2)) {
        return value.indexOf(filter2) !== -1;
      }
      if (utils$1.isRegExp(filter2)) {
        return filter2.test(value);
      }
    }
    function formatHeader(header) {
      return header.trim().toLowerCase().replace(/([a-z\d])(\w*)/g, (w, char, str) => {
        return char.toUpperCase() + str;
      });
    }
    function buildAccessors(obj, header) {
      const accessorName = utils$1.toCamelCase(" " + header);
      ["get", "set", "has"].forEach((methodName) => {
        Object.defineProperty(obj, methodName + accessorName, {
          value: function(arg1, arg2, arg3) {
            return this[methodName].call(this, header, arg1, arg2, arg3);
          },
          configurable: true
        });
      });
    }
    var AxiosHeaders = class {
      constructor(headers) {
        headers && this.set(headers);
      }
      set(header, valueOrRewrite, rewrite) {
        const self2 = this;
        function setHeader(_value, _header, _rewrite) {
          const lHeader = normalizeHeader(_header);
          if (!lHeader) {
            throw new Error("header name must be a non-empty string");
          }
          const key = utils$1.findKey(self2, lHeader);
          if (!key || self2[key] === void 0 || _rewrite === true || _rewrite === void 0 && self2[key] !== false) {
            self2[key || _header] = normalizeValue(_value);
          }
        }
        const setHeaders = (headers, _rewrite) => utils$1.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));
        if (utils$1.isPlainObject(header) || header instanceof this.constructor) {
          setHeaders(header, valueOrRewrite);
        } else if (utils$1.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {
          setHeaders(parseHeaders(header), valueOrRewrite);
        } else if (utils$1.isHeaders(header)) {
          for (const [key, value] of header.entries()) {
            setHeader(value, key, rewrite);
          }
        } else {
          header != null && setHeader(valueOrRewrite, header, rewrite);
        }
        return this;
      }
      get(header, parser) {
        header = normalizeHeader(header);
        if (header) {
          const key = utils$1.findKey(this, header);
          if (key) {
            const value = this[key];
            if (!parser) {
              return value;
            }
            if (parser === true) {
              return parseTokens(value);
            }
            if (utils$1.isFunction(parser)) {
              return parser.call(this, value, key);
            }
            if (utils$1.isRegExp(parser)) {
              return parser.exec(value);
            }
            throw new TypeError("parser must be boolean|regexp|function");
          }
        }
      }
      has(header, matcher) {
        header = normalizeHeader(header);
        if (header) {
          const key = utils$1.findKey(this, header);
          return !!(key && this[key] !== void 0 && (!matcher || matchHeaderValue(this, this[key], key, matcher)));
        }
        return false;
      }
      delete(header, matcher) {
        const self2 = this;
        let deleted = false;
        function deleteHeader(_header) {
          _header = normalizeHeader(_header);
          if (_header) {
            const key = utils$1.findKey(self2, _header);
            if (key && (!matcher || matchHeaderValue(self2, self2[key], key, matcher))) {
              delete self2[key];
              deleted = true;
            }
          }
        }
        if (utils$1.isArray(header)) {
          header.forEach(deleteHeader);
        } else {
          deleteHeader(header);
        }
        return deleted;
      }
      clear(matcher) {
        const keys = Object.keys(this);
        let i = keys.length;
        let deleted = false;
        while (i--) {
          const key = keys[i];
          if (!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {
            delete this[key];
            deleted = true;
          }
        }
        return deleted;
      }
      normalize(format2) {
        const self2 = this;
        const headers = {};
        utils$1.forEach(this, (value, header) => {
          const key = utils$1.findKey(headers, header);
          if (key) {
            self2[key] = normalizeValue(value);
            delete self2[header];
            return;
          }
          const normalized = format2 ? formatHeader(header) : String(header).trim();
          if (normalized !== header) {
            delete self2[header];
          }
          self2[normalized] = normalizeValue(value);
          headers[normalized] = true;
        });
        return this;
      }
      concat(...targets) {
        return this.constructor.concat(this, ...targets);
      }
      toJSON(asStrings) {
        const obj = /* @__PURE__ */ Object.create(null);
        utils$1.forEach(this, (value, header) => {
          value != null && value !== false && (obj[header] = asStrings && utils$1.isArray(value) ? value.join(", ") : value);
        });
        return obj;
      }
      [Symbol.iterator]() {
        return Object.entries(this.toJSON())[Symbol.iterator]();
      }
      toString() {
        return Object.entries(this.toJSON()).map(([header, value]) => header + ": " + value).join("\n");
      }
      get [Symbol.toStringTag]() {
        return "AxiosHeaders";
      }
      static from(thing) {
        return thing instanceof this ? thing : new this(thing);
      }
      static concat(first, ...targets) {
        const computed = new this(first);
        targets.forEach((target) => computed.set(target));
        return computed;
      }
      static accessor(header) {
        const internals = this[$internals] = this[$internals] = {
          accessors: {}
        };
        const accessors = internals.accessors;
        const prototype2 = this.prototype;
        function defineAccessor(_header) {
          const lHeader = normalizeHeader(_header);
          if (!accessors[lHeader]) {
            buildAccessors(prototype2, _header);
            accessors[lHeader] = true;
          }
        }
        utils$1.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);
        return this;
      }
    };
    AxiosHeaders.accessor(["Content-Type", "Content-Length", "Accept", "Accept-Encoding", "User-Agent", "Authorization"]);
    utils$1.reduceDescriptors(AxiosHeaders.prototype, ({ value }, key) => {
      let mapped = key[0].toUpperCase() + key.slice(1);
      return {
        get: () => value,
        set(headerValue) {
          this[mapped] = headerValue;
        }
      };
    });
    utils$1.freezeMethods(AxiosHeaders);
    var AxiosHeaders$1 = AxiosHeaders;
    function transformData(fns, response) {
      const config = this || defaults$1;
      const context = response || config;
      const headers = AxiosHeaders$1.from(context.headers);
      let data = context.data;
      utils$1.forEach(fns, function transform2(fn) {
        data = fn.call(config, data, headers.normalize(), response ? response.status : void 0);
      });
      headers.normalize();
      return data;
    }
    function isCancel(value) {
      return !!(value && value.__CANCEL__);
    }
    function CanceledError(message, config, request) {
      AxiosError.call(this, message == null ? "canceled" : message, AxiosError.ERR_CANCELED, config, request);
      this.name = "CanceledError";
    }
    utils$1.inherits(CanceledError, AxiosError, {
      __CANCEL__: true
    });
    function settle(resolve, reject, response) {
      const validateStatus = response.config.validateStatus;
      if (!response.status || !validateStatus || validateStatus(response.status)) {
        resolve(response);
      } else {
        reject(new AxiosError(
          "Request failed with status code " + response.status,
          [AxiosError.ERR_BAD_REQUEST, AxiosError.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
          response.config,
          response.request,
          response
        ));
      }
    }
    function parseProtocol(url) {
      const match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
      return match && match[1] || "";
    }
    function speedometer(samplesCount, min2) {
      samplesCount = samplesCount || 10;
      const bytes = new Array(samplesCount);
      const timestamps = new Array(samplesCount);
      let head = 0;
      let tail = 0;
      let firstSampleTS;
      min2 = min2 !== void 0 ? min2 : 1e3;
      return function push(chunkLength) {
        const now2 = Date.now();
        const startedAt = timestamps[tail];
        if (!firstSampleTS) {
          firstSampleTS = now2;
        }
        bytes[head] = chunkLength;
        timestamps[head] = now2;
        let i = tail;
        let bytesCount = 0;
        while (i !== head) {
          bytesCount += bytes[i++];
          i = i % samplesCount;
        }
        head = (head + 1) % samplesCount;
        if (head === tail) {
          tail = (tail + 1) % samplesCount;
        }
        if (now2 - firstSampleTS < min2) {
          return;
        }
        const passed = startedAt && now2 - startedAt;
        return passed ? Math.round(bytesCount * 1e3 / passed) : void 0;
      };
    }
    function throttle(fn, freq) {
      let timestamp = 0;
      let threshold = 1e3 / freq;
      let lastArgs;
      let timer2;
      const invoke = (args, now2 = Date.now()) => {
        timestamp = now2;
        lastArgs = null;
        if (timer2) {
          clearTimeout(timer2);
          timer2 = null;
        }
        fn.apply(null, args);
      };
      const throttled = (...args) => {
        const now2 = Date.now();
        const passed = now2 - timestamp;
        if (passed >= threshold) {
          invoke(args, now2);
        } else {
          lastArgs = args;
          if (!timer2) {
            timer2 = setTimeout(() => {
              timer2 = null;
              invoke(lastArgs);
            }, threshold - passed);
          }
        }
      };
      const flush = () => lastArgs && invoke(lastArgs);
      return [throttled, flush];
    }
    var progressEventReducer = (listener, isDownloadStream, freq = 3) => {
      let bytesNotified = 0;
      const _speedometer = speedometer(50, 250);
      return throttle((e) => {
        const loaded = e.loaded;
        const total = e.lengthComputable ? e.total : void 0;
        const progressBytes = loaded - bytesNotified;
        const rate = _speedometer(progressBytes);
        const inRange = loaded <= total;
        bytesNotified = loaded;
        const data = {
          loaded,
          total,
          progress: total ? loaded / total : void 0,
          bytes: progressBytes,
          rate: rate ? rate : void 0,
          estimated: rate && total && inRange ? (total - loaded) / rate : void 0,
          event: e,
          lengthComputable: total != null,
          [isDownloadStream ? "download" : "upload"]: true
        };
        listener(data);
      }, freq);
    };
    var progressEventDecorator = (total, throttled) => {
      const lengthComputable = total != null;
      return [(loaded) => throttled[0]({
        lengthComputable,
        total,
        loaded
      }), throttled[1]];
    };
    var asyncDecorator = (fn) => (...args) => utils$1.asap(() => fn(...args));
    var isURLSameOrigin = platform.hasStandardBrowserEnv ? ((origin2, isMSIE) => (url) => {
      url = new URL(url, platform.origin);
      return origin2.protocol === url.protocol && origin2.host === url.host && (isMSIE || origin2.port === url.port);
    })(
      new URL(platform.origin),
      platform.navigator && /(msie|trident)/i.test(platform.navigator.userAgent)
    ) : () => true;
    var cookies = platform.hasStandardBrowserEnv ? (
      // Standard browser envs support document.cookie
      {
        write(name, value, expires, path, domain, secure) {
          const cookie = [name + "=" + encodeURIComponent(value)];
          utils$1.isNumber(expires) && cookie.push("expires=" + new Date(expires).toGMTString());
          utils$1.isString(path) && cookie.push("path=" + path);
          utils$1.isString(domain) && cookie.push("domain=" + domain);
          secure === true && cookie.push("secure");
          document.cookie = cookie.join("; ");
        },
        read(name) {
          const match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
          return match ? decodeURIComponent(match[3]) : null;
        },
        remove(name) {
          this.write(name, "", Date.now() - 864e5);
        }
      }
    ) : (
      // Non-standard browser env (web workers, react-native) lack needed support.
      {
        write() {
        },
        read() {
          return null;
        },
        remove() {
        }
      }
    );
    function isAbsoluteURL(url) {
      return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
    }
    function combineURLs(baseURL, relativeURL) {
      return relativeURL ? baseURL.replace(/\/?\/$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
    }
    function buildFullPath(baseURL, requestedURL) {
      if (baseURL && !isAbsoluteURL(requestedURL)) {
        return combineURLs(baseURL, requestedURL);
      }
      return requestedURL;
    }
    var headersToObject = (thing) => thing instanceof AxiosHeaders$1 ? { ...thing } : thing;
    function mergeConfig(config1, config2) {
      config2 = config2 || {};
      const config = {};
      function getMergedValue(target, source, prop, caseless) {
        if (utils$1.isPlainObject(target) && utils$1.isPlainObject(source)) {
          return utils$1.merge.call({ caseless }, target, source);
        } else if (utils$1.isPlainObject(source)) {
          return utils$1.merge({}, source);
        } else if (utils$1.isArray(source)) {
          return source.slice();
        }
        return source;
      }
      function mergeDeepProperties(a2, b, prop, caseless) {
        if (!utils$1.isUndefined(b)) {
          return getMergedValue(a2, b, prop, caseless);
        } else if (!utils$1.isUndefined(a2)) {
          return getMergedValue(void 0, a2, prop, caseless);
        }
      }
      function valueFromConfig2(a2, b) {
        if (!utils$1.isUndefined(b)) {
          return getMergedValue(void 0, b);
        }
      }
      function defaultToConfig2(a2, b) {
        if (!utils$1.isUndefined(b)) {
          return getMergedValue(void 0, b);
        } else if (!utils$1.isUndefined(a2)) {
          return getMergedValue(void 0, a2);
        }
      }
      function mergeDirectKeys(a2, b, prop) {
        if (prop in config2) {
          return getMergedValue(a2, b);
        } else if (prop in config1) {
          return getMergedValue(void 0, a2);
        }
      }
      const mergeMap = {
        url: valueFromConfig2,
        method: valueFromConfig2,
        data: valueFromConfig2,
        baseURL: defaultToConfig2,
        transformRequest: defaultToConfig2,
        transformResponse: defaultToConfig2,
        paramsSerializer: defaultToConfig2,
        timeout: defaultToConfig2,
        timeoutMessage: defaultToConfig2,
        withCredentials: defaultToConfig2,
        withXSRFToken: defaultToConfig2,
        adapter: defaultToConfig2,
        responseType: defaultToConfig2,
        xsrfCookieName: defaultToConfig2,
        xsrfHeaderName: defaultToConfig2,
        onUploadProgress: defaultToConfig2,
        onDownloadProgress: defaultToConfig2,
        decompress: defaultToConfig2,
        maxContentLength: defaultToConfig2,
        maxBodyLength: defaultToConfig2,
        beforeRedirect: defaultToConfig2,
        transport: defaultToConfig2,
        httpAgent: defaultToConfig2,
        httpsAgent: defaultToConfig2,
        cancelToken: defaultToConfig2,
        socketPath: defaultToConfig2,
        responseEncoding: defaultToConfig2,
        validateStatus: mergeDirectKeys,
        headers: (a2, b, prop) => mergeDeepProperties(headersToObject(a2), headersToObject(b), prop, true)
      };
      utils$1.forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {
        const merge2 = mergeMap[prop] || mergeDeepProperties;
        const configValue = merge2(config1[prop], config2[prop], prop);
        utils$1.isUndefined(configValue) && merge2 !== mergeDirectKeys || (config[prop] = configValue);
      });
      return config;
    }
    var resolveConfig = (config) => {
      const newConfig = mergeConfig({}, config);
      let { data, withXSRFToken, xsrfHeaderName, xsrfCookieName, headers, auth } = newConfig;
      newConfig.headers = headers = AxiosHeaders$1.from(headers);
      newConfig.url = buildURL(buildFullPath(newConfig.baseURL, newConfig.url), config.params, config.paramsSerializer);
      if (auth) {
        headers.set(
          "Authorization",
          "Basic " + btoa((auth.username || "") + ":" + (auth.password ? unescape(encodeURIComponent(auth.password)) : ""))
        );
      }
      let contentType;
      if (utils$1.isFormData(data)) {
        if (platform.hasStandardBrowserEnv || platform.hasStandardBrowserWebWorkerEnv) {
          headers.setContentType(void 0);
        } else if ((contentType = headers.getContentType()) !== false) {
          const [type2, ...tokens] = contentType ? contentType.split(";").map((token) => token.trim()).filter(Boolean) : [];
          headers.setContentType([type2 || "multipart/form-data", ...tokens].join("; "));
        }
      }
      if (platform.hasStandardBrowserEnv) {
        withXSRFToken && utils$1.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(newConfig));
        if (withXSRFToken || withXSRFToken !== false && isURLSameOrigin(newConfig.url)) {
          const xsrfValue = xsrfHeaderName && xsrfCookieName && cookies.read(xsrfCookieName);
          if (xsrfValue) {
            headers.set(xsrfHeaderName, xsrfValue);
          }
        }
      }
      return newConfig;
    };
    var isXHRAdapterSupported = typeof XMLHttpRequest !== "undefined";
    var xhrAdapter = isXHRAdapterSupported && function(config) {
      return new Promise(function dispatchXhrRequest(resolve, reject) {
        const _config = resolveConfig(config);
        let requestData = _config.data;
        const requestHeaders = AxiosHeaders$1.from(_config.headers).normalize();
        let { responseType, onUploadProgress, onDownloadProgress } = _config;
        let onCanceled;
        let uploadThrottled, downloadThrottled;
        let flushUpload, flushDownload;
        function done() {
          flushUpload && flushUpload();
          flushDownload && flushDownload();
          _config.cancelToken && _config.cancelToken.unsubscribe(onCanceled);
          _config.signal && _config.signal.removeEventListener("abort", onCanceled);
        }
        let request = new XMLHttpRequest();
        request.open(_config.method.toUpperCase(), _config.url, true);
        request.timeout = _config.timeout;
        function onloadend() {
          if (!request) {
            return;
          }
          const responseHeaders = AxiosHeaders$1.from(
            "getAllResponseHeaders" in request && request.getAllResponseHeaders()
          );
          const responseData = !responseType || responseType === "text" || responseType === "json" ? request.responseText : request.response;
          const response = {
            data: responseData,
            status: request.status,
            statusText: request.statusText,
            headers: responseHeaders,
            config,
            request
          };
          settle(function _resolve(value) {
            resolve(value);
            done();
          }, function _reject(err) {
            reject(err);
            done();
          }, response);
          request = null;
        }
        if ("onloadend" in request) {
          request.onloadend = onloadend;
        } else {
          request.onreadystatechange = function handleLoad() {
            if (!request || request.readyState !== 4) {
              return;
            }
            if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) {
              return;
            }
            setTimeout(onloadend);
          };
        }
        request.onabort = function handleAbort() {
          if (!request) {
            return;
          }
          reject(new AxiosError("Request aborted", AxiosError.ECONNABORTED, config, request));
          request = null;
        };
        request.onerror = function handleError() {
          reject(new AxiosError("Network Error", AxiosError.ERR_NETWORK, config, request));
          request = null;
        };
        request.ontimeout = function handleTimeout() {
          let timeoutErrorMessage = _config.timeout ? "timeout of " + _config.timeout + "ms exceeded" : "timeout exceeded";
          const transitional = _config.transitional || transitionalDefaults;
          if (_config.timeoutErrorMessage) {
            timeoutErrorMessage = _config.timeoutErrorMessage;
          }
          reject(new AxiosError(
            timeoutErrorMessage,
            transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED,
            config,
            request
          ));
          request = null;
        };
        requestData === void 0 && requestHeaders.setContentType(null);
        if ("setRequestHeader" in request) {
          utils$1.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
            request.setRequestHeader(key, val);
          });
        }
        if (!utils$1.isUndefined(_config.withCredentials)) {
          request.withCredentials = !!_config.withCredentials;
        }
        if (responseType && responseType !== "json") {
          request.responseType = _config.responseType;
        }
        if (onDownloadProgress) {
          [downloadThrottled, flushDownload] = progressEventReducer(onDownloadProgress, true);
          request.addEventListener("progress", downloadThrottled);
        }
        if (onUploadProgress && request.upload) {
          [uploadThrottled, flushUpload] = progressEventReducer(onUploadProgress);
          request.upload.addEventListener("progress", uploadThrottled);
          request.upload.addEventListener("loadend", flushUpload);
        }
        if (_config.cancelToken || _config.signal) {
          onCanceled = (cancel) => {
            if (!request) {
              return;
            }
            reject(!cancel || cancel.type ? new CanceledError(null, config, request) : cancel);
            request.abort();
            request = null;
          };
          _config.cancelToken && _config.cancelToken.subscribe(onCanceled);
          if (_config.signal) {
            _config.signal.aborted ? onCanceled() : _config.signal.addEventListener("abort", onCanceled);
          }
        }
        const protocol = parseProtocol(_config.url);
        if (protocol && platform.protocols.indexOf(protocol) === -1) {
          reject(new AxiosError("Unsupported protocol " + protocol + ":", AxiosError.ERR_BAD_REQUEST, config));
          return;
        }
        request.send(requestData || null);
      });
    };
    var composeSignals = (signals, timeout2) => {
      const { length } = signals = signals ? signals.filter(Boolean) : [];
      if (timeout2 || length) {
        let controller = new AbortController();
        let aborted;
        const onabort = function(reason) {
          if (!aborted) {
            aborted = true;
            unsubscribe();
            const err = reason instanceof Error ? reason : this.reason;
            controller.abort(err instanceof AxiosError ? err : new CanceledError(err instanceof Error ? err.message : err));
          }
        };
        let timer2 = timeout2 && setTimeout(() => {
          timer2 = null;
          onabort(new AxiosError(`timeout ${timeout2} of ms exceeded`, AxiosError.ETIMEDOUT));
        }, timeout2);
        const unsubscribe = () => {
          if (signals) {
            timer2 && clearTimeout(timer2);
            timer2 = null;
            signals.forEach((signal2) => {
              signal2.unsubscribe ? signal2.unsubscribe(onabort) : signal2.removeEventListener("abort", onabort);
            });
            signals = null;
          }
        };
        signals.forEach((signal2) => signal2.addEventListener("abort", onabort));
        const { signal } = controller;
        signal.unsubscribe = () => utils$1.asap(unsubscribe);
        return signal;
      }
    };
    var composeSignals$1 = composeSignals;
    var streamChunk = function* (chunk, chunkSize) {
      let len = chunk.byteLength;
      if (!chunkSize || len < chunkSize) {
        yield chunk;
        return;
      }
      let pos = 0;
      let end;
      while (pos < len) {
        end = pos + chunkSize;
        yield chunk.slice(pos, end);
        pos = end;
      }
    };
    var readBytes = async function* (iterable, chunkSize) {
      for await (const chunk of readStream(iterable)) {
        yield* streamChunk(chunk, chunkSize);
      }
    };
    var readStream = async function* (stream) {
      if (stream[Symbol.asyncIterator]) {
        yield* stream;
        return;
      }
      const reader = stream.getReader();
      try {
        for (; ; ) {
          const { done, value } = await reader.read();
          if (done) {
            break;
          }
          yield value;
        }
      } finally {
        await reader.cancel();
      }
    };
    var trackStream = (stream, chunkSize, onProgress, onFinish) => {
      const iterator = readBytes(stream, chunkSize);
      let bytes = 0;
      let done;
      let _onFinish = (e) => {
        if (!done) {
          done = true;
          onFinish && onFinish(e);
        }
      };
      return new ReadableStream({
        async pull(controller) {
          try {
            const { done: done2, value } = await iterator.next();
            if (done2) {
              _onFinish();
              controller.close();
              return;
            }
            let len = value.byteLength;
            if (onProgress) {
              let loadedBytes = bytes += len;
              onProgress(loadedBytes);
            }
            controller.enqueue(new Uint8Array(value));
          } catch (err) {
            _onFinish(err);
            throw err;
          }
        },
        cancel(reason) {
          _onFinish(reason);
          return iterator.return();
        }
      }, {
        highWaterMark: 2
      });
    };
    var isFetchSupported = typeof fetch === "function" && typeof Request === "function" && typeof Response === "function";
    var isReadableStreamSupported = isFetchSupported && typeof ReadableStream === "function";
    var encodeText = isFetchSupported && (typeof TextEncoder === "function" ? ((encoder) => (str) => encoder.encode(str))(new TextEncoder()) : async (str) => new Uint8Array(await new Response(str).arrayBuffer()));
    var test = (fn, ...args) => {
      try {
        return !!fn(...args);
      } catch (e) {
        return false;
      }
    };
    var supportsRequestStream = isReadableStreamSupported && test(() => {
      let duplexAccessed = false;
      const hasContentType = new Request(platform.origin, {
        body: new ReadableStream(),
        method: "POST",
        get duplex() {
          duplexAccessed = true;
          return "half";
        }
      }).headers.has("Content-Type");
      return duplexAccessed && !hasContentType;
    });
    var DEFAULT_CHUNK_SIZE = 64 * 1024;
    var supportsResponseStream = isReadableStreamSupported && test(() => utils$1.isReadableStream(new Response("").body));
    var resolvers = {
      stream: supportsResponseStream && ((res) => res.body)
    };
    isFetchSupported && ((res) => {
      ["text", "arrayBuffer", "blob", "formData", "stream"].forEach((type2) => {
        !resolvers[type2] && (resolvers[type2] = utils$1.isFunction(res[type2]) ? (res2) => res2[type2]() : (_, config) => {
          throw new AxiosError(`Response type '${type2}' is not supported`, AxiosError.ERR_NOT_SUPPORT, config);
        });
      });
    })(new Response());
    var getBodyLength = async (body) => {
      if (body == null) {
        return 0;
      }
      if (utils$1.isBlob(body)) {
        return body.size;
      }
      if (utils$1.isSpecCompliantForm(body)) {
        const _request = new Request(platform.origin, {
          method: "POST",
          body
        });
        return (await _request.arrayBuffer()).byteLength;
      }
      if (utils$1.isArrayBufferView(body) || utils$1.isArrayBuffer(body)) {
        return body.byteLength;
      }
      if (utils$1.isURLSearchParams(body)) {
        body = body + "";
      }
      if (utils$1.isString(body)) {
        return (await encodeText(body)).byteLength;
      }
    };
    var resolveBodyLength = async (headers, body) => {
      const length = utils$1.toFiniteNumber(headers.getContentLength());
      return length == null ? getBodyLength(body) : length;
    };
    var fetchAdapter = isFetchSupported && (async (config) => {
      let {
        url,
        method,
        data,
        signal,
        cancelToken,
        timeout: timeout2,
        onDownloadProgress,
        onUploadProgress,
        responseType,
        headers,
        withCredentials = "same-origin",
        fetchOptions
      } = resolveConfig(config);
      responseType = responseType ? (responseType + "").toLowerCase() : "text";
      let composedSignal = composeSignals$1([signal, cancelToken && cancelToken.toAbortSignal()], timeout2);
      let request;
      const unsubscribe = composedSignal && composedSignal.unsubscribe && (() => {
        composedSignal.unsubscribe();
      });
      let requestContentLength;
      try {
        if (onUploadProgress && supportsRequestStream && method !== "get" && method !== "head" && (requestContentLength = await resolveBodyLength(headers, data)) !== 0) {
          let _request = new Request(url, {
            method: "POST",
            body: data,
            duplex: "half"
          });
          let contentTypeHeader;
          if (utils$1.isFormData(data) && (contentTypeHeader = _request.headers.get("content-type"))) {
            headers.setContentType(contentTypeHeader);
          }
          if (_request.body) {
            const [onProgress, flush] = progressEventDecorator(
              requestContentLength,
              progressEventReducer(asyncDecorator(onUploadProgress))
            );
            data = trackStream(_request.body, DEFAULT_CHUNK_SIZE, onProgress, flush);
          }
        }
        if (!utils$1.isString(withCredentials)) {
          withCredentials = withCredentials ? "include" : "omit";
        }
        const isCredentialsSupported = "credentials" in Request.prototype;
        request = new Request(url, {
          ...fetchOptions,
          signal: composedSignal,
          method: method.toUpperCase(),
          headers: headers.normalize().toJSON(),
          body: data,
          duplex: "half",
          credentials: isCredentialsSupported ? withCredentials : void 0
        });
        let response = await fetch(request);
        const isStreamResponse = supportsResponseStream && (responseType === "stream" || responseType === "response");
        if (supportsResponseStream && (onDownloadProgress || isStreamResponse && unsubscribe)) {
          const options = {};
          ["status", "statusText", "headers"].forEach((prop) => {
            options[prop] = response[prop];
          });
          const responseContentLength = utils$1.toFiniteNumber(response.headers.get("content-length"));
          const [onProgress, flush] = onDownloadProgress && progressEventDecorator(
            responseContentLength,
            progressEventReducer(asyncDecorator(onDownloadProgress), true)
          ) || [];
          response = new Response(
            trackStream(response.body, DEFAULT_CHUNK_SIZE, onProgress, () => {
              flush && flush();
              unsubscribe && unsubscribe();
            }),
            options
          );
        }
        responseType = responseType || "text";
        let responseData = await resolvers[utils$1.findKey(resolvers, responseType) || "text"](response, config);
        !isStreamResponse && unsubscribe && unsubscribe();
        return await new Promise((resolve, reject) => {
          settle(resolve, reject, {
            data: responseData,
            headers: AxiosHeaders$1.from(response.headers),
            status: response.status,
            statusText: response.statusText,
            config,
            request
          });
        });
      } catch (err) {
        unsubscribe && unsubscribe();
        if (err && err.name === "TypeError" && /fetch/i.test(err.message)) {
          throw Object.assign(
            new AxiosError("Network Error", AxiosError.ERR_NETWORK, config, request),
            {
              cause: err.cause || err
            }
          );
        }
        throw AxiosError.from(err, err && err.code, config, request);
      }
    });
    var knownAdapters = {
      http: httpAdapter,
      xhr: xhrAdapter,
      fetch: fetchAdapter
    };
    utils$1.forEach(knownAdapters, (fn, value) => {
      if (fn) {
        try {
          Object.defineProperty(fn, "name", { value });
        } catch (e) {
        }
        Object.defineProperty(fn, "adapterName", { value });
      }
    });
    var renderReason = (reason) => `- ${reason}`;
    var isResolvedHandle = (adapter) => utils$1.isFunction(adapter) || adapter === null || adapter === false;
    var adapters = {
      getAdapter: (adapters2) => {
        adapters2 = utils$1.isArray(adapters2) ? adapters2 : [adapters2];
        const { length } = adapters2;
        let nameOrAdapter;
        let adapter;
        const rejectedReasons = {};
        for (let i = 0; i < length; i++) {
          nameOrAdapter = adapters2[i];
          let id2;
          adapter = nameOrAdapter;
          if (!isResolvedHandle(nameOrAdapter)) {
            adapter = knownAdapters[(id2 = String(nameOrAdapter)).toLowerCase()];
            if (adapter === void 0) {
              throw new AxiosError(`Unknown adapter '${id2}'`);
            }
          }
          if (adapter) {
            break;
          }
          rejectedReasons[id2 || "#" + i] = adapter;
        }
        if (!adapter) {
          const reasons = Object.entries(rejectedReasons).map(
            ([id2, state]) => `adapter ${id2} ` + (state === false ? "is not supported by the environment" : "is not available in the build")
          );
          let s = length ? reasons.length > 1 ? "since :\n" + reasons.map(renderReason).join("\n") : " " + renderReason(reasons[0]) : "as no adapter specified";
          throw new AxiosError(
            `There is no suitable adapter to dispatch the request ` + s,
            "ERR_NOT_SUPPORT"
          );
        }
        return adapter;
      },
      adapters: knownAdapters
    };
    function throwIfCancellationRequested(config) {
      if (config.cancelToken) {
        config.cancelToken.throwIfRequested();
      }
      if (config.signal && config.signal.aborted) {
        throw new CanceledError(null, config);
      }
    }
    function dispatchRequest(config) {
      throwIfCancellationRequested(config);
      config.headers = AxiosHeaders$1.from(config.headers);
      config.data = transformData.call(
        config,
        config.transformRequest
      );
      if (["post", "put", "patch"].indexOf(config.method) !== -1) {
        config.headers.setContentType("application/x-www-form-urlencoded", false);
      }
      const adapter = adapters.getAdapter(config.adapter || defaults$1.adapter);
      return adapter(config).then(function onAdapterResolution(response) {
        throwIfCancellationRequested(config);
        response.data = transformData.call(
          config,
          config.transformResponse,
          response
        );
        response.headers = AxiosHeaders$1.from(response.headers);
        return response;
      }, function onAdapterRejection(reason) {
        if (!isCancel(reason)) {
          throwIfCancellationRequested(config);
          if (reason && reason.response) {
            reason.response.data = transformData.call(
              config,
              config.transformResponse,
              reason.response
            );
            reason.response.headers = AxiosHeaders$1.from(reason.response.headers);
          }
        }
        return Promise.reject(reason);
      });
    }
    var VERSION = "1.7.9";
    var validators$1 = {};
    ["object", "boolean", "number", "function", "string", "symbol"].forEach((type2, i) => {
      validators$1[type2] = function validator2(thing) {
        return typeof thing === type2 || "a" + (i < 1 ? "n " : " ") + type2;
      };
    });
    var deprecatedWarnings = {};
    validators$1.transitional = function transitional(validator2, version, message) {
      function formatMessage(opt, desc) {
        return "[Axios v" + VERSION + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
      }
      return (value, opt, opts) => {
        if (validator2 === false) {
          throw new AxiosError(
            formatMessage(opt, " has been removed" + (version ? " in " + version : "")),
            AxiosError.ERR_DEPRECATED
          );
        }
        if (version && !deprecatedWarnings[opt]) {
          deprecatedWarnings[opt] = true;
          console.warn(
            formatMessage(
              opt,
              " has been deprecated since v" + version + " and will be removed in the near future"
            )
          );
        }
        return validator2 ? validator2(value, opt, opts) : true;
      };
    };
    validators$1.spelling = function spelling(correctSpelling) {
      return (value, opt) => {
        console.warn(`${opt} is likely a misspelling of ${correctSpelling}`);
        return true;
      };
    };
    function assertOptions(options, schema, allowUnknown) {
      if (typeof options !== "object") {
        throw new AxiosError("options must be an object", AxiosError.ERR_BAD_OPTION_VALUE);
      }
      const keys = Object.keys(options);
      let i = keys.length;
      while (i-- > 0) {
        const opt = keys[i];
        const validator2 = schema[opt];
        if (validator2) {
          const value = options[opt];
          const result2 = value === void 0 || validator2(value, opt, options);
          if (result2 !== true) {
            throw new AxiosError("option " + opt + " must be " + result2, AxiosError.ERR_BAD_OPTION_VALUE);
          }
          continue;
        }
        if (allowUnknown !== true) {
          throw new AxiosError("Unknown option " + opt, AxiosError.ERR_BAD_OPTION);
        }
      }
    }
    var validator = {
      assertOptions,
      validators: validators$1
    };
    var validators = validator.validators;
    var Axios = class {
      constructor(instanceConfig) {
        this.defaults = instanceConfig;
        this.interceptors = {
          request: new InterceptorManager$1(),
          response: new InterceptorManager$1()
        };
      }
      /**
       * Dispatch a request
       *
       * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
       * @param {?Object} config
       *
       * @returns {Promise} The Promise to be fulfilled
       */
      async request(configOrUrl, config) {
        try {
          return await this._request(configOrUrl, config);
        } catch (err) {
          if (err instanceof Error) {
            let dummy = {};
            Error.captureStackTrace ? Error.captureStackTrace(dummy) : dummy = new Error();
            const stack = dummy.stack ? dummy.stack.replace(/^.+\n/, "") : "";
            try {
              if (!err.stack) {
                err.stack = stack;
              } else if (stack && !String(err.stack).endsWith(stack.replace(/^.+\n.+\n/, ""))) {
                err.stack += "\n" + stack;
              }
            } catch (e) {
            }
          }
          throw err;
        }
      }
      _request(configOrUrl, config) {
        if (typeof configOrUrl === "string") {
          config = config || {};
          config.url = configOrUrl;
        } else {
          config = configOrUrl || {};
        }
        config = mergeConfig(this.defaults, config);
        const { transitional, paramsSerializer, headers } = config;
        if (transitional !== void 0) {
          validator.assertOptions(transitional, {
            silentJSONParsing: validators.transitional(validators.boolean),
            forcedJSONParsing: validators.transitional(validators.boolean),
            clarifyTimeoutError: validators.transitional(validators.boolean)
          }, false);
        }
        if (paramsSerializer != null) {
          if (utils$1.isFunction(paramsSerializer)) {
            config.paramsSerializer = {
              serialize: paramsSerializer
            };
          } else {
            validator.assertOptions(paramsSerializer, {
              encode: validators.function,
              serialize: validators.function
            }, true);
          }
        }
        validator.assertOptions(config, {
          baseUrl: validators.spelling("baseURL"),
          withXsrfToken: validators.spelling("withXSRFToken")
        }, true);
        config.method = (config.method || this.defaults.method || "get").toLowerCase();
        let contextHeaders = headers && utils$1.merge(
          headers.common,
          headers[config.method]
        );
        headers && utils$1.forEach(
          ["delete", "get", "head", "post", "put", "patch", "common"],
          (method) => {
            delete headers[method];
          }
        );
        config.headers = AxiosHeaders$1.concat(contextHeaders, headers);
        const requestInterceptorChain = [];
        let synchronousRequestInterceptors = true;
        this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
          if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config) === false) {
            return;
          }
          synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
          requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
        });
        const responseInterceptorChain = [];
        this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
          responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
        });
        let promise;
        let i = 0;
        let len;
        if (!synchronousRequestInterceptors) {
          const chain = [dispatchRequest.bind(this), void 0];
          chain.unshift.apply(chain, requestInterceptorChain);
          chain.push.apply(chain, responseInterceptorChain);
          len = chain.length;
          promise = Promise.resolve(config);
          while (i < len) {
            promise = promise.then(chain[i++], chain[i++]);
          }
          return promise;
        }
        len = requestInterceptorChain.length;
        let newConfig = config;
        i = 0;
        while (i < len) {
          const onFulfilled = requestInterceptorChain[i++];
          const onRejected = requestInterceptorChain[i++];
          try {
            newConfig = onFulfilled(newConfig);
          } catch (error) {
            onRejected.call(this, error);
            break;
          }
        }
        try {
          promise = dispatchRequest.call(this, newConfig);
        } catch (error) {
          return Promise.reject(error);
        }
        i = 0;
        len = responseInterceptorChain.length;
        while (i < len) {
          promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);
        }
        return promise;
      }
      getUri(config) {
        config = mergeConfig(this.defaults, config);
        const fullPath = buildFullPath(config.baseURL, config.url);
        return buildURL(fullPath, config.params, config.paramsSerializer);
      }
    };
    utils$1.forEach(["delete", "get", "head", "options"], function forEachMethodNoData(method) {
      Axios.prototype[method] = function(url, config) {
        return this.request(mergeConfig(config || {}, {
          method,
          url,
          data: (config || {}).data
        }));
      };
    });
    utils$1.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
      function generateHTTPMethod(isForm) {
        return function httpMethod(url, data, config) {
          return this.request(mergeConfig(config || {}, {
            method,
            headers: isForm ? {
              "Content-Type": "multipart/form-data"
            } : {},
            url,
            data
          }));
        };
      }
      Axios.prototype[method] = generateHTTPMethod();
      Axios.prototype[method + "Form"] = generateHTTPMethod(true);
    });
    var Axios$1 = Axios;
    var CancelToken = class {
      constructor(executor) {
        if (typeof executor !== "function") {
          throw new TypeError("executor must be a function.");
        }
        let resolvePromise;
        this.promise = new Promise(function promiseExecutor(resolve) {
          resolvePromise = resolve;
        });
        const token = this;
        this.promise.then((cancel) => {
          if (!token._listeners)
            return;
          let i = token._listeners.length;
          while (i-- > 0) {
            token._listeners[i](cancel);
          }
          token._listeners = null;
        });
        this.promise.then = (onfulfilled) => {
          let _resolve;
          const promise = new Promise((resolve) => {
            token.subscribe(resolve);
            _resolve = resolve;
          }).then(onfulfilled);
          promise.cancel = function reject() {
            token.unsubscribe(_resolve);
          };
          return promise;
        };
        executor(function cancel(message, config, request) {
          if (token.reason) {
            return;
          }
          token.reason = new CanceledError(message, config, request);
          resolvePromise(token.reason);
        });
      }
      /**
       * Throws a `CanceledError` if cancellation has been requested.
       */
      throwIfRequested() {
        if (this.reason) {
          throw this.reason;
        }
      }
      /**
       * Subscribe to the cancel signal
       */
      subscribe(listener) {
        if (this.reason) {
          listener(this.reason);
          return;
        }
        if (this._listeners) {
          this._listeners.push(listener);
        } else {
          this._listeners = [listener];
        }
      }
      /**
       * Unsubscribe from the cancel signal
       */
      unsubscribe(listener) {
        if (!this._listeners) {
          return;
        }
        const index2 = this._listeners.indexOf(listener);
        if (index2 !== -1) {
          this._listeners.splice(index2, 1);
        }
      }
      toAbortSignal() {
        const controller = new AbortController();
        const abort = (err) => {
          controller.abort(err);
        };
        this.subscribe(abort);
        controller.signal.unsubscribe = () => this.unsubscribe(abort);
        return controller.signal;
      }
      /**
       * Returns an object that contains a new `CancelToken` and a function that, when called,
       * cancels the `CancelToken`.
       */
      static source() {
        let cancel;
        const token = new CancelToken(function executor(c2) {
          cancel = c2;
        });
        return {
          token,
          cancel
        };
      }
    };
    var CancelToken$1 = CancelToken;
    function spread(callback) {
      return function wrap(arr) {
        return callback.apply(null, arr);
      };
    }
    function isAxiosError(payload) {
      return utils$1.isObject(payload) && payload.isAxiosError === true;
    }
    var HttpStatusCode = {
      Continue: 100,
      SwitchingProtocols: 101,
      Processing: 102,
      EarlyHints: 103,
      Ok: 200,
      Created: 201,
      Accepted: 202,
      NonAuthoritativeInformation: 203,
      NoContent: 204,
      ResetContent: 205,
      PartialContent: 206,
      MultiStatus: 207,
      AlreadyReported: 208,
      ImUsed: 226,
      MultipleChoices: 300,
      MovedPermanently: 301,
      Found: 302,
      SeeOther: 303,
      NotModified: 304,
      UseProxy: 305,
      Unused: 306,
      TemporaryRedirect: 307,
      PermanentRedirect: 308,
      BadRequest: 400,
      Unauthorized: 401,
      PaymentRequired: 402,
      Forbidden: 403,
      NotFound: 404,
      MethodNotAllowed: 405,
      NotAcceptable: 406,
      ProxyAuthenticationRequired: 407,
      RequestTimeout: 408,
      Conflict: 409,
      Gone: 410,
      LengthRequired: 411,
      PreconditionFailed: 412,
      PayloadTooLarge: 413,
      UriTooLong: 414,
      UnsupportedMediaType: 415,
      RangeNotSatisfiable: 416,
      ExpectationFailed: 417,
      ImATeapot: 418,
      MisdirectedRequest: 421,
      UnprocessableEntity: 422,
      Locked: 423,
      FailedDependency: 424,
      TooEarly: 425,
      UpgradeRequired: 426,
      PreconditionRequired: 428,
      TooManyRequests: 429,
      RequestHeaderFieldsTooLarge: 431,
      UnavailableForLegalReasons: 451,
      InternalServerError: 500,
      NotImplemented: 501,
      BadGateway: 502,
      ServiceUnavailable: 503,
      GatewayTimeout: 504,
      HttpVersionNotSupported: 505,
      VariantAlsoNegotiates: 506,
      InsufficientStorage: 507,
      LoopDetected: 508,
      NotExtended: 510,
      NetworkAuthenticationRequired: 511
    };
    Object.entries(HttpStatusCode).forEach(([key, value]) => {
      HttpStatusCode[value] = key;
    });
    var HttpStatusCode$1 = HttpStatusCode;
    function createInstance(defaultConfig) {
      const context = new Axios$1(defaultConfig);
      const instance = bind(Axios$1.prototype.request, context);
      utils$1.extend(instance, Axios$1.prototype, context, { allOwnKeys: true });
      utils$1.extend(instance, context, null, { allOwnKeys: true });
      instance.create = function create2(instanceConfig) {
        return createInstance(mergeConfig(defaultConfig, instanceConfig));
      };
      return instance;
    }
    var axios = createInstance(defaults$1);
    axios.Axios = Axios$1;
    axios.CanceledError = CanceledError;
    axios.CancelToken = CancelToken$1;
    axios.isCancel = isCancel;
    axios.VERSION = VERSION;
    axios.toFormData = toFormData;
    axios.AxiosError = AxiosError;
    axios.Cancel = axios.CanceledError;
    axios.all = function all(promises) {
      return Promise.all(promises);
    };
    axios.spread = spread;
    axios.isAxiosError = isAxiosError;
    axios.mergeConfig = mergeConfig;
    axios.AxiosHeaders = AxiosHeaders$1;
    axios.formToJSON = (thing) => formDataToJSON(utils$1.isHTMLForm(thing) ? new FormData(thing) : thing);
    axios.getAdapter = adapters.getAdapter;
    axios.HttpStatusCode = HttpStatusCode$1;
    axios.default = axios;
    module2.exports = axios;
  }
});

// node_modules/wikipedia/dist/errors.js
var require_errors = __commonJS({
  "node_modules/wikipedia/dist/errors.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.citationError = exports2.pdfError = exports2.fcError = exports2.eventsError = exports2.mediaError = exports2.relatedError = exports2.introError = exports2.preloadError = exports2.infoboxError = exports2.coordinatesError = exports2.geoSearchError = exports2.linksError = exports2.categoriesError = exports2.contentError = exports2.htmlError = exports2.imageError = exports2.summaryError = exports2.pageError = exports2.autocompletionsError = exports2.searchError = exports2.wikiError = void 0;
    var wikiError = class extends Error {
      constructor(message, code) {
        super(message);
        this.name = "wikiError";
        this.code = code;
      }
    };
    exports2.wikiError = wikiError;
    var searchError = class extends wikiError {
      constructor(message) {
        super(message);
        this.name = "searchError";
      }
    };
    exports2.searchError = searchError;
    var autocompletionsError = class extends wikiError {
      constructor(message) {
        super(message);
        this.name = "autocompletionsError";
      }
    };
    exports2.autocompletionsError = autocompletionsError;
    var pageError = class extends wikiError {
      constructor(message) {
        super(message);
        this.name = "pageError";
      }
    };
    exports2.pageError = pageError;
    var summaryError = class extends wikiError {
      constructor(message) {
        super(message);
        this.name = "summaryError";
      }
    };
    exports2.summaryError = summaryError;
    var imageError = class extends wikiError {
      constructor(message) {
        super(message);
        this.name = "imageError";
      }
    };
    exports2.imageError = imageError;
    var htmlError = class extends wikiError {
      constructor(message) {
        super(message);
        this.name = "htmlError";
      }
    };
    exports2.htmlError = htmlError;
    var contentError = class extends wikiError {
      constructor(message) {
        super(message);
        this.name = "contentError";
      }
    };
    exports2.contentError = contentError;
    var categoriesError = class extends wikiError {
      constructor(message) {
        super(message);
        this.name = "categoriesError";
      }
    };
    exports2.categoriesError = categoriesError;
    var linksError = class extends wikiError {
      constructor(message) {
        super(message);
        this.name = "linksError";
      }
    };
    exports2.linksError = linksError;
    var geoSearchError = class extends wikiError {
      constructor(message) {
        super(message);
        this.name = "geoSearchError";
      }
    };
    exports2.geoSearchError = geoSearchError;
    var coordinatesError = class extends wikiError {
      constructor(message) {
        super(message);
        this.name = "coordinatesError";
      }
    };
    exports2.coordinatesError = coordinatesError;
    var infoboxError = class extends wikiError {
      constructor(message) {
        super(message);
        this.name = "infoboxError";
      }
    };
    exports2.infoboxError = infoboxError;
    var preloadError = class extends wikiError {
      constructor(message) {
        super(message);
        this.name = "preloadError";
      }
    };
    exports2.preloadError = preloadError;
    var introError = class extends wikiError {
      constructor(message) {
        super(message);
        this.name = "introError";
      }
    };
    exports2.introError = introError;
    var relatedError = class extends wikiError {
      constructor(message) {
        super(message);
        this.name = "relatedError";
      }
    };
    exports2.relatedError = relatedError;
    var mediaError = class extends wikiError {
      constructor(message) {
        super(message);
        this.name = "mediaError";
      }
    };
    exports2.mediaError = mediaError;
    var eventsError = class extends wikiError {
      constructor(message) {
        super(message);
        this.name = "eventsError";
      }
    };
    exports2.eventsError = eventsError;
    var fcError = class extends wikiError {
      constructor(message) {
        super(message);
        this.name = "featuredContentError";
      }
    };
    exports2.fcError = fcError;
    var pdfError = class extends wikiError {
      constructor(message) {
        super(message);
        this.name = "pdfError";
      }
    };
    exports2.pdfError = pdfError;
    var citationError = class extends wikiError {
      constructor(message) {
        super(message);
        this.name = "citationError";
      }
    };
    exports2.citationError = citationError;
  }
});

// node_modules/wikipedia/dist/request.js
var require_request = __commonJS({
  "node_modules/wikipedia/dist/request.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.setUserAgent = exports2.setAPIUrl = exports2.returnRestUrl = exports2.makeRestRequest = void 0;
    var axios_1 = require_axios();
    var errors_12 = require_errors();
    var API_URL = "https://en.wikipedia.org/w/api.php?";
    var REST_API_URL = "https://en.wikipedia.org/api/rest_v1/";
    var USER_AGENT = "wikipedia (https://github.com/dopecodez/Wikipedia/)";
    async function callAPI(url) {
      const options = {
        headers: {
          "Api-User-Agent": USER_AGENT
        }
      };
      try {
        const { data } = await axios_1.default.get(url, options);
        return data;
      } catch (error) {
        throw new errors_12.wikiError(error);
      }
    }
    async function makeRequest(params, redirect = true) {
      const search = { ...params };
      search["format"] = "json";
      if (redirect) {
        search["redirects"] = "";
      }
      if (!params.action) {
        search["action"] = "query";
      }
      search["origin"] = "*";
      let searchParam = "";
      Object.keys(search).forEach((key) => {
        searchParam += `${key}=${search[key]}&`;
      });
      return await callAPI(encodeURI(API_URL + searchParam));
    }
    async function makeRestRequest(path, redirect = true) {
      if (!redirect) {
        path += "?redirect=false";
      }
      return await callAPI(encodeURI(REST_API_URL + path));
    }
    exports2.makeRestRequest = makeRestRequest;
    function returnRestUrl(path) {
      return encodeURI(REST_API_URL + path);
    }
    exports2.returnRestUrl = returnRestUrl;
    function setAPIUrl(prefix) {
      API_URL = "https://" + prefix.toLowerCase() + ".wikipedia.org/w/api.php?";
      REST_API_URL = "https://" + prefix.toLowerCase() + ".wikipedia.org/api/rest_v1/";
      return API_URL;
    }
    exports2.setAPIUrl = setAPIUrl;
    function setUserAgent(userAgent) {
      USER_AGENT = userAgent;
    }
    exports2.setUserAgent = setUserAgent;
    exports2.default = makeRequest;
  }
});

// node_modules/wikipedia/dist/messages.js
var require_messages = __commonJS({
  "node_modules/wikipedia/dist/messages.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.MSGS = void 0;
    exports2.MSGS = {
      PAGE_NOT_SUGGEST: "No page with given title suggested : ",
      PAGE_NOT_EXIST: "No page with given title exists : ",
      INFOBOX_NOT_EXIST: "Info cannot be parsed for given page"
    };
  }
});

// node_modules/wikipedia/dist/utils.js
var require_utils = __commonJS({
  "node_modules/wikipedia/dist/utils.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getCurrentDay = exports2.getCurrentMonth = exports2.getCurrentYear = exports2.setPageId = exports2.setPageIdOrTitleParam = exports2.setTitleForPage = exports2.isString = void 0;
    var _1 = require_dist();
    var errors_12 = require_errors();
    var messages_12 = require_messages();
    function isString(title) {
      return isNaN(title);
    }
    exports2.isString = isString;
    async function setTitleForPage(title) {
      {
        const searchResult = await _1.default.search(title, { limit: 1, suggestion: true });
        if (!searchResult.suggestion && searchResult.results.length == 0) {
          throw new errors_12.pageError(`${messages_12.MSGS.PAGE_NOT_SUGGEST}${title}`);
        }
        title = searchResult.suggestion || title;
        return title;
      }
    }
    exports2.setTitleForPage = setTitleForPage;
    function setPageIdOrTitleParam(params, title) {
      if (isString(title)) {
        params.titles = title;
      } else {
        params.pageids = title;
      }
      return params;
    }
    exports2.setPageIdOrTitleParam = setPageIdOrTitleParam;
    function setPageId(params, results) {
      let pageId;
      if (params.pageIds) {
        pageId = params.pageIds;
      } else {
        pageId = Object.keys(results.query.pages)[0];
      }
      return pageId;
    }
    exports2.setPageId = setPageId;
    function getCurrentYear() {
      const date = new Date();
      const year = date.getFullYear();
      return year;
    }
    exports2.getCurrentYear = getCurrentYear;
    function getCurrentMonth() {
      const date = new Date();
      const month = date.getMonth();
      return month + 1;
    }
    exports2.getCurrentMonth = getCurrentMonth;
    function getCurrentDay() {
      const date = new Date();
      const day = date.getDate();
      return day;
    }
    exports2.getCurrentDay = getCurrentDay;
  }
});

// node_modules/camelcase/index.js
var require_camelcase = __commonJS({
  "node_modules/camelcase/index.js"(exports2, module2) {
    "use strict";
    function preserveCamelCase(str) {
      let isLastCharLower = false;
      let isLastCharUpper = false;
      let isLastLastCharUpper = false;
      for (let i = 0; i < str.length; i++) {
        const c2 = str[i];
        if (isLastCharLower && /[a-zA-Z]/.test(c2) && c2.toUpperCase() === c2) {
          str = str.substr(0, i) + "-" + str.substr(i);
          isLastCharLower = false;
          isLastLastCharUpper = isLastCharUpper;
          isLastCharUpper = true;
          i++;
        } else if (isLastCharUpper && isLastLastCharUpper && /[a-zA-Z]/.test(c2) && c2.toLowerCase() === c2) {
          str = str.substr(0, i - 1) + "-" + str.substr(i - 1);
          isLastLastCharUpper = isLastCharUpper;
          isLastCharUpper = false;
          isLastCharLower = true;
        } else {
          isLastCharLower = c2.toLowerCase() === c2;
          isLastLastCharUpper = isLastCharUpper;
          isLastCharUpper = c2.toUpperCase() === c2;
        }
      }
      return str;
    }
    module2.exports = function(str) {
      if (arguments.length > 1) {
        str = Array.from(arguments).map((x3) => x3.trim()).filter((x3) => x3.length).join("-");
      } else {
        str = str.trim();
      }
      if (str.length === 0) {
        return "";
      }
      if (str.length === 1) {
        return str.toLowerCase();
      }
      if (/^[a-z0-9]+$/.test(str)) {
        return str;
      }
      const hasUpperCase = str !== str.toLowerCase();
      if (hasUpperCase) {
        str = preserveCamelCase(str);
      }
      return str.replace(/^[_.\- ]+/, "").toLowerCase().replace(/[_.\- ]+(\w|$)/g, (m2, p1) => p1.toUpperCase());
    };
  }
});

// node_modules/infobox-parser/build/bundle.min.js
var require_bundle_min = __commonJS({
  "node_modules/infobox-parser/build/bundle.min.js"(exports2, module2) {
    "use strict";
    function _interopDefault(e) {
      return e && "object" == typeof e && "default" in e ? e.default : e;
    }
    function trimWrappers(e) {
      return e.replace(/\[\[/g, "").replace(/\]\]/g, "").replace(/\{\{/g, "").replace(/\}\}/g, "").trim();
    }
    function trimOr(e) {
      var t = e.indexOf("|");
      return -1 !== t ? e.substring(0, t) : e;
    }
    function getValue(e, t) {
      if (!e)
        return null;
      var r = e.trim().replace(/File:/, "").replace(/\{\{\d+\}\}/g, "").replace(extraPropertyPattern, "").replace(endingPattern, "");
      if ("y" === r || "yes" === r)
        return true;
      if ("birthPlace" == t)
        return e.trim();
      var a2 = r.match(linksPattern);
      return a2 ? a2[0].split(linkSeparatorPattern).filter(function(e3) {
        return e3;
      }) : trimOr(trimWrappers(r));
    }
    function dataType(e) {
      var t = e.globalPattern, r = e.parsePattern, a2 = e.parse, n = e.variable, l = e.name;
      return function(e3) {
        var i = e3.match(t);
        if (!i) {
          var s;
          return s = {}, defineProperty(s, l, []), defineProperty(s, "sourceAfter", e3), s;
        }
        var o = i.map(function(e4) {
          return a2(e4.match(r));
        }), u = i.reduce(function(e4, t2, r2) {
          return o[r2] === DO_NOT_REPLACE ? e4 : e4.replace(t2, "$" + n + "_" + r2);
        }, e3);
        return { data: defineProperty({}, l, o), sourceAfter: u };
      };
    }
    function byDataHandler(e, t) {
      var r = e.source, a2 = e.context, n = t(r), l = n.data, i = n.sourceAfter;
      return { context: Object.assign({}, a2, l), source: i };
    }
    function extractData(e) {
      return dataTypes$1.map(function(e3) {
        return e3.handler;
      }).reduce(byDataHandler, { context: {}, source: e });
    }
    function findPropertyList(e) {
      var t = e.match(keyValueGlobalPattern);
      return t ? t.map(function(e3) {
        var t2 = keyValuePattern.exec(e3);
        if (!t2)
          return null;
        var r = slicedToArray(t2, 3), a2 = r[1], n = r[2], l = camelCase(a2.trim());
        return { key: l, value: getValue(n, l) };
      }).filter(function(e3) {
        return e3;
      }) : [];
    }
    function fillVariable(e, t) {
      var r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {}, a2 = r.simplifyDataValues;
      if ("string" != typeof e)
        return console.log("Warning: Something went wrong. Could not fill variables in: (" + (void 0 === e ? "undefined" : _typeof(e)) + ") " + JSON.stringify(e)), {};
      var n = dataTypes$1.find(function(t2) {
        return e.match(t2.pattern);
      });
      if (n) {
        var l = n.pattern.exec(e), i = slicedToArray(l, 2), s = i[0], o = i[1], u = t[n.name][parseInt(o, 10)];
        return a2 || "string" != typeof u ? u : e.replace(s, u);
      }
      return e;
    }
    function fillVariables(e, t, r) {
      if (void 0 === e)
        return e;
      if (e instanceof Date)
        return e;
      if ("number" == typeof e)
        return e;
      if (Array.isArray(e))
        return e.map(function(e3) {
          return fillVariables(e3, t, r);
        });
      if ("object" === (void 0 === e ? "undefined" : _typeof(e)))
        return Object.keys(e).reduce(function(a3, n) {
          return Object.assign(a3, defineProperty({}, n, fillVariables(e[n], t, r)));
        }, {});
      var a2 = fillVariable(e, t, r);
      return a2 === e ? e : fillVariables(a2, t, r);
    }
    function handleSmallData(e, t, r) {
      var a2 = r.simplifyDataValues;
      if ("string" == typeof e && e.match(smallDataType.pattern)) {
        var n = e.replace(smallDataType.pattern, "").replace(/,/, "").trim(), l = smallDataType.pattern.exec(e), i = slicedToArray(l, 2), s = i[1], o = t[smallDataType.name][parseInt(s, 10)], u = { primary: getVariableValue(n, t, { simplifyDataValues: a2 }), secondary: getVariableValue(o, t, { simplifyDataValues: a2 }) };
        return a2 ? u.primary : u;
      }
      return null;
    }
    function getVariableValue(e, t) {
      var r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {}, a2 = r.simplifyDataValues, n = handleSmallData(e, t, { simplifyDataValues: a2 });
      return n || fillVariables(e, t, { simplifyDataValues: a2 });
    }
    function reduceVariable(e, t, r, a2) {
      if (null === t)
        return null;
      if ("boolean" == typeof t)
        return t;
      if (Array.isArray(t))
        return t.map(function(e3) {
          return getVariableValue(e3, r, a2);
        });
      if (e.match(/areaTotal/) || e.match(/population/)) {
        var n = numberParse(t);
        if (false === n && (n = parseFloat(t, 10)), !isNaN(n))
          return n;
      }
      if (e.match(/date/i)) {
        var l = +new Date(t);
        if (!isNaN(l))
          return new Date(t);
      }
      var i = getVariableValue(t, r, a2);
      return Array.isArray(i) ? i.map(function(e3) {
        return getVariableValue(e3, r, a2);
      }) : i;
    }
    function byVariableReduction(e, t) {
      return function(r, a2) {
        var n = a2.key, l = a2.value, i = reduceVariable(n, l, e, t);
        return "" === i || null === i ? r : Object.assign({}, r, defineProperty({}, n, i));
      };
    }
    function extractProperties(e) {
      var t = e.source, r = e.context, a2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, n = a2.simplifyDataValues, l = void 0 === n || n;
      return findPropertyList(t).reduce(byVariableReduction(r, { simplifyDataValues: l }), {});
    }
    function transformProperties(e) {
      return Object.keys(e).reduce(function(t, r) {
        var a2 = e[r], n = r.match(blankNamePattern);
        if (n) {
          var l = n[1] || "", i = e["blank" + l + "NameSec2"], s = e["blank" + l + "InfoSec2"];
          return "string" != typeof i ? t : Object.assign(t, defineProperty({}, camelCase(i), s));
        }
        return r.match(blankInfoPattern) ? t : Object.assign(t, defineProperty({}, r, a2));
      }, {});
    }
    function findOuterIndex(e) {
      for (var t = [], r = 0; r < e.length - 1; r++) {
        var a2 = e.substr(r, 2);
        if ("{{" !== a2) {
          if ("}}" === a2) {
            t.pop();
            if (0 === t.length)
              return r + 2;
            r++;
          }
        } else
          t.push(r), r++;
      }
    }
    function parse(e) {
      var t = e.match(infoBoxStartPattern);
      if (!t)
        return { data: e, sourceLeft: null };
      var r = t.index, a2 = e.substring(r), n = findOuterIndex(a2);
      if (!n)
        return { data: e, sourceLeft: null };
      var l = a2.substring(0, n), i = e.substring(n);
      return { data: l, sourceLeft: !i.match(infoBoxStartPattern) ? null : i };
    }
    function extractInfoboxes(e) {
      for (var t = parse(e), r = [t.data]; t.sourceLeft; )
        t = parse(t.sourceLeft), r.push(t.data);
      return r;
    }
    function cleanSource(e) {
      var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r = t.removeSmall, a2 = void 0 !== r && r, n = t.removeReferences;
      return (void 0 === n || n) && (e = e.replace(/<ref(\s\w+=[^>]+)?>.*<\/ref>/g, "").replace(/<ref(\s\w+=[^>]+)?\s?\/>/g, "")), a2 && (e = e.replace(/<small>.*<\/small>/g, "")), e.replace(/'''?/g, "").replace(/\|display=inline/g, "").replace(/<br\s?\/?>/g, ",").replace(/&minus;/g, "-").replace(/{{Sndash}}/g, "\u2013").replace(/<sup>/g, "^").replace(/\{\{sfn\|([^\}\}]+)\}\}/g, "").replace(/\{\{efn\|([^\}\}]+)\}\}/g, "").replace(/−/g, "-").replace(/<\/sup>/g, "").replace(/\{\{\s*nowrap\s*\|([^\n\}]+)\}\}/gi, "$1").replace(/\{\{\s*Avoid\swrap\s*\|([^\n\}]+)\}\}/gi, "$1").replace(/<!--([\s\S]*?)-->/g, "").replace(/&nbsp;/g, " ").replace("|''See list''", "");
    }
    function transformRowSpan(e) {
      return e.map(transformCells).reduce(function(e3, t, r) {
        for (var a2 = 0 === r ? 0 : 1, n = 0; n < t.length; n++)
          e3[n + a2] || (e3[n + a2] = {}), t[n] && (e3[n + a2][t[n]] = 1);
        return e3;
      }, []).map(function(e3) {
        return Object.keys(e3).join(",");
      }).join(" || ");
    }
    function clean(e) {
      return e.substring(2, e.length - 2).replace(linkPattern$1, function(e3, t) {
        return t.split("|")[0];
      }).replace(/'''?/g, "");
    }
    function parseRow(e) {
      var t = e[0].match(/BS(\d)/), r = e[0].substring(2), a2 = 1, n = [], l = 1;
      for (t && (a2 = t[1], r = e[0].substring(3)); l <= a2; l++)
        n.push(e[l]);
      return { type: r, margin: e[l++], text1: e[l++], text2: e[l++], comment: e[l++], icons: n };
    }
    function getMatches(e, t) {
      for (var r = void 0, a2 = []; null !== (r = t.exec(e)); )
        a2.push({ value: r[1] && r[1].trim(), start: r.index, end: r.index + r[0].length });
      return a2;
    }
    function parseTableData(e) {
      var t = e.match(rowPattern$1);
      return t ? t.map(function(e3) {
        var t2 = e3.match(rowPatternSingle);
        return slicedToArray(t2, 2)[1].trim().split("|").slice(1);
      }) : [];
    }
    function getTables(e) {
      var t = getMatches(e, tableStartPattern$1), r = getMatches(e, tableEndPattern$1);
      return t.map(function(t2, a2) {
        var n = r[a2];
        if (!n)
          throw new Error("[Table Parsing] Failed to pair table");
        return { rows: parseTableData(e.substring(t2.end, n.start).trim().replace(/'''/g, "")), start: t2.start, end: n.end };
      });
    }
    function last(e) {
      return e.length ? e[e.length - 1] : void 0;
    }
    function parseInfobox(e, t) {
      var r = extractInfoboxes(e).map(function(e3) {
        return transformProperties(extractProperties(extractData(cleanSource(e3, t)), t));
      });
      if (!r.length)
        return {};
      var a2 = { general: r.shift() };
      return r.forEach(function(e3) {
        var t2 = e3.type;
        t2 ? a2[camelCase(t2)] = e3 : Object.assign(a2, { general: Object.assign({}, a2.general, e3) });
      }), a2.tables = parseTables(e), a2.bsTables = parseBsTables(e), a2.lists = parseLists(e), a2;
    }
    var camelCase = _interopDefault(require_camelcase());
    var _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
      return typeof e;
    } : function(e) {
      return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
    };
    var defineProperty = function(e, t, r) {
      return t in e ? Object.defineProperty(e, t, { value: r, enumerable: true, configurable: true, writable: true }) : e[t] = r, e;
    };
    var slicedToArray = function() {
      function e(e3, t) {
        var r = [], a2 = true, n = false, l = void 0;
        try {
          for (var i, s = e3[Symbol.iterator](); !(a2 = (i = s.next()).done) && (r.push(i.value), !t || r.length !== t); a2 = true)
            ;
        } catch (e4) {
          n = true, l = e4;
        } finally {
          try {
            !a2 && s.return && s.return();
          } finally {
            if (n)
              throw l;
          }
        }
        return r;
      }
      return function(t, r) {
        if (Array.isArray(t))
          return t;
        if (Symbol.iterator in Object(t))
          return e(t, r);
        throw new TypeError("Invalid attempt to destructure non-iterable instance");
      };
    }();
    var toConsumableArray = function(e) {
      if (Array.isArray(e)) {
        for (var t = 0, r = Array(e.length); t < e.length; t++)
          r[t] = e[t];
        return r;
      }
      return Array.from(e);
    };
    var smallGlobalPattern = /\{\{small\|([^\}\}]+)\}\}/g;
    var smallPattern = /small\|([^\}\}]+)\}\}/;
    var small = { globalPattern: smallGlobalPattern, parsePattern: smallPattern, parse: function(e) {
      return slicedToArray(e, 2)[1];
    }, variable: "SMALL", name: "smalls" };
    var flagGlobalPattern = /\{\{flag\|([^\}\}]+)\}\}/g;
    var flagPattern = /flag\|([^\}\}]+)\}\}/;
    var flag = { globalPattern: flagGlobalPattern, parsePattern: flagPattern, parse: function(e) {
      return slicedToArray(e, 2)[1];
    }, variable: "FLAG", name: "flags" };
    var coordsGlobalPattern = /\{\{coord\|([^\}\}]+)\}\}/g;
    var coordsPattern = /coord\|([^\}\}]+)\}\}/;
    var coords = { globalPattern: coordsGlobalPattern, parsePattern: coordsPattern, parse: function(e) {
      return slicedToArray(e, 2)[1];
    }, variable: "COORD", name: "coords" };
    var globalPattern = /\[\[([^\]\|]+)\|?([^\]]+)?\]\]/g;
    var pattern = /\[\[([^\]\|]+)\|?([^\]]+)?\]\]/;
    var instances = { globalPattern, parsePattern: pattern, parse: function(e) {
      var t = slicedToArray(e, 3), r = t[1], a2 = t[2];
      return r || a2;
    }, variable: "INSTANCE", name: "instances" };
    var extraPropertyPattern = /\n?\s?\|\s?\w+$/;
    var endingPattern = /\n\}\}$/;
    var linksPattern = /((\$\w+_\d+)\s*,?\s*){2,}/g;
    var linkSeparatorPattern = /[,\s?]/g;
    var listItemPrefixPattern = /^\|\s?/;
    var unbulletedListGlobalPattern = /\{\{(?:unbulleted list|ubl|ubt|ublist|unbullet)\s?\|([^\}\}]+)\}\}/gi;
    var unbulletedListItemPattern = /\|\s*([^|}]+)/g;
    var unbulletedLists = { globalPattern: unbulletedListGlobalPattern, parsePattern: unbulletedListItemPattern, parse: function(e) {
      return e ? e.map(function(e3) {
        return e3.replace(listItemPrefixPattern, "").trim();
      }).filter(function(e3) {
        return e3 && e3.length;
      }) : [];
    }, variable: "UNBULLETED_LIST", name: "unbulletedLists" };
    var listItemPrefixPattern$1 = /^\*\s*/;
    var plainListGlobalPattern = /\n(\*\s*[^*|]+)+/g;
    var plainListItemPattern = /\*\s*([^*|]+)/g;
    var unmarkedLists = { globalPattern: plainListGlobalPattern, parsePattern: plainListItemPattern, parse: function(e) {
      return e ? e.map(function(e3) {
        return e3.replace(listItemPrefixPattern$1, "").trim();
      }).filter(function(e3) {
        return e3 && e3.length;
      }) : [];
    }, variable: "UNMARKED_LIST", name: "unmarkedLists" };
    var listItemPrefixPattern$2 = /^\*\s?/;
    var plainListGlobalPattern$1 = /\{\{f?p?P?l?a?i?n?t?\s?list\s?\|([^\}\}]+)\}\}/g;
    var plainListItemPattern$1 = /\*\s*([^*}]+)/g;
    var plainLists = { globalPattern: plainListGlobalPattern$1, parsePattern: plainListItemPattern$1, parse: function(e) {
      return e ? e.map(function(e3) {
        return e3.replace(listItemPrefixPattern$2, "").trim();
      }).filter(function(e3) {
        return e3 && e3.length;
      }) : [];
    }, variable: "PLAIN_LIST", name: "plainLists" };
    var marriageGlobalPattern = /\{\{Marriage\|([^\}\}]+)\}\}/gi;
    var marriagePattern = /Marriage\|([^|]+)\|([^|]*)(.*)\}\}/i;
    var marriages = { globalPattern: marriageGlobalPattern, parsePattern: marriagePattern, parse: function(e) {
      var t = slicedToArray(e, 3);
      return { who: t[1], married: t[2] };
    }, variable: "MARRIAGE", name: "marriages" };
    var nbayGlobalPattern = /\{\{nbay\|([^\}\}]+)\}\}/gi;
    var nbayPattern = /nbay\|([^|]+)\|(.*)\}\}/i;
    var nbay = { globalPattern: nbayGlobalPattern, parsePattern: nbayPattern, parse: function(e) {
      var t = slicedToArray(e, 3), r = t[1];
      t[2];
      return r;
    }, variable: "nbay", name: "nbay" };
    var otherGlobalPattern = /\{\{([^|\n]+)\|([^|\n]+)\|?([^\}\n]+)?\}\}/g;
    var otherPattern = /\{\{([^|\n]+)\|([^|\n]+)\|?([^\}\n]+)?\}\}/;
    var other = { globalPattern: otherGlobalPattern, parsePattern: otherPattern, parse: function(e) {
      var t = slicedToArray(e, 4), r = t[1];
      t[2], t[3];
      return r;
    }, variable: "OTHER", name: "others" };
    var hlistGlobalPattern = /\{\{hlist\|([^\}\}]+)\}\}/gi;
    var hlistPattern = /hlist\|(.*)\n?\}\}/i;
    var hlist = { globalPattern: hlistGlobalPattern, parsePattern: hlistPattern, parse: function(e) {
      return e ? slicedToArray(e, 2)[1].split("|") : [];
    }, variable: "HLIST", name: "hlists" };
    var birthDateGlobalPattern = /\{\{birth\sdate([^\}\}]+)\}\}/gi;
    var birthDatePattern = /(\d+)\|(\d+)\|(\d+)/;
    var millisInYear = 31536e6;
    var birthDates = { globalPattern: birthDateGlobalPattern, parsePattern: birthDatePattern, parse: function(e) {
      var t = slicedToArray(e, 4), r = t[1], a2 = t[2], n = t[3], l = new Date(r, a2 - 1, n);
      return { date: l, age: Math.floor((Date.now() - +l) / millisInYear) };
    }, variable: "BIRTH_DATE", name: "birthDates" };
    var DO_NOT_REPLACE = Symbol("DO NOT REPLACE");
    var labeledDateGlobalPattern = /\{\{([^\n\}\}]+)\}\}/g;
    var labeledDatePattern = /(.*)/;
    var labeledDates = { globalPattern: labeledDateGlobalPattern, parsePattern: labeledDatePattern, parse: function(e) {
      var t = e[0].indexOf("|");
      if (t > -1) {
        var r = e[0].substring(t + 1).slice(0, -2), a2 = new Date(r + " GMT");
        if (!isNaN(a2.getTime()))
          return { date: a2 };
        if (a2 = new Date(r.split("|").join("-") + " GMT"), !isNaN(a2.getTime()))
          return { date: a2 };
      }
      return DO_NOT_REPLACE;
    }, variable: "LABELED_DATE", name: "labeledDates" };
    var deathDateGlobalPattern = /\{\{death\sdate\sand\sage([^\}\}]+)\}\}/gi;
    var deathDatePattern = /(\d+)\|(\d+)\|(\d+)\|(\d+)\|?(\d+)?\|?(\d+)?/;
    var millisInYear$1 = 31536e6;
    var deathDates = { globalPattern: deathDateGlobalPattern, parsePattern: deathDatePattern, parse: function(e) {
      var t = slicedToArray(e, 7), r = t[1], a2 = t[2], n = t[3], l = t[4], i = t[5], s = void 0 === i ? 0 : i, o = t[6], u = void 0 === o ? 0 : o, c2 = new Date(r, a2 - 1, n), f = new Date(l, s - 1, u);
      return { date: c2, age: Math.floor((Number(c2) - Number(f)) / millisInYear$1) };
    }, variable: "DEATH_DATE", name: "deathDates" };
    var URLGlobalPattern = /\{\{URL\|([^\}\}]+)\}\}/g;
    var URLPattern = /URL\|([^\}\}]+)\}\}/;
    var url = { globalPattern: URLGlobalPattern, parsePattern: URLPattern, parse: function(e) {
      return slicedToArray(e, 2)[1];
    }, variable: "URL", name: "urls" };
    var websiteGlobalPattern = /\[(https?):\/\/((?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6})\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)\s+([\w\s]+)\]/g;
    var websitePattern = /\[(https?):\/\/((?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6})\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)\s+([\w\s]+)\]/;
    var website = { globalPattern: websiteGlobalPattern, parsePattern: websitePattern, parse: function(e) {
      var t = slicedToArray(e, 5), r = t[1], a2 = t[2], n = t[3];
      return { protocol: r, hostname: a2, path: n, title: t[4], url: r + "://" + a2 + n };
    }, variable: "WEBSITE", name: "websites" };
    var globalPattern$1 = /\{\{Extra[^}}]+\}\}/gi;
    var parsePattern = /\|\s?(\w+)\s+=\s+(.+)/g;
    var propPattern = /\|\s?(\w+)\s+=\s+(.+)/;
    var extra = { globalPattern: globalPattern$1, parsePattern, parse: function(e) {
      return e.reduce(function(e3, t) {
        var r = t.match(propPattern), a2 = slicedToArray(r, 3), n = a2[1], l = a2[2];
        return e3[n] = l, e3;
      }, {});
    }, variable: "EXTRA", name: "extra" };
    var convertGlobalPattern = /\{\{convert\|([\d\.]+)\|(\w+)/g;
    var convertPattern = /\{\{convert\|([\d\.]+)\|(\w+)/;
    var convert = { globalPattern: convertGlobalPattern, parsePattern: convertPattern, parse: function(e) {
      var t = slicedToArray(e, 3);
      return t[1] + " " + t[2];
    }, variable: "CONVERT", name: "converts" };
    var filmDatesPattern = /\{\{film\sdate([^\}\}]+)\}\}/gi;
    var filmDatePatternGlobal = /(\d+)\|?(\d+)\|?(\d+)\|?([^\|\}]*)\|?(ref\d+=([^\|\}]*))?/g;
    var filmDatePattern = /(\d+)\|?(\d+)\|?(\d+)\|?([^\|\}]*)\|?(ref\d+=([^\|\}]*))?/;
    var filmDates = { globalPattern: filmDatesPattern, parsePattern: filmDatePatternGlobal, parse: function(e) {
      return e.map(function(e3) {
        var t = e3.match(filmDatePattern), r = slicedToArray(t, 7), a2 = (r[0], r[1]), n = r[2], l = r[3], i = r[4], s = (r[5], r[6]);
        return { date: new Date(a2, n && n - 1, l), location: i, ref: s };
      });
    }, variable: "FILM_DATES", name: "filmDates" };
    var otherGlobalPattern$1 = /<ref(\s\w+=[^>]+)?>(.*)<\/ref>/g;
    var otherPattern$1 = /<ref(\s\w+=[^>]+)?>(.*)<\/ref>/;
    var attributeGlobalPattern = /(\w+)=(["\w]+)/g;
    var attributePattern = /(\w+)=(["\w]+)/;
    var ref1 = { globalPattern: otherGlobalPattern$1, parsePattern: otherPattern$1, parse: function(e) {
      var t = slicedToArray(e, 3), r = (t[0], t[1]), a2 = t[2];
      return { attributes: ((r || "").match(attributeGlobalPattern) || []).reduce(function(e3, t2) {
        if (t2) {
          var r2 = t2.match(attributePattern), a3 = slicedToArray(r2, 3), n = (a3[0], a3[1]), l = a3[2];
          e3[n] = l.replace(/"/g, "");
        }
        return e3;
      }, {}), contents: a2 };
    }, variable: "REF", name: "refs" };
    var otherGlobalPattern$2 = /<ref(\s\w+=[^>]+)?\/>/g;
    var otherPattern$2 = /<ref(\s\w+=[^>]+)?\/>/;
    var attributeGlobalPattern$1 = /(\w+)=(["\w]+)/g;
    var attributePattern$1 = /(\w+)=(["\w]+)/;
    var ref2 = { globalPattern: otherGlobalPattern$2, parsePattern: otherPattern$2, parse: function(e) {
      return { attributes: e[1].match(attributeGlobalPattern$1).reduce(function(e3, t) {
        var r = t.match(attributePattern$1), a2 = slicedToArray(r, 3), n = (a2[0], a2[1]), l = a2[2];
        return e3[n] = l.replace(/"/g, ""), e3;
      }, {}) };
    }, variable: "REF", name: "refs" };
    var globalPattern$2 = /\{\{formatnum:\d+\}\}/gi;
    var parsePattern$1 = /\{\{formatnum:(\d+)\}\}/;
    var formatNum = { globalPattern: globalPattern$2, parsePattern: parsePattern$1, parse: function(e) {
      var t = slicedToArray(e, 2), r = t[1];
      return parseFloat(r);
    }, variable: "FORMAT_NUM", name: "formatNum" };
    var dataTypes = [instances, ref1, ref2, small, formatNum, flag, coords, marriages, birthDates, labeledDates, deathDates, unbulletedLists, website, hlist, url, convert, nbay, filmDates, other, extra, plainLists, unmarkedLists];
    var dataTypes$1 = dataTypes.map(function(e) {
      return { handler: dataType(e), name: e.name, pattern: new RegExp("\\$" + e.variable + "_(\\d+)") };
    });
    var keyValueGlobalPattern = /\|\s*([-'\u0400-\u04FF\w\s]+)\s*=\s*([^|]+)?/g;
    var keyValuePattern = /\|\s*([-'\u0400-\u04FF\w\s]+)\s*=\s*([^|]+)?/;
    var numberParse = function(e) {
      return "string" == typeof e && (e = e.trim().replace(/ /g, ""), e.match(/,/) && e.match(/\./) ? e.indexOf(",") < e.indexOf(".") ? parseEnglish(e) : parseSpanish(e) : e.match(/,/) && !e.match(/\./) ? e.match(/,/g).length > 1 ? parseEnglish(e) : e.match(/,[0-9]{3}($|^[0-9])/) ? parseEnglish(e) : parseSpanish(e) : !e.match(/,/) && e.match(/\./) ? e.match(/\./g).length > 1 ? parseSpanish(e) : e.match(/\.[0-9]{3}($|^[0-9])/) ? parseSpanish(e) : parseEnglish(e) : (+e).toString() === e && +e);
    };
    var parseEnglish = function(e) {
      return +e.replace(/,/g, "");
    };
    var parseSpanish = function(e) {
      return +e.replace(/\./g, "").replace(/,/g, ".");
    };
    var smallDataType = dataTypes$1.find(function(e) {
      return "smalls" === e.name;
    });
    var blankNamePattern = /blank(\d+)?NameSec2/;
    var blankInfoPattern = /blank(\d+)?InfoSec2/;
    var infoBoxStartPattern = /{{\w*box/;
    var tableStartPattern = /{\|(.*)\n?/;
    var tableEndPattern = /\n\|}/;
    var headersPattern = /!\s?(.*)/g;
    var rowPattern = /\|-/;
    var cellSeparatorPattern = /(?:\n\|)|(?:\|\|)/;
    var linkPattern = /\[\[([^\]]+)\]\]/g;
    var linkNamePattern = /^.*\|/;
    var inlineHeaderPattern = "!!";
    var actionPattern = /{{anchor\|(.*)}}/g;
    var rowSpanCountPattern = /rowspan="(\d+)"/;
    var stripLinks = function(e) {
      return e.replace(linkPattern, function(e3, t) {
        return t.replace(linkNamePattern, "").trim() || t;
      });
    };
    var removeActions = function(e) {
      return e.replace(actionPattern, "");
    };
    var transformCell = function(e) {
      return stripLinks(removeActions(e || "")).replace(rowSpanCountPattern, "").replace(linkNamePattern, "").trim();
    };
    var transformCells = function(e) {
      return e.split(cellSeparatorPattern).map(transformCell);
    };
    var findIndex = function(e, t) {
      var r = e.match(t);
      return r ? r.index : -1;
    };
    var findTableStart = function(e) {
      var t = e.match(tableStartPattern);
      return t ? t.index + t[0].length : -1;
    };
    var findTableEnd = function(e) {
      return findIndex(e, tableEndPattern);
    };
    var getHeaders = function(e) {
      for (var t = [], r = void 0; r = headersPattern.exec(e); )
        t.push.apply(t, toConsumableArray(r[1].split(inlineHeaderPattern).map(transformCell)));
      return t;
    };
    var getRows = function(e) {
      var t = e.split(rowPattern).map(function(e3) {
        return e3.replace(/^.*\n+?\|/, "").trim();
      }).filter(function(e3) {
        return e3;
      }), r = [], a2 = 0, n = 0, l = [], i = true, s = false, o = void 0;
      try {
        for (var u, c2 = t[Symbol.iterator](); !(i = (u = c2.next()).done); i = true) {
          var f = u.value, p = f.match(rowSpanCountPattern);
          p && (a2 = 0, n = parseInt(p[1]), l = []), a2 < n ? (l.push(f), ++a2 === n && r.push(transformRowSpan(l))) : r.push(f);
        }
      } catch (e3) {
        s = true, o = e3;
      } finally {
        try {
          !i && c2.return && c2.return();
        } finally {
          if (s)
            throw o;
        }
      }
      return r;
    };
    var getNextTable = function(e, t, r) {
      var a2 = e, n = findTableStart(a2);
      if (-1 === n)
        return null;
      a2 = a2.substring(n);
      var l = findTableEnd(a2);
      if (-1 === l)
        return null;
      a2 = a2.substring(0, l);
      var i = getRows(a2);
      if (!i.length)
        return null;
      var s = getHeaders(i[0]);
      return s.length ? { data: i.slice(1).map(transformCells).map(function(e3) {
        return s.reduce(function(a3, n2, l2) {
          return a3[camelCase(fillVariable(n2, t, r))] = fillVariables(e3[l2], t, r), a3;
        }, {});
      }), end: n + l } : null;
    };
    var parseTables = function(e, t) {
      for (var r = cleanSource(e, t), a2 = extractData(r), n = [], l = a2.source, i = null; i = getNextTable(l, a2.context, t); ) {
        if (!i)
          return n;
        n.push(i.data), l = l.substring(i.end);
      }
      return n;
    };
    var linkPattern$1 = /\[\[([^\]]+)\]\]/g;
    var kmPattern = /{{BSkm\|([\dx]+,[\dx]+)\|([\dx]+,[\dx]+)}}/g;
    var parseBsTables = function(e) {
      var t = e.replace(kmPattern, "$1/$2").match(/{{BS([^}}]+)}}/g);
      return t ? t.map(function(e3) {
        return clean(e3).split("|");
      }).map(parseRow).filter(function(e3) {
        return "-" !== e3.type[0];
      }) : null;
    };
    var headingPattern = /[^=]==\s?([\w\s]+)\s?==/g;
    var subheadingPattern = /===([\w\s]+)===/g;
    var tableStartPattern$1 = /{{list.+start.*}}/gi;
    var tableEndPattern$1 = /{{list.+end.*}}/gi;
    var rowPattern$1 = /{{(.*)}}/g;
    var rowPatternSingle = /{{(.*)}}/;
    var parseLists = function(e) {
      var t = getMatches(e, headingPattern), r = getMatches(e, subheadingPattern), a2 = getTables(e);
      return a2.forEach(function(e3) {
        var a3 = t.filter(function(t2) {
          return t2.end < e3.start;
        }).map(function(e4) {
          return e4.value;
        });
        e3.heading = last(a3);
        var n = r.filter(function(t2) {
          return t2.end < e3.start;
        }).map(function(e4) {
          return e4.value;
        });
        e3.subheading = last(n), delete e3.start, delete e3.end;
      }), a2;
    };
    module2.exports = parseInfobox;
  }
});

// node_modules/wikipedia/dist/page.js
var require_page = __commonJS({
  "node_modules/wikipedia/dist/page.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.citation = exports.pdf = exports.mobileHtml = exports.media = exports.related = exports.summary = exports.rawInfo = exports.tables = exports.infobox = exports.langLinks = exports.coordinates = exports.references = exports.links = exports.categories = exports.content = exports.html = exports.intro = exports.images = exports.Page = void 0;
    var errors_1 = require_errors();
    var request_1 = require_request();
    var utils_1 = require_utils();
    var messages_1 = require_messages();
    var infoboxParser = require_bundle_min();
    var Page = class {
      constructor(response) {
        this.intro = async (pageOptions) => {
          try {
            if (!this._intro) {
              const response2 = await (0, exports.intro)(this.pageid.toString(), pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.redirect);
              this._intro = response2;
            }
            return this._intro;
          } catch (error) {
            throw new errors_1.introError(error);
          }
        };
        this.images = async (listOptions) => {
          try {
            if (!this._images) {
              const result2 = await (0, exports.images)(this.pageid.toString(), listOptions);
              this._images = result2;
            }
            return this._images;
          } catch (error) {
            throw new errors_1.imageError(error);
          }
        };
        this.summary = async (pageOptions) => {
          try {
            if (!this._summary) {
              const result2 = await (0, exports.summary)(this.title, pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.redirect);
              this._summary = result2;
            }
            return this._summary;
          } catch (error) {
            throw new errors_1.summaryError(error);
          }
        };
        this.html = async (pageOptions) => {
          try {
            if (!this._html) {
              const result2 = await (0, exports.html)(this.pageid.toString(), pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.redirect);
              this._html = result2;
            }
            return this._html;
          } catch (error) {
            throw new errors_1.htmlError(error);
          }
        };
        this.content = async (pageOptions) => {
          try {
            if (!this._content) {
              const result2 = await (0, exports.content)(this.pageid.toString(), pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.redirect);
              this.parentid = result2.ids.parentId;
              this.revid = result2.ids.revId;
              this._content = result2.result;
            }
            return this._content;
          } catch (error) {
            throw new errors_1.contentError(error);
          }
        };
        this.categories = async (listOptions) => {
          try {
            if (!this._categories) {
              const result2 = await (0, exports.categories)(this.pageid.toString(), listOptions);
              this._categories = result2;
            }
            return this._categories;
          } catch (error) {
            throw new errors_1.categoriesError(error);
          }
        };
        this.links = async (listOptions) => {
          try {
            if (!this._links) {
              const result2 = await (0, exports.links)(this.pageid.toString(), listOptions);
              this._links = result2;
            }
            return this._links;
          } catch (error) {
            throw new errors_1.linksError(error);
          }
        };
        this.references = async (listOptions) => {
          try {
            if (!this._references) {
              const result2 = await (0, exports.references)(this.pageid.toString(), listOptions);
              this._references = result2;
            }
            return this._references;
          } catch (error) {
            throw new errors_1.linksError(error);
          }
        };
        this.coordinates = async (pageOptions) => {
          try {
            if (!this._coordinates) {
              const result2 = await (0, exports.coordinates)(this.pageid.toString(), pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.redirect);
              this._coordinates = result2;
            }
            return this._coordinates;
          } catch (error) {
            throw new errors_1.coordinatesError(error);
          }
        };
        this.langLinks = async (listOptions) => {
          try {
            if (!this._langLinks) {
              const result2 = await (0, exports.langLinks)(this.pageid.toString(), listOptions);
              this._langLinks = result2;
            }
            return this._langLinks;
          } catch (error) {
            throw new errors_1.linksError(error);
          }
        };
        this.infobox = async (pageOptions) => {
          try {
            if (!this._infobox) {
              const result2 = await (0, exports.infobox)(this.pageid.toString(), pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.redirect);
              this._infobox = result2;
            }
            return this._infobox;
          } catch (error) {
            throw new errors_1.infoboxError(error);
          }
        };
        this.tables = async (pageOptions) => {
          try {
            if (!this._tables) {
              const result2 = await (0, exports.tables)(this.pageid.toString(), pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.redirect);
              this._tables = result2;
            }
            return this._tables;
          } catch (error) {
            throw new errors_1.infoboxError(error);
          }
        };
        this.related = async (pageOptions) => {
          try {
            if (!this._related) {
              const result2 = await (0, exports.related)(this.title, pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.redirect);
              this._related = result2;
            }
            return this._related;
          } catch (error) {
            throw new errors_1.relatedError(error);
          }
        };
        this.media = async (pageOptions) => {
          try {
            if (!this._media) {
              const result2 = await (0, exports.media)(this.title, pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.redirect);
              this._media = result2;
            }
            return this._media;
          } catch (error) {
            throw new errors_1.mediaError(error);
          }
        };
        this.mobileHtml = async (pageOptions) => {
          try {
            if (!this._mobileHtml) {
              const result2 = await (0, exports.mobileHtml)(this.title, pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.redirect);
              this._mobileHtml = result2;
            }
            return this._mobileHtml;
          } catch (error) {
            throw new errors_1.htmlError(error);
          }
        };
        this.pdf = async (pdfOptions) => {
          try {
            const result2 = await (0, exports.pdf)(this.title, pdfOptions);
            return result2;
          } catch (error) {
            throw new errors_1.pdfError(error);
          }
        };
        this.pageid = response.pageid;
        this.ns = response.ns;
        this.title = response.title;
        this.contentmodel = response.contentmodel;
        this.pagelanguage = response.pagelanguage;
        this.pagelanguagedir = response.pagelanguagedir;
        this.touched = response.touched;
        this.lastrevid = response.lastrevid;
        this.length = response.length;
        this.fullurl = response.fullurl;
        this.editurl = response.editurl;
        this.canonicalurl = response.canonicalurl;
      }
      async runMethod(functionName) {
        try {
          const result = await eval(`this.${functionName}()`);
          return result;
        } catch (error) {
          throw new errors_1.preloadError(error);
        }
      }
    };
    exports.Page = Page;
    var images = async (title, listOptions) => {
      try {
        let imageOptions = {
          generator: "images",
          gimlimit: (listOptions === null || listOptions === void 0 ? void 0 : listOptions.limit) || 5,
          prop: "imageinfo",
          iiprop: "url"
        };
        imageOptions = (0, utils_1.setPageIdOrTitleParam)(imageOptions, title);
        const response = await (0, request_1.default)(imageOptions, listOptions === null || listOptions === void 0 ? void 0 : listOptions.redirect);
        const images2 = [];
        const imageKeys = Object.keys(response.query.pages);
        for (const image of imageKeys) {
          const imageInfo = response.query.pages[image];
          imageInfo.url = imageInfo.imageinfo[0].url;
          images2.push(imageInfo);
        }
        return images2;
      } catch (error) {
        throw new errors_1.imageError(error);
      }
    };
    exports.images = images;
    var intro = async (title, redirect = true) => {
      var _a;
      try {
        let introOptions = {
          prop: "extracts",
          explaintext: "",
          exintro: ""
        };
        introOptions = (0, utils_1.setPageIdOrTitleParam)(introOptions, title);
        const response = await (0, request_1.default)(introOptions, redirect);
        const pageId = (0, utils_1.setPageId)(introOptions, response);
        return (_a = response === null || response === void 0 ? void 0 : response.query) === null || _a === void 0 ? void 0 : _a.pages[pageId].extract;
      } catch (error) {
        throw new errors_1.introError(error);
      }
    };
    exports.intro = intro;
    var html = async (title, redirect = true) => {
      try {
        let htmlOptions = {
          "prop": "revisions",
          "rvprop": "content",
          "rvlimit": 1,
          "rvparse": ""
        };
        htmlOptions = (0, utils_1.setPageIdOrTitleParam)(htmlOptions, title);
        const response = await (0, request_1.default)(htmlOptions, redirect);
        const pageId = (0, utils_1.setPageId)(htmlOptions, response);
        return response.query.pages[pageId].revisions[0]["*"];
      } catch (error) {
        throw new errors_1.htmlError(error);
      }
    };
    exports.html = html;
    var content = async (title, redirect = true) => {
      try {
        let contentOptions = {
          "prop": "extracts|revisions",
          "explaintext": "",
          "rvprop": "ids"
        };
        contentOptions = (0, utils_1.setPageIdOrTitleParam)(contentOptions, title);
        const response = await (0, request_1.default)(contentOptions, redirect);
        const pageId = (0, utils_1.setPageId)(contentOptions, response);
        const result2 = response["query"]["pages"][pageId]["extract"];
        const ids = {
          revisionId: response["query"]["pages"][pageId]["revisions"][0]["revid"],
          parentId: response["query"]["pages"][pageId]["revisions"][0]["parentid"]
        };
        return {
          result: result2,
          ids
        };
      } catch (error) {
        throw new errors_1.contentError(error);
      }
    };
    exports.content = content;
    var categories = async (title, listOptions) => {
      try {
        let categoryOptions = {
          prop: "categories",
          pllimit: listOptions === null || listOptions === void 0 ? void 0 : listOptions.limit
        };
        categoryOptions = (0, utils_1.setPageIdOrTitleParam)(categoryOptions, title);
        const response = await (0, request_1.default)(categoryOptions, listOptions === null || listOptions === void 0 ? void 0 : listOptions.redirect);
        const pageId = (0, utils_1.setPageId)(categoryOptions, response);
        return response.query.pages[pageId].categories.map((category) => category.title);
      } catch (error) {
        throw new errors_1.categoriesError(error);
      }
    };
    exports.categories = categories;
    var links = async (title, listOptions) => {
      try {
        let linksOptions = {
          prop: "links",
          plnamespace: 0,
          pllimit: (listOptions === null || listOptions === void 0 ? void 0 : listOptions.limit) || "max"
        };
        linksOptions = (0, utils_1.setPageIdOrTitleParam)(linksOptions, title);
        const response = await (0, request_1.default)(linksOptions, listOptions === null || listOptions === void 0 ? void 0 : listOptions.redirect);
        const pageId = (0, utils_1.setPageId)(linksOptions, response);
        const result2 = response.query.pages[pageId].links.map((link) => link.title);
        return result2;
      } catch (error) {
        throw new errors_1.linksError(error);
      }
    };
    exports.links = links;
    var references = async (title, listOptions) => {
      try {
        let extLinksOptions = {
          prop: "extlinks",
          ellimit: (listOptions === null || listOptions === void 0 ? void 0 : listOptions.limit) || "max"
        };
        extLinksOptions = (0, utils_1.setPageIdOrTitleParam)(extLinksOptions, title);
        const response = await (0, request_1.default)(extLinksOptions, listOptions === null || listOptions === void 0 ? void 0 : listOptions.redirect);
        const pageId = (0, utils_1.setPageId)(extLinksOptions, response);
        const result2 = response.query.pages[pageId].extlinks.map((link) => link["*"]);
        return result2;
      } catch (error) {
        throw new errors_1.linksError(error);
      }
    };
    exports.references = references;
    var coordinates = async (title, redirect = true) => {
      try {
        let coordinatesOptions = {
          prop: "coordinates"
        };
        coordinatesOptions = (0, utils_1.setPageIdOrTitleParam)(coordinatesOptions, title);
        const response = await (0, request_1.default)(coordinatesOptions, redirect);
        const pageId = (0, utils_1.setPageId)(coordinatesOptions, response);
        const coordinates2 = response.query.pages[pageId].coordinates;
        return coordinates2 ? coordinates2[0] : null;
      } catch (error) {
        throw new errors_1.coordinatesError(error);
      }
    };
    exports.coordinates = coordinates;
    var langLinks = async (title, listOptions) => {
      var _a;
      try {
        let languageOptions = {
          prop: "langlinks",
          lllimit: (listOptions === null || listOptions === void 0 ? void 0 : listOptions.limit) || "max",
          llprop: "url"
        };
        languageOptions = (0, utils_1.setPageIdOrTitleParam)(languageOptions, title);
        const response = await (0, request_1.default)(languageOptions, listOptions === null || listOptions === void 0 ? void 0 : listOptions.redirect);
        const pageId = (0, utils_1.setPageId)(languageOptions, response);
        const result2 = ((_a = response.query.pages[pageId].langlinks) !== null && _a !== void 0 ? _a : []).map((link) => {
          return {
            lang: link.lang,
            title: link["*"],
            url: link.url
          };
        });
        return result2;
      } catch (error) {
        throw new errors_1.linksError(error);
      }
    };
    exports.langLinks = langLinks;
    var infobox = async (title, redirect = true) => {
      try {
        const infoboxOptions = {
          prop: "revisions",
          rvprop: "content",
          rvsection: 0
        };
        const fullInfo = await (0, exports.rawInfo)(title, infoboxOptions, redirect);
        const info = infoboxParser(fullInfo).general;
        return info;
      } catch (error) {
        throw new errors_1.infoboxError(error);
      }
    };
    exports.infobox = infobox;
    var tables = async (title, redirect = true) => {
      try {
        const tableOptions = {
          prop: "revisions",
          rvprop: "content"
        };
        const fullInfo = await (0, exports.rawInfo)(title, tableOptions, redirect);
        const info = infoboxParser(fullInfo).tables;
        return info;
      } catch (error) {
        throw new errors_1.infoboxError(error);
      }
    };
    exports.tables = tables;
    var rawInfo = async (title, options, redirect = true) => {
      var _a;
      try {
        options = (0, utils_1.setPageIdOrTitleParam)(options, title);
        const response = await (0, request_1.default)(options, redirect);
        if (!((_a = response.query) === null || _a === void 0 ? void 0 : _a.pages)) {
          throw new errors_1.wikiError(messages_1.MSGS.INFOBOX_NOT_EXIST);
        }
        const pageId = (0, utils_1.setPageId)(options, response);
        const data = response.query.pages[pageId]["revisions"][0];
        return data ? data["*"] : "";
      } catch (error) {
        throw new errors_1.infoboxError(error);
      }
    };
    exports.rawInfo = rawInfo;
    var summary = async (title, redirect = true) => {
      try {
        const path = "page/summary/" + title.replace(" ", "_");
        const response = await (0, request_1.makeRestRequest)(path, redirect);
        return response;
      } catch (error) {
        throw new errors_1.summaryError(error);
      }
    };
    exports.summary = summary;
    var related = async (title, redirect = true) => {
      try {
        const path = "page/related/" + title.replace(" ", "_");
        const response = await (0, request_1.makeRestRequest)(path, redirect);
        return response;
      } catch (error) {
        throw new errors_1.relatedError(error);
      }
    };
    exports.related = related;
    var media = async (title, redirect = true) => {
      try {
        const path = "page/media-list/" + title.replace(" ", "_");
        const response = await (0, request_1.makeRestRequest)(path, redirect);
        return response;
      } catch (error) {
        throw new errors_1.mediaError(error);
      }
    };
    exports.media = media;
    var mobileHtml = async (title, redirect = true) => {
      try {
        const path = `page/mobile-html/${title}`;
        const result2 = await (0, request_1.makeRestRequest)(path, redirect);
        return result2;
      } catch (error) {
        throw new errors_1.htmlError(error);
      }
    };
    exports.mobileHtml = mobileHtml;
    var pdf = async (title, pdfOptions) => {
      try {
        let path = `page/pdf/${title}`;
        (pdfOptions === null || pdfOptions === void 0 ? void 0 : pdfOptions.format) ? path += `/${pdfOptions.format}` : null;
        (pdfOptions === null || pdfOptions === void 0 ? void 0 : pdfOptions.type) ? path += `/${pdfOptions.type}` : null;
        const result2 = (0, request_1.returnRestUrl)(path);
        return result2;
      } catch (error) {
        throw new errors_1.pdfError(error);
      }
    };
    exports.pdf = pdf;
    var citation = async (query, format2, language) => {
      try {
        let path = `data/citation`;
        path += format2 ? `/${format2}` : `/mediawiki`;
        path += `/${query}`;
        language ? path += `/${language}` : null;
        const result2 = await (0, request_1.makeRestRequest)(path);
        return result2;
      } catch (error) {
        throw new errors_1.citationError(error);
      }
    };
    exports.citation = citation;
    exports.default = Page;
  }
});

// node_modules/wikipedia/dist/resultTypes.js
var require_resultTypes = __commonJS({
  "node_modules/wikipedia/dist/resultTypes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/wikipedia/dist/optionTypes.js
var require_optionTypes = __commonJS({
  "node_modules/wikipedia/dist/optionTypes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/wikipedia/dist/index.js
var require_dist = __commonJS({
  "node_modules/wikipedia/dist/index.js"(exports2, module2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m2, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m2, k);
      if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m2[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m2, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m2[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m2, exports3) {
      for (var p in m2)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
          __createBinding(exports3, m2, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    var request_12 = require_request();
    var page_1 = require_page();
    var errors_12 = require_errors();
    var messages_12 = require_messages();
    var utils_12 = require_utils();
    var wiki2 = async (title, pageOptions) => {
      return wiki2.page(title, pageOptions);
    };
    wiki2.search = async (query, searchOptions) => {
      try {
        const searchParams = {
          "list": "search",
          "srprop": "",
          "srlimit": (searchOptions === null || searchOptions === void 0 ? void 0 : searchOptions.limit) || 10,
          "srsearch": query
        };
        (searchOptions === null || searchOptions === void 0 ? void 0 : searchOptions.suggestion) ? searchParams["srinfo"] = "suggestion" : null;
        const response = await (0, request_12.default)(searchParams);
        const result2 = {
          results: response.query.search,
          suggestion: response.query.searchinfo ? response.query.searchinfo.suggestion : null
        };
        return result2;
      } catch (error) {
        throw new errors_12.searchError(error);
      }
    };
    wiki2.page = async (title, pageOptions) => {
      try {
        if (pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.autoSuggest) {
          title = await (0, utils_12.setTitleForPage)(title);
        }
        let pageParams = {
          prop: "info|pageprops",
          inprop: "url",
          ppprop: "disambiguation"
        };
        pageParams = (0, utils_12.setPageIdOrTitleParam)(pageParams, title);
        const response = await (0, request_12.default)(pageParams);
        let pageInfo = response.query.pages;
        const pageId = (0, utils_12.setPageId)(pageParams, response);
        pageInfo = pageInfo[pageId];
        if (pageInfo.missing == "") {
          throw new errors_12.pageError(`${messages_12.MSGS.PAGE_NOT_EXIST}${title}`);
        }
        const page2 = new page_1.default(pageInfo);
        if (pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.preload) {
          if (!(pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.fields)) {
            pageOptions.fields = ["summary", "images"];
          }
          for (const field of pageOptions.fields) {
            await page2.runMethod(field);
          }
        }
        return page2;
      } catch (error) {
        throw new errors_12.pageError(error);
      }
    };
    wiki2.intro = async (title, pageOptions) => {
      try {
        if (pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.autoSuggest) {
          title = await (0, utils_12.setTitleForPage)(title);
        }
        const result2 = await (0, page_1.intro)(title, pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.redirect);
        return result2;
      } catch (error) {
        throw new errors_12.introError(error);
      }
    };
    wiki2.images = async (title, listOptions) => {
      try {
        if (listOptions === null || listOptions === void 0 ? void 0 : listOptions.autoSuggest) {
          title = await (0, utils_12.setTitleForPage)(title);
        }
        const result2 = await (0, page_1.images)(title, listOptions);
        return result2;
      } catch (error) {
        throw new errors_12.imageError(error);
      }
    };
    wiki2.summary = async (title, pageOptions) => {
      try {
        if (pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.autoSuggest) {
          title = await (0, utils_12.setTitleForPage)(title);
        }
        const result2 = await (0, page_1.summary)(title, pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.redirect);
        return result2;
      } catch (error) {
        throw new errors_12.summaryError(error);
      }
    };
    wiki2.html = async (title, pageOptions) => {
      try {
        if (pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.autoSuggest) {
          title = await (0, utils_12.setTitleForPage)(title);
        }
        const result2 = await (0, page_1.html)(title, pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.redirect);
        return result2;
      } catch (error) {
        throw new errors_12.htmlError(error);
      }
    };
    wiki2.content = async (title, pageOptions) => {
      try {
        if (pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.autoSuggest) {
          title = await (0, utils_12.setTitleForPage)(title);
        }
        const response = await (0, page_1.content)(title, pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.redirect);
        return response.result;
      } catch (error) {
        throw new errors_12.contentError(error);
      }
    };
    wiki2.categories = async (title, listOptions) => {
      try {
        if (listOptions === null || listOptions === void 0 ? void 0 : listOptions.autoSuggest) {
          title = await (0, utils_12.setTitleForPage)(title);
        }
        const response = await (0, page_1.categories)(title, listOptions);
        return response;
      } catch (error) {
        throw new errors_12.categoriesError(error);
      }
    };
    wiki2.related = async (title, pageOptions) => {
      try {
        if (pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.autoSuggest) {
          title = await (0, utils_12.setTitleForPage)(title);
        }
        const response = await (0, page_1.related)(title, pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.redirect);
        return response;
      } catch (error) {
        throw new errors_12.relatedError(error);
      }
    };
    wiki2.media = async (title, pageOptions) => {
      try {
        if (pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.autoSuggest) {
          title = await (0, utils_12.setTitleForPage)(title);
        }
        const response = await (0, page_1.media)(title, pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.redirect);
        return response;
      } catch (error) {
        throw new errors_12.mediaError(error);
      }
    };
    wiki2.links = async (title, listOptions) => {
      try {
        if (listOptions === null || listOptions === void 0 ? void 0 : listOptions.autoSuggest) {
          title = await (0, utils_12.setTitleForPage)(title);
        }
        const response = await (0, page_1.links)(title, listOptions);
        return response;
      } catch (error) {
        throw new errors_12.linksError(error);
      }
    };
    wiki2.references = async (title, listOptions) => {
      try {
        if (listOptions === null || listOptions === void 0 ? void 0 : listOptions.autoSuggest) {
          title = await (0, utils_12.setTitleForPage)(title);
        }
        const response = await (0, page_1.references)(title, listOptions);
        return response;
      } catch (error) {
        throw new errors_12.linksError(error);
      }
    };
    wiki2.coordinates = async (title, pageOptions) => {
      try {
        if (pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.autoSuggest) {
          title = await (0, utils_12.setTitleForPage)(title);
        }
        const response = await (0, page_1.coordinates)(title, pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.redirect);
        return response;
      } catch (error) {
        throw new errors_12.coordinatesError(error);
      }
    };
    wiki2.langLinks = async (title, listOptions) => {
      try {
        if (listOptions === null || listOptions === void 0 ? void 0 : listOptions.autoSuggest) {
          title = await (0, utils_12.setTitleForPage)(title);
        }
        const response = await (0, page_1.langLinks)(title, listOptions);
        return response;
      } catch (error) {
        throw new errors_12.linksError(error);
      }
    };
    wiki2.infobox = async (title, pageOptions) => {
      try {
        if (pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.autoSuggest) {
          title = await (0, utils_12.setTitleForPage)(title);
        }
        const response = await (0, page_1.infobox)(title, pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.redirect);
        return response;
      } catch (error) {
        throw new errors_12.infoboxError(error);
      }
    };
    wiki2.tables = async (title, pageOptions) => {
      try {
        if (pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.autoSuggest) {
          title = await (0, utils_12.setTitleForPage)(title);
        }
        const response = await (0, page_1.tables)(title, pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.redirect);
        return response;
      } catch (error) {
        throw new errors_12.infoboxError(error);
      }
    };
    wiki2.languages = async () => {
      try {
        const langParams = {
          "meta": "siteinfo",
          "siprop": "languages"
        };
        const response = await (0, request_12.default)(langParams);
        const languages = [];
        for (const lang2 of response.query.languages) {
          languages.push({ [lang2.code]: lang2["*"] });
        }
        return languages;
      } catch (error) {
        throw new errors_12.wikiError(error);
      }
    };
    wiki2.setLang = (language) => {
      const apiUrl = (0, request_12.setAPIUrl)(language);
      return apiUrl;
    };
    wiki2.geoSearch = async (latitude, longitude, geoOptions) => {
      try {
        const geoSearchParams = {
          "list": "geosearch",
          "gsradius": (geoOptions === null || geoOptions === void 0 ? void 0 : geoOptions.radius) || 1e3,
          "gscoord": `${latitude}|${longitude}`,
          "gslimit": (geoOptions === null || geoOptions === void 0 ? void 0 : geoOptions.limit) || 10,
          "gsprop": "type"
        };
        const results = await (0, request_12.default)(geoSearchParams);
        const searchPages = results.query.geosearch;
        return searchPages;
      } catch (error) {
        throw new errors_12.geoSearchError(error);
      }
    };
    wiki2.suggest = async (query) => {
      var _a, _b, _c, _d;
      try {
        const suggestParams = {
          "list": "search",
          "srinfo": "suggestion",
          "srprop": "",
          "srsearch": query
        };
        const result2 = await (0, request_12.default)(suggestParams);
        return ((_b = (_a = result2.query) === null || _a === void 0 ? void 0 : _a.searchinfo) === null || _b === void 0 ? void 0 : _b.suggestion) ? (_d = (_c = result2.query) === null || _c === void 0 ? void 0 : _c.searchinfo) === null || _d === void 0 ? void 0 : _d.suggestion : null;
      } catch (error) {
        throw new errors_12.searchError(error);
      }
    };
    wiki2.onThisDay = async (eventOptions = {}) => {
      try {
        const type2 = eventOptions.type || "all";
        const mm = (eventOptions.month || (0, utils_12.getCurrentMonth)()).toString().padStart(2, "0");
        const dd = (eventOptions.day || (0, utils_12.getCurrentDay)()).toString().padStart(2, "0");
        const path = `feed/onthisday/${type2}/${mm}/${dd}`;
        const result2 = await (0, request_12.makeRestRequest)(path, true);
        return result2;
      } catch (error) {
        throw new errors_12.eventsError(error);
      }
    };
    wiki2.featuredContent = async (fcOptions = {}) => {
      try {
        const yyyy = (fcOptions.year || (0, utils_12.getCurrentYear)()).toString();
        const mm = (fcOptions.month || (0, utils_12.getCurrentMonth)()).toString().padStart(2, "0");
        const dd = (fcOptions.day || (0, utils_12.getCurrentDay)()).toString().padStart(2, "0");
        const path = `feed/featured/${yyyy}/${mm}/${dd}`;
        const result2 = await (0, request_12.makeRestRequest)(path, true);
        return result2;
      } catch (error) {
        throw new errors_12.fcError(error);
      }
    };
    wiki2.random = async (format2) => {
      try {
        if (!format2) {
          format2 = "summary";
        }
        const path = `page/random/${format2}`;
        const result2 = await (0, request_12.makeRestRequest)(path);
        return result2;
      } catch (error) {
        throw new errors_12.wikiError(error);
      }
    };
    wiki2.mobileHtml = async (title, pageOptions) => {
      try {
        if (pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.autoSuggest) {
          title = await (0, utils_12.setTitleForPage)(title);
        }
        const result2 = await (0, page_1.mobileHtml)(title, pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.redirect);
        return result2;
      } catch (error) {
        throw new errors_12.htmlError(error);
      }
    };
    wiki2.pdf = async (title, pdfOptions) => {
      try {
        if (pdfOptions === null || pdfOptions === void 0 ? void 0 : pdfOptions.autoSuggest) {
          title = await (0, utils_12.setTitleForPage)(title);
        }
        const result2 = await (0, page_1.pdf)(title, pdfOptions);
        return result2;
      } catch (error) {
        throw new errors_12.pdfError(error);
      }
    };
    wiki2.citation = async (query, format2, language) => {
      try {
        const result2 = await (0, page_1.citation)(query, format2, language);
        return result2;
      } catch (error) {
        throw new errors_12.citationError(error);
      }
    };
    wiki2.autocompletions = async (query, autocompletionOptions) => {
      try {
        const autocompletionsParams = {
          list: "search",
          limit: (autocompletionOptions === null || autocompletionOptions === void 0 ? void 0 : autocompletionOptions.limit) || 10,
          search: query,
          action: "opensearch",
          redirect: "return"
        };
        const [, autocompletions] = await (0, request_12.default)(autocompletionsParams, false);
        return autocompletions;
      } catch (error) {
        throw new errors_12.autocompletionsError(error);
      }
    };
    wiki2.setUserAgent = (userAgent) => {
      (0, request_12.setUserAgent)(userAgent);
    };
    exports2.default = wiki2;
    module2.exports = wiki2;
    module2.exports.default = wiki2;
    __exportStar(require_errors(), exports2);
    __exportStar(require_resultTypes(), exports2);
    __exportStar(require_optionTypes(), exports2);
    __exportStar(require_page(), exports2);
  }
});

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ScGraphView
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// node_modules/d3-array/src/ascending.js
function ascending(a2, b) {
  return a2 == null || b == null ? NaN : a2 < b ? -1 : a2 > b ? 1 : a2 >= b ? 0 : NaN;
}

// node_modules/d3-array/src/descending.js
function descending(a2, b) {
  return a2 == null || b == null ? NaN : b < a2 ? -1 : b > a2 ? 1 : b >= a2 ? 0 : NaN;
}

// node_modules/d3-array/src/bisector.js
function bisector(f) {
  let compare1, compare2, delta;
  if (f.length !== 2) {
    compare1 = ascending;
    compare2 = (d, x3) => ascending(f(d), x3);
    delta = (d, x3) => f(d) - x3;
  } else {
    compare1 = f === ascending || f === descending ? f : zero;
    compare2 = f;
    delta = f;
  }
  function left(a2, x3, lo = 0, hi = a2.length) {
    if (lo < hi) {
      if (compare1(x3, x3) !== 0)
        return hi;
      do {
        const mid = lo + hi >>> 1;
        if (compare2(a2[mid], x3) < 0)
          lo = mid + 1;
        else
          hi = mid;
      } while (lo < hi);
    }
    return lo;
  }
  function right(a2, x3, lo = 0, hi = a2.length) {
    if (lo < hi) {
      if (compare1(x3, x3) !== 0)
        return hi;
      do {
        const mid = lo + hi >>> 1;
        if (compare2(a2[mid], x3) <= 0)
          lo = mid + 1;
        else
          hi = mid;
      } while (lo < hi);
    }
    return lo;
  }
  function center(a2, x3, lo = 0, hi = a2.length) {
    const i = left(a2, x3, lo, hi - 1);
    return i > lo && delta(a2[i - 1], x3) > -delta(a2[i], x3) ? i - 1 : i;
  }
  return { left, center, right };
}
function zero() {
  return 0;
}

// node_modules/d3-array/src/number.js
function number(x3) {
  return x3 === null ? NaN : +x3;
}

// node_modules/d3-array/src/bisect.js
var ascendingBisect = bisector(ascending);
var bisectRight = ascendingBisect.right;
var bisectLeft = ascendingBisect.left;
var bisectCenter = bisector(number).center;
var bisect_default = bisectRight;

// node_modules/d3-array/src/ticks.js
var e10 = Math.sqrt(50);
var e5 = Math.sqrt(10);
var e2 = Math.sqrt(2);
function tickSpec(start2, stop, count) {
  const step = (stop - start2) / Math.max(0, count), power = Math.floor(Math.log10(step)), error = step / Math.pow(10, power), factor = error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1;
  let i1, i2, inc;
  if (power < 0) {
    inc = Math.pow(10, -power) / factor;
    i1 = Math.round(start2 * inc);
    i2 = Math.round(stop * inc);
    if (i1 / inc < start2)
      ++i1;
    if (i2 / inc > stop)
      --i2;
    inc = -inc;
  } else {
    inc = Math.pow(10, power) * factor;
    i1 = Math.round(start2 / inc);
    i2 = Math.round(stop / inc);
    if (i1 * inc < start2)
      ++i1;
    if (i2 * inc > stop)
      --i2;
  }
  if (i2 < i1 && 0.5 <= count && count < 2)
    return tickSpec(start2, stop, count * 2);
  return [i1, i2, inc];
}
function ticks(start2, stop, count) {
  stop = +stop, start2 = +start2, count = +count;
  if (!(count > 0))
    return [];
  if (start2 === stop)
    return [start2];
  const reverse = stop < start2, [i1, i2, inc] = reverse ? tickSpec(stop, start2, count) : tickSpec(start2, stop, count);
  if (!(i2 >= i1))
    return [];
  const n = i2 - i1 + 1, ticks2 = new Array(n);
  if (reverse) {
    if (inc < 0)
      for (let i = 0; i < n; ++i)
        ticks2[i] = (i2 - i) / -inc;
    else
      for (let i = 0; i < n; ++i)
        ticks2[i] = (i2 - i) * inc;
  } else {
    if (inc < 0)
      for (let i = 0; i < n; ++i)
        ticks2[i] = (i1 + i) / -inc;
    else
      for (let i = 0; i < n; ++i)
        ticks2[i] = (i1 + i) * inc;
  }
  return ticks2;
}
function tickIncrement(start2, stop, count) {
  stop = +stop, start2 = +start2, count = +count;
  return tickSpec(start2, stop, count)[2];
}
function tickStep(start2, stop, count) {
  stop = +stop, start2 = +start2, count = +count;
  const reverse = stop < start2, inc = reverse ? tickIncrement(stop, start2, count) : tickIncrement(start2, stop, count);
  return (reverse ? -1 : 1) * (inc < 0 ? 1 / -inc : inc);
}

// node_modules/d3-dispatch/src/dispatch.js
var noop = { value: () => {
} };
function dispatch() {
  for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {
    if (!(t = arguments[i] + "") || t in _ || /[\s.]/.test(t))
      throw new Error("illegal type: " + t);
    _[t] = [];
  }
  return new Dispatch(_);
}
function Dispatch(_) {
  this._ = _;
}
function parseTypenames(typenames, types) {
  return typenames.trim().split(/^|\s+/).map(function(t) {
    var name = "", i = t.indexOf(".");
    if (i >= 0)
      name = t.slice(i + 1), t = t.slice(0, i);
    if (t && !types.hasOwnProperty(t))
      throw new Error("unknown type: " + t);
    return { type: t, name };
  });
}
Dispatch.prototype = dispatch.prototype = {
  constructor: Dispatch,
  on: function(typename, callback) {
    var _ = this._, T = parseTypenames(typename + "", _), t, i = -1, n = T.length;
    if (arguments.length < 2) {
      while (++i < n)
        if ((t = (typename = T[i]).type) && (t = get(_[t], typename.name)))
          return t;
      return;
    }
    if (callback != null && typeof callback !== "function")
      throw new Error("invalid callback: " + callback);
    while (++i < n) {
      if (t = (typename = T[i]).type)
        _[t] = set(_[t], typename.name, callback);
      else if (callback == null)
        for (t in _)
          _[t] = set(_[t], typename.name, null);
    }
    return this;
  },
  copy: function() {
    var copy2 = {}, _ = this._;
    for (var t in _)
      copy2[t] = _[t].slice();
    return new Dispatch(copy2);
  },
  call: function(type2, that) {
    if ((n = arguments.length - 2) > 0)
      for (var args = new Array(n), i = 0, n, t; i < n; ++i)
        args[i] = arguments[i + 2];
    if (!this._.hasOwnProperty(type2))
      throw new Error("unknown type: " + type2);
    for (t = this._[type2], i = 0, n = t.length; i < n; ++i)
      t[i].value.apply(that, args);
  },
  apply: function(type2, that, args) {
    if (!this._.hasOwnProperty(type2))
      throw new Error("unknown type: " + type2);
    for (var t = this._[type2], i = 0, n = t.length; i < n; ++i)
      t[i].value.apply(that, args);
  }
};
function get(type2, name) {
  for (var i = 0, n = type2.length, c2; i < n; ++i) {
    if ((c2 = type2[i]).name === name) {
      return c2.value;
    }
  }
}
function set(type2, name, callback) {
  for (var i = 0, n = type2.length; i < n; ++i) {
    if (type2[i].name === name) {
      type2[i] = noop, type2 = type2.slice(0, i).concat(type2.slice(i + 1));
      break;
    }
  }
  if (callback != null)
    type2.push({ name, value: callback });
  return type2;
}
var dispatch_default = dispatch;

// node_modules/d3-selection/src/namespaces.js
var xhtml = "http://www.w3.org/1999/xhtml";
var namespaces_default = {
  svg: "http://www.w3.org/2000/svg",
  xhtml,
  xlink: "http://www.w3.org/1999/xlink",
  xml: "http://www.w3.org/XML/1998/namespace",
  xmlns: "http://www.w3.org/2000/xmlns/"
};

// node_modules/d3-selection/src/namespace.js
function namespace_default(name) {
  var prefix = name += "", i = prefix.indexOf(":");
  if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns")
    name = name.slice(i + 1);
  return namespaces_default.hasOwnProperty(prefix) ? { space: namespaces_default[prefix], local: name } : name;
}

// node_modules/d3-selection/src/creator.js
function creatorInherit(name) {
  return function() {
    var document2 = this.ownerDocument, uri = this.namespaceURI;
    return uri === xhtml && document2.documentElement.namespaceURI === xhtml ? document2.createElement(name) : document2.createElementNS(uri, name);
  };
}
function creatorFixed(fullname) {
  return function() {
    return this.ownerDocument.createElementNS(fullname.space, fullname.local);
  };
}
function creator_default(name) {
  var fullname = namespace_default(name);
  return (fullname.local ? creatorFixed : creatorInherit)(fullname);
}

// node_modules/d3-selection/src/selector.js
function none() {
}
function selector_default(selector) {
  return selector == null ? none : function() {
    return this.querySelector(selector);
  };
}

// node_modules/d3-selection/src/selection/select.js
function select_default(select) {
  if (typeof select !== "function")
    select = selector_default(select);
  for (var groups = this._groups, m2 = groups.length, subgroups = new Array(m2), j = 0; j < m2; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
        if ("__data__" in node)
          subnode.__data__ = node.__data__;
        subgroup[i] = subnode;
      }
    }
  }
  return new Selection(subgroups, this._parents);
}

// node_modules/d3-selection/src/array.js
function array(x3) {
  return x3 == null ? [] : Array.isArray(x3) ? x3 : Array.from(x3);
}

// node_modules/d3-selection/src/selectorAll.js
function empty() {
  return [];
}
function selectorAll_default(selector) {
  return selector == null ? empty : function() {
    return this.querySelectorAll(selector);
  };
}

// node_modules/d3-selection/src/selection/selectAll.js
function arrayAll(select) {
  return function() {
    return array(select.apply(this, arguments));
  };
}
function selectAll_default(select) {
  if (typeof select === "function")
    select = arrayAll(select);
  else
    select = selectorAll_default(select);
  for (var groups = this._groups, m2 = groups.length, subgroups = [], parents = [], j = 0; j < m2; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        subgroups.push(select.call(node, node.__data__, i, group));
        parents.push(node);
      }
    }
  }
  return new Selection(subgroups, parents);
}

// node_modules/d3-selection/src/matcher.js
function matcher_default(selector) {
  return function() {
    return this.matches(selector);
  };
}
function childMatcher(selector) {
  return function(node) {
    return node.matches(selector);
  };
}

// node_modules/d3-selection/src/selection/selectChild.js
var find = Array.prototype.find;
function childFind(match) {
  return function() {
    return find.call(this.children, match);
  };
}
function childFirst() {
  return this.firstElementChild;
}
function selectChild_default(match) {
  return this.select(match == null ? childFirst : childFind(typeof match === "function" ? match : childMatcher(match)));
}

// node_modules/d3-selection/src/selection/selectChildren.js
var filter = Array.prototype.filter;
function children() {
  return Array.from(this.children);
}
function childrenFilter(match) {
  return function() {
    return filter.call(this.children, match);
  };
}
function selectChildren_default(match) {
  return this.selectAll(match == null ? children : childrenFilter(typeof match === "function" ? match : childMatcher(match)));
}

// node_modules/d3-selection/src/selection/filter.js
function filter_default(match) {
  if (typeof match !== "function")
    match = matcher_default(match);
  for (var groups = this._groups, m2 = groups.length, subgroups = new Array(m2), j = 0; j < m2; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
        subgroup.push(node);
      }
    }
  }
  return new Selection(subgroups, this._parents);
}

// node_modules/d3-selection/src/selection/sparse.js
function sparse_default(update) {
  return new Array(update.length);
}

// node_modules/d3-selection/src/selection/enter.js
function enter_default() {
  return new Selection(this._enter || this._groups.map(sparse_default), this._parents);
}
function EnterNode(parent, datum2) {
  this.ownerDocument = parent.ownerDocument;
  this.namespaceURI = parent.namespaceURI;
  this._next = null;
  this._parent = parent;
  this.__data__ = datum2;
}
EnterNode.prototype = {
  constructor: EnterNode,
  appendChild: function(child) {
    return this._parent.insertBefore(child, this._next);
  },
  insertBefore: function(child, next) {
    return this._parent.insertBefore(child, next);
  },
  querySelector: function(selector) {
    return this._parent.querySelector(selector);
  },
  querySelectorAll: function(selector) {
    return this._parent.querySelectorAll(selector);
  }
};

// node_modules/d3-selection/src/constant.js
function constant_default(x3) {
  return function() {
    return x3;
  };
}

// node_modules/d3-selection/src/selection/data.js
function bindIndex(parent, group, enter, update, exit, data) {
  var i = 0, node, groupLength = group.length, dataLength = data.length;
  for (; i < dataLength; ++i) {
    if (node = group[i]) {
      node.__data__ = data[i];
      update[i] = node;
    } else {
      enter[i] = new EnterNode(parent, data[i]);
    }
  }
  for (; i < groupLength; ++i) {
    if (node = group[i]) {
      exit[i] = node;
    }
  }
}
function bindKey(parent, group, enter, update, exit, data, key) {
  var i, node, nodeByKeyValue = /* @__PURE__ */ new Map(), groupLength = group.length, dataLength = data.length, keyValues = new Array(groupLength), keyValue;
  for (i = 0; i < groupLength; ++i) {
    if (node = group[i]) {
      keyValues[i] = keyValue = key.call(node, node.__data__, i, group) + "";
      if (nodeByKeyValue.has(keyValue)) {
        exit[i] = node;
      } else {
        nodeByKeyValue.set(keyValue, node);
      }
    }
  }
  for (i = 0; i < dataLength; ++i) {
    keyValue = key.call(parent, data[i], i, data) + "";
    if (node = nodeByKeyValue.get(keyValue)) {
      update[i] = node;
      node.__data__ = data[i];
      nodeByKeyValue.delete(keyValue);
    } else {
      enter[i] = new EnterNode(parent, data[i]);
    }
  }
  for (i = 0; i < groupLength; ++i) {
    if ((node = group[i]) && nodeByKeyValue.get(keyValues[i]) === node) {
      exit[i] = node;
    }
  }
}
function datum(node) {
  return node.__data__;
}
function data_default(value, key) {
  if (!arguments.length)
    return Array.from(this, datum);
  var bind = key ? bindKey : bindIndex, parents = this._parents, groups = this._groups;
  if (typeof value !== "function")
    value = constant_default(value);
  for (var m2 = groups.length, update = new Array(m2), enter = new Array(m2), exit = new Array(m2), j = 0; j < m2; ++j) {
    var parent = parents[j], group = groups[j], groupLength = group.length, data = arraylike(value.call(parent, parent && parent.__data__, j, parents)), dataLength = data.length, enterGroup = enter[j] = new Array(dataLength), updateGroup = update[j] = new Array(dataLength), exitGroup = exit[j] = new Array(groupLength);
    bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);
    for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {
      if (previous = enterGroup[i0]) {
        if (i0 >= i1)
          i1 = i0 + 1;
        while (!(next = updateGroup[i1]) && ++i1 < dataLength)
          ;
        previous._next = next || null;
      }
    }
  }
  update = new Selection(update, parents);
  update._enter = enter;
  update._exit = exit;
  return update;
}
function arraylike(data) {
  return typeof data === "object" && "length" in data ? data : Array.from(data);
}

// node_modules/d3-selection/src/selection/exit.js
function exit_default() {
  return new Selection(this._exit || this._groups.map(sparse_default), this._parents);
}

// node_modules/d3-selection/src/selection/join.js
function join_default(onenter, onupdate, onexit) {
  var enter = this.enter(), update = this, exit = this.exit();
  if (typeof onenter === "function") {
    enter = onenter(enter);
    if (enter)
      enter = enter.selection();
  } else {
    enter = enter.append(onenter + "");
  }
  if (onupdate != null) {
    update = onupdate(update);
    if (update)
      update = update.selection();
  }
  if (onexit == null)
    exit.remove();
  else
    onexit(exit);
  return enter && update ? enter.merge(update).order() : update;
}

// node_modules/d3-selection/src/selection/merge.js
function merge_default(context) {
  var selection2 = context.selection ? context.selection() : context;
  for (var groups0 = this._groups, groups1 = selection2._groups, m0 = groups0.length, m1 = groups1.length, m2 = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m2; ++j) {
    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group0[i] || group1[i]) {
        merge[i] = node;
      }
    }
  }
  for (; j < m0; ++j) {
    merges[j] = groups0[j];
  }
  return new Selection(merges, this._parents);
}

// node_modules/d3-selection/src/selection/order.js
function order_default() {
  for (var groups = this._groups, j = -1, m2 = groups.length; ++j < m2; ) {
    for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0; ) {
      if (node = group[i]) {
        if (next && node.compareDocumentPosition(next) ^ 4)
          next.parentNode.insertBefore(node, next);
        next = node;
      }
    }
  }
  return this;
}

// node_modules/d3-selection/src/selection/sort.js
function sort_default(compare) {
  if (!compare)
    compare = ascending2;
  function compareNode(a2, b) {
    return a2 && b ? compare(a2.__data__, b.__data__) : !a2 - !b;
  }
  for (var groups = this._groups, m2 = groups.length, sortgroups = new Array(m2), j = 0; j < m2; ++j) {
    for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        sortgroup[i] = node;
      }
    }
    sortgroup.sort(compareNode);
  }
  return new Selection(sortgroups, this._parents).order();
}
function ascending2(a2, b) {
  return a2 < b ? -1 : a2 > b ? 1 : a2 >= b ? 0 : NaN;
}

// node_modules/d3-selection/src/selection/call.js
function call_default() {
  var callback = arguments[0];
  arguments[0] = this;
  callback.apply(null, arguments);
  return this;
}

// node_modules/d3-selection/src/selection/nodes.js
function nodes_default() {
  return Array.from(this);
}

// node_modules/d3-selection/src/selection/node.js
function node_default() {
  for (var groups = this._groups, j = 0, m2 = groups.length; j < m2; ++j) {
    for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {
      var node = group[i];
      if (node)
        return node;
    }
  }
  return null;
}

// node_modules/d3-selection/src/selection/size.js
function size_default() {
  let size = 0;
  for (const node of this)
    ++size;
  return size;
}

// node_modules/d3-selection/src/selection/empty.js
function empty_default() {
  return !this.node();
}

// node_modules/d3-selection/src/selection/each.js
function each_default(callback) {
  for (var groups = this._groups, j = 0, m2 = groups.length; j < m2; ++j) {
    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
      if (node = group[i])
        callback.call(node, node.__data__, i, group);
    }
  }
  return this;
}

// node_modules/d3-selection/src/selection/attr.js
function attrRemove(name) {
  return function() {
    this.removeAttribute(name);
  };
}
function attrRemoveNS(fullname) {
  return function() {
    this.removeAttributeNS(fullname.space, fullname.local);
  };
}
function attrConstant(name, value) {
  return function() {
    this.setAttribute(name, value);
  };
}
function attrConstantNS(fullname, value) {
  return function() {
    this.setAttributeNS(fullname.space, fullname.local, value);
  };
}
function attrFunction(name, value) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null)
      this.removeAttribute(name);
    else
      this.setAttribute(name, v);
  };
}
function attrFunctionNS(fullname, value) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null)
      this.removeAttributeNS(fullname.space, fullname.local);
    else
      this.setAttributeNS(fullname.space, fullname.local, v);
  };
}
function attr_default(name, value) {
  var fullname = namespace_default(name);
  if (arguments.length < 2) {
    var node = this.node();
    return fullname.local ? node.getAttributeNS(fullname.space, fullname.local) : node.getAttribute(fullname);
  }
  return this.each((value == null ? fullname.local ? attrRemoveNS : attrRemove : typeof value === "function" ? fullname.local ? attrFunctionNS : attrFunction : fullname.local ? attrConstantNS : attrConstant)(fullname, value));
}

// node_modules/d3-selection/src/window.js
function window_default(node) {
  return node.ownerDocument && node.ownerDocument.defaultView || node.document && node || node.defaultView;
}

// node_modules/d3-selection/src/selection/style.js
function styleRemove(name) {
  return function() {
    this.style.removeProperty(name);
  };
}
function styleConstant(name, value, priority) {
  return function() {
    this.style.setProperty(name, value, priority);
  };
}
function styleFunction(name, value, priority) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null)
      this.style.removeProperty(name);
    else
      this.style.setProperty(name, v, priority);
  };
}
function style_default(name, value, priority) {
  return arguments.length > 1 ? this.each((value == null ? styleRemove : typeof value === "function" ? styleFunction : styleConstant)(name, value, priority == null ? "" : priority)) : styleValue(this.node(), name);
}
function styleValue(node, name) {
  return node.style.getPropertyValue(name) || window_default(node).getComputedStyle(node, null).getPropertyValue(name);
}

// node_modules/d3-selection/src/selection/property.js
function propertyRemove(name) {
  return function() {
    delete this[name];
  };
}
function propertyConstant(name, value) {
  return function() {
    this[name] = value;
  };
}
function propertyFunction(name, value) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null)
      delete this[name];
    else
      this[name] = v;
  };
}
function property_default(name, value) {
  return arguments.length > 1 ? this.each((value == null ? propertyRemove : typeof value === "function" ? propertyFunction : propertyConstant)(name, value)) : this.node()[name];
}

// node_modules/d3-selection/src/selection/classed.js
function classArray(string) {
  return string.trim().split(/^|\s+/);
}
function classList(node) {
  return node.classList || new ClassList(node);
}
function ClassList(node) {
  this._node = node;
  this._names = classArray(node.getAttribute("class") || "");
}
ClassList.prototype = {
  add: function(name) {
    var i = this._names.indexOf(name);
    if (i < 0) {
      this._names.push(name);
      this._node.setAttribute("class", this._names.join(" "));
    }
  },
  remove: function(name) {
    var i = this._names.indexOf(name);
    if (i >= 0) {
      this._names.splice(i, 1);
      this._node.setAttribute("class", this._names.join(" "));
    }
  },
  contains: function(name) {
    return this._names.indexOf(name) >= 0;
  }
};
function classedAdd(node, names) {
  var list = classList(node), i = -1, n = names.length;
  while (++i < n)
    list.add(names[i]);
}
function classedRemove(node, names) {
  var list = classList(node), i = -1, n = names.length;
  while (++i < n)
    list.remove(names[i]);
}
function classedTrue(names) {
  return function() {
    classedAdd(this, names);
  };
}
function classedFalse(names) {
  return function() {
    classedRemove(this, names);
  };
}
function classedFunction(names, value) {
  return function() {
    (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);
  };
}
function classed_default(name, value) {
  var names = classArray(name + "");
  if (arguments.length < 2) {
    var list = classList(this.node()), i = -1, n = names.length;
    while (++i < n)
      if (!list.contains(names[i]))
        return false;
    return true;
  }
  return this.each((typeof value === "function" ? classedFunction : value ? classedTrue : classedFalse)(names, value));
}

// node_modules/d3-selection/src/selection/text.js
function textRemove() {
  this.textContent = "";
}
function textConstant(value) {
  return function() {
    this.textContent = value;
  };
}
function textFunction(value) {
  return function() {
    var v = value.apply(this, arguments);
    this.textContent = v == null ? "" : v;
  };
}
function text_default(value) {
  return arguments.length ? this.each(value == null ? textRemove : (typeof value === "function" ? textFunction : textConstant)(value)) : this.node().textContent;
}

// node_modules/d3-selection/src/selection/html.js
function htmlRemove() {
  this.innerHTML = "";
}
function htmlConstant(value) {
  return function() {
    this.innerHTML = value;
  };
}
function htmlFunction(value) {
  return function() {
    var v = value.apply(this, arguments);
    this.innerHTML = v == null ? "" : v;
  };
}
function html_default(value) {
  return arguments.length ? this.each(value == null ? htmlRemove : (typeof value === "function" ? htmlFunction : htmlConstant)(value)) : this.node().innerHTML;
}

// node_modules/d3-selection/src/selection/raise.js
function raise() {
  if (this.nextSibling)
    this.parentNode.appendChild(this);
}
function raise_default() {
  return this.each(raise);
}

// node_modules/d3-selection/src/selection/lower.js
function lower() {
  if (this.previousSibling)
    this.parentNode.insertBefore(this, this.parentNode.firstChild);
}
function lower_default() {
  return this.each(lower);
}

// node_modules/d3-selection/src/selection/append.js
function append_default(name) {
  var create2 = typeof name === "function" ? name : creator_default(name);
  return this.select(function() {
    return this.appendChild(create2.apply(this, arguments));
  });
}

// node_modules/d3-selection/src/selection/insert.js
function constantNull() {
  return null;
}
function insert_default(name, before) {
  var create2 = typeof name === "function" ? name : creator_default(name), select = before == null ? constantNull : typeof before === "function" ? before : selector_default(before);
  return this.select(function() {
    return this.insertBefore(create2.apply(this, arguments), select.apply(this, arguments) || null);
  });
}

// node_modules/d3-selection/src/selection/remove.js
function remove() {
  var parent = this.parentNode;
  if (parent)
    parent.removeChild(this);
}
function remove_default() {
  return this.each(remove);
}

// node_modules/d3-selection/src/selection/clone.js
function selection_cloneShallow() {
  var clone = this.cloneNode(false), parent = this.parentNode;
  return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
}
function selection_cloneDeep() {
  var clone = this.cloneNode(true), parent = this.parentNode;
  return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
}
function clone_default(deep) {
  return this.select(deep ? selection_cloneDeep : selection_cloneShallow);
}

// node_modules/d3-selection/src/selection/datum.js
function datum_default(value) {
  return arguments.length ? this.property("__data__", value) : this.node().__data__;
}

// node_modules/d3-selection/src/selection/on.js
function contextListener(listener) {
  return function(event) {
    listener.call(this, event, this.__data__);
  };
}
function parseTypenames2(typenames) {
  return typenames.trim().split(/^|\s+/).map(function(t) {
    var name = "", i = t.indexOf(".");
    if (i >= 0)
      name = t.slice(i + 1), t = t.slice(0, i);
    return { type: t, name };
  });
}
function onRemove(typename) {
  return function() {
    var on = this.__on;
    if (!on)
      return;
    for (var j = 0, i = -1, m2 = on.length, o; j < m2; ++j) {
      if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {
        this.removeEventListener(o.type, o.listener, o.options);
      } else {
        on[++i] = o;
      }
    }
    if (++i)
      on.length = i;
    else
      delete this.__on;
  };
}
function onAdd(typename, value, options) {
  return function() {
    var on = this.__on, o, listener = contextListener(value);
    if (on)
      for (var j = 0, m2 = on.length; j < m2; ++j) {
        if ((o = on[j]).type === typename.type && o.name === typename.name) {
          this.removeEventListener(o.type, o.listener, o.options);
          this.addEventListener(o.type, o.listener = listener, o.options = options);
          o.value = value;
          return;
        }
      }
    this.addEventListener(typename.type, listener, options);
    o = { type: typename.type, name: typename.name, value, listener, options };
    if (!on)
      this.__on = [o];
    else
      on.push(o);
  };
}
function on_default(typename, value, options) {
  var typenames = parseTypenames2(typename + ""), i, n = typenames.length, t;
  if (arguments.length < 2) {
    var on = this.node().__on;
    if (on)
      for (var j = 0, m2 = on.length, o; j < m2; ++j) {
        for (i = 0, o = on[j]; i < n; ++i) {
          if ((t = typenames[i]).type === o.type && t.name === o.name) {
            return o.value;
          }
        }
      }
    return;
  }
  on = value ? onAdd : onRemove;
  for (i = 0; i < n; ++i)
    this.each(on(typenames[i], value, options));
  return this;
}

// node_modules/d3-selection/src/selection/dispatch.js
function dispatchEvent(node, type2, params) {
  var window2 = window_default(node), event = window2.CustomEvent;
  if (typeof event === "function") {
    event = new event(type2, params);
  } else {
    event = window2.document.createEvent("Event");
    if (params)
      event.initEvent(type2, params.bubbles, params.cancelable), event.detail = params.detail;
    else
      event.initEvent(type2, false, false);
  }
  node.dispatchEvent(event);
}
function dispatchConstant(type2, params) {
  return function() {
    return dispatchEvent(this, type2, params);
  };
}
function dispatchFunction(type2, params) {
  return function() {
    return dispatchEvent(this, type2, params.apply(this, arguments));
  };
}
function dispatch_default2(type2, params) {
  return this.each((typeof params === "function" ? dispatchFunction : dispatchConstant)(type2, params));
}

// node_modules/d3-selection/src/selection/iterator.js
function* iterator_default() {
  for (var groups = this._groups, j = 0, m2 = groups.length; j < m2; ++j) {
    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
      if (node = group[i])
        yield node;
    }
  }
}

// node_modules/d3-selection/src/selection/index.js
var root = [null];
function Selection(groups, parents) {
  this._groups = groups;
  this._parents = parents;
}
function selection() {
  return new Selection([[document.documentElement]], root);
}
function selection_selection() {
  return this;
}
Selection.prototype = selection.prototype = {
  constructor: Selection,
  select: select_default,
  selectAll: selectAll_default,
  selectChild: selectChild_default,
  selectChildren: selectChildren_default,
  filter: filter_default,
  data: data_default,
  enter: enter_default,
  exit: exit_default,
  join: join_default,
  merge: merge_default,
  selection: selection_selection,
  order: order_default,
  sort: sort_default,
  call: call_default,
  nodes: nodes_default,
  node: node_default,
  size: size_default,
  empty: empty_default,
  each: each_default,
  attr: attr_default,
  style: style_default,
  property: property_default,
  classed: classed_default,
  text: text_default,
  html: html_default,
  raise: raise_default,
  lower: lower_default,
  append: append_default,
  insert: insert_default,
  remove: remove_default,
  clone: clone_default,
  datum: datum_default,
  on: on_default,
  dispatch: dispatch_default2,
  [Symbol.iterator]: iterator_default
};
var selection_default = selection;

// node_modules/d3-selection/src/select.js
function select_default2(selector) {
  return typeof selector === "string" ? new Selection([[document.querySelector(selector)]], [document.documentElement]) : new Selection([[selector]], root);
}

// node_modules/d3-selection/src/sourceEvent.js
function sourceEvent_default(event) {
  let sourceEvent;
  while (sourceEvent = event.sourceEvent)
    event = sourceEvent;
  return event;
}

// node_modules/d3-selection/src/pointer.js
function pointer_default(event, node) {
  event = sourceEvent_default(event);
  if (node === void 0)
    node = event.currentTarget;
  if (node) {
    var svg = node.ownerSVGElement || node;
    if (svg.createSVGPoint) {
      var point = svg.createSVGPoint();
      point.x = event.clientX, point.y = event.clientY;
      point = point.matrixTransform(node.getScreenCTM().inverse());
      return [point.x, point.y];
    }
    if (node.getBoundingClientRect) {
      var rect = node.getBoundingClientRect();
      return [event.clientX - rect.left - node.clientLeft, event.clientY - rect.top - node.clientTop];
    }
  }
  return [event.pageX, event.pageY];
}

// node_modules/d3-drag/src/noevent.js
var nonpassive = { passive: false };
var nonpassivecapture = { capture: true, passive: false };
function nopropagation(event) {
  event.stopImmediatePropagation();
}
function noevent_default(event) {
  event.preventDefault();
  event.stopImmediatePropagation();
}

// node_modules/d3-drag/src/nodrag.js
function nodrag_default(view) {
  var root2 = view.document.documentElement, selection2 = select_default2(view).on("dragstart.drag", noevent_default, nonpassivecapture);
  if ("onselectstart" in root2) {
    selection2.on("selectstart.drag", noevent_default, nonpassivecapture);
  } else {
    root2.__noselect = root2.style.MozUserSelect;
    root2.style.MozUserSelect = "none";
  }
}
function yesdrag(view, noclick) {
  var root2 = view.document.documentElement, selection2 = select_default2(view).on("dragstart.drag", null);
  if (noclick) {
    selection2.on("click.drag", noevent_default, nonpassivecapture);
    setTimeout(function() {
      selection2.on("click.drag", null);
    }, 0);
  }
  if ("onselectstart" in root2) {
    selection2.on("selectstart.drag", null);
  } else {
    root2.style.MozUserSelect = root2.__noselect;
    delete root2.__noselect;
  }
}

// node_modules/d3-drag/src/constant.js
var constant_default2 = (x3) => () => x3;

// node_modules/d3-drag/src/event.js
function DragEvent(type2, {
  sourceEvent,
  subject,
  target,
  identifier,
  active,
  x: x3,
  y: y3,
  dx,
  dy,
  dispatch: dispatch2
}) {
  Object.defineProperties(this, {
    type: { value: type2, enumerable: true, configurable: true },
    sourceEvent: { value: sourceEvent, enumerable: true, configurable: true },
    subject: { value: subject, enumerable: true, configurable: true },
    target: { value: target, enumerable: true, configurable: true },
    identifier: { value: identifier, enumerable: true, configurable: true },
    active: { value: active, enumerable: true, configurable: true },
    x: { value: x3, enumerable: true, configurable: true },
    y: { value: y3, enumerable: true, configurable: true },
    dx: { value: dx, enumerable: true, configurable: true },
    dy: { value: dy, enumerable: true, configurable: true },
    _: { value: dispatch2 }
  });
}
DragEvent.prototype.on = function() {
  var value = this._.on.apply(this._, arguments);
  return value === this._ ? this : value;
};

// node_modules/d3-drag/src/drag.js
function defaultFilter(event) {
  return !event.ctrlKey && !event.button;
}
function defaultContainer() {
  return this.parentNode;
}
function defaultSubject(event, d) {
  return d == null ? { x: event.x, y: event.y } : d;
}
function defaultTouchable() {
  return navigator.maxTouchPoints || "ontouchstart" in this;
}
function drag_default() {
  var filter2 = defaultFilter, container = defaultContainer, subject = defaultSubject, touchable = defaultTouchable, gestures = {}, listeners = dispatch_default("start", "drag", "end"), active = 0, mousedownx, mousedowny, mousemoving, touchending, clickDistance2 = 0;
  function drag(selection2) {
    selection2.on("mousedown.drag", mousedowned).filter(touchable).on("touchstart.drag", touchstarted).on("touchmove.drag", touchmoved, nonpassive).on("touchend.drag touchcancel.drag", touchended).style("touch-action", "none").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
  }
  function mousedowned(event, d) {
    if (touchending || !filter2.call(this, event, d))
      return;
    var gesture = beforestart(this, container.call(this, event, d), event, d, "mouse");
    if (!gesture)
      return;
    select_default2(event.view).on("mousemove.drag", mousemoved, nonpassivecapture).on("mouseup.drag", mouseupped, nonpassivecapture);
    nodrag_default(event.view);
    nopropagation(event);
    mousemoving = false;
    mousedownx = event.clientX;
    mousedowny = event.clientY;
    gesture("start", event);
  }
  function mousemoved(event) {
    noevent_default(event);
    if (!mousemoving) {
      var dx = event.clientX - mousedownx, dy = event.clientY - mousedowny;
      mousemoving = dx * dx + dy * dy > clickDistance2;
    }
    gestures.mouse("drag", event);
  }
  function mouseupped(event) {
    select_default2(event.view).on("mousemove.drag mouseup.drag", null);
    yesdrag(event.view, mousemoving);
    noevent_default(event);
    gestures.mouse("end", event);
  }
  function touchstarted(event, d) {
    if (!filter2.call(this, event, d))
      return;
    var touches = event.changedTouches, c2 = container.call(this, event, d), n = touches.length, i, gesture;
    for (i = 0; i < n; ++i) {
      if (gesture = beforestart(this, c2, event, d, touches[i].identifier, touches[i])) {
        nopropagation(event);
        gesture("start", event, touches[i]);
      }
    }
  }
  function touchmoved(event) {
    var touches = event.changedTouches, n = touches.length, i, gesture;
    for (i = 0; i < n; ++i) {
      if (gesture = gestures[touches[i].identifier]) {
        noevent_default(event);
        gesture("drag", event, touches[i]);
      }
    }
  }
  function touchended(event) {
    var touches = event.changedTouches, n = touches.length, i, gesture;
    if (touchending)
      clearTimeout(touchending);
    touchending = setTimeout(function() {
      touchending = null;
    }, 500);
    for (i = 0; i < n; ++i) {
      if (gesture = gestures[touches[i].identifier]) {
        nopropagation(event);
        gesture("end", event, touches[i]);
      }
    }
  }
  function beforestart(that, container2, event, d, identifier, touch) {
    var dispatch2 = listeners.copy(), p = pointer_default(touch || event, container2), dx, dy, s;
    if ((s = subject.call(that, new DragEvent("beforestart", {
      sourceEvent: event,
      target: drag,
      identifier,
      active,
      x: p[0],
      y: p[1],
      dx: 0,
      dy: 0,
      dispatch: dispatch2
    }), d)) == null)
      return;
    dx = s.x - p[0] || 0;
    dy = s.y - p[1] || 0;
    return function gesture(type2, event2, touch2) {
      var p0 = p, n;
      switch (type2) {
        case "start":
          gestures[identifier] = gesture, n = active++;
          break;
        case "end":
          delete gestures[identifier], --active;
        case "drag":
          p = pointer_default(touch2 || event2, container2), n = active;
          break;
      }
      dispatch2.call(
        type2,
        that,
        new DragEvent(type2, {
          sourceEvent: event2,
          subject: s,
          target: drag,
          identifier,
          active: n,
          x: p[0] + dx,
          y: p[1] + dy,
          dx: p[0] - p0[0],
          dy: p[1] - p0[1],
          dispatch: dispatch2
        }),
        d
      );
    };
  }
  drag.filter = function(_) {
    return arguments.length ? (filter2 = typeof _ === "function" ? _ : constant_default2(!!_), drag) : filter2;
  };
  drag.container = function(_) {
    return arguments.length ? (container = typeof _ === "function" ? _ : constant_default2(_), drag) : container;
  };
  drag.subject = function(_) {
    return arguments.length ? (subject = typeof _ === "function" ? _ : constant_default2(_), drag) : subject;
  };
  drag.touchable = function(_) {
    return arguments.length ? (touchable = typeof _ === "function" ? _ : constant_default2(!!_), drag) : touchable;
  };
  drag.on = function() {
    var value = listeners.on.apply(listeners, arguments);
    return value === listeners ? drag : value;
  };
  drag.clickDistance = function(_) {
    return arguments.length ? (clickDistance2 = (_ = +_) * _, drag) : Math.sqrt(clickDistance2);
  };
  return drag;
}

// node_modules/d3-color/src/define.js
function define_default(constructor, factory, prototype) {
  constructor.prototype = factory.prototype = prototype;
  prototype.constructor = constructor;
}
function extend(parent, definition) {
  var prototype = Object.create(parent.prototype);
  for (var key in definition)
    prototype[key] = definition[key];
  return prototype;
}

// node_modules/d3-color/src/color.js
function Color() {
}
var darker = 0.7;
var brighter = 1 / darker;
var reI = "\\s*([+-]?\\d+)\\s*";
var reN = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*";
var reP = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*";
var reHex = /^#([0-9a-f]{3,8})$/;
var reRgbInteger = new RegExp(`^rgb\\(${reI},${reI},${reI}\\)$`);
var reRgbPercent = new RegExp(`^rgb\\(${reP},${reP},${reP}\\)$`);
var reRgbaInteger = new RegExp(`^rgba\\(${reI},${reI},${reI},${reN}\\)$`);
var reRgbaPercent = new RegExp(`^rgba\\(${reP},${reP},${reP},${reN}\\)$`);
var reHslPercent = new RegExp(`^hsl\\(${reN},${reP},${reP}\\)$`);
var reHslaPercent = new RegExp(`^hsla\\(${reN},${reP},${reP},${reN}\\)$`);
var named = {
  aliceblue: 15792383,
  antiquewhite: 16444375,
  aqua: 65535,
  aquamarine: 8388564,
  azure: 15794175,
  beige: 16119260,
  bisque: 16770244,
  black: 0,
  blanchedalmond: 16772045,
  blue: 255,
  blueviolet: 9055202,
  brown: 10824234,
  burlywood: 14596231,
  cadetblue: 6266528,
  chartreuse: 8388352,
  chocolate: 13789470,
  coral: 16744272,
  cornflowerblue: 6591981,
  cornsilk: 16775388,
  crimson: 14423100,
  cyan: 65535,
  darkblue: 139,
  darkcyan: 35723,
  darkgoldenrod: 12092939,
  darkgray: 11119017,
  darkgreen: 25600,
  darkgrey: 11119017,
  darkkhaki: 12433259,
  darkmagenta: 9109643,
  darkolivegreen: 5597999,
  darkorange: 16747520,
  darkorchid: 10040012,
  darkred: 9109504,
  darksalmon: 15308410,
  darkseagreen: 9419919,
  darkslateblue: 4734347,
  darkslategray: 3100495,
  darkslategrey: 3100495,
  darkturquoise: 52945,
  darkviolet: 9699539,
  deeppink: 16716947,
  deepskyblue: 49151,
  dimgray: 6908265,
  dimgrey: 6908265,
  dodgerblue: 2003199,
  firebrick: 11674146,
  floralwhite: 16775920,
  forestgreen: 2263842,
  fuchsia: 16711935,
  gainsboro: 14474460,
  ghostwhite: 16316671,
  gold: 16766720,
  goldenrod: 14329120,
  gray: 8421504,
  green: 32768,
  greenyellow: 11403055,
  grey: 8421504,
  honeydew: 15794160,
  hotpink: 16738740,
  indianred: 13458524,
  indigo: 4915330,
  ivory: 16777200,
  khaki: 15787660,
  lavender: 15132410,
  lavenderblush: 16773365,
  lawngreen: 8190976,
  lemonchiffon: 16775885,
  lightblue: 11393254,
  lightcoral: 15761536,
  lightcyan: 14745599,
  lightgoldenrodyellow: 16448210,
  lightgray: 13882323,
  lightgreen: 9498256,
  lightgrey: 13882323,
  lightpink: 16758465,
  lightsalmon: 16752762,
  lightseagreen: 2142890,
  lightskyblue: 8900346,
  lightslategray: 7833753,
  lightslategrey: 7833753,
  lightsteelblue: 11584734,
  lightyellow: 16777184,
  lime: 65280,
  limegreen: 3329330,
  linen: 16445670,
  magenta: 16711935,
  maroon: 8388608,
  mediumaquamarine: 6737322,
  mediumblue: 205,
  mediumorchid: 12211667,
  mediumpurple: 9662683,
  mediumseagreen: 3978097,
  mediumslateblue: 8087790,
  mediumspringgreen: 64154,
  mediumturquoise: 4772300,
  mediumvioletred: 13047173,
  midnightblue: 1644912,
  mintcream: 16121850,
  mistyrose: 16770273,
  moccasin: 16770229,
  navajowhite: 16768685,
  navy: 128,
  oldlace: 16643558,
  olive: 8421376,
  olivedrab: 7048739,
  orange: 16753920,
  orangered: 16729344,
  orchid: 14315734,
  palegoldenrod: 15657130,
  palegreen: 10025880,
  paleturquoise: 11529966,
  palevioletred: 14381203,
  papayawhip: 16773077,
  peachpuff: 16767673,
  peru: 13468991,
  pink: 16761035,
  plum: 14524637,
  powderblue: 11591910,
  purple: 8388736,
  rebeccapurple: 6697881,
  red: 16711680,
  rosybrown: 12357519,
  royalblue: 4286945,
  saddlebrown: 9127187,
  salmon: 16416882,
  sandybrown: 16032864,
  seagreen: 3050327,
  seashell: 16774638,
  sienna: 10506797,
  silver: 12632256,
  skyblue: 8900331,
  slateblue: 6970061,
  slategray: 7372944,
  slategrey: 7372944,
  snow: 16775930,
  springgreen: 65407,
  steelblue: 4620980,
  tan: 13808780,
  teal: 32896,
  thistle: 14204888,
  tomato: 16737095,
  turquoise: 4251856,
  violet: 15631086,
  wheat: 16113331,
  white: 16777215,
  whitesmoke: 16119285,
  yellow: 16776960,
  yellowgreen: 10145074
};
define_default(Color, color, {
  copy(channels) {
    return Object.assign(new this.constructor(), this, channels);
  },
  displayable() {
    return this.rgb().displayable();
  },
  hex: color_formatHex,
  // Deprecated! Use color.formatHex.
  formatHex: color_formatHex,
  formatHex8: color_formatHex8,
  formatHsl: color_formatHsl,
  formatRgb: color_formatRgb,
  toString: color_formatRgb
});
function color_formatHex() {
  return this.rgb().formatHex();
}
function color_formatHex8() {
  return this.rgb().formatHex8();
}
function color_formatHsl() {
  return hslConvert(this).formatHsl();
}
function color_formatRgb() {
  return this.rgb().formatRgb();
}
function color(format2) {
  var m2, l;
  format2 = (format2 + "").trim().toLowerCase();
  return (m2 = reHex.exec(format2)) ? (l = m2[1].length, m2 = parseInt(m2[1], 16), l === 6 ? rgbn(m2) : l === 3 ? new Rgb(m2 >> 8 & 15 | m2 >> 4 & 240, m2 >> 4 & 15 | m2 & 240, (m2 & 15) << 4 | m2 & 15, 1) : l === 8 ? rgba(m2 >> 24 & 255, m2 >> 16 & 255, m2 >> 8 & 255, (m2 & 255) / 255) : l === 4 ? rgba(m2 >> 12 & 15 | m2 >> 8 & 240, m2 >> 8 & 15 | m2 >> 4 & 240, m2 >> 4 & 15 | m2 & 240, ((m2 & 15) << 4 | m2 & 15) / 255) : null) : (m2 = reRgbInteger.exec(format2)) ? new Rgb(m2[1], m2[2], m2[3], 1) : (m2 = reRgbPercent.exec(format2)) ? new Rgb(m2[1] * 255 / 100, m2[2] * 255 / 100, m2[3] * 255 / 100, 1) : (m2 = reRgbaInteger.exec(format2)) ? rgba(m2[1], m2[2], m2[3], m2[4]) : (m2 = reRgbaPercent.exec(format2)) ? rgba(m2[1] * 255 / 100, m2[2] * 255 / 100, m2[3] * 255 / 100, m2[4]) : (m2 = reHslPercent.exec(format2)) ? hsla(m2[1], m2[2] / 100, m2[3] / 100, 1) : (m2 = reHslaPercent.exec(format2)) ? hsla(m2[1], m2[2] / 100, m2[3] / 100, m2[4]) : named.hasOwnProperty(format2) ? rgbn(named[format2]) : format2 === "transparent" ? new Rgb(NaN, NaN, NaN, 0) : null;
}
function rgbn(n) {
  return new Rgb(n >> 16 & 255, n >> 8 & 255, n & 255, 1);
}
function rgba(r, g, b, a2) {
  if (a2 <= 0)
    r = g = b = NaN;
  return new Rgb(r, g, b, a2);
}
function rgbConvert(o) {
  if (!(o instanceof Color))
    o = color(o);
  if (!o)
    return new Rgb();
  o = o.rgb();
  return new Rgb(o.r, o.g, o.b, o.opacity);
}
function rgb(r, g, b, opacity) {
  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
}
function Rgb(r, g, b, opacity) {
  this.r = +r;
  this.g = +g;
  this.b = +b;
  this.opacity = +opacity;
}
define_default(Rgb, rgb, extend(Color, {
  brighter(k) {
    k = k == null ? brighter : Math.pow(brighter, k);
    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
  },
  darker(k) {
    k = k == null ? darker : Math.pow(darker, k);
    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
  },
  rgb() {
    return this;
  },
  clamp() {
    return new Rgb(clampi(this.r), clampi(this.g), clampi(this.b), clampa(this.opacity));
  },
  displayable() {
    return -0.5 <= this.r && this.r < 255.5 && (-0.5 <= this.g && this.g < 255.5) && (-0.5 <= this.b && this.b < 255.5) && (0 <= this.opacity && this.opacity <= 1);
  },
  hex: rgb_formatHex,
  // Deprecated! Use color.formatHex.
  formatHex: rgb_formatHex,
  formatHex8: rgb_formatHex8,
  formatRgb: rgb_formatRgb,
  toString: rgb_formatRgb
}));
function rgb_formatHex() {
  return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}`;
}
function rgb_formatHex8() {
  return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}${hex((isNaN(this.opacity) ? 1 : this.opacity) * 255)}`;
}
function rgb_formatRgb() {
  const a2 = clampa(this.opacity);
  return `${a2 === 1 ? "rgb(" : "rgba("}${clampi(this.r)}, ${clampi(this.g)}, ${clampi(this.b)}${a2 === 1 ? ")" : `, ${a2})`}`;
}
function clampa(opacity) {
  return isNaN(opacity) ? 1 : Math.max(0, Math.min(1, opacity));
}
function clampi(value) {
  return Math.max(0, Math.min(255, Math.round(value) || 0));
}
function hex(value) {
  value = clampi(value);
  return (value < 16 ? "0" : "") + value.toString(16);
}
function hsla(h, s, l, a2) {
  if (a2 <= 0)
    h = s = l = NaN;
  else if (l <= 0 || l >= 1)
    h = s = NaN;
  else if (s <= 0)
    h = NaN;
  return new Hsl(h, s, l, a2);
}
function hslConvert(o) {
  if (o instanceof Hsl)
    return new Hsl(o.h, o.s, o.l, o.opacity);
  if (!(o instanceof Color))
    o = color(o);
  if (!o)
    return new Hsl();
  if (o instanceof Hsl)
    return o;
  o = o.rgb();
  var r = o.r / 255, g = o.g / 255, b = o.b / 255, min2 = Math.min(r, g, b), max2 = Math.max(r, g, b), h = NaN, s = max2 - min2, l = (max2 + min2) / 2;
  if (s) {
    if (r === max2)
      h = (g - b) / s + (g < b) * 6;
    else if (g === max2)
      h = (b - r) / s + 2;
    else
      h = (r - g) / s + 4;
    s /= l < 0.5 ? max2 + min2 : 2 - max2 - min2;
    h *= 60;
  } else {
    s = l > 0 && l < 1 ? 0 : h;
  }
  return new Hsl(h, s, l, o.opacity);
}
function hsl(h, s, l, opacity) {
  return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
}
function Hsl(h, s, l, opacity) {
  this.h = +h;
  this.s = +s;
  this.l = +l;
  this.opacity = +opacity;
}
define_default(Hsl, hsl, extend(Color, {
  brighter(k) {
    k = k == null ? brighter : Math.pow(brighter, k);
    return new Hsl(this.h, this.s, this.l * k, this.opacity);
  },
  darker(k) {
    k = k == null ? darker : Math.pow(darker, k);
    return new Hsl(this.h, this.s, this.l * k, this.opacity);
  },
  rgb() {
    var h = this.h % 360 + (this.h < 0) * 360, s = isNaN(h) || isNaN(this.s) ? 0 : this.s, l = this.l, m2 = l + (l < 0.5 ? l : 1 - l) * s, m1 = 2 * l - m2;
    return new Rgb(
      hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),
      hsl2rgb(h, m1, m2),
      hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),
      this.opacity
    );
  },
  clamp() {
    return new Hsl(clamph(this.h), clampt(this.s), clampt(this.l), clampa(this.opacity));
  },
  displayable() {
    return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && (0 <= this.l && this.l <= 1) && (0 <= this.opacity && this.opacity <= 1);
  },
  formatHsl() {
    const a2 = clampa(this.opacity);
    return `${a2 === 1 ? "hsl(" : "hsla("}${clamph(this.h)}, ${clampt(this.s) * 100}%, ${clampt(this.l) * 100}%${a2 === 1 ? ")" : `, ${a2})`}`;
  }
}));
function clamph(value) {
  value = (value || 0) % 360;
  return value < 0 ? value + 360 : value;
}
function clampt(value) {
  return Math.max(0, Math.min(1, value || 0));
}
function hsl2rgb(h, m1, m2) {
  return (h < 60 ? m1 + (m2 - m1) * h / 60 : h < 180 ? m2 : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60 : m1) * 255;
}

// node_modules/d3-interpolate/src/basis.js
function basis(t1, v0, v1, v2, v3) {
  var t2 = t1 * t1, t3 = t2 * t1;
  return ((1 - 3 * t1 + 3 * t2 - t3) * v0 + (4 - 6 * t2 + 3 * t3) * v1 + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2 + t3 * v3) / 6;
}
function basis_default(values) {
  var n = values.length - 1;
  return function(t) {
    var i = t <= 0 ? t = 0 : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n), v1 = values[i], v2 = values[i + 1], v0 = i > 0 ? values[i - 1] : 2 * v1 - v2, v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;
    return basis((t - i / n) * n, v0, v1, v2, v3);
  };
}

// node_modules/d3-interpolate/src/basisClosed.js
function basisClosed_default(values) {
  var n = values.length;
  return function(t) {
    var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n), v0 = values[(i + n - 1) % n], v1 = values[i % n], v2 = values[(i + 1) % n], v3 = values[(i + 2) % n];
    return basis((t - i / n) * n, v0, v1, v2, v3);
  };
}

// node_modules/d3-interpolate/src/constant.js
var constant_default3 = (x3) => () => x3;

// node_modules/d3-interpolate/src/color.js
function linear(a2, d) {
  return function(t) {
    return a2 + t * d;
  };
}
function exponential(a2, b, y3) {
  return a2 = Math.pow(a2, y3), b = Math.pow(b, y3) - a2, y3 = 1 / y3, function(t) {
    return Math.pow(a2 + t * b, y3);
  };
}
function gamma(y3) {
  return (y3 = +y3) === 1 ? nogamma : function(a2, b) {
    return b - a2 ? exponential(a2, b, y3) : constant_default3(isNaN(a2) ? b : a2);
  };
}
function nogamma(a2, b) {
  var d = b - a2;
  return d ? linear(a2, d) : constant_default3(isNaN(a2) ? b : a2);
}

// node_modules/d3-interpolate/src/rgb.js
var rgb_default = function rgbGamma(y3) {
  var color2 = gamma(y3);
  function rgb2(start2, end) {
    var r = color2((start2 = rgb(start2)).r, (end = rgb(end)).r), g = color2(start2.g, end.g), b = color2(start2.b, end.b), opacity = nogamma(start2.opacity, end.opacity);
    return function(t) {
      start2.r = r(t);
      start2.g = g(t);
      start2.b = b(t);
      start2.opacity = opacity(t);
      return start2 + "";
    };
  }
  rgb2.gamma = rgbGamma;
  return rgb2;
}(1);
function rgbSpline(spline) {
  return function(colors) {
    var n = colors.length, r = new Array(n), g = new Array(n), b = new Array(n), i, color2;
    for (i = 0; i < n; ++i) {
      color2 = rgb(colors[i]);
      r[i] = color2.r || 0;
      g[i] = color2.g || 0;
      b[i] = color2.b || 0;
    }
    r = spline(r);
    g = spline(g);
    b = spline(b);
    color2.opacity = 1;
    return function(t) {
      color2.r = r(t);
      color2.g = g(t);
      color2.b = b(t);
      return color2 + "";
    };
  };
}
var rgbBasis = rgbSpline(basis_default);
var rgbBasisClosed = rgbSpline(basisClosed_default);

// node_modules/d3-interpolate/src/numberArray.js
function numberArray_default(a2, b) {
  if (!b)
    b = [];
  var n = a2 ? Math.min(b.length, a2.length) : 0, c2 = b.slice(), i;
  return function(t) {
    for (i = 0; i < n; ++i)
      c2[i] = a2[i] * (1 - t) + b[i] * t;
    return c2;
  };
}
function isNumberArray(x3) {
  return ArrayBuffer.isView(x3) && !(x3 instanceof DataView);
}

// node_modules/d3-interpolate/src/array.js
function genericArray(a2, b) {
  var nb = b ? b.length : 0, na = a2 ? Math.min(nb, a2.length) : 0, x3 = new Array(na), c2 = new Array(nb), i;
  for (i = 0; i < na; ++i)
    x3[i] = value_default(a2[i], b[i]);
  for (; i < nb; ++i)
    c2[i] = b[i];
  return function(t) {
    for (i = 0; i < na; ++i)
      c2[i] = x3[i](t);
    return c2;
  };
}

// node_modules/d3-interpolate/src/date.js
function date_default(a2, b) {
  var d = new Date();
  return a2 = +a2, b = +b, function(t) {
    return d.setTime(a2 * (1 - t) + b * t), d;
  };
}

// node_modules/d3-interpolate/src/number.js
function number_default(a2, b) {
  return a2 = +a2, b = +b, function(t) {
    return a2 * (1 - t) + b * t;
  };
}

// node_modules/d3-interpolate/src/object.js
function object_default(a2, b) {
  var i = {}, c2 = {}, k;
  if (a2 === null || typeof a2 !== "object")
    a2 = {};
  if (b === null || typeof b !== "object")
    b = {};
  for (k in b) {
    if (k in a2) {
      i[k] = value_default(a2[k], b[k]);
    } else {
      c2[k] = b[k];
    }
  }
  return function(t) {
    for (k in i)
      c2[k] = i[k](t);
    return c2;
  };
}

// node_modules/d3-interpolate/src/string.js
var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g;
var reB = new RegExp(reA.source, "g");
function zero2(b) {
  return function() {
    return b;
  };
}
function one(b) {
  return function(t) {
    return b(t) + "";
  };
}
function string_default(a2, b) {
  var bi = reA.lastIndex = reB.lastIndex = 0, am, bm, bs, i = -1, s = [], q = [];
  a2 = a2 + "", b = b + "";
  while ((am = reA.exec(a2)) && (bm = reB.exec(b))) {
    if ((bs = bm.index) > bi) {
      bs = b.slice(bi, bs);
      if (s[i])
        s[i] += bs;
      else
        s[++i] = bs;
    }
    if ((am = am[0]) === (bm = bm[0])) {
      if (s[i])
        s[i] += bm;
      else
        s[++i] = bm;
    } else {
      s[++i] = null;
      q.push({ i, x: number_default(am, bm) });
    }
    bi = reB.lastIndex;
  }
  if (bi < b.length) {
    bs = b.slice(bi);
    if (s[i])
      s[i] += bs;
    else
      s[++i] = bs;
  }
  return s.length < 2 ? q[0] ? one(q[0].x) : zero2(b) : (b = q.length, function(t) {
    for (var i2 = 0, o; i2 < b; ++i2)
      s[(o = q[i2]).i] = o.x(t);
    return s.join("");
  });
}

// node_modules/d3-interpolate/src/value.js
function value_default(a2, b) {
  var t = typeof b, c2;
  return b == null || t === "boolean" ? constant_default3(b) : (t === "number" ? number_default : t === "string" ? (c2 = color(b)) ? (b = c2, rgb_default) : string_default : b instanceof color ? rgb_default : b instanceof Date ? date_default : isNumberArray(b) ? numberArray_default : Array.isArray(b) ? genericArray : typeof b.valueOf !== "function" && typeof b.toString !== "function" || isNaN(b) ? object_default : number_default)(a2, b);
}

// node_modules/d3-interpolate/src/round.js
function round_default(a2, b) {
  return a2 = +a2, b = +b, function(t) {
    return Math.round(a2 * (1 - t) + b * t);
  };
}

// node_modules/d3-interpolate/src/transform/decompose.js
var degrees = 180 / Math.PI;
var identity = {
  translateX: 0,
  translateY: 0,
  rotate: 0,
  skewX: 0,
  scaleX: 1,
  scaleY: 1
};
function decompose_default(a2, b, c2, d, e, f) {
  var scaleX, scaleY, skewX;
  if (scaleX = Math.sqrt(a2 * a2 + b * b))
    a2 /= scaleX, b /= scaleX;
  if (skewX = a2 * c2 + b * d)
    c2 -= a2 * skewX, d -= b * skewX;
  if (scaleY = Math.sqrt(c2 * c2 + d * d))
    c2 /= scaleY, d /= scaleY, skewX /= scaleY;
  if (a2 * d < b * c2)
    a2 = -a2, b = -b, skewX = -skewX, scaleX = -scaleX;
  return {
    translateX: e,
    translateY: f,
    rotate: Math.atan2(b, a2) * degrees,
    skewX: Math.atan(skewX) * degrees,
    scaleX,
    scaleY
  };
}

// node_modules/d3-interpolate/src/transform/parse.js
var svgNode;
function parseCss(value) {
  const m2 = new (typeof DOMMatrix === "function" ? DOMMatrix : WebKitCSSMatrix)(value + "");
  return m2.isIdentity ? identity : decompose_default(m2.a, m2.b, m2.c, m2.d, m2.e, m2.f);
}
function parseSvg(value) {
  if (value == null)
    return identity;
  if (!svgNode)
    svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
  svgNode.setAttribute("transform", value);
  if (!(value = svgNode.transform.baseVal.consolidate()))
    return identity;
  value = value.matrix;
  return decompose_default(value.a, value.b, value.c, value.d, value.e, value.f);
}

// node_modules/d3-interpolate/src/transform/index.js
function interpolateTransform(parse, pxComma, pxParen, degParen) {
  function pop(s) {
    return s.length ? s.pop() + " " : "";
  }
  function translate(xa, ya, xb, yb, s, q) {
    if (xa !== xb || ya !== yb) {
      var i = s.push("translate(", null, pxComma, null, pxParen);
      q.push({ i: i - 4, x: number_default(xa, xb) }, { i: i - 2, x: number_default(ya, yb) });
    } else if (xb || yb) {
      s.push("translate(" + xb + pxComma + yb + pxParen);
    }
  }
  function rotate(a2, b, s, q) {
    if (a2 !== b) {
      if (a2 - b > 180)
        b += 360;
      else if (b - a2 > 180)
        a2 += 360;
      q.push({ i: s.push(pop(s) + "rotate(", null, degParen) - 2, x: number_default(a2, b) });
    } else if (b) {
      s.push(pop(s) + "rotate(" + b + degParen);
    }
  }
  function skewX(a2, b, s, q) {
    if (a2 !== b) {
      q.push({ i: s.push(pop(s) + "skewX(", null, degParen) - 2, x: number_default(a2, b) });
    } else if (b) {
      s.push(pop(s) + "skewX(" + b + degParen);
    }
  }
  function scale(xa, ya, xb, yb, s, q) {
    if (xa !== xb || ya !== yb) {
      var i = s.push(pop(s) + "scale(", null, ",", null, ")");
      q.push({ i: i - 4, x: number_default(xa, xb) }, { i: i - 2, x: number_default(ya, yb) });
    } else if (xb !== 1 || yb !== 1) {
      s.push(pop(s) + "scale(" + xb + "," + yb + ")");
    }
  }
  return function(a2, b) {
    var s = [], q = [];
    a2 = parse(a2), b = parse(b);
    translate(a2.translateX, a2.translateY, b.translateX, b.translateY, s, q);
    rotate(a2.rotate, b.rotate, s, q);
    skewX(a2.skewX, b.skewX, s, q);
    scale(a2.scaleX, a2.scaleY, b.scaleX, b.scaleY, s, q);
    a2 = b = null;
    return function(t) {
      var i = -1, n = q.length, o;
      while (++i < n)
        s[(o = q[i]).i] = o.x(t);
      return s.join("");
    };
  };
}
var interpolateTransformCss = interpolateTransform(parseCss, "px, ", "px)", "deg)");
var interpolateTransformSvg = interpolateTransform(parseSvg, ", ", ")", ")");

// node_modules/d3-interpolate/src/zoom.js
var epsilon2 = 1e-12;
function cosh(x3) {
  return ((x3 = Math.exp(x3)) + 1 / x3) / 2;
}
function sinh(x3) {
  return ((x3 = Math.exp(x3)) - 1 / x3) / 2;
}
function tanh(x3) {
  return ((x3 = Math.exp(2 * x3)) - 1) / (x3 + 1);
}
var zoom_default = function zoomRho(rho, rho2, rho4) {
  function zoom(p0, p1) {
    var ux0 = p0[0], uy0 = p0[1], w0 = p0[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2], dx = ux1 - ux0, dy = uy1 - uy0, d2 = dx * dx + dy * dy, i, S;
    if (d2 < epsilon2) {
      S = Math.log(w1 / w0) / rho;
      i = function(t) {
        return [
          ux0 + t * dx,
          uy0 + t * dy,
          w0 * Math.exp(rho * t * S)
        ];
      };
    } else {
      var d1 = Math.sqrt(d2), b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1), b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
      S = (r1 - r0) / rho;
      i = function(t) {
        var s = t * S, coshr0 = cosh(r0), u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s + r0) - sinh(r0));
        return [
          ux0 + u * dx,
          uy0 + u * dy,
          w0 * coshr0 / cosh(rho * s + r0)
        ];
      };
    }
    i.duration = S * 1e3 * rho / Math.SQRT2;
    return i;
  }
  zoom.rho = function(_) {
    var _1 = Math.max(1e-3, +_), _2 = _1 * _1, _4 = _2 * _2;
    return zoomRho(_1, _2, _4);
  };
  return zoom;
}(Math.SQRT2, 2, 4);

// node_modules/d3-timer/src/timer.js
var frame = 0;
var timeout = 0;
var interval = 0;
var pokeDelay = 1e3;
var taskHead;
var taskTail;
var clockLast = 0;
var clockNow = 0;
var clockSkew = 0;
var clock = typeof performance === "object" && performance.now ? performance : Date;
var setFrame = typeof window === "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function(f) {
  setTimeout(f, 17);
};
function now() {
  return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);
}
function clearNow() {
  clockNow = 0;
}
function Timer() {
  this._call = this._time = this._next = null;
}
Timer.prototype = timer.prototype = {
  constructor: Timer,
  restart: function(callback, delay, time) {
    if (typeof callback !== "function")
      throw new TypeError("callback is not a function");
    time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);
    if (!this._next && taskTail !== this) {
      if (taskTail)
        taskTail._next = this;
      else
        taskHead = this;
      taskTail = this;
    }
    this._call = callback;
    this._time = time;
    sleep();
  },
  stop: function() {
    if (this._call) {
      this._call = null;
      this._time = Infinity;
      sleep();
    }
  }
};
function timer(callback, delay, time) {
  var t = new Timer();
  t.restart(callback, delay, time);
  return t;
}
function timerFlush() {
  now();
  ++frame;
  var t = taskHead, e;
  while (t) {
    if ((e = clockNow - t._time) >= 0)
      t._call.call(void 0, e);
    t = t._next;
  }
  --frame;
}
function wake() {
  clockNow = (clockLast = clock.now()) + clockSkew;
  frame = timeout = 0;
  try {
    timerFlush();
  } finally {
    frame = 0;
    nap();
    clockNow = 0;
  }
}
function poke() {
  var now2 = clock.now(), delay = now2 - clockLast;
  if (delay > pokeDelay)
    clockSkew -= delay, clockLast = now2;
}
function nap() {
  var t0, t1 = taskHead, t2, time = Infinity;
  while (t1) {
    if (t1._call) {
      if (time > t1._time)
        time = t1._time;
      t0 = t1, t1 = t1._next;
    } else {
      t2 = t1._next, t1._next = null;
      t1 = t0 ? t0._next = t2 : taskHead = t2;
    }
  }
  taskTail = t0;
  sleep(time);
}
function sleep(time) {
  if (frame)
    return;
  if (timeout)
    timeout = clearTimeout(timeout);
  var delay = time - clockNow;
  if (delay > 24) {
    if (time < Infinity)
      timeout = setTimeout(wake, time - clock.now() - clockSkew);
    if (interval)
      interval = clearInterval(interval);
  } else {
    if (!interval)
      clockLast = clock.now(), interval = setInterval(poke, pokeDelay);
    frame = 1, setFrame(wake);
  }
}

// node_modules/d3-timer/src/timeout.js
function timeout_default(callback, delay, time) {
  var t = new Timer();
  delay = delay == null ? 0 : +delay;
  t.restart((elapsed) => {
    t.stop();
    callback(elapsed + delay);
  }, delay, time);
  return t;
}

// node_modules/d3-transition/src/transition/schedule.js
var emptyOn = dispatch_default("start", "end", "cancel", "interrupt");
var emptyTween = [];
var CREATED = 0;
var SCHEDULED = 1;
var STARTING = 2;
var STARTED = 3;
var RUNNING = 4;
var ENDING = 5;
var ENDED = 6;
function schedule_default(node, name, id2, index2, group, timing) {
  var schedules = node.__transition;
  if (!schedules)
    node.__transition = {};
  else if (id2 in schedules)
    return;
  create(node, id2, {
    name,
    index: index2,
    // For context during callback.
    group,
    // For context during callback.
    on: emptyOn,
    tween: emptyTween,
    time: timing.time,
    delay: timing.delay,
    duration: timing.duration,
    ease: timing.ease,
    timer: null,
    state: CREATED
  });
}
function init(node, id2) {
  var schedule = get2(node, id2);
  if (schedule.state > CREATED)
    throw new Error("too late; already scheduled");
  return schedule;
}
function set2(node, id2) {
  var schedule = get2(node, id2);
  if (schedule.state > STARTED)
    throw new Error("too late; already running");
  return schedule;
}
function get2(node, id2) {
  var schedule = node.__transition;
  if (!schedule || !(schedule = schedule[id2]))
    throw new Error("transition not found");
  return schedule;
}
function create(node, id2, self2) {
  var schedules = node.__transition, tween;
  schedules[id2] = self2;
  self2.timer = timer(schedule, 0, self2.time);
  function schedule(elapsed) {
    self2.state = SCHEDULED;
    self2.timer.restart(start2, self2.delay, self2.time);
    if (self2.delay <= elapsed)
      start2(elapsed - self2.delay);
  }
  function start2(elapsed) {
    var i, j, n, o;
    if (self2.state !== SCHEDULED)
      return stop();
    for (i in schedules) {
      o = schedules[i];
      if (o.name !== self2.name)
        continue;
      if (o.state === STARTED)
        return timeout_default(start2);
      if (o.state === RUNNING) {
        o.state = ENDED;
        o.timer.stop();
        o.on.call("interrupt", node, node.__data__, o.index, o.group);
        delete schedules[i];
      } else if (+i < id2) {
        o.state = ENDED;
        o.timer.stop();
        o.on.call("cancel", node, node.__data__, o.index, o.group);
        delete schedules[i];
      }
    }
    timeout_default(function() {
      if (self2.state === STARTED) {
        self2.state = RUNNING;
        self2.timer.restart(tick, self2.delay, self2.time);
        tick(elapsed);
      }
    });
    self2.state = STARTING;
    self2.on.call("start", node, node.__data__, self2.index, self2.group);
    if (self2.state !== STARTING)
      return;
    self2.state = STARTED;
    tween = new Array(n = self2.tween.length);
    for (i = 0, j = -1; i < n; ++i) {
      if (o = self2.tween[i].value.call(node, node.__data__, self2.index, self2.group)) {
        tween[++j] = o;
      }
    }
    tween.length = j + 1;
  }
  function tick(elapsed) {
    var t = elapsed < self2.duration ? self2.ease.call(null, elapsed / self2.duration) : (self2.timer.restart(stop), self2.state = ENDING, 1), i = -1, n = tween.length;
    while (++i < n) {
      tween[i].call(node, t);
    }
    if (self2.state === ENDING) {
      self2.on.call("end", node, node.__data__, self2.index, self2.group);
      stop();
    }
  }
  function stop() {
    self2.state = ENDED;
    self2.timer.stop();
    delete schedules[id2];
    for (var i in schedules)
      return;
    delete node.__transition;
  }
}

// node_modules/d3-transition/src/interrupt.js
function interrupt_default(node, name) {
  var schedules = node.__transition, schedule, active, empty2 = true, i;
  if (!schedules)
    return;
  name = name == null ? null : name + "";
  for (i in schedules) {
    if ((schedule = schedules[i]).name !== name) {
      empty2 = false;
      continue;
    }
    active = schedule.state > STARTING && schedule.state < ENDING;
    schedule.state = ENDED;
    schedule.timer.stop();
    schedule.on.call(active ? "interrupt" : "cancel", node, node.__data__, schedule.index, schedule.group);
    delete schedules[i];
  }
  if (empty2)
    delete node.__transition;
}

// node_modules/d3-transition/src/selection/interrupt.js
function interrupt_default2(name) {
  return this.each(function() {
    interrupt_default(this, name);
  });
}

// node_modules/d3-transition/src/transition/tween.js
function tweenRemove(id2, name) {
  var tween0, tween1;
  return function() {
    var schedule = set2(this, id2), tween = schedule.tween;
    if (tween !== tween0) {
      tween1 = tween0 = tween;
      for (var i = 0, n = tween1.length; i < n; ++i) {
        if (tween1[i].name === name) {
          tween1 = tween1.slice();
          tween1.splice(i, 1);
          break;
        }
      }
    }
    schedule.tween = tween1;
  };
}
function tweenFunction(id2, name, value) {
  var tween0, tween1;
  if (typeof value !== "function")
    throw new Error();
  return function() {
    var schedule = set2(this, id2), tween = schedule.tween;
    if (tween !== tween0) {
      tween1 = (tween0 = tween).slice();
      for (var t = { name, value }, i = 0, n = tween1.length; i < n; ++i) {
        if (tween1[i].name === name) {
          tween1[i] = t;
          break;
        }
      }
      if (i === n)
        tween1.push(t);
    }
    schedule.tween = tween1;
  };
}
function tween_default(name, value) {
  var id2 = this._id;
  name += "";
  if (arguments.length < 2) {
    var tween = get2(this.node(), id2).tween;
    for (var i = 0, n = tween.length, t; i < n; ++i) {
      if ((t = tween[i]).name === name) {
        return t.value;
      }
    }
    return null;
  }
  return this.each((value == null ? tweenRemove : tweenFunction)(id2, name, value));
}
function tweenValue(transition2, name, value) {
  var id2 = transition2._id;
  transition2.each(function() {
    var schedule = set2(this, id2);
    (schedule.value || (schedule.value = {}))[name] = value.apply(this, arguments);
  });
  return function(node) {
    return get2(node, id2).value[name];
  };
}

// node_modules/d3-transition/src/transition/interpolate.js
function interpolate_default(a2, b) {
  var c2;
  return (typeof b === "number" ? number_default : b instanceof color ? rgb_default : (c2 = color(b)) ? (b = c2, rgb_default) : string_default)(a2, b);
}

// node_modules/d3-transition/src/transition/attr.js
function attrRemove2(name) {
  return function() {
    this.removeAttribute(name);
  };
}
function attrRemoveNS2(fullname) {
  return function() {
    this.removeAttributeNS(fullname.space, fullname.local);
  };
}
function attrConstant2(name, interpolate, value1) {
  var string00, string1 = value1 + "", interpolate0;
  return function() {
    var string0 = this.getAttribute(name);
    return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
  };
}
function attrConstantNS2(fullname, interpolate, value1) {
  var string00, string1 = value1 + "", interpolate0;
  return function() {
    var string0 = this.getAttributeNS(fullname.space, fullname.local);
    return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
  };
}
function attrFunction2(name, interpolate, value) {
  var string00, string10, interpolate0;
  return function() {
    var string0, value1 = value(this), string1;
    if (value1 == null)
      return void this.removeAttribute(name);
    string0 = this.getAttribute(name);
    string1 = value1 + "";
    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
  };
}
function attrFunctionNS2(fullname, interpolate, value) {
  var string00, string10, interpolate0;
  return function() {
    var string0, value1 = value(this), string1;
    if (value1 == null)
      return void this.removeAttributeNS(fullname.space, fullname.local);
    string0 = this.getAttributeNS(fullname.space, fullname.local);
    string1 = value1 + "";
    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
  };
}
function attr_default2(name, value) {
  var fullname = namespace_default(name), i = fullname === "transform" ? interpolateTransformSvg : interpolate_default;
  return this.attrTween(name, typeof value === "function" ? (fullname.local ? attrFunctionNS2 : attrFunction2)(fullname, i, tweenValue(this, "attr." + name, value)) : value == null ? (fullname.local ? attrRemoveNS2 : attrRemove2)(fullname) : (fullname.local ? attrConstantNS2 : attrConstant2)(fullname, i, value));
}

// node_modules/d3-transition/src/transition/attrTween.js
function attrInterpolate(name, i) {
  return function(t) {
    this.setAttribute(name, i.call(this, t));
  };
}
function attrInterpolateNS(fullname, i) {
  return function(t) {
    this.setAttributeNS(fullname.space, fullname.local, i.call(this, t));
  };
}
function attrTweenNS(fullname, value) {
  var t0, i0;
  function tween() {
    var i = value.apply(this, arguments);
    if (i !== i0)
      t0 = (i0 = i) && attrInterpolateNS(fullname, i);
    return t0;
  }
  tween._value = value;
  return tween;
}
function attrTween(name, value) {
  var t0, i0;
  function tween() {
    var i = value.apply(this, arguments);
    if (i !== i0)
      t0 = (i0 = i) && attrInterpolate(name, i);
    return t0;
  }
  tween._value = value;
  return tween;
}
function attrTween_default(name, value) {
  var key = "attr." + name;
  if (arguments.length < 2)
    return (key = this.tween(key)) && key._value;
  if (value == null)
    return this.tween(key, null);
  if (typeof value !== "function")
    throw new Error();
  var fullname = namespace_default(name);
  return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value));
}

// node_modules/d3-transition/src/transition/delay.js
function delayFunction(id2, value) {
  return function() {
    init(this, id2).delay = +value.apply(this, arguments);
  };
}
function delayConstant(id2, value) {
  return value = +value, function() {
    init(this, id2).delay = value;
  };
}
function delay_default(value) {
  var id2 = this._id;
  return arguments.length ? this.each((typeof value === "function" ? delayFunction : delayConstant)(id2, value)) : get2(this.node(), id2).delay;
}

// node_modules/d3-transition/src/transition/duration.js
function durationFunction(id2, value) {
  return function() {
    set2(this, id2).duration = +value.apply(this, arguments);
  };
}
function durationConstant(id2, value) {
  return value = +value, function() {
    set2(this, id2).duration = value;
  };
}
function duration_default(value) {
  var id2 = this._id;
  return arguments.length ? this.each((typeof value === "function" ? durationFunction : durationConstant)(id2, value)) : get2(this.node(), id2).duration;
}

// node_modules/d3-transition/src/transition/ease.js
function easeConstant(id2, value) {
  if (typeof value !== "function")
    throw new Error();
  return function() {
    set2(this, id2).ease = value;
  };
}
function ease_default(value) {
  var id2 = this._id;
  return arguments.length ? this.each(easeConstant(id2, value)) : get2(this.node(), id2).ease;
}

// node_modules/d3-transition/src/transition/easeVarying.js
function easeVarying(id2, value) {
  return function() {
    var v = value.apply(this, arguments);
    if (typeof v !== "function")
      throw new Error();
    set2(this, id2).ease = v;
  };
}
function easeVarying_default(value) {
  if (typeof value !== "function")
    throw new Error();
  return this.each(easeVarying(this._id, value));
}

// node_modules/d3-transition/src/transition/filter.js
function filter_default2(match) {
  if (typeof match !== "function")
    match = matcher_default(match);
  for (var groups = this._groups, m2 = groups.length, subgroups = new Array(m2), j = 0; j < m2; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
        subgroup.push(node);
      }
    }
  }
  return new Transition(subgroups, this._parents, this._name, this._id);
}

// node_modules/d3-transition/src/transition/merge.js
function merge_default2(transition2) {
  if (transition2._id !== this._id)
    throw new Error();
  for (var groups0 = this._groups, groups1 = transition2._groups, m0 = groups0.length, m1 = groups1.length, m2 = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m2; ++j) {
    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group0[i] || group1[i]) {
        merge[i] = node;
      }
    }
  }
  for (; j < m0; ++j) {
    merges[j] = groups0[j];
  }
  return new Transition(merges, this._parents, this._name, this._id);
}

// node_modules/d3-transition/src/transition/on.js
function start(name) {
  return (name + "").trim().split(/^|\s+/).every(function(t) {
    var i = t.indexOf(".");
    if (i >= 0)
      t = t.slice(0, i);
    return !t || t === "start";
  });
}
function onFunction(id2, name, listener) {
  var on0, on1, sit = start(name) ? init : set2;
  return function() {
    var schedule = sit(this, id2), on = schedule.on;
    if (on !== on0)
      (on1 = (on0 = on).copy()).on(name, listener);
    schedule.on = on1;
  };
}
function on_default2(name, listener) {
  var id2 = this._id;
  return arguments.length < 2 ? get2(this.node(), id2).on.on(name) : this.each(onFunction(id2, name, listener));
}

// node_modules/d3-transition/src/transition/remove.js
function removeFunction(id2) {
  return function() {
    var parent = this.parentNode;
    for (var i in this.__transition)
      if (+i !== id2)
        return;
    if (parent)
      parent.removeChild(this);
  };
}
function remove_default2() {
  return this.on("end.remove", removeFunction(this._id));
}

// node_modules/d3-transition/src/transition/select.js
function select_default3(select) {
  var name = this._name, id2 = this._id;
  if (typeof select !== "function")
    select = selector_default(select);
  for (var groups = this._groups, m2 = groups.length, subgroups = new Array(m2), j = 0; j < m2; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
        if ("__data__" in node)
          subnode.__data__ = node.__data__;
        subgroup[i] = subnode;
        schedule_default(subgroup[i], name, id2, i, subgroup, get2(node, id2));
      }
    }
  }
  return new Transition(subgroups, this._parents, name, id2);
}

// node_modules/d3-transition/src/transition/selectAll.js
function selectAll_default2(select) {
  var name = this._name, id2 = this._id;
  if (typeof select !== "function")
    select = selectorAll_default(select);
  for (var groups = this._groups, m2 = groups.length, subgroups = [], parents = [], j = 0; j < m2; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        for (var children2 = select.call(node, node.__data__, i, group), child, inherit2 = get2(node, id2), k = 0, l = children2.length; k < l; ++k) {
          if (child = children2[k]) {
            schedule_default(child, name, id2, k, children2, inherit2);
          }
        }
        subgroups.push(children2);
        parents.push(node);
      }
    }
  }
  return new Transition(subgroups, parents, name, id2);
}

// node_modules/d3-transition/src/transition/selection.js
var Selection2 = selection_default.prototype.constructor;
function selection_default2() {
  return new Selection2(this._groups, this._parents);
}

// node_modules/d3-transition/src/transition/style.js
function styleNull(name, interpolate) {
  var string00, string10, interpolate0;
  return function() {
    var string0 = styleValue(this, name), string1 = (this.style.removeProperty(name), styleValue(this, name));
    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : interpolate0 = interpolate(string00 = string0, string10 = string1);
  };
}
function styleRemove2(name) {
  return function() {
    this.style.removeProperty(name);
  };
}
function styleConstant2(name, interpolate, value1) {
  var string00, string1 = value1 + "", interpolate0;
  return function() {
    var string0 = styleValue(this, name);
    return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
  };
}
function styleFunction2(name, interpolate, value) {
  var string00, string10, interpolate0;
  return function() {
    var string0 = styleValue(this, name), value1 = value(this), string1 = value1 + "";
    if (value1 == null)
      string1 = value1 = (this.style.removeProperty(name), styleValue(this, name));
    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
  };
}
function styleMaybeRemove(id2, name) {
  var on0, on1, listener0, key = "style." + name, event = "end." + key, remove2;
  return function() {
    var schedule = set2(this, id2), on = schedule.on, listener = schedule.value[key] == null ? remove2 || (remove2 = styleRemove2(name)) : void 0;
    if (on !== on0 || listener0 !== listener)
      (on1 = (on0 = on).copy()).on(event, listener0 = listener);
    schedule.on = on1;
  };
}
function style_default2(name, value, priority) {
  var i = (name += "") === "transform" ? interpolateTransformCss : interpolate_default;
  return value == null ? this.styleTween(name, styleNull(name, i)).on("end.style." + name, styleRemove2(name)) : typeof value === "function" ? this.styleTween(name, styleFunction2(name, i, tweenValue(this, "style." + name, value))).each(styleMaybeRemove(this._id, name)) : this.styleTween(name, styleConstant2(name, i, value), priority).on("end.style." + name, null);
}

// node_modules/d3-transition/src/transition/styleTween.js
function styleInterpolate(name, i, priority) {
  return function(t) {
    this.style.setProperty(name, i.call(this, t), priority);
  };
}
function styleTween(name, value, priority) {
  var t, i0;
  function tween() {
    var i = value.apply(this, arguments);
    if (i !== i0)
      t = (i0 = i) && styleInterpolate(name, i, priority);
    return t;
  }
  tween._value = value;
  return tween;
}
function styleTween_default(name, value, priority) {
  var key = "style." + (name += "");
  if (arguments.length < 2)
    return (key = this.tween(key)) && key._value;
  if (value == null)
    return this.tween(key, null);
  if (typeof value !== "function")
    throw new Error();
  return this.tween(key, styleTween(name, value, priority == null ? "" : priority));
}

// node_modules/d3-transition/src/transition/text.js
function textConstant2(value) {
  return function() {
    this.textContent = value;
  };
}
function textFunction2(value) {
  return function() {
    var value1 = value(this);
    this.textContent = value1 == null ? "" : value1;
  };
}
function text_default2(value) {
  return this.tween("text", typeof value === "function" ? textFunction2(tweenValue(this, "text", value)) : textConstant2(value == null ? "" : value + ""));
}

// node_modules/d3-transition/src/transition/textTween.js
function textInterpolate(i) {
  return function(t) {
    this.textContent = i.call(this, t);
  };
}
function textTween(value) {
  var t0, i0;
  function tween() {
    var i = value.apply(this, arguments);
    if (i !== i0)
      t0 = (i0 = i) && textInterpolate(i);
    return t0;
  }
  tween._value = value;
  return tween;
}
function textTween_default(value) {
  var key = "text";
  if (arguments.length < 1)
    return (key = this.tween(key)) && key._value;
  if (value == null)
    return this.tween(key, null);
  if (typeof value !== "function")
    throw new Error();
  return this.tween(key, textTween(value));
}

// node_modules/d3-transition/src/transition/transition.js
function transition_default() {
  var name = this._name, id0 = this._id, id1 = newId();
  for (var groups = this._groups, m2 = groups.length, j = 0; j < m2; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        var inherit2 = get2(node, id0);
        schedule_default(node, name, id1, i, group, {
          time: inherit2.time + inherit2.delay + inherit2.duration,
          delay: 0,
          duration: inherit2.duration,
          ease: inherit2.ease
        });
      }
    }
  }
  return new Transition(groups, this._parents, name, id1);
}

// node_modules/d3-transition/src/transition/end.js
function end_default() {
  var on0, on1, that = this, id2 = that._id, size = that.size();
  return new Promise(function(resolve, reject) {
    var cancel = { value: reject }, end = { value: function() {
      if (--size === 0)
        resolve();
    } };
    that.each(function() {
      var schedule = set2(this, id2), on = schedule.on;
      if (on !== on0) {
        on1 = (on0 = on).copy();
        on1._.cancel.push(cancel);
        on1._.interrupt.push(cancel);
        on1._.end.push(end);
      }
      schedule.on = on1;
    });
    if (size === 0)
      resolve();
  });
}

// node_modules/d3-transition/src/transition/index.js
var id = 0;
function Transition(groups, parents, name, id2) {
  this._groups = groups;
  this._parents = parents;
  this._name = name;
  this._id = id2;
}
function transition(name) {
  return selection_default().transition(name);
}
function newId() {
  return ++id;
}
var selection_prototype = selection_default.prototype;
Transition.prototype = transition.prototype = {
  constructor: Transition,
  select: select_default3,
  selectAll: selectAll_default2,
  selectChild: selection_prototype.selectChild,
  selectChildren: selection_prototype.selectChildren,
  filter: filter_default2,
  merge: merge_default2,
  selection: selection_default2,
  transition: transition_default,
  call: selection_prototype.call,
  nodes: selection_prototype.nodes,
  node: selection_prototype.node,
  size: selection_prototype.size,
  empty: selection_prototype.empty,
  each: selection_prototype.each,
  on: on_default2,
  attr: attr_default2,
  attrTween: attrTween_default,
  style: style_default2,
  styleTween: styleTween_default,
  text: text_default2,
  textTween: textTween_default,
  remove: remove_default2,
  tween: tween_default,
  delay: delay_default,
  duration: duration_default,
  ease: ease_default,
  easeVarying: easeVarying_default,
  end: end_default,
  [Symbol.iterator]: selection_prototype[Symbol.iterator]
};

// node_modules/d3-ease/src/cubic.js
function cubicInOut(t) {
  return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;
}

// node_modules/d3-transition/src/selection/transition.js
var defaultTiming = {
  time: null,
  // Set on use.
  delay: 0,
  duration: 250,
  ease: cubicInOut
};
function inherit(node, id2) {
  var timing;
  while (!(timing = node.__transition) || !(timing = timing[id2])) {
    if (!(node = node.parentNode)) {
      throw new Error(`transition ${id2} not found`);
    }
  }
  return timing;
}
function transition_default2(name) {
  var id2, timing;
  if (name instanceof Transition) {
    id2 = name._id, name = name._name;
  } else {
    id2 = newId(), (timing = defaultTiming).time = now(), name = name == null ? null : name + "";
  }
  for (var groups = this._groups, m2 = groups.length, j = 0; j < m2; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        schedule_default(node, name, id2, i, group, timing || inherit(node, id2));
      }
    }
  }
  return new Transition(groups, this._parents, name, id2);
}

// node_modules/d3-transition/src/selection/index.js
selection_default.prototype.interrupt = interrupt_default2;
selection_default.prototype.transition = transition_default2;

// node_modules/d3-brush/src/brush.js
var { abs, max, min } = Math;
function number1(e) {
  return [+e[0], +e[1]];
}
function number2(e) {
  return [number1(e[0]), number1(e[1])];
}
var X = {
  name: "x",
  handles: ["w", "e"].map(type),
  input: function(x3, e) {
    return x3 == null ? null : [[+x3[0], e[0][1]], [+x3[1], e[1][1]]];
  },
  output: function(xy) {
    return xy && [xy[0][0], xy[1][0]];
  }
};
var Y = {
  name: "y",
  handles: ["n", "s"].map(type),
  input: function(y3, e) {
    return y3 == null ? null : [[e[0][0], +y3[0]], [e[1][0], +y3[1]]];
  },
  output: function(xy) {
    return xy && [xy[0][1], xy[1][1]];
  }
};
var XY = {
  name: "xy",
  handles: ["n", "w", "e", "s", "nw", "ne", "sw", "se"].map(type),
  input: function(xy) {
    return xy == null ? null : number2(xy);
  },
  output: function(xy) {
    return xy;
  }
};
function type(t) {
  return { type: t };
}

// node_modules/d3-force/src/center.js
function center_default(x3, y3) {
  var nodes, strength = 1;
  if (x3 == null)
    x3 = 0;
  if (y3 == null)
    y3 = 0;
  function force() {
    var i, n = nodes.length, node, sx = 0, sy = 0;
    for (i = 0; i < n; ++i) {
      node = nodes[i], sx += node.x, sy += node.y;
    }
    for (sx = (sx / n - x3) * strength, sy = (sy / n - y3) * strength, i = 0; i < n; ++i) {
      node = nodes[i], node.x -= sx, node.y -= sy;
    }
  }
  force.initialize = function(_) {
    nodes = _;
  };
  force.x = function(_) {
    return arguments.length ? (x3 = +_, force) : x3;
  };
  force.y = function(_) {
    return arguments.length ? (y3 = +_, force) : y3;
  };
  force.strength = function(_) {
    return arguments.length ? (strength = +_, force) : strength;
  };
  return force;
}

// node_modules/d3-quadtree/src/add.js
function add_default(d) {
  const x3 = +this._x.call(null, d), y3 = +this._y.call(null, d);
  return add(this.cover(x3, y3), x3, y3, d);
}
function add(tree, x3, y3, d) {
  if (isNaN(x3) || isNaN(y3))
    return tree;
  var parent, node = tree._root, leaf = { data: d }, x0 = tree._x0, y0 = tree._y0, x1 = tree._x1, y1 = tree._y1, xm, ym, xp, yp, right, bottom, i, j;
  if (!node)
    return tree._root = leaf, tree;
  while (node.length) {
    if (right = x3 >= (xm = (x0 + x1) / 2))
      x0 = xm;
    else
      x1 = xm;
    if (bottom = y3 >= (ym = (y0 + y1) / 2))
      y0 = ym;
    else
      y1 = ym;
    if (parent = node, !(node = node[i = bottom << 1 | right]))
      return parent[i] = leaf, tree;
  }
  xp = +tree._x.call(null, node.data);
  yp = +tree._y.call(null, node.data);
  if (x3 === xp && y3 === yp)
    return leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree;
  do {
    parent = parent ? parent[i] = new Array(4) : tree._root = new Array(4);
    if (right = x3 >= (xm = (x0 + x1) / 2))
      x0 = xm;
    else
      x1 = xm;
    if (bottom = y3 >= (ym = (y0 + y1) / 2))
      y0 = ym;
    else
      y1 = ym;
  } while ((i = bottom << 1 | right) === (j = (yp >= ym) << 1 | xp >= xm));
  return parent[j] = node, parent[i] = leaf, tree;
}
function addAll(data) {
  var d, i, n = data.length, x3, y3, xz = new Array(n), yz = new Array(n), x0 = Infinity, y0 = Infinity, x1 = -Infinity, y1 = -Infinity;
  for (i = 0; i < n; ++i) {
    if (isNaN(x3 = +this._x.call(null, d = data[i])) || isNaN(y3 = +this._y.call(null, d)))
      continue;
    xz[i] = x3;
    yz[i] = y3;
    if (x3 < x0)
      x0 = x3;
    if (x3 > x1)
      x1 = x3;
    if (y3 < y0)
      y0 = y3;
    if (y3 > y1)
      y1 = y3;
  }
  if (x0 > x1 || y0 > y1)
    return this;
  this.cover(x0, y0).cover(x1, y1);
  for (i = 0; i < n; ++i) {
    add(this, xz[i], yz[i], data[i]);
  }
  return this;
}

// node_modules/d3-quadtree/src/cover.js
function cover_default(x3, y3) {
  if (isNaN(x3 = +x3) || isNaN(y3 = +y3))
    return this;
  var x0 = this._x0, y0 = this._y0, x1 = this._x1, y1 = this._y1;
  if (isNaN(x0)) {
    x1 = (x0 = Math.floor(x3)) + 1;
    y1 = (y0 = Math.floor(y3)) + 1;
  } else {
    var z = x1 - x0 || 1, node = this._root, parent, i;
    while (x0 > x3 || x3 >= x1 || y0 > y3 || y3 >= y1) {
      i = (y3 < y0) << 1 | x3 < x0;
      parent = new Array(4), parent[i] = node, node = parent, z *= 2;
      switch (i) {
        case 0:
          x1 = x0 + z, y1 = y0 + z;
          break;
        case 1:
          x0 = x1 - z, y1 = y0 + z;
          break;
        case 2:
          x1 = x0 + z, y0 = y1 - z;
          break;
        case 3:
          x0 = x1 - z, y0 = y1 - z;
          break;
      }
    }
    if (this._root && this._root.length)
      this._root = node;
  }
  this._x0 = x0;
  this._y0 = y0;
  this._x1 = x1;
  this._y1 = y1;
  return this;
}

// node_modules/d3-quadtree/src/data.js
function data_default2() {
  var data = [];
  this.visit(function(node) {
    if (!node.length)
      do
        data.push(node.data);
      while (node = node.next);
  });
  return data;
}

// node_modules/d3-quadtree/src/extent.js
function extent_default(_) {
  return arguments.length ? this.cover(+_[0][0], +_[0][1]).cover(+_[1][0], +_[1][1]) : isNaN(this._x0) ? void 0 : [[this._x0, this._y0], [this._x1, this._y1]];
}

// node_modules/d3-quadtree/src/quad.js
function quad_default(node, x0, y0, x1, y1) {
  this.node = node;
  this.x0 = x0;
  this.y0 = y0;
  this.x1 = x1;
  this.y1 = y1;
}

// node_modules/d3-quadtree/src/find.js
function find_default(x3, y3, radius) {
  var data, x0 = this._x0, y0 = this._y0, x1, y1, x22, y22, x32 = this._x1, y32 = this._y1, quads = [], node = this._root, q, i;
  if (node)
    quads.push(new quad_default(node, x0, y0, x32, y32));
  if (radius == null)
    radius = Infinity;
  else {
    x0 = x3 - radius, y0 = y3 - radius;
    x32 = x3 + radius, y32 = y3 + radius;
    radius *= radius;
  }
  while (q = quads.pop()) {
    if (!(node = q.node) || (x1 = q.x0) > x32 || (y1 = q.y0) > y32 || (x22 = q.x1) < x0 || (y22 = q.y1) < y0)
      continue;
    if (node.length) {
      var xm = (x1 + x22) / 2, ym = (y1 + y22) / 2;
      quads.push(
        new quad_default(node[3], xm, ym, x22, y22),
        new quad_default(node[2], x1, ym, xm, y22),
        new quad_default(node[1], xm, y1, x22, ym),
        new quad_default(node[0], x1, y1, xm, ym)
      );
      if (i = (y3 >= ym) << 1 | x3 >= xm) {
        q = quads[quads.length - 1];
        quads[quads.length - 1] = quads[quads.length - 1 - i];
        quads[quads.length - 1 - i] = q;
      }
    } else {
      var dx = x3 - +this._x.call(null, node.data), dy = y3 - +this._y.call(null, node.data), d2 = dx * dx + dy * dy;
      if (d2 < radius) {
        var d = Math.sqrt(radius = d2);
        x0 = x3 - d, y0 = y3 - d;
        x32 = x3 + d, y32 = y3 + d;
        data = node.data;
      }
    }
  }
  return data;
}

// node_modules/d3-quadtree/src/remove.js
function remove_default3(d) {
  if (isNaN(x3 = +this._x.call(null, d)) || isNaN(y3 = +this._y.call(null, d)))
    return this;
  var parent, node = this._root, retainer, previous, next, x0 = this._x0, y0 = this._y0, x1 = this._x1, y1 = this._y1, x3, y3, xm, ym, right, bottom, i, j;
  if (!node)
    return this;
  if (node.length)
    while (true) {
      if (right = x3 >= (xm = (x0 + x1) / 2))
        x0 = xm;
      else
        x1 = xm;
      if (bottom = y3 >= (ym = (y0 + y1) / 2))
        y0 = ym;
      else
        y1 = ym;
      if (!(parent = node, node = node[i = bottom << 1 | right]))
        return this;
      if (!node.length)
        break;
      if (parent[i + 1 & 3] || parent[i + 2 & 3] || parent[i + 3 & 3])
        retainer = parent, j = i;
    }
  while (node.data !== d)
    if (!(previous = node, node = node.next))
      return this;
  if (next = node.next)
    delete node.next;
  if (previous)
    return next ? previous.next = next : delete previous.next, this;
  if (!parent)
    return this._root = next, this;
  next ? parent[i] = next : delete parent[i];
  if ((node = parent[0] || parent[1] || parent[2] || parent[3]) && node === (parent[3] || parent[2] || parent[1] || parent[0]) && !node.length) {
    if (retainer)
      retainer[j] = node;
    else
      this._root = node;
  }
  return this;
}
function removeAll(data) {
  for (var i = 0, n = data.length; i < n; ++i)
    this.remove(data[i]);
  return this;
}

// node_modules/d3-quadtree/src/root.js
function root_default() {
  return this._root;
}

// node_modules/d3-quadtree/src/size.js
function size_default2() {
  var size = 0;
  this.visit(function(node) {
    if (!node.length)
      do
        ++size;
      while (node = node.next);
  });
  return size;
}

// node_modules/d3-quadtree/src/visit.js
function visit_default(callback) {
  var quads = [], q, node = this._root, child, x0, y0, x1, y1;
  if (node)
    quads.push(new quad_default(node, this._x0, this._y0, this._x1, this._y1));
  while (q = quads.pop()) {
    if (!callback(node = q.node, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1) && node.length) {
      var xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;
      if (child = node[3])
        quads.push(new quad_default(child, xm, ym, x1, y1));
      if (child = node[2])
        quads.push(new quad_default(child, x0, ym, xm, y1));
      if (child = node[1])
        quads.push(new quad_default(child, xm, y0, x1, ym));
      if (child = node[0])
        quads.push(new quad_default(child, x0, y0, xm, ym));
    }
  }
  return this;
}

// node_modules/d3-quadtree/src/visitAfter.js
function visitAfter_default(callback) {
  var quads = [], next = [], q;
  if (this._root)
    quads.push(new quad_default(this._root, this._x0, this._y0, this._x1, this._y1));
  while (q = quads.pop()) {
    var node = q.node;
    if (node.length) {
      var child, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1, xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;
      if (child = node[0])
        quads.push(new quad_default(child, x0, y0, xm, ym));
      if (child = node[1])
        quads.push(new quad_default(child, xm, y0, x1, ym));
      if (child = node[2])
        quads.push(new quad_default(child, x0, ym, xm, y1));
      if (child = node[3])
        quads.push(new quad_default(child, xm, ym, x1, y1));
    }
    next.push(q);
  }
  while (q = next.pop()) {
    callback(q.node, q.x0, q.y0, q.x1, q.y1);
  }
  return this;
}

// node_modules/d3-quadtree/src/x.js
function defaultX(d) {
  return d[0];
}
function x_default(_) {
  return arguments.length ? (this._x = _, this) : this._x;
}

// node_modules/d3-quadtree/src/y.js
function defaultY(d) {
  return d[1];
}
function y_default(_) {
  return arguments.length ? (this._y = _, this) : this._y;
}

// node_modules/d3-quadtree/src/quadtree.js
function quadtree(nodes, x3, y3) {
  var tree = new Quadtree(x3 == null ? defaultX : x3, y3 == null ? defaultY : y3, NaN, NaN, NaN, NaN);
  return nodes == null ? tree : tree.addAll(nodes);
}
function Quadtree(x3, y3, x0, y0, x1, y1) {
  this._x = x3;
  this._y = y3;
  this._x0 = x0;
  this._y0 = y0;
  this._x1 = x1;
  this._y1 = y1;
  this._root = void 0;
}
function leaf_copy(leaf) {
  var copy2 = { data: leaf.data }, next = copy2;
  while (leaf = leaf.next)
    next = next.next = { data: leaf.data };
  return copy2;
}
var treeProto = quadtree.prototype = Quadtree.prototype;
treeProto.copy = function() {
  var copy2 = new Quadtree(this._x, this._y, this._x0, this._y0, this._x1, this._y1), node = this._root, nodes, child;
  if (!node)
    return copy2;
  if (!node.length)
    return copy2._root = leaf_copy(node), copy2;
  nodes = [{ source: node, target: copy2._root = new Array(4) }];
  while (node = nodes.pop()) {
    for (var i = 0; i < 4; ++i) {
      if (child = node.source[i]) {
        if (child.length)
          nodes.push({ source: child, target: node.target[i] = new Array(4) });
        else
          node.target[i] = leaf_copy(child);
      }
    }
  }
  return copy2;
};
treeProto.add = add_default;
treeProto.addAll = addAll;
treeProto.cover = cover_default;
treeProto.data = data_default2;
treeProto.extent = extent_default;
treeProto.find = find_default;
treeProto.remove = remove_default3;
treeProto.removeAll = removeAll;
treeProto.root = root_default;
treeProto.size = size_default2;
treeProto.visit = visit_default;
treeProto.visitAfter = visitAfter_default;
treeProto.x = x_default;
treeProto.y = y_default;

// node_modules/d3-force/src/constant.js
function constant_default5(x3) {
  return function() {
    return x3;
  };
}

// node_modules/d3-force/src/jiggle.js
function jiggle_default(random) {
  return (random() - 0.5) * 1e-6;
}

// node_modules/d3-force/src/collide.js
function x(d) {
  return d.x + d.vx;
}
function y(d) {
  return d.y + d.vy;
}
function collide_default(radius) {
  var nodes, radii, random, strength = 1, iterations = 1;
  if (typeof radius !== "function")
    radius = constant_default5(radius == null ? 1 : +radius);
  function force() {
    var i, n = nodes.length, tree, node, xi, yi, ri, ri2;
    for (var k = 0; k < iterations; ++k) {
      tree = quadtree(nodes, x, y).visitAfter(prepare);
      for (i = 0; i < n; ++i) {
        node = nodes[i];
        ri = radii[node.index], ri2 = ri * ri;
        xi = node.x + node.vx;
        yi = node.y + node.vy;
        tree.visit(apply);
      }
    }
    function apply(quad, x0, y0, x1, y1) {
      var data = quad.data, rj = quad.r, r = ri + rj;
      if (data) {
        if (data.index > node.index) {
          var x3 = xi - data.x - data.vx, y3 = yi - data.y - data.vy, l = x3 * x3 + y3 * y3;
          if (l < r * r) {
            if (x3 === 0)
              x3 = jiggle_default(random), l += x3 * x3;
            if (y3 === 0)
              y3 = jiggle_default(random), l += y3 * y3;
            l = (r - (l = Math.sqrt(l))) / l * strength;
            node.vx += (x3 *= l) * (r = (rj *= rj) / (ri2 + rj));
            node.vy += (y3 *= l) * r;
            data.vx -= x3 * (r = 1 - r);
            data.vy -= y3 * r;
          }
        }
        return;
      }
      return x0 > xi + r || x1 < xi - r || y0 > yi + r || y1 < yi - r;
    }
  }
  function prepare(quad) {
    if (quad.data)
      return quad.r = radii[quad.data.index];
    for (var i = quad.r = 0; i < 4; ++i) {
      if (quad[i] && quad[i].r > quad.r) {
        quad.r = quad[i].r;
      }
    }
  }
  function initialize() {
    if (!nodes)
      return;
    var i, n = nodes.length, node;
    radii = new Array(n);
    for (i = 0; i < n; ++i)
      node = nodes[i], radii[node.index] = +radius(node, i, nodes);
  }
  force.initialize = function(_nodes, _random) {
    nodes = _nodes;
    random = _random;
    initialize();
  };
  force.iterations = function(_) {
    return arguments.length ? (iterations = +_, force) : iterations;
  };
  force.strength = function(_) {
    return arguments.length ? (strength = +_, force) : strength;
  };
  force.radius = function(_) {
    return arguments.length ? (radius = typeof _ === "function" ? _ : constant_default5(+_), initialize(), force) : radius;
  };
  return force;
}

// node_modules/d3-force/src/link.js
function index(d) {
  return d.index;
}
function find2(nodeById, nodeId) {
  var node = nodeById.get(nodeId);
  if (!node)
    throw new Error("node not found: " + nodeId);
  return node;
}
function link_default(links2) {
  var id2 = index, strength = defaultStrength, strengths, distance = constant_default5(30), distances, nodes, count, bias, random, iterations = 1;
  if (links2 == null)
    links2 = [];
  function defaultStrength(link) {
    return 1 / Math.min(count[link.source.index], count[link.target.index]);
  }
  function force(alpha) {
    for (var k = 0, n = links2.length; k < iterations; ++k) {
      for (var i = 0, link, source, target, x3, y3, l, b; i < n; ++i) {
        link = links2[i], source = link.source, target = link.target;
        x3 = target.x + target.vx - source.x - source.vx || jiggle_default(random);
        y3 = target.y + target.vy - source.y - source.vy || jiggle_default(random);
        l = Math.sqrt(x3 * x3 + y3 * y3);
        l = (l - distances[i]) / l * alpha * strengths[i];
        x3 *= l, y3 *= l;
        target.vx -= x3 * (b = bias[i]);
        target.vy -= y3 * b;
        source.vx += x3 * (b = 1 - b);
        source.vy += y3 * b;
      }
    }
  }
  function initialize() {
    if (!nodes)
      return;
    var i, n = nodes.length, m2 = links2.length, nodeById = new Map(nodes.map((d, i2) => [id2(d, i2, nodes), d])), link;
    for (i = 0, count = new Array(n); i < m2; ++i) {
      link = links2[i], link.index = i;
      if (typeof link.source !== "object")
        link.source = find2(nodeById, link.source);
      if (typeof link.target !== "object")
        link.target = find2(nodeById, link.target);
      count[link.source.index] = (count[link.source.index] || 0) + 1;
      count[link.target.index] = (count[link.target.index] || 0) + 1;
    }
    for (i = 0, bias = new Array(m2); i < m2; ++i) {
      link = links2[i], bias[i] = count[link.source.index] / (count[link.source.index] + count[link.target.index]);
    }
    strengths = new Array(m2), initializeStrength();
    distances = new Array(m2), initializeDistance();
  }
  function initializeStrength() {
    if (!nodes)
      return;
    for (var i = 0, n = links2.length; i < n; ++i) {
      strengths[i] = +strength(links2[i], i, links2);
    }
  }
  function initializeDistance() {
    if (!nodes)
      return;
    for (var i = 0, n = links2.length; i < n; ++i) {
      distances[i] = +distance(links2[i], i, links2);
    }
  }
  force.initialize = function(_nodes, _random) {
    nodes = _nodes;
    random = _random;
    initialize();
  };
  force.links = function(_) {
    return arguments.length ? (links2 = _, initialize(), force) : links2;
  };
  force.id = function(_) {
    return arguments.length ? (id2 = _, force) : id2;
  };
  force.iterations = function(_) {
    return arguments.length ? (iterations = +_, force) : iterations;
  };
  force.strength = function(_) {
    return arguments.length ? (strength = typeof _ === "function" ? _ : constant_default5(+_), initializeStrength(), force) : strength;
  };
  force.distance = function(_) {
    return arguments.length ? (distance = typeof _ === "function" ? _ : constant_default5(+_), initializeDistance(), force) : distance;
  };
  return force;
}

// node_modules/d3-force/src/lcg.js
var a = 1664525;
var c = 1013904223;
var m = 4294967296;
function lcg_default() {
  let s = 1;
  return () => (s = (a * s + c) % m) / m;
}

// node_modules/d3-force/src/simulation.js
function x2(d) {
  return d.x;
}
function y2(d) {
  return d.y;
}
var initialRadius = 10;
var initialAngle = Math.PI * (3 - Math.sqrt(5));
function simulation_default(nodes) {
  var simulation, alpha = 1, alphaMin = 1e-3, alphaDecay = 1 - Math.pow(alphaMin, 1 / 300), alphaTarget = 0, velocityDecay = 0.6, forces = /* @__PURE__ */ new Map(), stepper = timer(step), event = dispatch_default("tick", "end"), random = lcg_default();
  if (nodes == null)
    nodes = [];
  function step() {
    tick();
    event.call("tick", simulation);
    if (alpha < alphaMin) {
      stepper.stop();
      event.call("end", simulation);
    }
  }
  function tick(iterations) {
    var i, n = nodes.length, node;
    if (iterations === void 0)
      iterations = 1;
    for (var k = 0; k < iterations; ++k) {
      alpha += (alphaTarget - alpha) * alphaDecay;
      forces.forEach(function(force) {
        force(alpha);
      });
      for (i = 0; i < n; ++i) {
        node = nodes[i];
        if (node.fx == null)
          node.x += node.vx *= velocityDecay;
        else
          node.x = node.fx, node.vx = 0;
        if (node.fy == null)
          node.y += node.vy *= velocityDecay;
        else
          node.y = node.fy, node.vy = 0;
      }
    }
    return simulation;
  }
  function initializeNodes() {
    for (var i = 0, n = nodes.length, node; i < n; ++i) {
      node = nodes[i], node.index = i;
      if (node.fx != null)
        node.x = node.fx;
      if (node.fy != null)
        node.y = node.fy;
      if (isNaN(node.x) || isNaN(node.y)) {
        var radius = initialRadius * Math.sqrt(0.5 + i), angle = i * initialAngle;
        node.x = radius * Math.cos(angle);
        node.y = radius * Math.sin(angle);
      }
      if (isNaN(node.vx) || isNaN(node.vy)) {
        node.vx = node.vy = 0;
      }
    }
  }
  function initializeForce(force) {
    if (force.initialize)
      force.initialize(nodes, random);
    return force;
  }
  initializeNodes();
  return simulation = {
    tick,
    restart: function() {
      return stepper.restart(step), simulation;
    },
    stop: function() {
      return stepper.stop(), simulation;
    },
    nodes: function(_) {
      return arguments.length ? (nodes = _, initializeNodes(), forces.forEach(initializeForce), simulation) : nodes;
    },
    alpha: function(_) {
      return arguments.length ? (alpha = +_, simulation) : alpha;
    },
    alphaMin: function(_) {
      return arguments.length ? (alphaMin = +_, simulation) : alphaMin;
    },
    alphaDecay: function(_) {
      return arguments.length ? (alphaDecay = +_, simulation) : +alphaDecay;
    },
    alphaTarget: function(_) {
      return arguments.length ? (alphaTarget = +_, simulation) : alphaTarget;
    },
    velocityDecay: function(_) {
      return arguments.length ? (velocityDecay = 1 - _, simulation) : 1 - velocityDecay;
    },
    randomSource: function(_) {
      return arguments.length ? (random = _, forces.forEach(initializeForce), simulation) : random;
    },
    force: function(name, _) {
      return arguments.length > 1 ? (_ == null ? forces.delete(name) : forces.set(name, initializeForce(_)), simulation) : forces.get(name);
    },
    find: function(x3, y3, radius) {
      var i = 0, n = nodes.length, dx, dy, d2, node, closest;
      if (radius == null)
        radius = Infinity;
      else
        radius *= radius;
      for (i = 0; i < n; ++i) {
        node = nodes[i];
        dx = x3 - node.x;
        dy = y3 - node.y;
        d2 = dx * dx + dy * dy;
        if (d2 < radius)
          closest = node, radius = d2;
      }
      return closest;
    },
    on: function(name, _) {
      return arguments.length > 1 ? (event.on(name, _), simulation) : event.on(name);
    }
  };
}

// node_modules/d3-force/src/manyBody.js
function manyBody_default() {
  var nodes, node, random, alpha, strength = constant_default5(-30), strengths, distanceMin2 = 1, distanceMax2 = Infinity, theta2 = 0.81;
  function force(_) {
    var i, n = nodes.length, tree = quadtree(nodes, x2, y2).visitAfter(accumulate);
    for (alpha = _, i = 0; i < n; ++i)
      node = nodes[i], tree.visit(apply);
  }
  function initialize() {
    if (!nodes)
      return;
    var i, n = nodes.length, node2;
    strengths = new Array(n);
    for (i = 0; i < n; ++i)
      node2 = nodes[i], strengths[node2.index] = +strength(node2, i, nodes);
  }
  function accumulate(quad) {
    var strength2 = 0, q, c2, weight = 0, x3, y3, i;
    if (quad.length) {
      for (x3 = y3 = i = 0; i < 4; ++i) {
        if ((q = quad[i]) && (c2 = Math.abs(q.value))) {
          strength2 += q.value, weight += c2, x3 += c2 * q.x, y3 += c2 * q.y;
        }
      }
      quad.x = x3 / weight;
      quad.y = y3 / weight;
    } else {
      q = quad;
      q.x = q.data.x;
      q.y = q.data.y;
      do
        strength2 += strengths[q.data.index];
      while (q = q.next);
    }
    quad.value = strength2;
  }
  function apply(quad, x1, _, x22) {
    if (!quad.value)
      return true;
    var x3 = quad.x - node.x, y3 = quad.y - node.y, w = x22 - x1, l = x3 * x3 + y3 * y3;
    if (w * w / theta2 < l) {
      if (l < distanceMax2) {
        if (x3 === 0)
          x3 = jiggle_default(random), l += x3 * x3;
        if (y3 === 0)
          y3 = jiggle_default(random), l += y3 * y3;
        if (l < distanceMin2)
          l = Math.sqrt(distanceMin2 * l);
        node.vx += x3 * quad.value * alpha / l;
        node.vy += y3 * quad.value * alpha / l;
      }
      return true;
    } else if (quad.length || l >= distanceMax2)
      return;
    if (quad.data !== node || quad.next) {
      if (x3 === 0)
        x3 = jiggle_default(random), l += x3 * x3;
      if (y3 === 0)
        y3 = jiggle_default(random), l += y3 * y3;
      if (l < distanceMin2)
        l = Math.sqrt(distanceMin2 * l);
    }
    do
      if (quad.data !== node) {
        w = strengths[quad.data.index] * alpha / l;
        node.vx += x3 * w;
        node.vy += y3 * w;
      }
    while (quad = quad.next);
  }
  force.initialize = function(_nodes, _random) {
    nodes = _nodes;
    random = _random;
    initialize();
  };
  force.strength = function(_) {
    return arguments.length ? (strength = typeof _ === "function" ? _ : constant_default5(+_), initialize(), force) : strength;
  };
  force.distanceMin = function(_) {
    return arguments.length ? (distanceMin2 = _ * _, force) : Math.sqrt(distanceMin2);
  };
  force.distanceMax = function(_) {
    return arguments.length ? (distanceMax2 = _ * _, force) : Math.sqrt(distanceMax2);
  };
  force.theta = function(_) {
    return arguments.length ? (theta2 = _ * _, force) : Math.sqrt(theta2);
  };
  return force;
}

// node_modules/d3-format/src/formatDecimal.js
function formatDecimal_default(x3) {
  return Math.abs(x3 = Math.round(x3)) >= 1e21 ? x3.toLocaleString("en").replace(/,/g, "") : x3.toString(10);
}
function formatDecimalParts(x3, p) {
  if ((i = (x3 = p ? x3.toExponential(p - 1) : x3.toExponential()).indexOf("e")) < 0)
    return null;
  var i, coefficient = x3.slice(0, i);
  return [
    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
    +x3.slice(i + 1)
  ];
}

// node_modules/d3-format/src/exponent.js
function exponent_default(x3) {
  return x3 = formatDecimalParts(Math.abs(x3)), x3 ? x3[1] : NaN;
}

// node_modules/d3-format/src/formatGroup.js
function formatGroup_default(grouping, thousands) {
  return function(value, width) {
    var i = value.length, t = [], j = 0, g = grouping[0], length = 0;
    while (i > 0 && g > 0) {
      if (length + g + 1 > width)
        g = Math.max(1, width - length);
      t.push(value.substring(i -= g, i + g));
      if ((length += g + 1) > width)
        break;
      g = grouping[j = (j + 1) % grouping.length];
    }
    return t.reverse().join(thousands);
  };
}

// node_modules/d3-format/src/formatNumerals.js
function formatNumerals_default(numerals) {
  return function(value) {
    return value.replace(/[0-9]/g, function(i) {
      return numerals[+i];
    });
  };
}

// node_modules/d3-format/src/formatSpecifier.js
var re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;
function formatSpecifier(specifier) {
  if (!(match = re.exec(specifier)))
    throw new Error("invalid format: " + specifier);
  var match;
  return new FormatSpecifier({
    fill: match[1],
    align: match[2],
    sign: match[3],
    symbol: match[4],
    zero: match[5],
    width: match[6],
    comma: match[7],
    precision: match[8] && match[8].slice(1),
    trim: match[9],
    type: match[10]
  });
}
formatSpecifier.prototype = FormatSpecifier.prototype;
function FormatSpecifier(specifier) {
  this.fill = specifier.fill === void 0 ? " " : specifier.fill + "";
  this.align = specifier.align === void 0 ? ">" : specifier.align + "";
  this.sign = specifier.sign === void 0 ? "-" : specifier.sign + "";
  this.symbol = specifier.symbol === void 0 ? "" : specifier.symbol + "";
  this.zero = !!specifier.zero;
  this.width = specifier.width === void 0 ? void 0 : +specifier.width;
  this.comma = !!specifier.comma;
  this.precision = specifier.precision === void 0 ? void 0 : +specifier.precision;
  this.trim = !!specifier.trim;
  this.type = specifier.type === void 0 ? "" : specifier.type + "";
}
FormatSpecifier.prototype.toString = function() {
  return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (this.width === void 0 ? "" : Math.max(1, this.width | 0)) + (this.comma ? "," : "") + (this.precision === void 0 ? "" : "." + Math.max(0, this.precision | 0)) + (this.trim ? "~" : "") + this.type;
};

// node_modules/d3-format/src/formatTrim.js
function formatTrim_default(s) {
  out:
    for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {
      switch (s[i]) {
        case ".":
          i0 = i1 = i;
          break;
        case "0":
          if (i0 === 0)
            i0 = i;
          i1 = i;
          break;
        default:
          if (!+s[i])
            break out;
          if (i0 > 0)
            i0 = 0;
          break;
      }
    }
  return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;
}

// node_modules/d3-format/src/formatPrefixAuto.js
var prefixExponent;
function formatPrefixAuto_default(x3, p) {
  var d = formatDecimalParts(x3, p);
  if (!d)
    return x3 + "";
  var coefficient = d[0], exponent = d[1], i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1, n = coefficient.length;
  return i === n ? coefficient : i > n ? coefficient + new Array(i - n + 1).join("0") : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i) : "0." + new Array(1 - i).join("0") + formatDecimalParts(x3, Math.max(0, p + i - 1))[0];
}

// node_modules/d3-format/src/formatRounded.js
function formatRounded_default(x3, p) {
  var d = formatDecimalParts(x3, p);
  if (!d)
    return x3 + "";
  var coefficient = d[0], exponent = d[1];
  return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1) : coefficient + new Array(exponent - coefficient.length + 2).join("0");
}

// node_modules/d3-format/src/formatTypes.js
var formatTypes_default = {
  "%": (x3, p) => (x3 * 100).toFixed(p),
  "b": (x3) => Math.round(x3).toString(2),
  "c": (x3) => x3 + "",
  "d": formatDecimal_default,
  "e": (x3, p) => x3.toExponential(p),
  "f": (x3, p) => x3.toFixed(p),
  "g": (x3, p) => x3.toPrecision(p),
  "o": (x3) => Math.round(x3).toString(8),
  "p": (x3, p) => formatRounded_default(x3 * 100, p),
  "r": formatRounded_default,
  "s": formatPrefixAuto_default,
  "X": (x3) => Math.round(x3).toString(16).toUpperCase(),
  "x": (x3) => Math.round(x3).toString(16)
};

// node_modules/d3-format/src/identity.js
function identity_default(x3) {
  return x3;
}

// node_modules/d3-format/src/locale.js
var map = Array.prototype.map;
var prefixes = ["y", "z", "a", "f", "p", "n", "\xB5", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y"];
function locale_default(locale2) {
  var group = locale2.grouping === void 0 || locale2.thousands === void 0 ? identity_default : formatGroup_default(map.call(locale2.grouping, Number), locale2.thousands + ""), currencyPrefix = locale2.currency === void 0 ? "" : locale2.currency[0] + "", currencySuffix = locale2.currency === void 0 ? "" : locale2.currency[1] + "", decimal = locale2.decimal === void 0 ? "." : locale2.decimal + "", numerals = locale2.numerals === void 0 ? identity_default : formatNumerals_default(map.call(locale2.numerals, String)), percent = locale2.percent === void 0 ? "%" : locale2.percent + "", minus = locale2.minus === void 0 ? "\u2212" : locale2.minus + "", nan = locale2.nan === void 0 ? "NaN" : locale2.nan + "";
  function newFormat(specifier) {
    specifier = formatSpecifier(specifier);
    var fill = specifier.fill, align = specifier.align, sign = specifier.sign, symbol = specifier.symbol, zero3 = specifier.zero, width = specifier.width, comma = specifier.comma, precision = specifier.precision, trim = specifier.trim, type2 = specifier.type;
    if (type2 === "n")
      comma = true, type2 = "g";
    else if (!formatTypes_default[type2])
      precision === void 0 && (precision = 12), trim = true, type2 = "g";
    if (zero3 || fill === "0" && align === "=")
      zero3 = true, fill = "0", align = "=";
    var prefix = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type2) ? "0" + type2.toLowerCase() : "", suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type2) ? percent : "";
    var formatType = formatTypes_default[type2], maybeSuffix = /[defgprs%]/.test(type2);
    precision = precision === void 0 ? 6 : /[gprs]/.test(type2) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));
    function format2(value) {
      var valuePrefix = prefix, valueSuffix = suffix, i, n, c2;
      if (type2 === "c") {
        valueSuffix = formatType(value) + valueSuffix;
        value = "";
      } else {
        value = +value;
        var valueNegative = value < 0 || 1 / value < 0;
        value = isNaN(value) ? nan : formatType(Math.abs(value), precision);
        if (trim)
          value = formatTrim_default(value);
        if (valueNegative && +value === 0 && sign !== "+")
          valueNegative = false;
        valuePrefix = (valueNegative ? sign === "(" ? sign : minus : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;
        valueSuffix = (type2 === "s" ? prefixes[8 + prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign === "(" ? ")" : "");
        if (maybeSuffix) {
          i = -1, n = value.length;
          while (++i < n) {
            if (c2 = value.charCodeAt(i), 48 > c2 || c2 > 57) {
              valueSuffix = (c2 === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
              value = value.slice(0, i);
              break;
            }
          }
        }
      }
      if (comma && !zero3)
        value = group(value, Infinity);
      var length = valuePrefix.length + value.length + valueSuffix.length, padding = length < width ? new Array(width - length + 1).join(fill) : "";
      if (comma && zero3)
        value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";
      switch (align) {
        case "<":
          value = valuePrefix + value + valueSuffix + padding;
          break;
        case "=":
          value = valuePrefix + padding + value + valueSuffix;
          break;
        case "^":
          value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);
          break;
        default:
          value = padding + valuePrefix + value + valueSuffix;
          break;
      }
      return numerals(value);
    }
    format2.toString = function() {
      return specifier + "";
    };
    return format2;
  }
  function formatPrefix2(specifier, value) {
    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)), e = Math.max(-8, Math.min(8, Math.floor(exponent_default(value) / 3))) * 3, k = Math.pow(10, -e), prefix = prefixes[8 + e / 3];
    return function(value2) {
      return f(k * value2) + prefix;
    };
  }
  return {
    format: newFormat,
    formatPrefix: formatPrefix2
  };
}

// node_modules/d3-format/src/defaultLocale.js
var locale;
var format;
var formatPrefix;
defaultLocale({
  thousands: ",",
  grouping: [3],
  currency: ["$", ""]
});
function defaultLocale(definition) {
  locale = locale_default(definition);
  format = locale.format;
  formatPrefix = locale.formatPrefix;
  return locale;
}

// node_modules/d3-format/src/precisionFixed.js
function precisionFixed_default(step) {
  return Math.max(0, -exponent_default(Math.abs(step)));
}

// node_modules/d3-format/src/precisionPrefix.js
function precisionPrefix_default(step, value) {
  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent_default(value) / 3))) * 3 - exponent_default(Math.abs(step)));
}

// node_modules/d3-format/src/precisionRound.js
function precisionRound_default(step, max2) {
  step = Math.abs(step), max2 = Math.abs(max2) - step;
  return Math.max(0, exponent_default(max2) - exponent_default(step)) + 1;
}

// node_modules/d3-scale/src/init.js
function initRange(domain, range) {
  switch (arguments.length) {
    case 0:
      break;
    case 1:
      this.range(domain);
      break;
    default:
      this.range(range).domain(domain);
      break;
  }
  return this;
}

// node_modules/d3-scale/src/constant.js
function constants(x3) {
  return function() {
    return x3;
  };
}

// node_modules/d3-scale/src/number.js
function number3(x3) {
  return +x3;
}

// node_modules/d3-scale/src/continuous.js
var unit = [0, 1];
function identity2(x3) {
  return x3;
}
function normalize(a2, b) {
  return (b -= a2 = +a2) ? function(x3) {
    return (x3 - a2) / b;
  } : constants(isNaN(b) ? NaN : 0.5);
}
function clamper(a2, b) {
  var t;
  if (a2 > b)
    t = a2, a2 = b, b = t;
  return function(x3) {
    return Math.max(a2, Math.min(b, x3));
  };
}
function bimap(domain, range, interpolate) {
  var d0 = domain[0], d1 = domain[1], r0 = range[0], r1 = range[1];
  if (d1 < d0)
    d0 = normalize(d1, d0), r0 = interpolate(r1, r0);
  else
    d0 = normalize(d0, d1), r0 = interpolate(r0, r1);
  return function(x3) {
    return r0(d0(x3));
  };
}
function polymap(domain, range, interpolate) {
  var j = Math.min(domain.length, range.length) - 1, d = new Array(j), r = new Array(j), i = -1;
  if (domain[j] < domain[0]) {
    domain = domain.slice().reverse();
    range = range.slice().reverse();
  }
  while (++i < j) {
    d[i] = normalize(domain[i], domain[i + 1]);
    r[i] = interpolate(range[i], range[i + 1]);
  }
  return function(x3) {
    var i2 = bisect_default(domain, x3, 1, j) - 1;
    return r[i2](d[i2](x3));
  };
}
function copy(source, target) {
  return target.domain(source.domain()).range(source.range()).interpolate(source.interpolate()).clamp(source.clamp()).unknown(source.unknown());
}
function transformer() {
  var domain = unit, range = unit, interpolate = value_default, transform2, untransform, unknown, clamp = identity2, piecewise, output, input;
  function rescale() {
    var n = Math.min(domain.length, range.length);
    if (clamp !== identity2)
      clamp = clamper(domain[0], domain[n - 1]);
    piecewise = n > 2 ? polymap : bimap;
    output = input = null;
    return scale;
  }
  function scale(x3) {
    return x3 == null || isNaN(x3 = +x3) ? unknown : (output || (output = piecewise(domain.map(transform2), range, interpolate)))(transform2(clamp(x3)));
  }
  scale.invert = function(y3) {
    return clamp(untransform((input || (input = piecewise(range, domain.map(transform2), number_default)))(y3)));
  };
  scale.domain = function(_) {
    return arguments.length ? (domain = Array.from(_, number3), rescale()) : domain.slice();
  };
  scale.range = function(_) {
    return arguments.length ? (range = Array.from(_), rescale()) : range.slice();
  };
  scale.rangeRound = function(_) {
    return range = Array.from(_), interpolate = round_default, rescale();
  };
  scale.clamp = function(_) {
    return arguments.length ? (clamp = _ ? true : identity2, rescale()) : clamp !== identity2;
  };
  scale.interpolate = function(_) {
    return arguments.length ? (interpolate = _, rescale()) : interpolate;
  };
  scale.unknown = function(_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };
  return function(t, u) {
    transform2 = t, untransform = u;
    return rescale();
  };
}
function continuous() {
  return transformer()(identity2, identity2);
}

// node_modules/d3-scale/src/tickFormat.js
function tickFormat(start2, stop, count, specifier) {
  var step = tickStep(start2, stop, count), precision;
  specifier = formatSpecifier(specifier == null ? ",f" : specifier);
  switch (specifier.type) {
    case "s": {
      var value = Math.max(Math.abs(start2), Math.abs(stop));
      if (specifier.precision == null && !isNaN(precision = precisionPrefix_default(step, value)))
        specifier.precision = precision;
      return formatPrefix(specifier, value);
    }
    case "":
    case "e":
    case "g":
    case "p":
    case "r": {
      if (specifier.precision == null && !isNaN(precision = precisionRound_default(step, Math.max(Math.abs(start2), Math.abs(stop)))))
        specifier.precision = precision - (specifier.type === "e");
      break;
    }
    case "f":
    case "%": {
      if (specifier.precision == null && !isNaN(precision = precisionFixed_default(step)))
        specifier.precision = precision - (specifier.type === "%") * 2;
      break;
    }
  }
  return format(specifier);
}

// node_modules/d3-scale/src/linear.js
function linearish(scale) {
  var domain = scale.domain;
  scale.ticks = function(count) {
    var d = domain();
    return ticks(d[0], d[d.length - 1], count == null ? 10 : count);
  };
  scale.tickFormat = function(count, specifier) {
    var d = domain();
    return tickFormat(d[0], d[d.length - 1], count == null ? 10 : count, specifier);
  };
  scale.nice = function(count) {
    if (count == null)
      count = 10;
    var d = domain();
    var i0 = 0;
    var i1 = d.length - 1;
    var start2 = d[i0];
    var stop = d[i1];
    var prestep;
    var step;
    var maxIter = 10;
    if (stop < start2) {
      step = start2, start2 = stop, stop = step;
      step = i0, i0 = i1, i1 = step;
    }
    while (maxIter-- > 0) {
      step = tickIncrement(start2, stop, count);
      if (step === prestep) {
        d[i0] = start2;
        d[i1] = stop;
        return domain(d);
      } else if (step > 0) {
        start2 = Math.floor(start2 / step) * step;
        stop = Math.ceil(stop / step) * step;
      } else if (step < 0) {
        start2 = Math.ceil(start2 * step) / step;
        stop = Math.floor(stop * step) / step;
      } else {
        break;
      }
      prestep = step;
    }
    return scale;
  };
  return scale;
}
function linear2() {
  var scale = continuous();
  scale.copy = function() {
    return copy(scale, linear2());
  };
  initRange.apply(scale, arguments);
  return linearish(scale);
}

// node_modules/d3-zoom/src/constant.js
var constant_default6 = (x3) => () => x3;

// node_modules/d3-zoom/src/event.js
function ZoomEvent(type2, {
  sourceEvent,
  target,
  transform: transform2,
  dispatch: dispatch2
}) {
  Object.defineProperties(this, {
    type: { value: type2, enumerable: true, configurable: true },
    sourceEvent: { value: sourceEvent, enumerable: true, configurable: true },
    target: { value: target, enumerable: true, configurable: true },
    transform: { value: transform2, enumerable: true, configurable: true },
    _: { value: dispatch2 }
  });
}

// node_modules/d3-zoom/src/transform.js
function Transform(k, x3, y3) {
  this.k = k;
  this.x = x3;
  this.y = y3;
}
Transform.prototype = {
  constructor: Transform,
  scale: function(k) {
    return k === 1 ? this : new Transform(this.k * k, this.x, this.y);
  },
  translate: function(x3, y3) {
    return x3 === 0 & y3 === 0 ? this : new Transform(this.k, this.x + this.k * x3, this.y + this.k * y3);
  },
  apply: function(point) {
    return [point[0] * this.k + this.x, point[1] * this.k + this.y];
  },
  applyX: function(x3) {
    return x3 * this.k + this.x;
  },
  applyY: function(y3) {
    return y3 * this.k + this.y;
  },
  invert: function(location) {
    return [(location[0] - this.x) / this.k, (location[1] - this.y) / this.k];
  },
  invertX: function(x3) {
    return (x3 - this.x) / this.k;
  },
  invertY: function(y3) {
    return (y3 - this.y) / this.k;
  },
  rescaleX: function(x3) {
    return x3.copy().domain(x3.range().map(this.invertX, this).map(x3.invert, x3));
  },
  rescaleY: function(y3) {
    return y3.copy().domain(y3.range().map(this.invertY, this).map(y3.invert, y3));
  },
  toString: function() {
    return "translate(" + this.x + "," + this.y + ") scale(" + this.k + ")";
  }
};
var identity3 = new Transform(1, 0, 0);
transform.prototype = Transform.prototype;
function transform(node) {
  while (!node.__zoom)
    if (!(node = node.parentNode))
      return identity3;
  return node.__zoom;
}

// node_modules/d3-zoom/src/noevent.js
function nopropagation3(event) {
  event.stopImmediatePropagation();
}
function noevent_default3(event) {
  event.preventDefault();
  event.stopImmediatePropagation();
}

// node_modules/d3-zoom/src/zoom.js
function defaultFilter2(event) {
  return (!event.ctrlKey || event.type === "wheel") && !event.button;
}
function defaultExtent() {
  var e = this;
  if (e instanceof SVGElement) {
    e = e.ownerSVGElement || e;
    if (e.hasAttribute("viewBox")) {
      e = e.viewBox.baseVal;
      return [[e.x, e.y], [e.x + e.width, e.y + e.height]];
    }
    return [[0, 0], [e.width.baseVal.value, e.height.baseVal.value]];
  }
  return [[0, 0], [e.clientWidth, e.clientHeight]];
}
function defaultTransform() {
  return this.__zoom || identity3;
}
function defaultWheelDelta(event) {
  return -event.deltaY * (event.deltaMode === 1 ? 0.05 : event.deltaMode ? 1 : 2e-3) * (event.ctrlKey ? 10 : 1);
}
function defaultTouchable2() {
  return navigator.maxTouchPoints || "ontouchstart" in this;
}
function defaultConstrain(transform2, extent, translateExtent) {
  var dx0 = transform2.invertX(extent[0][0]) - translateExtent[0][0], dx1 = transform2.invertX(extent[1][0]) - translateExtent[1][0], dy0 = transform2.invertY(extent[0][1]) - translateExtent[0][1], dy1 = transform2.invertY(extent[1][1]) - translateExtent[1][1];
  return transform2.translate(
    dx1 > dx0 ? (dx0 + dx1) / 2 : Math.min(0, dx0) || Math.max(0, dx1),
    dy1 > dy0 ? (dy0 + dy1) / 2 : Math.min(0, dy0) || Math.max(0, dy1)
  );
}
function zoom_default2() {
  var filter2 = defaultFilter2, extent = defaultExtent, constrain = defaultConstrain, wheelDelta = defaultWheelDelta, touchable = defaultTouchable2, scaleExtent = [0, Infinity], translateExtent = [[-Infinity, -Infinity], [Infinity, Infinity]], duration = 250, interpolate = zoom_default, listeners = dispatch_default("start", "zoom", "end"), touchstarting, touchfirst, touchending, touchDelay = 500, wheelDelay = 150, clickDistance2 = 0, tapDistance = 10;
  function zoom(selection2) {
    selection2.property("__zoom", defaultTransform).on("wheel.zoom", wheeled, { passive: false }).on("mousedown.zoom", mousedowned).on("dblclick.zoom", dblclicked).filter(touchable).on("touchstart.zoom", touchstarted).on("touchmove.zoom", touchmoved).on("touchend.zoom touchcancel.zoom", touchended).style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
  }
  zoom.transform = function(collection, transform2, point, event) {
    var selection2 = collection.selection ? collection.selection() : collection;
    selection2.property("__zoom", defaultTransform);
    if (collection !== selection2) {
      schedule(collection, transform2, point, event);
    } else {
      selection2.interrupt().each(function() {
        gesture(this, arguments).event(event).start().zoom(null, typeof transform2 === "function" ? transform2.apply(this, arguments) : transform2).end();
      });
    }
  };
  zoom.scaleBy = function(selection2, k, p, event) {
    zoom.scaleTo(selection2, function() {
      var k0 = this.__zoom.k, k1 = typeof k === "function" ? k.apply(this, arguments) : k;
      return k0 * k1;
    }, p, event);
  };
  zoom.scaleTo = function(selection2, k, p, event) {
    zoom.transform(selection2, function() {
      var e = extent.apply(this, arguments), t0 = this.__zoom, p0 = p == null ? centroid(e) : typeof p === "function" ? p.apply(this, arguments) : p, p1 = t0.invert(p0), k1 = typeof k === "function" ? k.apply(this, arguments) : k;
      return constrain(translate(scale(t0, k1), p0, p1), e, translateExtent);
    }, p, event);
  };
  zoom.translateBy = function(selection2, x3, y3, event) {
    zoom.transform(selection2, function() {
      return constrain(this.__zoom.translate(
        typeof x3 === "function" ? x3.apply(this, arguments) : x3,
        typeof y3 === "function" ? y3.apply(this, arguments) : y3
      ), extent.apply(this, arguments), translateExtent);
    }, null, event);
  };
  zoom.translateTo = function(selection2, x3, y3, p, event) {
    zoom.transform(selection2, function() {
      var e = extent.apply(this, arguments), t = this.__zoom, p0 = p == null ? centroid(e) : typeof p === "function" ? p.apply(this, arguments) : p;
      return constrain(identity3.translate(p0[0], p0[1]).scale(t.k).translate(
        typeof x3 === "function" ? -x3.apply(this, arguments) : -x3,
        typeof y3 === "function" ? -y3.apply(this, arguments) : -y3
      ), e, translateExtent);
    }, p, event);
  };
  function scale(transform2, k) {
    k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], k));
    return k === transform2.k ? transform2 : new Transform(k, transform2.x, transform2.y);
  }
  function translate(transform2, p0, p1) {
    var x3 = p0[0] - p1[0] * transform2.k, y3 = p0[1] - p1[1] * transform2.k;
    return x3 === transform2.x && y3 === transform2.y ? transform2 : new Transform(transform2.k, x3, y3);
  }
  function centroid(extent2) {
    return [(+extent2[0][0] + +extent2[1][0]) / 2, (+extent2[0][1] + +extent2[1][1]) / 2];
  }
  function schedule(transition2, transform2, point, event) {
    transition2.on("start.zoom", function() {
      gesture(this, arguments).event(event).start();
    }).on("interrupt.zoom end.zoom", function() {
      gesture(this, arguments).event(event).end();
    }).tween("zoom", function() {
      var that = this, args = arguments, g = gesture(that, args).event(event), e = extent.apply(that, args), p = point == null ? centroid(e) : typeof point === "function" ? point.apply(that, args) : point, w = Math.max(e[1][0] - e[0][0], e[1][1] - e[0][1]), a2 = that.__zoom, b = typeof transform2 === "function" ? transform2.apply(that, args) : transform2, i = interpolate(a2.invert(p).concat(w / a2.k), b.invert(p).concat(w / b.k));
      return function(t) {
        if (t === 1)
          t = b;
        else {
          var l = i(t), k = w / l[2];
          t = new Transform(k, p[0] - l[0] * k, p[1] - l[1] * k);
        }
        g.zoom(null, t);
      };
    });
  }
  function gesture(that, args, clean) {
    return !clean && that.__zooming || new Gesture(that, args);
  }
  function Gesture(that, args) {
    this.that = that;
    this.args = args;
    this.active = 0;
    this.sourceEvent = null;
    this.extent = extent.apply(that, args);
    this.taps = 0;
  }
  Gesture.prototype = {
    event: function(event) {
      if (event)
        this.sourceEvent = event;
      return this;
    },
    start: function() {
      if (++this.active === 1) {
        this.that.__zooming = this;
        this.emit("start");
      }
      return this;
    },
    zoom: function(key, transform2) {
      if (this.mouse && key !== "mouse")
        this.mouse[1] = transform2.invert(this.mouse[0]);
      if (this.touch0 && key !== "touch")
        this.touch0[1] = transform2.invert(this.touch0[0]);
      if (this.touch1 && key !== "touch")
        this.touch1[1] = transform2.invert(this.touch1[0]);
      this.that.__zoom = transform2;
      this.emit("zoom");
      return this;
    },
    end: function() {
      if (--this.active === 0) {
        delete this.that.__zooming;
        this.emit("end");
      }
      return this;
    },
    emit: function(type2) {
      var d = select_default2(this.that).datum();
      listeners.call(
        type2,
        this.that,
        new ZoomEvent(type2, {
          sourceEvent: this.sourceEvent,
          target: zoom,
          type: type2,
          transform: this.that.__zoom,
          dispatch: listeners
        }),
        d
      );
    }
  };
  function wheeled(event, ...args) {
    if (!filter2.apply(this, arguments))
      return;
    var g = gesture(this, args).event(event), t = this.__zoom, k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], t.k * Math.pow(2, wheelDelta.apply(this, arguments)))), p = pointer_default(event);
    if (g.wheel) {
      if (g.mouse[0][0] !== p[0] || g.mouse[0][1] !== p[1]) {
        g.mouse[1] = t.invert(g.mouse[0] = p);
      }
      clearTimeout(g.wheel);
    } else if (t.k === k)
      return;
    else {
      g.mouse = [p, t.invert(p)];
      interrupt_default(this);
      g.start();
    }
    noevent_default3(event);
    g.wheel = setTimeout(wheelidled, wheelDelay);
    g.zoom("mouse", constrain(translate(scale(t, k), g.mouse[0], g.mouse[1]), g.extent, translateExtent));
    function wheelidled() {
      g.wheel = null;
      g.end();
    }
  }
  function mousedowned(event, ...args) {
    if (touchending || !filter2.apply(this, arguments))
      return;
    var currentTarget = event.currentTarget, g = gesture(this, args, true).event(event), v = select_default2(event.view).on("mousemove.zoom", mousemoved, true).on("mouseup.zoom", mouseupped, true), p = pointer_default(event, currentTarget), x0 = event.clientX, y0 = event.clientY;
    nodrag_default(event.view);
    nopropagation3(event);
    g.mouse = [p, this.__zoom.invert(p)];
    interrupt_default(this);
    g.start();
    function mousemoved(event2) {
      noevent_default3(event2);
      if (!g.moved) {
        var dx = event2.clientX - x0, dy = event2.clientY - y0;
        g.moved = dx * dx + dy * dy > clickDistance2;
      }
      g.event(event2).zoom("mouse", constrain(translate(g.that.__zoom, g.mouse[0] = pointer_default(event2, currentTarget), g.mouse[1]), g.extent, translateExtent));
    }
    function mouseupped(event2) {
      v.on("mousemove.zoom mouseup.zoom", null);
      yesdrag(event2.view, g.moved);
      noevent_default3(event2);
      g.event(event2).end();
    }
  }
  function dblclicked(event, ...args) {
    if (!filter2.apply(this, arguments))
      return;
    var t0 = this.__zoom, p0 = pointer_default(event.changedTouches ? event.changedTouches[0] : event, this), p1 = t0.invert(p0), k1 = t0.k * (event.shiftKey ? 0.5 : 2), t1 = constrain(translate(scale(t0, k1), p0, p1), extent.apply(this, args), translateExtent);
    noevent_default3(event);
    if (duration > 0)
      select_default2(this).transition().duration(duration).call(schedule, t1, p0, event);
    else
      select_default2(this).call(zoom.transform, t1, p0, event);
  }
  function touchstarted(event, ...args) {
    if (!filter2.apply(this, arguments))
      return;
    var touches = event.touches, n = touches.length, g = gesture(this, args, event.changedTouches.length === n).event(event), started, i, t, p;
    nopropagation3(event);
    for (i = 0; i < n; ++i) {
      t = touches[i], p = pointer_default(t, this);
      p = [p, this.__zoom.invert(p), t.identifier];
      if (!g.touch0)
        g.touch0 = p, started = true, g.taps = 1 + !!touchstarting;
      else if (!g.touch1 && g.touch0[2] !== p[2])
        g.touch1 = p, g.taps = 0;
    }
    if (touchstarting)
      touchstarting = clearTimeout(touchstarting);
    if (started) {
      if (g.taps < 2)
        touchfirst = p[0], touchstarting = setTimeout(function() {
          touchstarting = null;
        }, touchDelay);
      interrupt_default(this);
      g.start();
    }
  }
  function touchmoved(event, ...args) {
    if (!this.__zooming)
      return;
    var g = gesture(this, args).event(event), touches = event.changedTouches, n = touches.length, i, t, p, l;
    noevent_default3(event);
    for (i = 0; i < n; ++i) {
      t = touches[i], p = pointer_default(t, this);
      if (g.touch0 && g.touch0[2] === t.identifier)
        g.touch0[0] = p;
      else if (g.touch1 && g.touch1[2] === t.identifier)
        g.touch1[0] = p;
    }
    t = g.that.__zoom;
    if (g.touch1) {
      var p0 = g.touch0[0], l0 = g.touch0[1], p1 = g.touch1[0], l1 = g.touch1[1], dp = (dp = p1[0] - p0[0]) * dp + (dp = p1[1] - p0[1]) * dp, dl = (dl = l1[0] - l0[0]) * dl + (dl = l1[1] - l0[1]) * dl;
      t = scale(t, Math.sqrt(dp / dl));
      p = [(p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2];
      l = [(l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2];
    } else if (g.touch0)
      p = g.touch0[0], l = g.touch0[1];
    else
      return;
    g.zoom("touch", constrain(translate(t, p, l), g.extent, translateExtent));
  }
  function touchended(event, ...args) {
    if (!this.__zooming)
      return;
    var g = gesture(this, args).event(event), touches = event.changedTouches, n = touches.length, i, t;
    nopropagation3(event);
    if (touchending)
      clearTimeout(touchending);
    touchending = setTimeout(function() {
      touchending = null;
    }, touchDelay);
    for (i = 0; i < n; ++i) {
      t = touches[i];
      if (g.touch0 && g.touch0[2] === t.identifier)
        delete g.touch0;
      else if (g.touch1 && g.touch1[2] === t.identifier)
        delete g.touch1;
    }
    if (g.touch1 && !g.touch0)
      g.touch0 = g.touch1, delete g.touch1;
    if (g.touch0)
      g.touch0[1] = this.__zoom.invert(g.touch0[0]);
    else {
      g.end();
      if (g.taps === 2) {
        t = pointer_default(t, this);
        if (Math.hypot(touchfirst[0] - t[0], touchfirst[1] - t[1]) < tapDistance) {
          var p = select_default2(this).on("dblclick.zoom");
          if (p)
            p.apply(this, arguments);
        }
      }
    }
  }
  zoom.wheelDelta = function(_) {
    return arguments.length ? (wheelDelta = typeof _ === "function" ? _ : constant_default6(+_), zoom) : wheelDelta;
  };
  zoom.filter = function(_) {
    return arguments.length ? (filter2 = typeof _ === "function" ? _ : constant_default6(!!_), zoom) : filter2;
  };
  zoom.touchable = function(_) {
    return arguments.length ? (touchable = typeof _ === "function" ? _ : constant_default6(!!_), zoom) : touchable;
  };
  zoom.extent = function(_) {
    return arguments.length ? (extent = typeof _ === "function" ? _ : constant_default6([[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]]), zoom) : extent;
  };
  zoom.scaleExtent = function(_) {
    return arguments.length ? (scaleExtent[0] = +_[0], scaleExtent[1] = +_[1], zoom) : [scaleExtent[0], scaleExtent[1]];
  };
  zoom.translateExtent = function(_) {
    return arguments.length ? (translateExtent[0][0] = +_[0][0], translateExtent[1][0] = +_[1][0], translateExtent[0][1] = +_[0][1], translateExtent[1][1] = +_[1][1], zoom) : [[translateExtent[0][0], translateExtent[0][1]], [translateExtent[1][0], translateExtent[1][1]]];
  };
  zoom.constrain = function(_) {
    return arguments.length ? (constrain = _, zoom) : constrain;
  };
  zoom.duration = function(_) {
    return arguments.length ? (duration = +_, zoom) : duration;
  };
  zoom.interpolate = function(_) {
    return arguments.length ? (interpolate = _, zoom) : interpolate;
  };
  zoom.on = function() {
    var value = listeners.on.apply(listeners, arguments);
    return value === listeners ? zoom : value;
  };
  zoom.clickDistance = function(_) {
    return arguments.length ? (clickDistance2 = (_ = +_) * _, zoom) : Math.sqrt(clickDistance2);
  };
  zoom.tapDistance = function(_) {
    return arguments.length ? (tapDistance = +_, zoom) : tapDistance;
  };
  return zoom;
}

// apiClient.ts
var import_wikipedia = __toESM(require_dist());
var isMobile = false;
if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(
  navigator.userAgent
)) {
  isMobile = true;
}
function __minimizeUrl(url) {
  return url == null ? void 0 : url.replace(/\n\s*/g, "");
}
var restApiLang = "pt";
function RestApiBase() {
  return `https://${restApiLang}.wikipedia.org/api/rest_v1`;
}
var lang = "en";
var getUrlSuggest = (query) => __minimizeUrl(`
  https://${lang}.wikipedia.org/w/api.php
  ?action=opensearch
  &format=json
  &formatversion=2
  &search=${query}
  &namespace=0
  &limit=10
  &origin=*`);
async function suggestCustom(query) {
  const apiEndpoint = getUrlSuggest(query);
  console.log("api endpoint:", apiEndpoint);
  console.log("encoded url:", encodeURI(query));
  const fetchSearch = await (await fetch(apiEndpoint)).json();
  console.log("fetchSearch:", fetchSearch);
  const [, titles, , links2] = fetchSearch;
  const res = [];
  for (let i = 0; i < titles.length; i++) {
    const chunks = links2[i].split("/");
    res.push({ title: titles[i], normalized: chunks[chunks.length - 1] });
  }
  return res;
}
async function page(query) {
  const resPage = await import_wikipedia.default.page(query, {
    autoSuggest: true,
    redirect: false
  });
  return resPage;
}
async function getSummary(query) {
  const endpoint = RestApiBase() + "/page/summary/" + query;
  const summary2 = await (await fetch(endpoint)).json();
  return summary2;
}
async function getResponse(query) {
  const endpoint = RestApiBase() + "/page/related/" + query;
  const related2 = await (await fetch(endpoint)).json();
  return related2.pages;
}
function getItem(item) {
  const {
    description,
    pageid,
    extract_html,
    originalimage,
    thumbnail,
    content_urls
  } = item;
  const page_url = isMobile ? content_urls.mobile.page : content_urls.desktop.page;
  const data = {
    description,
    pageid,
    extract_html,
    originalimage,
    thumbnail,
    page_url
  };
  return { id: item.titles.normalized, data };
}
function setLang(language) {
  restApiLang = language;
}
var apiClient = {
  // suggest,
  page,
  suggestCustom,
  getSummary,
  getResponse,
  getItem,
  // languages,
  // loadLangs,
  setLang
};

// view.ts
var import_obsidian = require("obsidian");
var SearchView = class extends import_obsidian.ItemView {
  constructor(plugin, leaf, url, title) {
    super(leaf);
    this.plugin = plugin;
    this.url = url;
    this.title = title;
  }
  async onOpen() {
    this.frame = document.createElement("iframe");
    this.frame.addClass(`soi-site`);
    this.frame.setAttr("style", "height: 100%; width:100%");
    this.frame.setAttr("src", this.url);
    this.frame.setAttr("tabindex", "0");
    this.containerEl.children[1].appendChild(this.frame);
  }
  getDisplayText() {
    return `Wiki: ${this.title}`;
  }
  getViewType() {
    return "Search on Internet";
  }
};

// main.ts
var DEFAULT_NETWORK_SETTINGS = {
  relevanceScoreThreshold: 0.5,
  nodeSize: 4,
  linkThickness: 0.3,
  repelForce: 400,
  linkForce: 0.4,
  linkDistance: 70,
  centerForce: 0.1,
  textFadeThreshold: 1.1,
  minLinkThickness: 0.3,
  maxLinkThickness: 0.6,
  maxLabelCharacters: 18,
  linkLabelSize: 7,
  nodeLabelSize: 6,
  connectionType: "block",
  noteFillColor: "#7c8594",
  blockFillColor: "#926ec9",
  wikiFillColor: "#145da0",
  language: "pt"
};
var ScGraphItemView = class extends import_obsidian2.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    this.connectionType = "block";
    this.relevanceScoreThreshold = 0.5;
    this.nodeSize = 4;
    this.linkThickness = 0.3;
    this.repelForce = 400;
    this.linkForce = 0.4;
    this.linkDistance = 70;
    this.centerForce = 0.3;
    this.textFadeThreshold = 1.1;
    this.minScore = 1;
    this.maxScore = 0;
    this.minNodeSize = 3;
    this.maxNodeSize = 6;
    this.minLinkThickness = 0.3;
    this.maxLinkThickness = 0.6;
    this.isCtrlPressed = false;
    this.isAltPressed = false;
    this.isDragging = false;
    this.isChangingConnectionType = true;
    this.maxLabelCharacters = 18;
    this.linkLabelSize = 7;
    this.nodeLabelSize = 6;
    this.blockFillColor = "#926ec9";
    this.noteFillColor = "#7c8594";
    this.wikiFillColor = "#145da0";
    this.language = "pt";
    this.startX = 0;
    this.startY = 0;
    this.nodes = [];
    this.links = [];
    this.connections = [];
    this.centerHighlighted = false;
    this.dragging = false;
    this.highlightedNodeId = "-1";
    this.currentNoteChanging = false;
    this.isFiltering = false;
    this.settingsMade = false;
    this.currentNoteKey = "";
    this.isHovering = false;
    this.plugin = plugin;
    this.relevanceScoreThreshold = this.plugin.settings.relevanceScoreThreshold;
    this.nodeSize = this.plugin.settings.nodeSize;
    this.linkThickness = this.plugin.settings.linkThickness;
    this.repelForce = this.plugin.settings.repelForce;
    this.linkForce = this.plugin.settings.linkForce;
    this.linkDistance = this.plugin.settings.linkDistance;
    this.centerForce = this.plugin.settings.centerForce;
    this.textFadeThreshold = this.plugin.settings.textFadeThreshold;
    this.minLinkThickness = this.plugin.settings.minLinkThickness;
    this.maxLinkThickness = this.plugin.settings.maxLinkThickness;
    this.maxLabelCharacters = this.plugin.settings.maxLabelCharacters;
    this.linkLabelSize = this.plugin.settings.linkLabelSize;
    this.nodeLabelSize = this.plugin.settings.nodeLabelSize;
    this.connectionType = this.plugin.settings.connectionType;
    this.noteFillColor = this.plugin.settings.noteFillColor;
    this.blockFillColor = this.plugin.settings.blockFillColor;
    this.wikiFillColor = this.plugin.settings.wikiFillColor;
    this.language = this.plugin.settings.language;
  }
  getViewType() {
    return "smart-connections-visualizer";
  }
  getDisplayText() {
    return "Smart connections visualizer";
  }
  getIcon() {
    return "git-fork";
  }
  updateNodeAppearance() {
    this.nodeSelection.transition().duration(500).attr("fill", (d) => d.fill).attr("stroke", (d) => d.selected ? "blanchedalmond" : d.highlighted ? "#d46ebe" : "transparent").attr("stroke-width", (d) => d.selected ? 1.5 : d.highlighted ? 0.3 : 0).attr("opacity", (d) => this.getNodeOpacity(d));
  }
  // getNodeFill(d: any) {
  // 	if (d.id === this.centralNode.id) return '#7c8594';
  // 	if (d.highlighted && !d.selected) return '#d46ebe';
  // 	return d.group === 'note' ? '#7c8594' : '#926ec9';
  // }
  getNodeOpacity(d) {
    if (d.id === this.centralNode.id)
      return 1;
    if (d.selected)
      return 1;
    if (d.highlighted)
      return 0.8;
    return this.isHovering ? 0.1 : 1;
  }
  toggleNodeSelection(nodeId) {
    const node = this.nodeSelection.data().find((d) => d.id === nodeId);
    if (node) {
      node.selected = !node.selected;
      if (!node.selected) {
        node.highlighted = false;
      }
      this.updateNodeAppearance();
    }
  }
  clearSelections() {
    this.nodeSelection.each((d) => {
      d.selected = false;
      d.highlighted = false;
    });
    this.updateNodeAppearance();
  }
  highlightNode(node) {
    if (node.id === this.centralNode.id) {
      this.centerHighlighted = true;
    }
    this.highlightedNodeId = node.id;
    this.nodeSelection.each((d) => {
      if (d.id !== this.centralNode.id) {
        d.highlighted = d.id === node.id || this.validatedLinks.some((link) => link.source.id === node.id && link.target.id === d.id || link.target.id === node.id && link.source.id === d.id);
      }
    });
    this.updateNodeAppearance();
    this.updateLinkAppearance(node);
    this.updateLabelAppearance(node);
    this.updateLinkLabelAppearance(node);
  }
  updateHighlight(d, node) {
    if (d.id !== this.centralNode.id) {
      d.highlighted = d.id === node.id || this.validatedLinks.some((link) => link.source.id === node.id && link.target.id === d.id || link.target.id === node.id && link.source.id === d.id);
    }
  }
  updateLinkAppearance(node) {
    this.linkSelection.transition().duration(500).attr("opacity", (d) => d.source.id === node.id || d.target.id === node.id ? 1 : 0.1);
  }
  updateLabelAppearance(node) {
    this.labelSelection.transition().duration(500).attr("opacity", (d) => this.getLabelOpacity(d, node)).text((d) => d.id === this.highlightedNodeId ? this.formatLabel(d.name, false) : this.formatLabel(d.name, true));
  }
  getLabelOpacity(d, node) {
    if (!node) {
      return 1;
    }
    return d.id === node.id || this.validatedLinks.some((link) => link.source.id === node.id && link.target.id === d.id) || d.id == this.centralNode.id ? 1 : 0.1;
  }
  updateLinkLabelAppearance(node) {
    this.linkLabelSelection.transition().duration(500).attr("opacity", (d) => {
      return d.source.id === node.id || d.target.id === node.id ? 1 : 0;
    });
  }
  unhighlightNode(node) {
    this.highlightedNodeId = "-1";
    this.nodeSelection.each((d) => {
      if (d.id !== this.centralNode.id)
        d.highlighted = false;
    });
    this.updateNodeAppearance();
    this.resetLinkAppearance();
    this.resetLabelAppearance();
    this.resetLinkLabelAppearance();
    this.updateLabelAppearance(null);
  }
  resetLinkAppearance() {
    this.linkSelection.transition().duration(500).attr("opacity", 1);
  }
  resetLabelAppearance() {
    this.labelSelection.transition().duration(500).attr("opacity", 1).text((d) => this.formatLabel(d.name, true));
  }
  resetLinkLabelAppearance() {
    this.linkLabelSelection.transition().duration(500).attr("opacity", 0);
  }
  formatLabel(path, truncate = true) {
    let label = this.extractLabel(path);
    return truncate ? this.truncateLabel(label) : label;
  }
  extractLabel(path) {
    let label = path;
    if (path && path.includes("#")) {
      const parts = path.split("#");
      let lastPart = parts[parts.length - 1];
      if (lastPart === "" || /^\{\d+\}$/.test(lastPart)) {
        lastPart = parts[parts.length - 2] + "#" + lastPart;
      }
      if (lastPart.includes("/")) {
        lastPart = lastPart.split("/").pop() || lastPart;
      }
      label = lastPart;
    } else if (path) {
      label = path.split("/").pop() || label;
    } else {
      return "";
    }
    label = label.replace(/[\[\]]/g, "").replace(/\.[^/#]+#(?=\{\d+\}$)/, "").replace(/\.[^/.]+$/, "");
    return label;
  }
  truncateLabel(label) {
    return label.length > this.maxLabelCharacters ? label.slice(0, this.maxLabelCharacters) + "..." : label;
  }
  get env() {
    var _a, _b;
    return (_b = (_a = window.SmartSearch) == null ? void 0 : _a.main) == null ? void 0 : _b.env;
  }
  get smartNotes() {
    var _a, _b, _c, _d;
    return (_d = (_c = (_b = (_a = window.SmartSearch) == null ? void 0 : _a.main) == null ? void 0 : _b.env) == null ? void 0 : _c.smart_sources) == null ? void 0 : _d.items;
  }
  async onOpen() {
    this.contentEl.createEl("h2", { text: "Smart Visualizer" });
    this.contentEl.createEl("p", { text: "Waiting for Smart Connections to load..." });
    console.log(this.app);
    setTimeout(() => {
      this.render();
    }, 500);
  }
  async render() {
    var _a;
    while (!((_a = this.env) == null ? void 0 : _a.entities_loaded)) {
      await new Promise((resolve) => setTimeout(resolve, 2e3));
    }
    this.contentEl.empty();
    this.initializeVariables();
    if (Object.keys(this.smartNotes).length === 0) {
      return;
    }
    this.setupSettingsMenu();
    this.setupSVG();
    this.addEventListeners();
    this.watchForNoteChanges();
    const currentNodeChange = this.app.workspace.getActiveFile();
    if (currentNodeChange && !this.currentNoteChanging) {
      this.currentNoteKey = currentNodeChange.path;
      this.currentNoteChanging = true;
      this.render();
      return;
    }
    await this.updateVisualization();
  }
  async waitForSmartNotes() {
    var _a;
    const maxRetries = 10;
    const delay = 2e3;
    for (let attempt = 0; attempt < maxRetries; attempt++) {
      console.log(this.env);
      if ((_a = this.env) == null ? void 0 : _a.entities_loaded) {
        return;
      }
      await new Promise((resolve) => setTimeout(resolve, delay));
    }
    console.error("Smart notes did not load in time");
    this.contentEl.createEl("p", { text: "Failed to load Smart Connections." });
  }
  initializeVariables() {
    this.minScore = 1;
    this.maxScore = 0;
  }
  setupSVG() {
    const width = this.contentEl.clientWidth;
    const height = this.contentEl.clientHeight;
    const svg = select_default2(this.contentEl).append("svg").attr("width", "100%").attr("height", "98%").attr("viewBox", `${width / 4} ${height / 4} ${width / 2} ${height / 2}`).attr("preserveAspectRatio", "xMidYMid meet").call(zoom_default2().scaleExtent([0.1, 10]).on("zoom", (event) => {
      svgGroup.attr("transform", event.transform);
      this.updateLabelOpacity(event.transform.k);
    }));
    const svgGroup = svg.append("g");
    svgGroup.append("g").attr("class", "smart-connections-visualizer-links");
    svgGroup.append("g").attr("class", "smart-connections-visualizer-node-labels");
    svgGroup.append("g").attr("class", "smart-connections-visualizer-link-labels");
    svgGroup.append("g").attr("class", "smart-connections-visualizer-nodes");
    this.svgGroup = svgGroup;
    this.svg = svg;
  }
  getSVGDimensions() {
    const width = this.contentEl.clientWidth || this.contentEl.getBoundingClientRect().width;
    const height = this.contentEl.clientHeight || this.contentEl.getBoundingClientRect().height;
    return { width, height };
  }
  createSVG(width, height) {
    return select_default2(this.contentEl).append("svg").attr("width", "100%").attr("height", "98%").attr("viewBox", `0 0 ${width} ${height}`).attr("preserveAspectRatio", "xMidYMid meet").style("background", "#2d3039").call(zoom_default2().scaleExtent([0.1, 10]).on("zoom", this.onZoom.bind(this)));
  }
  createSVGGroup(svg) {
    return svg.append("g");
  }
  onZoom(event) {
    select_default2("g").attr("transform", event.transform);
    this.updateLabelOpacity(event.transform.k);
  }
  initializeSimulation(width, height) {
    this.simulation = simulation_default().force("center", center_default(width / 2, height / 2).strength(this.centerForce)).force("charge", manyBody_default().strength(-this.repelForce)).force("link", link_default().id((d) => d.id).distance((d) => this.linkDistanceScale(d.score)).strength(this.linkForce)).force("collide", collide_default().radius(this.nodeSize + 3).strength(0.7)).on("tick", this.simulationTickHandler.bind(this));
    this.simulation.force("labels", this.avoidLabelCollisions.bind(this));
  }
  renderLegend() {
    if (this.validatedLinks.length === 0) {
      return;
    }
    const types = ["block", "note"];
    const counts = types.map((type2) => this.nodes.filter((node) => node.group === type2 && node.id !== this.centralNode.id).length);
    let colors = { "block": DEFAULT_NETWORK_SETTINGS.blockFillColor, "note": DEFAULT_NETWORK_SETTINGS.noteFillColor, "wiki": DEFAULT_NETWORK_SETTINGS.wikiFillColor };
    for (let node of this.nodes) {
      if (colors[node.group]) {
        colors[node.group] = node.fill;
      }
    }
    const tableContainer = this.contentEl.createEl("div", { cls: "smart-connections-visualizer-legend-container" });
    const header = tableContainer.createEl("div", { cls: "smart-connections-visualizer-legend-header" });
    ["Connection Type", "Count", "Color"].forEach((headerTitle) => {
      switch (headerTitle) {
        case "Connection Type":
          header.createEl("div", { text: headerTitle, cls: "smart-connections-visualizer-variable-col" });
          break;
        case "Count":
          header.createEl("div", { text: headerTitle, cls: "smart-connections-visualizer-count-col" });
          break;
        case "Color":
          header.createEl("div", { text: headerTitle, cls: "smart-connections-visualizer-color-col" });
          break;
        default:
          header.createEl("div", { text: headerTitle, cls: "smart-connections-visualizer-variable-col" });
          break;
      }
    });
    types.forEach((type2, index2) => {
      if (counts[index2] > 0) {
        const row = tableContainer.createEl("div", { cls: "smart-connections-visualizer-legend-row" });
        row.createEl("div", { text: this.capitalizeFirstLetter(type2), cls: "smart-connections-visualizer-variable-col" });
        row.createEl("div", { text: `${counts[index2]}`, cls: "smart-connections-visualizer-count-col" });
        const colorCell = row.createEl("div", { cls: "smart-connections-visualizer-color-col" });
        const colorPicker = colorCell.createEl("input", { type: "color", value: colors[type2], cls: "smart-connections-visualizer-legend-color-picker" });
        colorPicker.addEventListener("change", (e) => this.updateNodeColors(type2, e.target.value));
      }
    });
  }
  capitalizeFirstLetter(str) {
    if (!str)
      return str;
    console.log("string: ", str);
    return str.charAt(0).toUpperCase() + str.slice(1);
  }
  updateNodeColors(type2, color2) {
    if (type2 === "note" && color2 !== this.noteFillColor) {
      this.noteFillColor = color2;
      this.plugin.settings.noteFillColor = color2;
      this.plugin.saveSettings();
    }
    if (type2 === "block" && color2 !== this.blockFillColor) {
      this.blockFillColor = color2;
      this.plugin.settings.blockFillColor = color2;
      this.plugin.saveSettings();
    }
    if (type2 === "wiki" && color2 !== this.wikiFillColor) {
      this.wikiFillColor = color2;
      this.plugin.settings.wikiFillColor = color2;
      this.plugin.saveSettings();
    }
    this.nodes.forEach((node) => {
      if (node.group === type2) {
        node.fill = color2;
      }
    });
    this.updateNodeFill();
  }
  updateNodeFill() {
    this.nodeSelection.attr("fill", (d) => d.fill);
  }
  // Ensure node labels dont collide with any elements
  avoidLabelCollisions() {
    const padding = 5;
    return (alpha) => {
      const quadtree2 = quadtree().x((d) => d.x).y((d) => d.y).addAll(this.labelSelection.data());
      this.labelSelection.each((d) => {
        const radius = d.radius + padding;
        const nx1 = d.x - radius, nx2 = d.x + radius, ny1 = d.y - radius, ny2 = d.y + radius;
        quadtree2.visit((quad, x1, y1, x22, y22) => {
          if ("data" in quad && quad.data && quad.data !== d) {
            let x3 = d.x - quad.data.x, y3 = d.y - quad.data.y, l = Math.sqrt(x3 * x3 + y3 * y3), r = radius + quad.data.radius;
            if (l < r) {
              l = (l - r) / l * alpha;
              d.x -= x3 *= l;
              d.y -= y3 *= l;
              quad.data.x += x3;
              quad.data.y += y3;
            }
          }
          return x1 > nx2 || x22 < nx1 || y1 > ny2 || y22 < ny1;
        });
      });
    };
  }
  addEventListeners() {
    this.setupSVGEventListeners();
    this.setupKeyboardEventListeners();
  }
  setupSVGEventListeners() {
    select_default2("svg").on("mousedown", this.onMouseDown.bind(this)).on("mousemove", this.onMouseMove.bind(this)).on("mouseup", this.onMouseUp.bind(this)).on("click", this.onSVGClick.bind(this));
  }
  // TODO: Add back in when ready for multiselect
  onMouseDown(event) {
  }
  onMouseMove(event) {
  }
  onMouseUp() {
  }
  onSVGClick(event) {
    if (!event.defaultPrevented && !event.ctrlKey)
      this.clearSelections();
  }
  setupKeyboardEventListeners() {
    document.addEventListener("keydown", this.onKeyDown.bind(this));
    document.addEventListener("keyup", this.onKeyUp.bind(this));
  }
  // TODO:: Add back when ready for multiselect
  onKeyDown(event) {
  }
  onKeyUp(event) {
  }
  setupSettingsMenu() {
    const existingIcon = this.contentEl.querySelector(".smart-connections-visualizer-settings-icon");
    if (existingIcon) {
      existingIcon.remove();
    }
    const existingDropdownMenu = this.contentEl.querySelector(".sc-visualizer-dropdown-menu");
    if (existingDropdownMenu) {
      existingDropdownMenu.remove();
    }
    this.createSettingsIcon();
    this.createDropdownMenu();
    this.setupAccordionHeaders();
    this.setupSettingsEventListeners();
  }
  createDropdownMenu() {
    const dropdownMenu = this.contentEl.createEl("div", { cls: "sc-visualizer-dropdown-menu" });
    this.buildDropdownMenuContent(dropdownMenu);
  }
  buildDropdownMenuContent(dropdownMenu) {
    const menuHeader = dropdownMenu.createEl("div", { cls: "smart-connections-visualizer-menu-header" });
    const refreshIcon = this.createRefreshIcon();
    refreshIcon.classList.add("smart-connections-visualizer-icon");
    refreshIcon.setAttribute("id", "smart-connections-visualizer-refresh-icon");
    menuHeader.appendChild(refreshIcon);
    const xIcon = this.createNewXIcon();
    xIcon.classList.add("smart-connections-visualizer-icon");
    xIcon.setAttribute("id", "smart-connections-visualizer-close-icon");
    menuHeader.appendChild(xIcon);
    this.addAccordionItem(dropdownMenu, "Filters", this.getFiltersContent.bind(this));
    this.addAccordionItem(dropdownMenu, "Display", this.getDisplayContent.bind(this));
    this.addAccordionItem(dropdownMenu, "Forces", this.getForcesContent.bind(this));
  }
  addAccordionItem(parent, title, buildContent) {
    const accordionItem = parent.createEl("div", { cls: "smart-connections-visualizer-accordion-item" });
    const header = accordionItem.createEl("div", { cls: "smart-connections-visualizer-accordion-header" });
    const arrowIcon = header.createEl("span", { cls: "smart-connections-visualizer-arrow-icon" });
    arrowIcon.appendChild(this.createRightArrow());
    header.createEl("span", { text: title });
    const accordionContent = accordionItem.createEl("div", { cls: "smart-connections-visualizer-accordion-content" });
    buildContent(accordionContent);
  }
  getFiltersContent(parent) {
    const sliderContainerLang = parent.createEl("div", { cls: "smart-connections-visualizer-slider-container" });
    sliderContainerLang.createEl("h2", { text: "Language Settings" });
    new import_obsidian2.Setting(sliderContainerLang).setName("Select Language").setDesc("Choose your preferred language").addDropdown((dropDown) => {
      dropDown.addOption("en", "English");
      dropDown.addOption("pt", "Portuguese");
      dropDown.setValue(this.plugin.settings.language);
      dropDown.onChange(async (value) => {
        this.plugin.settings.language = value;
        apiClient.setLang(value);
        this.updateVisualization();
        await this.plugin.saveSettings();
      });
    });
    const sliderContainer1 = parent.createEl("div", { cls: "smart-connections-visualizer-slider-container" });
    sliderContainer1.createEl("label", {
      text: `Min relevance: ${(this.relevanceScoreThreshold * 100).toFixed(0)}%`,
      attr: { id: "smart-connections-visualizer-scoreThresholdLabel", for: "smart-connections-visualizer-scoreThreshold" }
    });
    const relevanceSlider = sliderContainer1.createEl("input", {
      attr: {
        type: "range",
        id: "smart-connections-visualizer-scoreThreshold",
        class: "smart-connections-visualizer-slider",
        name: "scoreThreshold",
        min: "0",
        max: "0.99",
        step: "0.01"
      }
    });
    relevanceSlider.value = this.relevanceScoreThreshold.toString();
    parent.createEl("label", { text: "Connection type:", cls: "smart-connections-visualizer-settings-item-content-label" });
    const radioContainer = parent.createEl("div", { cls: "smart-connections-visualizer-radio-container" });
    const radioBlockLabel = radioContainer.createEl("label");
    const blockRadio = radioBlockLabel.createEl("input", {
      attr: {
        type: "radio",
        name: "connectionType",
        value: "block"
      }
    });
    blockRadio.checked = this.connectionType === "block";
    radioBlockLabel.appendText(" Block");
    const radioNoteLabel = radioContainer.createEl("label");
    const noteRadio = radioNoteLabel.createEl("input", {
      attr: {
        type: "radio",
        name: "connectionType",
        value: "note"
      }
    });
    noteRadio.checked = this.connectionType === "note";
    radioNoteLabel.appendText(" Note");
    const radioBothLabel = radioContainer.createEl("label");
    const bothRadio = radioBothLabel.createEl("input", {
      attr: {
        type: "radio",
        name: "connectionType",
        value: "both"
      }
    });
    bothRadio.checked = this.connectionType === "both";
    radioBothLabel.appendText(" Both");
  }
  getDisplayContent(parent) {
    const displaySettings = [
      { id: "smart-connections-visualizer-nodeSize", label: "Node size", value: this.nodeSize, min: 1, max: 15, step: 0.01 },
      { id: "smart-connections-visualizer-maxLabelCharacters", label: "Max label characters", value: this.maxLabelCharacters, min: 1, max: 50, step: 1 },
      { id: "smart-connections-visualizer-linkLabelSize", label: "Link label size", value: this.linkLabelSize, min: 1, max: 15, step: 0.01 },
      { id: "smart-connections-visualizer-nodeLabelSize", label: "Node label size", value: this.nodeLabelSize, min: 1, max: 26, step: 1 },
      { id: "smart-connections-visualizer-minLinkThickness", label: "Min link thickness", value: this.minLinkThickness, min: 0.1, max: 10, step: 0.01 },
      { id: "smart-connections-visualizer-maxLinkThickness", label: "Max link thickness", value: this.maxLinkThickness, min: 0.1, max: 10, step: 0.01 },
      { id: "smart-connections-visualizer-fadeThreshold", label: "Text fade threshold", value: this.textFadeThreshold, min: 0.1, max: 10, step: 0.01 }
    ];
    displaySettings.forEach((setting) => {
      const sliderContainer = parent.createEl("div", { cls: "smart-connections-visualizer-slider-container" });
      sliderContainer.createEl("label", { text: `${setting.label}: ${setting.value}`, attr: { id: `${setting.id}Label`, for: setting.id } });
      sliderContainer.createEl("input", { attr: { type: "range", id: setting.id, class: "smart-connections-visualizer-slider", name: setting.id, min: `${setting.min}`, max: `${setting.max}`, value: `${setting.value}`, step: `${setting.step}` } });
    });
  }
  getForcesContent(parent) {
    const forcesSettings = [
      { id: "smart-connections-visualizer-repelForce", label: "Repel force", value: this.repelForce, min: 0, max: 1500, step: 1 },
      { id: "smart-connections-visualizer-linkForce", label: "Link force", value: this.linkForce, min: 0, max: 1, step: 0.01 },
      { id: "smart-connections-visualizer-linkDistance", label: "Link distance", value: this.linkDistance, min: 10, max: 200, step: 1 }
    ];
    forcesSettings.forEach((setting) => {
      const sliderContainer = parent.createEl("div", { cls: "smart-connections-visualizer-slider-container" });
      sliderContainer.createEl("label", { text: `${setting.label}: ${setting.value}`, attr: { id: `${setting.id}Label`, for: setting.id } });
      sliderContainer.createEl("input", { attr: { type: "range", id: setting.id, class: "smart-connections-visualizer-slider", name: setting.id, min: `${setting.min}`, max: `${setting.max}`, value: `${setting.value}`, step: `${setting.step}` } });
    });
  }
  toggleDropdownMenu() {
    const dropdownMenu = document.querySelector(".sc-visualizer-dropdown-menu");
    if (dropdownMenu) {
      dropdownMenu.classList.toggle("visible");
    } else {
      console.error("Dropdown menu element not found");
    }
  }
  setupAccordionHeaders() {
    const accordionHeaders = document.querySelectorAll(".smart-connections-visualizer-accordion-header");
    accordionHeaders.forEach((header) => header.addEventListener("click", this.toggleAccordionContent.bind(this)));
  }
  toggleAccordionContent(event) {
    const content2 = event.currentTarget.nextElementSibling;
    const arrowIcon = event.currentTarget.querySelector(".smart-connections-visualizer-arrow-icon");
    if (content2 && arrowIcon) {
      content2.classList.toggle("show");
      arrowIcon.innerHTML = "";
      arrowIcon.appendChild(content2.classList.contains("show") ? this.createDropdownArrow() : this.createRightArrow());
    }
  }
  createDropdownArrow() {
    const svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
    svg.setAttribute("class", "smart-connections-visualizer-dropdown-indicator");
    svg.setAttribute("viewBox", "0 0 16 16");
    svg.setAttribute("fill", "currentColor");
    const path = document.createElementNS("http://www.w3.org/2000/svg", "path");
    path.setAttribute("fill-rule", "evenodd");
    path.setAttribute("d", "M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z");
    svg.appendChild(path);
    return svg;
  }
  createRightArrow() {
    const svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
    svg.setAttribute("class", "smart-connections-visualizer-dropdown-indicator");
    svg.setAttribute("viewBox", "0 0 16 16");
    svg.setAttribute("fill", "currentColor");
    const path = document.createElementNS("http://www.w3.org/2000/svg", "path");
    path.setAttribute("fill-rule", "evenodd");
    path.setAttribute("d", "M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708z");
    svg.appendChild(path);
    return svg;
  }
  createSettingsIcon() {
    const settingsIcon = this.contentEl.createEl("div", {
      cls: ["smart-connections-visualizer-settings-icon"],
      attr: { "aria-label": "Open graph settings" }
    });
    const svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
    svg.setAttribute("width", "24");
    svg.setAttribute("height", "24");
    svg.setAttribute("viewBox", "0 0 24 24");
    svg.setAttribute("fill", "none");
    svg.setAttribute("stroke", "currentColor");
    svg.setAttribute("stroke-width", "2");
    svg.setAttribute("stroke-linecap", "round");
    svg.setAttribute("stroke-linejoin", "round");
    svg.setAttribute("class", "smart-connections-visualizer-svg-icon smart-connections-visualizer-lucide-settings");
    const path = document.createElementNS("http://www.w3.org/2000/svg", "path");
    path.setAttribute("d", "M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 1 1.72v.51a2 2 0 0 1-1 1.74l-.15.09a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.39a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1-1-1.74v-.5a2 2 0 0 1 1-1.74l.15-.09a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z");
    svg.appendChild(path);
    const circle = document.createElementNS("http://www.w3.org/2000/svg", "circle");
    circle.setAttribute("cx", "12");
    circle.setAttribute("cy", "12");
    circle.setAttribute("r", "3");
    svg.appendChild(circle);
    settingsIcon.appendChild(svg);
    settingsIcon.addEventListener("click", this.toggleDropdownMenu);
  }
  createRefreshIcon() {
    const refreshIcon = this.contentEl.createEl("div", { cls: "smart-connections-visualizer-refresh-icon" });
    const svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
    svg.setAttribute("width", "24");
    svg.setAttribute("height", "24");
    svg.setAttribute("viewBox", "0 0 24 24");
    svg.setAttribute("fill", "none");
    svg.setAttribute("stroke", "currentColor");
    svg.setAttribute("stroke-width", "2");
    svg.setAttribute("stroke-linecap", "round");
    svg.setAttribute("stroke-linejoin", "round");
    svg.setAttribute("class", "smart-connections-visualizer-svg-icon smart-connections-visualizer-lucide-rotate-ccw");
    const path1 = document.createElementNS("http://www.w3.org/2000/svg", "path");
    path1.setAttribute("d", "M3 12a9 9 0 1 0 9-9 9.75 9.75 0 0 0-6.74 2.74L3 8");
    svg.appendChild(path1);
    const path2 = document.createElementNS("http://www.w3.org/2000/svg", "path");
    path2.setAttribute("d", "M3 3v5h5");
    svg.appendChild(path2);
    refreshIcon.appendChild(svg);
    return refreshIcon;
  }
  createNewXIcon() {
    const xIcon = this.contentEl.createEl("div", { cls: "smart-connections-visualizer-x-icon" });
    const svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
    svg.setAttribute("width", "24");
    svg.setAttribute("height", "24");
    svg.setAttribute("viewBox", "0 0 24 24");
    svg.setAttribute("fill", "none");
    svg.setAttribute("stroke", "currentColor");
    svg.setAttribute("stroke-width", "2");
    svg.setAttribute("stroke-linecap", "round");
    svg.setAttribute("stroke-linejoin", "round");
    svg.setAttribute("class", "smart-connections-visualizer-svg-icon smart-connections-visualizer-lucide-x");
    const path1 = document.createElementNS("http://www.w3.org/2000/svg", "path");
    path1.setAttribute("d", "M18 6 6 18");
    svg.appendChild(path1);
    const path2 = document.createElementNS("http://www.w3.org/2000/svg", "path");
    path2.setAttribute("d", "m6 6 12 12");
    svg.appendChild(path2);
    xIcon.appendChild(svg);
    return xIcon;
  }
  setupSettingsEventListeners() {
    this.setupScoreThresholdSlider();
    this.setupNodeSizeSlider();
    this.setupLineThicknessSlider();
    this.setupCenterForceSlider();
    this.setupRepelForceSlider();
    this.setupLinkForceSlider();
    this.setupLinkDistanceSlider();
    this.setupFadeThresholdSlider();
    this.setupMinLinkThicknessSlider();
    this.setupMaxLinkThicknessSlider();
    this.setupConnectionTypeRadios();
    this.setupMaxLabelCharactersSlider();
    this.setupLinkLabelSizeSlider();
    this.setupNodeLabelSizeSlider();
    this.setupCloseIcon();
    this.setupRefreshIcon();
  }
  setupScoreThresholdSlider() {
    const scoreThresholdSlider = document.getElementById("smart-connections-visualizer-scoreThreshold");
    if (scoreThresholdSlider) {
      scoreThresholdSlider.addEventListener("input", (event) => this.updateScoreThreshold(event));
      const debouncedUpdate = (0, import_obsidian2.debounce)(async (event) => {
        await this.updateVisualization(parseFloat(event.target.value));
      }, 500, true);
      scoreThresholdSlider.addEventListener("input", debouncedUpdate);
    }
  }
  updateScoreThreshold(event) {
    const newScoreThreshold = parseFloat(event.target.value);
    const label = document.getElementById("smart-connections-visualizer-scoreThresholdLabel");
    this.plugin.settings.relevanceScoreThreshold = newScoreThreshold;
    this.plugin.saveSettings();
    if (label)
      label.textContent = `Min relevance: ${(newScoreThreshold * 100).toFixed(0)}%`;
  }
  setupNodeSizeSlider() {
    const nodeSizeSlider = document.getElementById("smart-connections-visualizer-nodeSize");
    if (nodeSizeSlider) {
      nodeSizeSlider.addEventListener("input", (event) => this.updateNodeSize(event));
    }
  }
  updateNodeSize(event) {
    const newNodeSize = parseFloat(event.target.value);
    const label = document.getElementById("smart-connections-visualizer-nodeSizeLabel");
    if (label)
      label.textContent = `Node size: ${newNodeSize}`;
    this.plugin.settings.nodeSize = newNodeSize;
    this.plugin.saveSettings();
    this.nodeSize = newNodeSize;
    this.updateNodeSizes();
  }
  setupLineThicknessSlider() {
    const lineThicknessSlider = document.getElementById("smart-connections-visualizer-lineThickness");
    if (lineThicknessSlider) {
      lineThicknessSlider.addEventListener("input", (event) => this.updateLineThickness(event));
    }
  }
  updateLineThickness(event) {
    const newLineThickness = parseFloat(event.target.value);
    const label = document.getElementById("lineThicknessLabel");
    if (label)
      label.textContent = `Line thickness: ${newLineThickness}`;
    this.plugin.settings.linkThickness = newLineThickness;
    this.plugin.saveSettings();
    this.linkThickness = newLineThickness;
    this.updateLinkThickness();
  }
  setupCenterForceSlider() {
    const centerForceSlider = document.getElementById("smart-connections-visualizer-centerForce");
    if (centerForceSlider) {
      centerForceSlider.addEventListener("input", (event) => this.updateCenterForce(event));
    }
  }
  updateCenterForce(event) {
    const newCenterForce = parseFloat(event.target.value);
    const label = document.getElementById("centerForceLabel");
    if (label)
      label.textContent = `Center force: ${newCenterForce}`;
    this.plugin.settings.centerForce = newCenterForce;
    this.plugin.saveSettings();
    this.centerForce = newCenterForce;
    this.updateSimulationForces();
  }
  setupRepelForceSlider() {
    const repelForceSlider = document.getElementById("smart-connections-visualizer-repelForce");
    if (repelForceSlider) {
      repelForceSlider.addEventListener("input", (event) => this.updateRepelForce(event));
    }
  }
  updateRepelForce(event) {
    const newRepelForce = parseFloat(event.target.value);
    const label = document.getElementById("smart-connections-visualizer-repelForceLabel");
    if (label)
      label.textContent = `Repel force: ${newRepelForce}`;
    this.repelForce = newRepelForce;
    this.plugin.settings.repelForce = newRepelForce;
    this.plugin.saveSettings();
    this.updateSimulationForces();
  }
  setupLinkForceSlider() {
    const linkForceSlider = document.getElementById("smart-connections-visualizer-linkForce");
    if (linkForceSlider) {
      linkForceSlider.addEventListener("input", (event) => this.updateLinkForce(event));
    }
  }
  updateLinkForce(event) {
    const newLinkForce = parseFloat(event.target.value);
    const label = document.getElementById("smart-connections-visualizer-linkForceLabel");
    if (label)
      label.textContent = `Link force: ${newLinkForce}`;
    this.linkForce = newLinkForce;
    this.plugin.settings.linkForce = newLinkForce;
    this.plugin.saveSettings();
    this.updateSimulationForces();
  }
  setupLinkDistanceSlider() {
    const linkDistanceSlider = document.getElementById("smart-connections-visualizer-linkDistance");
    if (linkDistanceSlider) {
      linkDistanceSlider.addEventListener("input", (event) => this.updateLinkDistance(event));
    }
  }
  updateLinkDistance(event) {
    const newLinkDistance = parseFloat(event.target.value);
    const label = document.getElementById("smart-connections-visualizer-linkDistanceLabel");
    if (label)
      label.textContent = `Link distance: ${newLinkDistance}`;
    this.linkDistance = newLinkDistance;
    this.plugin.settings.linkDistance = newLinkDistance;
    this.plugin.saveSettings();
    this.updateSimulationForces();
  }
  setupFadeThresholdSlider() {
    const fadeThresholdSlider = document.getElementById("smart-connections-visualizer-fadeThreshold");
    if (fadeThresholdSlider) {
      fadeThresholdSlider.addEventListener("input", (event) => {
        this.updateFadeThreshold(event);
        this.updateLabelOpacity(transform(select_default2("svg").node()).k);
      });
    }
  }
  updateFadeThreshold(event) {
    const newFadeThreshold = parseFloat(event.target.value);
    const label = document.getElementById("smart-connections-visualizer-fadeThresholdLabel");
    if (label)
      label.textContent = `Text fade threshold: ${newFadeThreshold}`;
    this.textFadeThreshold = newFadeThreshold;
    this.plugin.settings.textFadeThreshold = newFadeThreshold;
    this.plugin.saveSettings();
  }
  setupMinLinkThicknessSlider() {
    const minLinkThicknessSlider = document.getElementById("smart-connections-visualizer-minLinkThickness");
    if (minLinkThicknessSlider) {
      minLinkThicknessSlider.addEventListener("input", (event) => this.updateMinLinkThickness(event));
    }
  }
  updateMinLinkThickness(event) {
    const newMinLinkThickness = parseFloat(event.target.value);
    const label = document.getElementById("smart-connections-visualizer-minLinkThicknessLabel");
    if (label)
      label.textContent = `Min link thickness: ${newMinLinkThickness}`;
    this.minLinkThickness = newMinLinkThickness;
    this.plugin.settings.minLinkThickness = newMinLinkThickness;
    this.plugin.saveSettings();
    this.updateLinkThickness();
  }
  setupMaxLinkThicknessSlider() {
    const maxLinkThicknessSlider = document.getElementById("smart-connections-visualizer-maxLinkThickness");
    if (maxLinkThicknessSlider) {
      maxLinkThicknessSlider.addEventListener("input", (event) => this.updateMaxLinkThickness(event));
    }
  }
  updateMaxLinkThickness(event) {
    const newMaxLinkThickness = parseFloat(event.target.value);
    const label = document.getElementById("smart-connections-visualizer-maxLinkThicknessLabel");
    if (label)
      label.textContent = `Max link thickness: ${newMaxLinkThickness}`;
    this.maxLinkThickness = newMaxLinkThickness;
    this.plugin.settings.maxLinkThickness = newMaxLinkThickness;
    this.plugin.saveSettings();
    this.updateLinkThickness();
  }
  setupConnectionTypeRadios() {
    const connectionTypeRadios = document.querySelectorAll('input[name="connectionType"]');
    connectionTypeRadios.forEach((radio) => radio.addEventListener("change", (event) => this.updateConnectionType(event)));
  }
  async updateConnectionType(event) {
    this.connectionType = event.target.value;
    this.isChangingConnectionType = true;
    this.plugin.settings.connectionType = this.connectionType;
    this.plugin.saveSettings();
    await this.updateVisualization();
  }
  setupMaxLabelCharactersSlider() {
    const maxLabelCharactersSlider = document.getElementById("smart-connections-visualizer-maxLabelCharacters");
    if (maxLabelCharactersSlider) {
      maxLabelCharactersSlider.addEventListener("input", (event) => this.updateMaxLabelCharacters(event));
    }
  }
  updateMaxLabelCharacters(event) {
    const newMaxLabelCharacters = parseInt(event.target.value, 10);
    const label = document.getElementById("smart-connections-visualizer-maxLabelCharactersLabel");
    if (label)
      label.textContent = `Max Label Characters: ${newMaxLabelCharacters}`;
    this.maxLabelCharacters = newMaxLabelCharacters;
    this.updateNodeLabels();
  }
  setupLinkLabelSizeSlider() {
    const linkLabelSizeSlider = document.getElementById("smart-connections-visualizer-linkLabelSize");
    if (linkLabelSizeSlider) {
      linkLabelSizeSlider.addEventListener("input", (event) => this.updateLinkLabelSize(event));
    }
  }
  updateLinkLabelSize(event) {
    const newLinkLabelSize = parseFloat(event.target.value);
    const label = document.getElementById("smart-connections-visualizer-linkLabelSizeLabel");
    if (label)
      label.textContent = `Link Label Size: ${newLinkLabelSize}`;
    this.linkLabelSize = newLinkLabelSize;
    this.updateLinkLabelSizes();
  }
  setupNodeLabelSizeSlider() {
    const nodeLabelSizeSlider = document.getElementById("smart-connections-visualizer-nodeLabelSize");
    if (nodeLabelSizeSlider) {
      nodeLabelSizeSlider.addEventListener("input", (event) => this.updateNodeLabelSize(event));
    }
  }
  updateNodeLabelSize(event) {
    console.log("flounddd");
    const newNodeLabelSize = parseFloat(event.target.value);
    const label = document.getElementById("smart-connections-visualizer-nodeLabelSizeLabel");
    if (label)
      label.textContent = `Node Label Size: ${newNodeLabelSize}`;
    this.nodeLabelSize = newNodeLabelSize;
    this.updateNodeLabelSizes();
  }
  // Updated setupCloseIcon method
  setupCloseIcon() {
    const closeIcon = document.getElementById("smart-connections-visualizer-close-icon");
    if (closeIcon)
      closeIcon.addEventListener("click", () => this.toggleDropdownMenu());
  }
  closeDropdownMenu() {
    const dropdownMenu = document.querySelector(".sc-visualizer-dropdown-menu");
    if (dropdownMenu)
      dropdownMenu.classList.remove("open");
  }
  setupRefreshIcon() {
    const refreshIcon = document.getElementById("smart-connections-visualizer-refresh-icon");
    if (refreshIcon)
      refreshIcon.addEventListener("click", async () => await this.resetToDefault());
  }
  async resetToDefault() {
    this.relevanceScoreThreshold = DEFAULT_NETWORK_SETTINGS.relevanceScoreThreshold;
    this.nodeSize = DEFAULT_NETWORK_SETTINGS.nodeSize;
    this.linkThickness = DEFAULT_NETWORK_SETTINGS.lineThickness;
    this.repelForce = DEFAULT_NETWORK_SETTINGS.repelForce;
    this.linkForce = DEFAULT_NETWORK_SETTINGS.linkForce;
    this.linkDistance = DEFAULT_NETWORK_SETTINGS.linkDistance;
    this.centerForce = DEFAULT_NETWORK_SETTINGS.centerForce;
    this.textFadeThreshold = DEFAULT_NETWORK_SETTINGS.textFadeThreshold;
    this.minLinkThickness = DEFAULT_NETWORK_SETTINGS.minLinkThickness;
    this.maxLinkThickness = DEFAULT_NETWORK_SETTINGS.maxLinkThickness;
    this.maxLabelCharacters = DEFAULT_NETWORK_SETTINGS.maxLabelCharacters;
    this.linkLabelSize = DEFAULT_NETWORK_SETTINGS.linkLabelSize;
    this.nodeLabelSize = DEFAULT_NETWORK_SETTINGS.nodeLabelSize;
    this.connectionType = DEFAULT_NETWORK_SETTINGS.connectionType;
    this.noteFillColor = DEFAULT_NETWORK_SETTINGS.noteFillColor;
    this.blockFillColor = DEFAULT_NETWORK_SETTINGS.blockFillColor;
    this.wikiFillColor = DEFAULT_NETWORK_SETTINGS.wikiFillColor;
    this.language = DEFAULT_NETWORK_SETTINGS.language;
    this.plugin.settings.relevanceScoreThreshold = DEFAULT_NETWORK_SETTINGS.relevanceScoreThreshold;
    this.plugin.settings.nodeSize = DEFAULT_NETWORK_SETTINGS.nodeSize;
    this.plugin.settings.linkThickness = DEFAULT_NETWORK_SETTINGS.lineThickness;
    this.plugin.settings.repelForce = DEFAULT_NETWORK_SETTINGS.repelForce;
    this.plugin.settings.linkForce = DEFAULT_NETWORK_SETTINGS.linkForce;
    this.plugin.settings.linkDistance = DEFAULT_NETWORK_SETTINGS.linkDistance;
    this.plugin.settings.centerForce = DEFAULT_NETWORK_SETTINGS.centerForce;
    this.plugin.settings.textFadeThreshold = DEFAULT_NETWORK_SETTINGS.textFadeThreshold;
    this.plugin.settings.minLinkThickness = DEFAULT_NETWORK_SETTINGS.minLinkThickness;
    this.plugin.settings.maxLinkThickness = DEFAULT_NETWORK_SETTINGS.maxLinkThickness;
    this.plugin.settings.maxLabelCharacters = DEFAULT_NETWORK_SETTINGS.maxLabelCharacters;
    this.plugin.settings.linkLabelSize = DEFAULT_NETWORK_SETTINGS.linkLabelSize;
    this.plugin.settings.nodeLabelSize = DEFAULT_NETWORK_SETTINGS.nodeLabelSize;
    this.plugin.settings.connectionType = DEFAULT_NETWORK_SETTINGS.connectionType;
    this.plugin.settings.noteFillColor = DEFAULT_NETWORK_SETTINGS.noteFillColor;
    this.plugin.settings.blockFillColor = DEFAULT_NETWORK_SETTINGS.blockFillColor;
    this.plugin.settings.wikiFillColor = DEFAULT_NETWORK_SETTINGS.wikiFillColor;
    this.plugin.saveSettings();
    this.updateLabelsToDefaults();
    this.updateSliders();
    this.updateNodeSizes();
    this.updateLinkThickness();
    this.updateSimulationForces();
    await this.updateVisualization(this.relevanceScoreThreshold);
  }
  updateLabelsToDefaults() {
    const labels = {
      "smart-connections-visualizer-scoreThresholdLabel": `Min relevance: ${(this.relevanceScoreThreshold * 100).toFixed(0)}%`,
      "smart-connections-visualizer-nodeSizeLabel": `Node size: ${this.nodeSize}`,
      "smart-connections-visualizer-maxLabelCharactersLabel": `Max label characters: ${this.maxLabelCharacters}`,
      "smart-connections-visualizer-linkLabelSizeLabel": `Link label size: ${this.linkLabelSize}`,
      "smart-connections-visualizer-smart-connections-visualizer-nodeLabelSizeLabel": `Node label size: ${this.nodeLabelSize}`,
      "smart-connections-visualizer-minLinkThicknessLabel": `Min link thickness: ${this.minLinkThickness}`,
      "smart-connections-visualizer-maxLinkThicknessLabel": `Max link thickness: ${this.maxLinkThickness}`,
      "smart-connections-visualizer-fadeThresholdLabel": `Text fade threshold: ${this.textFadeThreshold}`,
      "smart-connections-visualizer-repelForceLabel": `Repel force: ${this.repelForce}`,
      "smart-connections-visualizer-linkForceLabel": `Link force: ${this.linkForce}`,
      "smart-connections-visualizer-linkDistanceLabel": `Link distance: ${this.linkDistance}`
    };
    for (const [id2, text] of Object.entries(labels)) {
      const label = document.getElementById(id2);
      if (label) {
        label.textContent = text;
      }
    }
  }
  updateSliders() {
    const scoreThresholdSlider = document.getElementById("smart-connections-visualizer-scoreThreshold");
    const nodeSizeSlider = document.getElementById("smart-connections-visualizer-nodeSize");
    const repelForceSlider = document.getElementById("smart-connections-visualizer-repelForce");
    const linkForceSlider = document.getElementById("smart-connections-visualizer-linkForce");
    const linkDistanceSlider = document.getElementById("smart-connections-visualizer-linkDistance");
    const fadeThresholdSlider = document.getElementById("smart-connections-visualizer-fadeThreshold");
    const minLinkThicknessSlider = document.getElementById("smart-connections-visualizer-minLinkThickness");
    const maxLinkThicknessSlider = document.getElementById("smart-connections-visualizer-maxLinkThickness");
    const maxLabelCharactersSlider = document.getElementById("smart-connections-visualizer-maxLabelCharacters");
    const linkLabelSizeSlider = document.getElementById("smart-connections-visualizer-linkLabelSize");
    const nodeLabelSizeSlider = document.getElementById("smart-connections-visualizer-nodeLabelSize");
    scoreThresholdSlider.value = `${this.relevanceScoreThreshold}`;
    nodeSizeSlider.value = `${this.nodeSize}`;
    repelForceSlider.value = `${this.repelForce}`;
    linkForceSlider.value = `${this.linkForce}`;
    linkDistanceSlider.value = `${this.linkDistance}`;
    fadeThresholdSlider.value = `${this.textFadeThreshold}`;
    minLinkThicknessSlider.value = `${this.minLinkThickness}`;
    maxLinkThicknessSlider.value = `${this.maxLinkThickness}`;
    maxLabelCharactersSlider.value = `${this.maxLabelCharacters}`;
    linkLabelSizeSlider.value = `${this.linkLabelSize}`;
    nodeLabelSizeSlider.value = `${this.nodeLabelSize}`;
  }
  watchForNoteChanges() {
    this.app.workspace.on("file-open", (file) => {
      if (file && this.currentNoteKey !== file.path && !this.isHovering && this.containerEl.children[1].checkVisibility()) {
        this.currentNoteKey = file.path;
        this.currentNoteChanging = true;
        this.render();
      }
    });
  }
  async updateVisualization(newScoreThreshold, nodeName) {
    var _a;
    if (this.updatingVisualization && !this.isChangingConnectionType) {
      this.updatingVisualization = false;
      this.currentNoteChanging = false;
      return;
    }
    this.isChangingConnectionType = false;
    if (newScoreThreshold !== void 0) {
      this.relevanceScoreThreshold = newScoreThreshold;
    }
    await this.updateConnections(nodeName);
    const filteredConnections = this.connections.filter((connection) => connection.score >= this.relevanceScoreThreshold);
    const visibleNodes = /* @__PURE__ */ new Set();
    filteredConnections.forEach((connection) => {
      visibleNodes.add(connection.source);
      visibleNodes.add(connection.target);
    });
    visibleNodes.add((_a = this.centralNote) == null ? void 0 : _a.key);
    const nodesData = Array.from(visibleNodes).map((id2) => {
      const node = this.nodes.find((node2) => node2.id === id2);
      return node ? node : null;
    }).filter(Boolean);
    if (!nodesData.some((node) => node.id === this.centralNote.key)) {
      const centralNode = this.nodes.find((node) => node.id === this.centralNote.key);
      if (centralNode) {
        nodesData.push(centralNode);
      }
    }
    nodesData.forEach((node) => {
      if (!node.x || !node.y) {
        console.warn(`Node with invalid position: ${node.id}`);
        node.x = Math.random() * 1e3;
        node.y = Math.random() * 1e3;
      }
    });
    this.validatedLinks = filteredConnections.filter((link) => {
      const sourceNode = nodesData.find((node) => node.id === link.source);
      const targetNode = nodesData.find((node) => node.id === link.target);
      if (!sourceNode || !targetNode) {
        console.warn(`Link source or target node not found: ${link.source}, ${link.target}`);
      }
      return sourceNode && targetNode;
    });
    if (nodesData.length === 0 || this.validatedLinks.length === 0) {
      this.updatingVisualization = false;
      console.warn("No nodes or links to display after filtering. Aborting update.");
      new import_obsidian2.Notice("No nodes or links to display after filtering. Adjust filter settings");
      this.nodeSelection = this.svgGroup.select("g.smart-connections-visualizer-nodes").selectAll("circle").data([]).exit().remove();
      this.linkSelection = this.svgGroup.select("g.smart-connections-visualizer-links").selectAll("line").data([]).exit().remove();
      this.linkLabelSelection = this.svgGroup.select("g.smart-connections-visualizer-link-labels").selectAll("text").data([]).exit().remove();
      this.labelSelection = this.svgGroup.select("g.smart-connections-visualizer-node-labels").selectAll("text").data([]).exit().remove();
      return;
    }
    this.updateNodeAndLinkSelection(nodesData);
    if (!this.simulation || this.currentNoteChanging || this.isFiltering) {
      const { width, height } = this.getSVGDimensions();
      this.initializeSimulation(width, height);
      this.currentNoteChanging = false;
      this.isFiltering = false;
    }
    this.simulation.nodes(nodesData).on("tick", this.simulationTickHandler.bind(this));
    this.simulation.force("link").links(this.validatedLinks).distance((d) => this.linkDistanceScale(d.score));
    this.simulation.alpha(1).restart();
    setTimeout(() => {
      this.simulation.alphaTarget(0);
    }, 1e3);
    this.updatingVisualization = false;
  }
  simulationTickHandler() {
    this.nodeSelection.attr("cx", (d) => d.x).attr("cy", (d) => d.y).style("cursor", "pointer");
    this.linkSelection.attr("x1", (d) => d.source.x || 0).attr("y1", (d) => d.source.y || 0).style("cursor", "pointer").attr("x2", (d) => d.target.x || 0).attr("y2", (d) => d.target.y || 0);
    this.linkLabelSelection.attr("x", (d) => (d.source.x + d.target.x) / 2).attr("y", (d) => (d.source.y + d.target.y) / 2);
    this.labelSelection.attr("x", (d) => d.x).attr("y", (d) => d.y);
  }
  async getWikiNodes(nodeTitle) {
    var _a, _b, _c;
    const title = nodeTitle != "" ? nodeTitle : ((_c = (_b = (_a = this == null ? void 0 : this.currentNoteKey) == null ? void 0 : _a.split("/")) == null ? void 0 : _b.pop()) == null ? void 0 : _c.replace(".md", "")) || "";
    const res = await apiClient.getResponse(title.replace(".md", "")).then((content2) => content2).catch((e) => console.info(e));
    if (!res)
      return [];
    const noteConnections = res == null ? void 0 : res.map((l) => {
      var _a2, _b2;
      return {
        item: {
          url: (_b2 = (_a2 = l == null ? void 0 : l.content_urls) == null ? void 0 : _a2.desktop) == null ? void 0 : _b2.page,
          title: `${l == null ? void 0 : l.normalizedtitle}.md`,
          key: `${l == null ? void 0 : l.normalizedtitle}.md`,
          fill: this.wikiFillColor,
          id: `${l == null ? void 0 : l.normalizedtitle}.md`,
          type: "wiki"
        },
        score: 1
      };
    });
    return noteConnections;
  }
  async updateConnections(nodeName) {
    this.nodes = [];
    this.links = [];
    this.connections = [];
    this.minScore = 1;
    this.maxScore = 0;
    let currentNoteKey = nodeName || this.currentNoteKey;
    if (!currentNoteKey)
      return;
    this.centralNote = this.smartNotes[currentNoteKey] || {
      url: `https://en.wikipedia.org/wiki/${nodeName}`,
      title: nodeName,
      key: nodeName,
      id: nodeName,
      type: "wiki"
    };
    this.currentNoteKey = this.centralNote.key;
    console.log("central note: ", this.centralNote);
    let noteConnections = [];
    if (this.centralNote && this.centralNote.find_connections) {
      noteConnections = this.centralNote.find_connections().filter(
        (connection) => connection.score >= this.relevanceScoreThreshold
      );
    }
    const wikiNodes = await this.getWikiNodes(this.currentNoteKey);
    noteConnections = noteConnections.concat(wikiNodes);
    this.addCentralNode();
    this.addFilteredConnections(noteConnections);
    const isValid = this.validateGraphData(this.nodes, this.links);
    if (!isValid)
      console.error("Graph data validation failed.");
  }
  addCentralNode() {
    var _a, _b;
    if (this.centralNote.key && this.centralNote.key.trim() !== "" && !this.nodes.some((node) => node.id === this.centralNote.key)) {
      const svg = this.svg.node();
      const { width, height } = svg.getBoundingClientRect();
      this.nodes.push({
        id: this.centralNote.key,
        name: this.centralNote.key,
        group: "note",
        x: width / 2,
        y: height / 2,
        fx: null,
        fy: null,
        fill: ((_a = this == null ? void 0 : this.centralNote) == null ? void 0 : _a.type) === "wiki" ? this.wikiFillColor : this.noteFillColor,
        selected: false,
        highlighted: false,
        type: (_b = this.centralNote) == null ? void 0 : _b.type
      });
      this.centralNode = this.nodes[this.nodes.length - 1];
    } else {
      console.error(`Central node not found or already exists: ${this.centralNote.key}`);
    }
  }
  addFilteredConnections(noteConnections) {
    const filteredConnections = noteConnections.filter((connection) => {
      var _a;
      if (this.connectionType === "both") {
        return true;
      } else {
        return this.connectionType === "block" === connection.item instanceof this.env.item_types.SmartBlock || ((_a = connection == null ? void 0 : connection.item) == null ? void 0 : _a.type) === "wiki";
      }
    });
    filteredConnections.forEach((connection, index2) => {
      if (connection && connection.item && connection.item.key) {
        const connectionId = connection.item.key;
        this.addConnectionNode(connectionId, connection);
        this.addConnectionLink(connectionId, connection);
      } else {
        console.warn(`Skipping invalid connection at index ${index2}:`, connection);
      }
    });
  }
  addConnectionNode(connectionId, connection) {
    var _a, _b, _c;
    if (!this.nodes.some((node) => node.id === connectionId)) {
      this.nodes.push({
        id: connectionId,
        name: connectionId,
        group: connection.item instanceof this.env.item_types.SmartBlock ? "block" : "note",
        x: Math.random() * 1e3,
        y: Math.random() * 1e3,
        fx: null,
        fy: null,
        fill: connection.item instanceof this.env.item_types.SmartBlock ? this.blockFillColor : ((_a = connection == null ? void 0 : connection.item) == null ? void 0 : _a.type) === "wiki" ? this.wikiFillColor : this.noteFillColor,
        selected: false,
        highlighted: false,
        type: (_b = connection == null ? void 0 : connection.item) == null ? void 0 : _b.type,
        url: (_c = connection == null ? void 0 : connection.item) == null ? void 0 : _c.url
      });
    } else {
      console.log("Node already exists for connection ID:", connectionId);
    }
  }
  addConnectionLink(connectionId, connection) {
    const sourceNode = this.nodes.find((node) => node.id === this.centralNote.key);
    const targetNode = this.nodes.find((node) => node.id === connectionId);
    if (!sourceNode) {
      console.error(`Source node not found: ${this.centralNote.key}`);
      return;
    }
    if (!targetNode) {
      console.error(`Target node not found: ${connectionId}`);
      return;
    }
    this.links.push({
      source: this.centralNote.key,
      target: connectionId,
      value: connection.score || 0
    });
    this.connections.push({
      source: this.centralNote.key,
      target: connectionId,
      score: connection.score || 0
    });
    this.updateScoreRange(connection.score);
  }
  updateScoreRange(score) {
    if (score > this.maxScore)
      this.maxScore = score;
    if (score < this.minScore)
      this.minScore = score;
  }
  validateGraphData(nodes, links2) {
    const nodeIds = new Set(nodes.map((node) => node.id));
    let isValid = true;
    links2.forEach((link, index2) => {
      if (!nodeIds.has(link.source)) {
        console.error(`Link at index ${index2} has an invalid source: ${link.source}`);
        isValid = false;
      }
      if (!nodeIds.has(link.target)) {
        console.error(`Link at index ${index2} has an invalid target: ${link.target}`);
        isValid = false;
      }
    });
    nodes.forEach((node, index2) => {
      if (!node.hasOwnProperty("id") || !node.hasOwnProperty("name") || !node.hasOwnProperty("group")) {
        console.error(`Node at index ${index2} is missing required properties: ${JSON.stringify(node)}`);
        isValid = false;
      }
    });
    return isValid;
  }
  updateNodeAndLinkSelection(nodesData) {
    const svgGroup = this.svgGroup;
    this.linkSelection = svgGroup.select("g.smart-connections-visualizer-links").selectAll("line").data(this.validatedLinks, (d) => `${d.source}-${d.target}`).join(
      (enter) => this.enterLink(enter),
      (update) => this.updateLink(update),
      (exit) => exit.remove()
    );
    this.linkLabelSelection = svgGroup.select("g.smart-connections-visualizer-link-labels").selectAll("text").data(this.validatedLinks, (d) => `${d.source.id}-${d.target.id}`).join(
      (enter) => this.enterLinkLabel(enter),
      (update) => this.updateLinkLabel(update),
      (exit) => exit.remove()
    );
    this.labelSelection = svgGroup.select("g.smart-connections-visualizer-node-labels").selectAll("text").data(nodesData, (d) => d.id).join(
      (enter) => this.enterLabel(enter),
      (update) => this.updateLabel(update),
      (exit) => exit.remove()
    ).attr("x", (d) => d.x).attr("y", (d) => d.y);
    this.nodeSelection = svgGroup.select("g.smart-connections-visualizer-nodes").selectAll("circle").data(nodesData, (d) => {
      return d.id;
    }).join(
      (enter) => this.enterNode(enter),
      (update) => this.updateNode(update),
      (exit) => exit.remove()
    );
  }
  enterNode(enter) {
    const that = this;
    return enter.append("circle").attr("class", "smart-connections-visualizer-node").attr("r", (d) => d.id === this.centralNode.id ? this.nodeSize + 2 : this.nodeSize).attr("fill", (d) => d.fill).attr("stroke", (d) => d.selected ? "blanchedalmond" : "transparent").attr("stroke-width", (d) => d.selected ? 1.5 : 0.3).attr("opacity", 1).attr("cursor", "pointer").call(drag_default().on("start", this.onDragStart.bind(this)).on("drag", this.onDrag.bind(this)).on("end", this.onDragEnd.bind(this))).on("click", this.onNodeClick.bind(this)).on("mouseover", this.onNodeMouseOver.bind(this)).on("mouseout", this.onNodeMouseOut.bind(this));
  }
  updateNode(update) {
    return update.attr("r", (d) => d.id === this.centralNode.id ? this.nodeSize + 2 : this.nodeSize).attr("fill", (d) => d.selected ? "#f3ee5d" : d.fill).attr("stroke", (d) => d.selected ? "blanchedalmond" : "transparent").attr("stroke-width", (d) => d.selected ? 1.5 : 0.3);
  }
  onDragStart(event, d) {
    if (!event.active)
      this.simulation.alphaTarget(0.3).restart();
    this.dragging = true;
    d.fx = d.x;
    d.fy = d.y;
  }
  onDrag(event, d) {
    if (this.isHovering)
      this.isHovering = false;
    d.fx = event.x;
    d.fy = event.y;
  }
  onDragEnd(event, d) {
    if (!event.active)
      this.simulation.alphaTarget(0);
    d.fx = null;
    d.fy = null;
    this.dragging = false;
  }
  async openSearch(node) {
    var _a, _b;
    const newTitle = `Search: ${node == null ? void 0 : node.name}`;
    const leaf = this.app.workspace.activeLeaf;
    if (leaf && leaf.view instanceof SearchView) {
      leaf.view.frame.setAttr("src", node == null ? void 0 : node.url);
      leaf.view.url = node == null ? void 0 : node.url;
      (_b = (_a = this.app.workspace) == null ? void 0 : _a.activeLeaf) == null ? void 0 : _b.setViewState({
        type: leaf.view.getViewType(),
        active: true,
        state: { viewTitle: newTitle }
        // Pass the new title in state
      });
      this.app.workspace.setActiveLeaf(leaf);
    } else {
      const newLeaf = this.app.workspace.getLeaf(true);
      const view = new SearchView(this, newLeaf, node == null ? void 0 : node.url, node == null ? void 0 : node.name);
      await newLeaf.open(view);
      await newLeaf.setViewState({
        type: view.getViewType(),
        active: true,
        state: { viewTitle: newTitle }
        // Set initial title for the new view
      });
      this.app.workspace.setActiveLeaf(newLeaf);
    }
  }
  async onNodeClick(event, d) {
    if (d.id === this.centralNode.id)
      return;
    if ((d == null ? void 0 : d.type) === "wiki")
      await this.openSearch(d);
    else
      this.env.plugin.open_note(d.id, event);
    await this.updateVisualization(this.relevanceScoreThreshold, d == null ? void 0 : d.name);
  }
  onNodeMouseOver(event, d) {
    if (this.dragging)
      return;
    if (d.id === this.centralNode.id)
      return;
    this.isHovering = true;
    this.highlightNode(d);
    this.updateLinkLabelAppearance(d);
    this.app.workspace.trigger("hover-link", {
      event,
      source: "D3",
      hoverParent: event.currentTarget.parentElement,
      targetEl: event.currentTarget,
      linktext: d.id
    });
  }
  onNodeMouseOut(event, d) {
    if (this.dragging)
      return;
    this.isHovering = false;
    this.centerHighlighted = false;
    this.unhighlightNode(d);
    this.updateLinkLabelAppearance({ id: null });
  }
  updateLinkLabelPositions() {
    this.linkLabelSelection.attr("x", (d) => (d.source.x + d.target.x) / 2).attr("y", (d) => (d.source.y + d.target.y) / 2);
  }
  updateLinkSelection(svgGroup) {
    return svgGroup.select("g.links").selectAll("line").data(this.validatedLinks, (d) => `${d.source}-${d.target}`).style("cursor", "pointer").join(
      (enter) => this.enterLink(enter),
      (update) => this.updateLink(update),
      (exit) => exit.remove()
    );
  }
  enterLink(enter) {
    return enter.append("line").attr("class", "smart-connections-visualizer-link").attr("stroke", "#4c7787").attr("stroke-width", (d) => this.getLinkStrokeWidth(d)).attr("stroke-opacity", 1).attr("opacity", 1);
  }
  updateLink(update) {
    return update.attr("stroke", "#4c7787").attr("stroke-width", (d) => this.getLinkStrokeWidth(d));
  }
  getLinkStrokeWidth(d) {
    return linear2().domain([this.minScore, this.maxScore]).range([this.minLinkThickness, this.maxLinkThickness])(d.score);
  }
  updateLinkLabelSelection(svgGroup) {
    return svgGroup.append("g").attr("class", "smart-connections-visualizer-link-labels").selectAll("text").data(this.validatedLinks, (d) => `${d.source.id}-${d.target.id}`).join(
      (enter) => this.enterLinkLabel(enter),
      (update) => this.updateLinkLabel(update),
      (exit) => exit.remove()
    );
  }
  enterLinkLabel(enter) {
    return enter.append("text").attr("class", "smart-connections-visualizer-link-label").attr("font-size", this.linkLabelSize).attr("fill", "#bbb").attr("opacity", 0).attr("x", (d) => d.x).attr("y", (d) => d.y).text((d) => (d.score * 100).toFixed(1) + "%");
  }
  updateLinkLabel(update) {
    return update.text((d) => (d.score * 100).toFixed(1)).attr("x", (d) => d.x).attr("y", (d) => d.y);
  }
  enterLabel(enter) {
    return enter.append("text").attr("class", "smart-connections-visualizer-label").attr("dx", 0).attr("font-size", this.nodeLabelSize).attr("dy", 12).attr("text-anchor", "middle").attr("fill", "#bbb").attr("data-id", (d) => d.id).attr("opacity", 1).attr("x", (d) => d.x).attr("y", (d) => d.y).text((d) => this.formatLabel(d.name));
  }
  updateLabel(update) {
    return update.attr("dx", 0).attr("data-id", (d) => d.id).attr("text-anchor", "middle").text((d) => d.id === this.highlightedNodeId ? this.formatLabel(d.name, false) : this.formatLabel(d.name, true)).attr("fill", "#bbb").attr("font-size", this.nodeLabelSize).attr("x", (d) => d.x).attr("y", (d) => d.y).attr("opacity", 1);
  }
  updateNodeSizes() {
    this.nodeSelection.attr("r", (d) => d.id === this.centralNode.id ? this.nodeSize + 3 : this.nodeSize);
  }
  updateLinkThickness() {
    const linkStrokeScale = linear2().domain([this.minScore, this.maxScore]).range([this.minLinkThickness, this.maxLinkThickness]);
    this.linkSelection.attr("stroke-width", (d) => linkStrokeScale(d.score));
  }
  updateSimulationForces() {
    if (!this.simulation) {
      console.error("Simulation not initialized");
      return;
    }
    this.simulation.force("charge", manyBody_default().strength(-this.repelForce)).force("link", link_default(this.validatedLinks).id((d) => d.id).distance((d) => this.linkDistanceScale(d.score)).strength(this.linkForce));
    this.simulation.alphaTarget(0.3).restart();
    setTimeout(() => {
      this.simulation.alphaTarget(0);
    }, 1e3);
  }
  normalizeScore(score) {
    if (this.minScore === this.maxScore) {
      return 0.5;
    }
    return (score - this.minScore) / (this.maxScore - this.minScore);
  }
  linkDistanceScale(score) {
    return linear2().domain([0, 1]).range([this.linkDistance * 2, this.linkDistance / 2])(this.normalizeScore(score));
  }
  updateLabelOpacity(zoomLevel) {
    const maxOpacity = 1;
    const minOpacity = 0;
    const minZoom = 0.1;
    const maxZoom = this.textFadeThreshold;
    let newOpacity = (zoomLevel - minZoom) / (maxZoom - minZoom);
    if (zoomLevel <= minZoom)
      newOpacity = minOpacity;
    if (zoomLevel >= maxZoom)
      newOpacity = maxOpacity;
    newOpacity = Math.max(minOpacity, Math.min(maxOpacity, newOpacity));
    if (this.labelSelection) {
      this.labelSelection.transition().duration(300).attr("opacity", newOpacity);
    }
  }
  updateNodeLabels() {
    this.labelSelection.attr("font-size", this.nodeLabelSize).text((d) => this.formatLabel(d.name, true));
  }
  updateLinkLabelSizes() {
    if (this.linkLabelSelection) {
      this.linkLabelSelection.attr("font-size", this.linkLabelSize);
    }
  }
  updateNodeLabelSizes() {
    this.labelSelection.attr("font-size", this.nodeLabelSize);
  }
  updateNodeLabelOpacity(zoomLevel) {
    const maxOpacity = 1;
    const minOpacity = 0;
    const minZoom = 0.1;
    const maxZoom = this.textFadeThreshold;
    let newOpacity = (zoomLevel - minZoom) / (maxZoom - minZoom);
    if (zoomLevel <= minZoom)
      newOpacity = minOpacity;
    if (zoomLevel >= maxZoom)
      newOpacity = maxOpacity;
    newOpacity = Math.max(minOpacity, Math.min(maxOpacity, newOpacity));
    this.labelSelection.transition().duration(300).attr("opacity", newOpacity);
  }
  startBoxSelection(event) {
    if (!this.isCtrlPressed)
      return;
    this.isDragging = true;
    const [x3, y3] = pointer_default(event);
    this.selectionBox = select_default2("svg").append("rect").attr("class", "smart-connections-visualizer-selection-box").attr("x", x3).attr("y", y3).attr("width", 0).attr("height", 0).attr("stroke", "#00f").attr("stroke-width", 1).attr("fill", "rgba(0, 0, 255, 0.3)");
    this.startX = x3;
    this.startY = y3;
  }
  updateBoxSelection(event) {
    if (!this.isDragging)
      return;
    const [x3, y3] = pointer_default(event);
    const newWidth = x3 - this.startX;
    const newHeight = y3 - this.startY;
    this.selectionBox.attr("width", Math.abs(newWidth)).attr("height", Math.abs(newHeight)).attr("x", Math.min(x3, this.startX)).attr("y", Math.min(y3, this.startY));
    this.updateNodeSelectionInBox(newWidth, newHeight);
    this.updateNodeAppearance();
  }
  updateNodeSelectionInBox(newWidth, newHeight) {
    const endX = this.startX + newWidth;
    const endY = this.startY + newHeight;
    const transformedStartX = Math.min(this.startX, endX);
    const transformedStartY = Math.min(this.startY, endY);
    const transformedEndX = Math.max(this.startX, endX);
    const transformedEndY = Math.max(this.startY, endY);
    const transform2 = transform(select_default2("svg").node());
    const zoomedStartX = (transformedStartX - transform2.x) / transform2.k;
    const zoomedStartY = (transformedStartY - transform2.y) / transform2.k;
    const zoomedEndX = (transformedEndX - transform2.x) / transform2.k;
    const zoomedEndY = (transformedEndY - transform2.y) / transform2.k;
    this.nodeSelection.each((d) => {
      const nodeX = d.x;
      const nodeY = d.y;
      d.selected = nodeX >= zoomedStartX && nodeX <= zoomedEndX && nodeY >= zoomedStartY && nodeY <= zoomedEndY;
    });
  }
  endBoxSelection() {
    if (!this.isDragging)
      return;
    this.isDragging = false;
    this.selectionBox.remove();
  }
  // TODO:: Add back in when ready for toolti
  // showTooltip(event: any, d: any) {
  // 	const tooltip = d3.select('.tooltip');
  // 	tooltip.text(d.name)
  // 		.style('visibility', 'visible');
  // 	const [x, y] = d3.pointer(event);
  // 	tooltip.style('top', `${y + 10}px`)
  // 		.style('left', `${x + 10}px`);
  // }
  // hideTooltip() {
  // 	const tooltip = d3.select('.tooltip');
  // 	tooltip.style('visibility', 'hidden');
  // }
};
var ScGraphView = class extends import_obsidian2.Plugin {
  async onload() {
    await this.loadSettings();
    this.registerView("smart-connections-visualizer", (leaf) => new ScGraphItemView(leaf, this));
    this.registerHoverLinkSource("smart-connections-visualizer", {
      display: "Smart connections visualizer hover link source",
      defaultMod: true
    });
    this.addRibbonIcon("git-fork", "Open smart connections visualizer", (evt) => {
      const existingLeaf = this.app.workspace.getLeavesOfType("smart-connections-visualizer")[0];
      if (existingLeaf) {
        this.app.workspace.setActiveLeaf(existingLeaf);
      } else {
        let leaf = this.app.workspace.getLeaf(true);
        leaf.setViewState({
          type: "smart-connections-visualizer",
          active: true
        });
      }
    });
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_NETWORK_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  onunload() {
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2JpbmQuanMiLCAibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi91dGlscy5qcyIsICJub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvQXhpb3NFcnJvci5qcyIsICJub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvbnVsbC5qcyIsICJub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvdG9Gb3JtRGF0YS5qcyIsICJub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvQXhpb3NVUkxTZWFyY2hQYXJhbXMuanMiLCAibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2J1aWxkVVJMLmpzIiwgIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9JbnRlcmNlcHRvck1hbmFnZXIuanMiLCAibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9kZWZhdWx0cy90cmFuc2l0aW9uYWwuanMiLCAibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9wbGF0Zm9ybS9icm93c2VyL2NsYXNzZXMvVVJMU2VhcmNoUGFyYW1zLmpzIiwgIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvcGxhdGZvcm0vYnJvd3Nlci9jbGFzc2VzL0Zvcm1EYXRhLmpzIiwgIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvcGxhdGZvcm0vYnJvd3Nlci9jbGFzc2VzL0Jsb2IuanMiLCAibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9wbGF0Zm9ybS9icm93c2VyL2luZGV4LmpzIiwgIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvcGxhdGZvcm0vY29tbW9uL3V0aWxzLmpzIiwgIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvcGxhdGZvcm0vaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3RvVVJMRW5jb2RlZEZvcm0uanMiLCAibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2Zvcm1EYXRhVG9KU09OLmpzIiwgIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvZGVmYXVsdHMvaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3BhcnNlSGVhZGVycy5qcyIsICJub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvQXhpb3NIZWFkZXJzLmpzIiwgIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS90cmFuc2Zvcm1EYXRhLmpzIiwgIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL2lzQ2FuY2VsLmpzIiwgIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL0NhbmNlbGVkRXJyb3IuanMiLCAibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3NldHRsZS5qcyIsICJub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvcGFyc2VQcm90b2NvbC5qcyIsICJub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvc3BlZWRvbWV0ZXIuanMiLCAibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3Rocm90dGxlLmpzIiwgIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9wcm9ncmVzc0V2ZW50UmVkdWNlci5qcyIsICJub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luLmpzIiwgIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb29raWVzLmpzIiwgIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc0Fic29sdXRlVVJMLmpzIiwgIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb21iaW5lVVJMcy5qcyIsICJub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvYnVpbGRGdWxsUGF0aC5qcyIsICJub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvbWVyZ2VDb25maWcuanMiLCAibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3Jlc29sdmVDb25maWcuanMiLCAibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9hZGFwdGVycy94aHIuanMiLCAibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2NvbXBvc2VTaWduYWxzLmpzIiwgIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy90cmFja1N0cmVhbS5qcyIsICJub2RlX21vZHVsZXMvYXhpb3MvbGliL2FkYXB0ZXJzL2ZldGNoLmpzIiwgIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvYWRhcHRlcnMvYWRhcHRlcnMuanMiLCAibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2Rpc3BhdGNoUmVxdWVzdC5qcyIsICJub2RlX21vZHVsZXMvYXhpb3MvbGliL2Vudi9kYXRhLmpzIiwgIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy92YWxpZGF0b3IuanMiLCAibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0F4aW9zLmpzIiwgIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL0NhbmNlbFRva2VuLmpzIiwgIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9zcHJlYWQuanMiLCAibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzQXhpb3NFcnJvci5qcyIsICJub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvSHR0cFN0YXR1c0NvZGUuanMiLCAibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9heGlvcy5qcyIsICJub2RlX21vZHVsZXMvd2lraXBlZGlhL2Rpc3QvZXJyb3JzLmpzIiwgIm5vZGVfbW9kdWxlcy93aWtpcGVkaWEvZGlzdC9yZXF1ZXN0LmpzIiwgIm5vZGVfbW9kdWxlcy93aWtpcGVkaWEvZGlzdC9tZXNzYWdlcy5qcyIsICJub2RlX21vZHVsZXMvd2lraXBlZGlhL2Rpc3QvdXRpbHMuanMiLCAibm9kZV9tb2R1bGVzL2NhbWVsY2FzZS9pbmRleC5qcyIsICJub2RlX21vZHVsZXMvaW5mb2JveC1wYXJzZXIvdXRpbC9nZXRWYWx1ZS5qcyIsICJub2RlX21vZHVsZXMvaW5mb2JveC1wYXJzZXIvZGF0YS10eXBlcy9kYXRhVHlwZS5qcyIsICJub2RlX21vZHVsZXMvaW5mb2JveC1wYXJzZXIvdXRpbC9leHRyYWN0RGF0YS5qcyIsICJub2RlX21vZHVsZXMvaW5mb2JveC1wYXJzZXIvdXRpbC9wcm9wZXJ0eUxpc3QuanMiLCAibm9kZV9tb2R1bGVzL2luZm9ib3gtcGFyc2VyL3V0aWwvZmlsbFZhcmlhYmxlcy5qcyIsICJub2RlX21vZHVsZXMvaW5mb2JveC1wYXJzZXIvdXRpbC9leHRyYWN0UHJvcGVydGllcy5qcyIsICJub2RlX21vZHVsZXMvaW5mb2JveC1wYXJzZXIvdXRpbC90cmFuc2Zvcm1Qcm9wZXJ0aWVzLmpzIiwgIm5vZGVfbW9kdWxlcy9pbmZvYm94LXBhcnNlci91dGlsL2V4dHJhY3RJbmZvYm94ZXMuanMiLCAibm9kZV9tb2R1bGVzL2luZm9ib3gtcGFyc2VyL3V0aWwvY2xlYW5Tb3VyY2UuanMiLCAibm9kZV9tb2R1bGVzL2luZm9ib3gtcGFyc2VyL3V0aWwvcGFyc2VUYWJsZXMuanMiLCAibm9kZV9tb2R1bGVzL2luZm9ib3gtcGFyc2VyL3V0aWwvcGFyc2VCc1RhYmxlcy5qcyIsICJub2RlX21vZHVsZXMvaW5mb2JveC1wYXJzZXIvdXRpbC9wYXJzZUxpc3RzLmpzIiwgIm5vZGVfbW9kdWxlcy9pbmZvYm94LXBhcnNlci9pbmRleC5qcyIsICJub2RlX21vZHVsZXMvaW5mb2JveC1wYXJzZXIvZGF0YS10eXBlcy9zbWFsbC5qcyIsICJub2RlX21vZHVsZXMvaW5mb2JveC1wYXJzZXIvZGF0YS10eXBlcy9mbGFnLmpzIiwgIm5vZGVfbW9kdWxlcy9pbmZvYm94LXBhcnNlci9kYXRhLXR5cGVzL2Nvb3Jkcy5qcyIsICJub2RlX21vZHVsZXMvaW5mb2JveC1wYXJzZXIvZGF0YS10eXBlcy9pbnN0YW5jZXMuanMiLCAibm9kZV9tb2R1bGVzL2luZm9ib3gtcGFyc2VyL2RhdGEtdHlwZXMvdW5idWxsZXRlZExpc3RzLmpzIiwgIm5vZGVfbW9kdWxlcy9pbmZvYm94LXBhcnNlci9kYXRhLXR5cGVzL3VubWFya2VkTGlzdHMuanMiLCAibm9kZV9tb2R1bGVzL2luZm9ib3gtcGFyc2VyL2RhdGEtdHlwZXMvcGxhaW5MaXN0cy5qcyIsICJub2RlX21vZHVsZXMvaW5mb2JveC1wYXJzZXIvZGF0YS10eXBlcy9tYXJyaWFnZXMuanMiLCAibm9kZV9tb2R1bGVzL2luZm9ib3gtcGFyc2VyL2RhdGEtdHlwZXMvbmJheS5qcyIsICJub2RlX21vZHVsZXMvaW5mb2JveC1wYXJzZXIvZGF0YS10eXBlcy9vdGhlci5qcyIsICJub2RlX21vZHVsZXMvaW5mb2JveC1wYXJzZXIvZGF0YS10eXBlcy9obGlzdC5qcyIsICJub2RlX21vZHVsZXMvaW5mb2JveC1wYXJzZXIvZGF0YS10eXBlcy9iaXJ0aERhdGVzLmpzIiwgIm5vZGVfbW9kdWxlcy9pbmZvYm94LXBhcnNlci9kYXRhLXR5cGVzL2xhYmVsZWREYXRlcy5qcyIsICJub2RlX21vZHVsZXMvaW5mb2JveC1wYXJzZXIvZGF0YS10eXBlcy9kZWF0aERhdGVzLmpzIiwgIm5vZGVfbW9kdWxlcy9pbmZvYm94LXBhcnNlci9kYXRhLXR5cGVzL3VybC5qcyIsICJub2RlX21vZHVsZXMvaW5mb2JveC1wYXJzZXIvZGF0YS10eXBlcy93ZWJzaXRlLmpzIiwgIm5vZGVfbW9kdWxlcy9pbmZvYm94LXBhcnNlci9kYXRhLXR5cGVzL2V4dHJhLmpzIiwgIm5vZGVfbW9kdWxlcy9pbmZvYm94LXBhcnNlci9kYXRhLXR5cGVzL2NvbnZlcnQuanMiLCAibm9kZV9tb2R1bGVzL2luZm9ib3gtcGFyc2VyL2RhdGEtdHlwZXMvZmlsbURhdGVzLmpzIiwgIm5vZGVfbW9kdWxlcy9pbmZvYm94LXBhcnNlci9kYXRhLXR5cGVzL3JlZjEuanMiLCAibm9kZV9tb2R1bGVzL2luZm9ib3gtcGFyc2VyL2RhdGEtdHlwZXMvcmVmMi5qcyIsICJub2RlX21vZHVsZXMvaW5mb2JveC1wYXJzZXIvZGF0YS10eXBlcy9mb3JtYXROdW0uanMiLCAibm9kZV9tb2R1bGVzL2luZm9ib3gtcGFyc2VyL2RhdGEtdHlwZXMvaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL2luZm9ib3gtcGFyc2VyL3V0aWwvbnVtYmVyUGFyc2UuanMiLCAibm9kZV9tb2R1bGVzL3dpa2lwZWRpYS9kaXN0L3BhZ2UuanMiLCAibm9kZV9tb2R1bGVzL3dpa2lwZWRpYS9kaXN0L3Jlc3VsdFR5cGVzLmpzIiwgIm5vZGVfbW9kdWxlcy93aWtpcGVkaWEvZGlzdC9vcHRpb25UeXBlcy5qcyIsICJub2RlX21vZHVsZXMvd2lraXBlZGlhL2Rpc3QvaW5kZXguanMiLCAibWFpbi50cyIsICJub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL2FzY2VuZGluZy5qcyIsICJub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL2Rlc2NlbmRpbmcuanMiLCAibm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9iaXNlY3Rvci5qcyIsICJub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL251bWJlci5qcyIsICJub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL2Jpc2VjdC5qcyIsICJub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL3RpY2tzLmpzIiwgIm5vZGVfbW9kdWxlcy9kMy1kaXNwYXRjaC9zcmMvZGlzcGF0Y2guanMiLCAibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvbmFtZXNwYWNlcy5qcyIsICJub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9uYW1lc3BhY2UuanMiLCAibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvY3JlYXRvci5qcyIsICJub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rvci5qcyIsICJub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vc2VsZWN0LmpzIiwgIm5vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL2FycmF5LmpzIiwgIm5vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdG9yQWxsLmpzIiwgIm5vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9zZWxlY3RBbGwuanMiLCAibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvbWF0Y2hlci5qcyIsICJub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vc2VsZWN0Q2hpbGQuanMiLCAibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3NlbGVjdENoaWxkcmVuLmpzIiwgIm5vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9maWx0ZXIuanMiLCAibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3NwYXJzZS5qcyIsICJub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZW50ZXIuanMiLCAibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvY29uc3RhbnQuanMiLCAibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2RhdGEuanMiLCAibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2V4aXQuanMiLCAibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2pvaW4uanMiLCAibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL21lcmdlLmpzIiwgIm5vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9vcmRlci5qcyIsICJub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vc29ydC5qcyIsICJub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vY2FsbC5qcyIsICJub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vbm9kZXMuanMiLCAibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL25vZGUuanMiLCAibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3NpemUuanMiLCAibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2VtcHR5LmpzIiwgIm5vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9lYWNoLmpzIiwgIm5vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9hdHRyLmpzIiwgIm5vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3dpbmRvdy5qcyIsICJub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vc3R5bGUuanMiLCAibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3Byb3BlcnR5LmpzIiwgIm5vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9jbGFzc2VkLmpzIiwgIm5vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi90ZXh0LmpzIiwgIm5vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9odG1sLmpzIiwgIm5vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9yYWlzZS5qcyIsICJub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vbG93ZXIuanMiLCAibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2FwcGVuZC5qcyIsICJub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vaW5zZXJ0LmpzIiwgIm5vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9yZW1vdmUuanMiLCAibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2Nsb25lLmpzIiwgIm5vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9kYXR1bS5qcyIsICJub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vb24uanMiLCAibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2Rpc3BhdGNoLmpzIiwgIm5vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9pdGVyYXRvci5qcyIsICJub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0LmpzIiwgIm5vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NvdXJjZUV2ZW50LmpzIiwgIm5vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3BvaW50ZXIuanMiLCAibm9kZV9tb2R1bGVzL2QzLWRyYWcvc3JjL25vZXZlbnQuanMiLCAibm9kZV9tb2R1bGVzL2QzLWRyYWcvc3JjL25vZHJhZy5qcyIsICJub2RlX21vZHVsZXMvZDMtZHJhZy9zcmMvY29uc3RhbnQuanMiLCAibm9kZV9tb2R1bGVzL2QzLWRyYWcvc3JjL2V2ZW50LmpzIiwgIm5vZGVfbW9kdWxlcy9kMy1kcmFnL3NyYy9kcmFnLmpzIiwgIm5vZGVfbW9kdWxlcy9kMy1jb2xvci9zcmMvZGVmaW5lLmpzIiwgIm5vZGVfbW9kdWxlcy9kMy1jb2xvci9zcmMvY29sb3IuanMiLCAibm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9iYXNpcy5qcyIsICJub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2Jhc2lzQ2xvc2VkLmpzIiwgIm5vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvY29uc3RhbnQuanMiLCAibm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9jb2xvci5qcyIsICJub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3JnYi5qcyIsICJub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL251bWJlckFycmF5LmpzIiwgIm5vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvYXJyYXkuanMiLCAibm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9kYXRlLmpzIiwgIm5vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvbnVtYmVyLmpzIiwgIm5vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvb2JqZWN0LmpzIiwgIm5vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvc3RyaW5nLmpzIiwgIm5vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvdmFsdWUuanMiLCAibm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9yb3VuZC5qcyIsICJub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3RyYW5zZm9ybS9kZWNvbXBvc2UuanMiLCAibm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy90cmFuc2Zvcm0vcGFyc2UuanMiLCAibm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy90cmFuc2Zvcm0vaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy96b29tLmpzIiwgIm5vZGVfbW9kdWxlcy9kMy10aW1lci9zcmMvdGltZXIuanMiLCAibm9kZV9tb2R1bGVzL2QzLXRpbWVyL3NyYy90aW1lb3V0LmpzIiwgIm5vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3NjaGVkdWxlLmpzIiwgIm5vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy9pbnRlcnJ1cHQuanMiLCAibm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3NlbGVjdGlvbi9pbnRlcnJ1cHQuanMiLCAibm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vdHdlZW4uanMiLCAibm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vaW50ZXJwb2xhdGUuanMiLCAibm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vYXR0ci5qcyIsICJub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9hdHRyVHdlZW4uanMiLCAibm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vZGVsYXkuanMiLCAibm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vZHVyYXRpb24uanMiLCAibm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vZWFzZS5qcyIsICJub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9lYXNlVmFyeWluZy5qcyIsICJub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9maWx0ZXIuanMiLCAibm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vbWVyZ2UuanMiLCAibm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vb24uanMiLCAibm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vcmVtb3ZlLmpzIiwgIm5vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3NlbGVjdC5qcyIsICJub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9zZWxlY3RBbGwuanMiLCAibm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vc2VsZWN0aW9uLmpzIiwgIm5vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3N0eWxlLmpzIiwgIm5vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3N0eWxlVHdlZW4uanMiLCAibm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vdGV4dC5qcyIsICJub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi90ZXh0VHdlZW4uanMiLCAibm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vdHJhbnNpdGlvbi5qcyIsICJub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9lbmQuanMiLCAibm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL2QzLWVhc2Uvc3JjL2N1YmljLmpzIiwgIm5vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy9zZWxlY3Rpb24vdHJhbnNpdGlvbi5qcyIsICJub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvc2VsZWN0aW9uL2luZGV4LmpzIiwgIm5vZGVfbW9kdWxlcy9kMy1icnVzaC9zcmMvYnJ1c2guanMiLCAibm9kZV9tb2R1bGVzL2QzLWZvcmNlL3NyYy9jZW50ZXIuanMiLCAibm9kZV9tb2R1bGVzL2QzLXF1YWR0cmVlL3NyYy9hZGQuanMiLCAibm9kZV9tb2R1bGVzL2QzLXF1YWR0cmVlL3NyYy9jb3Zlci5qcyIsICJub2RlX21vZHVsZXMvZDMtcXVhZHRyZWUvc3JjL2RhdGEuanMiLCAibm9kZV9tb2R1bGVzL2QzLXF1YWR0cmVlL3NyYy9leHRlbnQuanMiLCAibm9kZV9tb2R1bGVzL2QzLXF1YWR0cmVlL3NyYy9xdWFkLmpzIiwgIm5vZGVfbW9kdWxlcy9kMy1xdWFkdHJlZS9zcmMvZmluZC5qcyIsICJub2RlX21vZHVsZXMvZDMtcXVhZHRyZWUvc3JjL3JlbW92ZS5qcyIsICJub2RlX21vZHVsZXMvZDMtcXVhZHRyZWUvc3JjL3Jvb3QuanMiLCAibm9kZV9tb2R1bGVzL2QzLXF1YWR0cmVlL3NyYy9zaXplLmpzIiwgIm5vZGVfbW9kdWxlcy9kMy1xdWFkdHJlZS9zcmMvdmlzaXQuanMiLCAibm9kZV9tb2R1bGVzL2QzLXF1YWR0cmVlL3NyYy92aXNpdEFmdGVyLmpzIiwgIm5vZGVfbW9kdWxlcy9kMy1xdWFkdHJlZS9zcmMveC5qcyIsICJub2RlX21vZHVsZXMvZDMtcXVhZHRyZWUvc3JjL3kuanMiLCAibm9kZV9tb2R1bGVzL2QzLXF1YWR0cmVlL3NyYy9xdWFkdHJlZS5qcyIsICJub2RlX21vZHVsZXMvZDMtZm9yY2Uvc3JjL2NvbnN0YW50LmpzIiwgIm5vZGVfbW9kdWxlcy9kMy1mb3JjZS9zcmMvamlnZ2xlLmpzIiwgIm5vZGVfbW9kdWxlcy9kMy1mb3JjZS9zcmMvY29sbGlkZS5qcyIsICJub2RlX21vZHVsZXMvZDMtZm9yY2Uvc3JjL2xpbmsuanMiLCAibm9kZV9tb2R1bGVzL2QzLWZvcmNlL3NyYy9sY2cuanMiLCAibm9kZV9tb2R1bGVzL2QzLWZvcmNlL3NyYy9zaW11bGF0aW9uLmpzIiwgIm5vZGVfbW9kdWxlcy9kMy1mb3JjZS9zcmMvbWFueUJvZHkuanMiLCAibm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZm9ybWF0RGVjaW1hbC5qcyIsICJub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9leHBvbmVudC5qcyIsICJub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXRHcm91cC5qcyIsICJub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXROdW1lcmFscy5qcyIsICJub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXRTcGVjaWZpZXIuanMiLCAibm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZm9ybWF0VHJpbS5qcyIsICJub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXRQcmVmaXhBdXRvLmpzIiwgIm5vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdFJvdW5kZWQuanMiLCAibm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZm9ybWF0VHlwZXMuanMiLCAibm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvaWRlbnRpdHkuanMiLCAibm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvbG9jYWxlLmpzIiwgIm5vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2RlZmF1bHRMb2NhbGUuanMiLCAibm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvcHJlY2lzaW9uRml4ZWQuanMiLCAibm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvcHJlY2lzaW9uUHJlZml4LmpzIiwgIm5vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL3ByZWNpc2lvblJvdW5kLmpzIiwgIm5vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvaW5pdC5qcyIsICJub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL2NvbnN0YW50LmpzIiwgIm5vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvbnVtYmVyLmpzIiwgIm5vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvY29udGludW91cy5qcyIsICJub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL3RpY2tGb3JtYXQuanMiLCAibm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9saW5lYXIuanMiLCAibm9kZV9tb2R1bGVzL2QzLXpvb20vc3JjL2NvbnN0YW50LmpzIiwgIm5vZGVfbW9kdWxlcy9kMy16b29tL3NyYy9ldmVudC5qcyIsICJub2RlX21vZHVsZXMvZDMtem9vbS9zcmMvdHJhbnNmb3JtLmpzIiwgIm5vZGVfbW9kdWxlcy9kMy16b29tL3NyYy9ub2V2ZW50LmpzIiwgIm5vZGVfbW9kdWxlcy9kMy16b29tL3NyYy96b29tLmpzIiwgImFwaUNsaWVudC50cyIsICJ2aWV3LnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyIndXNlIHN0cmljdCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJpbmQoZm4sIHRoaXNBcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoKSB7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXNBcmcsIGFyZ3VtZW50cyk7XG4gIH07XG59XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgYmluZCBmcm9tICcuL2hlbHBlcnMvYmluZC5qcyc7XG5cbi8vIHV0aWxzIGlzIGEgbGlicmFyeSBvZiBnZW5lcmljIGhlbHBlciBmdW5jdGlvbnMgbm9uLXNwZWNpZmljIHRvIGF4aW9zXG5cbmNvbnN0IHt0b1N0cmluZ30gPSBPYmplY3QucHJvdG90eXBlO1xuY29uc3Qge2dldFByb3RvdHlwZU9mfSA9IE9iamVjdDtcblxuY29uc3Qga2luZE9mID0gKGNhY2hlID0+IHRoaW5nID0+IHtcbiAgICBjb25zdCBzdHIgPSB0b1N0cmluZy5jYWxsKHRoaW5nKTtcbiAgICByZXR1cm4gY2FjaGVbc3RyXSB8fCAoY2FjaGVbc3RyXSA9IHN0ci5zbGljZSg4LCAtMSkudG9Mb3dlckNhc2UoKSk7XG59KShPYmplY3QuY3JlYXRlKG51bGwpKTtcblxuY29uc3Qga2luZE9mVGVzdCA9ICh0eXBlKSA9PiB7XG4gIHR5cGUgPSB0eXBlLnRvTG93ZXJDYXNlKCk7XG4gIHJldHVybiAodGhpbmcpID0+IGtpbmRPZih0aGluZykgPT09IHR5cGVcbn1cblxuY29uc3QgdHlwZU9mVGVzdCA9IHR5cGUgPT4gdGhpbmcgPT4gdHlwZW9mIHRoaW5nID09PSB0eXBlO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3Qge2lzQXJyYXl9ID0gQXJyYXk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgdW5kZWZpbmVkXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgdmFsdWUgaXMgdW5kZWZpbmVkLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNVbmRlZmluZWQgPSB0eXBlT2ZUZXN0KCd1bmRlZmluZWQnKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0J1ZmZlcih2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gbnVsbCAmJiAhaXNVbmRlZmluZWQodmFsKSAmJiB2YWwuY29uc3RydWN0b3IgIT09IG51bGwgJiYgIWlzVW5kZWZpbmVkKHZhbC5jb25zdHJ1Y3RvcilcbiAgICAmJiBpc0Z1bmN0aW9uKHZhbC5jb25zdHJ1Y3Rvci5pc0J1ZmZlcikgJiYgdmFsLmNvbnN0cnVjdG9yLmlzQnVmZmVyKHZhbCk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNBcnJheUJ1ZmZlciA9IGtpbmRPZlRlc3QoJ0FycmF5QnVmZmVyJyk7XG5cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXJWaWV3KHZhbCkge1xuICBsZXQgcmVzdWx0O1xuICBpZiAoKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcpICYmIChBcnJheUJ1ZmZlci5pc1ZpZXcpKSB7XG4gICAgcmVzdWx0ID0gQXJyYXlCdWZmZXIuaXNWaWV3KHZhbCk7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0ID0gKHZhbCkgJiYgKHZhbC5idWZmZXIpICYmIChpc0FycmF5QnVmZmVyKHZhbC5idWZmZXIpKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyaW5nXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmluZywgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzU3RyaW5nID0gdHlwZU9mVGVzdCgnc3RyaW5nJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGdW5jdGlvblxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZ1bmN0aW9uLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNGdW5jdGlvbiA9IHR5cGVPZlRlc3QoJ2Z1bmN0aW9uJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBOdW1iZXJcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgTnVtYmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNOdW1iZXIgPSB0eXBlT2ZUZXN0KCdudW1iZXInKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBPYmplY3RcbiAqXG4gKiBAcGFyYW0geyp9IHRoaW5nIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gT2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNPYmplY3QgPSAodGhpbmcpID0+IHRoaW5nICE9PSBudWxsICYmIHR5cGVvZiB0aGluZyA9PT0gJ29iamVjdCc7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBCb29sZWFuXG4gKlxuICogQHBhcmFtIHsqfSB0aGluZyBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBCb29sZWFuLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNCb29sZWFuID0gdGhpbmcgPT4gdGhpbmcgPT09IHRydWUgfHwgdGhpbmcgPT09IGZhbHNlO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgcGxhaW4gT2JqZWN0XG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIHBsYWluIE9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzUGxhaW5PYmplY3QgPSAodmFsKSA9PiB7XG4gIGlmIChraW5kT2YodmFsKSAhPT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBjb25zdCBwcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZih2YWwpO1xuICByZXR1cm4gKHByb3RvdHlwZSA9PT0gbnVsbCB8fCBwcm90b3R5cGUgPT09IE9iamVjdC5wcm90b3R5cGUgfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvdHlwZSkgPT09IG51bGwpICYmICEoU3ltYm9sLnRvU3RyaW5nVGFnIGluIHZhbCkgJiYgIShTeW1ib2wuaXRlcmF0b3IgaW4gdmFsKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIERhdGVcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRGF0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzRGF0ZSA9IGtpbmRPZlRlc3QoJ0RhdGUnKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZpbGVcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRmlsZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzRmlsZSA9IGtpbmRPZlRlc3QoJ0ZpbGUnKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJsb2JcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQmxvYiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzQmxvYiA9IGtpbmRPZlRlc3QoJ0Jsb2InKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZpbGVMaXN0XG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZpbGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc0ZpbGVMaXN0ID0ga2luZE9mVGVzdCgnRmlsZUxpc3QnKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmVhbVxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJlYW0sIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc1N0cmVhbSA9ICh2YWwpID0+IGlzT2JqZWN0KHZhbCkgJiYgaXNGdW5jdGlvbih2YWwucGlwZSk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGb3JtRGF0YVxuICpcbiAqIEBwYXJhbSB7Kn0gdGhpbmcgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBGb3JtRGF0YSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzRm9ybURhdGEgPSAodGhpbmcpID0+IHtcbiAgbGV0IGtpbmQ7XG4gIHJldHVybiB0aGluZyAmJiAoXG4gICAgKHR5cGVvZiBGb3JtRGF0YSA9PT0gJ2Z1bmN0aW9uJyAmJiB0aGluZyBpbnN0YW5jZW9mIEZvcm1EYXRhKSB8fCAoXG4gICAgICBpc0Z1bmN0aW9uKHRoaW5nLmFwcGVuZCkgJiYgKFxuICAgICAgICAoa2luZCA9IGtpbmRPZih0aGluZykpID09PSAnZm9ybWRhdGEnIHx8XG4gICAgICAgIC8vIGRldGVjdCBmb3JtLWRhdGEgaW5zdGFuY2VcbiAgICAgICAgKGtpbmQgPT09ICdvYmplY3QnICYmIGlzRnVuY3Rpb24odGhpbmcudG9TdHJpbmcpICYmIHRoaW5nLnRvU3RyaW5nKCkgPT09ICdbb2JqZWN0IEZvcm1EYXRhXScpXG4gICAgICApXG4gICAgKVxuICApXG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0XG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc1VSTFNlYXJjaFBhcmFtcyA9IGtpbmRPZlRlc3QoJ1VSTFNlYXJjaFBhcmFtcycpO1xuXG5jb25zdCBbaXNSZWFkYWJsZVN0cmVhbSwgaXNSZXF1ZXN0LCBpc1Jlc3BvbnNlLCBpc0hlYWRlcnNdID0gWydSZWFkYWJsZVN0cmVhbScsICdSZXF1ZXN0JywgJ1Jlc3BvbnNlJywgJ0hlYWRlcnMnXS5tYXAoa2luZE9mVGVzdCk7XG5cbi8qKlxuICogVHJpbSBleGNlc3Mgd2hpdGVzcGFjZSBvZmYgdGhlIGJlZ2lubmluZyBhbmQgZW5kIG9mIGEgc3RyaW5nXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0ciBUaGUgU3RyaW5nIHRvIHRyaW1cbiAqXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgU3RyaW5nIGZyZWVkIG9mIGV4Y2VzcyB3aGl0ZXNwYWNlXG4gKi9cbmNvbnN0IHRyaW0gPSAoc3RyKSA9PiBzdHIudHJpbSA/XG4gIHN0ci50cmltKCkgOiBzdHIucmVwbGFjZSgvXltcXHNcXHVGRUZGXFx4QTBdK3xbXFxzXFx1RkVGRlxceEEwXSskL2csICcnKTtcblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYW4gQXJyYXkgb3IgYW4gT2JqZWN0IGludm9raW5nIGEgZnVuY3Rpb24gZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiBgb2JqYCBpcyBhbiBBcnJheSBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGluZGV4LCBhbmQgY29tcGxldGUgYXJyYXkgZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiAnb2JqJyBpcyBhbiBPYmplY3QgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBrZXksIGFuZCBjb21wbGV0ZSBvYmplY3QgZm9yIGVhY2ggcHJvcGVydHkuXG4gKlxuICogQHBhcmFtIHtPYmplY3R8QXJyYXl9IG9iaiBUaGUgb2JqZWN0IHRvIGl0ZXJhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBjYWxsYmFjayB0byBpbnZva2UgZm9yIGVhY2ggaXRlbVxuICpcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW2FsbE93bktleXMgPSBmYWxzZV1cbiAqIEByZXR1cm5zIHthbnl9XG4gKi9cbmZ1bmN0aW9uIGZvckVhY2gob2JqLCBmbiwge2FsbE93bktleXMgPSBmYWxzZX0gPSB7fSkge1xuICAvLyBEb24ndCBib3RoZXIgaWYgbm8gdmFsdWUgcHJvdmlkZWRcbiAgaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGxldCBpO1xuICBsZXQgbDtcblxuICAvLyBGb3JjZSBhbiBhcnJheSBpZiBub3QgYWxyZWFkeSBzb21ldGhpbmcgaXRlcmFibGVcbiAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgb2JqID0gW29ial07XG4gIH1cblxuICBpZiAoaXNBcnJheShvYmopKSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIGFycmF5IHZhbHVlc1xuICAgIGZvciAoaSA9IDAsIGwgPSBvYmoubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBmbi5jYWxsKG51bGwsIG9ialtpXSwgaSwgb2JqKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIG9iamVjdCBrZXlzXG4gICAgY29uc3Qga2V5cyA9IGFsbE93bktleXMgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmopIDogT2JqZWN0LmtleXMob2JqKTtcbiAgICBjb25zdCBsZW4gPSBrZXlzLmxlbmd0aDtcbiAgICBsZXQga2V5O1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgZm4uY2FsbChudWxsLCBvYmpba2V5XSwga2V5LCBvYmopO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBmaW5kS2V5KG9iaiwga2V5KSB7XG4gIGtleSA9IGtleS50b0xvd2VyQ2FzZSgpO1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgbGV0IGkgPSBrZXlzLmxlbmd0aDtcbiAgbGV0IF9rZXk7XG4gIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgX2tleSA9IGtleXNbaV07XG4gICAgaWYgKGtleSA9PT0gX2tleS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICByZXR1cm4gX2tleTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbmNvbnN0IF9nbG9iYWwgPSAoKCkgPT4ge1xuICAvKmVzbGludCBuby11bmRlZjowKi9cbiAgaWYgKHR5cGVvZiBnbG9iYWxUaGlzICE9PSBcInVuZGVmaW5lZFwiKSByZXR1cm4gZ2xvYmFsVGhpcztcbiAgcmV0dXJuIHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6ICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IGdsb2JhbClcbn0pKCk7XG5cbmNvbnN0IGlzQ29udGV4dERlZmluZWQgPSAoY29udGV4dCkgPT4gIWlzVW5kZWZpbmVkKGNvbnRleHQpICYmIGNvbnRleHQgIT09IF9nbG9iYWw7XG5cbi8qKlxuICogQWNjZXB0cyB2YXJhcmdzIGV4cGVjdGluZyBlYWNoIGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCwgdGhlblxuICogaW1tdXRhYmx5IG1lcmdlcyB0aGUgcHJvcGVydGllcyBvZiBlYWNoIG9iamVjdCBhbmQgcmV0dXJucyByZXN1bHQuXG4gKlxuICogV2hlbiBtdWx0aXBsZSBvYmplY3RzIGNvbnRhaW4gdGhlIHNhbWUga2V5IHRoZSBsYXRlciBvYmplY3QgaW5cbiAqIHRoZSBhcmd1bWVudHMgbGlzdCB3aWxsIHRha2UgcHJlY2VkZW5jZS5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIGBgYGpzXG4gKiB2YXIgcmVzdWx0ID0gbWVyZ2Uoe2ZvbzogMTIzfSwge2ZvbzogNDU2fSk7XG4gKiBjb25zb2xlLmxvZyhyZXN1bHQuZm9vKTsgLy8gb3V0cHV0cyA0NTZcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmoxIE9iamVjdCB0byBtZXJnZVxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJlc3VsdCBvZiBhbGwgbWVyZ2UgcHJvcGVydGllc1xuICovXG5mdW5jdGlvbiBtZXJnZSgvKiBvYmoxLCBvYmoyLCBvYmozLCAuLi4gKi8pIHtcbiAgY29uc3Qge2Nhc2VsZXNzfSA9IGlzQ29udGV4dERlZmluZWQodGhpcykgJiYgdGhpcyB8fCB7fTtcbiAgY29uc3QgcmVzdWx0ID0ge307XG4gIGNvbnN0IGFzc2lnblZhbHVlID0gKHZhbCwga2V5KSA9PiB7XG4gICAgY29uc3QgdGFyZ2V0S2V5ID0gY2FzZWxlc3MgJiYgZmluZEtleShyZXN1bHQsIGtleSkgfHwga2V5O1xuICAgIGlmIChpc1BsYWluT2JqZWN0KHJlc3VsdFt0YXJnZXRLZXldKSAmJiBpc1BsYWluT2JqZWN0KHZhbCkpIHtcbiAgICAgIHJlc3VsdFt0YXJnZXRLZXldID0gbWVyZ2UocmVzdWx0W3RhcmdldEtleV0sIHZhbCk7XG4gICAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHZhbCkpIHtcbiAgICAgIHJlc3VsdFt0YXJnZXRLZXldID0gbWVyZ2Uoe30sIHZhbCk7XG4gICAgfSBlbHNlIGlmIChpc0FycmF5KHZhbCkpIHtcbiAgICAgIHJlc3VsdFt0YXJnZXRLZXldID0gdmFsLnNsaWNlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdFt0YXJnZXRLZXldID0gdmFsO1xuICAgIH1cbiAgfVxuXG4gIGZvciAobGV0IGkgPSAwLCBsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGFyZ3VtZW50c1tpXSAmJiBmb3JFYWNoKGFyZ3VtZW50c1tpXSwgYXNzaWduVmFsdWUpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRXh0ZW5kcyBvYmplY3QgYSBieSBtdXRhYmx5IGFkZGluZyB0byBpdCB0aGUgcHJvcGVydGllcyBvZiBvYmplY3QgYi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYSBUaGUgb2JqZWN0IHRvIGJlIGV4dGVuZGVkXG4gKiBAcGFyYW0ge09iamVjdH0gYiBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tXG4gKiBAcGFyYW0ge09iamVjdH0gdGhpc0FyZyBUaGUgb2JqZWN0IHRvIGJpbmQgZnVuY3Rpb24gdG9cbiAqXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFthbGxPd25LZXlzXVxuICogQHJldHVybnMge09iamVjdH0gVGhlIHJlc3VsdGluZyB2YWx1ZSBvZiBvYmplY3QgYVxuICovXG5jb25zdCBleHRlbmQgPSAoYSwgYiwgdGhpc0FyZywge2FsbE93bktleXN9PSB7fSkgPT4ge1xuICBmb3JFYWNoKGIsICh2YWwsIGtleSkgPT4ge1xuICAgIGlmICh0aGlzQXJnICYmIGlzRnVuY3Rpb24odmFsKSkge1xuICAgICAgYVtrZXldID0gYmluZCh2YWwsIHRoaXNBcmcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhW2tleV0gPSB2YWw7XG4gICAgfVxuICB9LCB7YWxsT3duS2V5c30pO1xuICByZXR1cm4gYTtcbn1cblxuLyoqXG4gKiBSZW1vdmUgYnl0ZSBvcmRlciBtYXJrZXIuIFRoaXMgY2F0Y2hlcyBFRiBCQiBCRiAodGhlIFVURi04IEJPTSlcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29udGVudCB3aXRoIEJPTVxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IGNvbnRlbnQgdmFsdWUgd2l0aG91dCBCT01cbiAqL1xuY29uc3Qgc3RyaXBCT00gPSAoY29udGVudCkgPT4ge1xuICBpZiAoY29udGVudC5jaGFyQ29kZUF0KDApID09PSAweEZFRkYpIHtcbiAgICBjb250ZW50ID0gY29udGVudC5zbGljZSgxKTtcbiAgfVxuICByZXR1cm4gY29udGVudDtcbn1cblxuLyoqXG4gKiBJbmhlcml0IHRoZSBwcm90b3R5cGUgbWV0aG9kcyBmcm9tIG9uZSBjb25zdHJ1Y3RvciBpbnRvIGFub3RoZXJcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBzdXBlckNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge29iamVjdH0gW3Byb3BzXVxuICogQHBhcmFtIHtvYmplY3R9IFtkZXNjcmlwdG9yc11cbiAqXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuY29uc3QgaW5oZXJpdHMgPSAoY29uc3RydWN0b3IsIHN1cGVyQ29uc3RydWN0b3IsIHByb3BzLCBkZXNjcmlwdG9ycykgPT4ge1xuICBjb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ29uc3RydWN0b3IucHJvdG90eXBlLCBkZXNjcmlwdG9ycyk7XG4gIGNvbnN0cnVjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGNvbnN0cnVjdG9yO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29uc3RydWN0b3IsICdzdXBlcicsIHtcbiAgICB2YWx1ZTogc3VwZXJDb25zdHJ1Y3Rvci5wcm90b3R5cGVcbiAgfSk7XG4gIHByb3BzICYmIE9iamVjdC5hc3NpZ24oY29uc3RydWN0b3IucHJvdG90eXBlLCBwcm9wcyk7XG59XG5cbi8qKlxuICogUmVzb2x2ZSBvYmplY3Qgd2l0aCBkZWVwIHByb3RvdHlwZSBjaGFpbiB0byBhIGZsYXQgb2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlT2JqIHNvdXJjZSBvYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBbZGVzdE9ial1cbiAqIEBwYXJhbSB7RnVuY3Rpb258Qm9vbGVhbn0gW2ZpbHRlcl1cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcm9wRmlsdGVyXVxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9XG4gKi9cbmNvbnN0IHRvRmxhdE9iamVjdCA9IChzb3VyY2VPYmosIGRlc3RPYmosIGZpbHRlciwgcHJvcEZpbHRlcikgPT4ge1xuICBsZXQgcHJvcHM7XG4gIGxldCBpO1xuICBsZXQgcHJvcDtcbiAgY29uc3QgbWVyZ2VkID0ge307XG5cbiAgZGVzdE9iaiA9IGRlc3RPYmogfHwge307XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lcS1udWxsLGVxZXFlcVxuICBpZiAoc291cmNlT2JqID09IG51bGwpIHJldHVybiBkZXN0T2JqO1xuXG4gIGRvIHtcbiAgICBwcm9wcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHNvdXJjZU9iaik7XG4gICAgaSA9IHByb3BzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tID4gMCkge1xuICAgICAgcHJvcCA9IHByb3BzW2ldO1xuICAgICAgaWYgKCghcHJvcEZpbHRlciB8fCBwcm9wRmlsdGVyKHByb3AsIHNvdXJjZU9iaiwgZGVzdE9iaikpICYmICFtZXJnZWRbcHJvcF0pIHtcbiAgICAgICAgZGVzdE9ialtwcm9wXSA9IHNvdXJjZU9ialtwcm9wXTtcbiAgICAgICAgbWVyZ2VkW3Byb3BdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgc291cmNlT2JqID0gZmlsdGVyICE9PSBmYWxzZSAmJiBnZXRQcm90b3R5cGVPZihzb3VyY2VPYmopO1xuICB9IHdoaWxlIChzb3VyY2VPYmogJiYgKCFmaWx0ZXIgfHwgZmlsdGVyKHNvdXJjZU9iaiwgZGVzdE9iaikpICYmIHNvdXJjZU9iaiAhPT0gT2JqZWN0LnByb3RvdHlwZSk7XG5cbiAgcmV0dXJuIGRlc3RPYmo7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIGEgc3RyaW5nIGVuZHMgd2l0aCB0aGUgY2hhcmFjdGVycyBvZiBhIHNwZWNpZmllZCBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcGFyYW0ge1N0cmluZ30gc2VhcmNoU3RyaW5nXG4gKiBAcGFyYW0ge051bWJlcn0gW3Bvc2l0aW9uPSAwXVxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5jb25zdCBlbmRzV2l0aCA9IChzdHIsIHNlYXJjaFN0cmluZywgcG9zaXRpb24pID0+IHtcbiAgc3RyID0gU3RyaW5nKHN0cik7XG4gIGlmIChwb3NpdGlvbiA9PT0gdW5kZWZpbmVkIHx8IHBvc2l0aW9uID4gc3RyLmxlbmd0aCkge1xuICAgIHBvc2l0aW9uID0gc3RyLmxlbmd0aDtcbiAgfVxuICBwb3NpdGlvbiAtPSBzZWFyY2hTdHJpbmcubGVuZ3RoO1xuICBjb25zdCBsYXN0SW5kZXggPSBzdHIuaW5kZXhPZihzZWFyY2hTdHJpbmcsIHBvc2l0aW9uKTtcbiAgcmV0dXJuIGxhc3RJbmRleCAhPT0gLTEgJiYgbGFzdEluZGV4ID09PSBwb3NpdGlvbjtcbn1cblxuXG4vKipcbiAqIFJldHVybnMgbmV3IGFycmF5IGZyb20gYXJyYXkgbGlrZSBvYmplY3Qgb3IgbnVsbCBpZiBmYWlsZWRcbiAqXG4gKiBAcGFyYW0geyp9IFt0aGluZ11cbiAqXG4gKiBAcmV0dXJucyB7P0FycmF5fVxuICovXG5jb25zdCB0b0FycmF5ID0gKHRoaW5nKSA9PiB7XG4gIGlmICghdGhpbmcpIHJldHVybiBudWxsO1xuICBpZiAoaXNBcnJheSh0aGluZykpIHJldHVybiB0aGluZztcbiAgbGV0IGkgPSB0aGluZy5sZW5ndGg7XG4gIGlmICghaXNOdW1iZXIoaSkpIHJldHVybiBudWxsO1xuICBjb25zdCBhcnIgPSBuZXcgQXJyYXkoaSk7XG4gIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgYXJyW2ldID0gdGhpbmdbaV07XG4gIH1cbiAgcmV0dXJuIGFycjtcbn1cblxuLyoqXG4gKiBDaGVja2luZyBpZiB0aGUgVWludDhBcnJheSBleGlzdHMgYW5kIGlmIGl0IGRvZXMsIGl0IHJldHVybnMgYSBmdW5jdGlvbiB0aGF0IGNoZWNrcyBpZiB0aGVcbiAqIHRoaW5nIHBhc3NlZCBpbiBpcyBhbiBpbnN0YW5jZSBvZiBVaW50OEFycmF5XG4gKlxuICogQHBhcmFtIHtUeXBlZEFycmF5fVxuICpcbiAqIEByZXR1cm5zIHtBcnJheX1cbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbmNvbnN0IGlzVHlwZWRBcnJheSA9IChUeXBlZEFycmF5ID0+IHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgcmV0dXJuIHRoaW5nID0+IHtcbiAgICByZXR1cm4gVHlwZWRBcnJheSAmJiB0aGluZyBpbnN0YW5jZW9mIFR5cGVkQXJyYXk7XG4gIH07XG59KSh0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcgJiYgZ2V0UHJvdG90eXBlT2YoVWludDhBcnJheSkpO1xuXG4vKipcbiAqIEZvciBlYWNoIGVudHJ5IGluIHRoZSBvYmplY3QsIGNhbGwgdGhlIGZ1bmN0aW9uIHdpdGggdGhlIGtleSBhbmQgdmFsdWUuXG4gKlxuICogQHBhcmFtIHtPYmplY3Q8YW55LCBhbnk+fSBvYmogLSBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIC0gVGhlIGZ1bmN0aW9uIHRvIGNhbGwgZm9yIGVhY2ggZW50cnkuXG4gKlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmNvbnN0IGZvckVhY2hFbnRyeSA9IChvYmosIGZuKSA9PiB7XG4gIGNvbnN0IGdlbmVyYXRvciA9IG9iaiAmJiBvYmpbU3ltYm9sLml0ZXJhdG9yXTtcblxuICBjb25zdCBpdGVyYXRvciA9IGdlbmVyYXRvci5jYWxsKG9iaik7XG5cbiAgbGV0IHJlc3VsdDtcblxuICB3aGlsZSAoKHJlc3VsdCA9IGl0ZXJhdG9yLm5leHQoKSkgJiYgIXJlc3VsdC5kb25lKSB7XG4gICAgY29uc3QgcGFpciA9IHJlc3VsdC52YWx1ZTtcbiAgICBmbi5jYWxsKG9iaiwgcGFpclswXSwgcGFpclsxXSk7XG4gIH1cbn1cblxuLyoqXG4gKiBJdCB0YWtlcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBhbmQgYSBzdHJpbmcsIGFuZCByZXR1cm5zIGFuIGFycmF5IG9mIGFsbCB0aGUgbWF0Y2hlc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWdFeHAgLSBUaGUgcmVndWxhciBleHByZXNzaW9uIHRvIG1hdGNoIGFnYWluc3QuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIC0gVGhlIHN0cmluZyB0byBzZWFyY2guXG4gKlxuICogQHJldHVybnMge0FycmF5PGJvb2xlYW4+fVxuICovXG5jb25zdCBtYXRjaEFsbCA9IChyZWdFeHAsIHN0cikgPT4ge1xuICBsZXQgbWF0Y2hlcztcbiAgY29uc3QgYXJyID0gW107XG5cbiAgd2hpbGUgKChtYXRjaGVzID0gcmVnRXhwLmV4ZWMoc3RyKSkgIT09IG51bGwpIHtcbiAgICBhcnIucHVzaChtYXRjaGVzKTtcbiAgfVxuXG4gIHJldHVybiBhcnI7XG59XG5cbi8qIENoZWNraW5nIGlmIHRoZSBraW5kT2ZUZXN0IGZ1bmN0aW9uIHJldHVybnMgdHJ1ZSB3aGVuIHBhc3NlZCBhbiBIVE1MRm9ybUVsZW1lbnQuICovXG5jb25zdCBpc0hUTUxGb3JtID0ga2luZE9mVGVzdCgnSFRNTEZvcm1FbGVtZW50Jyk7XG5cbmNvbnN0IHRvQ2FtZWxDYXNlID0gc3RyID0+IHtcbiAgcmV0dXJuIHN0ci50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1stX1xcc10oW2EtelxcZF0pKFxcdyopL2csXG4gICAgZnVuY3Rpb24gcmVwbGFjZXIobSwgcDEsIHAyKSB7XG4gICAgICByZXR1cm4gcDEudG9VcHBlckNhc2UoKSArIHAyO1xuICAgIH1cbiAgKTtcbn07XG5cbi8qIENyZWF0aW5nIGEgZnVuY3Rpb24gdGhhdCB3aWxsIGNoZWNrIGlmIGFuIG9iamVjdCBoYXMgYSBwcm9wZXJ0eS4gKi9cbmNvbnN0IGhhc093blByb3BlcnR5ID0gKCh7aGFzT3duUHJvcGVydHl9KSA9PiAob2JqLCBwcm9wKSA9PiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpKE9iamVjdC5wcm90b3R5cGUpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgUmVnRXhwIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBSZWdFeHAgb2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNSZWdFeHAgPSBraW5kT2ZUZXN0KCdSZWdFeHAnKTtcblxuY29uc3QgcmVkdWNlRGVzY3JpcHRvcnMgPSAob2JqLCByZWR1Y2VyKSA9PiB7XG4gIGNvbnN0IGRlc2NyaXB0b3JzID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMob2JqKTtcbiAgY29uc3QgcmVkdWNlZERlc2NyaXB0b3JzID0ge307XG5cbiAgZm9yRWFjaChkZXNjcmlwdG9ycywgKGRlc2NyaXB0b3IsIG5hbWUpID0+IHtcbiAgICBsZXQgcmV0O1xuICAgIGlmICgocmV0ID0gcmVkdWNlcihkZXNjcmlwdG9yLCBuYW1lLCBvYmopKSAhPT0gZmFsc2UpIHtcbiAgICAgIHJlZHVjZWREZXNjcmlwdG9yc1tuYW1lXSA9IHJldCB8fCBkZXNjcmlwdG9yO1xuICAgIH1cbiAgfSk7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMob2JqLCByZWR1Y2VkRGVzY3JpcHRvcnMpO1xufVxuXG4vKipcbiAqIE1ha2VzIGFsbCBtZXRob2RzIHJlYWQtb25seVxuICogQHBhcmFtIHtPYmplY3R9IG9ialxuICovXG5cbmNvbnN0IGZyZWV6ZU1ldGhvZHMgPSAob2JqKSA9PiB7XG4gIHJlZHVjZURlc2NyaXB0b3JzKG9iaiwgKGRlc2NyaXB0b3IsIG5hbWUpID0+IHtcbiAgICAvLyBza2lwIHJlc3RyaWN0ZWQgcHJvcHMgaW4gc3RyaWN0IG1vZGVcbiAgICBpZiAoaXNGdW5jdGlvbihvYmopICYmIFsnYXJndW1lbnRzJywgJ2NhbGxlcicsICdjYWxsZWUnXS5pbmRleE9mKG5hbWUpICE9PSAtMSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGNvbnN0IHZhbHVlID0gb2JqW25hbWVdO1xuXG4gICAgaWYgKCFpc0Z1bmN0aW9uKHZhbHVlKSkgcmV0dXJuO1xuXG4gICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZmFsc2U7XG5cbiAgICBpZiAoJ3dyaXRhYmxlJyBpbiBkZXNjcmlwdG9yKSB7XG4gICAgICBkZXNjcmlwdG9yLndyaXRhYmxlID0gZmFsc2U7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCFkZXNjcmlwdG9yLnNldCkge1xuICAgICAgZGVzY3JpcHRvci5zZXQgPSAoKSA9PiB7XG4gICAgICAgIHRocm93IEVycm9yKCdDYW4gbm90IHJld3JpdGUgcmVhZC1vbmx5IG1ldGhvZCBcXCcnICsgbmFtZSArICdcXCcnKTtcbiAgICAgIH07XG4gICAgfVxuICB9KTtcbn1cblxuY29uc3QgdG9PYmplY3RTZXQgPSAoYXJyYXlPclN0cmluZywgZGVsaW1pdGVyKSA9PiB7XG4gIGNvbnN0IG9iaiA9IHt9O1xuXG4gIGNvbnN0IGRlZmluZSA9IChhcnIpID0+IHtcbiAgICBhcnIuZm9yRWFjaCh2YWx1ZSA9PiB7XG4gICAgICBvYmpbdmFsdWVdID0gdHJ1ZTtcbiAgICB9KTtcbiAgfVxuXG4gIGlzQXJyYXkoYXJyYXlPclN0cmluZykgPyBkZWZpbmUoYXJyYXlPclN0cmluZykgOiBkZWZpbmUoU3RyaW5nKGFycmF5T3JTdHJpbmcpLnNwbGl0KGRlbGltaXRlcikpO1xuXG4gIHJldHVybiBvYmo7XG59XG5cbmNvbnN0IG5vb3AgPSAoKSA9PiB7fVxuXG5jb25zdCB0b0Zpbml0ZU51bWJlciA9ICh2YWx1ZSwgZGVmYXVsdFZhbHVlKSA9PiB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIE51bWJlci5pc0Zpbml0ZSh2YWx1ZSA9ICt2YWx1ZSkgPyB2YWx1ZSA6IGRlZmF1bHRWYWx1ZTtcbn1cblxuY29uc3QgQUxQSEEgPSAnYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXonXG5cbmNvbnN0IERJR0lUID0gJzAxMjM0NTY3ODknO1xuXG5jb25zdCBBTFBIQUJFVCA9IHtcbiAgRElHSVQsXG4gIEFMUEhBLFxuICBBTFBIQV9ESUdJVDogQUxQSEEgKyBBTFBIQS50b1VwcGVyQ2FzZSgpICsgRElHSVRcbn1cblxuY29uc3QgZ2VuZXJhdGVTdHJpbmcgPSAoc2l6ZSA9IDE2LCBhbHBoYWJldCA9IEFMUEhBQkVULkFMUEhBX0RJR0lUKSA9PiB7XG4gIGxldCBzdHIgPSAnJztcbiAgY29uc3Qge2xlbmd0aH0gPSBhbHBoYWJldDtcbiAgd2hpbGUgKHNpemUtLSkge1xuICAgIHN0ciArPSBhbHBoYWJldFtNYXRoLnJhbmRvbSgpICogbGVuZ3RofDBdXG4gIH1cblxuICByZXR1cm4gc3RyO1xufVxuXG4vKipcbiAqIElmIHRoZSB0aGluZyBpcyBhIEZvcm1EYXRhIG9iamVjdCwgcmV0dXJuIHRydWUsIG90aGVyd2lzZSByZXR1cm4gZmFsc2UuXG4gKlxuICogQHBhcmFtIHt1bmtub3dufSB0aGluZyAtIFRoZSB0aGluZyB0byBjaGVjay5cbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNTcGVjQ29tcGxpYW50Rm9ybSh0aGluZykge1xuICByZXR1cm4gISEodGhpbmcgJiYgaXNGdW5jdGlvbih0aGluZy5hcHBlbmQpICYmIHRoaW5nW1N5bWJvbC50b1N0cmluZ1RhZ10gPT09ICdGb3JtRGF0YScgJiYgdGhpbmdbU3ltYm9sLml0ZXJhdG9yXSk7XG59XG5cbmNvbnN0IHRvSlNPTk9iamVjdCA9IChvYmopID0+IHtcbiAgY29uc3Qgc3RhY2sgPSBuZXcgQXJyYXkoMTApO1xuXG4gIGNvbnN0IHZpc2l0ID0gKHNvdXJjZSwgaSkgPT4ge1xuXG4gICAgaWYgKGlzT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgIGlmIChzdGFjay5pbmRleE9mKHNvdXJjZSkgPj0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmKCEoJ3RvSlNPTicgaW4gc291cmNlKSkge1xuICAgICAgICBzdGFja1tpXSA9IHNvdXJjZTtcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gaXNBcnJheShzb3VyY2UpID8gW10gOiB7fTtcblxuICAgICAgICBmb3JFYWNoKHNvdXJjZSwgKHZhbHVlLCBrZXkpID0+IHtcbiAgICAgICAgICBjb25zdCByZWR1Y2VkVmFsdWUgPSB2aXNpdCh2YWx1ZSwgaSArIDEpO1xuICAgICAgICAgICFpc1VuZGVmaW5lZChyZWR1Y2VkVmFsdWUpICYmICh0YXJnZXRba2V5XSA9IHJlZHVjZWRWYWx1ZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHN0YWNrW2ldID0gdW5kZWZpbmVkO1xuXG4gICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHNvdXJjZTtcbiAgfVxuXG4gIHJldHVybiB2aXNpdChvYmosIDApO1xufVxuXG5jb25zdCBpc0FzeW5jRm4gPSBraW5kT2ZUZXN0KCdBc3luY0Z1bmN0aW9uJyk7XG5cbmNvbnN0IGlzVGhlbmFibGUgPSAodGhpbmcpID0+XG4gIHRoaW5nICYmIChpc09iamVjdCh0aGluZykgfHwgaXNGdW5jdGlvbih0aGluZykpICYmIGlzRnVuY3Rpb24odGhpbmcudGhlbikgJiYgaXNGdW5jdGlvbih0aGluZy5jYXRjaCk7XG5cbi8vIG9yaWdpbmFsIGNvZGVcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9EaWdpdGFsQnJhaW5KUy9BeGlvc1Byb21pc2UvYmxvYi8xNmRlYWIxMzcxMGVjMDk3Nzk5MjIxMzFmM2ZhNTk1NDMyMGY4M2FiL2xpYi91dGlscy5qcyNMMTEtTDM0XG5cbmNvbnN0IF9zZXRJbW1lZGlhdGUgPSAoKHNldEltbWVkaWF0ZVN1cHBvcnRlZCwgcG9zdE1lc3NhZ2VTdXBwb3J0ZWQpID0+IHtcbiAgaWYgKHNldEltbWVkaWF0ZVN1cHBvcnRlZCkge1xuICAgIHJldHVybiBzZXRJbW1lZGlhdGU7XG4gIH1cblxuICByZXR1cm4gcG9zdE1lc3NhZ2VTdXBwb3J0ZWQgPyAoKHRva2VuLCBjYWxsYmFja3MpID0+IHtcbiAgICBfZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsICh7c291cmNlLCBkYXRhfSkgPT4ge1xuICAgICAgaWYgKHNvdXJjZSA9PT0gX2dsb2JhbCAmJiBkYXRhID09PSB0b2tlbikge1xuICAgICAgICBjYWxsYmFja3MubGVuZ3RoICYmIGNhbGxiYWNrcy5zaGlmdCgpKCk7XG4gICAgICB9XG4gICAgfSwgZmFsc2UpO1xuXG4gICAgcmV0dXJuIChjYikgPT4ge1xuICAgICAgY2FsbGJhY2tzLnB1c2goY2IpO1xuICAgICAgX2dsb2JhbC5wb3N0TWVzc2FnZSh0b2tlbiwgXCIqXCIpO1xuICAgIH1cbiAgfSkoYGF4aW9zQCR7TWF0aC5yYW5kb20oKX1gLCBbXSkgOiAoY2IpID0+IHNldFRpbWVvdXQoY2IpO1xufSkoXG4gIHR5cGVvZiBzZXRJbW1lZGlhdGUgPT09ICdmdW5jdGlvbicsXG4gIGlzRnVuY3Rpb24oX2dsb2JhbC5wb3N0TWVzc2FnZSlcbik7XG5cbmNvbnN0IGFzYXAgPSB0eXBlb2YgcXVldWVNaWNyb3Rhc2sgIT09ICd1bmRlZmluZWQnID9cbiAgcXVldWVNaWNyb3Rhc2suYmluZChfZ2xvYmFsKSA6ICggdHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIHByb2Nlc3MubmV4dFRpY2sgfHwgX3NldEltbWVkaWF0ZSk7XG5cbi8vICoqKioqKioqKioqKioqKioqKioqKlxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGlzQXJyYXksXG4gIGlzQXJyYXlCdWZmZXIsXG4gIGlzQnVmZmVyLFxuICBpc0Zvcm1EYXRhLFxuICBpc0FycmF5QnVmZmVyVmlldyxcbiAgaXNTdHJpbmcsXG4gIGlzTnVtYmVyLFxuICBpc0Jvb2xlYW4sXG4gIGlzT2JqZWN0LFxuICBpc1BsYWluT2JqZWN0LFxuICBpc1JlYWRhYmxlU3RyZWFtLFxuICBpc1JlcXVlc3QsXG4gIGlzUmVzcG9uc2UsXG4gIGlzSGVhZGVycyxcbiAgaXNVbmRlZmluZWQsXG4gIGlzRGF0ZSxcbiAgaXNGaWxlLFxuICBpc0Jsb2IsXG4gIGlzUmVnRXhwLFxuICBpc0Z1bmN0aW9uLFxuICBpc1N0cmVhbSxcbiAgaXNVUkxTZWFyY2hQYXJhbXMsXG4gIGlzVHlwZWRBcnJheSxcbiAgaXNGaWxlTGlzdCxcbiAgZm9yRWFjaCxcbiAgbWVyZ2UsXG4gIGV4dGVuZCxcbiAgdHJpbSxcbiAgc3RyaXBCT00sXG4gIGluaGVyaXRzLFxuICB0b0ZsYXRPYmplY3QsXG4gIGtpbmRPZixcbiAga2luZE9mVGVzdCxcbiAgZW5kc1dpdGgsXG4gIHRvQXJyYXksXG4gIGZvckVhY2hFbnRyeSxcbiAgbWF0Y2hBbGwsXG4gIGlzSFRNTEZvcm0sXG4gIGhhc093blByb3BlcnR5LFxuICBoYXNPd25Qcm9wOiBoYXNPd25Qcm9wZXJ0eSwgLy8gYW4gYWxpYXMgdG8gYXZvaWQgRVNMaW50IG5vLXByb3RvdHlwZS1idWlsdGlucyBkZXRlY3Rpb25cbiAgcmVkdWNlRGVzY3JpcHRvcnMsXG4gIGZyZWV6ZU1ldGhvZHMsXG4gIHRvT2JqZWN0U2V0LFxuICB0b0NhbWVsQ2FzZSxcbiAgbm9vcCxcbiAgdG9GaW5pdGVOdW1iZXIsXG4gIGZpbmRLZXksXG4gIGdsb2JhbDogX2dsb2JhbCxcbiAgaXNDb250ZXh0RGVmaW5lZCxcbiAgQUxQSEFCRVQsXG4gIGdlbmVyYXRlU3RyaW5nLFxuICBpc1NwZWNDb21wbGlhbnRGb3JtLFxuICB0b0pTT05PYmplY3QsXG4gIGlzQXN5bmNGbixcbiAgaXNUaGVuYWJsZSxcbiAgc2V0SW1tZWRpYXRlOiBfc2V0SW1tZWRpYXRlLFxuICBhc2FwXG59O1xuIiwgIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcblxuLyoqXG4gKiBDcmVhdGUgYW4gRXJyb3Igd2l0aCB0aGUgc3BlY2lmaWVkIG1lc3NhZ2UsIGNvbmZpZywgZXJyb3IgY29kZSwgcmVxdWVzdCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgVGhlIGVycm9yIG1lc3NhZ2UuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvZGVdIFRoZSBlcnJvciBjb2RlIChmb3IgZXhhbXBsZSwgJ0VDT05OQUJPUlRFRCcpLlxuICogQHBhcmFtIHtPYmplY3R9IFtjb25maWddIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICpcbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhlIGNyZWF0ZWQgZXJyb3IuXG4gKi9cbmZ1bmN0aW9uIEF4aW9zRXJyb3IobWVzc2FnZSwgY29kZSwgY29uZmlnLCByZXF1ZXN0LCByZXNwb25zZSkge1xuICBFcnJvci5jYWxsKHRoaXMpO1xuXG4gIGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSkge1xuICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIHRoaXMuY29uc3RydWN0b3IpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuc3RhY2sgPSAobmV3IEVycm9yKCkpLnN0YWNrO1xuICB9XG5cbiAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbiAgdGhpcy5uYW1lID0gJ0F4aW9zRXJyb3InO1xuICBjb2RlICYmICh0aGlzLmNvZGUgPSBjb2RlKTtcbiAgY29uZmlnICYmICh0aGlzLmNvbmZpZyA9IGNvbmZpZyk7XG4gIHJlcXVlc3QgJiYgKHRoaXMucmVxdWVzdCA9IHJlcXVlc3QpO1xuICBpZiAocmVzcG9uc2UpIHtcbiAgICB0aGlzLnJlc3BvbnNlID0gcmVzcG9uc2U7XG4gICAgdGhpcy5zdGF0dXMgPSByZXNwb25zZS5zdGF0dXMgPyByZXNwb25zZS5zdGF0dXMgOiBudWxsO1xuICB9XG59XG5cbnV0aWxzLmluaGVyaXRzKEF4aW9zRXJyb3IsIEVycm9yLCB7XG4gIHRvSlNPTjogZnVuY3Rpb24gdG9KU09OKCkge1xuICAgIHJldHVybiB7XG4gICAgICAvLyBTdGFuZGFyZFxuICAgICAgbWVzc2FnZTogdGhpcy5tZXNzYWdlLFxuICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgLy8gTWljcm9zb2Z0XG4gICAgICBkZXNjcmlwdGlvbjogdGhpcy5kZXNjcmlwdGlvbixcbiAgICAgIG51bWJlcjogdGhpcy5udW1iZXIsXG4gICAgICAvLyBNb3ppbGxhXG4gICAgICBmaWxlTmFtZTogdGhpcy5maWxlTmFtZSxcbiAgICAgIGxpbmVOdW1iZXI6IHRoaXMubGluZU51bWJlcixcbiAgICAgIGNvbHVtbk51bWJlcjogdGhpcy5jb2x1bW5OdW1iZXIsXG4gICAgICBzdGFjazogdGhpcy5zdGFjayxcbiAgICAgIC8vIEF4aW9zXG4gICAgICBjb25maWc6IHV0aWxzLnRvSlNPTk9iamVjdCh0aGlzLmNvbmZpZyksXG4gICAgICBjb2RlOiB0aGlzLmNvZGUsXG4gICAgICBzdGF0dXM6IHRoaXMuc3RhdHVzXG4gICAgfTtcbiAgfVxufSk7XG5cbmNvbnN0IHByb3RvdHlwZSA9IEF4aW9zRXJyb3IucHJvdG90eXBlO1xuY29uc3QgZGVzY3JpcHRvcnMgPSB7fTtcblxuW1xuICAnRVJSX0JBRF9PUFRJT05fVkFMVUUnLFxuICAnRVJSX0JBRF9PUFRJT04nLFxuICAnRUNPTk5BQk9SVEVEJyxcbiAgJ0VUSU1FRE9VVCcsXG4gICdFUlJfTkVUV09SSycsXG4gICdFUlJfRlJfVE9PX01BTllfUkVESVJFQ1RTJyxcbiAgJ0VSUl9ERVBSRUNBVEVEJyxcbiAgJ0VSUl9CQURfUkVTUE9OU0UnLFxuICAnRVJSX0JBRF9SRVFVRVNUJyxcbiAgJ0VSUl9DQU5DRUxFRCcsXG4gICdFUlJfTk9UX1NVUFBPUlQnLFxuICAnRVJSX0lOVkFMSURfVVJMJ1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbl0uZm9yRWFjaChjb2RlID0+IHtcbiAgZGVzY3JpcHRvcnNbY29kZV0gPSB7dmFsdWU6IGNvZGV9O1xufSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKEF4aW9zRXJyb3IsIGRlc2NyaXB0b3JzKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm90b3R5cGUsICdpc0F4aW9zRXJyb3InLCB7dmFsdWU6IHRydWV9KTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbkF4aW9zRXJyb3IuZnJvbSA9IChlcnJvciwgY29kZSwgY29uZmlnLCByZXF1ZXN0LCByZXNwb25zZSwgY3VzdG9tUHJvcHMpID0+IHtcbiAgY29uc3QgYXhpb3NFcnJvciA9IE9iamVjdC5jcmVhdGUocHJvdG90eXBlKTtcblxuICB1dGlscy50b0ZsYXRPYmplY3QoZXJyb3IsIGF4aW9zRXJyb3IsIGZ1bmN0aW9uIGZpbHRlcihvYmopIHtcbiAgICByZXR1cm4gb2JqICE9PSBFcnJvci5wcm90b3R5cGU7XG4gIH0sIHByb3AgPT4ge1xuICAgIHJldHVybiBwcm9wICE9PSAnaXNBeGlvc0Vycm9yJztcbiAgfSk7XG5cbiAgQXhpb3NFcnJvci5jYWxsKGF4aW9zRXJyb3IsIGVycm9yLm1lc3NhZ2UsIGNvZGUsIGNvbmZpZywgcmVxdWVzdCwgcmVzcG9uc2UpO1xuXG4gIGF4aW9zRXJyb3IuY2F1c2UgPSBlcnJvcjtcblxuICBheGlvc0Vycm9yLm5hbWUgPSBlcnJvci5uYW1lO1xuXG4gIGN1c3RvbVByb3BzICYmIE9iamVjdC5hc3NpZ24oYXhpb3NFcnJvciwgY3VzdG9tUHJvcHMpO1xuXG4gIHJldHVybiBheGlvc0Vycm9yO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgQXhpb3NFcnJvcjtcbiIsICIvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgc3RyaWN0XG5leHBvcnQgZGVmYXVsdCBudWxsO1xuIiwgIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcbmltcG9ydCBBeGlvc0Vycm9yIGZyb20gJy4uL2NvcmUvQXhpb3NFcnJvci5qcyc7XG4vLyB0ZW1wb3JhcnkgaG90Zml4IHRvIGF2b2lkIGNpcmN1bGFyIHJlZmVyZW5jZXMgdW50aWwgQXhpb3NVUkxTZWFyY2hQYXJhbXMgaXMgcmVmYWN0b3JlZFxuaW1wb3J0IFBsYXRmb3JtRm9ybURhdGEgZnJvbSAnLi4vcGxhdGZvcm0vbm9kZS9jbGFzc2VzL0Zvcm1EYXRhLmpzJztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIHRoZSBnaXZlbiB0aGluZyBpcyBhIGFycmF5IG9yIGpzIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdGhpbmcgLSBUaGUgb2JqZWN0IG9yIGFycmF5IHRvIGJlIHZpc2l0ZWQuXG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzVmlzaXRhYmxlKHRoaW5nKSB7XG4gIHJldHVybiB1dGlscy5pc1BsYWluT2JqZWN0KHRoaW5nKSB8fCB1dGlscy5pc0FycmF5KHRoaW5nKTtcbn1cblxuLyoqXG4gKiBJdCByZW1vdmVzIHRoZSBicmFja2V0cyBmcm9tIHRoZSBlbmQgb2YgYSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IC0gVGhlIGtleSBvZiB0aGUgcGFyYW1ldGVyLlxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IHRoZSBrZXkgd2l0aG91dCB0aGUgYnJhY2tldHMuXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUJyYWNrZXRzKGtleSkge1xuICByZXR1cm4gdXRpbHMuZW5kc1dpdGgoa2V5LCAnW10nKSA/IGtleS5zbGljZSgwLCAtMikgOiBrZXk7XG59XG5cbi8qKlxuICogSXQgdGFrZXMgYSBwYXRoLCBhIGtleSwgYW5kIGEgYm9vbGVhbiwgYW5kIHJldHVybnMgYSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aCAtIFRoZSBwYXRoIHRvIHRoZSBjdXJyZW50IGtleS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgLSBUaGUga2V5IG9mIHRoZSBjdXJyZW50IG9iamVjdCBiZWluZyBpdGVyYXRlZCBvdmVyLlxuICogQHBhcmFtIHtzdHJpbmd9IGRvdHMgLSBJZiB0cnVlLCB0aGUga2V5IHdpbGwgYmUgcmVuZGVyZWQgd2l0aCBkb3RzIGluc3RlYWQgb2YgYnJhY2tldHMuXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIHBhdGggdG8gdGhlIGN1cnJlbnQga2V5LlxuICovXG5mdW5jdGlvbiByZW5kZXJLZXkocGF0aCwga2V5LCBkb3RzKSB7XG4gIGlmICghcGF0aCkgcmV0dXJuIGtleTtcbiAgcmV0dXJuIHBhdGguY29uY2F0KGtleSkubWFwKGZ1bmN0aW9uIGVhY2godG9rZW4sIGkpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICB0b2tlbiA9IHJlbW92ZUJyYWNrZXRzKHRva2VuKTtcbiAgICByZXR1cm4gIWRvdHMgJiYgaSA/ICdbJyArIHRva2VuICsgJ10nIDogdG9rZW47XG4gIH0pLmpvaW4oZG90cyA/ICcuJyA6ICcnKTtcbn1cblxuLyoqXG4gKiBJZiB0aGUgYXJyYXkgaXMgYW4gYXJyYXkgYW5kIG5vbmUgb2YgaXRzIGVsZW1lbnRzIGFyZSB2aXNpdGFibGUsIHRoZW4gaXQncyBhIGZsYXQgYXJyYXkuXG4gKlxuICogQHBhcmFtIHtBcnJheTxhbnk+fSBhcnIgLSBUaGUgYXJyYXkgdG8gY2hlY2tcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNGbGF0QXJyYXkoYXJyKSB7XG4gIHJldHVybiB1dGlscy5pc0FycmF5KGFycikgJiYgIWFyci5zb21lKGlzVmlzaXRhYmxlKTtcbn1cblxuY29uc3QgcHJlZGljYXRlcyA9IHV0aWxzLnRvRmxhdE9iamVjdCh1dGlscywge30sIG51bGwsIGZ1bmN0aW9uIGZpbHRlcihwcm9wKSB7XG4gIHJldHVybiAvXmlzW0EtWl0vLnRlc3QocHJvcCk7XG59KTtcblxuLyoqXG4gKiBDb252ZXJ0IGEgZGF0YSBvYmplY3QgdG8gRm9ybURhdGFcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqXG4gKiBAcGFyYW0gez9PYmplY3R9IFtmb3JtRGF0YV1cbiAqIEBwYXJhbSB7P09iamVjdH0gW29wdGlvbnNdXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbb3B0aW9ucy52aXNpdG9yXVxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5tZXRhVG9rZW5zID0gdHJ1ZV1cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMuZG90cyA9IGZhbHNlXVxuICogQHBhcmFtIHs/Qm9vbGVhbn0gW29wdGlvbnMuaW5kZXhlcyA9IGZhbHNlXVxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9XG4gKiovXG5cbi8qKlxuICogSXQgY29udmVydHMgYW4gb2JqZWN0IGludG8gYSBGb3JtRGF0YSBvYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdDxhbnksIGFueT59IG9iaiAtIFRoZSBvYmplY3QgdG8gY29udmVydCB0byBmb3JtIGRhdGEuXG4gKiBAcGFyYW0ge3N0cmluZ30gZm9ybURhdGEgLSBUaGUgRm9ybURhdGEgb2JqZWN0IHRvIGFwcGVuZCB0by5cbiAqIEBwYXJhbSB7T2JqZWN0PHN0cmluZywgYW55Pn0gb3B0aW9uc1xuICpcbiAqIEByZXR1cm5zXG4gKi9cbmZ1bmN0aW9uIHRvRm9ybURhdGEob2JqLCBmb3JtRGF0YSwgb3B0aW9ucykge1xuICBpZiAoIXV0aWxzLmlzT2JqZWN0KG9iaikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd0YXJnZXQgbXVzdCBiZSBhbiBvYmplY3QnKTtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICBmb3JtRGF0YSA9IGZvcm1EYXRhIHx8IG5ldyAoUGxhdGZvcm1Gb3JtRGF0YSB8fCBGb3JtRGF0YSkoKTtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgb3B0aW9ucyA9IHV0aWxzLnRvRmxhdE9iamVjdChvcHRpb25zLCB7XG4gICAgbWV0YVRva2VuczogdHJ1ZSxcbiAgICBkb3RzOiBmYWxzZSxcbiAgICBpbmRleGVzOiBmYWxzZVxuICB9LCBmYWxzZSwgZnVuY3Rpb24gZGVmaW5lZChvcHRpb24sIHNvdXJjZSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lcS1udWxsLGVxZXFlcVxuICAgIHJldHVybiAhdXRpbHMuaXNVbmRlZmluZWQoc291cmNlW29wdGlvbl0pO1xuICB9KTtcblxuICBjb25zdCBtZXRhVG9rZW5zID0gb3B0aW9ucy5tZXRhVG9rZW5zO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlLWJlZm9yZS1kZWZpbmVcbiAgY29uc3QgdmlzaXRvciA9IG9wdGlvbnMudmlzaXRvciB8fCBkZWZhdWx0VmlzaXRvcjtcbiAgY29uc3QgZG90cyA9IG9wdGlvbnMuZG90cztcbiAgY29uc3QgaW5kZXhlcyA9IG9wdGlvbnMuaW5kZXhlcztcbiAgY29uc3QgX0Jsb2IgPSBvcHRpb25zLkJsb2IgfHwgdHlwZW9mIEJsb2IgIT09ICd1bmRlZmluZWQnICYmIEJsb2I7XG4gIGNvbnN0IHVzZUJsb2IgPSBfQmxvYiAmJiB1dGlscy5pc1NwZWNDb21wbGlhbnRGb3JtKGZvcm1EYXRhKTtcblxuICBpZiAoIXV0aWxzLmlzRnVuY3Rpb24odmlzaXRvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd2aXNpdG9yIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICB9XG5cbiAgZnVuY3Rpb24gY29udmVydFZhbHVlKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID09PSBudWxsKSByZXR1cm4gJyc7XG5cbiAgICBpZiAodXRpbHMuaXNEYXRlKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIHZhbHVlLnRvSVNPU3RyaW5nKCk7XG4gICAgfVxuXG4gICAgaWYgKCF1c2VCbG9iICYmIHV0aWxzLmlzQmxvYih2YWx1ZSkpIHtcbiAgICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKCdCbG9iIGlzIG5vdCBzdXBwb3J0ZWQuIFVzZSBhIEJ1ZmZlciBpbnN0ZWFkLicpO1xuICAgIH1cblxuICAgIGlmICh1dGlscy5pc0FycmF5QnVmZmVyKHZhbHVlKSB8fCB1dGlscy5pc1R5cGVkQXJyYXkodmFsdWUpKSB7XG4gICAgICByZXR1cm4gdXNlQmxvYiAmJiB0eXBlb2YgQmxvYiA9PT0gJ2Z1bmN0aW9uJyA/IG5ldyBCbG9iKFt2YWx1ZV0pIDogQnVmZmVyLmZyb20odmFsdWUpO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWZhdWx0IHZpc2l0b3IuXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAgICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfSBrZXlcbiAgICogQHBhcmFtIHtBcnJheTxTdHJpbmd8TnVtYmVyPn0gcGF0aFxuICAgKiBAdGhpcyB7Rm9ybURhdGF9XG4gICAqXG4gICAqIEByZXR1cm5zIHtib29sZWFufSByZXR1cm4gdHJ1ZSB0byB2aXNpdCB0aGUgZWFjaCBwcm9wIG9mIHRoZSB2YWx1ZSByZWN1cnNpdmVseVxuICAgKi9cbiAgZnVuY3Rpb24gZGVmYXVsdFZpc2l0b3IodmFsdWUsIGtleSwgcGF0aCkge1xuICAgIGxldCBhcnIgPSB2YWx1ZTtcblxuICAgIGlmICh2YWx1ZSAmJiAhcGF0aCAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgICBpZiAodXRpbHMuZW5kc1dpdGgoa2V5LCAne30nKSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgICAga2V5ID0gbWV0YVRva2VucyA/IGtleSA6IGtleS5zbGljZSgwLCAtMik7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICB2YWx1ZSA9IEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcbiAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICh1dGlscy5pc0FycmF5KHZhbHVlKSAmJiBpc0ZsYXRBcnJheSh2YWx1ZSkpIHx8XG4gICAgICAgICgodXRpbHMuaXNGaWxlTGlzdCh2YWx1ZSkgfHwgdXRpbHMuZW5kc1dpdGgoa2V5LCAnW10nKSkgJiYgKGFyciA9IHV0aWxzLnRvQXJyYXkodmFsdWUpKVxuICAgICAgICApKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICBrZXkgPSByZW1vdmVCcmFja2V0cyhrZXkpO1xuXG4gICAgICAgIGFyci5mb3JFYWNoKGZ1bmN0aW9uIGVhY2goZWwsIGluZGV4KSB7XG4gICAgICAgICAgISh1dGlscy5pc1VuZGVmaW5lZChlbCkgfHwgZWwgPT09IG51bGwpICYmIGZvcm1EYXRhLmFwcGVuZChcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXN0ZWQtdGVybmFyeVxuICAgICAgICAgICAgaW5kZXhlcyA9PT0gdHJ1ZSA/IHJlbmRlcktleShba2V5XSwgaW5kZXgsIGRvdHMpIDogKGluZGV4ZXMgPT09IG51bGwgPyBrZXkgOiBrZXkgKyAnW10nKSxcbiAgICAgICAgICAgIGNvbnZlcnRWYWx1ZShlbClcbiAgICAgICAgICApO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChpc1Zpc2l0YWJsZSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGZvcm1EYXRhLmFwcGVuZChyZW5kZXJLZXkocGF0aCwga2V5LCBkb3RzKSwgY29udmVydFZhbHVlKHZhbHVlKSk7XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBjb25zdCBzdGFjayA9IFtdO1xuXG4gIGNvbnN0IGV4cG9zZWRIZWxwZXJzID0gT2JqZWN0LmFzc2lnbihwcmVkaWNhdGVzLCB7XG4gICAgZGVmYXVsdFZpc2l0b3IsXG4gICAgY29udmVydFZhbHVlLFxuICAgIGlzVmlzaXRhYmxlXG4gIH0pO1xuXG4gIGZ1bmN0aW9uIGJ1aWxkKHZhbHVlLCBwYXRoKSB7XG4gICAgaWYgKHV0aWxzLmlzVW5kZWZpbmVkKHZhbHVlKSkgcmV0dXJuO1xuXG4gICAgaWYgKHN0YWNrLmluZGV4T2YodmFsdWUpICE9PSAtMSkge1xuICAgICAgdGhyb3cgRXJyb3IoJ0NpcmN1bGFyIHJlZmVyZW5jZSBkZXRlY3RlZCBpbiAnICsgcGF0aC5qb2luKCcuJykpO1xuICAgIH1cblxuICAgIHN0YWNrLnB1c2godmFsdWUpO1xuXG4gICAgdXRpbHMuZm9yRWFjaCh2YWx1ZSwgZnVuY3Rpb24gZWFjaChlbCwga2V5KSB7XG4gICAgICBjb25zdCByZXN1bHQgPSAhKHV0aWxzLmlzVW5kZWZpbmVkKGVsKSB8fCBlbCA9PT0gbnVsbCkgJiYgdmlzaXRvci5jYWxsKFxuICAgICAgICBmb3JtRGF0YSwgZWwsIHV0aWxzLmlzU3RyaW5nKGtleSkgPyBrZXkudHJpbSgpIDoga2V5LCBwYXRoLCBleHBvc2VkSGVscGVyc1xuICAgICAgKTtcblxuICAgICAgaWYgKHJlc3VsdCA9PT0gdHJ1ZSkge1xuICAgICAgICBidWlsZChlbCwgcGF0aCA/IHBhdGguY29uY2F0KGtleSkgOiBba2V5XSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBzdGFjay5wb3AoKTtcbiAgfVxuXG4gIGlmICghdXRpbHMuaXNPYmplY3Qob2JqKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2RhdGEgbXVzdCBiZSBhbiBvYmplY3QnKTtcbiAgfVxuXG4gIGJ1aWxkKG9iaik7XG5cbiAgcmV0dXJuIGZvcm1EYXRhO1xufVxuXG5leHBvcnQgZGVmYXVsdCB0b0Zvcm1EYXRhO1xuIiwgIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHRvRm9ybURhdGEgZnJvbSAnLi90b0Zvcm1EYXRhLmpzJztcblxuLyoqXG4gKiBJdCBlbmNvZGVzIGEgc3RyaW5nIGJ5IHJlcGxhY2luZyBhbGwgY2hhcmFjdGVycyB0aGF0IGFyZSBub3QgaW4gdGhlIHVucmVzZXJ2ZWQgc2V0IHdpdGhcbiAqIHRoZWlyIHBlcmNlbnQtZW5jb2RlZCBlcXVpdmFsZW50c1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgLSBUaGUgc3RyaW5nIHRvIGVuY29kZS5cbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZW5jb2RlZCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIGVuY29kZShzdHIpIHtcbiAgY29uc3QgY2hhck1hcCA9IHtcbiAgICAnISc6ICclMjEnLFxuICAgIFwiJ1wiOiAnJTI3JyxcbiAgICAnKCc6ICclMjgnLFxuICAgICcpJzogJyUyOScsXG4gICAgJ34nOiAnJTdFJyxcbiAgICAnJTIwJzogJysnLFxuICAgICclMDAnOiAnXFx4MDAnXG4gIH07XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQoc3RyKS5yZXBsYWNlKC9bIScoKX5dfCUyMHwlMDAvZywgZnVuY3Rpb24gcmVwbGFjZXIobWF0Y2gpIHtcbiAgICByZXR1cm4gY2hhck1hcFttYXRjaF07XG4gIH0pO1xufVxuXG4vKipcbiAqIEl0IHRha2VzIGEgcGFyYW1zIG9iamVjdCBhbmQgY29udmVydHMgaXQgdG8gYSBGb3JtRGF0YSBvYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdDxzdHJpbmcsIGFueT59IHBhcmFtcyAtIFRoZSBwYXJhbWV0ZXJzIHRvIGJlIGNvbnZlcnRlZCB0byBhIEZvcm1EYXRhIG9iamVjdC5cbiAqIEBwYXJhbSB7T2JqZWN0PHN0cmluZywgYW55Pn0gb3B0aW9ucyAtIFRoZSBvcHRpb25zIG9iamVjdCBwYXNzZWQgdG8gdGhlIEF4aW9zIGNvbnN0cnVjdG9yLlxuICpcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5mdW5jdGlvbiBBeGlvc1VSTFNlYXJjaFBhcmFtcyhwYXJhbXMsIG9wdGlvbnMpIHtcbiAgdGhpcy5fcGFpcnMgPSBbXTtcblxuICBwYXJhbXMgJiYgdG9Gb3JtRGF0YShwYXJhbXMsIHRoaXMsIG9wdGlvbnMpO1xufVxuXG5jb25zdCBwcm90b3R5cGUgPSBBeGlvc1VSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGU7XG5cbnByb3RvdHlwZS5hcHBlbmQgPSBmdW5jdGlvbiBhcHBlbmQobmFtZSwgdmFsdWUpIHtcbiAgdGhpcy5fcGFpcnMucHVzaChbbmFtZSwgdmFsdWVdKTtcbn07XG5cbnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKGVuY29kZXIpIHtcbiAgY29uc3QgX2VuY29kZSA9IGVuY29kZXIgPyBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiBlbmNvZGVyLmNhbGwodGhpcywgdmFsdWUsIGVuY29kZSk7XG4gIH0gOiBlbmNvZGU7XG5cbiAgcmV0dXJuIHRoaXMuX3BhaXJzLm1hcChmdW5jdGlvbiBlYWNoKHBhaXIpIHtcbiAgICByZXR1cm4gX2VuY29kZShwYWlyWzBdKSArICc9JyArIF9lbmNvZGUocGFpclsxXSk7XG4gIH0sICcnKS5qb2luKCcmJyk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBBeGlvc1VSTFNlYXJjaFBhcmFtcztcbiIsICIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5pbXBvcnQgQXhpb3NVUkxTZWFyY2hQYXJhbXMgZnJvbSAnLi4vaGVscGVycy9BeGlvc1VSTFNlYXJjaFBhcmFtcy5qcyc7XG5cbi8qKlxuICogSXQgcmVwbGFjZXMgYWxsIGluc3RhbmNlcyBvZiB0aGUgY2hhcmFjdGVycyBgOmAsIGAkYCwgYCxgLCBgK2AsIGBbYCwgYW5kIGBdYCB3aXRoIHRoZWlyXG4gKiBVUkkgZW5jb2RlZCBjb3VudGVycGFydHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsIFRoZSB2YWx1ZSB0byBiZSBlbmNvZGVkLlxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBlbmNvZGVkIHZhbHVlLlxuICovXG5mdW5jdGlvbiBlbmNvZGUodmFsKSB7XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQodmFsKS5cbiAgICByZXBsYWNlKC8lM0EvZ2ksICc6JykuXG4gICAgcmVwbGFjZSgvJTI0L2csICckJykuXG4gICAgcmVwbGFjZSgvJTJDL2dpLCAnLCcpLlxuICAgIHJlcGxhY2UoLyUyMC9nLCAnKycpLlxuICAgIHJlcGxhY2UoLyU1Qi9naSwgJ1snKS5cbiAgICByZXBsYWNlKC8lNUQvZ2ksICddJyk7XG59XG5cbi8qKlxuICogQnVpbGQgYSBVUkwgYnkgYXBwZW5kaW5nIHBhcmFtcyB0byB0aGUgZW5kXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgYmFzZSBvZiB0aGUgdXJsIChlLmcuLCBodHRwOi8vd3d3Lmdvb2dsZS5jb20pXG4gKiBAcGFyYW0ge29iamVjdH0gW3BhcmFtc10gVGhlIHBhcmFtcyB0byBiZSBhcHBlbmRlZFxuICogQHBhcmFtIHs/KG9iamVjdHxGdW5jdGlvbil9IG9wdGlvbnNcbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZm9ybWF0dGVkIHVybFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBidWlsZFVSTCh1cmwsIHBhcmFtcywgb3B0aW9ucykge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgaWYgKCFwYXJhbXMpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG4gIFxuICBjb25zdCBfZW5jb2RlID0gb3B0aW9ucyAmJiBvcHRpb25zLmVuY29kZSB8fCBlbmNvZGU7XG5cbiAgaWYgKHV0aWxzLmlzRnVuY3Rpb24ob3B0aW9ucykpIHtcbiAgICBvcHRpb25zID0ge1xuICAgICAgc2VyaWFsaXplOiBvcHRpb25zXG4gICAgfTtcbiAgfSBcblxuICBjb25zdCBzZXJpYWxpemVGbiA9IG9wdGlvbnMgJiYgb3B0aW9ucy5zZXJpYWxpemU7XG5cbiAgbGV0IHNlcmlhbGl6ZWRQYXJhbXM7XG5cbiAgaWYgKHNlcmlhbGl6ZUZuKSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHNlcmlhbGl6ZUZuKHBhcmFtcywgb3B0aW9ucyk7XG4gIH0gZWxzZSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKHBhcmFtcykgP1xuICAgICAgcGFyYW1zLnRvU3RyaW5nKCkgOlxuICAgICAgbmV3IEF4aW9zVVJMU2VhcmNoUGFyYW1zKHBhcmFtcywgb3B0aW9ucykudG9TdHJpbmcoX2VuY29kZSk7XG4gIH1cblxuICBpZiAoc2VyaWFsaXplZFBhcmFtcykge1xuICAgIGNvbnN0IGhhc2htYXJrSW5kZXggPSB1cmwuaW5kZXhPZihcIiNcIik7XG5cbiAgICBpZiAoaGFzaG1hcmtJbmRleCAhPT0gLTEpIHtcbiAgICAgIHVybCA9IHVybC5zbGljZSgwLCBoYXNobWFya0luZGV4KTtcbiAgICB9XG4gICAgdXJsICs9ICh1cmwuaW5kZXhPZignPycpID09PSAtMSA/ICc/JyA6ICcmJykgKyBzZXJpYWxpemVkUGFyYW1zO1xuICB9XG5cbiAgcmV0dXJuIHVybDtcbn1cbiIsICIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLy4uL3V0aWxzLmpzJztcblxuY2xhc3MgSW50ZXJjZXB0b3JNYW5hZ2VyIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5oYW5kbGVycyA9IFtdO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBhIG5ldyBpbnRlcmNlcHRvciB0byB0aGUgc3RhY2tcbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVsZmlsbGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHRoZW5gIGZvciBhIGBQcm9taXNlYFxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3RlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGByZWplY3RgIGZvciBhIGBQcm9taXNlYFxuICAgKlxuICAgKiBAcmV0dXJuIHtOdW1iZXJ9IEFuIElEIHVzZWQgdG8gcmVtb3ZlIGludGVyY2VwdG9yIGxhdGVyXG4gICAqL1xuICB1c2UoZnVsZmlsbGVkLCByZWplY3RlZCwgb3B0aW9ucykge1xuICAgIHRoaXMuaGFuZGxlcnMucHVzaCh7XG4gICAgICBmdWxmaWxsZWQsXG4gICAgICByZWplY3RlZCxcbiAgICAgIHN5bmNocm9ub3VzOiBvcHRpb25zID8gb3B0aW9ucy5zeW5jaHJvbm91cyA6IGZhbHNlLFxuICAgICAgcnVuV2hlbjogb3B0aW9ucyA/IG9wdGlvbnMucnVuV2hlbiA6IG51bGxcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5oYW5kbGVycy5sZW5ndGggLSAxO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBhbiBpbnRlcmNlcHRvciBmcm9tIHRoZSBzdGFja1xuICAgKlxuICAgKiBAcGFyYW0ge051bWJlcn0gaWQgVGhlIElEIHRoYXQgd2FzIHJldHVybmVkIGJ5IGB1c2VgXG4gICAqXG4gICAqIEByZXR1cm5zIHtCb29sZWFufSBgdHJ1ZWAgaWYgdGhlIGludGVyY2VwdG9yIHdhcyByZW1vdmVkLCBgZmFsc2VgIG90aGVyd2lzZVxuICAgKi9cbiAgZWplY3QoaWQpIHtcbiAgICBpZiAodGhpcy5oYW5kbGVyc1tpZF0pIHtcbiAgICAgIHRoaXMuaGFuZGxlcnNbaWRdID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2xlYXIgYWxsIGludGVyY2VwdG9ycyBmcm9tIHRoZSBzdGFja1xuICAgKlxuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG4gIGNsZWFyKCkge1xuICAgIGlmICh0aGlzLmhhbmRsZXJzKSB7XG4gICAgICB0aGlzLmhhbmRsZXJzID0gW107XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEl0ZXJhdGUgb3ZlciBhbGwgdGhlIHJlZ2lzdGVyZWQgaW50ZXJjZXB0b3JzXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGlzIHBhcnRpY3VsYXJseSB1c2VmdWwgZm9yIHNraXBwaW5nIG92ZXIgYW55XG4gICAqIGludGVyY2VwdG9ycyB0aGF0IG1heSBoYXZlIGJlY29tZSBgbnVsbGAgY2FsbGluZyBgZWplY3RgLlxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gY2FsbCBmb3IgZWFjaCBpbnRlcmNlcHRvclxuICAgKlxuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG4gIGZvckVhY2goZm4pIHtcbiAgICB1dGlscy5mb3JFYWNoKHRoaXMuaGFuZGxlcnMsIGZ1bmN0aW9uIGZvckVhY2hIYW5kbGVyKGgpIHtcbiAgICAgIGlmIChoICE9PSBudWxsKSB7XG4gICAgICAgIGZuKGgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEludGVyY2VwdG9yTWFuYWdlcjtcbiIsICIndXNlIHN0cmljdCc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgc2lsZW50SlNPTlBhcnNpbmc6IHRydWUsXG4gIGZvcmNlZEpTT05QYXJzaW5nOiB0cnVlLFxuICBjbGFyaWZ5VGltZW91dEVycm9yOiBmYWxzZVxufTtcbiIsICIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBBeGlvc1VSTFNlYXJjaFBhcmFtcyBmcm9tICcuLi8uLi8uLi9oZWxwZXJzL0F4aW9zVVJMU2VhcmNoUGFyYW1zLmpzJztcbmV4cG9ydCBkZWZhdWx0IHR5cGVvZiBVUkxTZWFyY2hQYXJhbXMgIT09ICd1bmRlZmluZWQnID8gVVJMU2VhcmNoUGFyYW1zIDogQXhpb3NVUkxTZWFyY2hQYXJhbXM7XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnQgZGVmYXVsdCB0eXBlb2YgRm9ybURhdGEgIT09ICd1bmRlZmluZWQnID8gRm9ybURhdGEgOiBudWxsO1xuIiwgIid1c2Ugc3RyaWN0J1xuXG5leHBvcnQgZGVmYXVsdCB0eXBlb2YgQmxvYiAhPT0gJ3VuZGVmaW5lZCcgPyBCbG9iIDogbnVsbFxuIiwgImltcG9ydCBVUkxTZWFyY2hQYXJhbXMgZnJvbSAnLi9jbGFzc2VzL1VSTFNlYXJjaFBhcmFtcy5qcydcbmltcG9ydCBGb3JtRGF0YSBmcm9tICcuL2NsYXNzZXMvRm9ybURhdGEuanMnXG5pbXBvcnQgQmxvYiBmcm9tICcuL2NsYXNzZXMvQmxvYi5qcydcblxuZXhwb3J0IGRlZmF1bHQge1xuICBpc0Jyb3dzZXI6IHRydWUsXG4gIGNsYXNzZXM6IHtcbiAgICBVUkxTZWFyY2hQYXJhbXMsXG4gICAgRm9ybURhdGEsXG4gICAgQmxvYlxuICB9LFxuICBwcm90b2NvbHM6IFsnaHR0cCcsICdodHRwcycsICdmaWxlJywgJ2Jsb2InLCAndXJsJywgJ2RhdGEnXVxufTtcbiIsICJjb25zdCBoYXNCcm93c2VyRW52ID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJztcblxuY29uc3QgX25hdmlnYXRvciA9IHR5cGVvZiBuYXZpZ2F0b3IgPT09ICdvYmplY3QnICYmIG5hdmlnYXRvciB8fCB1bmRlZmluZWQ7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIHdlJ3JlIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50XG4gKlxuICogVGhpcyBhbGxvd3MgYXhpb3MgdG8gcnVuIGluIGEgd2ViIHdvcmtlciwgYW5kIHJlYWN0LW5hdGl2ZS5cbiAqIEJvdGggZW52aXJvbm1lbnRzIHN1cHBvcnQgWE1MSHR0cFJlcXVlc3QsIGJ1dCBub3QgZnVsbHkgc3RhbmRhcmQgZ2xvYmFscy5cbiAqXG4gKiB3ZWIgd29ya2VyczpcbiAqICB0eXBlb2Ygd2luZG93IC0+IHVuZGVmaW5lZFxuICogIHR5cGVvZiBkb2N1bWVudCAtPiB1bmRlZmluZWRcbiAqXG4gKiByZWFjdC1uYXRpdmU6XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ1JlYWN0TmF0aXZlJ1xuICogbmF0aXZlc2NyaXB0XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ05hdGl2ZVNjcmlwdCcgb3IgJ05TJ1xuICpcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5jb25zdCBoYXNTdGFuZGFyZEJyb3dzZXJFbnYgPSBoYXNCcm93c2VyRW52ICYmXG4gICghX25hdmlnYXRvciB8fCBbJ1JlYWN0TmF0aXZlJywgJ05hdGl2ZVNjcmlwdCcsICdOUyddLmluZGV4T2YoX25hdmlnYXRvci5wcm9kdWN0KSA8IDApO1xuXG4vKipcbiAqIERldGVybWluZSBpZiB3ZSdyZSBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciB3ZWJXb3JrZXIgZW52aXJvbm1lbnRcbiAqXG4gKiBBbHRob3VnaCB0aGUgYGlzU3RhbmRhcmRCcm93c2VyRW52YCBtZXRob2QgaW5kaWNhdGVzIHRoYXRcbiAqIGBhbGxvd3MgYXhpb3MgdG8gcnVuIGluIGEgd2ViIHdvcmtlcmAsIHRoZSBXZWJXb3JrZXIgd2lsbCBzdGlsbCBiZVxuICogZmlsdGVyZWQgb3V0IGR1ZSB0byBpdHMganVkZ21lbnQgc3RhbmRhcmRcbiAqIGB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnYC5cbiAqIFRoaXMgbGVhZHMgdG8gYSBwcm9ibGVtIHdoZW4gYXhpb3MgcG9zdCBgRm9ybURhdGFgIGluIHdlYldvcmtlclxuICovXG5jb25zdCBoYXNTdGFuZGFyZEJyb3dzZXJXZWJXb3JrZXJFbnYgPSAoKCkgPT4ge1xuICByZXR1cm4gKFxuICAgIHR5cGVvZiBXb3JrZXJHbG9iYWxTY29wZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgICBzZWxmIGluc3RhbmNlb2YgV29ya2VyR2xvYmFsU2NvcGUgJiZcbiAgICB0eXBlb2Ygc2VsZi5pbXBvcnRTY3JpcHRzID09PSAnZnVuY3Rpb24nXG4gICk7XG59KSgpO1xuXG5jb25zdCBvcmlnaW4gPSBoYXNCcm93c2VyRW52ICYmIHdpbmRvdy5sb2NhdGlvbi5ocmVmIHx8ICdodHRwOi8vbG9jYWxob3N0JztcblxuZXhwb3J0IHtcbiAgaGFzQnJvd3NlckVudixcbiAgaGFzU3RhbmRhcmRCcm93c2VyV2ViV29ya2VyRW52LFxuICBoYXNTdGFuZGFyZEJyb3dzZXJFbnYsXG4gIF9uYXZpZ2F0b3IgYXMgbmF2aWdhdG9yLFxuICBvcmlnaW5cbn1cbiIsICJpbXBvcnQgcGxhdGZvcm0gZnJvbSAnLi9ub2RlL2luZGV4LmpzJztcbmltcG9ydCAqIGFzIHV0aWxzIGZyb20gJy4vY29tbW9uL3V0aWxzLmpzJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICAuLi51dGlscyxcbiAgLi4ucGxhdGZvcm1cbn1cbiIsICIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5pbXBvcnQgdG9Gb3JtRGF0YSBmcm9tICcuL3RvRm9ybURhdGEuanMnO1xuaW1wb3J0IHBsYXRmb3JtIGZyb20gJy4uL3BsYXRmb3JtL2luZGV4LmpzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdG9VUkxFbmNvZGVkRm9ybShkYXRhLCBvcHRpb25zKSB7XG4gIHJldHVybiB0b0Zvcm1EYXRhKGRhdGEsIG5ldyBwbGF0Zm9ybS5jbGFzc2VzLlVSTFNlYXJjaFBhcmFtcygpLCBPYmplY3QuYXNzaWduKHtcbiAgICB2aXNpdG9yOiBmdW5jdGlvbih2YWx1ZSwga2V5LCBwYXRoLCBoZWxwZXJzKSB7XG4gICAgICBpZiAocGxhdGZvcm0uaXNOb2RlICYmIHV0aWxzLmlzQnVmZmVyKHZhbHVlKSkge1xuICAgICAgICB0aGlzLmFwcGVuZChrZXksIHZhbHVlLnRvU3RyaW5nKCdiYXNlNjQnKSk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGhlbHBlcnMuZGVmYXVsdFZpc2l0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG4gIH0sIG9wdGlvbnMpKTtcbn1cbiIsICIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5cbi8qKlxuICogSXQgdGFrZXMgYSBzdHJpbmcgbGlrZSBgZm9vW3hdW3ldW3pdYCBhbmQgcmV0dXJucyBhbiBhcnJheSBsaWtlIGBbJ2ZvbycsICd4JywgJ3knLCAneiddXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICpcbiAqIEByZXR1cm5zIEFuIGFycmF5IG9mIHN0cmluZ3MuXG4gKi9cbmZ1bmN0aW9uIHBhcnNlUHJvcFBhdGgobmFtZSkge1xuICAvLyBmb29beF1beV1bel1cbiAgLy8gZm9vLngueS56XG4gIC8vIGZvby14LXktelxuICAvLyBmb28geCB5IHpcbiAgcmV0dXJuIHV0aWxzLm1hdGNoQWxsKC9cXHcrfFxcWyhcXHcqKV0vZywgbmFtZSkubWFwKG1hdGNoID0+IHtcbiAgICByZXR1cm4gbWF0Y2hbMF0gPT09ICdbXScgPyAnJyA6IG1hdGNoWzFdIHx8IG1hdGNoWzBdO1xuICB9KTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0IGFuIGFycmF5IHRvIGFuIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0ge0FycmF5PGFueT59IGFyciAtIFRoZSBhcnJheSB0byBjb252ZXJ0IHRvIGFuIG9iamVjdC5cbiAqXG4gKiBAcmV0dXJucyBBbiBvYmplY3Qgd2l0aCB0aGUgc2FtZSBrZXlzIGFuZCB2YWx1ZXMgYXMgdGhlIGFycmF5LlxuICovXG5mdW5jdGlvbiBhcnJheVRvT2JqZWN0KGFycikge1xuICBjb25zdCBvYmogPSB7fTtcbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGFycik7XG4gIGxldCBpO1xuICBjb25zdCBsZW4gPSBrZXlzLmxlbmd0aDtcbiAgbGV0IGtleTtcbiAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAga2V5ID0ga2V5c1tpXTtcbiAgICBvYmpba2V5XSA9IGFycltrZXldO1xuICB9XG4gIHJldHVybiBvYmo7XG59XG5cbi8qKlxuICogSXQgdGFrZXMgYSBGb3JtRGF0YSBvYmplY3QgYW5kIHJldHVybnMgYSBKYXZhU2NyaXB0IG9iamVjdFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBmb3JtRGF0YSBUaGUgRm9ybURhdGEgb2JqZWN0IHRvIGNvbnZlcnQgdG8gSlNPTi5cbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0PHN0cmluZywgYW55PiB8IG51bGx9IFRoZSBjb252ZXJ0ZWQgb2JqZWN0LlxuICovXG5mdW5jdGlvbiBmb3JtRGF0YVRvSlNPTihmb3JtRGF0YSkge1xuICBmdW5jdGlvbiBidWlsZFBhdGgocGF0aCwgdmFsdWUsIHRhcmdldCwgaW5kZXgpIHtcbiAgICBsZXQgbmFtZSA9IHBhdGhbaW5kZXgrK107XG5cbiAgICBpZiAobmFtZSA9PT0gJ19fcHJvdG9fXycpIHJldHVybiB0cnVlO1xuXG4gICAgY29uc3QgaXNOdW1lcmljS2V5ID0gTnVtYmVyLmlzRmluaXRlKCtuYW1lKTtcbiAgICBjb25zdCBpc0xhc3QgPSBpbmRleCA+PSBwYXRoLmxlbmd0aDtcbiAgICBuYW1lID0gIW5hbWUgJiYgdXRpbHMuaXNBcnJheSh0YXJnZXQpID8gdGFyZ2V0Lmxlbmd0aCA6IG5hbWU7XG5cbiAgICBpZiAoaXNMYXN0KSB7XG4gICAgICBpZiAodXRpbHMuaGFzT3duUHJvcCh0YXJnZXQsIG5hbWUpKSB7XG4gICAgICAgIHRhcmdldFtuYW1lXSA9IFt0YXJnZXRbbmFtZV0sIHZhbHVlXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRhcmdldFtuYW1lXSA9IHZhbHVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gIWlzTnVtZXJpY0tleTtcbiAgICB9XG5cbiAgICBpZiAoIXRhcmdldFtuYW1lXSB8fCAhdXRpbHMuaXNPYmplY3QodGFyZ2V0W25hbWVdKSkge1xuICAgICAgdGFyZ2V0W25hbWVdID0gW107XG4gICAgfVxuXG4gICAgY29uc3QgcmVzdWx0ID0gYnVpbGRQYXRoKHBhdGgsIHZhbHVlLCB0YXJnZXRbbmFtZV0sIGluZGV4KTtcblxuICAgIGlmIChyZXN1bHQgJiYgdXRpbHMuaXNBcnJheSh0YXJnZXRbbmFtZV0pKSB7XG4gICAgICB0YXJnZXRbbmFtZV0gPSBhcnJheVRvT2JqZWN0KHRhcmdldFtuYW1lXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuICFpc051bWVyaWNLZXk7XG4gIH1cblxuICBpZiAodXRpbHMuaXNGb3JtRGF0YShmb3JtRGF0YSkgJiYgdXRpbHMuaXNGdW5jdGlvbihmb3JtRGF0YS5lbnRyaWVzKSkge1xuICAgIGNvbnN0IG9iaiA9IHt9O1xuXG4gICAgdXRpbHMuZm9yRWFjaEVudHJ5KGZvcm1EYXRhLCAobmFtZSwgdmFsdWUpID0+IHtcbiAgICAgIGJ1aWxkUGF0aChwYXJzZVByb3BQYXRoKG5hbWUpLCB2YWx1ZSwgb2JqLCAwKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBvYmo7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZm9ybURhdGFUb0pTT047XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuaW1wb3J0IEF4aW9zRXJyb3IgZnJvbSAnLi4vY29yZS9BeGlvc0Vycm9yLmpzJztcbmltcG9ydCB0cmFuc2l0aW9uYWxEZWZhdWx0cyBmcm9tICcuL3RyYW5zaXRpb25hbC5qcyc7XG5pbXBvcnQgdG9Gb3JtRGF0YSBmcm9tICcuLi9oZWxwZXJzL3RvRm9ybURhdGEuanMnO1xuaW1wb3J0IHRvVVJMRW5jb2RlZEZvcm0gZnJvbSAnLi4vaGVscGVycy90b1VSTEVuY29kZWRGb3JtLmpzJztcbmltcG9ydCBwbGF0Zm9ybSBmcm9tICcuLi9wbGF0Zm9ybS9pbmRleC5qcyc7XG5pbXBvcnQgZm9ybURhdGFUb0pTT04gZnJvbSAnLi4vaGVscGVycy9mb3JtRGF0YVRvSlNPTi5qcyc7XG5cbi8qKlxuICogSXQgdGFrZXMgYSBzdHJpbmcsIHRyaWVzIHRvIHBhcnNlIGl0LCBhbmQgaWYgaXQgZmFpbHMsIGl0IHJldHVybnMgdGhlIHN0cmluZ2lmaWVkIHZlcnNpb25cbiAqIG9mIHRoZSBpbnB1dFxuICpcbiAqIEBwYXJhbSB7YW55fSByYXdWYWx1ZSAtIFRoZSB2YWx1ZSB0byBiZSBzdHJpbmdpZmllZC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHBhcnNlciAtIEEgZnVuY3Rpb24gdGhhdCBwYXJzZXMgYSBzdHJpbmcgaW50byBhIEphdmFTY3JpcHQgb2JqZWN0LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZW5jb2RlciAtIEEgZnVuY3Rpb24gdGhhdCB0YWtlcyBhIHZhbHVlIGFuZCByZXR1cm5zIGEgc3RyaW5nLlxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgc3RyaW5naWZpZWQgdmVyc2lvbiBvZiB0aGUgcmF3VmFsdWUuXG4gKi9cbmZ1bmN0aW9uIHN0cmluZ2lmeVNhZmVseShyYXdWYWx1ZSwgcGFyc2VyLCBlbmNvZGVyKSB7XG4gIGlmICh1dGlscy5pc1N0cmluZyhyYXdWYWx1ZSkpIHtcbiAgICB0cnkge1xuICAgICAgKHBhcnNlciB8fCBKU09OLnBhcnNlKShyYXdWYWx1ZSk7XG4gICAgICByZXR1cm4gdXRpbHMudHJpbShyYXdWYWx1ZSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaWYgKGUubmFtZSAhPT0gJ1N5bnRheEVycm9yJykge1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAoZW5jb2RlciB8fCBKU09OLnN0cmluZ2lmeSkocmF3VmFsdWUpO1xufVxuXG5jb25zdCBkZWZhdWx0cyA9IHtcblxuICB0cmFuc2l0aW9uYWw6IHRyYW5zaXRpb25hbERlZmF1bHRzLFxuXG4gIGFkYXB0ZXI6IFsneGhyJywgJ2h0dHAnLCAnZmV0Y2gnXSxcblxuICB0cmFuc2Zvcm1SZXF1ZXN0OiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVxdWVzdChkYXRhLCBoZWFkZXJzKSB7XG4gICAgY29uc3QgY29udGVudFR5cGUgPSBoZWFkZXJzLmdldENvbnRlbnRUeXBlKCkgfHwgJyc7XG4gICAgY29uc3QgaGFzSlNPTkNvbnRlbnRUeXBlID0gY29udGVudFR5cGUuaW5kZXhPZignYXBwbGljYXRpb24vanNvbicpID4gLTE7XG4gICAgY29uc3QgaXNPYmplY3RQYXlsb2FkID0gdXRpbHMuaXNPYmplY3QoZGF0YSk7XG5cbiAgICBpZiAoaXNPYmplY3RQYXlsb2FkICYmIHV0aWxzLmlzSFRNTEZvcm0oZGF0YSkpIHtcbiAgICAgIGRhdGEgPSBuZXcgRm9ybURhdGEoZGF0YSk7XG4gICAgfVxuXG4gICAgY29uc3QgaXNGb3JtRGF0YSA9IHV0aWxzLmlzRm9ybURhdGEoZGF0YSk7XG5cbiAgICBpZiAoaXNGb3JtRGF0YSkge1xuICAgICAgcmV0dXJuIGhhc0pTT05Db250ZW50VHlwZSA/IEpTT04uc3RyaW5naWZ5KGZvcm1EYXRhVG9KU09OKGRhdGEpKSA6IGRhdGE7XG4gICAgfVxuXG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc1N0cmVhbShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNGaWxlKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0Jsb2IoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzUmVhZGFibGVTdHJlYW0oZGF0YSlcbiAgICApIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNBcnJheUJ1ZmZlclZpZXcoZGF0YSkpIHtcbiAgICAgIHJldHVybiBkYXRhLmJ1ZmZlcjtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKGRhdGEpKSB7XG4gICAgICBoZWFkZXJzLnNldENvbnRlbnRUeXBlKCdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD11dGYtOCcsIGZhbHNlKTtcbiAgICAgIHJldHVybiBkYXRhLnRvU3RyaW5nKCk7XG4gICAgfVxuXG4gICAgbGV0IGlzRmlsZUxpc3Q7XG5cbiAgICBpZiAoaXNPYmplY3RQYXlsb2FkKSB7XG4gICAgICBpZiAoY29udGVudFR5cGUuaW5kZXhPZignYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJykgPiAtMSkge1xuICAgICAgICByZXR1cm4gdG9VUkxFbmNvZGVkRm9ybShkYXRhLCB0aGlzLmZvcm1TZXJpYWxpemVyKS50b1N0cmluZygpO1xuICAgICAgfVxuXG4gICAgICBpZiAoKGlzRmlsZUxpc3QgPSB1dGlscy5pc0ZpbGVMaXN0KGRhdGEpKSB8fCBjb250ZW50VHlwZS5pbmRleE9mKCdtdWx0aXBhcnQvZm9ybS1kYXRhJykgPiAtMSkge1xuICAgICAgICBjb25zdCBfRm9ybURhdGEgPSB0aGlzLmVudiAmJiB0aGlzLmVudi5Gb3JtRGF0YTtcblxuICAgICAgICByZXR1cm4gdG9Gb3JtRGF0YShcbiAgICAgICAgICBpc0ZpbGVMaXN0ID8geydmaWxlc1tdJzogZGF0YX0gOiBkYXRhLFxuICAgICAgICAgIF9Gb3JtRGF0YSAmJiBuZXcgX0Zvcm1EYXRhKCksXG4gICAgICAgICAgdGhpcy5mb3JtU2VyaWFsaXplclxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChpc09iamVjdFBheWxvYWQgfHwgaGFzSlNPTkNvbnRlbnRUeXBlICkge1xuICAgICAgaGVhZGVycy5zZXRDb250ZW50VHlwZSgnYXBwbGljYXRpb24vanNvbicsIGZhbHNlKTtcbiAgICAgIHJldHVybiBzdHJpbmdpZnlTYWZlbHkoZGF0YSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRhdGE7XG4gIH1dLFxuXG4gIHRyYW5zZm9ybVJlc3BvbnNlOiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVzcG9uc2UoZGF0YSkge1xuICAgIGNvbnN0IHRyYW5zaXRpb25hbCA9IHRoaXMudHJhbnNpdGlvbmFsIHx8IGRlZmF1bHRzLnRyYW5zaXRpb25hbDtcbiAgICBjb25zdCBmb3JjZWRKU09OUGFyc2luZyA9IHRyYW5zaXRpb25hbCAmJiB0cmFuc2l0aW9uYWwuZm9yY2VkSlNPTlBhcnNpbmc7XG4gICAgY29uc3QgSlNPTlJlcXVlc3RlZCA9IHRoaXMucmVzcG9uc2VUeXBlID09PSAnanNvbic7XG5cbiAgICBpZiAodXRpbHMuaXNSZXNwb25zZShkYXRhKSB8fCB1dGlscy5pc1JlYWRhYmxlU3RyZWFtKGRhdGEpKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG5cbiAgICBpZiAoZGF0YSAmJiB1dGlscy5pc1N0cmluZyhkYXRhKSAmJiAoKGZvcmNlZEpTT05QYXJzaW5nICYmICF0aGlzLnJlc3BvbnNlVHlwZSkgfHwgSlNPTlJlcXVlc3RlZCkpIHtcbiAgICAgIGNvbnN0IHNpbGVudEpTT05QYXJzaW5nID0gdHJhbnNpdGlvbmFsICYmIHRyYW5zaXRpb25hbC5zaWxlbnRKU09OUGFyc2luZztcbiAgICAgIGNvbnN0IHN0cmljdEpTT05QYXJzaW5nID0gIXNpbGVudEpTT05QYXJzaW5nICYmIEpTT05SZXF1ZXN0ZWQ7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKGRhdGEpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoc3RyaWN0SlNPTlBhcnNpbmcpIHtcbiAgICAgICAgICBpZiAoZS5uYW1lID09PSAnU3ludGF4RXJyb3InKSB7XG4gICAgICAgICAgICB0aHJvdyBBeGlvc0Vycm9yLmZyb20oZSwgQXhpb3NFcnJvci5FUlJfQkFEX1JFU1BPTlNFLCB0aGlzLCBudWxsLCB0aGlzLnJlc3BvbnNlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICAvKipcbiAgICogQSB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcyB0byBhYm9ydCBhIHJlcXVlc3QuIElmIHNldCB0byAwIChkZWZhdWx0KSBhXG4gICAqIHRpbWVvdXQgaXMgbm90IGNyZWF0ZWQuXG4gICAqL1xuICB0aW1lb3V0OiAwLFxuXG4gIHhzcmZDb29raWVOYW1lOiAnWFNSRi1UT0tFTicsXG4gIHhzcmZIZWFkZXJOYW1lOiAnWC1YU1JGLVRPS0VOJyxcblxuICBtYXhDb250ZW50TGVuZ3RoOiAtMSxcbiAgbWF4Qm9keUxlbmd0aDogLTEsXG5cbiAgZW52OiB7XG4gICAgRm9ybURhdGE6IHBsYXRmb3JtLmNsYXNzZXMuRm9ybURhdGEsXG4gICAgQmxvYjogcGxhdGZvcm0uY2xhc3Nlcy5CbG9iXG4gIH0sXG5cbiAgdmFsaWRhdGVTdGF0dXM6IGZ1bmN0aW9uIHZhbGlkYXRlU3RhdHVzKHN0YXR1cykge1xuICAgIHJldHVybiBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMDtcbiAgfSxcblxuICBoZWFkZXJzOiB7XG4gICAgY29tbW9uOiB7XG4gICAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICovKicsXG4gICAgICAnQ29udGVudC1UeXBlJzogdW5kZWZpbmVkXG4gICAgfVxuICB9XG59O1xuXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIChtZXRob2QpID0+IHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0ge307XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgZGVmYXVsdHM7XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi8uLi91dGlscy5qcyc7XG5cbi8vIFJhd0F4aW9zSGVhZGVycyB3aG9zZSBkdXBsaWNhdGVzIGFyZSBpZ25vcmVkIGJ5IG5vZGVcbi8vIGMuZi4gaHR0cHM6Ly9ub2RlanMub3JnL2FwaS9odHRwLmh0bWwjaHR0cF9tZXNzYWdlX2hlYWRlcnNcbmNvbnN0IGlnbm9yZUR1cGxpY2F0ZU9mID0gdXRpbHMudG9PYmplY3RTZXQoW1xuICAnYWdlJywgJ2F1dGhvcml6YXRpb24nLCAnY29udGVudC1sZW5ndGgnLCAnY29udGVudC10eXBlJywgJ2V0YWcnLFxuICAnZXhwaXJlcycsICdmcm9tJywgJ2hvc3QnLCAnaWYtbW9kaWZpZWQtc2luY2UnLCAnaWYtdW5tb2RpZmllZC1zaW5jZScsXG4gICdsYXN0LW1vZGlmaWVkJywgJ2xvY2F0aW9uJywgJ21heC1mb3J3YXJkcycsICdwcm94eS1hdXRob3JpemF0aW9uJyxcbiAgJ3JlZmVyZXInLCAncmV0cnktYWZ0ZXInLCAndXNlci1hZ2VudCdcbl0pO1xuXG4vKipcbiAqIFBhcnNlIGhlYWRlcnMgaW50byBhbiBvYmplY3RcbiAqXG4gKiBgYGBcbiAqIERhdGU6IFdlZCwgMjcgQXVnIDIwMTQgMDg6NTg6NDkgR01UXG4gKiBDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb25cbiAqIENvbm5lY3Rpb246IGtlZXAtYWxpdmVcbiAqIFRyYW5zZmVyLUVuY29kaW5nOiBjaHVua2VkXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gcmF3SGVhZGVycyBIZWFkZXJzIG5lZWRpbmcgdG8gYmUgcGFyc2VkXG4gKlxuICogQHJldHVybnMge09iamVjdH0gSGVhZGVycyBwYXJzZWQgaW50byBhbiBvYmplY3RcbiAqL1xuZXhwb3J0IGRlZmF1bHQgcmF3SGVhZGVycyA9PiB7XG4gIGNvbnN0IHBhcnNlZCA9IHt9O1xuICBsZXQga2V5O1xuICBsZXQgdmFsO1xuICBsZXQgaTtcblxuICByYXdIZWFkZXJzICYmIHJhd0hlYWRlcnMuc3BsaXQoJ1xcbicpLmZvckVhY2goZnVuY3Rpb24gcGFyc2VyKGxpbmUpIHtcbiAgICBpID0gbGluZS5pbmRleE9mKCc6Jyk7XG4gICAga2V5ID0gbGluZS5zdWJzdHJpbmcoMCwgaSkudHJpbSgpLnRvTG93ZXJDYXNlKCk7XG4gICAgdmFsID0gbGluZS5zdWJzdHJpbmcoaSArIDEpLnRyaW0oKTtcblxuICAgIGlmICgha2V5IHx8IChwYXJzZWRba2V5XSAmJiBpZ25vcmVEdXBsaWNhdGVPZltrZXldKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChrZXkgPT09ICdzZXQtY29va2llJykge1xuICAgICAgaWYgKHBhcnNlZFtrZXldKSB7XG4gICAgICAgIHBhcnNlZFtrZXldLnB1c2godmFsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gW3ZhbF07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhcnNlZFtrZXldID0gcGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSArICcsICcgKyB2YWwgOiB2YWw7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gcGFyc2VkO1xufTtcbiIsICIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5pbXBvcnQgcGFyc2VIZWFkZXJzIGZyb20gJy4uL2hlbHBlcnMvcGFyc2VIZWFkZXJzLmpzJztcblxuY29uc3QgJGludGVybmFscyA9IFN5bWJvbCgnaW50ZXJuYWxzJyk7XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUhlYWRlcihoZWFkZXIpIHtcbiAgcmV0dXJuIGhlYWRlciAmJiBTdHJpbmcoaGVhZGVyKS50cmltKCkudG9Mb3dlckNhc2UoKTtcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplVmFsdWUodmFsdWUpIHtcbiAgaWYgKHZhbHVlID09PSBmYWxzZSB8fCB2YWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIHV0aWxzLmlzQXJyYXkodmFsdWUpID8gdmFsdWUubWFwKG5vcm1hbGl6ZVZhbHVlKSA6IFN0cmluZyh2YWx1ZSk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlVG9rZW5zKHN0cikge1xuICBjb25zdCB0b2tlbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBjb25zdCB0b2tlbnNSRSA9IC8oW15cXHMsOz1dKylcXHMqKD86PVxccyooW14sO10rKSk/L2c7XG4gIGxldCBtYXRjaDtcblxuICB3aGlsZSAoKG1hdGNoID0gdG9rZW5zUkUuZXhlYyhzdHIpKSkge1xuICAgIHRva2Vuc1ttYXRjaFsxXV0gPSBtYXRjaFsyXTtcbiAgfVxuXG4gIHJldHVybiB0b2tlbnM7XG59XG5cbmNvbnN0IGlzVmFsaWRIZWFkZXJOYW1lID0gKHN0cikgPT4gL15bLV9hLXpBLVowLTleYHx+LCEjJCUmJyorLl0rJC8udGVzdChzdHIudHJpbSgpKTtcblxuZnVuY3Rpb24gbWF0Y2hIZWFkZXJWYWx1ZShjb250ZXh0LCB2YWx1ZSwgaGVhZGVyLCBmaWx0ZXIsIGlzSGVhZGVyTmFtZUZpbHRlcikge1xuICBpZiAodXRpbHMuaXNGdW5jdGlvbihmaWx0ZXIpKSB7XG4gICAgcmV0dXJuIGZpbHRlci5jYWxsKHRoaXMsIHZhbHVlLCBoZWFkZXIpO1xuICB9XG5cbiAgaWYgKGlzSGVhZGVyTmFtZUZpbHRlcikge1xuICAgIHZhbHVlID0gaGVhZGVyO1xuICB9XG5cbiAgaWYgKCF1dGlscy5pc1N0cmluZyh2YWx1ZSkpIHJldHVybjtcblxuICBpZiAodXRpbHMuaXNTdHJpbmcoZmlsdGVyKSkge1xuICAgIHJldHVybiB2YWx1ZS5pbmRleE9mKGZpbHRlcikgIT09IC0xO1xuICB9XG5cbiAgaWYgKHV0aWxzLmlzUmVnRXhwKGZpbHRlcikpIHtcbiAgICByZXR1cm4gZmlsdGVyLnRlc3QodmFsdWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZvcm1hdEhlYWRlcihoZWFkZXIpIHtcbiAgcmV0dXJuIGhlYWRlci50cmltKClcbiAgICAudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC8oW2EtelxcZF0pKFxcdyopL2csICh3LCBjaGFyLCBzdHIpID0+IHtcbiAgICAgIHJldHVybiBjaGFyLnRvVXBwZXJDYXNlKCkgKyBzdHI7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGJ1aWxkQWNjZXNzb3JzKG9iaiwgaGVhZGVyKSB7XG4gIGNvbnN0IGFjY2Vzc29yTmFtZSA9IHV0aWxzLnRvQ2FtZWxDYXNlKCcgJyArIGhlYWRlcik7XG5cbiAgWydnZXQnLCAnc2V0JywgJ2hhcyddLmZvckVhY2gobWV0aG9kTmFtZSA9PiB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgbWV0aG9kTmFtZSArIGFjY2Vzc29yTmFtZSwge1xuICAgICAgdmFsdWU6IGZ1bmN0aW9uKGFyZzEsIGFyZzIsIGFyZzMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbbWV0aG9kTmFtZV0uY2FsbCh0aGlzLCBoZWFkZXIsIGFyZzEsIGFyZzIsIGFyZzMpO1xuICAgICAgfSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9KTtcbn1cblxuY2xhc3MgQXhpb3NIZWFkZXJzIHtcbiAgY29uc3RydWN0b3IoaGVhZGVycykge1xuICAgIGhlYWRlcnMgJiYgdGhpcy5zZXQoaGVhZGVycyk7XG4gIH1cblxuICBzZXQoaGVhZGVyLCB2YWx1ZU9yUmV3cml0ZSwgcmV3cml0ZSkge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuXG4gICAgZnVuY3Rpb24gc2V0SGVhZGVyKF92YWx1ZSwgX2hlYWRlciwgX3Jld3JpdGUpIHtcbiAgICAgIGNvbnN0IGxIZWFkZXIgPSBub3JtYWxpemVIZWFkZXIoX2hlYWRlcik7XG5cbiAgICAgIGlmICghbEhlYWRlcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2hlYWRlciBuYW1lIG11c3QgYmUgYSBub24tZW1wdHkgc3RyaW5nJyk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGtleSA9IHV0aWxzLmZpbmRLZXkoc2VsZiwgbEhlYWRlcik7XG5cbiAgICAgIGlmKCFrZXkgfHwgc2VsZltrZXldID09PSB1bmRlZmluZWQgfHwgX3Jld3JpdGUgPT09IHRydWUgfHwgKF9yZXdyaXRlID09PSB1bmRlZmluZWQgJiYgc2VsZltrZXldICE9PSBmYWxzZSkpIHtcbiAgICAgICAgc2VsZltrZXkgfHwgX2hlYWRlcl0gPSBub3JtYWxpemVWYWx1ZShfdmFsdWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHNldEhlYWRlcnMgPSAoaGVhZGVycywgX3Jld3JpdGUpID0+XG4gICAgICB1dGlscy5mb3JFYWNoKGhlYWRlcnMsIChfdmFsdWUsIF9oZWFkZXIpID0+IHNldEhlYWRlcihfdmFsdWUsIF9oZWFkZXIsIF9yZXdyaXRlKSk7XG5cbiAgICBpZiAodXRpbHMuaXNQbGFpbk9iamVjdChoZWFkZXIpIHx8IGhlYWRlciBpbnN0YW5jZW9mIHRoaXMuY29uc3RydWN0b3IpIHtcbiAgICAgIHNldEhlYWRlcnMoaGVhZGVyLCB2YWx1ZU9yUmV3cml0ZSlcbiAgICB9IGVsc2UgaWYodXRpbHMuaXNTdHJpbmcoaGVhZGVyKSAmJiAoaGVhZGVyID0gaGVhZGVyLnRyaW0oKSkgJiYgIWlzVmFsaWRIZWFkZXJOYW1lKGhlYWRlcikpIHtcbiAgICAgIHNldEhlYWRlcnMocGFyc2VIZWFkZXJzKGhlYWRlciksIHZhbHVlT3JSZXdyaXRlKTtcbiAgICB9IGVsc2UgaWYgKHV0aWxzLmlzSGVhZGVycyhoZWFkZXIpKSB7XG4gICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBoZWFkZXIuZW50cmllcygpKSB7XG4gICAgICAgIHNldEhlYWRlcih2YWx1ZSwga2V5LCByZXdyaXRlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaGVhZGVyICE9IG51bGwgJiYgc2V0SGVhZGVyKHZhbHVlT3JSZXdyaXRlLCBoZWFkZXIsIHJld3JpdGUpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZ2V0KGhlYWRlciwgcGFyc2VyKSB7XG4gICAgaGVhZGVyID0gbm9ybWFsaXplSGVhZGVyKGhlYWRlcik7XG5cbiAgICBpZiAoaGVhZGVyKSB7XG4gICAgICBjb25zdCBrZXkgPSB1dGlscy5maW5kS2V5KHRoaXMsIGhlYWRlcik7XG5cbiAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzW2tleV07XG5cbiAgICAgICAgaWYgKCFwYXJzZXIpIHtcbiAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGFyc2VyID09PSB0cnVlKSB7XG4gICAgICAgICAgcmV0dXJuIHBhcnNlVG9rZW5zKHZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1dGlscy5pc0Z1bmN0aW9uKHBhcnNlcikpIHtcbiAgICAgICAgICByZXR1cm4gcGFyc2VyLmNhbGwodGhpcywgdmFsdWUsIGtleSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodXRpbHMuaXNSZWdFeHAocGFyc2VyKSkge1xuICAgICAgICAgIHJldHVybiBwYXJzZXIuZXhlYyh2YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdwYXJzZXIgbXVzdCBiZSBib29sZWFufHJlZ2V4cHxmdW5jdGlvbicpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGhhcyhoZWFkZXIsIG1hdGNoZXIpIHtcbiAgICBoZWFkZXIgPSBub3JtYWxpemVIZWFkZXIoaGVhZGVyKTtcblxuICAgIGlmIChoZWFkZXIpIHtcbiAgICAgIGNvbnN0IGtleSA9IHV0aWxzLmZpbmRLZXkodGhpcywgaGVhZGVyKTtcblxuICAgICAgcmV0dXJuICEhKGtleSAmJiB0aGlzW2tleV0gIT09IHVuZGVmaW5lZCAmJiAoIW1hdGNoZXIgfHwgbWF0Y2hIZWFkZXJWYWx1ZSh0aGlzLCB0aGlzW2tleV0sIGtleSwgbWF0Y2hlcikpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBkZWxldGUoaGVhZGVyLCBtYXRjaGVyKSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgbGV0IGRlbGV0ZWQgPSBmYWxzZTtcblxuICAgIGZ1bmN0aW9uIGRlbGV0ZUhlYWRlcihfaGVhZGVyKSB7XG4gICAgICBfaGVhZGVyID0gbm9ybWFsaXplSGVhZGVyKF9oZWFkZXIpO1xuXG4gICAgICBpZiAoX2hlYWRlcikge1xuICAgICAgICBjb25zdCBrZXkgPSB1dGlscy5maW5kS2V5KHNlbGYsIF9oZWFkZXIpO1xuXG4gICAgICAgIGlmIChrZXkgJiYgKCFtYXRjaGVyIHx8IG1hdGNoSGVhZGVyVmFsdWUoc2VsZiwgc2VsZltrZXldLCBrZXksIG1hdGNoZXIpKSkge1xuICAgICAgICAgIGRlbGV0ZSBzZWxmW2tleV07XG5cbiAgICAgICAgICBkZWxldGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh1dGlscy5pc0FycmF5KGhlYWRlcikpIHtcbiAgICAgIGhlYWRlci5mb3JFYWNoKGRlbGV0ZUhlYWRlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlbGV0ZUhlYWRlcihoZWFkZXIpO1xuICAgIH1cblxuICAgIHJldHVybiBkZWxldGVkO1xuICB9XG5cbiAgY2xlYXIobWF0Y2hlcikge1xuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyh0aGlzKTtcbiAgICBsZXQgaSA9IGtleXMubGVuZ3RoO1xuICAgIGxldCBkZWxldGVkID0gZmFsc2U7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBjb25zdCBrZXkgPSBrZXlzW2ldO1xuICAgICAgaWYoIW1hdGNoZXIgfHwgbWF0Y2hIZWFkZXJWYWx1ZSh0aGlzLCB0aGlzW2tleV0sIGtleSwgbWF0Y2hlciwgdHJ1ZSkpIHtcbiAgICAgICAgZGVsZXRlIHRoaXNba2V5XTtcbiAgICAgICAgZGVsZXRlZCA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGRlbGV0ZWQ7XG4gIH1cblxuICBub3JtYWxpemUoZm9ybWF0KSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuXG4gICAgdXRpbHMuZm9yRWFjaCh0aGlzLCAodmFsdWUsIGhlYWRlcikgPT4ge1xuICAgICAgY29uc3Qga2V5ID0gdXRpbHMuZmluZEtleShoZWFkZXJzLCBoZWFkZXIpO1xuXG4gICAgICBpZiAoa2V5KSB7XG4gICAgICAgIHNlbGZba2V5XSA9IG5vcm1hbGl6ZVZhbHVlKHZhbHVlKTtcbiAgICAgICAgZGVsZXRlIHNlbGZbaGVhZGVyXTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBub3JtYWxpemVkID0gZm9ybWF0ID8gZm9ybWF0SGVhZGVyKGhlYWRlcikgOiBTdHJpbmcoaGVhZGVyKS50cmltKCk7XG5cbiAgICAgIGlmIChub3JtYWxpemVkICE9PSBoZWFkZXIpIHtcbiAgICAgICAgZGVsZXRlIHNlbGZbaGVhZGVyXTtcbiAgICAgIH1cblxuICAgICAgc2VsZltub3JtYWxpemVkXSA9IG5vcm1hbGl6ZVZhbHVlKHZhbHVlKTtcblxuICAgICAgaGVhZGVyc1tub3JtYWxpemVkXSA9IHRydWU7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGNvbmNhdCguLi50YXJnZXRzKSB7XG4gICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IuY29uY2F0KHRoaXMsIC4uLnRhcmdldHMpO1xuICB9XG5cbiAgdG9KU09OKGFzU3RyaW5ncykge1xuICAgIGNvbnN0IG9iaiA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgICB1dGlscy5mb3JFYWNoKHRoaXMsICh2YWx1ZSwgaGVhZGVyKSA9PiB7XG4gICAgICB2YWx1ZSAhPSBudWxsICYmIHZhbHVlICE9PSBmYWxzZSAmJiAob2JqW2hlYWRlcl0gPSBhc1N0cmluZ3MgJiYgdXRpbHMuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZS5qb2luKCcsICcpIDogdmFsdWUpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIG9iajtcbiAgfVxuXG4gIFtTeW1ib2wuaXRlcmF0b3JdKCkge1xuICAgIHJldHVybiBPYmplY3QuZW50cmllcyh0aGlzLnRvSlNPTigpKVtTeW1ib2wuaXRlcmF0b3JdKCk7XG4gIH1cblxuICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gT2JqZWN0LmVudHJpZXModGhpcy50b0pTT04oKSkubWFwKChbaGVhZGVyLCB2YWx1ZV0pID0+IGhlYWRlciArICc6ICcgKyB2YWx1ZSkuam9pbignXFxuJyk7XG4gIH1cblxuICBnZXQgW1N5bWJvbC50b1N0cmluZ1RhZ10oKSB7XG4gICAgcmV0dXJuICdBeGlvc0hlYWRlcnMnO1xuICB9XG5cbiAgc3RhdGljIGZyb20odGhpbmcpIHtcbiAgICByZXR1cm4gdGhpbmcgaW5zdGFuY2VvZiB0aGlzID8gdGhpbmcgOiBuZXcgdGhpcyh0aGluZyk7XG4gIH1cblxuICBzdGF0aWMgY29uY2F0KGZpcnN0LCAuLi50YXJnZXRzKSB7XG4gICAgY29uc3QgY29tcHV0ZWQgPSBuZXcgdGhpcyhmaXJzdCk7XG5cbiAgICB0YXJnZXRzLmZvckVhY2goKHRhcmdldCkgPT4gY29tcHV0ZWQuc2V0KHRhcmdldCkpO1xuXG4gICAgcmV0dXJuIGNvbXB1dGVkO1xuICB9XG5cbiAgc3RhdGljIGFjY2Vzc29yKGhlYWRlcikge1xuICAgIGNvbnN0IGludGVybmFscyA9IHRoaXNbJGludGVybmFsc10gPSAodGhpc1skaW50ZXJuYWxzXSA9IHtcbiAgICAgIGFjY2Vzc29yczoge31cbiAgICB9KTtcblxuICAgIGNvbnN0IGFjY2Vzc29ycyA9IGludGVybmFscy5hY2Nlc3NvcnM7XG4gICAgY29uc3QgcHJvdG90eXBlID0gdGhpcy5wcm90b3R5cGU7XG5cbiAgICBmdW5jdGlvbiBkZWZpbmVBY2Nlc3NvcihfaGVhZGVyKSB7XG4gICAgICBjb25zdCBsSGVhZGVyID0gbm9ybWFsaXplSGVhZGVyKF9oZWFkZXIpO1xuXG4gICAgICBpZiAoIWFjY2Vzc29yc1tsSGVhZGVyXSkge1xuICAgICAgICBidWlsZEFjY2Vzc29ycyhwcm90b3R5cGUsIF9oZWFkZXIpO1xuICAgICAgICBhY2Nlc3NvcnNbbEhlYWRlcl0gPSB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHV0aWxzLmlzQXJyYXkoaGVhZGVyKSA/IGhlYWRlci5mb3JFYWNoKGRlZmluZUFjY2Vzc29yKSA6IGRlZmluZUFjY2Vzc29yKGhlYWRlcik7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxufVxuXG5BeGlvc0hlYWRlcnMuYWNjZXNzb3IoWydDb250ZW50LVR5cGUnLCAnQ29udGVudC1MZW5ndGgnLCAnQWNjZXB0JywgJ0FjY2VwdC1FbmNvZGluZycsICdVc2VyLUFnZW50JywgJ0F1dGhvcml6YXRpb24nXSk7XG5cbi8vIHJlc2VydmVkIG5hbWVzIGhvdGZpeFxudXRpbHMucmVkdWNlRGVzY3JpcHRvcnMoQXhpb3NIZWFkZXJzLnByb3RvdHlwZSwgKHt2YWx1ZX0sIGtleSkgPT4ge1xuICBsZXQgbWFwcGVkID0ga2V5WzBdLnRvVXBwZXJDYXNlKCkgKyBrZXkuc2xpY2UoMSk7IC8vIG1hcCBgc2V0YCA9PiBgU2V0YFxuICByZXR1cm4ge1xuICAgIGdldDogKCkgPT4gdmFsdWUsXG4gICAgc2V0KGhlYWRlclZhbHVlKSB7XG4gICAgICB0aGlzW21hcHBlZF0gPSBoZWFkZXJWYWx1ZTtcbiAgICB9XG4gIH1cbn0pO1xuXG51dGlscy5mcmVlemVNZXRob2RzKEF4aW9zSGVhZGVycyk7XG5cbmV4cG9ydCBkZWZhdWx0IEF4aW9zSGVhZGVycztcbiIsICIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLy4uL3V0aWxzLmpzJztcbmltcG9ydCBkZWZhdWx0cyBmcm9tICcuLi9kZWZhdWx0cy9pbmRleC5qcyc7XG5pbXBvcnQgQXhpb3NIZWFkZXJzIGZyb20gJy4uL2NvcmUvQXhpb3NIZWFkZXJzLmpzJztcblxuLyoqXG4gKiBUcmFuc2Zvcm0gdGhlIGRhdGEgZm9yIGEgcmVxdWVzdCBvciBhIHJlc3BvbnNlXG4gKlxuICogQHBhcmFtIHtBcnJheXxGdW5jdGlvbn0gZm5zIEEgc2luZ2xlIGZ1bmN0aW9uIG9yIEFycmF5IG9mIGZ1bmN0aW9uc1xuICogQHBhcmFtIHs/T2JqZWN0fSByZXNwb25zZSBUaGUgcmVzcG9uc2Ugb2JqZWN0XG4gKlxuICogQHJldHVybnMgeyp9IFRoZSByZXN1bHRpbmcgdHJhbnNmb3JtZWQgZGF0YVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0cmFuc2Zvcm1EYXRhKGZucywgcmVzcG9uc2UpIHtcbiAgY29uc3QgY29uZmlnID0gdGhpcyB8fCBkZWZhdWx0cztcbiAgY29uc3QgY29udGV4dCA9IHJlc3BvbnNlIHx8IGNvbmZpZztcbiAgY29uc3QgaGVhZGVycyA9IEF4aW9zSGVhZGVycy5mcm9tKGNvbnRleHQuaGVhZGVycyk7XG4gIGxldCBkYXRhID0gY29udGV4dC5kYXRhO1xuXG4gIHV0aWxzLmZvckVhY2goZm5zLCBmdW5jdGlvbiB0cmFuc2Zvcm0oZm4pIHtcbiAgICBkYXRhID0gZm4uY2FsbChjb25maWcsIGRhdGEsIGhlYWRlcnMubm9ybWFsaXplKCksIHJlc3BvbnNlID8gcmVzcG9uc2Uuc3RhdHVzIDogdW5kZWZpbmVkKTtcbiAgfSk7XG5cbiAgaGVhZGVycy5ub3JtYWxpemUoKTtcblxuICByZXR1cm4gZGF0YTtcbn1cbiIsICIndXNlIHN0cmljdCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzQ2FuY2VsKHZhbHVlKSB7XG4gIHJldHVybiAhISh2YWx1ZSAmJiB2YWx1ZS5fX0NBTkNFTF9fKTtcbn1cbiIsICIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBBeGlvc0Vycm9yIGZyb20gJy4uL2NvcmUvQXhpb3NFcnJvci5qcyc7XG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuXG4vKipcbiAqIEEgYENhbmNlbGVkRXJyb3JgIGlzIGFuIG9iamVjdCB0aGF0IGlzIHRocm93biB3aGVuIGFuIG9wZXJhdGlvbiBpcyBjYW5jZWxlZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZz19IG1lc3NhZ2UgVGhlIG1lc3NhZ2UuXG4gKiBAcGFyYW0ge09iamVjdD19IGNvbmZpZyBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtPYmplY3Q9fSByZXF1ZXN0IFRoZSByZXF1ZXN0LlxuICpcbiAqIEByZXR1cm5zIHtDYW5jZWxlZEVycm9yfSBUaGUgY3JlYXRlZCBlcnJvci5cbiAqL1xuZnVuY3Rpb24gQ2FuY2VsZWRFcnJvcihtZXNzYWdlLCBjb25maWcsIHJlcXVlc3QpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVxLW51bGwsZXFlcWVxXG4gIEF4aW9zRXJyb3IuY2FsbCh0aGlzLCBtZXNzYWdlID09IG51bGwgPyAnY2FuY2VsZWQnIDogbWVzc2FnZSwgQXhpb3NFcnJvci5FUlJfQ0FOQ0VMRUQsIGNvbmZpZywgcmVxdWVzdCk7XG4gIHRoaXMubmFtZSA9ICdDYW5jZWxlZEVycm9yJztcbn1cblxudXRpbHMuaW5oZXJpdHMoQ2FuY2VsZWRFcnJvciwgQXhpb3NFcnJvciwge1xuICBfX0NBTkNFTF9fOiB0cnVlXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgQ2FuY2VsZWRFcnJvcjtcbiIsICIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBBeGlvc0Vycm9yIGZyb20gJy4vQXhpb3NFcnJvci5qcyc7XG5cbi8qKlxuICogUmVzb2x2ZSBvciByZWplY3QgYSBQcm9taXNlIGJhc2VkIG9uIHJlc3BvbnNlIHN0YXR1cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZXNvbHZlIEEgZnVuY3Rpb24gdGhhdCByZXNvbHZlcyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdCBBIGZ1bmN0aW9uIHRoYXQgcmVqZWN0cyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7b2JqZWN0fSByZXNwb25zZSBUaGUgcmVzcG9uc2UuXG4gKlxuICogQHJldHVybnMge29iamVjdH0gVGhlIHJlc3BvbnNlLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSkge1xuICBjb25zdCB2YWxpZGF0ZVN0YXR1cyA9IHJlc3BvbnNlLmNvbmZpZy52YWxpZGF0ZVN0YXR1cztcbiAgaWYgKCFyZXNwb25zZS5zdGF0dXMgfHwgIXZhbGlkYXRlU3RhdHVzIHx8IHZhbGlkYXRlU3RhdHVzKHJlc3BvbnNlLnN0YXR1cykpIHtcbiAgICByZXNvbHZlKHJlc3BvbnNlKTtcbiAgfSBlbHNlIHtcbiAgICByZWplY3QobmV3IEF4aW9zRXJyb3IoXG4gICAgICAnUmVxdWVzdCBmYWlsZWQgd2l0aCBzdGF0dXMgY29kZSAnICsgcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgW0F4aW9zRXJyb3IuRVJSX0JBRF9SRVFVRVNULCBBeGlvc0Vycm9yLkVSUl9CQURfUkVTUE9OU0VdW01hdGguZmxvb3IocmVzcG9uc2Uuc3RhdHVzIC8gMTAwKSAtIDRdLFxuICAgICAgcmVzcG9uc2UuY29uZmlnLFxuICAgICAgcmVzcG9uc2UucmVxdWVzdCxcbiAgICAgIHJlc3BvbnNlXG4gICAgKSk7XG4gIH1cbn1cbiIsICIndXNlIHN0cmljdCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHBhcnNlUHJvdG9jb2wodXJsKSB7XG4gIGNvbnN0IG1hdGNoID0gL14oWy0rXFx3XXsxLDI1fSkoOj9cXC9cXC98OikvLmV4ZWModXJsKTtcbiAgcmV0dXJuIG1hdGNoICYmIG1hdGNoWzFdIHx8ICcnO1xufVxuIiwgIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDYWxjdWxhdGUgZGF0YSBtYXhSYXRlXG4gKiBAcGFyYW0ge051bWJlcn0gW3NhbXBsZXNDb3VudD0gMTBdXG4gKiBAcGFyYW0ge051bWJlcn0gW21pbj0gMTAwMF1cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAqL1xuZnVuY3Rpb24gc3BlZWRvbWV0ZXIoc2FtcGxlc0NvdW50LCBtaW4pIHtcbiAgc2FtcGxlc0NvdW50ID0gc2FtcGxlc0NvdW50IHx8IDEwO1xuICBjb25zdCBieXRlcyA9IG5ldyBBcnJheShzYW1wbGVzQ291bnQpO1xuICBjb25zdCB0aW1lc3RhbXBzID0gbmV3IEFycmF5KHNhbXBsZXNDb3VudCk7XG4gIGxldCBoZWFkID0gMDtcbiAgbGV0IHRhaWwgPSAwO1xuICBsZXQgZmlyc3RTYW1wbGVUUztcblxuICBtaW4gPSBtaW4gIT09IHVuZGVmaW5lZCA/IG1pbiA6IDEwMDA7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIHB1c2goY2h1bmtMZW5ndGgpIHtcbiAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xuXG4gICAgY29uc3Qgc3RhcnRlZEF0ID0gdGltZXN0YW1wc1t0YWlsXTtcblxuICAgIGlmICghZmlyc3RTYW1wbGVUUykge1xuICAgICAgZmlyc3RTYW1wbGVUUyA9IG5vdztcbiAgICB9XG5cbiAgICBieXRlc1toZWFkXSA9IGNodW5rTGVuZ3RoO1xuICAgIHRpbWVzdGFtcHNbaGVhZF0gPSBub3c7XG5cbiAgICBsZXQgaSA9IHRhaWw7XG4gICAgbGV0IGJ5dGVzQ291bnQgPSAwO1xuXG4gICAgd2hpbGUgKGkgIT09IGhlYWQpIHtcbiAgICAgIGJ5dGVzQ291bnQgKz0gYnl0ZXNbaSsrXTtcbiAgICAgIGkgPSBpICUgc2FtcGxlc0NvdW50O1xuICAgIH1cblxuICAgIGhlYWQgPSAoaGVhZCArIDEpICUgc2FtcGxlc0NvdW50O1xuXG4gICAgaWYgKGhlYWQgPT09IHRhaWwpIHtcbiAgICAgIHRhaWwgPSAodGFpbCArIDEpICUgc2FtcGxlc0NvdW50O1xuICAgIH1cblxuICAgIGlmIChub3cgLSBmaXJzdFNhbXBsZVRTIDwgbWluKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgcGFzc2VkID0gc3RhcnRlZEF0ICYmIG5vdyAtIHN0YXJ0ZWRBdDtcblxuICAgIHJldHVybiBwYXNzZWQgPyBNYXRoLnJvdW5kKGJ5dGVzQ291bnQgKiAxMDAwIC8gcGFzc2VkKSA6IHVuZGVmaW5lZDtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc3BlZWRvbWV0ZXI7XG4iLCAiLyoqXG4gKiBUaHJvdHRsZSBkZWNvcmF0b3JcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKiBAcGFyYW0ge051bWJlcn0gZnJlcVxuICogQHJldHVybiB7RnVuY3Rpb259XG4gKi9cbmZ1bmN0aW9uIHRocm90dGxlKGZuLCBmcmVxKSB7XG4gIGxldCB0aW1lc3RhbXAgPSAwO1xuICBsZXQgdGhyZXNob2xkID0gMTAwMCAvIGZyZXE7XG4gIGxldCBsYXN0QXJncztcbiAgbGV0IHRpbWVyO1xuXG4gIGNvbnN0IGludm9rZSA9IChhcmdzLCBub3cgPSBEYXRlLm5vdygpKSA9PiB7XG4gICAgdGltZXN0YW1wID0gbm93O1xuICAgIGxhc3RBcmdzID0gbnVsbDtcbiAgICBpZiAodGltZXIpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgICB0aW1lciA9IG51bGw7XG4gICAgfVxuICAgIGZuLmFwcGx5KG51bGwsIGFyZ3MpO1xuICB9XG5cbiAgY29uc3QgdGhyb3R0bGVkID0gKC4uLmFyZ3MpID0+IHtcbiAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xuICAgIGNvbnN0IHBhc3NlZCA9IG5vdyAtIHRpbWVzdGFtcDtcbiAgICBpZiAoIHBhc3NlZCA+PSB0aHJlc2hvbGQpIHtcbiAgICAgIGludm9rZShhcmdzLCBub3cpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsYXN0QXJncyA9IGFyZ3M7XG4gICAgICBpZiAoIXRpbWVyKSB7XG4gICAgICAgIHRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgdGltZXIgPSBudWxsO1xuICAgICAgICAgIGludm9rZShsYXN0QXJncylcbiAgICAgICAgfSwgdGhyZXNob2xkIC0gcGFzc2VkKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBjb25zdCBmbHVzaCA9ICgpID0+IGxhc3RBcmdzICYmIGludm9rZShsYXN0QXJncyk7XG5cbiAgcmV0dXJuIFt0aHJvdHRsZWQsIGZsdXNoXTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdGhyb3R0bGU7XG4iLCAiaW1wb3J0IHNwZWVkb21ldGVyIGZyb20gXCIuL3NwZWVkb21ldGVyLmpzXCI7XG5pbXBvcnQgdGhyb3R0bGUgZnJvbSBcIi4vdGhyb3R0bGUuanNcIjtcbmltcG9ydCB1dGlscyBmcm9tIFwiLi4vdXRpbHMuanNcIjtcblxuZXhwb3J0IGNvbnN0IHByb2dyZXNzRXZlbnRSZWR1Y2VyID0gKGxpc3RlbmVyLCBpc0Rvd25sb2FkU3RyZWFtLCBmcmVxID0gMykgPT4ge1xuICBsZXQgYnl0ZXNOb3RpZmllZCA9IDA7XG4gIGNvbnN0IF9zcGVlZG9tZXRlciA9IHNwZWVkb21ldGVyKDUwLCAyNTApO1xuXG4gIHJldHVybiB0aHJvdHRsZShlID0+IHtcbiAgICBjb25zdCBsb2FkZWQgPSBlLmxvYWRlZDtcbiAgICBjb25zdCB0b3RhbCA9IGUubGVuZ3RoQ29tcHV0YWJsZSA/IGUudG90YWwgOiB1bmRlZmluZWQ7XG4gICAgY29uc3QgcHJvZ3Jlc3NCeXRlcyA9IGxvYWRlZCAtIGJ5dGVzTm90aWZpZWQ7XG4gICAgY29uc3QgcmF0ZSA9IF9zcGVlZG9tZXRlcihwcm9ncmVzc0J5dGVzKTtcbiAgICBjb25zdCBpblJhbmdlID0gbG9hZGVkIDw9IHRvdGFsO1xuXG4gICAgYnl0ZXNOb3RpZmllZCA9IGxvYWRlZDtcblxuICAgIGNvbnN0IGRhdGEgPSB7XG4gICAgICBsb2FkZWQsXG4gICAgICB0b3RhbCxcbiAgICAgIHByb2dyZXNzOiB0b3RhbCA/IChsb2FkZWQgLyB0b3RhbCkgOiB1bmRlZmluZWQsXG4gICAgICBieXRlczogcHJvZ3Jlc3NCeXRlcyxcbiAgICAgIHJhdGU6IHJhdGUgPyByYXRlIDogdW5kZWZpbmVkLFxuICAgICAgZXN0aW1hdGVkOiByYXRlICYmIHRvdGFsICYmIGluUmFuZ2UgPyAodG90YWwgLSBsb2FkZWQpIC8gcmF0ZSA6IHVuZGVmaW5lZCxcbiAgICAgIGV2ZW50OiBlLFxuICAgICAgbGVuZ3RoQ29tcHV0YWJsZTogdG90YWwgIT0gbnVsbCxcbiAgICAgIFtpc0Rvd25sb2FkU3RyZWFtID8gJ2Rvd25sb2FkJyA6ICd1cGxvYWQnXTogdHJ1ZVxuICAgIH07XG5cbiAgICBsaXN0ZW5lcihkYXRhKTtcbiAgfSwgZnJlcSk7XG59XG5cbmV4cG9ydCBjb25zdCBwcm9ncmVzc0V2ZW50RGVjb3JhdG9yID0gKHRvdGFsLCB0aHJvdHRsZWQpID0+IHtcbiAgY29uc3QgbGVuZ3RoQ29tcHV0YWJsZSA9IHRvdGFsICE9IG51bGw7XG5cbiAgcmV0dXJuIFsobG9hZGVkKSA9PiB0aHJvdHRsZWRbMF0oe1xuICAgIGxlbmd0aENvbXB1dGFibGUsXG4gICAgdG90YWwsXG4gICAgbG9hZGVkXG4gIH0pLCB0aHJvdHRsZWRbMV1dO1xufVxuXG5leHBvcnQgY29uc3QgYXN5bmNEZWNvcmF0b3IgPSAoZm4pID0+ICguLi5hcmdzKSA9PiB1dGlscy5hc2FwKCgpID0+IGZuKC4uLmFyZ3MpKTtcbiIsICJpbXBvcnQgcGxhdGZvcm0gZnJvbSAnLi4vcGxhdGZvcm0vaW5kZXguanMnO1xuXG5leHBvcnQgZGVmYXVsdCBwbGF0Zm9ybS5oYXNTdGFuZGFyZEJyb3dzZXJFbnYgPyAoKG9yaWdpbiwgaXNNU0lFKSA9PiAodXJsKSA9PiB7XG4gIHVybCA9IG5ldyBVUkwodXJsLCBwbGF0Zm9ybS5vcmlnaW4pO1xuXG4gIHJldHVybiAoXG4gICAgb3JpZ2luLnByb3RvY29sID09PSB1cmwucHJvdG9jb2wgJiZcbiAgICBvcmlnaW4uaG9zdCA9PT0gdXJsLmhvc3QgJiZcbiAgICAoaXNNU0lFIHx8IG9yaWdpbi5wb3J0ID09PSB1cmwucG9ydClcbiAgKTtcbn0pKFxuICBuZXcgVVJMKHBsYXRmb3JtLm9yaWdpbiksXG4gIHBsYXRmb3JtLm5hdmlnYXRvciAmJiAvKG1zaWV8dHJpZGVudCkvaS50ZXN0KHBsYXRmb3JtLm5hdmlnYXRvci51c2VyQWdlbnQpXG4pIDogKCkgPT4gdHJ1ZTtcbiIsICJpbXBvcnQgdXRpbHMgZnJvbSAnLi8uLi91dGlscy5qcyc7XG5pbXBvcnQgcGxhdGZvcm0gZnJvbSAnLi4vcGxhdGZvcm0vaW5kZXguanMnO1xuXG5leHBvcnQgZGVmYXVsdCBwbGF0Zm9ybS5oYXNTdGFuZGFyZEJyb3dzZXJFbnYgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBzdXBwb3J0IGRvY3VtZW50LmNvb2tpZVxuICB7XG4gICAgd3JpdGUobmFtZSwgdmFsdWUsIGV4cGlyZXMsIHBhdGgsIGRvbWFpbiwgc2VjdXJlKSB7XG4gICAgICBjb25zdCBjb29raWUgPSBbbmFtZSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSldO1xuXG4gICAgICB1dGlscy5pc051bWJlcihleHBpcmVzKSAmJiBjb29raWUucHVzaCgnZXhwaXJlcz0nICsgbmV3IERhdGUoZXhwaXJlcykudG9HTVRTdHJpbmcoKSk7XG5cbiAgICAgIHV0aWxzLmlzU3RyaW5nKHBhdGgpICYmIGNvb2tpZS5wdXNoKCdwYXRoPScgKyBwYXRoKTtcblxuICAgICAgdXRpbHMuaXNTdHJpbmcoZG9tYWluKSAmJiBjb29raWUucHVzaCgnZG9tYWluPScgKyBkb21haW4pO1xuXG4gICAgICBzZWN1cmUgPT09IHRydWUgJiYgY29va2llLnB1c2goJ3NlY3VyZScpO1xuXG4gICAgICBkb2N1bWVudC5jb29raWUgPSBjb29raWUuam9pbignOyAnKTtcbiAgICB9LFxuXG4gICAgcmVhZChuYW1lKSB7XG4gICAgICBjb25zdCBtYXRjaCA9IGRvY3VtZW50LmNvb2tpZS5tYXRjaChuZXcgUmVnRXhwKCcoXnw7XFxcXHMqKSgnICsgbmFtZSArICcpPShbXjtdKiknKSk7XG4gICAgICByZXR1cm4gKG1hdGNoID8gZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoWzNdKSA6IG51bGwpO1xuICAgIH0sXG5cbiAgICByZW1vdmUobmFtZSkge1xuICAgICAgdGhpcy53cml0ZShuYW1lLCAnJywgRGF0ZS5ub3coKSAtIDg2NDAwMDAwKTtcbiAgICB9XG4gIH1cblxuICA6XG5cbiAgLy8gTm9uLXN0YW5kYXJkIGJyb3dzZXIgZW52ICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICB7XG4gICAgd3JpdGUoKSB7fSxcbiAgICByZWFkKCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSxcbiAgICByZW1vdmUoKSB7fVxuICB9O1xuXG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIFVSTCB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc0Fic29sdXRlVVJMKHVybCkge1xuICAvLyBBIFVSTCBpcyBjb25zaWRlcmVkIGFic29sdXRlIGlmIGl0IGJlZ2lucyB3aXRoIFwiPHNjaGVtZT46Ly9cIiBvciBcIi8vXCIgKHByb3RvY29sLXJlbGF0aXZlIFVSTCkuXG4gIC8vIFJGQyAzOTg2IGRlZmluZXMgc2NoZW1lIG5hbWUgYXMgYSBzZXF1ZW5jZSBvZiBjaGFyYWN0ZXJzIGJlZ2lubmluZyB3aXRoIGEgbGV0dGVyIGFuZCBmb2xsb3dlZFxuICAvLyBieSBhbnkgY29tYmluYXRpb24gb2YgbGV0dGVycywgZGlnaXRzLCBwbHVzLCBwZXJpb2QsIG9yIGh5cGhlbi5cbiAgcmV0dXJuIC9eKFthLXpdW2EtelxcZCtcXC0uXSo6KT9cXC9cXC8vaS50ZXN0KHVybCk7XG59XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVVJMIGJ5IGNvbWJpbmluZyB0aGUgc3BlY2lmaWVkIFVSTHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWxhdGl2ZVVSTCBUaGUgcmVsYXRpdmUgVVJMXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIFVSTFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb21iaW5lVVJMcyhiYXNlVVJMLCByZWxhdGl2ZVVSTCkge1xuICByZXR1cm4gcmVsYXRpdmVVUkxcbiAgICA/IGJhc2VVUkwucmVwbGFjZSgvXFwvP1xcLyQvLCAnJykgKyAnLycgKyByZWxhdGl2ZVVSTC5yZXBsYWNlKC9eXFwvKy8sICcnKVxuICAgIDogYmFzZVVSTDtcbn1cbiIsICIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBpc0Fic29sdXRlVVJMIGZyb20gJy4uL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTC5qcyc7XG5pbXBvcnQgY29tYmluZVVSTHMgZnJvbSAnLi4vaGVscGVycy9jb21iaW5lVVJMcy5qcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBVUkwgYnkgY29tYmluaW5nIHRoZSBiYXNlVVJMIHdpdGggdGhlIHJlcXVlc3RlZFVSTCxcbiAqIG9ubHkgd2hlbiB0aGUgcmVxdWVzdGVkVVJMIGlzIG5vdCBhbHJlYWR5IGFuIGFic29sdXRlIFVSTC5cbiAqIElmIHRoZSByZXF1ZXN0VVJMIGlzIGFic29sdXRlLCB0aGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIHJlcXVlc3RlZFVSTCB1bnRvdWNoZWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkwgVGhlIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVxdWVzdGVkVVJMIEFic29sdXRlIG9yIHJlbGF0aXZlIFVSTCB0byBjb21iaW5lXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIGZ1bGwgcGF0aFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBidWlsZEZ1bGxQYXRoKGJhc2VVUkwsIHJlcXVlc3RlZFVSTCkge1xuICBpZiAoYmFzZVVSTCAmJiAhaXNBYnNvbHV0ZVVSTChyZXF1ZXN0ZWRVUkwpKSB7XG4gICAgcmV0dXJuIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlcXVlc3RlZFVSTCk7XG4gIH1cbiAgcmV0dXJuIHJlcXVlc3RlZFVSTDtcbn1cbiIsICIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5pbXBvcnQgQXhpb3NIZWFkZXJzIGZyb20gXCIuL0F4aW9zSGVhZGVycy5qc1wiO1xuXG5jb25zdCBoZWFkZXJzVG9PYmplY3QgPSAodGhpbmcpID0+IHRoaW5nIGluc3RhbmNlb2YgQXhpb3NIZWFkZXJzID8geyAuLi50aGluZyB9IDogdGhpbmc7XG5cbi8qKlxuICogQ29uZmlnLXNwZWNpZmljIG1lcmdlLWZ1bmN0aW9uIHdoaWNoIGNyZWF0ZXMgYSBuZXcgY29uZmlnLW9iamVjdFxuICogYnkgbWVyZ2luZyB0d28gY29uZmlndXJhdGlvbiBvYmplY3RzIHRvZ2V0aGVyLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcxXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnMlxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9IE5ldyBvYmplY3QgcmVzdWx0aW5nIGZyb20gbWVyZ2luZyBjb25maWcyIHRvIGNvbmZpZzFcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWVyZ2VDb25maWcoY29uZmlnMSwgY29uZmlnMikge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgY29uZmlnMiA9IGNvbmZpZzIgfHwge307XG4gIGNvbnN0IGNvbmZpZyA9IHt9O1xuXG4gIGZ1bmN0aW9uIGdldE1lcmdlZFZhbHVlKHRhcmdldCwgc291cmNlLCBwcm9wLCBjYXNlbGVzcykge1xuICAgIGlmICh1dGlscy5pc1BsYWluT2JqZWN0KHRhcmdldCkgJiYgdXRpbHMuaXNQbGFpbk9iamVjdChzb3VyY2UpKSB7XG4gICAgICByZXR1cm4gdXRpbHMubWVyZ2UuY2FsbCh7Y2FzZWxlc3N9LCB0YXJnZXQsIHNvdXJjZSk7XG4gICAgfSBlbHNlIGlmICh1dGlscy5pc1BsYWluT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiB1dGlscy5tZXJnZSh7fSwgc291cmNlKTtcbiAgICB9IGVsc2UgaWYgKHV0aWxzLmlzQXJyYXkoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHNvdXJjZS5zbGljZSgpO1xuICAgIH1cbiAgICByZXR1cm4gc291cmNlO1xuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gIGZ1bmN0aW9uIG1lcmdlRGVlcFByb3BlcnRpZXMoYSwgYiwgcHJvcCAsIGNhc2VsZXNzKSB7XG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChiKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKGEsIGIsIHByb3AgLCBjYXNlbGVzcyk7XG4gICAgfSBlbHNlIGlmICghdXRpbHMuaXNVbmRlZmluZWQoYSkpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGEsIHByb3AgLCBjYXNlbGVzcyk7XG4gICAgfVxuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gIGZ1bmN0aW9uIHZhbHVlRnJvbUNvbmZpZzIoYSwgYikge1xuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoYikpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGIpO1xuICAgIH1cbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICBmdW5jdGlvbiBkZWZhdWx0VG9Db25maWcyKGEsIGIpIHtcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGIpKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBiKTtcbiAgICB9IGVsc2UgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChhKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgYSk7XG4gICAgfVxuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gIGZ1bmN0aW9uIG1lcmdlRGlyZWN0S2V5cyhhLCBiLCBwcm9wKSB7XG4gICAgaWYgKHByb3AgaW4gY29uZmlnMikge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKGEsIGIpO1xuICAgIH0gZWxzZSBpZiAocHJvcCBpbiBjb25maWcxKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBhKTtcbiAgICB9XG4gIH1cblxuICBjb25zdCBtZXJnZU1hcCA9IHtcbiAgICB1cmw6IHZhbHVlRnJvbUNvbmZpZzIsXG4gICAgbWV0aG9kOiB2YWx1ZUZyb21Db25maWcyLFxuICAgIGRhdGE6IHZhbHVlRnJvbUNvbmZpZzIsXG4gICAgYmFzZVVSTDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB0cmFuc2Zvcm1SZXF1ZXN0OiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHRyYW5zZm9ybVJlc3BvbnNlOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHBhcmFtc1NlcmlhbGl6ZXI6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgdGltZW91dDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB0aW1lb3V0TWVzc2FnZTogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB3aXRoQ3JlZGVudGlhbHM6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgd2l0aFhTUkZUb2tlbjogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBhZGFwdGVyOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHJlc3BvbnNlVHlwZTogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB4c3JmQ29va2llTmFtZTogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB4c3JmSGVhZGVyTmFtZTogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBvblVwbG9hZFByb2dyZXNzOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIG9uRG93bmxvYWRQcm9ncmVzczogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBkZWNvbXByZXNzOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIG1heENvbnRlbnRMZW5ndGg6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgbWF4Qm9keUxlbmd0aDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBiZWZvcmVSZWRpcmVjdDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB0cmFuc3BvcnQ6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgaHR0cEFnZW50OiBkZWZhdWx0VG9Db25maWcyLFxuICAgIGh0dHBzQWdlbnQ6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgY2FuY2VsVG9rZW46IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgc29ja2V0UGF0aDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICByZXNwb25zZUVuY29kaW5nOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHZhbGlkYXRlU3RhdHVzOiBtZXJnZURpcmVjdEtleXMsXG4gICAgaGVhZGVyczogKGEsIGIgLCBwcm9wKSA9PiBtZXJnZURlZXBQcm9wZXJ0aWVzKGhlYWRlcnNUb09iamVjdChhKSwgaGVhZGVyc1RvT2JqZWN0KGIpLHByb3AsIHRydWUpXG4gIH07XG5cbiAgdXRpbHMuZm9yRWFjaChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCBjb25maWcxLCBjb25maWcyKSksIGZ1bmN0aW9uIGNvbXB1dGVDb25maWdWYWx1ZShwcm9wKSB7XG4gICAgY29uc3QgbWVyZ2UgPSBtZXJnZU1hcFtwcm9wXSB8fCBtZXJnZURlZXBQcm9wZXJ0aWVzO1xuICAgIGNvbnN0IGNvbmZpZ1ZhbHVlID0gbWVyZ2UoY29uZmlnMVtwcm9wXSwgY29uZmlnMltwcm9wXSwgcHJvcCk7XG4gICAgKHV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZ1ZhbHVlKSAmJiBtZXJnZSAhPT0gbWVyZ2VEaXJlY3RLZXlzKSB8fCAoY29uZmlnW3Byb3BdID0gY29uZmlnVmFsdWUpO1xuICB9KTtcblxuICByZXR1cm4gY29uZmlnO1xufVxuIiwgImltcG9ydCBwbGF0Zm9ybSBmcm9tIFwiLi4vcGxhdGZvcm0vaW5kZXguanNcIjtcbmltcG9ydCB1dGlscyBmcm9tIFwiLi4vdXRpbHMuanNcIjtcbmltcG9ydCBpc1VSTFNhbWVPcmlnaW4gZnJvbSBcIi4vaXNVUkxTYW1lT3JpZ2luLmpzXCI7XG5pbXBvcnQgY29va2llcyBmcm9tIFwiLi9jb29raWVzLmpzXCI7XG5pbXBvcnQgYnVpbGRGdWxsUGF0aCBmcm9tIFwiLi4vY29yZS9idWlsZEZ1bGxQYXRoLmpzXCI7XG5pbXBvcnQgbWVyZ2VDb25maWcgZnJvbSBcIi4uL2NvcmUvbWVyZ2VDb25maWcuanNcIjtcbmltcG9ydCBBeGlvc0hlYWRlcnMgZnJvbSBcIi4uL2NvcmUvQXhpb3NIZWFkZXJzLmpzXCI7XG5pbXBvcnQgYnVpbGRVUkwgZnJvbSBcIi4vYnVpbGRVUkwuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgKGNvbmZpZykgPT4ge1xuICBjb25zdCBuZXdDb25maWcgPSBtZXJnZUNvbmZpZyh7fSwgY29uZmlnKTtcblxuICBsZXQge2RhdGEsIHdpdGhYU1JGVG9rZW4sIHhzcmZIZWFkZXJOYW1lLCB4c3JmQ29va2llTmFtZSwgaGVhZGVycywgYXV0aH0gPSBuZXdDb25maWc7XG5cbiAgbmV3Q29uZmlnLmhlYWRlcnMgPSBoZWFkZXJzID0gQXhpb3NIZWFkZXJzLmZyb20oaGVhZGVycyk7XG5cbiAgbmV3Q29uZmlnLnVybCA9IGJ1aWxkVVJMKGJ1aWxkRnVsbFBhdGgobmV3Q29uZmlnLmJhc2VVUkwsIG5ld0NvbmZpZy51cmwpLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplcik7XG5cbiAgLy8gSFRUUCBiYXNpYyBhdXRoZW50aWNhdGlvblxuICBpZiAoYXV0aCkge1xuICAgIGhlYWRlcnMuc2V0KCdBdXRob3JpemF0aW9uJywgJ0Jhc2ljICcgK1xuICAgICAgYnRvYSgoYXV0aC51c2VybmFtZSB8fCAnJykgKyAnOicgKyAoYXV0aC5wYXNzd29yZCA/IHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChhdXRoLnBhc3N3b3JkKSkgOiAnJykpXG4gICAgKTtcbiAgfVxuXG4gIGxldCBjb250ZW50VHlwZTtcblxuICBpZiAodXRpbHMuaXNGb3JtRGF0YShkYXRhKSkge1xuICAgIGlmIChwbGF0Zm9ybS5oYXNTdGFuZGFyZEJyb3dzZXJFbnYgfHwgcGxhdGZvcm0uaGFzU3RhbmRhcmRCcm93c2VyV2ViV29ya2VyRW52KSB7XG4gICAgICBoZWFkZXJzLnNldENvbnRlbnRUeXBlKHVuZGVmaW5lZCk7IC8vIExldCB0aGUgYnJvd3NlciBzZXQgaXRcbiAgICB9IGVsc2UgaWYgKChjb250ZW50VHlwZSA9IGhlYWRlcnMuZ2V0Q29udGVudFR5cGUoKSkgIT09IGZhbHNlKSB7XG4gICAgICAvLyBmaXggc2VtaWNvbG9uIGR1cGxpY2F0aW9uIGlzc3VlIGZvciBSZWFjdE5hdGl2ZSBGb3JtRGF0YSBpbXBsZW1lbnRhdGlvblxuICAgICAgY29uc3QgW3R5cGUsIC4uLnRva2Vuc10gPSBjb250ZW50VHlwZSA/IGNvbnRlbnRUeXBlLnNwbGl0KCc7JykubWFwKHRva2VuID0+IHRva2VuLnRyaW0oKSkuZmlsdGVyKEJvb2xlYW4pIDogW107XG4gICAgICBoZWFkZXJzLnNldENvbnRlbnRUeXBlKFt0eXBlIHx8ICdtdWx0aXBhcnQvZm9ybS1kYXRhJywgLi4udG9rZW5zXS5qb2luKCc7ICcpKTtcbiAgICB9XG4gIH1cblxuICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgLy8gVGhpcyBpcyBvbmx5IGRvbmUgaWYgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnQuXG4gIC8vIFNwZWNpZmljYWxseSBub3QgaWYgd2UncmUgaW4gYSB3ZWIgd29ya2VyLCBvciByZWFjdC1uYXRpdmUuXG5cbiAgaWYgKHBsYXRmb3JtLmhhc1N0YW5kYXJkQnJvd3NlckVudikge1xuICAgIHdpdGhYU1JGVG9rZW4gJiYgdXRpbHMuaXNGdW5jdGlvbih3aXRoWFNSRlRva2VuKSAmJiAod2l0aFhTUkZUb2tlbiA9IHdpdGhYU1JGVG9rZW4obmV3Q29uZmlnKSk7XG5cbiAgICBpZiAod2l0aFhTUkZUb2tlbiB8fCAod2l0aFhTUkZUb2tlbiAhPT0gZmFsc2UgJiYgaXNVUkxTYW1lT3JpZ2luKG5ld0NvbmZpZy51cmwpKSkge1xuICAgICAgLy8gQWRkIHhzcmYgaGVhZGVyXG4gICAgICBjb25zdCB4c3JmVmFsdWUgPSB4c3JmSGVhZGVyTmFtZSAmJiB4c3JmQ29va2llTmFtZSAmJiBjb29raWVzLnJlYWQoeHNyZkNvb2tpZU5hbWUpO1xuXG4gICAgICBpZiAoeHNyZlZhbHVlKSB7XG4gICAgICAgIGhlYWRlcnMuc2V0KHhzcmZIZWFkZXJOYW1lLCB4c3JmVmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXdDb25maWc7XG59XG5cbiIsICJpbXBvcnQgdXRpbHMgZnJvbSAnLi8uLi91dGlscy5qcyc7XG5pbXBvcnQgc2V0dGxlIGZyb20gJy4vLi4vY29yZS9zZXR0bGUuanMnO1xuaW1wb3J0IHRyYW5zaXRpb25hbERlZmF1bHRzIGZyb20gJy4uL2RlZmF1bHRzL3RyYW5zaXRpb25hbC5qcyc7XG5pbXBvcnQgQXhpb3NFcnJvciBmcm9tICcuLi9jb3JlL0F4aW9zRXJyb3IuanMnO1xuaW1wb3J0IENhbmNlbGVkRXJyb3IgZnJvbSAnLi4vY2FuY2VsL0NhbmNlbGVkRXJyb3IuanMnO1xuaW1wb3J0IHBhcnNlUHJvdG9jb2wgZnJvbSAnLi4vaGVscGVycy9wYXJzZVByb3RvY29sLmpzJztcbmltcG9ydCBwbGF0Zm9ybSBmcm9tICcuLi9wbGF0Zm9ybS9pbmRleC5qcyc7XG5pbXBvcnQgQXhpb3NIZWFkZXJzIGZyb20gJy4uL2NvcmUvQXhpb3NIZWFkZXJzLmpzJztcbmltcG9ydCB7cHJvZ3Jlc3NFdmVudFJlZHVjZXJ9IGZyb20gJy4uL2hlbHBlcnMvcHJvZ3Jlc3NFdmVudFJlZHVjZXIuanMnO1xuaW1wb3J0IHJlc29sdmVDb25maWcgZnJvbSBcIi4uL2hlbHBlcnMvcmVzb2x2ZUNvbmZpZy5qc1wiO1xuXG5jb25zdCBpc1hIUkFkYXB0ZXJTdXBwb3J0ZWQgPSB0eXBlb2YgWE1MSHR0cFJlcXVlc3QgIT09ICd1bmRlZmluZWQnO1xuXG5leHBvcnQgZGVmYXVsdCBpc1hIUkFkYXB0ZXJTdXBwb3J0ZWQgJiYgZnVuY3Rpb24gKGNvbmZpZykge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gZGlzcGF0Y2hYaHJSZXF1ZXN0KHJlc29sdmUsIHJlamVjdCkge1xuICAgIGNvbnN0IF9jb25maWcgPSByZXNvbHZlQ29uZmlnKGNvbmZpZyk7XG4gICAgbGV0IHJlcXVlc3REYXRhID0gX2NvbmZpZy5kYXRhO1xuICAgIGNvbnN0IHJlcXVlc3RIZWFkZXJzID0gQXhpb3NIZWFkZXJzLmZyb20oX2NvbmZpZy5oZWFkZXJzKS5ub3JtYWxpemUoKTtcbiAgICBsZXQge3Jlc3BvbnNlVHlwZSwgb25VcGxvYWRQcm9ncmVzcywgb25Eb3dubG9hZFByb2dyZXNzfSA9IF9jb25maWc7XG4gICAgbGV0IG9uQ2FuY2VsZWQ7XG4gICAgbGV0IHVwbG9hZFRocm90dGxlZCwgZG93bmxvYWRUaHJvdHRsZWQ7XG4gICAgbGV0IGZsdXNoVXBsb2FkLCBmbHVzaERvd25sb2FkO1xuXG4gICAgZnVuY3Rpb24gZG9uZSgpIHtcbiAgICAgIGZsdXNoVXBsb2FkICYmIGZsdXNoVXBsb2FkKCk7IC8vIGZsdXNoIGV2ZW50c1xuICAgICAgZmx1c2hEb3dubG9hZCAmJiBmbHVzaERvd25sb2FkKCk7IC8vIGZsdXNoIGV2ZW50c1xuXG4gICAgICBfY29uZmlnLmNhbmNlbFRva2VuICYmIF9jb25maWcuY2FuY2VsVG9rZW4udW5zdWJzY3JpYmUob25DYW5jZWxlZCk7XG5cbiAgICAgIF9jb25maWcuc2lnbmFsICYmIF9jb25maWcuc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Fib3J0Jywgb25DYW5jZWxlZCk7XG4gICAgfVxuXG4gICAgbGV0IHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuICAgIHJlcXVlc3Qub3BlbihfY29uZmlnLm1ldGhvZC50b1VwcGVyQ2FzZSgpLCBfY29uZmlnLnVybCwgdHJ1ZSk7XG5cbiAgICAvLyBTZXQgdGhlIHJlcXVlc3QgdGltZW91dCBpbiBNU1xuICAgIHJlcXVlc3QudGltZW91dCA9IF9jb25maWcudGltZW91dDtcblxuICAgIGZ1bmN0aW9uIG9ubG9hZGVuZCgpIHtcbiAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyBQcmVwYXJlIHRoZSByZXNwb25zZVxuICAgICAgY29uc3QgcmVzcG9uc2VIZWFkZXJzID0gQXhpb3NIZWFkZXJzLmZyb20oXG4gICAgICAgICdnZXRBbGxSZXNwb25zZUhlYWRlcnMnIGluIHJlcXVlc3QgJiYgcmVxdWVzdC5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKVxuICAgICAgKTtcbiAgICAgIGNvbnN0IHJlc3BvbnNlRGF0YSA9ICFyZXNwb25zZVR5cGUgfHwgcmVzcG9uc2VUeXBlID09PSAndGV4dCcgfHwgcmVzcG9uc2VUeXBlID09PSAnanNvbicgP1xuICAgICAgICByZXF1ZXN0LnJlc3BvbnNlVGV4dCA6IHJlcXVlc3QucmVzcG9uc2U7XG4gICAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgZGF0YTogcmVzcG9uc2VEYXRhLFxuICAgICAgICBzdGF0dXM6IHJlcXVlc3Quc3RhdHVzLFxuICAgICAgICBzdGF0dXNUZXh0OiByZXF1ZXN0LnN0YXR1c1RleHQsXG4gICAgICAgIGhlYWRlcnM6IHJlc3BvbnNlSGVhZGVycyxcbiAgICAgICAgY29uZmlnLFxuICAgICAgICByZXF1ZXN0XG4gICAgICB9O1xuXG4gICAgICBzZXR0bGUoZnVuY3Rpb24gX3Jlc29sdmUodmFsdWUpIHtcbiAgICAgICAgcmVzb2x2ZSh2YWx1ZSk7XG4gICAgICAgIGRvbmUoKTtcbiAgICAgIH0sIGZ1bmN0aW9uIF9yZWplY3QoZXJyKSB7XG4gICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICBkb25lKCk7XG4gICAgICB9LCByZXNwb25zZSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH1cblxuICAgIGlmICgnb25sb2FkZW5kJyBpbiByZXF1ZXN0KSB7XG4gICAgICAvLyBVc2Ugb25sb2FkZW5kIGlmIGF2YWlsYWJsZVxuICAgICAgcmVxdWVzdC5vbmxvYWRlbmQgPSBvbmxvYWRlbmQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIExpc3RlbiBmb3IgcmVhZHkgc3RhdGUgdG8gZW11bGF0ZSBvbmxvYWRlbmRcbiAgICAgIHJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlTG9hZCgpIHtcbiAgICAgICAgaWYgKCFyZXF1ZXN0IHx8IHJlcXVlc3QucmVhZHlTdGF0ZSAhPT0gNCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRoZSByZXF1ZXN0IGVycm9yZWQgb3V0IGFuZCB3ZSBkaWRuJ3QgZ2V0IGEgcmVzcG9uc2UsIHRoaXMgd2lsbCBiZVxuICAgICAgICAvLyBoYW5kbGVkIGJ5IG9uZXJyb3IgaW5zdGVhZFxuICAgICAgICAvLyBXaXRoIG9uZSBleGNlcHRpb246IHJlcXVlc3QgdGhhdCB1c2luZyBmaWxlOiBwcm90b2NvbCwgbW9zdCBicm93c2Vyc1xuICAgICAgICAvLyB3aWxsIHJldHVybiBzdGF0dXMgYXMgMCBldmVuIHRob3VnaCBpdCdzIGEgc3VjY2Vzc2Z1bCByZXF1ZXN0XG4gICAgICAgIGlmIChyZXF1ZXN0LnN0YXR1cyA9PT0gMCAmJiAhKHJlcXVlc3QucmVzcG9uc2VVUkwgJiYgcmVxdWVzdC5yZXNwb25zZVVSTC5pbmRleE9mKCdmaWxlOicpID09PSAwKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyByZWFkeXN0YXRlIGhhbmRsZXIgaXMgY2FsbGluZyBiZWZvcmUgb25lcnJvciBvciBvbnRpbWVvdXQgaGFuZGxlcnMsXG4gICAgICAgIC8vIHNvIHdlIHNob3VsZCBjYWxsIG9ubG9hZGVuZCBvbiB0aGUgbmV4dCAndGljaydcbiAgICAgICAgc2V0VGltZW91dChvbmxvYWRlbmQpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgYnJvd3NlciByZXF1ZXN0IGNhbmNlbGxhdGlvbiAoYXMgb3Bwb3NlZCB0byBhIG1hbnVhbCBjYW5jZWxsYXRpb24pXG4gICAgcmVxdWVzdC5vbmFib3J0ID0gZnVuY3Rpb24gaGFuZGxlQWJvcnQoKSB7XG4gICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICByZWplY3QobmV3IEF4aW9zRXJyb3IoJ1JlcXVlc3QgYWJvcnRlZCcsIEF4aW9zRXJyb3IuRUNPTk5BQk9SVEVELCBjb25maWcsIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSBsb3cgbGV2ZWwgbmV0d29yayBlcnJvcnNcbiAgICByZXF1ZXN0Lm9uZXJyb3IgPSBmdW5jdGlvbiBoYW5kbGVFcnJvcigpIHtcbiAgICAgIC8vIFJlYWwgZXJyb3JzIGFyZSBoaWRkZW4gZnJvbSB1cyBieSB0aGUgYnJvd3NlclxuICAgICAgLy8gb25lcnJvciBzaG91bGQgb25seSBmaXJlIGlmIGl0J3MgYSBuZXR3b3JrIGVycm9yXG4gICAgICByZWplY3QobmV3IEF4aW9zRXJyb3IoJ05ldHdvcmsgRXJyb3InLCBBeGlvc0Vycm9yLkVSUl9ORVRXT1JLLCBjb25maWcsIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSB0aW1lb3V0XG4gICAgcmVxdWVzdC5vbnRpbWVvdXQgPSBmdW5jdGlvbiBoYW5kbGVUaW1lb3V0KCkge1xuICAgICAgbGV0IHRpbWVvdXRFcnJvck1lc3NhZ2UgPSBfY29uZmlnLnRpbWVvdXQgPyAndGltZW91dCBvZiAnICsgX2NvbmZpZy50aW1lb3V0ICsgJ21zIGV4Y2VlZGVkJyA6ICd0aW1lb3V0IGV4Y2VlZGVkJztcbiAgICAgIGNvbnN0IHRyYW5zaXRpb25hbCA9IF9jb25maWcudHJhbnNpdGlvbmFsIHx8IHRyYW5zaXRpb25hbERlZmF1bHRzO1xuICAgICAgaWYgKF9jb25maWcudGltZW91dEVycm9yTWVzc2FnZSkge1xuICAgICAgICB0aW1lb3V0RXJyb3JNZXNzYWdlID0gX2NvbmZpZy50aW1lb3V0RXJyb3JNZXNzYWdlO1xuICAgICAgfVxuICAgICAgcmVqZWN0KG5ldyBBeGlvc0Vycm9yKFxuICAgICAgICB0aW1lb3V0RXJyb3JNZXNzYWdlLFxuICAgICAgICB0cmFuc2l0aW9uYWwuY2xhcmlmeVRpbWVvdXRFcnJvciA/IEF4aW9zRXJyb3IuRVRJTUVET1VUIDogQXhpb3NFcnJvci5FQ09OTkFCT1JURUQsXG4gICAgICAgIGNvbmZpZyxcbiAgICAgICAgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gUmVtb3ZlIENvbnRlbnQtVHlwZSBpZiBkYXRhIGlzIHVuZGVmaW5lZFxuICAgIHJlcXVlc3REYXRhID09PSB1bmRlZmluZWQgJiYgcmVxdWVzdEhlYWRlcnMuc2V0Q29udGVudFR5cGUobnVsbCk7XG5cbiAgICAvLyBBZGQgaGVhZGVycyB0byB0aGUgcmVxdWVzdFxuICAgIGlmICgnc2V0UmVxdWVzdEhlYWRlcicgaW4gcmVxdWVzdCkge1xuICAgICAgdXRpbHMuZm9yRWFjaChyZXF1ZXN0SGVhZGVycy50b0pTT04oKSwgZnVuY3Rpb24gc2V0UmVxdWVzdEhlYWRlcih2YWwsIGtleSkge1xuICAgICAgICByZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoa2V5LCB2YWwpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gQWRkIHdpdGhDcmVkZW50aWFscyB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoX2NvbmZpZy53aXRoQ3JlZGVudGlhbHMpKSB7XG4gICAgICByZXF1ZXN0LndpdGhDcmVkZW50aWFscyA9ICEhX2NvbmZpZy53aXRoQ3JlZGVudGlhbHM7XG4gICAgfVxuXG4gICAgLy8gQWRkIHJlc3BvbnNlVHlwZSB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmIChyZXNwb25zZVR5cGUgJiYgcmVzcG9uc2VUeXBlICE9PSAnanNvbicpIHtcbiAgICAgIHJlcXVlc3QucmVzcG9uc2VUeXBlID0gX2NvbmZpZy5yZXNwb25zZVR5cGU7XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIHByb2dyZXNzIGlmIG5lZWRlZFxuICAgIGlmIChvbkRvd25sb2FkUHJvZ3Jlc3MpIHtcbiAgICAgIChbZG93bmxvYWRUaHJvdHRsZWQsIGZsdXNoRG93bmxvYWRdID0gcHJvZ3Jlc3NFdmVudFJlZHVjZXIob25Eb3dubG9hZFByb2dyZXNzLCB0cnVlKSk7XG4gICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgZG93bmxvYWRUaHJvdHRsZWQpO1xuICAgIH1cblxuICAgIC8vIE5vdCBhbGwgYnJvd3NlcnMgc3VwcG9ydCB1cGxvYWQgZXZlbnRzXG4gICAgaWYgKG9uVXBsb2FkUHJvZ3Jlc3MgJiYgcmVxdWVzdC51cGxvYWQpIHtcbiAgICAgIChbdXBsb2FkVGhyb3R0bGVkLCBmbHVzaFVwbG9hZF0gPSBwcm9ncmVzc0V2ZW50UmVkdWNlcihvblVwbG9hZFByb2dyZXNzKSk7XG5cbiAgICAgIHJlcXVlc3QudXBsb2FkLmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgdXBsb2FkVGhyb3R0bGVkKTtcblxuICAgICAgcmVxdWVzdC51cGxvYWQuYWRkRXZlbnRMaXN0ZW5lcignbG9hZGVuZCcsIGZsdXNoVXBsb2FkKTtcbiAgICB9XG5cbiAgICBpZiAoX2NvbmZpZy5jYW5jZWxUb2tlbiB8fCBfY29uZmlnLnNpZ25hbCkge1xuICAgICAgLy8gSGFuZGxlIGNhbmNlbGxhdGlvblxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgICAgIG9uQ2FuY2VsZWQgPSBjYW5jZWwgPT4ge1xuICAgICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgcmVqZWN0KCFjYW5jZWwgfHwgY2FuY2VsLnR5cGUgPyBuZXcgQ2FuY2VsZWRFcnJvcihudWxsLCBjb25maWcsIHJlcXVlc3QpIDogY2FuY2VsKTtcbiAgICAgICAgcmVxdWVzdC5hYm9ydCgpO1xuICAgICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICAgIH07XG5cbiAgICAgIF9jb25maWcuY2FuY2VsVG9rZW4gJiYgX2NvbmZpZy5jYW5jZWxUb2tlbi5zdWJzY3JpYmUob25DYW5jZWxlZCk7XG4gICAgICBpZiAoX2NvbmZpZy5zaWduYWwpIHtcbiAgICAgICAgX2NvbmZpZy5zaWduYWwuYWJvcnRlZCA/IG9uQ2FuY2VsZWQoKSA6IF9jb25maWcuc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoJ2Fib3J0Jywgb25DYW5jZWxlZCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgcHJvdG9jb2wgPSBwYXJzZVByb3RvY29sKF9jb25maWcudXJsKTtcblxuICAgIGlmIChwcm90b2NvbCAmJiBwbGF0Zm9ybS5wcm90b2NvbHMuaW5kZXhPZihwcm90b2NvbCkgPT09IC0xKSB7XG4gICAgICByZWplY3QobmV3IEF4aW9zRXJyb3IoJ1Vuc3VwcG9ydGVkIHByb3RvY29sICcgKyBwcm90b2NvbCArICc6JywgQXhpb3NFcnJvci5FUlJfQkFEX1JFUVVFU1QsIGNvbmZpZykpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuXG4gICAgLy8gU2VuZCB0aGUgcmVxdWVzdFxuICAgIHJlcXVlc3Quc2VuZChyZXF1ZXN0RGF0YSB8fCBudWxsKTtcbiAgfSk7XG59XG4iLCAiaW1wb3J0IENhbmNlbGVkRXJyb3IgZnJvbSBcIi4uL2NhbmNlbC9DYW5jZWxlZEVycm9yLmpzXCI7XG5pbXBvcnQgQXhpb3NFcnJvciBmcm9tIFwiLi4vY29yZS9BeGlvc0Vycm9yLmpzXCI7XG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuXG5jb25zdCBjb21wb3NlU2lnbmFscyA9IChzaWduYWxzLCB0aW1lb3V0KSA9PiB7XG4gIGNvbnN0IHtsZW5ndGh9ID0gKHNpZ25hbHMgPSBzaWduYWxzID8gc2lnbmFscy5maWx0ZXIoQm9vbGVhbikgOiBbXSk7XG5cbiAgaWYgKHRpbWVvdXQgfHwgbGVuZ3RoKSB7XG4gICAgbGV0IGNvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG5cbiAgICBsZXQgYWJvcnRlZDtcblxuICAgIGNvbnN0IG9uYWJvcnQgPSBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICBpZiAoIWFib3J0ZWQpIHtcbiAgICAgICAgYWJvcnRlZCA9IHRydWU7XG4gICAgICAgIHVuc3Vic2NyaWJlKCk7XG4gICAgICAgIGNvbnN0IGVyciA9IHJlYXNvbiBpbnN0YW5jZW9mIEVycm9yID8gcmVhc29uIDogdGhpcy5yZWFzb247XG4gICAgICAgIGNvbnRyb2xsZXIuYWJvcnQoZXJyIGluc3RhbmNlb2YgQXhpb3NFcnJvciA/IGVyciA6IG5ldyBDYW5jZWxlZEVycm9yKGVyciBpbnN0YW5jZW9mIEVycm9yID8gZXJyLm1lc3NhZ2UgOiBlcnIpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgdGltZXIgPSB0aW1lb3V0ICYmIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGltZXIgPSBudWxsO1xuICAgICAgb25hYm9ydChuZXcgQXhpb3NFcnJvcihgdGltZW91dCAke3RpbWVvdXR9IG9mIG1zIGV4Y2VlZGVkYCwgQXhpb3NFcnJvci5FVElNRURPVVQpKVxuICAgIH0sIHRpbWVvdXQpXG5cbiAgICBjb25zdCB1bnN1YnNjcmliZSA9ICgpID0+IHtcbiAgICAgIGlmIChzaWduYWxzKSB7XG4gICAgICAgIHRpbWVyICYmIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgICAgIHRpbWVyID0gbnVsbDtcbiAgICAgICAgc2lnbmFscy5mb3JFYWNoKHNpZ25hbCA9PiB7XG4gICAgICAgICAgc2lnbmFsLnVuc3Vic2NyaWJlID8gc2lnbmFsLnVuc3Vic2NyaWJlKG9uYWJvcnQpIDogc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Fib3J0Jywgb25hYm9ydCk7XG4gICAgICAgIH0pO1xuICAgICAgICBzaWduYWxzID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzaWduYWxzLmZvckVhY2goKHNpZ25hbCkgPT4gc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoJ2Fib3J0Jywgb25hYm9ydCkpO1xuXG4gICAgY29uc3Qge3NpZ25hbH0gPSBjb250cm9sbGVyO1xuXG4gICAgc2lnbmFsLnVuc3Vic2NyaWJlID0gKCkgPT4gdXRpbHMuYXNhcCh1bnN1YnNjcmliZSk7XG5cbiAgICByZXR1cm4gc2lnbmFsO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvbXBvc2VTaWduYWxzO1xuIiwgIlxuZXhwb3J0IGNvbnN0IHN0cmVhbUNodW5rID0gZnVuY3Rpb24qIChjaHVuaywgY2h1bmtTaXplKSB7XG4gIGxldCBsZW4gPSBjaHVuay5ieXRlTGVuZ3RoO1xuXG4gIGlmICghY2h1bmtTaXplIHx8IGxlbiA8IGNodW5rU2l6ZSkge1xuICAgIHlpZWxkIGNodW5rO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGxldCBwb3MgPSAwO1xuICBsZXQgZW5kO1xuXG4gIHdoaWxlIChwb3MgPCBsZW4pIHtcbiAgICBlbmQgPSBwb3MgKyBjaHVua1NpemU7XG4gICAgeWllbGQgY2h1bmsuc2xpY2UocG9zLCBlbmQpO1xuICAgIHBvcyA9IGVuZDtcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgcmVhZEJ5dGVzID0gYXN5bmMgZnVuY3Rpb24qIChpdGVyYWJsZSwgY2h1bmtTaXplKSB7XG4gIGZvciBhd2FpdCAoY29uc3QgY2h1bmsgb2YgcmVhZFN0cmVhbShpdGVyYWJsZSkpIHtcbiAgICB5aWVsZCogc3RyZWFtQ2h1bmsoY2h1bmssIGNodW5rU2l6ZSk7XG4gIH1cbn1cblxuY29uc3QgcmVhZFN0cmVhbSA9IGFzeW5jIGZ1bmN0aW9uKiAoc3RyZWFtKSB7XG4gIGlmIChzdHJlYW1bU3ltYm9sLmFzeW5jSXRlcmF0b3JdKSB7XG4gICAgeWllbGQqIHN0cmVhbTtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCByZWFkZXIgPSBzdHJlYW0uZ2V0UmVhZGVyKCk7XG4gIHRyeSB7XG4gICAgZm9yICg7Oykge1xuICAgICAgY29uc3Qge2RvbmUsIHZhbHVlfSA9IGF3YWl0IHJlYWRlci5yZWFkKCk7XG4gICAgICBpZiAoZG9uZSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHlpZWxkIHZhbHVlO1xuICAgIH1cbiAgfSBmaW5hbGx5IHtcbiAgICBhd2FpdCByZWFkZXIuY2FuY2VsKCk7XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IHRyYWNrU3RyZWFtID0gKHN0cmVhbSwgY2h1bmtTaXplLCBvblByb2dyZXNzLCBvbkZpbmlzaCkgPT4ge1xuICBjb25zdCBpdGVyYXRvciA9IHJlYWRCeXRlcyhzdHJlYW0sIGNodW5rU2l6ZSk7XG5cbiAgbGV0IGJ5dGVzID0gMDtcbiAgbGV0IGRvbmU7XG4gIGxldCBfb25GaW5pc2ggPSAoZSkgPT4ge1xuICAgIGlmICghZG9uZSkge1xuICAgICAgZG9uZSA9IHRydWU7XG4gICAgICBvbkZpbmlzaCAmJiBvbkZpbmlzaChlKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFJlYWRhYmxlU3RyZWFtKHtcbiAgICBhc3luYyBwdWxsKGNvbnRyb2xsZXIpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHtkb25lLCB2YWx1ZX0gPSBhd2FpdCBpdGVyYXRvci5uZXh0KCk7XG5cbiAgICAgICAgaWYgKGRvbmUpIHtcbiAgICAgICAgIF9vbkZpbmlzaCgpO1xuICAgICAgICAgIGNvbnRyb2xsZXIuY2xvc2UoKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgbGVuID0gdmFsdWUuYnl0ZUxlbmd0aDtcbiAgICAgICAgaWYgKG9uUHJvZ3Jlc3MpIHtcbiAgICAgICAgICBsZXQgbG9hZGVkQnl0ZXMgPSBieXRlcyArPSBsZW47XG4gICAgICAgICAgb25Qcm9ncmVzcyhsb2FkZWRCeXRlcyk7XG4gICAgICAgIH1cbiAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKG5ldyBVaW50OEFycmF5KHZhbHVlKSk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgX29uRmluaXNoKGVycik7XG4gICAgICAgIHRocm93IGVycjtcbiAgICAgIH1cbiAgICB9LFxuICAgIGNhbmNlbChyZWFzb24pIHtcbiAgICAgIF9vbkZpbmlzaChyZWFzb24pO1xuICAgICAgcmV0dXJuIGl0ZXJhdG9yLnJldHVybigpO1xuICAgIH1cbiAgfSwge1xuICAgIGhpZ2hXYXRlck1hcms6IDJcbiAgfSlcbn1cbiIsICJpbXBvcnQgcGxhdGZvcm0gZnJvbSBcIi4uL3BsYXRmb3JtL2luZGV4LmpzXCI7XG5pbXBvcnQgdXRpbHMgZnJvbSBcIi4uL3V0aWxzLmpzXCI7XG5pbXBvcnQgQXhpb3NFcnJvciBmcm9tIFwiLi4vY29yZS9BeGlvc0Vycm9yLmpzXCI7XG5pbXBvcnQgY29tcG9zZVNpZ25hbHMgZnJvbSBcIi4uL2hlbHBlcnMvY29tcG9zZVNpZ25hbHMuanNcIjtcbmltcG9ydCB7dHJhY2tTdHJlYW19IGZyb20gXCIuLi9oZWxwZXJzL3RyYWNrU3RyZWFtLmpzXCI7XG5pbXBvcnQgQXhpb3NIZWFkZXJzIGZyb20gXCIuLi9jb3JlL0F4aW9zSGVhZGVycy5qc1wiO1xuaW1wb3J0IHtwcm9ncmVzc0V2ZW50UmVkdWNlciwgcHJvZ3Jlc3NFdmVudERlY29yYXRvciwgYXN5bmNEZWNvcmF0b3J9IGZyb20gXCIuLi9oZWxwZXJzL3Byb2dyZXNzRXZlbnRSZWR1Y2VyLmpzXCI7XG5pbXBvcnQgcmVzb2x2ZUNvbmZpZyBmcm9tIFwiLi4vaGVscGVycy9yZXNvbHZlQ29uZmlnLmpzXCI7XG5pbXBvcnQgc2V0dGxlIGZyb20gXCIuLi9jb3JlL3NldHRsZS5qc1wiO1xuXG5jb25zdCBpc0ZldGNoU3VwcG9ydGVkID0gdHlwZW9mIGZldGNoID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBSZXF1ZXN0ID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBSZXNwb25zZSA9PT0gJ2Z1bmN0aW9uJztcbmNvbnN0IGlzUmVhZGFibGVTdHJlYW1TdXBwb3J0ZWQgPSBpc0ZldGNoU3VwcG9ydGVkICYmIHR5cGVvZiBSZWFkYWJsZVN0cmVhbSA9PT0gJ2Z1bmN0aW9uJztcblxuLy8gdXNlZCBvbmx5IGluc2lkZSB0aGUgZmV0Y2ggYWRhcHRlclxuY29uc3QgZW5jb2RlVGV4dCA9IGlzRmV0Y2hTdXBwb3J0ZWQgJiYgKHR5cGVvZiBUZXh0RW5jb2RlciA9PT0gJ2Z1bmN0aW9uJyA/XG4gICAgKChlbmNvZGVyKSA9PiAoc3RyKSA9PiBlbmNvZGVyLmVuY29kZShzdHIpKShuZXcgVGV4dEVuY29kZXIoKSkgOlxuICAgIGFzeW5jIChzdHIpID0+IG5ldyBVaW50OEFycmF5KGF3YWl0IG5ldyBSZXNwb25zZShzdHIpLmFycmF5QnVmZmVyKCkpXG4pO1xuXG5jb25zdCB0ZXN0ID0gKGZuLCAuLi5hcmdzKSA9PiB7XG4gIHRyeSB7XG4gICAgcmV0dXJuICEhZm4oLi4uYXJncyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5jb25zdCBzdXBwb3J0c1JlcXVlc3RTdHJlYW0gPSBpc1JlYWRhYmxlU3RyZWFtU3VwcG9ydGVkICYmIHRlc3QoKCkgPT4ge1xuICBsZXQgZHVwbGV4QWNjZXNzZWQgPSBmYWxzZTtcblxuICBjb25zdCBoYXNDb250ZW50VHlwZSA9IG5ldyBSZXF1ZXN0KHBsYXRmb3JtLm9yaWdpbiwge1xuICAgIGJvZHk6IG5ldyBSZWFkYWJsZVN0cmVhbSgpLFxuICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgIGdldCBkdXBsZXgoKSB7XG4gICAgICBkdXBsZXhBY2Nlc3NlZCA9IHRydWU7XG4gICAgICByZXR1cm4gJ2hhbGYnO1xuICAgIH0sXG4gIH0pLmhlYWRlcnMuaGFzKCdDb250ZW50LVR5cGUnKTtcblxuICByZXR1cm4gZHVwbGV4QWNjZXNzZWQgJiYgIWhhc0NvbnRlbnRUeXBlO1xufSk7XG5cbmNvbnN0IERFRkFVTFRfQ0hVTktfU0laRSA9IDY0ICogMTAyNDtcblxuY29uc3Qgc3VwcG9ydHNSZXNwb25zZVN0cmVhbSA9IGlzUmVhZGFibGVTdHJlYW1TdXBwb3J0ZWQgJiZcbiAgdGVzdCgoKSA9PiB1dGlscy5pc1JlYWRhYmxlU3RyZWFtKG5ldyBSZXNwb25zZSgnJykuYm9keSkpO1xuXG5cbmNvbnN0IHJlc29sdmVycyA9IHtcbiAgc3RyZWFtOiBzdXBwb3J0c1Jlc3BvbnNlU3RyZWFtICYmICgocmVzKSA9PiByZXMuYm9keSlcbn07XG5cbmlzRmV0Y2hTdXBwb3J0ZWQgJiYgKCgocmVzKSA9PiB7XG4gIFsndGV4dCcsICdhcnJheUJ1ZmZlcicsICdibG9iJywgJ2Zvcm1EYXRhJywgJ3N0cmVhbSddLmZvckVhY2godHlwZSA9PiB7XG4gICAgIXJlc29sdmVyc1t0eXBlXSAmJiAocmVzb2x2ZXJzW3R5cGVdID0gdXRpbHMuaXNGdW5jdGlvbihyZXNbdHlwZV0pID8gKHJlcykgPT4gcmVzW3R5cGVdKCkgOlxuICAgICAgKF8sIGNvbmZpZykgPT4ge1xuICAgICAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcihgUmVzcG9uc2UgdHlwZSAnJHt0eXBlfScgaXMgbm90IHN1cHBvcnRlZGAsIEF4aW9zRXJyb3IuRVJSX05PVF9TVVBQT1JULCBjb25maWcpO1xuICAgICAgfSlcbiAgfSk7XG59KShuZXcgUmVzcG9uc2UpKTtcblxuY29uc3QgZ2V0Qm9keUxlbmd0aCA9IGFzeW5jIChib2R5KSA9PiB7XG4gIGlmIChib2R5ID09IG51bGwpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIGlmKHV0aWxzLmlzQmxvYihib2R5KSkge1xuICAgIHJldHVybiBib2R5LnNpemU7XG4gIH1cblxuICBpZih1dGlscy5pc1NwZWNDb21wbGlhbnRGb3JtKGJvZHkpKSB7XG4gICAgY29uc3QgX3JlcXVlc3QgPSBuZXcgUmVxdWVzdChwbGF0Zm9ybS5vcmlnaW4sIHtcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgYm9keSxcbiAgICB9KTtcbiAgICByZXR1cm4gKGF3YWl0IF9yZXF1ZXN0LmFycmF5QnVmZmVyKCkpLmJ5dGVMZW5ndGg7XG4gIH1cblxuICBpZih1dGlscy5pc0FycmF5QnVmZmVyVmlldyhib2R5KSB8fCB1dGlscy5pc0FycmF5QnVmZmVyKGJvZHkpKSB7XG4gICAgcmV0dXJuIGJvZHkuYnl0ZUxlbmd0aDtcbiAgfVxuXG4gIGlmKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKGJvZHkpKSB7XG4gICAgYm9keSA9IGJvZHkgKyAnJztcbiAgfVxuXG4gIGlmKHV0aWxzLmlzU3RyaW5nKGJvZHkpKSB7XG4gICAgcmV0dXJuIChhd2FpdCBlbmNvZGVUZXh0KGJvZHkpKS5ieXRlTGVuZ3RoO1xuICB9XG59XG5cbmNvbnN0IHJlc29sdmVCb2R5TGVuZ3RoID0gYXN5bmMgKGhlYWRlcnMsIGJvZHkpID0+IHtcbiAgY29uc3QgbGVuZ3RoID0gdXRpbHMudG9GaW5pdGVOdW1iZXIoaGVhZGVycy5nZXRDb250ZW50TGVuZ3RoKCkpO1xuXG4gIHJldHVybiBsZW5ndGggPT0gbnVsbCA/IGdldEJvZHlMZW5ndGgoYm9keSkgOiBsZW5ndGg7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzRmV0Y2hTdXBwb3J0ZWQgJiYgKGFzeW5jIChjb25maWcpID0+IHtcbiAgbGV0IHtcbiAgICB1cmwsXG4gICAgbWV0aG9kLFxuICAgIGRhdGEsXG4gICAgc2lnbmFsLFxuICAgIGNhbmNlbFRva2VuLFxuICAgIHRpbWVvdXQsXG4gICAgb25Eb3dubG9hZFByb2dyZXNzLFxuICAgIG9uVXBsb2FkUHJvZ3Jlc3MsXG4gICAgcmVzcG9uc2VUeXBlLFxuICAgIGhlYWRlcnMsXG4gICAgd2l0aENyZWRlbnRpYWxzID0gJ3NhbWUtb3JpZ2luJyxcbiAgICBmZXRjaE9wdGlvbnNcbiAgfSA9IHJlc29sdmVDb25maWcoY29uZmlnKTtcblxuICByZXNwb25zZVR5cGUgPSByZXNwb25zZVR5cGUgPyAocmVzcG9uc2VUeXBlICsgJycpLnRvTG93ZXJDYXNlKCkgOiAndGV4dCc7XG5cbiAgbGV0IGNvbXBvc2VkU2lnbmFsID0gY29tcG9zZVNpZ25hbHMoW3NpZ25hbCwgY2FuY2VsVG9rZW4gJiYgY2FuY2VsVG9rZW4udG9BYm9ydFNpZ25hbCgpXSwgdGltZW91dCk7XG5cbiAgbGV0IHJlcXVlc3Q7XG5cbiAgY29uc3QgdW5zdWJzY3JpYmUgPSBjb21wb3NlZFNpZ25hbCAmJiBjb21wb3NlZFNpZ25hbC51bnN1YnNjcmliZSAmJiAoKCkgPT4ge1xuICAgICAgY29tcG9zZWRTaWduYWwudW5zdWJzY3JpYmUoKTtcbiAgfSk7XG5cbiAgbGV0IHJlcXVlc3RDb250ZW50TGVuZ3RoO1xuXG4gIHRyeSB7XG4gICAgaWYgKFxuICAgICAgb25VcGxvYWRQcm9ncmVzcyAmJiBzdXBwb3J0c1JlcXVlc3RTdHJlYW0gJiYgbWV0aG9kICE9PSAnZ2V0JyAmJiBtZXRob2QgIT09ICdoZWFkJyAmJlxuICAgICAgKHJlcXVlc3RDb250ZW50TGVuZ3RoID0gYXdhaXQgcmVzb2x2ZUJvZHlMZW5ndGgoaGVhZGVycywgZGF0YSkpICE9PSAwXG4gICAgKSB7XG4gICAgICBsZXQgX3JlcXVlc3QgPSBuZXcgUmVxdWVzdCh1cmwsIHtcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgIGJvZHk6IGRhdGEsXG4gICAgICAgIGR1cGxleDogXCJoYWxmXCJcbiAgICAgIH0pO1xuXG4gICAgICBsZXQgY29udGVudFR5cGVIZWFkZXI7XG5cbiAgICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKGRhdGEpICYmIChjb250ZW50VHlwZUhlYWRlciA9IF9yZXF1ZXN0LmhlYWRlcnMuZ2V0KCdjb250ZW50LXR5cGUnKSkpIHtcbiAgICAgICAgaGVhZGVycy5zZXRDb250ZW50VHlwZShjb250ZW50VHlwZUhlYWRlcilcbiAgICAgIH1cblxuICAgICAgaWYgKF9yZXF1ZXN0LmJvZHkpIHtcbiAgICAgICAgY29uc3QgW29uUHJvZ3Jlc3MsIGZsdXNoXSA9IHByb2dyZXNzRXZlbnREZWNvcmF0b3IoXG4gICAgICAgICAgcmVxdWVzdENvbnRlbnRMZW5ndGgsXG4gICAgICAgICAgcHJvZ3Jlc3NFdmVudFJlZHVjZXIoYXN5bmNEZWNvcmF0b3Iob25VcGxvYWRQcm9ncmVzcykpXG4gICAgICAgICk7XG5cbiAgICAgICAgZGF0YSA9IHRyYWNrU3RyZWFtKF9yZXF1ZXN0LmJvZHksIERFRkFVTFRfQ0hVTktfU0laRSwgb25Qcm9ncmVzcywgZmx1c2gpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghdXRpbHMuaXNTdHJpbmcod2l0aENyZWRlbnRpYWxzKSkge1xuICAgICAgd2l0aENyZWRlbnRpYWxzID0gd2l0aENyZWRlbnRpYWxzID8gJ2luY2x1ZGUnIDogJ29taXQnO1xuICAgIH1cblxuICAgIC8vIENsb3VkZmxhcmUgV29ya2VycyB0aHJvd3Mgd2hlbiBjcmVkZW50aWFscyBhcmUgZGVmaW5lZFxuICAgIC8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vY2xvdWRmbGFyZS93b3JrZXJkL2lzc3Vlcy85MDJcbiAgICBjb25zdCBpc0NyZWRlbnRpYWxzU3VwcG9ydGVkID0gXCJjcmVkZW50aWFsc1wiIGluIFJlcXVlc3QucHJvdG90eXBlO1xuICAgIHJlcXVlc3QgPSBuZXcgUmVxdWVzdCh1cmwsIHtcbiAgICAgIC4uLmZldGNoT3B0aW9ucyxcbiAgICAgIHNpZ25hbDogY29tcG9zZWRTaWduYWwsXG4gICAgICBtZXRob2Q6IG1ldGhvZC50b1VwcGVyQ2FzZSgpLFxuICAgICAgaGVhZGVyczogaGVhZGVycy5ub3JtYWxpemUoKS50b0pTT04oKSxcbiAgICAgIGJvZHk6IGRhdGEsXG4gICAgICBkdXBsZXg6IFwiaGFsZlwiLFxuICAgICAgY3JlZGVudGlhbHM6IGlzQ3JlZGVudGlhbHNTdXBwb3J0ZWQgPyB3aXRoQ3JlZGVudGlhbHMgOiB1bmRlZmluZWRcbiAgICB9KTtcblxuICAgIGxldCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHJlcXVlc3QpO1xuXG4gICAgY29uc3QgaXNTdHJlYW1SZXNwb25zZSA9IHN1cHBvcnRzUmVzcG9uc2VTdHJlYW0gJiYgKHJlc3BvbnNlVHlwZSA9PT0gJ3N0cmVhbScgfHwgcmVzcG9uc2VUeXBlID09PSAncmVzcG9uc2UnKTtcblxuICAgIGlmIChzdXBwb3J0c1Jlc3BvbnNlU3RyZWFtICYmIChvbkRvd25sb2FkUHJvZ3Jlc3MgfHwgKGlzU3RyZWFtUmVzcG9uc2UgJiYgdW5zdWJzY3JpYmUpKSkge1xuICAgICAgY29uc3Qgb3B0aW9ucyA9IHt9O1xuXG4gICAgICBbJ3N0YXR1cycsICdzdGF0dXNUZXh0JywgJ2hlYWRlcnMnXS5mb3JFYWNoKHByb3AgPT4ge1xuICAgICAgICBvcHRpb25zW3Byb3BdID0gcmVzcG9uc2VbcHJvcF07XG4gICAgICB9KTtcblxuICAgICAgY29uc3QgcmVzcG9uc2VDb250ZW50TGVuZ3RoID0gdXRpbHMudG9GaW5pdGVOdW1iZXIocmVzcG9uc2UuaGVhZGVycy5nZXQoJ2NvbnRlbnQtbGVuZ3RoJykpO1xuXG4gICAgICBjb25zdCBbb25Qcm9ncmVzcywgZmx1c2hdID0gb25Eb3dubG9hZFByb2dyZXNzICYmIHByb2dyZXNzRXZlbnREZWNvcmF0b3IoXG4gICAgICAgIHJlc3BvbnNlQ29udGVudExlbmd0aCxcbiAgICAgICAgcHJvZ3Jlc3NFdmVudFJlZHVjZXIoYXN5bmNEZWNvcmF0b3Iob25Eb3dubG9hZFByb2dyZXNzKSwgdHJ1ZSlcbiAgICAgICkgfHwgW107XG5cbiAgICAgIHJlc3BvbnNlID0gbmV3IFJlc3BvbnNlKFxuICAgICAgICB0cmFja1N0cmVhbShyZXNwb25zZS5ib2R5LCBERUZBVUxUX0NIVU5LX1NJWkUsIG9uUHJvZ3Jlc3MsICgpID0+IHtcbiAgICAgICAgICBmbHVzaCAmJiBmbHVzaCgpO1xuICAgICAgICAgIHVuc3Vic2NyaWJlICYmIHVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH0pLFxuICAgICAgICBvcHRpb25zXG4gICAgICApO1xuICAgIH1cblxuICAgIHJlc3BvbnNlVHlwZSA9IHJlc3BvbnNlVHlwZSB8fCAndGV4dCc7XG5cbiAgICBsZXQgcmVzcG9uc2VEYXRhID0gYXdhaXQgcmVzb2x2ZXJzW3V0aWxzLmZpbmRLZXkocmVzb2x2ZXJzLCByZXNwb25zZVR5cGUpIHx8ICd0ZXh0J10ocmVzcG9uc2UsIGNvbmZpZyk7XG5cbiAgICAhaXNTdHJlYW1SZXNwb25zZSAmJiB1bnN1YnNjcmliZSAmJiB1bnN1YnNjcmliZSgpO1xuXG4gICAgcmV0dXJuIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHtcbiAgICAgICAgZGF0YTogcmVzcG9uc2VEYXRhLFxuICAgICAgICBoZWFkZXJzOiBBeGlvc0hlYWRlcnMuZnJvbShyZXNwb25zZS5oZWFkZXJzKSxcbiAgICAgICAgc3RhdHVzOiByZXNwb25zZS5zdGF0dXMsXG4gICAgICAgIHN0YXR1c1RleHQ6IHJlc3BvbnNlLnN0YXR1c1RleHQsXG4gICAgICAgIGNvbmZpZyxcbiAgICAgICAgcmVxdWVzdFxuICAgICAgfSlcbiAgICB9KVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICB1bnN1YnNjcmliZSAmJiB1bnN1YnNjcmliZSgpO1xuXG4gICAgaWYgKGVyciAmJiBlcnIubmFtZSA9PT0gJ1R5cGVFcnJvcicgJiYgL2ZldGNoL2kudGVzdChlcnIubWVzc2FnZSkpIHtcbiAgICAgIHRocm93IE9iamVjdC5hc3NpZ24oXG4gICAgICAgIG5ldyBBeGlvc0Vycm9yKCdOZXR3b3JrIEVycm9yJywgQXhpb3NFcnJvci5FUlJfTkVUV09SSywgY29uZmlnLCByZXF1ZXN0KSxcbiAgICAgICAge1xuICAgICAgICAgIGNhdXNlOiBlcnIuY2F1c2UgfHwgZXJyXG4gICAgICAgIH1cbiAgICAgIClcbiAgICB9XG5cbiAgICB0aHJvdyBBeGlvc0Vycm9yLmZyb20oZXJyLCBlcnIgJiYgZXJyLmNvZGUsIGNvbmZpZywgcmVxdWVzdCk7XG4gIH1cbn0pO1xuXG5cbiIsICJpbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuaW1wb3J0IGh0dHBBZGFwdGVyIGZyb20gJy4vaHR0cC5qcyc7XG5pbXBvcnQgeGhyQWRhcHRlciBmcm9tICcuL3hoci5qcyc7XG5pbXBvcnQgZmV0Y2hBZGFwdGVyIGZyb20gJy4vZmV0Y2guanMnO1xuaW1wb3J0IEF4aW9zRXJyb3IgZnJvbSBcIi4uL2NvcmUvQXhpb3NFcnJvci5qc1wiO1xuXG5jb25zdCBrbm93bkFkYXB0ZXJzID0ge1xuICBodHRwOiBodHRwQWRhcHRlcixcbiAgeGhyOiB4aHJBZGFwdGVyLFxuICBmZXRjaDogZmV0Y2hBZGFwdGVyXG59XG5cbnV0aWxzLmZvckVhY2goa25vd25BZGFwdGVycywgKGZuLCB2YWx1ZSkgPT4ge1xuICBpZiAoZm4pIHtcbiAgICB0cnkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGZuLCAnbmFtZScsIHt2YWx1ZX0pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lbXB0eVxuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZm4sICdhZGFwdGVyTmFtZScsIHt2YWx1ZX0pO1xuICB9XG59KTtcblxuY29uc3QgcmVuZGVyUmVhc29uID0gKHJlYXNvbikgPT4gYC0gJHtyZWFzb259YDtcblxuY29uc3QgaXNSZXNvbHZlZEhhbmRsZSA9IChhZGFwdGVyKSA9PiB1dGlscy5pc0Z1bmN0aW9uKGFkYXB0ZXIpIHx8IGFkYXB0ZXIgPT09IG51bGwgfHwgYWRhcHRlciA9PT0gZmFsc2U7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZ2V0QWRhcHRlcjogKGFkYXB0ZXJzKSA9PiB7XG4gICAgYWRhcHRlcnMgPSB1dGlscy5pc0FycmF5KGFkYXB0ZXJzKSA/IGFkYXB0ZXJzIDogW2FkYXB0ZXJzXTtcblxuICAgIGNvbnN0IHtsZW5ndGh9ID0gYWRhcHRlcnM7XG4gICAgbGV0IG5hbWVPckFkYXB0ZXI7XG4gICAgbGV0IGFkYXB0ZXI7XG5cbiAgICBjb25zdCByZWplY3RlZFJlYXNvbnMgPSB7fTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIG5hbWVPckFkYXB0ZXIgPSBhZGFwdGVyc1tpXTtcbiAgICAgIGxldCBpZDtcblxuICAgICAgYWRhcHRlciA9IG5hbWVPckFkYXB0ZXI7XG5cbiAgICAgIGlmICghaXNSZXNvbHZlZEhhbmRsZShuYW1lT3JBZGFwdGVyKSkge1xuICAgICAgICBhZGFwdGVyID0ga25vd25BZGFwdGVyc1soaWQgPSBTdHJpbmcobmFtZU9yQWRhcHRlcikpLnRvTG93ZXJDYXNlKCldO1xuXG4gICAgICAgIGlmIChhZGFwdGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcihgVW5rbm93biBhZGFwdGVyICcke2lkfSdgKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoYWRhcHRlcikge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgcmVqZWN0ZWRSZWFzb25zW2lkIHx8ICcjJyArIGldID0gYWRhcHRlcjtcbiAgICB9XG5cbiAgICBpZiAoIWFkYXB0ZXIpIHtcblxuICAgICAgY29uc3QgcmVhc29ucyA9IE9iamVjdC5lbnRyaWVzKHJlamVjdGVkUmVhc29ucylcbiAgICAgICAgLm1hcCgoW2lkLCBzdGF0ZV0pID0+IGBhZGFwdGVyICR7aWR9IGAgK1xuICAgICAgICAgIChzdGF0ZSA9PT0gZmFsc2UgPyAnaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgZW52aXJvbm1lbnQnIDogJ2lzIG5vdCBhdmFpbGFibGUgaW4gdGhlIGJ1aWxkJylcbiAgICAgICAgKTtcblxuICAgICAgbGV0IHMgPSBsZW5ndGggP1xuICAgICAgICAocmVhc29ucy5sZW5ndGggPiAxID8gJ3NpbmNlIDpcXG4nICsgcmVhc29ucy5tYXAocmVuZGVyUmVhc29uKS5qb2luKCdcXG4nKSA6ICcgJyArIHJlbmRlclJlYXNvbihyZWFzb25zWzBdKSkgOlxuICAgICAgICAnYXMgbm8gYWRhcHRlciBzcGVjaWZpZWQnO1xuXG4gICAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcihcbiAgICAgICAgYFRoZXJlIGlzIG5vIHN1aXRhYmxlIGFkYXB0ZXIgdG8gZGlzcGF0Y2ggdGhlIHJlcXVlc3QgYCArIHMsXG4gICAgICAgICdFUlJfTk9UX1NVUFBPUlQnXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBhZGFwdGVyO1xuICB9LFxuICBhZGFwdGVyczoga25vd25BZGFwdGVyc1xufVxuIiwgIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHRyYW5zZm9ybURhdGEgZnJvbSAnLi90cmFuc2Zvcm1EYXRhLmpzJztcbmltcG9ydCBpc0NhbmNlbCBmcm9tICcuLi9jYW5jZWwvaXNDYW5jZWwuanMnO1xuaW1wb3J0IGRlZmF1bHRzIGZyb20gJy4uL2RlZmF1bHRzL2luZGV4LmpzJztcbmltcG9ydCBDYW5jZWxlZEVycm9yIGZyb20gJy4uL2NhbmNlbC9DYW5jZWxlZEVycm9yLmpzJztcbmltcG9ydCBBeGlvc0hlYWRlcnMgZnJvbSAnLi4vY29yZS9BeGlvc0hlYWRlcnMuanMnO1xuaW1wb3J0IGFkYXB0ZXJzIGZyb20gXCIuLi9hZGFwdGVycy9hZGFwdGVycy5qc1wiO1xuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxlZEVycm9yYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyB0aGF0IGlzIHRvIGJlIHVzZWQgZm9yIHRoZSByZXF1ZXN0XG4gKlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmZ1bmN0aW9uIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKSB7XG4gIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICBjb25maWcuY2FuY2VsVG9rZW4udGhyb3dJZlJlcXVlc3RlZCgpO1xuICB9XG5cbiAgaWYgKGNvbmZpZy5zaWduYWwgJiYgY29uZmlnLnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgdGhyb3cgbmV3IENhbmNlbGVkRXJyb3IobnVsbCwgY29uZmlnKTtcbiAgfVxufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdCB0byB0aGUgc2VydmVyIHVzaW5nIHRoZSBjb25maWd1cmVkIGFkYXB0ZXIuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHRoYXQgaXMgdG8gYmUgdXNlZCBmb3IgdGhlIHJlcXVlc3RcbiAqXG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gVGhlIFByb21pc2UgdG8gYmUgZnVsZmlsbGVkXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRpc3BhdGNoUmVxdWVzdChjb25maWcpIHtcbiAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gIGNvbmZpZy5oZWFkZXJzID0gQXhpb3NIZWFkZXJzLmZyb20oY29uZmlnLmhlYWRlcnMpO1xuXG4gIC8vIFRyYW5zZm9ybSByZXF1ZXN0IGRhdGFcbiAgY29uZmlnLmRhdGEgPSB0cmFuc2Zvcm1EYXRhLmNhbGwoXG4gICAgY29uZmlnLFxuICAgIGNvbmZpZy50cmFuc2Zvcm1SZXF1ZXN0XG4gICk7XG5cbiAgaWYgKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXS5pbmRleE9mKGNvbmZpZy5tZXRob2QpICE9PSAtMSkge1xuICAgIGNvbmZpZy5oZWFkZXJzLnNldENvbnRlbnRUeXBlKCdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnLCBmYWxzZSk7XG4gIH1cblxuICBjb25zdCBhZGFwdGVyID0gYWRhcHRlcnMuZ2V0QWRhcHRlcihjb25maWcuYWRhcHRlciB8fCBkZWZhdWx0cy5hZGFwdGVyKTtcblxuICByZXR1cm4gYWRhcHRlcihjb25maWcpLnRoZW4oZnVuY3Rpb24gb25BZGFwdGVyUmVzb2x1dGlvbihyZXNwb25zZSkge1xuICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgcmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEuY2FsbChcbiAgICAgIGNvbmZpZyxcbiAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZSxcbiAgICAgIHJlc3BvbnNlXG4gICAgKTtcblxuICAgIHJlc3BvbnNlLmhlYWRlcnMgPSBBeGlvc0hlYWRlcnMuZnJvbShyZXNwb25zZS5oZWFkZXJzKTtcblxuICAgIHJldHVybiByZXNwb25zZTtcbiAgfSwgZnVuY3Rpb24gb25BZGFwdGVyUmVqZWN0aW9uKHJlYXNvbikge1xuICAgIGlmICghaXNDYW5jZWwocmVhc29uKSkge1xuICAgICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgICAgaWYgKHJlYXNvbiAmJiByZWFzb24ucmVzcG9uc2UpIHtcbiAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhLmNhbGwoXG4gICAgICAgICAgY29uZmlnLFxuICAgICAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZSxcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2VcbiAgICAgICAgKTtcbiAgICAgICAgcmVhc29uLnJlc3BvbnNlLmhlYWRlcnMgPSBBeGlvc0hlYWRlcnMuZnJvbShyZWFzb24ucmVzcG9uc2UuaGVhZGVycyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHJlYXNvbik7XG4gIH0pO1xufVxuIiwgImV4cG9ydCBjb25zdCBWRVJTSU9OID0gXCIxLjcuOVwiOyIsICIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB7VkVSU0lPTn0gZnJvbSAnLi4vZW52L2RhdGEuanMnO1xuaW1wb3J0IEF4aW9zRXJyb3IgZnJvbSAnLi4vY29yZS9BeGlvc0Vycm9yLmpzJztcblxuY29uc3QgdmFsaWRhdG9ycyA9IHt9O1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuWydvYmplY3QnLCAnYm9vbGVhbicsICdudW1iZXInLCAnZnVuY3Rpb24nLCAnc3RyaW5nJywgJ3N5bWJvbCddLmZvckVhY2goKHR5cGUsIGkpID0+IHtcbiAgdmFsaWRhdG9yc1t0eXBlXSA9IGZ1bmN0aW9uIHZhbGlkYXRvcih0aGluZykge1xuICAgIHJldHVybiB0eXBlb2YgdGhpbmcgPT09IHR5cGUgfHwgJ2EnICsgKGkgPCAxID8gJ24gJyA6ICcgJykgKyB0eXBlO1xuICB9O1xufSk7XG5cbmNvbnN0IGRlcHJlY2F0ZWRXYXJuaW5ncyA9IHt9O1xuXG4vKipcbiAqIFRyYW5zaXRpb25hbCBvcHRpb24gdmFsaWRhdG9yXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbnxib29sZWFuP30gdmFsaWRhdG9yIC0gc2V0IHRvIGZhbHNlIGlmIHRoZSB0cmFuc2l0aW9uYWwgb3B0aW9uIGhhcyBiZWVuIHJlbW92ZWRcbiAqIEBwYXJhbSB7c3RyaW5nP30gdmVyc2lvbiAtIGRlcHJlY2F0ZWQgdmVyc2lvbiAvIHJlbW92ZWQgc2luY2UgdmVyc2lvblxuICogQHBhcmFtIHtzdHJpbmc/fSBtZXNzYWdlIC0gc29tZSBtZXNzYWdlIHdpdGggYWRkaXRpb25hbCBpbmZvXG4gKlxuICogQHJldHVybnMge2Z1bmN0aW9ufVxuICovXG52YWxpZGF0b3JzLnRyYW5zaXRpb25hbCA9IGZ1bmN0aW9uIHRyYW5zaXRpb25hbCh2YWxpZGF0b3IsIHZlcnNpb24sIG1lc3NhZ2UpIHtcbiAgZnVuY3Rpb24gZm9ybWF0TWVzc2FnZShvcHQsIGRlc2MpIHtcbiAgICByZXR1cm4gJ1tBeGlvcyB2JyArIFZFUlNJT04gKyAnXSBUcmFuc2l0aW9uYWwgb3B0aW9uIFxcJycgKyBvcHQgKyAnXFwnJyArIGRlc2MgKyAobWVzc2FnZSA/ICcuICcgKyBtZXNzYWdlIDogJycpO1xuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgcmV0dXJuICh2YWx1ZSwgb3B0LCBvcHRzKSA9PiB7XG4gICAgaWYgKHZhbGlkYXRvciA9PT0gZmFsc2UpIHtcbiAgICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKFxuICAgICAgICBmb3JtYXRNZXNzYWdlKG9wdCwgJyBoYXMgYmVlbiByZW1vdmVkJyArICh2ZXJzaW9uID8gJyBpbiAnICsgdmVyc2lvbiA6ICcnKSksXG4gICAgICAgIEF4aW9zRXJyb3IuRVJSX0RFUFJFQ0FURURcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKHZlcnNpb24gJiYgIWRlcHJlY2F0ZWRXYXJuaW5nc1tvcHRdKSB7XG4gICAgICBkZXByZWNhdGVkV2FybmluZ3Nbb3B0XSA9IHRydWU7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICBmb3JtYXRNZXNzYWdlKFxuICAgICAgICAgIG9wdCxcbiAgICAgICAgICAnIGhhcyBiZWVuIGRlcHJlY2F0ZWQgc2luY2UgdicgKyB2ZXJzaW9uICsgJyBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZWFyIGZ1dHVyZSdcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsaWRhdG9yID8gdmFsaWRhdG9yKHZhbHVlLCBvcHQsIG9wdHMpIDogdHJ1ZTtcbiAgfTtcbn07XG5cbnZhbGlkYXRvcnMuc3BlbGxpbmcgPSBmdW5jdGlvbiBzcGVsbGluZyhjb3JyZWN0U3BlbGxpbmcpIHtcbiAgcmV0dXJuICh2YWx1ZSwgb3B0KSA9PiB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICBjb25zb2xlLndhcm4oYCR7b3B0fSBpcyBsaWtlbHkgYSBtaXNzcGVsbGluZyBvZiAke2NvcnJlY3RTcGVsbGluZ31gKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcblxuLyoqXG4gKiBBc3NlcnQgb2JqZWN0J3MgcHJvcGVydGllcyB0eXBlXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnNcbiAqIEBwYXJhbSB7b2JqZWN0fSBzY2hlbWFcbiAqIEBwYXJhbSB7Ym9vbGVhbj99IGFsbG93VW5rbm93blxuICpcbiAqIEByZXR1cm5zIHtvYmplY3R9XG4gKi9cblxuZnVuY3Rpb24gYXNzZXJ0T3B0aW9ucyhvcHRpb25zLCBzY2hlbWEsIGFsbG93VW5rbm93bikge1xuICBpZiAodHlwZW9mIG9wdGlvbnMgIT09ICdvYmplY3QnKSB7XG4gICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoJ29wdGlvbnMgbXVzdCBiZSBhbiBvYmplY3QnLCBBeGlvc0Vycm9yLkVSUl9CQURfT1BUSU9OX1ZBTFVFKTtcbiAgfVxuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMob3B0aW9ucyk7XG4gIGxldCBpID0ga2V5cy5sZW5ndGg7XG4gIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgY29uc3Qgb3B0ID0ga2V5c1tpXTtcbiAgICBjb25zdCB2YWxpZGF0b3IgPSBzY2hlbWFbb3B0XTtcbiAgICBpZiAodmFsaWRhdG9yKSB7XG4gICAgICBjb25zdCB2YWx1ZSA9IG9wdGlvbnNbb3B0XTtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsaWRhdG9yKHZhbHVlLCBvcHQsIG9wdGlvbnMpO1xuICAgICAgaWYgKHJlc3VsdCAhPT0gdHJ1ZSkge1xuICAgICAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcignb3B0aW9uICcgKyBvcHQgKyAnIG11c3QgYmUgJyArIHJlc3VsdCwgQXhpb3NFcnJvci5FUlJfQkFEX09QVElPTl9WQUxVRSk7XG4gICAgICB9XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKGFsbG93VW5rbm93biAhPT0gdHJ1ZSkge1xuICAgICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoJ1Vua25vd24gb3B0aW9uICcgKyBvcHQsIEF4aW9zRXJyb3IuRVJSX0JBRF9PUFRJT04pO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGFzc2VydE9wdGlvbnMsXG4gIHZhbGlkYXRvcnNcbn07XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi8uLi91dGlscy5qcyc7XG5pbXBvcnQgYnVpbGRVUkwgZnJvbSAnLi4vaGVscGVycy9idWlsZFVSTC5qcyc7XG5pbXBvcnQgSW50ZXJjZXB0b3JNYW5hZ2VyIGZyb20gJy4vSW50ZXJjZXB0b3JNYW5hZ2VyLmpzJztcbmltcG9ydCBkaXNwYXRjaFJlcXVlc3QgZnJvbSAnLi9kaXNwYXRjaFJlcXVlc3QuanMnO1xuaW1wb3J0IG1lcmdlQ29uZmlnIGZyb20gJy4vbWVyZ2VDb25maWcuanMnO1xuaW1wb3J0IGJ1aWxkRnVsbFBhdGggZnJvbSAnLi9idWlsZEZ1bGxQYXRoLmpzJztcbmltcG9ydCB2YWxpZGF0b3IgZnJvbSAnLi4vaGVscGVycy92YWxpZGF0b3IuanMnO1xuaW1wb3J0IEF4aW9zSGVhZGVycyBmcm9tICcuL0F4aW9zSGVhZGVycy5qcyc7XG5cbmNvbnN0IHZhbGlkYXRvcnMgPSB2YWxpZGF0b3IudmFsaWRhdG9ycztcblxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gaW5zdGFuY2VDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqXG4gKiBAcmV0dXJuIHtBeGlvc30gQSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqL1xuY2xhc3MgQXhpb3Mge1xuICBjb25zdHJ1Y3RvcihpbnN0YW5jZUNvbmZpZykge1xuICAgIHRoaXMuZGVmYXVsdHMgPSBpbnN0YW5jZUNvbmZpZztcbiAgICB0aGlzLmludGVyY2VwdG9ycyA9IHtcbiAgICAgIHJlcXVlc3Q6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKSxcbiAgICAgIHJlc3BvbnNlOiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKClcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIERpc3BhdGNoIGEgcmVxdWVzdFxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ3xPYmplY3R9IGNvbmZpZ09yVXJsIFRoZSBjb25maWcgc3BlY2lmaWMgZm9yIHRoaXMgcmVxdWVzdCAobWVyZ2VkIHdpdGggdGhpcy5kZWZhdWx0cylcbiAgICogQHBhcmFtIHs/T2JqZWN0fSBjb25maWdcbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2V9IFRoZSBQcm9taXNlIHRvIGJlIGZ1bGZpbGxlZFxuICAgKi9cbiAgYXN5bmMgcmVxdWVzdChjb25maWdPclVybCwgY29uZmlnKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLl9yZXF1ZXN0KGNvbmZpZ09yVXJsLCBjb25maWcpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgaWYgKGVyciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgIGxldCBkdW1teSA9IHt9O1xuXG4gICAgICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlID8gRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UoZHVtbXkpIDogKGR1bW15ID0gbmV3IEVycm9yKCkpO1xuXG4gICAgICAgIC8vIHNsaWNlIG9mZiB0aGUgRXJyb3I6IC4uLiBsaW5lXG4gICAgICAgIGNvbnN0IHN0YWNrID0gZHVtbXkuc3RhY2sgPyBkdW1teS5zdGFjay5yZXBsYWNlKC9eLitcXG4vLCAnJykgOiAnJztcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAoIWVyci5zdGFjaykge1xuICAgICAgICAgICAgZXJyLnN0YWNrID0gc3RhY2s7XG4gICAgICAgICAgICAvLyBtYXRjaCB3aXRob3V0IHRoZSAyIHRvcCBzdGFjayBsaW5lc1xuICAgICAgICAgIH0gZWxzZSBpZiAoc3RhY2sgJiYgIVN0cmluZyhlcnIuc3RhY2spLmVuZHNXaXRoKHN0YWNrLnJlcGxhY2UoL14uK1xcbi4rXFxuLywgJycpKSkge1xuICAgICAgICAgICAgZXJyLnN0YWNrICs9ICdcXG4nICsgc3RhY2tcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAvLyBpZ25vcmUgdGhlIGNhc2Ugd2hlcmUgXCJzdGFja1wiIGlzIGFuIHVuLXdyaXRhYmxlIHByb3BlcnR5XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhyb3cgZXJyO1xuICAgIH1cbiAgfVxuXG4gIF9yZXF1ZXN0KGNvbmZpZ09yVXJsLCBjb25maWcpIHtcbiAgICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgICAvLyBBbGxvdyBmb3IgYXhpb3MoJ2V4YW1wbGUvdXJsJ1ssIGNvbmZpZ10pIGEgbGEgZmV0Y2ggQVBJXG4gICAgaWYgKHR5cGVvZiBjb25maWdPclVybCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGNvbmZpZyA9IGNvbmZpZyB8fCB7fTtcbiAgICAgIGNvbmZpZy51cmwgPSBjb25maWdPclVybDtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uZmlnID0gY29uZmlnT3JVcmwgfHwge307XG4gICAgfVxuXG4gICAgY29uZmlnID0gbWVyZ2VDb25maWcodGhpcy5kZWZhdWx0cywgY29uZmlnKTtcblxuICAgIGNvbnN0IHt0cmFuc2l0aW9uYWwsIHBhcmFtc1NlcmlhbGl6ZXIsIGhlYWRlcnN9ID0gY29uZmlnO1xuXG4gICAgaWYgKHRyYW5zaXRpb25hbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YWxpZGF0b3IuYXNzZXJ0T3B0aW9ucyh0cmFuc2l0aW9uYWwsIHtcbiAgICAgICAgc2lsZW50SlNPTlBhcnNpbmc6IHZhbGlkYXRvcnMudHJhbnNpdGlvbmFsKHZhbGlkYXRvcnMuYm9vbGVhbiksXG4gICAgICAgIGZvcmNlZEpTT05QYXJzaW5nOiB2YWxpZGF0b3JzLnRyYW5zaXRpb25hbCh2YWxpZGF0b3JzLmJvb2xlYW4pLFxuICAgICAgICBjbGFyaWZ5VGltZW91dEVycm9yOiB2YWxpZGF0b3JzLnRyYW5zaXRpb25hbCh2YWxpZGF0b3JzLmJvb2xlYW4pXG4gICAgICB9LCBmYWxzZSk7XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtc1NlcmlhbGl6ZXIgIT0gbnVsbCkge1xuICAgICAgaWYgKHV0aWxzLmlzRnVuY3Rpb24ocGFyYW1zU2VyaWFsaXplcikpIHtcbiAgICAgICAgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIgPSB7XG4gICAgICAgICAgc2VyaWFsaXplOiBwYXJhbXNTZXJpYWxpemVyXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbGlkYXRvci5hc3NlcnRPcHRpb25zKHBhcmFtc1NlcmlhbGl6ZXIsIHtcbiAgICAgICAgICBlbmNvZGU6IHZhbGlkYXRvcnMuZnVuY3Rpb24sXG4gICAgICAgICAgc2VyaWFsaXplOiB2YWxpZGF0b3JzLmZ1bmN0aW9uXG4gICAgICAgIH0sIHRydWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhbGlkYXRvci5hc3NlcnRPcHRpb25zKGNvbmZpZywge1xuICAgICAgYmFzZVVybDogdmFsaWRhdG9ycy5zcGVsbGluZygnYmFzZVVSTCcpLFxuICAgICAgd2l0aFhzcmZUb2tlbjogdmFsaWRhdG9ycy5zcGVsbGluZygnd2l0aFhTUkZUb2tlbicpXG4gICAgfSwgdHJ1ZSk7XG5cbiAgICAvLyBTZXQgY29uZmlnLm1ldGhvZFxuICAgIGNvbmZpZy5tZXRob2QgPSAoY29uZmlnLm1ldGhvZCB8fCB0aGlzLmRlZmF1bHRzLm1ldGhvZCB8fCAnZ2V0JykudG9Mb3dlckNhc2UoKTtcblxuICAgIC8vIEZsYXR0ZW4gaGVhZGVyc1xuICAgIGxldCBjb250ZXh0SGVhZGVycyA9IGhlYWRlcnMgJiYgdXRpbHMubWVyZ2UoXG4gICAgICBoZWFkZXJzLmNvbW1vbixcbiAgICAgIGhlYWRlcnNbY29uZmlnLm1ldGhvZF1cbiAgICApO1xuXG4gICAgaGVhZGVycyAmJiB1dGlscy5mb3JFYWNoKFxuICAgICAgWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAncG9zdCcsICdwdXQnLCAncGF0Y2gnLCAnY29tbW9uJ10sXG4gICAgICAobWV0aG9kKSA9PiB7XG4gICAgICAgIGRlbGV0ZSBoZWFkZXJzW21ldGhvZF07XG4gICAgICB9XG4gICAgKTtcblxuICAgIGNvbmZpZy5oZWFkZXJzID0gQXhpb3NIZWFkZXJzLmNvbmNhdChjb250ZXh0SGVhZGVycywgaGVhZGVycyk7XG5cbiAgICAvLyBmaWx0ZXIgb3V0IHNraXBwZWQgaW50ZXJjZXB0b3JzXG4gICAgY29uc3QgcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4gPSBbXTtcbiAgICBsZXQgc3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzID0gdHJ1ZTtcbiAgICB0aGlzLmludGVyY2VwdG9ycy5yZXF1ZXN0LmZvckVhY2goZnVuY3Rpb24gdW5zaGlmdFJlcXVlc3RJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICAgIGlmICh0eXBlb2YgaW50ZXJjZXB0b3IucnVuV2hlbiA9PT0gJ2Z1bmN0aW9uJyAmJiBpbnRlcmNlcHRvci5ydW5XaGVuKGNvbmZpZykgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgc3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzID0gc3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzICYmIGludGVyY2VwdG9yLnN5bmNocm9ub3VzO1xuXG4gICAgICByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbi51bnNoaWZ0KGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICAgIH0pO1xuXG4gICAgY29uc3QgcmVzcG9uc2VJbnRlcmNlcHRvckNoYWluID0gW107XG4gICAgdGhpcy5pbnRlcmNlcHRvcnMucmVzcG9uc2UuZm9yRWFjaChmdW5jdGlvbiBwdXNoUmVzcG9uc2VJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICAgIHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbi5wdXNoKGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICAgIH0pO1xuXG4gICAgbGV0IHByb21pc2U7XG4gICAgbGV0IGkgPSAwO1xuICAgIGxldCBsZW47XG5cbiAgICBpZiAoIXN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycykge1xuICAgICAgY29uc3QgY2hhaW4gPSBbZGlzcGF0Y2hSZXF1ZXN0LmJpbmQodGhpcyksIHVuZGVmaW5lZF07XG4gICAgICBjaGFpbi51bnNoaWZ0LmFwcGx5KGNoYWluLCByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbik7XG4gICAgICBjaGFpbi5wdXNoLmFwcGx5KGNoYWluLCByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4pO1xuICAgICAgbGVuID0gY2hhaW4ubGVuZ3RoO1xuXG4gICAgICBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKGNvbmZpZyk7XG5cbiAgICAgIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4oY2hhaW5baSsrXSwgY2hhaW5baSsrXSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH1cblxuICAgIGxlbiA9IHJlcXVlc3RJbnRlcmNlcHRvckNoYWluLmxlbmd0aDtcblxuICAgIGxldCBuZXdDb25maWcgPSBjb25maWc7XG5cbiAgICBpID0gMDtcblxuICAgIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgICBjb25zdCBvbkZ1bGZpbGxlZCA9IHJlcXVlc3RJbnRlcmNlcHRvckNoYWluW2krK107XG4gICAgICBjb25zdCBvblJlamVjdGVkID0gcmVxdWVzdEludGVyY2VwdG9yQ2hhaW5baSsrXTtcbiAgICAgIHRyeSB7XG4gICAgICAgIG5ld0NvbmZpZyA9IG9uRnVsZmlsbGVkKG5ld0NvbmZpZyk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBvblJlamVjdGVkLmNhbGwodGhpcywgZXJyb3IpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgcHJvbWlzZSA9IGRpc3BhdGNoUmVxdWVzdC5jYWxsKHRoaXMsIG5ld0NvbmZpZyk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gICAgfVxuXG4gICAgaSA9IDA7XG4gICAgbGVuID0gcmVzcG9uc2VJbnRlcmNlcHRvckNoYWluLmxlbmd0aDtcblxuICAgIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbltpKytdLCByZXNwb25zZUludGVyY2VwdG9yQ2hhaW5baSsrXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cblxuICBnZXRVcmkoY29uZmlnKSB7XG4gICAgY29uZmlnID0gbWVyZ2VDb25maWcodGhpcy5kZWZhdWx0cywgY29uZmlnKTtcbiAgICBjb25zdCBmdWxsUGF0aCA9IGJ1aWxkRnVsbFBhdGgoY29uZmlnLmJhc2VVUkwsIGNvbmZpZy51cmwpO1xuICAgIHJldHVybiBidWlsZFVSTChmdWxsUGF0aCwgY29uZmlnLnBhcmFtcywgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIpO1xuICB9XG59XG5cbi8vIFByb3ZpZGUgYWxpYXNlcyBmb3Igc3VwcG9ydGVkIHJlcXVlc3QgbWV0aG9kc1xudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdvcHRpb25zJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odXJsLCBjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KG1lcmdlQ29uZmlnKGNvbmZpZyB8fCB7fSwge1xuICAgICAgbWV0aG9kLFxuICAgICAgdXJsLFxuICAgICAgZGF0YTogKGNvbmZpZyB8fCB7fSkuZGF0YVxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuXG4gIGZ1bmN0aW9uIGdlbmVyYXRlSFRUUE1ldGhvZChpc0Zvcm0pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gaHR0cE1ldGhvZCh1cmwsIGRhdGEsIGNvbmZpZykge1xuICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdChtZXJnZUNvbmZpZyhjb25maWcgfHwge30sIHtcbiAgICAgICAgbWV0aG9kLFxuICAgICAgICBoZWFkZXJzOiBpc0Zvcm0gPyB7XG4gICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdtdWx0aXBhcnQvZm9ybS1kYXRhJ1xuICAgICAgICB9IDoge30sXG4gICAgICAgIHVybCxcbiAgICAgICAgZGF0YVxuICAgICAgfSkpO1xuICAgIH07XG4gIH1cblxuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGdlbmVyYXRlSFRUUE1ldGhvZCgpO1xuXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2QgKyAnRm9ybSddID0gZ2VuZXJhdGVIVFRQTWV0aG9kKHRydWUpO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IEF4aW9zO1xuIiwgIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IENhbmNlbGVkRXJyb3IgZnJvbSAnLi9DYW5jZWxlZEVycm9yLmpzJztcblxuLyoqXG4gKiBBIGBDYW5jZWxUb2tlbmAgaXMgYW4gb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgdG8gcmVxdWVzdCBjYW5jZWxsYXRpb24gb2YgYW4gb3BlcmF0aW9uLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGV4ZWN1dG9yIFRoZSBleGVjdXRvciBmdW5jdGlvbi5cbiAqXG4gKiBAcmV0dXJucyB7Q2FuY2VsVG9rZW59XG4gKi9cbmNsYXNzIENhbmNlbFRva2VuIHtcbiAgY29uc3RydWN0b3IoZXhlY3V0b3IpIHtcbiAgICBpZiAodHlwZW9mIGV4ZWN1dG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdleGVjdXRvciBtdXN0IGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgbGV0IHJlc29sdmVQcm9taXNlO1xuXG4gICAgdGhpcy5wcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gcHJvbWlzZUV4ZWN1dG9yKHJlc29sdmUpIHtcbiAgICAgIHJlc29sdmVQcm9taXNlID0gcmVzb2x2ZTtcbiAgICB9KTtcblxuICAgIGNvbnN0IHRva2VuID0gdGhpcztcblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gICAgdGhpcy5wcm9taXNlLnRoZW4oY2FuY2VsID0+IHtcbiAgICAgIGlmICghdG9rZW4uX2xpc3RlbmVycykgcmV0dXJuO1xuXG4gICAgICBsZXQgaSA9IHRva2VuLl9saXN0ZW5lcnMubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoaS0tID4gMCkge1xuICAgICAgICB0b2tlbi5fbGlzdGVuZXJzW2ldKGNhbmNlbCk7XG4gICAgICB9XG4gICAgICB0b2tlbi5fbGlzdGVuZXJzID0gbnVsbDtcbiAgICB9KTtcblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gICAgdGhpcy5wcm9taXNlLnRoZW4gPSBvbmZ1bGZpbGxlZCA9PiB7XG4gICAgICBsZXQgX3Jlc29sdmU7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICAgICAgY29uc3QgcHJvbWlzZSA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICB0b2tlbi5zdWJzY3JpYmUocmVzb2x2ZSk7XG4gICAgICAgIF9yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICAgIH0pLnRoZW4ob25mdWxmaWxsZWQpO1xuXG4gICAgICBwcm9taXNlLmNhbmNlbCA9IGZ1bmN0aW9uIHJlamVjdCgpIHtcbiAgICAgICAgdG9rZW4udW5zdWJzY3JpYmUoX3Jlc29sdmUpO1xuICAgICAgfTtcblxuICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgfTtcblxuICAgIGV4ZWN1dG9yKGZ1bmN0aW9uIGNhbmNlbChtZXNzYWdlLCBjb25maWcsIHJlcXVlc3QpIHtcbiAgICAgIGlmICh0b2tlbi5yZWFzb24pIHtcbiAgICAgICAgLy8gQ2FuY2VsbGF0aW9uIGhhcyBhbHJlYWR5IGJlZW4gcmVxdWVzdGVkXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdG9rZW4ucmVhc29uID0gbmV3IENhbmNlbGVkRXJyb3IobWVzc2FnZSwgY29uZmlnLCByZXF1ZXN0KTtcbiAgICAgIHJlc29sdmVQcm9taXNlKHRva2VuLnJlYXNvbik7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogVGhyb3dzIGEgYENhbmNlbGVkRXJyb3JgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gICAqL1xuICB0aHJvd0lmUmVxdWVzdGVkKCkge1xuICAgIGlmICh0aGlzLnJlYXNvbikge1xuICAgICAgdGhyb3cgdGhpcy5yZWFzb247XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFN1YnNjcmliZSB0byB0aGUgY2FuY2VsIHNpZ25hbFxuICAgKi9cblxuICBzdWJzY3JpYmUobGlzdGVuZXIpIHtcbiAgICBpZiAodGhpcy5yZWFzb24pIHtcbiAgICAgIGxpc3RlbmVyKHRoaXMucmVhc29uKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fbGlzdGVuZXJzKSB7XG4gICAgICB0aGlzLl9saXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2xpc3RlbmVycyA9IFtsaXN0ZW5lcl07XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFVuc3Vic2NyaWJlIGZyb20gdGhlIGNhbmNlbCBzaWduYWxcbiAgICovXG5cbiAgdW5zdWJzY3JpYmUobGlzdGVuZXIpIHtcbiAgICBpZiAoIXRoaXMuX2xpc3RlbmVycykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBpbmRleCA9IHRoaXMuX2xpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKTtcbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICB0aGlzLl9saXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9XG4gIH1cblxuICB0b0Fib3J0U2lnbmFsKCkge1xuICAgIGNvbnN0IGNvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG5cbiAgICBjb25zdCBhYm9ydCA9IChlcnIpID0+IHtcbiAgICAgIGNvbnRyb2xsZXIuYWJvcnQoZXJyKTtcbiAgICB9O1xuXG4gICAgdGhpcy5zdWJzY3JpYmUoYWJvcnQpO1xuXG4gICAgY29udHJvbGxlci5zaWduYWwudW5zdWJzY3JpYmUgPSAoKSA9PiB0aGlzLnVuc3Vic2NyaWJlKGFib3J0KTtcblxuICAgIHJldHVybiBjb250cm9sbGVyLnNpZ25hbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIGEgbmV3IGBDYW5jZWxUb2tlbmAgYW5kIGEgZnVuY3Rpb24gdGhhdCwgd2hlbiBjYWxsZWQsXG4gICAqIGNhbmNlbHMgdGhlIGBDYW5jZWxUb2tlbmAuXG4gICAqL1xuICBzdGF0aWMgc291cmNlKCkge1xuICAgIGxldCBjYW5jZWw7XG4gICAgY29uc3QgdG9rZW4gPSBuZXcgQ2FuY2VsVG9rZW4oZnVuY3Rpb24gZXhlY3V0b3IoYykge1xuICAgICAgY2FuY2VsID0gYztcbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgdG9rZW4sXG4gICAgICBjYW5jZWxcbiAgICB9O1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IENhbmNlbFRva2VuO1xuIiwgIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTeW50YWN0aWMgc3VnYXIgZm9yIGludm9raW5nIGEgZnVuY3Rpb24gYW5kIGV4cGFuZGluZyBhbiBhcnJheSBmb3IgYXJndW1lbnRzLlxuICpcbiAqIENvbW1vbiB1c2UgY2FzZSB3b3VsZCBiZSB0byB1c2UgYEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseWAuXG4gKlxuICogIGBgYGpzXG4gKiAgZnVuY3Rpb24gZih4LCB5LCB6KSB7fVxuICogIHZhciBhcmdzID0gWzEsIDIsIDNdO1xuICogIGYuYXBwbHkobnVsbCwgYXJncyk7XG4gKiAgYGBgXG4gKlxuICogV2l0aCBgc3ByZWFkYCB0aGlzIGV4YW1wbGUgY2FuIGJlIHJlLXdyaXR0ZW4uXG4gKlxuICogIGBgYGpzXG4gKiAgc3ByZWFkKGZ1bmN0aW9uKHgsIHksIHopIHt9KShbMSwgMiwgM10pO1xuICogIGBgYFxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKlxuICogQHJldHVybnMge0Z1bmN0aW9ufVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzcHJlYWQoY2FsbGJhY2spIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoYXJyKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrLmFwcGx5KG51bGwsIGFycik7XG4gIH07XG59XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi8uLi91dGlscy5qcyc7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBwYXlsb2FkIGlzIGFuIGVycm9yIHRocm93biBieSBBeGlvc1xuICpcbiAqIEBwYXJhbSB7Kn0gcGF5bG9hZCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBwYXlsb2FkIGlzIGFuIGVycm9yIHRocm93biBieSBBeGlvcywgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzQXhpb3NFcnJvcihwYXlsb2FkKSB7XG4gIHJldHVybiB1dGlscy5pc09iamVjdChwYXlsb2FkKSAmJiAocGF5bG9hZC5pc0F4aW9zRXJyb3IgPT09IHRydWUpO1xufVxuIiwgImNvbnN0IEh0dHBTdGF0dXNDb2RlID0ge1xuICBDb250aW51ZTogMTAwLFxuICBTd2l0Y2hpbmdQcm90b2NvbHM6IDEwMSxcbiAgUHJvY2Vzc2luZzogMTAyLFxuICBFYXJseUhpbnRzOiAxMDMsXG4gIE9rOiAyMDAsXG4gIENyZWF0ZWQ6IDIwMSxcbiAgQWNjZXB0ZWQ6IDIwMixcbiAgTm9uQXV0aG9yaXRhdGl2ZUluZm9ybWF0aW9uOiAyMDMsXG4gIE5vQ29udGVudDogMjA0LFxuICBSZXNldENvbnRlbnQ6IDIwNSxcbiAgUGFydGlhbENvbnRlbnQ6IDIwNixcbiAgTXVsdGlTdGF0dXM6IDIwNyxcbiAgQWxyZWFkeVJlcG9ydGVkOiAyMDgsXG4gIEltVXNlZDogMjI2LFxuICBNdWx0aXBsZUNob2ljZXM6IDMwMCxcbiAgTW92ZWRQZXJtYW5lbnRseTogMzAxLFxuICBGb3VuZDogMzAyLFxuICBTZWVPdGhlcjogMzAzLFxuICBOb3RNb2RpZmllZDogMzA0LFxuICBVc2VQcm94eTogMzA1LFxuICBVbnVzZWQ6IDMwNixcbiAgVGVtcG9yYXJ5UmVkaXJlY3Q6IDMwNyxcbiAgUGVybWFuZW50UmVkaXJlY3Q6IDMwOCxcbiAgQmFkUmVxdWVzdDogNDAwLFxuICBVbmF1dGhvcml6ZWQ6IDQwMSxcbiAgUGF5bWVudFJlcXVpcmVkOiA0MDIsXG4gIEZvcmJpZGRlbjogNDAzLFxuICBOb3RGb3VuZDogNDA0LFxuICBNZXRob2ROb3RBbGxvd2VkOiA0MDUsXG4gIE5vdEFjY2VwdGFibGU6IDQwNixcbiAgUHJveHlBdXRoZW50aWNhdGlvblJlcXVpcmVkOiA0MDcsXG4gIFJlcXVlc3RUaW1lb3V0OiA0MDgsXG4gIENvbmZsaWN0OiA0MDksXG4gIEdvbmU6IDQxMCxcbiAgTGVuZ3RoUmVxdWlyZWQ6IDQxMSxcbiAgUHJlY29uZGl0aW9uRmFpbGVkOiA0MTIsXG4gIFBheWxvYWRUb29MYXJnZTogNDEzLFxuICBVcmlUb29Mb25nOiA0MTQsXG4gIFVuc3VwcG9ydGVkTWVkaWFUeXBlOiA0MTUsXG4gIFJhbmdlTm90U2F0aXNmaWFibGU6IDQxNixcbiAgRXhwZWN0YXRpb25GYWlsZWQ6IDQxNyxcbiAgSW1BVGVhcG90OiA0MTgsXG4gIE1pc2RpcmVjdGVkUmVxdWVzdDogNDIxLFxuICBVbnByb2Nlc3NhYmxlRW50aXR5OiA0MjIsXG4gIExvY2tlZDogNDIzLFxuICBGYWlsZWREZXBlbmRlbmN5OiA0MjQsXG4gIFRvb0Vhcmx5OiA0MjUsXG4gIFVwZ3JhZGVSZXF1aXJlZDogNDI2LFxuICBQcmVjb25kaXRpb25SZXF1aXJlZDogNDI4LFxuICBUb29NYW55UmVxdWVzdHM6IDQyOSxcbiAgUmVxdWVzdEhlYWRlckZpZWxkc1Rvb0xhcmdlOiA0MzEsXG4gIFVuYXZhaWxhYmxlRm9yTGVnYWxSZWFzb25zOiA0NTEsXG4gIEludGVybmFsU2VydmVyRXJyb3I6IDUwMCxcbiAgTm90SW1wbGVtZW50ZWQ6IDUwMSxcbiAgQmFkR2F0ZXdheTogNTAyLFxuICBTZXJ2aWNlVW5hdmFpbGFibGU6IDUwMyxcbiAgR2F0ZXdheVRpbWVvdXQ6IDUwNCxcbiAgSHR0cFZlcnNpb25Ob3RTdXBwb3J0ZWQ6IDUwNSxcbiAgVmFyaWFudEFsc29OZWdvdGlhdGVzOiA1MDYsXG4gIEluc3VmZmljaWVudFN0b3JhZ2U6IDUwNyxcbiAgTG9vcERldGVjdGVkOiA1MDgsXG4gIE5vdEV4dGVuZGVkOiA1MTAsXG4gIE5ldHdvcmtBdXRoZW50aWNhdGlvblJlcXVpcmVkOiA1MTEsXG59O1xuXG5PYmplY3QuZW50cmllcyhIdHRwU3RhdHVzQ29kZSkuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gIEh0dHBTdGF0dXNDb2RlW3ZhbHVlXSA9IGtleTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBIdHRwU3RhdHVzQ29kZTtcbiIsICIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuL3V0aWxzLmpzJztcbmltcG9ydCBiaW5kIGZyb20gJy4vaGVscGVycy9iaW5kLmpzJztcbmltcG9ydCBBeGlvcyBmcm9tICcuL2NvcmUvQXhpb3MuanMnO1xuaW1wb3J0IG1lcmdlQ29uZmlnIGZyb20gJy4vY29yZS9tZXJnZUNvbmZpZy5qcyc7XG5pbXBvcnQgZGVmYXVsdHMgZnJvbSAnLi9kZWZhdWx0cy9pbmRleC5qcyc7XG5pbXBvcnQgZm9ybURhdGFUb0pTT04gZnJvbSAnLi9oZWxwZXJzL2Zvcm1EYXRhVG9KU09OLmpzJztcbmltcG9ydCBDYW5jZWxlZEVycm9yIGZyb20gJy4vY2FuY2VsL0NhbmNlbGVkRXJyb3IuanMnO1xuaW1wb3J0IENhbmNlbFRva2VuIGZyb20gJy4vY2FuY2VsL0NhbmNlbFRva2VuLmpzJztcbmltcG9ydCBpc0NhbmNlbCBmcm9tICcuL2NhbmNlbC9pc0NhbmNlbC5qcyc7XG5pbXBvcnQge1ZFUlNJT059IGZyb20gJy4vZW52L2RhdGEuanMnO1xuaW1wb3J0IHRvRm9ybURhdGEgZnJvbSAnLi9oZWxwZXJzL3RvRm9ybURhdGEuanMnO1xuaW1wb3J0IEF4aW9zRXJyb3IgZnJvbSAnLi9jb3JlL0F4aW9zRXJyb3IuanMnO1xuaW1wb3J0IHNwcmVhZCBmcm9tICcuL2hlbHBlcnMvc3ByZWFkLmpzJztcbmltcG9ydCBpc0F4aW9zRXJyb3IgZnJvbSAnLi9oZWxwZXJzL2lzQXhpb3NFcnJvci5qcyc7XG5pbXBvcnQgQXhpb3NIZWFkZXJzIGZyb20gXCIuL2NvcmUvQXhpb3NIZWFkZXJzLmpzXCI7XG5pbXBvcnQgYWRhcHRlcnMgZnJvbSAnLi9hZGFwdGVycy9hZGFwdGVycy5qcyc7XG5pbXBvcnQgSHR0cFN0YXR1c0NvZGUgZnJvbSAnLi9oZWxwZXJzL0h0dHBTdGF0dXNDb2RlLmpzJztcblxuLyoqXG4gKiBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZGVmYXVsdENvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICpcbiAqIEByZXR1cm5zIHtBeGlvc30gQSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdENvbmZpZykge1xuICBjb25zdCBjb250ZXh0ID0gbmV3IEF4aW9zKGRlZmF1bHRDb25maWcpO1xuICBjb25zdCBpbnN0YW5jZSA9IGJpbmQoQXhpb3MucHJvdG90eXBlLnJlcXVlc3QsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgYXhpb3MucHJvdG90eXBlIHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgQXhpb3MucHJvdG90eXBlLCBjb250ZXh0LCB7YWxsT3duS2V5czogdHJ1ZX0pO1xuXG4gIC8vIENvcHkgY29udGV4dCB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIGNvbnRleHQsIG51bGwsIHthbGxPd25LZXlzOiB0cnVlfSk7XG5cbiAgLy8gRmFjdG9yeSBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlc1xuICBpbnN0YW5jZS5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaW5zdGFuY2VDb25maWcpIHtcbiAgICByZXR1cm4gY3JlYXRlSW5zdGFuY2UobWVyZ2VDb25maWcoZGVmYXVsdENvbmZpZywgaW5zdGFuY2VDb25maWcpKTtcbiAgfTtcblxuICByZXR1cm4gaW5zdGFuY2U7XG59XG5cbi8vIENyZWF0ZSB0aGUgZGVmYXVsdCBpbnN0YW5jZSB0byBiZSBleHBvcnRlZFxuY29uc3QgYXhpb3MgPSBjcmVhdGVJbnN0YW5jZShkZWZhdWx0cyk7XG5cbi8vIEV4cG9zZSBBeGlvcyBjbGFzcyB0byBhbGxvdyBjbGFzcyBpbmhlcml0YW5jZVxuYXhpb3MuQXhpb3MgPSBBeGlvcztcblxuLy8gRXhwb3NlIENhbmNlbCAmIENhbmNlbFRva2VuXG5heGlvcy5DYW5jZWxlZEVycm9yID0gQ2FuY2VsZWRFcnJvcjtcbmF4aW9zLkNhbmNlbFRva2VuID0gQ2FuY2VsVG9rZW47XG5heGlvcy5pc0NhbmNlbCA9IGlzQ2FuY2VsO1xuYXhpb3MuVkVSU0lPTiA9IFZFUlNJT047XG5heGlvcy50b0Zvcm1EYXRhID0gdG9Gb3JtRGF0YTtcblxuLy8gRXhwb3NlIEF4aW9zRXJyb3IgY2xhc3NcbmF4aW9zLkF4aW9zRXJyb3IgPSBBeGlvc0Vycm9yO1xuXG4vLyBhbGlhcyBmb3IgQ2FuY2VsZWRFcnJvciBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eVxuYXhpb3MuQ2FuY2VsID0gYXhpb3MuQ2FuY2VsZWRFcnJvcjtcblxuLy8gRXhwb3NlIGFsbC9zcHJlYWRcbmF4aW9zLmFsbCA9IGZ1bmN0aW9uIGFsbChwcm9taXNlcykge1xuICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xufTtcblxuYXhpb3Muc3ByZWFkID0gc3ByZWFkO1xuXG4vLyBFeHBvc2UgaXNBeGlvc0Vycm9yXG5heGlvcy5pc0F4aW9zRXJyb3IgPSBpc0F4aW9zRXJyb3I7XG5cbi8vIEV4cG9zZSBtZXJnZUNvbmZpZ1xuYXhpb3MubWVyZ2VDb25maWcgPSBtZXJnZUNvbmZpZztcblxuYXhpb3MuQXhpb3NIZWFkZXJzID0gQXhpb3NIZWFkZXJzO1xuXG5heGlvcy5mb3JtVG9KU09OID0gdGhpbmcgPT4gZm9ybURhdGFUb0pTT04odXRpbHMuaXNIVE1MRm9ybSh0aGluZykgPyBuZXcgRm9ybURhdGEodGhpbmcpIDogdGhpbmcpO1xuXG5heGlvcy5nZXRBZGFwdGVyID0gYWRhcHRlcnMuZ2V0QWRhcHRlcjtcblxuYXhpb3MuSHR0cFN0YXR1c0NvZGUgPSBIdHRwU3RhdHVzQ29kZTtcblxuYXhpb3MuZGVmYXVsdCA9IGF4aW9zO1xuXG4vLyB0aGlzIG1vZHVsZSBzaG91bGQgb25seSBoYXZlIGEgZGVmYXVsdCBleHBvcnRcbmV4cG9ydCBkZWZhdWx0IGF4aW9zXG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNpdGF0aW9uRXJyb3IgPSBleHBvcnRzLnBkZkVycm9yID0gZXhwb3J0cy5mY0Vycm9yID0gZXhwb3J0cy5ldmVudHNFcnJvciA9IGV4cG9ydHMubWVkaWFFcnJvciA9IGV4cG9ydHMucmVsYXRlZEVycm9yID0gZXhwb3J0cy5pbnRyb0Vycm9yID0gZXhwb3J0cy5wcmVsb2FkRXJyb3IgPSBleHBvcnRzLmluZm9ib3hFcnJvciA9IGV4cG9ydHMuY29vcmRpbmF0ZXNFcnJvciA9IGV4cG9ydHMuZ2VvU2VhcmNoRXJyb3IgPSBleHBvcnRzLmxpbmtzRXJyb3IgPSBleHBvcnRzLmNhdGVnb3JpZXNFcnJvciA9IGV4cG9ydHMuY29udGVudEVycm9yID0gZXhwb3J0cy5odG1sRXJyb3IgPSBleHBvcnRzLmltYWdlRXJyb3IgPSBleHBvcnRzLnN1bW1hcnlFcnJvciA9IGV4cG9ydHMucGFnZUVycm9yID0gZXhwb3J0cy5hdXRvY29tcGxldGlvbnNFcnJvciA9IGV4cG9ydHMuc2VhcmNoRXJyb3IgPSBleHBvcnRzLndpa2lFcnJvciA9IHZvaWQgMDtcbmNsYXNzIHdpa2lFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBjb2RlKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLm5hbWUgPSAnd2lraUVycm9yJztcbiAgICAgICAgdGhpcy5jb2RlID0gY29kZTtcbiAgICB9XG59XG5leHBvcnRzLndpa2lFcnJvciA9IHdpa2lFcnJvcjtcbmNsYXNzIHNlYXJjaEVycm9yIGV4dGVuZHMgd2lraUVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLm5hbWUgPSAnc2VhcmNoRXJyb3InO1xuICAgIH1cbn1cbmV4cG9ydHMuc2VhcmNoRXJyb3IgPSBzZWFyY2hFcnJvcjtcbmNsYXNzIGF1dG9jb21wbGV0aW9uc0Vycm9yIGV4dGVuZHMgd2lraUVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLm5hbWUgPSAnYXV0b2NvbXBsZXRpb25zRXJyb3InO1xuICAgIH1cbn1cbmV4cG9ydHMuYXV0b2NvbXBsZXRpb25zRXJyb3IgPSBhdXRvY29tcGxldGlvbnNFcnJvcjtcbmNsYXNzIHBhZ2VFcnJvciBleHRlbmRzIHdpa2lFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSkge1xuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAgICAgdGhpcy5uYW1lID0gJ3BhZ2VFcnJvcic7XG4gICAgfVxufVxuZXhwb3J0cy5wYWdlRXJyb3IgPSBwYWdlRXJyb3I7XG5jbGFzcyBzdW1tYXJ5RXJyb3IgZXh0ZW5kcyB3aWtpRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XG4gICAgICAgIHRoaXMubmFtZSA9ICdzdW1tYXJ5RXJyb3InO1xuICAgIH1cbn1cbmV4cG9ydHMuc3VtbWFyeUVycm9yID0gc3VtbWFyeUVycm9yO1xuY2xhc3MgaW1hZ2VFcnJvciBleHRlbmRzIHdpa2lFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSkge1xuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAgICAgdGhpcy5uYW1lID0gJ2ltYWdlRXJyb3InO1xuICAgIH1cbn1cbmV4cG9ydHMuaW1hZ2VFcnJvciA9IGltYWdlRXJyb3I7XG5jbGFzcyBodG1sRXJyb3IgZXh0ZW5kcyB3aWtpRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XG4gICAgICAgIHRoaXMubmFtZSA9ICdodG1sRXJyb3InO1xuICAgIH1cbn1cbmV4cG9ydHMuaHRtbEVycm9yID0gaHRtbEVycm9yO1xuY2xhc3MgY29udGVudEVycm9yIGV4dGVuZHMgd2lraUVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLm5hbWUgPSAnY29udGVudEVycm9yJztcbiAgICB9XG59XG5leHBvcnRzLmNvbnRlbnRFcnJvciA9IGNvbnRlbnRFcnJvcjtcbmNsYXNzIGNhdGVnb3JpZXNFcnJvciBleHRlbmRzIHdpa2lFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSkge1xuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAgICAgdGhpcy5uYW1lID0gJ2NhdGVnb3JpZXNFcnJvcic7XG4gICAgfVxufVxuZXhwb3J0cy5jYXRlZ29yaWVzRXJyb3IgPSBjYXRlZ29yaWVzRXJyb3I7XG5jbGFzcyBsaW5rc0Vycm9yIGV4dGVuZHMgd2lraUVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLm5hbWUgPSAnbGlua3NFcnJvcic7XG4gICAgfVxufVxuZXhwb3J0cy5saW5rc0Vycm9yID0gbGlua3NFcnJvcjtcbmNsYXNzIGdlb1NlYXJjaEVycm9yIGV4dGVuZHMgd2lraUVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLm5hbWUgPSAnZ2VvU2VhcmNoRXJyb3InO1xuICAgIH1cbn1cbmV4cG9ydHMuZ2VvU2VhcmNoRXJyb3IgPSBnZW9TZWFyY2hFcnJvcjtcbmNsYXNzIGNvb3JkaW5hdGVzRXJyb3IgZXh0ZW5kcyB3aWtpRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XG4gICAgICAgIHRoaXMubmFtZSA9ICdjb29yZGluYXRlc0Vycm9yJztcbiAgICB9XG59XG5leHBvcnRzLmNvb3JkaW5hdGVzRXJyb3IgPSBjb29yZGluYXRlc0Vycm9yO1xuY2xhc3MgaW5mb2JveEVycm9yIGV4dGVuZHMgd2lraUVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLm5hbWUgPSAnaW5mb2JveEVycm9yJztcbiAgICB9XG59XG5leHBvcnRzLmluZm9ib3hFcnJvciA9IGluZm9ib3hFcnJvcjtcbmNsYXNzIHByZWxvYWRFcnJvciBleHRlbmRzIHdpa2lFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSkge1xuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAgICAgdGhpcy5uYW1lID0gJ3ByZWxvYWRFcnJvcic7XG4gICAgfVxufVxuZXhwb3J0cy5wcmVsb2FkRXJyb3IgPSBwcmVsb2FkRXJyb3I7XG5jbGFzcyBpbnRyb0Vycm9yIGV4dGVuZHMgd2lraUVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLm5hbWUgPSAnaW50cm9FcnJvcic7XG4gICAgfVxufVxuZXhwb3J0cy5pbnRyb0Vycm9yID0gaW50cm9FcnJvcjtcbmNsYXNzIHJlbGF0ZWRFcnJvciBleHRlbmRzIHdpa2lFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSkge1xuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAgICAgdGhpcy5uYW1lID0gJ3JlbGF0ZWRFcnJvcic7XG4gICAgfVxufVxuZXhwb3J0cy5yZWxhdGVkRXJyb3IgPSByZWxhdGVkRXJyb3I7XG5jbGFzcyBtZWRpYUVycm9yIGV4dGVuZHMgd2lraUVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLm5hbWUgPSAnbWVkaWFFcnJvcic7XG4gICAgfVxufVxuZXhwb3J0cy5tZWRpYUVycm9yID0gbWVkaWFFcnJvcjtcbmNsYXNzIGV2ZW50c0Vycm9yIGV4dGVuZHMgd2lraUVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLm5hbWUgPSAnZXZlbnRzRXJyb3InO1xuICAgIH1cbn1cbmV4cG9ydHMuZXZlbnRzRXJyb3IgPSBldmVudHNFcnJvcjtcbmNsYXNzIGZjRXJyb3IgZXh0ZW5kcyB3aWtpRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XG4gICAgICAgIHRoaXMubmFtZSA9ICdmZWF0dXJlZENvbnRlbnRFcnJvcic7XG4gICAgfVxufVxuZXhwb3J0cy5mY0Vycm9yID0gZmNFcnJvcjtcbmNsYXNzIHBkZkVycm9yIGV4dGVuZHMgd2lraUVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLm5hbWUgPSAncGRmRXJyb3InO1xuICAgIH1cbn1cbmV4cG9ydHMucGRmRXJyb3IgPSBwZGZFcnJvcjtcbmNsYXNzIGNpdGF0aW9uRXJyb3IgZXh0ZW5kcyB3aWtpRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XG4gICAgICAgIHRoaXMubmFtZSA9ICdjaXRhdGlvbkVycm9yJztcbiAgICB9XG59XG5leHBvcnRzLmNpdGF0aW9uRXJyb3IgPSBjaXRhdGlvbkVycm9yO1xuIiwgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zZXRVc2VyQWdlbnQgPSBleHBvcnRzLnNldEFQSVVybCA9IGV4cG9ydHMucmV0dXJuUmVzdFVybCA9IGV4cG9ydHMubWFrZVJlc3RSZXF1ZXN0ID0gdm9pZCAwO1xuY29uc3QgYXhpb3NfMSA9IHJlcXVpcmUoXCJheGlvc1wiKTtcbmNvbnN0IGVycm9yc18xID0gcmVxdWlyZShcIi4vZXJyb3JzXCIpO1xubGV0IEFQSV9VUkwgPSAnaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3cvYXBpLnBocD8nLCBSRVNUX0FQSV9VUkwgPSAnaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL2FwaS9yZXN0X3YxLycsIFxuLy8gUkFURV9MSU1JVCA9IGZhbHNlLFxuLy8gUkFURV9MSU1JVF9NSU5fV0FJVCA9IHVuZGVmaW5lZCxcbi8vIFJBVEVfTElNSVRfTEFTVF9DQUxMID0gdW5kZWZpbmVkLFxuVVNFUl9BR0VOVCA9ICd3aWtpcGVkaWEgKGh0dHBzOi8vZ2l0aHViLmNvbS9kb3BlY29kZXovV2lraXBlZGlhLyknO1xuYXN5bmMgZnVuY3Rpb24gY2FsbEFQSSh1cmwpIHtcbiAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICBcIkFwaS1Vc2VyLUFnZW50XCI6IFVTRVJfQUdFTlQsXG4gICAgICAgIH0sXG4gICAgfTtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCB7IGRhdGEgfSA9IGF3YWl0IGF4aW9zXzEuZGVmYXVsdC5nZXQodXJsLCBvcHRpb25zKTtcbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEud2lraUVycm9yKGVycm9yKTtcbiAgICB9XG59XG4vLyBNYWtlcyBhIHJlcXVlc3QgdG8gbGVnYWN5IHBocCBlbmRwb2ludFxuYXN5bmMgZnVuY3Rpb24gbWFrZVJlcXVlc3QocGFyYW1zLCByZWRpcmVjdCA9IHRydWUpIHtcbiAgICBjb25zdCBzZWFyY2ggPSB7IC4uLnBhcmFtcyB9O1xuICAgIHNlYXJjaFsnZm9ybWF0J10gPSAnanNvbic7XG4gICAgaWYgKHJlZGlyZWN0KSB7XG4gICAgICAgIHNlYXJjaFsncmVkaXJlY3RzJ10gPSAnJztcbiAgICB9XG4gICAgaWYgKCFwYXJhbXMuYWN0aW9uKSB7XG4gICAgICAgIHNlYXJjaFsnYWN0aW9uJ10gPSBcInF1ZXJ5XCI7XG4gICAgfVxuICAgIHNlYXJjaFsnb3JpZ2luJ10gPSAnKic7XG4gICAgbGV0IHNlYXJjaFBhcmFtID0gJyc7XG4gICAgT2JqZWN0LmtleXMoc2VhcmNoKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgIHNlYXJjaFBhcmFtICs9IGAke2tleX09JHtzZWFyY2hba2V5XX0mYDtcbiAgICB9KTtcbiAgICByZXR1cm4gYXdhaXQgY2FsbEFQSShlbmNvZGVVUkkoQVBJX1VSTCArIHNlYXJjaFBhcmFtKSk7XG59XG4vLyBNYWtlcyBhIHJlcXVlc3QgdG8gcmVzdCBhcGkgZW5kcG9pbnRcbmFzeW5jIGZ1bmN0aW9uIG1ha2VSZXN0UmVxdWVzdChwYXRoLCByZWRpcmVjdCA9IHRydWUpIHtcbiAgICBpZiAoIXJlZGlyZWN0KSB7XG4gICAgICAgIHBhdGggKz0gJz9yZWRpcmVjdD1mYWxzZSc7XG4gICAgfVxuICAgIHJldHVybiBhd2FpdCBjYWxsQVBJKGVuY29kZVVSSShSRVNUX0FQSV9VUkwgKyBwYXRoKSk7XG59XG5leHBvcnRzLm1ha2VSZXN0UmVxdWVzdCA9IG1ha2VSZXN0UmVxdWVzdDtcbi8vcmV0dXJuIHJlc3QgdXJpXG5mdW5jdGlvbiByZXR1cm5SZXN0VXJsKHBhdGgpIHtcbiAgICByZXR1cm4gZW5jb2RlVVJJKFJFU1RfQVBJX1VSTCArIHBhdGgpO1xufVxuZXhwb3J0cy5yZXR1cm5SZXN0VXJsID0gcmV0dXJuUmVzdFVybDtcbi8vY2hhbmdlIGxhbmd1YWdlIG9mIGJvdGggdXJsc1xuZnVuY3Rpb24gc2V0QVBJVXJsKHByZWZpeCkge1xuICAgIEFQSV9VUkwgPSAnaHR0cHM6Ly8nICsgcHJlZml4LnRvTG93ZXJDYXNlKCkgKyAnLndpa2lwZWRpYS5vcmcvdy9hcGkucGhwPyc7XG4gICAgUkVTVF9BUElfVVJMID0gJ2h0dHBzOi8vJyArIHByZWZpeC50b0xvd2VyQ2FzZSgpICsgJy53aWtpcGVkaWEub3JnL2FwaS9yZXN0X3YxLyc7XG4gICAgcmV0dXJuIEFQSV9VUkw7XG59XG5leHBvcnRzLnNldEFQSVVybCA9IHNldEFQSVVybDtcbi8vY2hhbmdlIHVzZXIgYWdlbnRcbmZ1bmN0aW9uIHNldFVzZXJBZ2VudCh1c2VyQWdlbnQpIHtcbiAgICBVU0VSX0FHRU5UID0gdXNlckFnZW50O1xufVxuZXhwb3J0cy5zZXRVc2VyQWdlbnQgPSBzZXRVc2VyQWdlbnQ7XG5leHBvcnRzLmRlZmF1bHQgPSBtYWtlUmVxdWVzdDtcbiIsICJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTVNHUyA9IHZvaWQgMDtcbmV4cG9ydHMuTVNHUyA9IHtcbiAgICBQQUdFX05PVF9TVUdHRVNUOiAnTm8gcGFnZSB3aXRoIGdpdmVuIHRpdGxlIHN1Z2dlc3RlZCA6ICcsXG4gICAgUEFHRV9OT1RfRVhJU1Q6ICdObyBwYWdlIHdpdGggZ2l2ZW4gdGl0bGUgZXhpc3RzIDogJyxcbiAgICBJTkZPQk9YX05PVF9FWElTVDogJ0luZm8gY2Fubm90IGJlIHBhcnNlZCBmb3IgZ2l2ZW4gcGFnZSdcbn07XG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdldEN1cnJlbnREYXkgPSBleHBvcnRzLmdldEN1cnJlbnRNb250aCA9IGV4cG9ydHMuZ2V0Q3VycmVudFllYXIgPSBleHBvcnRzLnNldFBhZ2VJZCA9IGV4cG9ydHMuc2V0UGFnZUlkT3JUaXRsZVBhcmFtID0gZXhwb3J0cy5zZXRUaXRsZUZvclBhZ2UgPSBleHBvcnRzLmlzU3RyaW5nID0gdm9pZCAwO1xuY29uc3QgXzEgPSByZXF1aXJlKFwiLlwiKTtcbmNvbnN0IGVycm9yc18xID0gcmVxdWlyZShcIi4vZXJyb3JzXCIpO1xuY29uc3QgbWVzc2FnZXNfMSA9IHJlcXVpcmUoXCIuL21lc3NhZ2VzXCIpO1xuLy9jaGVjayBpZiBpbnB1dCBpcyBzdHJpbmdcbmZ1bmN0aW9uIGlzU3RyaW5nKHRpdGxlKSB7XG4gICAgcmV0dXJuIGlzTmFOKHRpdGxlKTtcbn1cbmV4cG9ydHMuaXNTdHJpbmcgPSBpc1N0cmluZztcbi8vc2V0IHRpdGxlIGZvciBwYWdlIGluIGNhc2UgYXV0b1N1Z2dlc3QgaXMgdHJ1ZVxuYXN5bmMgZnVuY3Rpb24gc2V0VGl0bGVGb3JQYWdlKHRpdGxlKSB7XG4gICAge1xuICAgICAgICBjb25zdCBzZWFyY2hSZXN1bHQgPSBhd2FpdCBfMS5kZWZhdWx0LnNlYXJjaCh0aXRsZSwgeyBsaW1pdDogMSwgc3VnZ2VzdGlvbjogdHJ1ZSB9KTtcbiAgICAgICAgaWYgKCFzZWFyY2hSZXN1bHQuc3VnZ2VzdGlvbiAmJiBzZWFyY2hSZXN1bHQucmVzdWx0cy5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLnBhZ2VFcnJvcihgJHttZXNzYWdlc18xLk1TR1MuUEFHRV9OT1RfU1VHR0VTVH0ke3RpdGxlfWApO1xuICAgICAgICB9XG4gICAgICAgIHRpdGxlID0gc2VhcmNoUmVzdWx0LnN1Z2dlc3Rpb24gfHwgdGl0bGU7XG4gICAgICAgIHJldHVybiB0aXRsZTtcbiAgICB9XG59XG5leHBvcnRzLnNldFRpdGxlRm9yUGFnZSA9IHNldFRpdGxlRm9yUGFnZTtcbi8vU2V0IHBhZ2UgaWQgb3IgdGl0bGUgcGFyYW0gZm9yIGxlZ2FjeSBhcGkgcXVlcmllc1xuZnVuY3Rpb24gc2V0UGFnZUlkT3JUaXRsZVBhcmFtKHBhcmFtcywgdGl0bGUpIHtcbiAgICBpZiAoaXNTdHJpbmcodGl0bGUpKSB7XG4gICAgICAgIHBhcmFtcy50aXRsZXMgPSB0aXRsZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHBhcmFtcy5wYWdlaWRzID0gdGl0bGU7XG4gICAgfVxuICAgIHJldHVybiBwYXJhbXM7XG59XG5leHBvcnRzLnNldFBhZ2VJZE9yVGl0bGVQYXJhbSA9IHNldFBhZ2VJZE9yVGl0bGVQYXJhbTtcbi8vR2V0IHBhZ2UgaWQgZnJvbSBwYXJhbXMgb3IgZnJvbSByZXN1bHRzXG5mdW5jdGlvbiBzZXRQYWdlSWQocGFyYW1zLCByZXN1bHRzKSB7XG4gICAgbGV0IHBhZ2VJZDtcbiAgICBpZiAocGFyYW1zLnBhZ2VJZHMpIHtcbiAgICAgICAgcGFnZUlkID0gcGFyYW1zLnBhZ2VJZHM7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBwYWdlSWQgPSBPYmplY3Qua2V5cyhyZXN1bHRzLnF1ZXJ5LnBhZ2VzKVswXTtcbiAgICB9XG4gICAgcmV0dXJuIHBhZ2VJZDtcbn1cbmV4cG9ydHMuc2V0UGFnZUlkID0gc2V0UGFnZUlkO1xuLy9HZXQgY3VycmVudCB5ZWFyXG5mdW5jdGlvbiBnZXRDdXJyZW50WWVhcigpIHtcbiAgICBjb25zdCBkYXRlID0gbmV3IERhdGUoKTtcbiAgICBjb25zdCB5ZWFyID0gZGF0ZS5nZXRGdWxsWWVhcigpO1xuICAgIHJldHVybiAoeWVhcik7XG59XG5leHBvcnRzLmdldEN1cnJlbnRZZWFyID0gZ2V0Q3VycmVudFllYXI7XG4vL0dldCBjdXJyZW50IG1vbnRoXG5mdW5jdGlvbiBnZXRDdXJyZW50TW9udGgoKSB7XG4gICAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKCk7XG4gICAgY29uc3QgbW9udGggPSBkYXRlLmdldE1vbnRoKCk7XG4gICAgcmV0dXJuIChtb250aCArIDEpOyAvL2phdmFzY3JpcHQgbW9udGhzIGFyZSBpbmRleGVkIGF0IHplcm8gZm9yIHNvbWUgcmVhc29uXG59XG5leHBvcnRzLmdldEN1cnJlbnRNb250aCA9IGdldEN1cnJlbnRNb250aDtcbi8vR2V0IGN1cnJlbnQgZGF5XG5mdW5jdGlvbiBnZXRDdXJyZW50RGF5KCkge1xuICAgIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZSgpO1xuICAgIGNvbnN0IGRheSA9IGRhdGUuZ2V0RGF0ZSgpO1xuICAgIHJldHVybiBkYXk7XG59XG5leHBvcnRzLmdldEN1cnJlbnREYXkgPSBnZXRDdXJyZW50RGF5O1xuIiwgIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gcHJlc2VydmVDYW1lbENhc2Uoc3RyKSB7XG5cdGxldCBpc0xhc3RDaGFyTG93ZXIgPSBmYWxzZTtcblx0bGV0IGlzTGFzdENoYXJVcHBlciA9IGZhbHNlO1xuXHRsZXQgaXNMYXN0TGFzdENoYXJVcHBlciA9IGZhbHNlO1xuXG5cdGZvciAobGV0IGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG5cdFx0Y29uc3QgYyA9IHN0cltpXTtcblxuXHRcdGlmIChpc0xhc3RDaGFyTG93ZXIgJiYgL1thLXpBLVpdLy50ZXN0KGMpICYmIGMudG9VcHBlckNhc2UoKSA9PT0gYykge1xuXHRcdFx0c3RyID0gc3RyLnN1YnN0cigwLCBpKSArICctJyArIHN0ci5zdWJzdHIoaSk7XG5cdFx0XHRpc0xhc3RDaGFyTG93ZXIgPSBmYWxzZTtcblx0XHRcdGlzTGFzdExhc3RDaGFyVXBwZXIgPSBpc0xhc3RDaGFyVXBwZXI7XG5cdFx0XHRpc0xhc3RDaGFyVXBwZXIgPSB0cnVlO1xuXHRcdFx0aSsrO1xuXHRcdH0gZWxzZSBpZiAoaXNMYXN0Q2hhclVwcGVyICYmIGlzTGFzdExhc3RDaGFyVXBwZXIgJiYgL1thLXpBLVpdLy50ZXN0KGMpICYmIGMudG9Mb3dlckNhc2UoKSA9PT0gYykge1xuXHRcdFx0c3RyID0gc3RyLnN1YnN0cigwLCBpIC0gMSkgKyAnLScgKyBzdHIuc3Vic3RyKGkgLSAxKTtcblx0XHRcdGlzTGFzdExhc3RDaGFyVXBwZXIgPSBpc0xhc3RDaGFyVXBwZXI7XG5cdFx0XHRpc0xhc3RDaGFyVXBwZXIgPSBmYWxzZTtcblx0XHRcdGlzTGFzdENoYXJMb3dlciA9IHRydWU7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlzTGFzdENoYXJMb3dlciA9IGMudG9Mb3dlckNhc2UoKSA9PT0gYztcblx0XHRcdGlzTGFzdExhc3RDaGFyVXBwZXIgPSBpc0xhc3RDaGFyVXBwZXI7XG5cdFx0XHRpc0xhc3RDaGFyVXBwZXIgPSBjLnRvVXBwZXJDYXNlKCkgPT09IGM7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHN0cjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoc3RyKSB7XG5cdGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuXHRcdHN0ciA9IEFycmF5LmZyb20oYXJndW1lbnRzKVxuXHRcdFx0Lm1hcCh4ID0+IHgudHJpbSgpKVxuXHRcdFx0LmZpbHRlcih4ID0+IHgubGVuZ3RoKVxuXHRcdFx0LmpvaW4oJy0nKTtcblx0fSBlbHNlIHtcblx0XHRzdHIgPSBzdHIudHJpbSgpO1xuXHR9XG5cblx0aWYgKHN0ci5sZW5ndGggPT09IDApIHtcblx0XHRyZXR1cm4gJyc7XG5cdH1cblxuXHRpZiAoc3RyLmxlbmd0aCA9PT0gMSkge1xuXHRcdHJldHVybiBzdHIudG9Mb3dlckNhc2UoKTtcblx0fVxuXG5cdGlmICgvXlthLXowLTldKyQvLnRlc3Qoc3RyKSkge1xuXHRcdHJldHVybiBzdHI7XG5cdH1cblxuXHRjb25zdCBoYXNVcHBlckNhc2UgPSBzdHIgIT09IHN0ci50b0xvd2VyQ2FzZSgpO1xuXG5cdGlmIChoYXNVcHBlckNhc2UpIHtcblx0XHRzdHIgPSBwcmVzZXJ2ZUNhbWVsQ2FzZShzdHIpO1xuXHR9XG5cblx0cmV0dXJuIHN0clxuXHRcdC5yZXBsYWNlKC9eW18uXFwtIF0rLywgJycpXG5cdFx0LnRvTG93ZXJDYXNlKClcblx0XHQucmVwbGFjZSgvW18uXFwtIF0rKFxcd3wkKS9nLCAobSwgcDEpID0+IHAxLnRvVXBwZXJDYXNlKCkpO1xufTtcbiIsICJjb25zdCBleHRyYVByb3BlcnR5UGF0dGVybiA9IC9cXG4/XFxzP1xcfFxccz9cXHcrJC87XG5jb25zdCBlbmRpbmdQYXR0ZXJuID0gL1xcblxcfVxcfSQvO1xuY29uc3QgbGlua3NQYXR0ZXJuID0gLygoXFwkXFx3K19cXGQrKVxccyosP1xccyopezIsfS9nO1xuY29uc3QgbGlua1NlcGFyYXRvclBhdHRlcm4gPSAvWyxcXHM/XS9nO1xuXG5mdW5jdGlvbiB0cmltV3JhcHBlcnMoc3RyKSB7XG4gIHJldHVybiBzdHJcbiAgICAucmVwbGFjZSgvXFxbXFxbL2csICcnKVxuICAgIC5yZXBsYWNlKC9cXF1cXF0vZywgJycpXG4gICAgLnJlcGxhY2UoL1xce1xcey9nLCAnJylcbiAgICAucmVwbGFjZSgvXFx9XFx9L2csICcnKVxuICAgIC50cmltKCk7XG59XG5cbmZ1bmN0aW9uIHRyaW1PcihzdHIpIHtcbiAgY29uc3Qgb3JQb3NpdGlvbiA9IHN0ci5pbmRleE9mKCd8Jyk7XG4gIGlmIChvclBvc2l0aW9uICE9PSAtMSkge1xuICAgIHJldHVybiBzdHIuc3Vic3RyaW5nKDAsIG9yUG9zaXRpb24pO1xuICB9XG4gIHJldHVybiBzdHI7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFZhbHVlKHJhdywga2V5KSB7XG4gIGlmICghcmF3KSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBjb25zdCBjbGVhbnNlZCA9IHJhd1xuICAgIC50cmltKClcbiAgICAucmVwbGFjZSgvRmlsZTovLCAnJylcbiAgICAvLyBIYXZlIG5vdCBmb3VuZCByZWFzb24gZm9yIHRoaXMgYnV0IGl0IGJyZWFrcyBwYXJzaW5nLCBzbyB3ZSBhcmUganVzdFxuICAgIC8vIHJlbW92aW5nIGl0IGZvciBub3dcbiAgICAucmVwbGFjZSgvXFx7XFx7XFxkK1xcfVxcfS9nLCAnJylcbiAgICAucmVwbGFjZShleHRyYVByb3BlcnR5UGF0dGVybiwgJycpXG4gICAgLnJlcGxhY2UoZW5kaW5nUGF0dGVybiwgJycpO1xuXG4gIGlmIChjbGVhbnNlZCA9PT0gJ3knIHx8IGNsZWFuc2VkID09PSAneWVzJykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKGtleSA9PSAnYmlydGhQbGFjZScpIHtcbiAgICByZXR1cm4gcmF3LnRyaW0oKTtcbiAgfVxuXG4gIC8vIElzIGl0IGEgbGlzdCBvZiBsaW5rcz8/XG4gIGNvbnN0IGxpbmtzID0gY2xlYW5zZWQubWF0Y2gobGlua3NQYXR0ZXJuKTtcbiAgaWYgKGxpbmtzKSB7XG4gICAgcmV0dXJuIGxpbmtzWzBdLnNwbGl0KGxpbmtTZXBhcmF0b3JQYXR0ZXJuKS5maWx0ZXIodGV4dCA9PiB0ZXh0KTtcbiAgfVxuXG4gIHJldHVybiB0cmltT3IodHJpbVdyYXBwZXJzKGNsZWFuc2VkKSk7XG59XG4iLCAiZXhwb3J0IGNvbnN0IERPX05PVF9SRVBMQUNFID0gU3ltYm9sKCdETyBOT1QgUkVQTEFDRScpO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkYXRhVHlwZSh7XG4gIGdsb2JhbFBhdHRlcm4sXG4gIHBhcnNlUGF0dGVybixcbiAgcGFyc2UsXG4gIHZhcmlhYmxlLFxuICBuYW1lLFxufSkge1xuICByZXR1cm4gKHNvdXJjZSkgPT4ge1xuICAgIGNvbnN0IG1hdGNoZXMgPSBzb3VyY2UubWF0Y2goZ2xvYmFsUGF0dGVybik7XG4gICAgaWYgKCFtYXRjaGVzKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBbbmFtZV06IFtdLFxuICAgICAgICBzb3VyY2VBZnRlcjogc291cmNlLFxuICAgICAgfTtcbiAgICB9XG4gICAgY29uc3QgaW5zdGFuY2VzID0gbWF0Y2hlcy5tYXAoKG1hdGNoKSA9PiBwYXJzZShtYXRjaC5tYXRjaChwYXJzZVBhdHRlcm4pKSk7XG4gICAgY29uc3Qgc291cmNlQWZ0ZXIgPSBtYXRjaGVzLnJlZHVjZSgobWVtbywgbWF0Y2gsIGluZGV4KSA9PiB7XG4gICAgICBpZiAoaW5zdGFuY2VzW2luZGV4XSA9PT0gRE9fTk9UX1JFUExBQ0UpIHtcbiAgICAgICAgcmV0dXJuIG1lbW87XG4gICAgICB9XG4gICAgICByZXR1cm4gbWVtby5yZXBsYWNlKG1hdGNoLCBgJCR7dmFyaWFibGV9XyR7aW5kZXh9YCk7XG4gICAgfSwgc291cmNlKTtcbiAgICByZXR1cm4ge1xuICAgICAgZGF0YToge1xuICAgICAgICBbbmFtZV06IGluc3RhbmNlcyxcbiAgICAgIH0sXG4gICAgICBzb3VyY2VBZnRlcixcbiAgICB9O1xuICB9O1xufVxuIiwgImltcG9ydCBkYXRhVHlwZXMgZnJvbSAnLi4vZGF0YS10eXBlcy9pbmRleCc7XG5cbmZ1bmN0aW9uIGJ5RGF0YUhhbmRsZXIoeyBzb3VyY2UsIGNvbnRleHQgfSwgaGFuZGxlcikge1xuICBjb25zdCB7IGRhdGEsIHNvdXJjZUFmdGVyIH0gPSBoYW5kbGVyKHNvdXJjZSk7XG4gIHJldHVybiB7XG4gICAgY29udGV4dDogT2JqZWN0LmFzc2lnbih7fSwgY29udGV4dCwgZGF0YSksXG4gICAgc291cmNlOiBzb3VyY2VBZnRlcixcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZXh0cmFjdERhdGEoc291cmNlKSB7XG4gIHJldHVybiBkYXRhVHlwZXNcbiAgICAubWFwKHR5cGUgPT4gdHlwZS5oYW5kbGVyKVxuICAgIC5yZWR1Y2UoYnlEYXRhSGFuZGxlciwge1xuICAgICAgY29udGV4dDoge30sXG4gICAgICBzb3VyY2UsXG4gICAgfSk7XG59XG4iLCAiaW1wb3J0IGdldFZhbHVlIGZyb20gJy4vZ2V0VmFsdWUnO1xuaW1wb3J0IGNhbWVsQ2FzZSBmcm9tICdjYW1lbGNhc2UnO1xuXG5jb25zdCBrZXlWYWx1ZUdsb2JhbFBhdHRlcm4gPSAvXFx8XFxzKihbLSdcXHUwNDAwLVxcdTA0RkZcXHdcXHNdKylcXHMqPVxccyooW158XSspPy9nO1xuY29uc3Qga2V5VmFsdWVQYXR0ZXJuID0gL1xcfFxccyooWy0nXFx1MDQwMC1cXHUwNEZGXFx3XFxzXSspXFxzKj1cXHMqKFtefF0rKT8vO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmaW5kUHJvcGVydHlMaXN0KHNvdXJjZSkge1xuICBjb25zdCBrZXlWYWx1ZVBhaXJzID0gc291cmNlLm1hdGNoKGtleVZhbHVlR2xvYmFsUGF0dGVybik7XG4gIGlmICgha2V5VmFsdWVQYWlycykge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICByZXR1cm4ga2V5VmFsdWVQYWlyc1xuICAgIC5tYXAobWF0Y2ggPT4ge1xuICAgICAgY29uc3QgcmVzdWx0ID0ga2V5VmFsdWVQYXR0ZXJuLmV4ZWMobWF0Y2gpO1xuICAgICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICBjb25zdCBbLCByYXdLZXksIHJhd1ZhbHVlXSA9IHJlc3VsdDtcbiAgICAgIGNvbnN0IGtleSA9IGNhbWVsQ2FzZShyYXdLZXkudHJpbSgpKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGtleSxcbiAgICAgICAgdmFsdWU6IGdldFZhbHVlKHJhd1ZhbHVlLCBrZXkpLFxuICAgICAgfTtcbiAgICB9KVxuICAgIC5maWx0ZXIoaXRlbSA9PiBpdGVtKTtcbn1cbiIsICJpbXBvcnQgZGF0YVR5cGVzIGZyb20gJy4uL2RhdGEtdHlwZXMvaW5kZXgnO1xuXG5leHBvcnQgZnVuY3Rpb24gZmlsbFZhcmlhYmxlKHZhbHVlLCBjb250ZXh0LCB7IHNpbXBsaWZ5RGF0YVZhbHVlcyB9ID0ge30pIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycpIHtcbiAgICBjb25zb2xlLmxvZyhcbiAgICAgIGBXYXJuaW5nOiBTb21ldGhpbmcgd2VudCB3cm9uZy4gQ291bGQgbm90IGZpbGwgdmFyaWFibGVzIGluOiAoJHt0eXBlb2YgdmFsdWV9KSAke0pTT04uc3RyaW5naWZ5KFxuICAgICAgICB2YWx1ZVxuICAgICAgKX1gXG4gICAgKTtcbiAgICByZXR1cm4ge307XG4gIH1cbiAgY29uc3QgZGF0YVR5cGUgPSBkYXRhVHlwZXMuZmluZCgodHlwZSkgPT4gdmFsdWUubWF0Y2godHlwZS5wYXR0ZXJuKSk7XG4gIGlmIChkYXRhVHlwZSkge1xuICAgIGNvbnN0IFttYXRjaGVkLCBpbmRleF0gPSBkYXRhVHlwZS5wYXR0ZXJuLmV4ZWModmFsdWUpO1xuICAgIGNvbnN0IGRhdGFWYWx1ZSA9IGNvbnRleHRbZGF0YVR5cGUubmFtZV1bcGFyc2VJbnQoaW5kZXgsIDEwKV07XG4gICAgaWYgKCFzaW1wbGlmeURhdGFWYWx1ZXMgJiYgdHlwZW9mIGRhdGFWYWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiB2YWx1ZS5yZXBsYWNlKG1hdGNoZWQsIGRhdGFWYWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiBkYXRhVmFsdWU7XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufVxuXG4vLyBSZWN1cnNpdmUgdmFyYWlibGUgZmlsbGluZy4uLiBldmVuIGhhbmRsZXMgYXJyYXlzIG9mIHZhbHVlc1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZmlsbFZhcmlhYmxlcyh2YWx1ZSwgY29udGV4dCwgb3B0aW9ucykge1xuICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBpZiAodmFsdWUgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZS5tYXAoKGl0ZW0pID0+IGZpbGxWYXJpYWJsZXMoaXRlbSwgY29udGV4dCwgb3B0aW9ucykpO1xuICB9XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHZhbHVlKS5yZWR1Y2UoKG1lbW8sIGtleSkgPT4ge1xuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24obWVtbywge1xuICAgICAgICBba2V5XTogZmlsbFZhcmlhYmxlcyh2YWx1ZVtrZXldLCBjb250ZXh0LCBvcHRpb25zKSxcbiAgICAgIH0pO1xuICAgIH0sIHt9KTtcbiAgICAvLyByZXR1cm4gdmFsdWUubWFwKGl0ZW0gPT4gZmlsbFZhcmlhYmxlcyhpdGVtLCBjb250ZXh0LCBvcHRpb25zKSk7XG4gIH1cbiAgY29uc3QgZmlsbGVkID0gZmlsbFZhcmlhYmxlKHZhbHVlLCBjb250ZXh0LCBvcHRpb25zKTtcbiAgaWYgKGZpbGxlZCA9PT0gdmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIGZpbGxWYXJpYWJsZXMoZmlsbGVkLCBjb250ZXh0LCBvcHRpb25zKTtcbn1cbiIsICJpbXBvcnQgZGF0YVR5cGVzIGZyb20gJy4uL2RhdGEtdHlwZXMvaW5kZXgnO1xuaW1wb3J0IGZpbmRQcm9wZXJ0eUxpc3QgZnJvbSAnLi9wcm9wZXJ0eUxpc3QnO1xuaW1wb3J0IG51bWJlclBhcnNlIGZyb20gJy4vbnVtYmVyUGFyc2UnO1xuaW1wb3J0IGZpbGxWYXJpYWJsZXMgZnJvbSAnLi9maWxsVmFyaWFibGVzJztcblxuY29uc3Qgc21hbGxEYXRhVHlwZSA9IGRhdGFUeXBlcy5maW5kKCh0eXBlKSA9PiB0eXBlLm5hbWUgPT09ICdzbWFsbHMnKTtcblxuZnVuY3Rpb24gaGFuZGxlU21hbGxEYXRhKHZhbHVlLCBjb250ZXh0LCB7IHNpbXBsaWZ5RGF0YVZhbHVlcyB9KSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmIHZhbHVlLm1hdGNoKHNtYWxsRGF0YVR5cGUucGF0dGVybikpIHtcbiAgICBjb25zdCBwcmltYXJ5ID0gdmFsdWVcbiAgICAgIC5yZXBsYWNlKHNtYWxsRGF0YVR5cGUucGF0dGVybiwgJycpXG4gICAgICAvLyBDbGVhbmluZyB1cCBmcm9tIGluc2VydGVkIGNvbW1hc1xuICAgICAgLnJlcGxhY2UoLywvLCAnJylcbiAgICAgIC50cmltKCk7XG4gICAgY29uc3QgWywgaW5kZXhdID0gc21hbGxEYXRhVHlwZS5wYXR0ZXJuLmV4ZWModmFsdWUpO1xuICAgIGNvbnN0IHNlY29uZGFyeSA9IGNvbnRleHRbc21hbGxEYXRhVHlwZS5uYW1lXVtwYXJzZUludChpbmRleCwgMTApXTtcbiAgICBjb25zdCByZXN1bHQgPSB7XG4gICAgICBwcmltYXJ5OiBnZXRWYXJpYWJsZVZhbHVlKHByaW1hcnksIGNvbnRleHQsIHsgc2ltcGxpZnlEYXRhVmFsdWVzIH0pLFxuICAgICAgc2Vjb25kYXJ5OiBnZXRWYXJpYWJsZVZhbHVlKHNlY29uZGFyeSwgY29udGV4dCwgeyBzaW1wbGlmeURhdGFWYWx1ZXMgfSksXG4gICAgfTtcbiAgICByZXR1cm4gc2ltcGxpZnlEYXRhVmFsdWVzID8gcmVzdWx0LnByaW1hcnkgOiByZXN1bHQ7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIGdldFZhcmlhYmxlVmFsdWUodmFsdWUsIGNvbnRleHQsIHsgc2ltcGxpZnlEYXRhVmFsdWVzIH0gPSB7fSkge1xuICAvLyBIYW5kbGluZyBzbWFsbCBkYXRhIGRpZmZlcmVudGx5Li4uIEkgZG9udCBsaWtlIHRoaXMuLi5cbiAgY29uc3Qgc21hbGxEYXRhID0gaGFuZGxlU21hbGxEYXRhKHZhbHVlLCBjb250ZXh0LCB7IHNpbXBsaWZ5RGF0YVZhbHVlcyB9KTtcbiAgaWYgKHNtYWxsRGF0YSkge1xuICAgIHJldHVybiBzbWFsbERhdGE7XG4gIH1cbiAgcmV0dXJuIGZpbGxWYXJpYWJsZXModmFsdWUsIGNvbnRleHQsIHsgc2ltcGxpZnlEYXRhVmFsdWVzIH0pO1xufVxuXG5mdW5jdGlvbiByZWR1Y2VWYXJpYWJsZShrZXksIHZhbHVlLCBjb250ZXh0LCBvcHRpb25zKSB7XG4gIGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJykge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICAvLyBGaXJzdCBhcnJheSBwYXNzLi4uXG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZS5tYXAoKGl0ZW0pID0+IGdldFZhcmlhYmxlVmFsdWUoaXRlbSwgY29udGV4dCwgb3B0aW9ucykpO1xuICB9XG4gIGlmIChrZXkubWF0Y2goL2FyZWFUb3RhbC8pIHx8IGtleS5tYXRjaCgvcG9wdWxhdGlvbi8pKSB7XG4gICAgbGV0IGZsb2F0ID0gbnVtYmVyUGFyc2UodmFsdWUpO1xuICAgIGlmIChmbG9hdCA9PT0gZmFsc2UpIGZsb2F0ID0gcGFyc2VGbG9hdCh2YWx1ZSwgMTApO1xuICAgIGlmICghaXNOYU4oZmxvYXQpKSB7XG4gICAgICByZXR1cm4gZmxvYXQ7XG4gICAgfVxuICB9XG4gIGlmIChrZXkubWF0Y2goL2RhdGUvaSkpIHtcbiAgICBjb25zdCBkYXRlVmFsdWUgPSArbmV3IERhdGUodmFsdWUpO1xuICAgIGlmICghaXNOYU4oZGF0ZVZhbHVlKSkge1xuICAgICAgcmV0dXJuIG5ldyBEYXRlKHZhbHVlKTtcbiAgICB9XG4gIH1cbiAgY29uc3QgdmFyaWFibGVWYWx1ZSA9IGdldFZhcmlhYmxlVmFsdWUodmFsdWUsIGNvbnRleHQsIG9wdGlvbnMpO1xuXG4gIC8vIFNlY29uZCBhcnJheSBwYXNzLiBJZiBmaXJzdCB2YXJpYWJsZSB3YXMgYW4gYXJyYXkgb2YgdmFyaWFibGVzLlxuICBpZiAoQXJyYXkuaXNBcnJheSh2YXJpYWJsZVZhbHVlKSkge1xuICAgIHJldHVybiB2YXJpYWJsZVZhbHVlLm1hcCgoaXRlbSkgPT5cbiAgICAgIGdldFZhcmlhYmxlVmFsdWUoaXRlbSwgY29udGV4dCwgb3B0aW9ucylcbiAgICApO1xuICB9XG4gIHJldHVybiB2YXJpYWJsZVZhbHVlO1xufVxuXG5mdW5jdGlvbiBieVZhcmlhYmxlUmVkdWN0aW9uKGNvbnRleHQsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIChtZW1vLCB7IGtleSwgdmFsdWUgfSkgPT4ge1xuICAgIGNvbnN0IHJlZHVjZWQgPSByZWR1Y2VWYXJpYWJsZShrZXksIHZhbHVlLCBjb250ZXh0LCBvcHRpb25zKTtcbiAgICBpZiAocmVkdWNlZCA9PT0gJycgfHwgcmVkdWNlZCA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG1lbW87XG4gICAgfVxuICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBtZW1vLCB7XG4gICAgICBba2V5XTogcmVkdWNlZCxcbiAgICB9KTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZXh0cmFjdFByb3BlcnRpZXMoXG4gIHsgc291cmNlLCBjb250ZXh0IH0sXG4gIHsgc2ltcGxpZnlEYXRhVmFsdWVzID0gdHJ1ZSB9ID0ge31cbikge1xuICByZXR1cm4gZmluZFByb3BlcnR5TGlzdChzb3VyY2UpLnJlZHVjZShcbiAgICBieVZhcmlhYmxlUmVkdWN0aW9uKGNvbnRleHQsIHsgc2ltcGxpZnlEYXRhVmFsdWVzIH0pLFxuICAgIHt9XG4gICk7XG59XG4iLCAiLy8gaW1wb3J0IGdldFZhbHVlIGZyb20gJy4vZ2V0VmFsdWUnO1xuaW1wb3J0IGNhbWVsQ2FzZSBmcm9tICdjYW1lbGNhc2UnO1xuXG5jb25zdCBibGFua05hbWVQYXR0ZXJuID0gL2JsYW5rKFxcZCspP05hbWVTZWMyLztcbmNvbnN0IGJsYW5rSW5mb1BhdHRlcm4gPSAvYmxhbmsoXFxkKyk/SW5mb1NlYzIvO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0cmFuc2Zvcm1Qcm9wZXJ0aWVzKHByb3BlcnRpZXMpIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKHByb3BlcnRpZXMpXG4gICAgLnJlZHVjZSgodHJhbnNmb3JtZWQsIGtleSkgPT4ge1xuICAgICAgY29uc3QgdmFsdWUgPSBwcm9wZXJ0aWVzW2tleV07XG4gICAgICBjb25zdCBtYXRjaCA9IGtleS5tYXRjaChibGFua05hbWVQYXR0ZXJuKTtcbiAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICBjb25zdCBpZCA9IG1hdGNoWzFdIHx8ICcnO1xuICAgICAgICBjb25zdCBibGFua05hbWUgPSBwcm9wZXJ0aWVzW2BibGFuayR7aWR9TmFtZVNlYzJgXTtcbiAgICAgICAgY29uc3QgYmxhbmtJbmZvID0gcHJvcGVydGllc1tgYmxhbmske2lkfUluZm9TZWMyYF07XG4gICAgICAgIGlmICh0eXBlb2YgYmxhbmtOYW1lICE9PSAnc3RyaW5nJykgcmV0dXJuIHRyYW5zZm9ybWVkO1xuICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih0cmFuc2Zvcm1lZCwge1xuICAgICAgICAgIFtjYW1lbENhc2UoYmxhbmtOYW1lKV06IGJsYW5rSW5mbyxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAoa2V5Lm1hdGNoKGJsYW5rSW5mb1BhdHRlcm4pKSB7XG4gICAgICAgIHJldHVybiB0cmFuc2Zvcm1lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHRyYW5zZm9ybWVkLCB7XG4gICAgICAgIFtrZXldOiB2YWx1ZSxcbiAgICAgIH0pO1xuICAgIH0sIHt9KTtcbn1cbiIsICJmdW5jdGlvbiBmaW5kT3V0ZXJJbmRleChzb3VyY2UpIHtcblx0bGV0IGxhc3RPcGVuID0gW107XG5cdGZvciAobGV0IGkgPSAwOyBpIDwgc291cmNlLmxlbmd0aCAtIDE7IGkrKykge1xuICAgIGNvbnN0IG5leHRUd28gPSBzb3VyY2Uuc3Vic3RyKGksIDIpO1xuICAgIGlmIChuZXh0VHdvID09PSAne3snKSB7XG5cdFx0XHRsYXN0T3Blbi5wdXNoKGkpO1xuXHRcdFx0Ly8gTW92ZSBmb3J3YXJkLCBzbyB3ZSBkbyBub3QgY291bnQgY2xvc3VyZXMgcmlnaHQgbmV4dCB0byBlYWNoIG90aGVyXG5cdFx0XHRpKys7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG4gICAgaWYgKG5leHRUd28gPT09ICd9fScpIHtcblx0XHRcdGNvbnN0IG9wZW5BdCA9IGxhc3RPcGVuLnBvcCgpO1xuXHRcdFx0aWYgKGxhc3RPcGVuLmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0XHQvLyBBZGRpbmcgMiBoZXJlIGZvciB0aGUgY2xvc3VyZVxuXHRcdFx0XHRyZXR1cm4gaSArIDI7XG5cdFx0XHR9XG5cdFx0XHQvLyBNb3ZlIGZvcndhcmQsIHNvIHdlIGRvIG5vdCBjb3VudCBjbG9zdXJlcyByaWdodCBuZXh0IHRvIGVhY2ggb3RoZXJcblx0XHRcdGkrKztcblx0XHR9ICAgIFxuICB9XG59XG5cbmNvbnN0IGluZm9Cb3hTdGFydFBhdHRlcm4gPSAve3tcXHcqYm94LztcblxuZnVuY3Rpb24gcGFyc2Uoc291cmNlKSB7XG5cdGNvbnN0IHN0YXJ0TWF0Y2ggPSBzb3VyY2UubWF0Y2goaW5mb0JveFN0YXJ0UGF0dGVybik7XG5cdGlmICghc3RhcnRNYXRjaCkge1xuXHRcdC8vIE1heSBub3QgaGF2ZSBhIGEgcHJvcGVyIGluZm9ib3ggd3JhcHBlciwgbGV0J3MgdXNlIHRoZSBlbnRpcmUgc291cmNlXG5cdFx0Ly8gYnkgZGVmYXVsdFxuXHRcdHJldHVybiB7IGRhdGE6IHNvdXJjZSwgc291cmNlTGVmdDogbnVsbCB9O1xuXHR9XG5cdGNvbnN0IHN0YXJ0SW5kZXggPSBzdGFydE1hdGNoLmluZGV4O1xuXHRjb25zdCB3aXRoU3RhcnQgPSBzb3VyY2Uuc3Vic3RyaW5nKHN0YXJ0SW5kZXgpO1xuXHRjb25zdCBvdXRlckluZGV4ID0gZmluZE91dGVySW5kZXgod2l0aFN0YXJ0KTtcblx0aWYgKCFvdXRlckluZGV4KSB7XG5cdFx0cmV0dXJuIHsgZGF0YTogc291cmNlLCBzb3VyY2VMZWZ0OiBudWxsIH07XG5cdH1cblx0Y29uc3QgZGF0YSA9IHdpdGhTdGFydC5zdWJzdHJpbmcoMCwgb3V0ZXJJbmRleCk7XG5cdGNvbnN0IHNvdXJjZUxlZnQgPSBzb3VyY2Uuc3Vic3RyaW5nKG91dGVySW5kZXgpO1xuXHRjb25zdCBzb3VyY2VMZWZ0SGFzTWF0Y2ggPSAhIXNvdXJjZUxlZnQubWF0Y2goaW5mb0JveFN0YXJ0UGF0dGVybik7XG5cdHJldHVybiB7XG5cdFx0ZGF0YSxcblx0XHRzb3VyY2VMZWZ0OiBzb3VyY2VMZWZ0SGFzTWF0Y2ggPyBzb3VyY2VMZWZ0IDogbnVsbFxuXHR9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBleHRyYWN0SW5mb2JveGVzKHNvdXJjZSkge1xuICBsZXQgcGFyc2VkID0gcGFyc2Uoc291cmNlKTtcbiAgY29uc3QgaW5mb2JveGVzID0gW3BhcnNlZC5kYXRhXTtcbiAgd2hpbGUocGFyc2VkLnNvdXJjZUxlZnQpIHtcbiAgXHRwYXJzZWQgPSBwYXJzZShwYXJzZWQuc291cmNlTGVmdCk7XG4gIFx0aW5mb2JveGVzLnB1c2gocGFyc2VkLmRhdGEpO1xuICB9XG4gIHJldHVybiBpbmZvYm94ZXM7XG59XG4iLCAiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY2xlYW5Tb3VyY2UoXG4gIHNvdXJjZSxcbiAgeyByZW1vdmVTbWFsbCA9IGZhbHNlLCByZW1vdmVSZWZlcmVuY2VzID0gdHJ1ZSB9ID0ge31cbikge1xuICBpZiAocmVtb3ZlUmVmZXJlbmNlcykge1xuICAgIHNvdXJjZSA9IHNvdXJjZVxuICAgICAgLnJlcGxhY2UoLzxyZWYoXFxzXFx3Kz1bXj5dKyk/Pi4qPFxcL3JlZj4vZywgJycpXG4gICAgICAucmVwbGFjZSgvPHJlZihcXHNcXHcrPVtePl0rKT9cXHM/XFwvPi9nLCAnJyk7XG4gIH1cblxuICBpZiAocmVtb3ZlU21hbGwpIHtcbiAgICBzb3VyY2UgPSBzb3VyY2UucmVwbGFjZSgvPHNtYWxsPi4qPFxcL3NtYWxsPi9nLCAnJyk7XG4gIH1cblxuICByZXR1cm4gKFxuICAgIHNvdXJjZVxuICAgICAgLy8gUmVtb3ZlIHRpY2tzXG4gICAgICAucmVwbGFjZSgvJycnPy9nLCAnJylcbiAgICAgIC5yZXBsYWNlKC9cXHxkaXNwbGF5PWlubGluZS9nLCAnJylcbiAgICAgIC8vIFRoaXMgaXMgYSBsaXR0bGUgaWZmeVxuICAgICAgLnJlcGxhY2UoLzxiclxccz9cXC8/Pi9nLCAnLCcpXG4gICAgICAucmVwbGFjZSgvJm1pbnVzOy9nLCAnLScpXG4gICAgICAucmVwbGFjZSgve3tTbmRhc2h9fS9nLCAn4oCTJylcbiAgICAgIC5yZXBsYWNlKC88c3VwPi9nLCAnXicpXG4gICAgICAvLyBSZW1vdmUgc2hvcnRlbmVkIGZvb3Rub3RlIHRlbXBsYXRlc1xuICAgICAgLnJlcGxhY2UoL1xce1xce3NmblxcfChbXlxcfVxcfV0rKVxcfVxcfS9nLCAnJylcbiAgICAgIC8vIFJlbW92ZSBleHBsYW5hdG9yeSBmb290bm90ZXNcbiAgICAgIC5yZXBsYWNlKC9cXHtcXHtlZm5cXHwoW15cXH1cXH1dKylcXH1cXH0vZywgJycpXG4gICAgICAucmVwbGFjZSgv4oiSL2csICctJylcbiAgICAgIC5yZXBsYWNlKC88XFwvc3VwPi9nLCAnJylcbiAgICAgIC8vIFJlcGxhY2Ugd3JhcCB0ZW1wbGF0ZXMgd2l0aCBpdHMgY29udGVudFxuICAgICAgLnJlcGxhY2UoL1xce1xce1xccypub3dyYXBcXHMqXFx8KFteXFxuXFx9XSspXFx9XFx9L2dpLCAnJDEnKVxuICAgICAgLnJlcGxhY2UoL1xce1xce1xccypBdm9pZFxcc3dyYXBcXHMqXFx8KFteXFxuXFx9XSspXFx9XFx9L2dpLCAnJDEnKVxuICAgICAgLy8gSFRNTCBjb21tZW50c1xuICAgICAgLnJlcGxhY2UoLzwhLS0oW1xcc1xcU10qPyktLT4vZywgJycpXG4gICAgICAucmVwbGFjZSgvJm5ic3A7L2csICcgJylcbiAgICAgIC5yZXBsYWNlKFwifCcnU2VlIGxpc3QnJ1wiLCAnJylcbiAgKTtcbn1cbiIsICJpbXBvcnQgY2FtZWxjYXNlIGZyb20gJ2NhbWVsY2FzZSc7XG5pbXBvcnQgZXh0cmFjdERhdGEgZnJvbSAnLi9leHRyYWN0RGF0YSc7XG5pbXBvcnQgY2xlYW5Tb3VyY2UgZnJvbSAnLi9jbGVhblNvdXJjZSc7XG5pbXBvcnQgZmlsbFZhcmlhYmxlcywgeyBmaWxsVmFyaWFibGUgfSBmcm9tICcuL2ZpbGxWYXJpYWJsZXMnO1xuXG5jb25zdCB0YWJsZVN0YXJ0UGF0dGVybiA9IC97XFx8KC4qKVxcbj8vO1xuY29uc3QgdGFibGVFbmRQYXR0ZXJuID0gL1xcblxcfH0vO1xuY29uc3QgaGVhZGVyc1BhdHRlcm4gPSAvIVxccz8oLiopL2c7XG5jb25zdCByb3dQYXR0ZXJuID0gL1xcfC0vO1xuY29uc3QgY2VsbFNlcGFyYXRvclBhdHRlcm4gPSAvKD86XFxuXFx8KXwoPzpcXHxcXHwpLztcbmNvbnN0IGxpbmtQYXR0ZXJuID0gL1xcW1xcWyhbXlxcXV0rKVxcXVxcXS9nO1xuY29uc3QgbGlua05hbWVQYXR0ZXJuID0gL14uKlxcfC87XG5jb25zdCBpbmxpbmVIZWFkZXJQYXR0ZXJuID0gJyEhJztcbmNvbnN0IGFjdGlvblBhdHRlcm4gPSAve3thbmNob3JcXHwoLiopfX0vZztcbmNvbnN0IHJvd1NwYW5Db3VudFBhdHRlcm4gPSAvcm93c3Bhbj1cIihcXGQrKVwiLztcblxuY29uc3Qgc3RyaXBMaW5rcyA9IChzb3VyY2UpID0+XG4gIHNvdXJjZS5yZXBsYWNlKGxpbmtQYXR0ZXJuLCAobSwgY2FwdHVyZSkgPT4ge1xuICAgIGNvbnN0IHJlc3VsdCA9IGNhcHR1cmUucmVwbGFjZShsaW5rTmFtZVBhdHRlcm4sICcnKS50cmltKCk7XG4gICAgcmV0dXJuIHJlc3VsdCB8fCBjYXB0dXJlO1xuICB9KTtcbmNvbnN0IHJlbW92ZUFjdGlvbnMgPSAoc291cmNlKSA9PiBzb3VyY2UucmVwbGFjZShhY3Rpb25QYXR0ZXJuLCAnJyk7XG5jb25zdCB0cmFuc2Zvcm1DZWxsID0gKHNvdXJjZSkgPT5cbiAgc3RyaXBMaW5rcyhyZW1vdmVBY3Rpb25zKHNvdXJjZSB8fCAnJykpXG4gICAgLnJlcGxhY2Uocm93U3BhbkNvdW50UGF0dGVybiwgJycpXG4gICAgLnJlcGxhY2UobGlua05hbWVQYXR0ZXJuLCAnJylcbiAgICAudHJpbSgpO1xuXG5jb25zdCB0cmFuc2Zvcm1DZWxscyA9IChyb3cpID0+XG4gIHJvdy5zcGxpdChjZWxsU2VwYXJhdG9yUGF0dGVybikubWFwKHRyYW5zZm9ybUNlbGwpO1xuXG5jb25zdCBmaW5kSW5kZXggPSAodCwgcCkgPT4ge1xuICBjb25zdCBtID0gdC5tYXRjaChwKTtcbiAgcmV0dXJuIG0gPyBtLmluZGV4IDogLTE7XG59O1xuXG5jb25zdCBmaW5kVGFibGVTdGFydCA9IChzb3VyY2UpID0+IHtcbiAgY29uc3QgbSA9IHNvdXJjZS5tYXRjaCh0YWJsZVN0YXJ0UGF0dGVybik7XG4gIHJldHVybiBtID8gbS5pbmRleCArIG1bMF0ubGVuZ3RoIDogLTE7XG59O1xuY29uc3QgZmluZFRhYmxlRW5kID0gKHNvdXJjZSkgPT4gZmluZEluZGV4KHNvdXJjZSwgdGFibGVFbmRQYXR0ZXJuKTtcblxuY29uc3QgZ2V0SGVhZGVycyA9IChzb3VyY2UpID0+IHtcbiAgY29uc3QgaGVhZGVycyA9IFtdO1xuICBsZXQgbWF0Y2g7XG4gIHdoaWxlICgobWF0Y2ggPSBoZWFkZXJzUGF0dGVybi5leGVjKHNvdXJjZSkpKSB7XG4gICAgaGVhZGVycy5wdXNoKC4uLm1hdGNoWzFdLnNwbGl0KGlubGluZUhlYWRlclBhdHRlcm4pLm1hcCh0cmFuc2Zvcm1DZWxsKSk7XG4gIH1cbiAgcmV0dXJuIGhlYWRlcnM7XG59O1xuXG5mdW5jdGlvbiB0cmFuc2Zvcm1Sb3dTcGFuKHJvd3MpIHtcbiAgcmV0dXJuIHJvd3NcbiAgICAubWFwKHRyYW5zZm9ybUNlbGxzKVxuICAgIC5yZWR1Y2UoKG1lcmdlZCwgY2VsbHMsIGluZGV4KSA9PiB7XG4gICAgICBjb25zdCBrID0gaW5kZXggPT09IDAgPyAwIDogMTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2VsbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKCFtZXJnZWRbaSArIGtdKSBtZXJnZWRbaSArIGtdID0ge307XG4gICAgICAgIGlmIChjZWxsc1tpXSkge1xuICAgICAgICAgIG1lcmdlZFtpICsga11bY2VsbHNbaV1dID0gMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG1lcmdlZDtcbiAgICB9LCBbXSlcbiAgICAubWFwKChvKSA9PiBPYmplY3Qua2V5cyhvKS5qb2luKCcsJykpXG4gICAgLmpvaW4oJyB8fCAnKTtcbn1cblxuY29uc3QgZ2V0Um93cyA9IChzb3VyY2UpID0+IHtcbiAgY29uc3QgcmF3ID0gc291cmNlXG4gICAgLnNwbGl0KHJvd1BhdHRlcm4pXG4gICAgLm1hcCgoZSkgPT4gZS5yZXBsYWNlKC9eLipcXG4rP1xcfC8sICcnKS50cmltKCkpXG4gICAgLmZpbHRlcigoZSkgPT4gZSk7XG5cbiAgY29uc3Qgcm93cyA9IFtdO1xuICBsZXQgc3Bhbk4gPSAwO1xuICBsZXQgc3BhbkNvdW50ID0gMDtcbiAgbGV0IHJvd3NJblNwYW4gPSBbXTtcblxuICBmb3IgKGNvbnN0IHJvdyBvZiByYXcpIHtcbiAgICBjb25zdCBtYXRjaCA9IHJvdy5tYXRjaChyb3dTcGFuQ291bnRQYXR0ZXJuKTtcbiAgICBpZiAobWF0Y2gpIHtcbiAgICAgIHNwYW5OID0gMDtcbiAgICAgIHNwYW5Db3VudCA9IHBhcnNlSW50KG1hdGNoWzFdKTtcbiAgICAgIHJvd3NJblNwYW4gPSBbXTtcbiAgICB9XG4gICAgaWYgKHNwYW5OIDwgc3BhbkNvdW50KSB7XG4gICAgICByb3dzSW5TcGFuLnB1c2gocm93KTtcbiAgICAgIGlmICgrK3NwYW5OID09PSBzcGFuQ291bnQpIHtcbiAgICAgICAgcm93cy5wdXNoKHRyYW5zZm9ybVJvd1NwYW4ocm93c0luU3BhbikpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByb3dzLnB1c2gocm93KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcm93cztcbn07XG5cbmNvbnN0IGdldE5leHRUYWJsZSA9IChzb3VyY2UsIGNvbnRleHQsIG9wdGlvbnMpID0+IHtcbiAgbGV0IGxlZnQgPSBzb3VyY2U7XG4gIGNvbnN0IHN0YXJ0ID0gZmluZFRhYmxlU3RhcnQobGVmdCk7XG5cbiAgaWYgKHN0YXJ0ID09PSAtMSkgcmV0dXJuIG51bGw7XG4gIGxlZnQgPSBsZWZ0LnN1YnN0cmluZyhzdGFydCk7XG5cbiAgY29uc3QgZW5kID0gZmluZFRhYmxlRW5kKGxlZnQpO1xuXG4gIGlmIChlbmQgPT09IC0xKSByZXR1cm4gbnVsbDtcbiAgbGVmdCA9IGxlZnQuc3Vic3RyaW5nKDAsIGVuZCk7XG5cbiAgY29uc3Qgcm93cyA9IGdldFJvd3MobGVmdCk7XG5cbiAgaWYgKCFyb3dzLmxlbmd0aCkgcmV0dXJuIG51bGw7XG5cbiAgY29uc3QgaGVhZGVycyA9IGdldEhlYWRlcnMocm93c1swXSk7XG5cbiAgaWYgKCFoZWFkZXJzLmxlbmd0aCkgcmV0dXJuIG51bGw7XG5cbiAgY29uc3QgZGF0YSA9IHJvd3NcbiAgICAuc2xpY2UoMSlcbiAgICAubWFwKHRyYW5zZm9ybUNlbGxzKVxuICAgIC5tYXAoKHJvdykgPT4ge1xuICAgICAgcmV0dXJuIGhlYWRlcnMucmVkdWNlKChvYmosIGtleSwgaW5kZXgpID0+IHtcbiAgICAgICAgb2JqW2NhbWVsY2FzZShmaWxsVmFyaWFibGUoa2V5LCBjb250ZXh0LCBvcHRpb25zKSldID0gZmlsbFZhcmlhYmxlcyhcbiAgICAgICAgICByb3dbaW5kZXhdLFxuICAgICAgICAgIGNvbnRleHQsXG4gICAgICAgICAgb3B0aW9uc1xuICAgICAgICApO1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgfSwge30pO1xuICAgIH0pO1xuXG4gIHJldHVybiB7IGRhdGEsIGVuZDogc3RhcnQgKyBlbmQgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIChzb3VyY2UsIG9wdGlvbnMpIHtcbiAgY29uc3QgY2xlYW5lZFNvdXJjZSA9IGNsZWFuU291cmNlKHNvdXJjZSwgb3B0aW9ucyk7XG4gIGNvbnN0IGRhdGEgPSBleHRyYWN0RGF0YShjbGVhbmVkU291cmNlKTtcbiAgY29uc3QgdGFibGVzID0gW107XG4gIGxldCBsZWZ0ID0gZGF0YS5zb3VyY2U7XG4gIGxldCByZXN1bHQgPSBudWxsO1xuICB3aGlsZSAoKHJlc3VsdCA9IGdldE5leHRUYWJsZShsZWZ0LCBkYXRhLmNvbnRleHQsIG9wdGlvbnMpKSkge1xuICAgIGlmICghcmVzdWx0KSB7XG4gICAgICByZXR1cm4gdGFibGVzO1xuICAgIH1cbiAgICB0YWJsZXMucHVzaChyZXN1bHQuZGF0YSk7XG4gICAgbGVmdCA9IGxlZnQuc3Vic3RyaW5nKHJlc3VsdC5lbmQpO1xuICB9XG4gIHJldHVybiB0YWJsZXM7XG59XG4iLCAiY29uc3QgbGlua1BhdHRlcm4gPSAvXFxbXFxbKFteXFxdXSspXFxdXFxdL2c7XG5jb25zdCBrbVBhdHRlcm4gPSAve3tCU2ttXFx8KFtcXGR4XSssW1xcZHhdKylcXHwoW1xcZHhdKyxbXFxkeF0rKX19L2c7XG5cbmZ1bmN0aW9uIGNsZWFuKHRleHQpIHtcbiAgcmV0dXJuIHRleHRcbiAgICAuc3Vic3RyaW5nKDIsIHRleHQubGVuZ3RoIC0gMilcbiAgICAucmVwbGFjZShsaW5rUGF0dGVybiwgKG0sIHgpID0+IHguc3BsaXQoJ3wnKVswXSlcbiAgICAucmVwbGFjZSgvJycnPy9nLCAnJyk7XG59XG5cbi8vIFNvdXJjZTogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvV2lraXBlZGlhOlJvdXRlX2RpYWdyYW1fdGVtcGxhdGUje3tCUy1tYXB9fV9yb3dzX3dpdGhfaWNvbnNfYW5kX3RleHRcbmZ1bmN0aW9uIHBhcnNlUm93KHJhdykge1xuICBsZXQgY291bnRNYXRjaCA9IHJhd1swXS5tYXRjaCgvQlMoXFxkKS8pO1xuICBsZXQgdHlwZSA9IHJhd1swXS5zdWJzdHJpbmcoMik7XG4gIGxldCBjb3VudCA9IDE7XG4gIGxldCBpY29ucyA9IFtdO1xuICBsZXQgaW5kZXggPSAxO1xuICBpZiAoY291bnRNYXRjaCkge1xuICAgIGNvdW50ID0gY291bnRNYXRjaFsxXTtcbiAgICB0eXBlID0gcmF3WzBdLnN1YnN0cmluZygzKTtcbiAgfVxuICBmb3IgKDsgaW5kZXggPD0gY291bnQ7IGluZGV4KyspIHtcbiAgICBpY29ucy5wdXNoKHJhd1tpbmRleF0pO1xuICB9XG4gIGNvbnN0IG1hcmdpbiA9IHJhd1tpbmRleCsrXTtcbiAgY29uc3QgdGV4dDEgPSByYXdbaW5kZXgrK107XG4gIGNvbnN0IHRleHQyID0gcmF3W2luZGV4KytdO1xuICBjb25zdCBjb21tZW50ID0gcmF3W2luZGV4KytdO1xuICByZXR1cm4ge1xuICAgIHR5cGUsXG4gICAgbWFyZ2luLFxuICAgIHRleHQxLFxuICAgIHRleHQyLFxuICAgIGNvbW1lbnQsXG4gICAgaWNvbnMsXG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgY29uc3QgcmVzdWx0cyA9IHNvdXJjZS5yZXBsYWNlKGttUGF0dGVybiwgJyQxLyQyJykubWF0Y2goL3t7QlMoW159fV0rKX19L2cpO1xuICBpZiAocmVzdWx0cykge1xuICAgIHJldHVybiByZXN1bHRzXG4gICAgICAubWFwKChyZXN1bHQpID0+IGNsZWFuKHJlc3VsdCkuc3BsaXQoJ3wnKSlcbiAgICAgIC5tYXAocGFyc2VSb3cpXG4gICAgICAuZmlsdGVyKCh7IHR5cGUgfSkgPT4gdHlwZVswXSAhPT0gJy0nKTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cbiIsICJjb25zdCBoZWFkaW5nUGF0dGVybiA9IC9bXj1dPT1cXHM/KFtcXHdcXHNdKylcXHM/PT0vZ1xuY29uc3Qgc3ViaGVhZGluZ1BhdHRlcm4gPSAvPT09KFtcXHdcXHNdKyk9PT0vZ1xuY29uc3QgdGFibGVTdGFydFBhdHRlcm4gPSAve3tsaXN0LitzdGFydC4qfX0vZ2lcbmNvbnN0IHRhYmxlRW5kUGF0dGVybiA9IC97e2xpc3QuK2VuZC4qfX0vZ2lcbmNvbnN0IHJvd1BhdHRlcm4gPSAve3soLiopfX0vZ1xuY29uc3Qgcm93UGF0dGVyblNpbmdsZSA9IC97eyguKil9fS9cblxuZnVuY3Rpb24gZ2V0SGVhZGluZ3ModGV4dCkge1xuXHRsZXQgbWF0Y2g7XG5cdGNvbnN0IGhlYWRpbmdzID0gW107XG5cdHdoaWxlICgobWF0Y2ggPSBoZWFkaW5nUGF0dGVybi5leGVjKHRleHQpKSAhPT0gbnVsbCkge1xuXHRcdGhlYWRpbmdzLnB1c2goe1xuXHRcdFx0aGVhZGluZzogbWF0Y2hbMV0udHJpbSgpLFxuXHRcdFx0c3RhcnQ6IG1hdGNoLmluZGV4LFxuXHRcdFx0ZW5kOiBtYXRjaC5pbmRleCArIG1hdGNoWzBdLmxlbmd0aFxuXHRcdH0pXG5cdH1cblx0cmV0dXJuIGhlYWRpbmdzO1xufVxuXG5mdW5jdGlvbiBnZXRTdWJoZWFkaW5ncyh0ZXh0KSB7XG5cdGxldCBtYXRjaDtcblx0Y29uc3Qgc3ViaGVhZGluZ3MgPSBbXTtcblx0d2hpbGUgKChtYXRjaCA9IHN1YmhlYWRpbmdQYXR0ZXJuLmV4ZWModGV4dCkpICE9PSBudWxsKSB7XG5cdFx0c3ViaGVhZGluZ3MucHVzaCh7XG5cdFx0XHRoZWFkaW5nOiBtYXRjaFsxXS50cmltKCksXG5cdFx0XHRzdGFydDogbWF0Y2guaW5kZXgsXG5cdFx0XHRlbmQ6IG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoXG5cdFx0fSlcblx0fVxuXHRyZXR1cm4gc3ViaGVhZGluZ3M7XG59XG5cbmZ1bmN0aW9uIGdldE1hdGNoZXModGV4dCwgcGF0dGVybikge1xuXHRsZXQgbWF0Y2g7XG5cdGNvbnN0IG1hdGNoZXMgPSBbXTtcblx0d2hpbGUgKChtYXRjaCA9IHBhdHRlcm4uZXhlYyh0ZXh0KSkgIT09IG51bGwpIHtcblx0XHRtYXRjaGVzLnB1c2goe1xuXHRcdFx0dmFsdWU6IG1hdGNoWzFdICYmIG1hdGNoWzFdLnRyaW0oKSxcblx0XHRcdHN0YXJ0OiBtYXRjaC5pbmRleCxcblx0XHRcdGVuZDogbWF0Y2guaW5kZXggKyBtYXRjaFswXS5sZW5ndGhcblx0XHR9KVxuXHR9XG5cdHJldHVybiBtYXRjaGVzO1xufVxuXG5mdW5jdGlvbiBwYXJzZVRhYmxlRGF0YShyYXcpIHtcblx0Y29uc3QgbWF0Y2hlcyA9IHJhdy5tYXRjaChyb3dQYXR0ZXJuKTtcblx0aWYgKCFtYXRjaGVzKSByZXR1cm4gW107XG5cdHJldHVybiBtYXRjaGVzLm1hcChlbCA9PiB7XG5cdFx0Y29uc3QgWyx0ZXh0XSA9IGVsLm1hdGNoKHJvd1BhdHRlcm5TaW5nbGUpO1xuXHRcdGNvbnN0IGNvbHVtbnMgPSB0ZXh0LnRyaW0oKS5zcGxpdCgnfCcpO1xuXHRcdHJldHVybiBjb2x1bW5zLnNsaWNlKDEpO1xuXHR9KTtcbn1cblxuZnVuY3Rpb24gZ2V0VGFibGVzKHRleHQpIHtcblx0Y29uc3QgdGFibGVTdGFydHMgPSBnZXRNYXRjaGVzKHRleHQsIHRhYmxlU3RhcnRQYXR0ZXJuKTtcblx0Y29uc3QgdGFibGVFbmRzID0gZ2V0TWF0Y2hlcyh0ZXh0LCB0YWJsZUVuZFBhdHRlcm4pO1xuXHRyZXR1cm4gdGFibGVTdGFydHMubWFwKCh0YWJsZVN0YXJ0LCBpbmRleCkgPT4ge1xuXHRcdGNvbnN0IHRhYmxlRW5kID0gdGFibGVFbmRzW2luZGV4XTtcblx0XHRpZiAoIXRhYmxlRW5kKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ1tUYWJsZSBQYXJzaW5nXSBGYWlsZWQgdG8gcGFpciB0YWJsZScpO1xuXHRcdH1cblx0XHRjb25zdCByYXcgPSB0ZXh0XG5cdFx0XHRcdC5zdWJzdHJpbmcodGFibGVTdGFydC5lbmQsIHRhYmxlRW5kLnN0YXJ0KVxuXHRcdFx0XHQudHJpbSgpXG5cdFx0XHRcdC5yZXBsYWNlKC8nJycvZywgJycpO1xuXHRcdHJldHVybiB7XG5cdFx0XHRyb3dzOiBwYXJzZVRhYmxlRGF0YShyYXcpLFxuXHRcdFx0c3RhcnQ6IHRhYmxlU3RhcnQuc3RhcnQsXG5cdFx0XHRlbmQ6IHRhYmxlRW5kLmVuZFxuXHRcdH1cblx0fSk7XG59XG5cbmZ1bmN0aW9uIGxhc3QobGlzdCkge1xuXHRyZXR1cm4gbGlzdC5sZW5ndGggPyBsaXN0W2xpc3QubGVuZ3RoIC0gMV0gOiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIChzb3VyY2UpIHtcblx0Y29uc3QgaGVhZGluZ3MgPSBnZXRNYXRjaGVzKHNvdXJjZSwgaGVhZGluZ1BhdHRlcm4pO1xuXHRjb25zdCBzdWJoZWFkaW5ncyA9IGdldE1hdGNoZXMoc291cmNlLCBzdWJoZWFkaW5nUGF0dGVybik7XG5cdGNvbnN0IHRhYmxlcyA9IGdldFRhYmxlcyhzb3VyY2UpO1xuXG5cdHRhYmxlcy5mb3JFYWNoKHRhYmxlID0+IHtcblx0XHRjb25zdCBoZWFkaW5nc0JlZm9yZSA9IGhlYWRpbmdzLmZpbHRlcihoZWFkaW5nID0+IHtcblx0XHRcdHJldHVybiBoZWFkaW5nLmVuZCA8IHRhYmxlLnN0YXJ0O1xuXHRcdH0pLm1hcChlID0+IGUudmFsdWUpXG5cdFx0dGFibGUuaGVhZGluZyA9IGxhc3QoaGVhZGluZ3NCZWZvcmUpO1xuXHRcdGNvbnN0IHN1YmhlYWRpbmdzQmVmb3JlID0gc3ViaGVhZGluZ3MuZmlsdGVyKHN1YmhlYWRpbmcgPT4ge1xuXHRcdFx0cmV0dXJuIHN1YmhlYWRpbmcuZW5kIDwgdGFibGUuc3RhcnQ7XG5cdFx0fSkubWFwKGUgPT4gZS52YWx1ZSlcblx0XHR0YWJsZS5zdWJoZWFkaW5nID0gbGFzdChzdWJoZWFkaW5nc0JlZm9yZSk7XG5cdFx0ZGVsZXRlIHRhYmxlLnN0YXJ0O1xuXHRcdGRlbGV0ZSB0YWJsZS5lbmQ7XG5cdH0pO1xuXG5cdHJldHVybiB0YWJsZXM7XG59IiwgImltcG9ydCBjYW1lbENhc2UgZnJvbSAnY2FtZWxjYXNlJztcbmltcG9ydCBleHRyYWN0RGF0YSBmcm9tICcuL3V0aWwvZXh0cmFjdERhdGEnO1xuaW1wb3J0IGV4dHJhY3RQcm9wZXJ0aWVzIGZyb20gJy4vdXRpbC9leHRyYWN0UHJvcGVydGllcyc7XG5pbXBvcnQgdHJhbnNmb3JtUHJvcGVydGllcyBmcm9tICcuL3V0aWwvdHJhbnNmb3JtUHJvcGVydGllcyc7XG5pbXBvcnQgZXh0cmFjdEluZm9ib3hlcyBmcm9tICcuL3V0aWwvZXh0cmFjdEluZm9ib3hlcyc7XG5pbXBvcnQgY2xlYW5Tb3VyY2UgZnJvbSAnLi91dGlsL2NsZWFuU291cmNlJztcbmltcG9ydCBwYXJzZVRhYmxlcyBmcm9tICcuL3V0aWwvcGFyc2VUYWJsZXMnO1xuaW1wb3J0IHBhcnNlQnNUYWJsZXMgZnJvbSAnLi91dGlsL3BhcnNlQnNUYWJsZXMnO1xuaW1wb3J0IHBhcnNlTGlzdHMgZnJvbSAnLi91dGlsL3BhcnNlTGlzdHMnO1xuXG4vKipcbiAqIFBhcnNlIFdpa2kgSW5mb2JveCBUZXh0XG4gKiBAcGFyYW0ge3N0cmluZ30gc291cmNlIC0gSW5mb2JveCBzb3VyY2UgdGV4dFxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBQYXJzaW5nIG9wdGlvbnNcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuc2ltcGxpZnlEYXRhVmFsdWVzPXRydWVdIC0gT25seSB1c2UgcHJpbWFyeSBkYXRhIHZhbHVlc1xuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5yZW1vdmVTbWFsbD1mYWxzZV0gLSBSZW1vdmUgPHNtYWxsPi4uLjwvc21hbGw+IGNodW5rcyBvZiBzb3VyY2UgZGF0YVxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5yZW1vdmVSZWZlcmVuY2VzPXRydWVdIC0gUmVtb3ZlIDxyZWY+Li4uPC9yZWY+IGNodW5rcyBvZiBzb3VyY2UgZGF0YVxuICogQHJldHVybnMge09iamVjdH0gU3RydWN0dXJlZCBpbmZvcm1hdGlvbiBmcm9tIHNvdXJjZSB0ZXh0XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHBhcnNlSW5mb2JveChzb3VyY2UsIG9wdGlvbnMpIHtcbiAgY29uc3QgaW5mb2JveGVzID0gZXh0cmFjdEluZm9ib3hlcyhzb3VyY2UpLm1hcCgoaW5mb2JveCkgPT4ge1xuICAgIGNvbnN0IGNsZWFuZWRTb3VyY2UgPSBjbGVhblNvdXJjZShpbmZvYm94LCBvcHRpb25zKTtcbiAgICBjb25zdCBkYXRhID0gZXh0cmFjdERhdGEoY2xlYW5lZFNvdXJjZSk7XG4gICAgY29uc3QgcHJvcHMgPSBleHRyYWN0UHJvcGVydGllcyhkYXRhLCBvcHRpb25zKTtcbiAgICByZXR1cm4gdHJhbnNmb3JtUHJvcGVydGllcyhwcm9wcyk7XG4gIH0pO1xuXG4gIGlmICghaW5mb2JveGVzLmxlbmd0aCkgcmV0dXJuIHt9O1xuXG4gIGNvbnN0IHJlcyA9IHtcbiAgICAvLyBGaXJzdCBpbmZvYm94IHNob3VsZCBiZSB0aGUgbWFpbiBvbmVcbiAgICBnZW5lcmFsOiBpbmZvYm94ZXMuc2hpZnQoKSxcbiAgfTtcblxuICBpbmZvYm94ZXMuZm9yRWFjaCgobmV4dCkgPT4ge1xuICAgIGNvbnN0IHR5cGUgPSBuZXh0LnR5cGU7XG4gICAgaWYgKHR5cGUpIHtcbiAgICAgIHJlc1tjYW1lbENhc2UodHlwZSldID0gbmV4dDtcbiAgICB9IGVsc2Uge1xuICAgICAgT2JqZWN0LmFzc2lnbihyZXMsIHtcbiAgICAgICAgZ2VuZXJhbDogT2JqZWN0LmFzc2lnbih7fSwgcmVzLmdlbmVyYWwsIG5leHQpLFxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcblxuICByZXMudGFibGVzID0gcGFyc2VUYWJsZXMoc291cmNlKTtcbiAgcmVzLmJzVGFibGVzID0gcGFyc2VCc1RhYmxlcyhzb3VyY2UpO1xuICByZXMubGlzdHMgPSBwYXJzZUxpc3RzKHNvdXJjZSk7XG5cbiAgcmV0dXJuIHJlcztcbn1cbiIsICJjb25zdCBzbWFsbEdsb2JhbFBhdHRlcm4gPSAvXFx7XFx7c21hbGxcXHwoW15cXH1cXH1dKylcXH1cXH0vZztcbmNvbnN0IHNtYWxsUGF0dGVybiA9IC9zbWFsbFxcfChbXlxcfVxcfV0rKVxcfVxcfS87XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZ2xvYmFsUGF0dGVybjogc21hbGxHbG9iYWxQYXR0ZXJuLFxuICBwYXJzZVBhdHRlcm46IHNtYWxsUGF0dGVybixcbiAgcGFyc2U6IHJlc3VsdHMgPT4ge1xuICAgIGNvbnN0IFssIHZhbHVlXSA9IHJlc3VsdHM7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9LFxuICB2YXJpYWJsZTogJ1NNQUxMJyxcbiAgbmFtZTogJ3NtYWxscycsXG59O1xuIiwgImNvbnN0IGZsYWdHbG9iYWxQYXR0ZXJuID0gL1xce1xce2ZsYWdcXHwoW15cXH1cXH1dKylcXH1cXH0vZztcbmNvbnN0IGZsYWdQYXR0ZXJuID0gL2ZsYWdcXHwoW15cXH1cXH1dKylcXH1cXH0vO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGdsb2JhbFBhdHRlcm46IGZsYWdHbG9iYWxQYXR0ZXJuLFxuICBwYXJzZVBhdHRlcm46IGZsYWdQYXR0ZXJuLFxuICBwYXJzZTogcmVzdWx0cyA9PiB7XG4gICAgY29uc3QgWywgdmFsdWVdID0gcmVzdWx0cztcbiAgICByZXR1cm4gdmFsdWU7XG4gIH0sXG4gIHZhcmlhYmxlOiAnRkxBRycsXG4gIG5hbWU6ICdmbGFncycsXG59O1xuIiwgImNvbnN0IGNvb3Jkc0dsb2JhbFBhdHRlcm4gPSAvXFx7XFx7Y29vcmRcXHwoW15cXH1cXH1dKylcXH1cXH0vZztcbmNvbnN0IGNvb3Jkc1BhdHRlcm4gPSAvY29vcmRcXHwoW15cXH1cXH1dKylcXH1cXH0vO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGdsb2JhbFBhdHRlcm46IGNvb3Jkc0dsb2JhbFBhdHRlcm4sXG4gIHBhcnNlUGF0dGVybjogY29vcmRzUGF0dGVybixcbiAgcGFyc2U6IHJlc3VsdHMgPT4ge1xuICAgIGNvbnN0IFssIHZhbHVlXSA9IHJlc3VsdHM7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9LFxuICB2YXJpYWJsZTogJ0NPT1JEJyxcbiAgbmFtZTogJ2Nvb3JkcycsXG59O1xuIiwgImNvbnN0IGdsb2JhbFBhdHRlcm4gPSAvXFxbXFxbKFteXFxdXFx8XSspXFx8PyhbXlxcXV0rKT9cXF1cXF0vZztcbmNvbnN0IHBhdHRlcm4gPSAvXFxbXFxbKFteXFxdXFx8XSspXFx8PyhbXlxcXV0rKT9cXF1cXF0vO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGdsb2JhbFBhdHRlcm46IGdsb2JhbFBhdHRlcm4sXG4gIHBhcnNlUGF0dGVybjogcGF0dGVybixcbiAgcGFyc2U6IHJlc3VsdHMgPT4ge1xuICAgIGNvbnN0IFssIHZhbHVlLCB0eXBlXSA9IHJlc3VsdHM7XG4gICAgcmV0dXJuIHZhbHVlIHx8IHR5cGU7XG4gIH0sXG4gIHZhcmlhYmxlOiAnSU5TVEFOQ0UnLFxuICBuYW1lOiAnaW5zdGFuY2VzJyxcbn07XG4iLCAiaW1wb3J0IGdldFZhbHVlIGZyb20gJy4uL3V0aWwvZ2V0VmFsdWUnO1xuXG5jb25zdCBsaXN0SXRlbVByZWZpeFBhdHRlcm4gPSAvXlxcfFxccz8vO1xuY29uc3QgdW5idWxsZXRlZExpc3RHbG9iYWxQYXR0ZXJuID0gL1xce1xceyg/OnVuYnVsbGV0ZWQgbGlzdHx1Ymx8dWJ0fHVibGlzdHx1bmJ1bGxldClcXHM/XFx8KFteXFx9XFx9XSspXFx9XFx9L2dpO1xuY29uc3QgdW5idWxsZXRlZExpc3RJdGVtUGF0dGVybiA9IC9cXHxcXHMqKFtefH1dKykvZztcblxuZXhwb3J0IGRlZmF1bHQge1xuICBnbG9iYWxQYXR0ZXJuOiB1bmJ1bGxldGVkTGlzdEdsb2JhbFBhdHRlcm4sXG4gIHBhcnNlUGF0dGVybjogdW5idWxsZXRlZExpc3RJdGVtUGF0dGVybixcbiAgcGFyc2U6IChsaXN0SXRlbXMpID0+IHtcbiAgICBpZiAoIWxpc3RJdGVtcykge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICByZXR1cm4gbGlzdEl0ZW1zXG4gICAgICAubWFwKChpdGVtKSA9PiBpdGVtLnJlcGxhY2UobGlzdEl0ZW1QcmVmaXhQYXR0ZXJuLCAnJykudHJpbSgpKVxuICAgICAgLmZpbHRlcigodmFsdWUpID0+IHZhbHVlICYmIHZhbHVlLmxlbmd0aCk7XG4gIH0sXG4gIHZhcmlhYmxlOiAnVU5CVUxMRVRFRF9MSVNUJyxcbiAgbmFtZTogJ3VuYnVsbGV0ZWRMaXN0cycsXG59O1xuIiwgImNvbnN0IGxpc3RJdGVtUHJlZml4UGF0dGVybiA9IC9eXFwqXFxzKi87XG5jb25zdCBwbGFpbkxpc3RHbG9iYWxQYXR0ZXJuID0gL1xcbihcXCpcXHMqW14qfF0rKSsvZztcbmNvbnN0IHBsYWluTGlzdEl0ZW1QYXR0ZXJuID0gL1xcKlxccyooW14qfF0rKS9nO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGdsb2JhbFBhdHRlcm46IHBsYWluTGlzdEdsb2JhbFBhdHRlcm4sXG4gIHBhcnNlUGF0dGVybjogcGxhaW5MaXN0SXRlbVBhdHRlcm4sXG4gIHBhcnNlOiBsaXN0SXRlbXMgPT4ge1xuICAgIGlmICghbGlzdEl0ZW1zKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIHJldHVybiBsaXN0SXRlbXNcbiAgICAgIC5tYXAoaXRlbSA9PiBpdGVtLnJlcGxhY2UobGlzdEl0ZW1QcmVmaXhQYXR0ZXJuLCAnJykudHJpbSgpKVxuICAgICAgLmZpbHRlcih2YWx1ZSA9PiB2YWx1ZSAmJiB2YWx1ZS5sZW5ndGgpO1xuICB9LFxuICB2YXJpYWJsZTogJ1VOTUFSS0VEX0xJU1QnLFxuICBuYW1lOiAndW5tYXJrZWRMaXN0cycsXG59O1xuIiwgImltcG9ydCBnZXRWYWx1ZSBmcm9tICcuLi91dGlsL2dldFZhbHVlJztcblxuY29uc3QgbGlzdEl0ZW1QcmVmaXhQYXR0ZXJuID0gL15cXCpcXHM/LztcbmNvbnN0IHBsYWluTGlzdEdsb2JhbFBhdHRlcm4gPSAvXFx7XFx7Zj9wP1A/bD9hP2k/bj90P1xccz9saXN0XFxzP1xcfChbXlxcfVxcfV0rKVxcfVxcfS9nO1xuY29uc3QgcGxhaW5MaXN0SXRlbVBhdHRlcm4gPSAvXFwqXFxzKihbXip9XSspL2c7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZ2xvYmFsUGF0dGVybjogcGxhaW5MaXN0R2xvYmFsUGF0dGVybixcbiAgcGFyc2VQYXR0ZXJuOiBwbGFpbkxpc3RJdGVtUGF0dGVybixcbiAgcGFyc2U6IChsaXN0SXRlbXMpID0+IHtcbiAgICBpZiAoIWxpc3RJdGVtcykge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICByZXR1cm4gKFxuICAgICAgbGlzdEl0ZW1zXG4gICAgICAgIC5tYXAoKGl0ZW0pID0+IGl0ZW0ucmVwbGFjZShsaXN0SXRlbVByZWZpeFBhdHRlcm4sICcnKS50cmltKCkpXG4gICAgICAgIC8vIC5tYXAoZ2V0VmFsdWUpXG4gICAgICAgIC5maWx0ZXIoKHZhbHVlKSA9PiB2YWx1ZSAmJiB2YWx1ZS5sZW5ndGgpXG4gICAgKTtcbiAgfSxcbiAgdmFyaWFibGU6ICdQTEFJTl9MSVNUJyxcbiAgbmFtZTogJ3BsYWluTGlzdHMnLFxufTtcbiIsICJjb25zdCBtYXJyaWFnZUdsb2JhbFBhdHRlcm4gPSAvXFx7XFx7TWFycmlhZ2VcXHwoW15cXH1cXH1dKylcXH1cXH0vZ2k7XG5jb25zdCBtYXJyaWFnZVBhdHRlcm4gPSAvTWFycmlhZ2VcXHwoW158XSspXFx8KFtefF0qKSguKilcXH1cXH0vaTtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBnbG9iYWxQYXR0ZXJuOiBtYXJyaWFnZUdsb2JhbFBhdHRlcm4sXG4gIHBhcnNlUGF0dGVybjogbWFycmlhZ2VQYXR0ZXJuLFxuICBwYXJzZTogKHJlc3VsdHMpID0+IHtcbiAgICBjb25zdCBbLCB3aG8sIG1hcnJpZWRdID0gcmVzdWx0cztcbiAgICByZXR1cm4ge1xuICAgICAgd2hvLFxuICAgICAgbWFycmllZCxcbiAgICB9O1xuICB9LFxuICB2YXJpYWJsZTogJ01BUlJJQUdFJyxcbiAgbmFtZTogJ21hcnJpYWdlcycsXG59O1xuIiwgImNvbnN0IG5iYXlHbG9iYWxQYXR0ZXJuID0gL1xce1xce25iYXlcXHwoW15cXH1cXH1dKylcXH1cXH0vZ2k7XG5jb25zdCBuYmF5UGF0dGVybiA9IC9uYmF5XFx8KFtefF0rKVxcfCguKilcXH1cXH0vaTtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBnbG9iYWxQYXR0ZXJuOiBuYmF5R2xvYmFsUGF0dGVybixcbiAgcGFyc2VQYXR0ZXJuOiBuYmF5UGF0dGVybixcbiAgcGFyc2U6IHJlc3VsdHMgPT4ge1xuICAgIGNvbnN0IFssIHllYXIsIHR5cGVdID0gcmVzdWx0cztcbiAgICByZXR1cm4geWVhcjtcbiAgfSxcbiAgdmFyaWFibGU6ICduYmF5JyxcbiAgbmFtZTogJ25iYXknLFxufTtcbiIsICJjb25zdCBvdGhlckdsb2JhbFBhdHRlcm4gPSAvXFx7XFx7KFtefFxcbl0rKVxcfChbXnxcXG5dKylcXHw/KFteXFx9XFxuXSspP1xcfVxcfS9nO1xuY29uc3Qgb3RoZXJQYXR0ZXJuID0gL1xce1xceyhbXnxcXG5dKylcXHwoW158XFxuXSspXFx8PyhbXlxcfVxcbl0rKT9cXH1cXH0vO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGdsb2JhbFBhdHRlcm46IG90aGVyR2xvYmFsUGF0dGVybixcbiAgcGFyc2VQYXR0ZXJuOiBvdGhlclBhdHRlcm4sXG4gIHBhcnNlOiByZXN1bHRzID0+IHtcbiAgICBjb25zdCBbLCBsYWJlbCwgZGVzY3JpcHRvciwgZXh0cmFdID0gcmVzdWx0cztcbiAgICByZXR1cm4gbGFiZWw7XG4gIH0sXG4gIHZhcmlhYmxlOiAnT1RIRVInLFxuICBuYW1lOiAnb3RoZXJzJyxcbn07XG4iLCAiY29uc3QgaGxpc3RHbG9iYWxQYXR0ZXJuID0gL1xce1xce2hsaXN0XFx8KFteXFx9XFx9XSspXFx9XFx9L2dpO1xuY29uc3QgaGxpc3RQYXR0ZXJuID0gL2hsaXN0XFx8KC4qKVxcbj9cXH1cXH0vaTtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBnbG9iYWxQYXR0ZXJuOiBobGlzdEdsb2JhbFBhdHRlcm4sXG4gIHBhcnNlUGF0dGVybjogaGxpc3RQYXR0ZXJuLFxuICBwYXJzZTogKHJlc3VsdHMpID0+IHtcbiAgICBpZiAoIXJlc3VsdHMpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgbGV0IFssIGVsZW1lbnRzXSA9IHJlc3VsdHM7XG4gICAgcmV0dXJuIGVsZW1lbnRzLnNwbGl0KCd8Jyk7XG4gIH0sXG4gIHZhcmlhYmxlOiAnSExJU1QnLFxuICBuYW1lOiAnaGxpc3RzJyxcbn07XG4iLCAiY29uc3QgYmlydGhEYXRlR2xvYmFsUGF0dGVybiA9IC9cXHtcXHtiaXJ0aFxcc2RhdGUoW15cXH1cXH1dKylcXH1cXH0vaWc7XG5jb25zdCBiaXJ0aERhdGVQYXR0ZXJuID0gLyhcXGQrKVxcfChcXGQrKVxcfChcXGQrKS87XG5cbmNvbnN0IG1pbGxpc0luWWVhciA9IDEwMDAgKiA2MCAqIDYwICogMjQgKiAzNjU7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZ2xvYmFsUGF0dGVybjogYmlydGhEYXRlR2xvYmFsUGF0dGVybixcbiAgcGFyc2VQYXR0ZXJuOiBiaXJ0aERhdGVQYXR0ZXJuLFxuICBwYXJzZTogcmVzdWx0cyA9PiB7XG4gICAgY29uc3QgWywgeWVhciwgbW9udGgsIGRheV0gPSByZXN1bHRzO1xuICAgIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZSh5ZWFyLCBtb250aC0xLCBkYXkpO1xuICAgIGNvbnN0IGFnZSA9IE1hdGguZmxvb3IoKERhdGUubm93KCkgLSArZGF0ZSkgLyBtaWxsaXNJblllYXIpO1xuICAgIHJldHVybiB7XG4gICAgICBkYXRlLFxuICAgICAgYWdlLFxuICAgIH07XG4gIH0sXG4gIHZhcmlhYmxlOiAnQklSVEhfREFURScsXG4gIG5hbWU6ICdiaXJ0aERhdGVzJyxcbn07XG4iLCAiaW1wb3J0IHsgRE9fTk9UX1JFUExBQ0UgfSBmcm9tICcuL2RhdGFUeXBlJ1xuY29uc3QgbGFiZWxlZERhdGVHbG9iYWxQYXR0ZXJuID0gL1xce1xceyhbXlxcblxcfVxcfV0rKVxcfVxcfS9nO1xuY29uc3QgbGFiZWxlZERhdGVQYXR0ZXJuID0gLyguKikvO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGdsb2JhbFBhdHRlcm46IGxhYmVsZWREYXRlR2xvYmFsUGF0dGVybixcbiAgcGFyc2VQYXR0ZXJuOiBsYWJlbGVkRGF0ZVBhdHRlcm4sXG4gIHBhcnNlOiByZXN1bHRzID0+IHtcbiAgICBjb25zdCBmaXJzdFBpcGVJbmRleCA9IHJlc3VsdHNbMF0uaW5kZXhPZignfCcpO1xuICAgIGlmIChmaXJzdFBpcGVJbmRleCA+IC0xKSB7XG4gICAgICBjb25zdCBzdHIgPSByZXN1bHRzWzBdXG4gICAgICAgIC5zdWJzdHJpbmcoZmlyc3RQaXBlSW5kZXggKyAxKVxuICAgICAgICAuc2xpY2UoMCwgLTIpXG4gICAgICBsZXQgcG90ZW50aWFsRGF0ZSA9IG5ldyBEYXRlKHN0ciArICcgR01UJyk7XG4gICAgICBpZiAoIWlzTmFOKHBvdGVudGlhbERhdGUuZ2V0VGltZSgpKSkge1xuICAgICAgICByZXR1cm4geyBkYXRlOiBwb3RlbnRpYWxEYXRlIH07XG4gICAgICB9XG4gICAgICBwb3RlbnRpYWxEYXRlID0gbmV3IERhdGUoc3RyLnNwbGl0KCd8Jykuam9pbignLScpICsgJyBHTVQnKVxuICAgICAgaWYgKCFpc05hTihwb3RlbnRpYWxEYXRlLmdldFRpbWUoKSkpIHtcbiAgICAgICAgcmV0dXJuIHsgZGF0ZTogcG90ZW50aWFsRGF0ZSB9O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gRE9fTk9UX1JFUExBQ0U7XG4gIH0sXG4gIHZhcmlhYmxlOiAnTEFCRUxFRF9EQVRFJyxcbiAgbmFtZTogJ2xhYmVsZWREYXRlcycsXG59O1xuIiwgImNvbnN0IGRlYXRoRGF0ZUdsb2JhbFBhdHRlcm4gPSAvXFx7XFx7ZGVhdGhcXHNkYXRlXFxzYW5kXFxzYWdlKFteXFx9XFx9XSspXFx9XFx9L2lnO1xuY29uc3QgZGVhdGhEYXRlUGF0dGVybiA9IC8oXFxkKylcXHwoXFxkKylcXHwoXFxkKylcXHwoXFxkKylcXHw/KFxcZCspP1xcfD8oXFxkKyk/LztcblxuY29uc3QgbWlsbGlzSW5ZZWFyID0gMTAwMCAqIDYwICogNjAgKiAyNCAqIDM2NTtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBnbG9iYWxQYXR0ZXJuOiBkZWF0aERhdGVHbG9iYWxQYXR0ZXJuLFxuICBwYXJzZVBhdHRlcm46IGRlYXRoRGF0ZVBhdHRlcm4sXG4gIHBhcnNlOiByZXN1bHRzID0+IHtcbiAgICAvLyBTb21lIGFydGljbGVzIGRvIG5vdCBsaXN0IGJpcnRoIG1vbnRoL2RheSBzbyB3ZSBqdXN0IGVzdGltYXRlIHRoZSBiaXJ0aCBkYXRlXG4gICAgY29uc3QgWywgZGVhdGhZZWFyLCBkZWF0aE1vbnRoLCBkZWF0aERheSwgYmlydGhZZWFyLCBiaXJ0aE1vbnRoID0gMCwgYmlydGhEYXkgPSAwXSA9IHJlc3VsdHM7XG4gICAgY29uc3QgZGVhdGhEYXRlID0gbmV3IERhdGUoZGVhdGhZZWFyLCBkZWF0aE1vbnRoLTEsIGRlYXRoRGF5KTtcbiAgICBjb25zdCBiaXJ0aERhdGUgPSBuZXcgRGF0ZShiaXJ0aFllYXIsIGJpcnRoTW9udGgtMSwgYmlydGhEYXkpO1xuICAgIGNvbnN0IGFnZSA9IE1hdGguZmxvb3IoKE51bWJlcihkZWF0aERhdGUpIC0gTnVtYmVyKGJpcnRoRGF0ZSkpIC8gbWlsbGlzSW5ZZWFyKTtcbiAgICByZXR1cm4ge1xuICAgICAgZGF0ZTogZGVhdGhEYXRlLFxuICAgICAgYWdlLFxuICAgIH07XG4gIH0sXG4gIHZhcmlhYmxlOiAnREVBVEhfREFURScsXG4gIG5hbWU6ICdkZWF0aERhdGVzJyxcbn07XG4iLCAiY29uc3QgVVJMR2xvYmFsUGF0dGVybiA9IC9cXHtcXHtVUkxcXHwoW15cXH1cXH1dKylcXH1cXH0vZztcbmNvbnN0IFVSTFBhdHRlcm4gPSAvVVJMXFx8KFteXFx9XFx9XSspXFx9XFx9LztcblxuZXhwb3J0IGRlZmF1bHQge1xuICBnbG9iYWxQYXR0ZXJuOiBVUkxHbG9iYWxQYXR0ZXJuLFxuICBwYXJzZVBhdHRlcm46IFVSTFBhdHRlcm4sXG4gIHBhcnNlOiByZXN1bHRzID0+IHtcbiAgICBjb25zdCBbLCB2YWx1ZV0gPSByZXN1bHRzO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfSxcbiAgdmFyaWFibGU6ICdVUkwnLFxuICBuYW1lOiAndXJscycsXG59O1xuIiwgImNvbnN0IHdlYnNpdGVHbG9iYWxQYXR0ZXJuID0gL1xcWyhodHRwcz8pOlxcL1xcLygoPzp3d3dcXC4pP1stYS16QS1aMC05QDolLl9cXCt+Iz1dezIsMjU2fVxcLlthLXpdezIsNn0pXFxiKFstYS16QS1aMC05QDolX1xcKy5+Iz8mLy89XSopXFxzKyhbXFx3XFxzXSspXFxdL2c7XG5jb25zdCB3ZWJzaXRlUGF0dGVybiA9IC9cXFsoaHR0cHM/KTpcXC9cXC8oKD86d3d3XFwuKT9bLWEtekEtWjAtOUA6JS5fXFwrfiM9XXsyLDI1Nn1cXC5bYS16XXsyLDZ9KVxcYihbLWEtekEtWjAtOUA6JV9cXCsufiM/Ji8vPV0qKVxccysoW1xcd1xcc10rKVxcXS87XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZ2xvYmFsUGF0dGVybjogd2Vic2l0ZUdsb2JhbFBhdHRlcm4sXG4gIHBhcnNlUGF0dGVybjogd2Vic2l0ZVBhdHRlcm4sXG4gIHBhcnNlOiByZXN1bHRzID0+IHtcbiAgICBjb25zdCBbLCBwcm90b2NvbCwgaG9zdG5hbWUsIHBhdGgsIHRpdGxlXSA9IHJlc3VsdHM7XG4gICAgcmV0dXJuIHtcbiAgICAgIHByb3RvY29sLFxuICAgICAgaG9zdG5hbWUsXG4gICAgICBwYXRoLFxuICAgICAgdGl0bGUsXG4gICAgICB1cmw6IGAke3Byb3RvY29sfTovLyR7aG9zdG5hbWV9JHtwYXRofWBcbiAgICB9O1xuICB9LFxuICB2YXJpYWJsZTogJ1dFQlNJVEUnLFxuICBuYW1lOiAnd2Vic2l0ZXMnLFxufTtcbiIsICJjb25zdCBnbG9iYWxQYXR0ZXJuID0gL1xce1xce0V4dHJhW159fV0rXFx9XFx9L2dpO1xuY29uc3QgcGFyc2VQYXR0ZXJuID0gL1xcfFxccz8oXFx3KylcXHMrPVxccysoLispL2c7XG5jb25zdCBwcm9wUGF0dGVybiA9IC9cXHxcXHM/KFxcdyspXFxzKz1cXHMrKC4rKS87XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZ2xvYmFsUGF0dGVybixcbiAgcGFyc2VQYXR0ZXJuLFxuICBwYXJzZTogKG9iaikgPT4ge1xuICAgIGNvbnN0IGUgPSBvYmoucmVkdWNlKChtZW1vLCBpKSA9PiB7XG4gICAgICBjb25zdCBbLCBrZXksIHZhbHVlXSA9IGkubWF0Y2gocHJvcFBhdHRlcm4pO1xuICAgICAgbWVtb1trZXldID0gdmFsdWU7XG4gICAgICByZXR1cm4gbWVtbztcbiAgICB9LCB7fSk7XG4gICAgcmV0dXJuIGU7XG4gIH0sXG4gIHZhcmlhYmxlOiAnRVhUUkEnLFxuICBuYW1lOiAnZXh0cmEnLFxufTtcbiIsICJjb25zdCBjb252ZXJ0R2xvYmFsUGF0dGVybiA9IC9cXHtcXHtjb252ZXJ0XFx8KFtcXGRcXC5dKylcXHwoXFx3KykvZztcbmNvbnN0IGNvbnZlcnRQYXR0ZXJuID0gL1xce1xce2NvbnZlcnRcXHwoW1xcZFxcLl0rKVxcfChcXHcrKS87XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZ2xvYmFsUGF0dGVybjogY29udmVydEdsb2JhbFBhdHRlcm4sXG4gIHBhcnNlUGF0dGVybjogY29udmVydFBhdHRlcm4sXG4gIHBhcnNlOiByZXN1bHRzID0+IHtcbiAgICBjb25zdCBbLCBudW0sIHVuaXRdID0gcmVzdWx0cztcbiAgICByZXR1cm4gYCR7bnVtfSAke3VuaXR9YDtcbiAgfSxcbiAgdmFyaWFibGU6ICdDT05WRVJUJyxcbiAgbmFtZTogJ2NvbnZlcnRzJyxcbn07XG4iLCAiY29uc3QgZmlsbURhdGVzUGF0dGVybiA9IC9cXHtcXHtmaWxtXFxzZGF0ZShbXlxcfVxcfV0rKVxcfVxcfS9naTtcbmNvbnN0IGZpbG1EYXRlUGF0dGVybkdsb2JhbCA9IC8oXFxkKylcXHw/KFxcZCspXFx8PyhcXGQrKVxcfD8oW15cXHxcXH1dKilcXHw/KHJlZlxcZCs9KFteXFx8XFx9XSopKT8vZztcbmNvbnN0IGZpbG1EYXRlUGF0dGVybiA9IC8oXFxkKylcXHw/KFxcZCspXFx8PyhcXGQrKVxcfD8oW15cXHxcXH1dKilcXHw/KHJlZlxcZCs9KFteXFx8XFx9XSopKT8vO1xuXG4vLyBGb3JtYXQgZG9jdW1lbnRlZCBoZXJlOlxuLy8gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvVGVtcGxhdGU6RmlsbV9kYXRlL2RvY1xuLy8gVGFyZ2V0OlxuLy8gWWVhciByZXF1aXJlZCwgbW9udGggZGF5IGV0Yy4gb3B0aW9uYWwuLi5cbi8vIHt7RmlsbSBkYXRlfHllYXIxfG1vbnRoMXxkYXkxfGxvY2F0aW9uMXxyZWYxPTxyZWYgbmFtZT1cInh4eHh4XCIgLz58eWVhcjJ8bW9udGgyfGRheTJ8bG9jYXRpb24yfHJlZjI9PHJlZiBuYW1lPVwieXl5eVwiIC8+fX1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBnbG9iYWxQYXR0ZXJuOiBmaWxtRGF0ZXNQYXR0ZXJuLFxuICBwYXJzZVBhdHRlcm46IGZpbG1EYXRlUGF0dGVybkdsb2JhbCxcbiAgcGFyc2U6IChyZXN1bHRzKSA9PiB7XG4gICAgcmV0dXJuIHJlc3VsdHMubWFwKChyZXN1bHQpID0+IHtcbiAgICAgIGNvbnN0IFtfLCB5ZWFyLCBtb250aCwgZGF5LCBsb2NhdGlvbiwgX3JlZiwgcmVmXSA9IHJlc3VsdC5tYXRjaChcbiAgICAgICAgZmlsbURhdGVQYXR0ZXJuXG4gICAgICApO1xuICAgICAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKHllYXIsIG1vbnRoICYmIG1vbnRoIC0gMSwgZGF5KTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRhdGUsXG4gICAgICAgIGxvY2F0aW9uLFxuICAgICAgICByZWYsXG4gICAgICB9O1xuICAgIH0pO1xuICB9LFxuICB2YXJpYWJsZTogJ0ZJTE1fREFURVMnLFxuICBuYW1lOiAnZmlsbURhdGVzJyxcbn07XG4iLCAiY29uc3Qgb3RoZXJHbG9iYWxQYXR0ZXJuID0gLzxyZWYoXFxzXFx3Kz1bXj5dKyk/PiguKik8XFwvcmVmPi9nO1xuY29uc3Qgb3RoZXJQYXR0ZXJuID0gLzxyZWYoXFxzXFx3Kz1bXj5dKyk/PiguKik8XFwvcmVmPi87XG5cbmNvbnN0IGF0dHJpYnV0ZUdsb2JhbFBhdHRlcm4gPSAvKFxcdyspPShbXCJcXHddKykvZztcbmNvbnN0IGF0dHJpYnV0ZVBhdHRlcm4gPSAvKFxcdyspPShbXCJcXHddKykvO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGdsb2JhbFBhdHRlcm46IG90aGVyR2xvYmFsUGF0dGVybixcbiAgcGFyc2VQYXR0ZXJuOiBvdGhlclBhdHRlcm4sXG4gIHBhcnNlOiAocmVzdWx0cykgPT4ge1xuICAgIGNvbnN0IFtfLCBhdHRyaWJ1dGVzU291cmNlLCBjb250ZW50c10gPSByZXN1bHRzO1xuICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSAoXG4gICAgICAoYXR0cmlidXRlc1NvdXJjZSB8fCAnJykubWF0Y2goYXR0cmlidXRlR2xvYmFsUGF0dGVybikgfHwgW11cbiAgICApLnJlZHVjZSgobWVtbywgYXR0cikgPT4ge1xuICAgICAgaWYgKGF0dHIpIHtcbiAgICAgICAgY29uc3QgW18sIGtleSwgdmFsdWVdID0gYXR0ci5tYXRjaChhdHRyaWJ1dGVQYXR0ZXJuKTtcbiAgICAgICAgbWVtb1trZXldID0gdmFsdWUucmVwbGFjZSgvXCIvZywgJycpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1lbW87XG4gICAgfSwge30pO1xuICAgIHJldHVybiB7IGF0dHJpYnV0ZXMsIGNvbnRlbnRzIH07XG4gIH0sXG4gIHZhcmlhYmxlOiAnUkVGJyxcbiAgbmFtZTogJ3JlZnMnLFxufTtcbiIsICJjb25zdCBvdGhlckdsb2JhbFBhdHRlcm4gPSAvPHJlZihcXHNcXHcrPVtePl0rKT9cXC8+L2c7XG5jb25zdCBvdGhlclBhdHRlcm4gPSAvPHJlZihcXHNcXHcrPVtePl0rKT9cXC8+LztcblxuY29uc3QgYXR0cmlidXRlR2xvYmFsUGF0dGVybiA9IC8oXFx3Kyk9KFtcIlxcd10rKS9nO1xuY29uc3QgYXR0cmlidXRlUGF0dGVybiA9IC8oXFx3Kyk9KFtcIlxcd10rKS87XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZ2xvYmFsUGF0dGVybjogb3RoZXJHbG9iYWxQYXR0ZXJuLFxuICBwYXJzZVBhdHRlcm46IG90aGVyUGF0dGVybixcbiAgcGFyc2U6IChyZXN1bHRzKSA9PiB7XG4gICAgY29uc3QgYXR0cmlidXRlcyA9IHJlc3VsdHNbMV1cbiAgICAgIC5tYXRjaChhdHRyaWJ1dGVHbG9iYWxQYXR0ZXJuKVxuICAgICAgLnJlZHVjZSgobWVtbywgYXR0cikgPT4ge1xuICAgICAgICBjb25zdCBbXywga2V5LCB2YWx1ZV0gPSBhdHRyLm1hdGNoKGF0dHJpYnV0ZVBhdHRlcm4pO1xuICAgICAgICBtZW1vW2tleV0gPSB2YWx1ZS5yZXBsYWNlKC9cIi9nLCAnJyk7XG4gICAgICAgIHJldHVybiBtZW1vO1xuICAgICAgfSwge30pO1xuICAgIHJldHVybiB7IGF0dHJpYnV0ZXMgfTtcbiAgfSxcbiAgdmFyaWFibGU6ICdSRUYnLFxuICBuYW1lOiAncmVmcycsXG59O1xuIiwgImNvbnN0IGdsb2JhbFBhdHRlcm4gPSAvXFx7XFx7Zm9ybWF0bnVtOlxcZCtcXH1cXH0vZ2k7XG5jb25zdCBwYXJzZVBhdHRlcm4gPSAvXFx7XFx7Zm9ybWF0bnVtOihcXGQrKVxcfVxcfS87XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZ2xvYmFsUGF0dGVybixcbiAgcGFyc2VQYXR0ZXJuLFxuICBwYXJzZTogKHJlc3VsdHMpID0+IHtcbiAgICBjb25zdCBbLCB2YWx1ZV0gPSByZXN1bHRzO1xuICAgIHJldHVybiBwYXJzZUZsb2F0KHZhbHVlKTtcbiAgfSxcbiAgdmFyaWFibGU6ICdGT1JNQVRfTlVNJyxcbiAgbmFtZTogJ2Zvcm1hdE51bScsXG59O1xuIiwgImltcG9ydCBzbWFsbCBmcm9tICcuL3NtYWxsJztcbmltcG9ydCBmbGFnIGZyb20gJy4vZmxhZyc7XG5pbXBvcnQgY29vcmRzIGZyb20gJy4vY29vcmRzJztcbmltcG9ydCBpbnN0YW5jZXMgZnJvbSAnLi9pbnN0YW5jZXMnO1xuaW1wb3J0IHVuYnVsbGV0ZWRMaXN0cyBmcm9tICcuL3VuYnVsbGV0ZWRMaXN0cyc7XG5pbXBvcnQgdW5tYXJrZWRMaXN0cyBmcm9tICcuL3VubWFya2VkTGlzdHMnO1xuaW1wb3J0IHBsYWluTGlzdHMgZnJvbSAnLi9wbGFpbkxpc3RzJztcbmltcG9ydCBtYXJyaWFnZXMgZnJvbSAnLi9tYXJyaWFnZXMnO1xuaW1wb3J0IG5iYXkgZnJvbSAnLi9uYmF5JztcbmltcG9ydCBvdGhlciBmcm9tICcuL290aGVyJztcbmltcG9ydCBobGlzdCBmcm9tICcuL2hsaXN0JztcbmltcG9ydCBiaXJ0aERhdGVzIGZyb20gJy4vYmlydGhEYXRlcyc7XG5pbXBvcnQgbGFiZWxlZERhdGVzIGZyb20gJy4vbGFiZWxlZERhdGVzJztcbmltcG9ydCBkZWF0aERhdGVzIGZyb20gJy4vZGVhdGhEYXRlcyc7XG5pbXBvcnQgdXJsIGZyb20gJy4vdXJsJztcbmltcG9ydCB3ZWJzaXRlIGZyb20gJy4vd2Vic2l0ZSc7XG5pbXBvcnQgZXh0cmEgZnJvbSAnLi9leHRyYSc7XG5pbXBvcnQgY29udmVydCBmcm9tICcuL2NvbnZlcnQnO1xuaW1wb3J0IGNyZWF0ZURhdGFUeXBlSGFuZGxlciBmcm9tICcuL2RhdGFUeXBlJztcbmltcG9ydCBmaWxtRGF0ZXMgZnJvbSAnLi9maWxtRGF0ZXMnO1xuaW1wb3J0IHJlZjEgZnJvbSAnLi9yZWYxJztcbmltcG9ydCByZWYyIGZyb20gJy4vcmVmMic7XG5pbXBvcnQgZm9ybWF0TnVtIGZyb20gJy4vZm9ybWF0TnVtJztcblxuY29uc3QgZGF0YVR5cGVzID0gW1xuICAvLyBPcmRlciBpcyB2ZXJ5IGltcG9ydGFudCBoZXJlLi4uXG4gIGluc3RhbmNlcyxcbiAgcmVmMSxcbiAgcmVmMixcbiAgc21hbGwsXG4gIGZvcm1hdE51bSxcbiAgZmxhZyxcbiAgY29vcmRzLFxuICBtYXJyaWFnZXMsXG4gIGJpcnRoRGF0ZXMsXG4gIGxhYmVsZWREYXRlcyxcbiAgZGVhdGhEYXRlcyxcbiAgdW5idWxsZXRlZExpc3RzLFxuICB3ZWJzaXRlLFxuICBobGlzdCxcbiAgdXJsLFxuICBjb252ZXJ0LFxuICBuYmF5LFxuICBmaWxtRGF0ZXMsXG4gIC8vIG90aGVyIG5lZWRzIHRvIGFsd2F5cyBiZSBhZnRlciBzcGVjaWZpYyBkYXRhIGR5cGVzXG4gIG90aGVyLFxuICBleHRyYSxcbiAgLy8gTGlzdHMgc2hvdWxkIGJlIGxhc3RcbiAgcGxhaW5MaXN0cyxcbiAgdW5tYXJrZWRMaXN0cyxcbl07XG5cbmV4cG9ydCBkZWZhdWx0IGRhdGFUeXBlcy5tYXAoKHR5cGUpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBoYW5kbGVyOiBjcmVhdGVEYXRhVHlwZUhhbmRsZXIodHlwZSksXG4gICAgbmFtZTogdHlwZS5uYW1lLFxuICAgIHBhdHRlcm46IG5ldyBSZWdFeHAoYFxcXFwkJHt0eXBlLnZhcmlhYmxlfV8oXFxcXGQrKWApLFxuICB9O1xufSk7XG4iLCAiXG4vKipcbiAqIEdpdmVuIGEgc3RyaW5nIG1lYW50IHRvIGNvbnRhaW4gYSBudW1iZXIsIHRyaWVzIHRvIGZpbmQgb3V0XG4gKiB0aGUgbnVtYmVyIGNvbnNpZGVyaW5nIGNvbW1hIG9yIHBvaW50IHNlcGFyYXRvcnNcbiAqIEBwYXJhbSAge1N0cmluZ30gbnVtYmVyXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IHdpdGggdGhlIHBhcnNlZCBudW1iZXIsIGZhbHNlLCBpZiB0aGUgcGFyc2luZyBpc1xuICogICAgICAgICAgICAgICAgICBub3QgcG9zc2libGVcbiAqL1xuZXhwb3J0IGRlZmF1bHQgKG51bWJlcikgPT4ge1xuXG4gIGlmICh0eXBlb2YgbnVtYmVyICE9PSAnc3RyaW5nJykgcmV0dXJuIGZhbHNlXG5cbiAgbnVtYmVyID0gbnVtYmVyLnRyaW0oKS5yZXBsYWNlKC8gL2csICcnKVxuXG4gIC8vIEZpbmQgb3V0IGlmIGNvbW1hcyBhcmUgdXNlZCBhcyB0aG91c2FuZCBvciBkZWNpbWFsIHNlcGFyYXRvcnMuXG4gIC8vIElmIHRoZSBzdHJpbmcgaGFzIGJvdGgsIGFuZCBjb21tYXMgYXJlIGZpcnN0LCB0aGVuIGNvbW1hcyBhcmVcbiAgLy8gdGhvdXNhbmQgc2VwYXJhdG9ycyAoZW5nbGlzaCBzdHlsZSlcbiAgaWYgKG51bWJlci5tYXRjaCgvLC8pICYmIG51bWJlci5tYXRjaCgvXFwuLykpIHtcbiAgICBpZiAobnVtYmVyLmluZGV4T2YoJywnKSA8IG51bWJlci5pbmRleE9mKCcuJykpIHtcbiAgICAgIHJldHVybiBwYXJzZUVuZ2xpc2gobnVtYmVyKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcGFyc2VTcGFuaXNoKG51bWJlcilcbiAgICB9XG4gIH1cblxuICBpZiAobnVtYmVyLm1hdGNoKC8sLykgJiYgIW51bWJlci5tYXRjaCgvXFwuLykpIHtcbiAgICBpZiAobnVtYmVyLm1hdGNoKC8sL2cpLmxlbmd0aCA+IDEpIHtcblxuICAgICAgLy8gSWYgdGhlcmUgaXMgbW9yZSB0aGFuIG9uZSwgdGhlbiBpdCdzIGEgdGhvdXNhbmQgc2VwYXJhdG9yXG4gICAgICByZXR1cm4gcGFyc2VFbmdsaXNoKG51bWJlcilcbiAgICB9IGVsc2Uge1xuXG4gICAgICAvLyBJZiBpdCdzIGZvbGx3ZWQgYnkgMyBkaWdpdHMsIGl0J3MgcHJvYWJseSBhIHRob3VzYW5kIHNlcGFyYXRvclxuICAgICAgaWYgKG51bWJlci5tYXRjaCgvLFswLTldezN9KCR8XlswLTldKS8pKSB7XG4gICAgICAgIHJldHVybiBwYXJzZUVuZ2xpc2gobnVtYmVyKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlU3BhbmlzaChudW1iZXIpXG4gICAgICB9XG5cbiAgICB9XG4gIH1cblxuICBpZiAoIW51bWJlci5tYXRjaCgvLC8pICYmIG51bWJlci5tYXRjaCgvXFwuLykpIHtcbiAgICBpZiAobnVtYmVyLm1hdGNoKC9cXC4vZykubGVuZ3RoID4gMSkge1xuXG4gICAgICAvLyBJZiB0aGVyZSBpcyBtb3JlIHRoYW4gb25lLCB0aGVuIGl0J3MgYSB0aG91c2FuZCBzZXBhcmF0b3JcbiAgICAgIHJldHVybiBwYXJzZVNwYW5pc2gobnVtYmVyKVxuICAgIH0gZWxzZSB7XG5cbiAgICAgIC8vIElmIGl0J3MgZm9sbHdlZCBieSAzIGRpZ2l0cywgaXQncyBwcm9hYmx5IGEgdGhvdXNhbmQgc2VwYXJhdG9yXG4gICAgICBpZiAobnVtYmVyLm1hdGNoKC9cXC5bMC05XXszfSgkfF5bMC05XSkvKSkge1xuICAgICAgICByZXR1cm4gcGFyc2VTcGFuaXNoKG51bWJlcilcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBwYXJzZUVuZ2xpc2gobnVtYmVyKVxuICAgICAgfVxuXG4gICAgfVxuICB9XG5cbiAgLy8gSWYgaXQgbG9va3MgdGhlIHNhbWUgYXMgbnVtYmVyIG9yIHN0cmluZywganVzdCBjYXN0IGl0XG4gIGlmICgoK251bWJlcikudG9TdHJpbmcoKSA9PT0gbnVtYmVyKSByZXR1cm4gK251bWJlclxuXG4gIHJldHVybiBmYWxzZVxufVxuXG5jb25zdCBwYXJzZUVuZ2xpc2ggPSAoc3RyKSA9PiB7XG4gIHJldHVybiArc3RyLnJlcGxhY2UoLywvZywgJycpXG59XG5cbmNvbnN0IHBhcnNlU3BhbmlzaCA9IChzdHIpID0+IHtcbiAgcmV0dXJuICtzdHIucmVwbGFjZSgvXFwuL2csICcnKS5yZXBsYWNlKC8sL2csICcuJylcbn1cblxuIiwgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jaXRhdGlvbiA9IGV4cG9ydHMucGRmID0gZXhwb3J0cy5tb2JpbGVIdG1sID0gZXhwb3J0cy5tZWRpYSA9IGV4cG9ydHMucmVsYXRlZCA9IGV4cG9ydHMuc3VtbWFyeSA9IGV4cG9ydHMucmF3SW5mbyA9IGV4cG9ydHMudGFibGVzID0gZXhwb3J0cy5pbmZvYm94ID0gZXhwb3J0cy5sYW5nTGlua3MgPSBleHBvcnRzLmNvb3JkaW5hdGVzID0gZXhwb3J0cy5yZWZlcmVuY2VzID0gZXhwb3J0cy5saW5rcyA9IGV4cG9ydHMuY2F0ZWdvcmllcyA9IGV4cG9ydHMuY29udGVudCA9IGV4cG9ydHMuaHRtbCA9IGV4cG9ydHMuaW50cm8gPSBleHBvcnRzLmltYWdlcyA9IGV4cG9ydHMuUGFnZSA9IHZvaWQgMDtcbmNvbnN0IGVycm9yc18xID0gcmVxdWlyZShcIi4vZXJyb3JzXCIpO1xuY29uc3QgcmVxdWVzdF8xID0gcmVxdWlyZShcIi4vcmVxdWVzdFwiKTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi91dGlsc1wiKTtcbmNvbnN0IG1lc3NhZ2VzXzEgPSByZXF1aXJlKFwiLi9tZXNzYWdlc1wiKTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdmFyLXJlcXVpcmVzXG5jb25zdCBpbmZvYm94UGFyc2VyID0gcmVxdWlyZSgnaW5mb2JveC1wYXJzZXInKTtcbmNsYXNzIFBhZ2Uge1xuICAgIGNvbnN0cnVjdG9yKHJlc3BvbnNlKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXR1cm5zIHRoZSBpbnRybyBwcmVzZW50IGluIGEgd2lraSBwYWdlXG4gICAgICAgICAqXG4gICAgICAgICAqIEByZW1hcmtzXG4gICAgICAgICAqIFRoaXMgbWV0aG9kIGlzIHBhcnQgb2YgdGhlIHtAbGluayBQYWdlIHwgUGFnZSB9LlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0gdGl0bGUgLSBUaGUgdGl0bGUgb3IgcGFnZSBJZCBvZiB0aGUgcGFnZVxuICAgICAgICAgKiBAcGFyYW0gcmVkaXJlY3QgLSBXaGV0aGVyIHRvIHJlZGlyZWN0IGluIGNhc2Ugb2YgMzAyXG4gICAgICAgICAqIEByZXR1cm5zIFRoZSBpbnRybyBzdHJpbmdcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuaW50cm8gPSBhc3luYyAocGFnZU9wdGlvbnMpID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9pbnRybykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0ICgwLCBleHBvcnRzLmludHJvKSh0aGlzLnBhZ2VpZC50b1N0cmluZygpLCBwYWdlT3B0aW9ucyA9PT0gbnVsbCB8fCBwYWdlT3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGFnZU9wdGlvbnMucmVkaXJlY3QpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9pbnRybyA9IHJlc3BvbnNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5faW50cm87XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuaW50cm9FcnJvcihlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXR1cm5zIHRoZSBpbWFnZXMgcHJlc2VudCBpbiBhIHdpa2kgcGFnZVxuICAgICAgICAgKlxuICAgICAgICAgKiBAcmVtYXJrc1xuICAgICAgICAgKiBUaGlzIG1ldGhvZCBpcyBwYXJ0IG9mIHRoZSB7QGxpbmsgUGFnZSB8IFBhZ2UgfS5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHRpdGxlIC0gVGhlIHRpdGxlIG9yIHBhZ2UgSWQgb2YgdGhlIHBhZ2VcbiAgICAgICAgICogQHBhcmFtIGxpc3RPcHRpb25zIC0ge0BsaW5rIGxpc3RPcHRpb25zIHwgbGlzdE9wdGlvbnMgfVxuICAgICAgICAgKiBAcmV0dXJucyBhbiBhcnJheSBvZiBpbWFnZVJlc3VsdCB7QGxpbmsgaW1hZ2VSZXN1bHQgfCBpbWFnZVJlc3VsdCB9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmltYWdlcyA9IGFzeW5jIChsaXN0T3B0aW9ucykgPT4ge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX2ltYWdlcykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCAoMCwgZXhwb3J0cy5pbWFnZXMpKHRoaXMucGFnZWlkLnRvU3RyaW5nKCksIGxpc3RPcHRpb25zKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faW1hZ2VzID0gcmVzdWx0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5faW1hZ2VzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLmltYWdlRXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogUmV0dXJucyB0aGUgc3VtbWFyeSBvZiB0aGUgcGFnZVxuICAgICAgICAgKlxuICAgICAgICAgKiBAcmVtYXJrc1xuICAgICAgICAgKiBUaGlzIG1ldGhvZCBpcyBwYXJ0IG9mIHRoZSB7QGxpbmsgUGFnZSB8IFBhZ2UgfS5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHRpdGxlIC0gVGhlIHRpdGxlIG9yIHBhZ2UgSWQgb2YgdGhlIHBhZ2VcbiAgICAgICAgICogQHBhcmFtIHJlZGlyZWN0IC0gV2hldGhlciB0byByZWRpcmVjdCBpbiBjYXNlIG9mIDMwMlxuICAgICAgICAgKiBAcmV0dXJucyBUaGUgc3VtbWFyeSBvZiB0aGUgcGFnZSBhcyB7QGxpbmsgd2lraVN1bW1hcnkgfCB3aWtpU3VtbWFyeX1cbiAgICAgICAgICpcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc3VtbWFyeSA9IGFzeW5jIChwYWdlT3B0aW9ucykgPT4ge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX3N1bW1hcnkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgKDAsIGV4cG9ydHMuc3VtbWFyeSkodGhpcy50aXRsZSwgcGFnZU9wdGlvbnMgPT09IG51bGwgfHwgcGFnZU9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBhZ2VPcHRpb25zLnJlZGlyZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3VtbWFyeSA9IHJlc3VsdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3N1bW1hcnk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuc3VtbWFyeUVycm9yKGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJldHVybnMgdGhlIGh0bWwgY29udGVudCBvZiBhIHBhZ2VcbiAgICAgICAgICpcbiAgICAgICAgICogQHJlbWFya3NcbiAgICAgICAgICogVGhpcyBtZXRob2QgaXMgcGFydCBvZiB0aGUge0BsaW5rIFBhZ2UgfCBQYWdlIH0uXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB0aXRsZSAtIFRoZSB0aXRsZSBvciBwYWdlIElkIG9mIHRoZSBwYWdlXG4gICAgICAgICAqIEBwYXJhbSByZWRpcmVjdCAtIFdoZXRoZXIgdG8gcmVkaXJlY3QgaW4gY2FzZSBvZiAzMDJcbiAgICAgICAgICogQHJldHVybnMgVGhlIGh0bWwgY29udGVudCBhcyBzdHJpbmdcbiAgICAgICAgICpcbiAgICAgICAgICogQGJldGFcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuaHRtbCA9IGFzeW5jIChwYWdlT3B0aW9ucykgPT4ge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX2h0bWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgKDAsIGV4cG9ydHMuaHRtbCkodGhpcy5wYWdlaWQudG9TdHJpbmcoKSwgcGFnZU9wdGlvbnMgPT09IG51bGwgfHwgcGFnZU9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBhZ2VPcHRpb25zLnJlZGlyZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faHRtbCA9IHJlc3VsdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2h0bWw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuaHRtbEVycm9yKGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJldHVybnMgdGhlIHBsYWluIHRleHQgY29udGVudCBvZiBhIHBhZ2UgYW5kIHNldHMgcGFyZW50IElkIGFuZCByZXYgSWRcbiAgICAgICAgICpcbiAgICAgICAgICogQHJlbWFya3NcbiAgICAgICAgICogVGhpcyBtZXRob2QgaXMgcGFydCBvZiB0aGUge0BsaW5rIFBhZ2UgfCBQYWdlIH0uXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB0aXRsZSAtIFRoZSB0aXRsZSBvciBwYWdlIElkIG9mIHRoZSBwYWdlXG4gICAgICAgICAqIEBwYXJhbSByZWRpcmVjdCAtIFdoZXRoZXIgdG8gcmVkaXJlY3QgaW4gY2FzZSBvZiAzMDJcbiAgICAgICAgICogQHJldHVybnMgVGhlIHBsYWluIHRleHQgYXMgc3RyaW5nIGFuZCB0aGUgcGFyZW50IGFuZCByZXZpc2lvbiBpZHNcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuY29udGVudCA9IGFzeW5jIChwYWdlT3B0aW9ucykgPT4ge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX2NvbnRlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgKDAsIGV4cG9ydHMuY29udGVudCkodGhpcy5wYWdlaWQudG9TdHJpbmcoKSwgcGFnZU9wdGlvbnMgPT09IG51bGwgfHwgcGFnZU9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBhZ2VPcHRpb25zLnJlZGlyZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXJlbnRpZCA9IHJlc3VsdC5pZHMucGFyZW50SWQ7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmV2aWQgPSByZXN1bHQuaWRzLnJldklkO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jb250ZW50ID0gcmVzdWx0LnJlc3VsdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRlbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuY29udGVudEVycm9yKGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJldHVybnMgdGhlIGNldGVnb3JpZXMgcHJlc2VudCBpbiBwYWdlXG4gICAgICAgICAqXG4gICAgICAgICAqIEByZW1hcmtzXG4gICAgICAgICAqIFRoaXMgbWV0aG9kIGlzIHBhcnQgb2YgdGhlIHtAbGluayBQYWdlIHwgUGFnZSB9LlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0gdGl0bGUgLSBUaGUgdGl0bGUgb3IgcGFnZSBJZCBvZiB0aGUgcGFnZVxuICAgICAgICAgKiBAcGFyYW0gbGlzdE9wdGlvbnMgLSB7QGxpbmsgbGlzdE9wdGlvbnMgfCBsaXN0T3B0aW9ucyB9XG4gICAgICAgICAqIEByZXR1cm5zIFRoZSBjYXRlZ29yaWVzIGFzIGFuIGFycmF5IG9mIHN0cmluZ1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5jYXRlZ29yaWVzID0gYXN5bmMgKGxpc3RPcHRpb25zKSA9PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5fY2F0ZWdvcmllcykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCAoMCwgZXhwb3J0cy5jYXRlZ29yaWVzKSh0aGlzLnBhZ2VpZC50b1N0cmluZygpLCBsaXN0T3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NhdGVnb3JpZXMgPSByZXN1bHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9jYXRlZ29yaWVzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLmNhdGVnb3JpZXNFcnJvcihlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXR1cm5zIHRoZSBsaW5rcyBwcmVzZW50IGluIHBhZ2VcbiAgICAgICAgICpcbiAgICAgICAgICogQHJlbWFya3NcbiAgICAgICAgICogVGhpcyBtZXRob2QgaXMgcGFydCBvZiB0aGUge0BsaW5rIFBhZ2UgfCBQYWdlIH0uXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB0aXRsZSAtIFRoZSB0aXRsZSBvciBwYWdlIElkIG9mIHRoZSBwYWdlXG4gICAgICAgICAqIEBwYXJhbSBsaXN0T3B0aW9ucyAtIHtAbGluayBsaXN0T3B0aW9ucyB8IGxpc3RPcHRpb25zIH1cbiAgICAgICAgICogQHJldHVybnMgVGhlIGxpbmtzIGFzIGFuIGFycmF5IG9mIHN0cmluZ1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5saW5rcyA9IGFzeW5jIChsaXN0T3B0aW9ucykgPT4ge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX2xpbmtzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0ICgwLCBleHBvcnRzLmxpbmtzKSh0aGlzLnBhZ2VpZC50b1N0cmluZygpLCBsaXN0T3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2xpbmtzID0gcmVzdWx0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fbGlua3M7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEubGlua3NFcnJvcihlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXR1cm5zIHRoZSByZWZlcmVuY2VzIG9mIGV4dGVybmFsIGxpbmtzIHByZXNlbnQgaW4gcGFnZVxuICAgICAgICAgKlxuICAgICAgICAgKiBAcmVtYXJrc1xuICAgICAgICAgKiBUaGlzIG1ldGhvZCBpcyBwYXJ0IG9mIHRoZSB7QGxpbmsgUGFnZSB8IFBhZ2UgfS5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHRpdGxlIC0gVGhlIHRpdGxlIG9yIHBhZ2UgSWQgb2YgdGhlIHBhZ2VcbiAgICAgICAgICogQHBhcmFtIGxpc3RPcHRpb25zIC0ge0BsaW5rIGxpc3RPcHRpb25zIHwgbGlzdE9wdGlvbnMgfVxuICAgICAgICAgKiBAcmV0dXJucyBUaGUgcmVmZXJlbmNlcyBhcyBhbiBhcnJheSBvZiBzdHJpbmdcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucmVmZXJlbmNlcyA9IGFzeW5jIChsaXN0T3B0aW9ucykgPT4ge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX3JlZmVyZW5jZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgKDAsIGV4cG9ydHMucmVmZXJlbmNlcykodGhpcy5wYWdlaWQudG9TdHJpbmcoKSwgbGlzdE9wdGlvbnMpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZWZlcmVuY2VzID0gcmVzdWx0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fcmVmZXJlbmNlcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfMS5saW5rc0Vycm9yKGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJldHVybnMgdGhlIGNvb3JkaW5hdGVzIG9mIGEgcGFnZVxuICAgICAgICAgKlxuICAgICAgICAgKiBAcmVtYXJrc1xuICAgICAgICAgKiBUaGlzIG1ldGhvZCBpcyBwYXJ0IG9mIHRoZSB7QGxpbmsgUGFnZSB8IFBhZ2UgfS5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHRpdGxlIC0gVGhlIHRpdGxlIG9yIHBhZ2UgSWQgb2YgdGhlIHBhZ2VcbiAgICAgICAgICogQHBhcmFtIHJlZGlyZWN0IC0gV2hldGhlciB0byByZWRpcmVjdCBpbiBjYXNlIG9mIDMwMlxuICAgICAgICAgKiBAcmV0dXJucyBUaGUgY29vcmRpbmF0ZXMgYXMge0BsaW5rIGNvb3JkaW5hdGVzUmVzdWx0IHwgY29vcmRpbmF0ZXNSZXN1bHR9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmNvb3JkaW5hdGVzID0gYXN5bmMgKHBhZ2VPcHRpb25zKSA9PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5fY29vcmRpbmF0ZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgKDAsIGV4cG9ydHMuY29vcmRpbmF0ZXMpKHRoaXMucGFnZWlkLnRvU3RyaW5nKCksIHBhZ2VPcHRpb25zID09PSBudWxsIHx8IHBhZ2VPcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwYWdlT3B0aW9ucy5yZWRpcmVjdCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2Nvb3JkaW5hdGVzID0gcmVzdWx0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fY29vcmRpbmF0ZXM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuY29vcmRpbmF0ZXNFcnJvcihlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXR1cm5zIHRoZSBsYW5ndWFnZSBsaW5rcyBwcmVzZW50IGluIHRoZSBwYWdlXG4gICAgICAgICAqXG4gICAgICAgICAqIEByZW1hcmtzXG4gICAgICAgICAqIFRoaXMgbWV0aG9kIGlzIHBhcnQgb2YgdGhlIHtAbGluayBQYWdlIHwgUGFnZSB9LlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0gdGl0bGUgLSBUaGUgdGl0bGUgb3IgcGFnZSBJZCBvZiB0aGUgcGFnZVxuICAgICAgICAgKiBAcGFyYW0gbGlzdE9wdGlvbnMgLSB7QGxpbmsgbGlzdE9wdGlvbnMgfCBsaXN0T3B0aW9ucyB9XG4gICAgICAgICAqIEByZXR1cm5zIFRoZSBsaW5rcyBhcyBhbiBhcnJheSBvZiB7QGxpbmsgbGFuZ0xpbmtzUmVzdWx0IHwgbGFuZ0xpbmtzUmVzdWx0IH1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMubGFuZ0xpbmtzID0gYXN5bmMgKGxpc3RPcHRpb25zKSA9PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5fbGFuZ0xpbmtzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0ICgwLCBleHBvcnRzLmxhbmdMaW5rcykodGhpcy5wYWdlaWQudG9TdHJpbmcoKSwgbGlzdE9wdGlvbnMpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9sYW5nTGlua3MgPSByZXN1bHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9sYW5nTGlua3M7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEubGlua3NFcnJvcihlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXR1cm5zIHRoZSBpbmZvYm94IGNvbnRlbnQgb2YgcGFnZSBpZiBwcmVzZW50XG4gICAgICAgICAqXG4gICAgICAgICAqIEByZW1hcmtzXG4gICAgICAgICAqIFRoaXMgbWV0aG9kIGlzIHBhcnQgb2YgdGhlIHtAbGluayBQYWdlIHwgUGFnZSB9LlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0gdGl0bGUgLSBUaGUgdGl0bGUgb3IgcGFnZSBJZCBvZiB0aGUgcGFnZVxuICAgICAgICAgKiBAcGFyYW0gcmVkaXJlY3QgLSBXaGV0aGVyIHRvIHJlZGlyZWN0IGluIGNhc2Ugb2YgMzAyXG4gICAgICAgICAqIEByZXR1cm5zIFRoZSBpbmZvIGFzIEpTT04gb2JqZWN0XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmluZm9ib3ggPSBhc3luYyAocGFnZU9wdGlvbnMpID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9pbmZvYm94KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0ICgwLCBleHBvcnRzLmluZm9ib3gpKHRoaXMucGFnZWlkLnRvU3RyaW5nKCksIHBhZ2VPcHRpb25zID09PSBudWxsIHx8IHBhZ2VPcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwYWdlT3B0aW9ucy5yZWRpcmVjdCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2luZm9ib3ggPSByZXN1bHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9pbmZvYm94O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLmluZm9ib3hFcnJvcihlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXR1cm5zIHRoZSB0YWJsZSBjb250ZW50IG9mIHBhZ2UgaWYgcHJlc2VudFxuICAgICAgICAgKlxuICAgICAgICAgKiBAcmVtYXJrc1xuICAgICAgICAgKiBUaGlzIG1ldGhvZCBpcyBwYXJ0IG9mIHRoZSB7QGxpbmsgUGFnZSB8IFBhZ2UgfS5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHRpdGxlIC0gVGhlIHRpdGxlIG9yIHBhZ2UgSWQgb2YgdGhlIHBhZ2VcbiAgICAgICAgICogQHBhcmFtIHJlZGlyZWN0IC0gV2hldGhlciB0byByZWRpcmVjdCBpbiBjYXNlIG9mIDMwMlxuICAgICAgICAgKiBAcmV0dXJucyBUaGUgdGFibGVzIGFzIGFycmF5cyBvZiBKU09OIG9iamVjdHNcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMudGFibGVzID0gYXN5bmMgKHBhZ2VPcHRpb25zKSA9PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5fdGFibGVzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0ICgwLCBleHBvcnRzLnRhYmxlcykodGhpcy5wYWdlaWQudG9TdHJpbmcoKSwgcGFnZU9wdGlvbnMgPT09IG51bGwgfHwgcGFnZU9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBhZ2VPcHRpb25zLnJlZGlyZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGFibGVzID0gcmVzdWx0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fdGFibGVzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLmluZm9ib3hFcnJvcihlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXR1cm5zIHN1bW1hcmllcyBmb3IgMjAgcGFnZXMgcmVsYXRlZCB0byB0aGUgZ2l2ZW4gcGFnZS4gU3VtbWFyaWVzIGluY2x1ZGUgcGFnZSB0aXRsZSwgbmFtZXNwYWNlXG4gICAgICAgICAqIGFuZCBpZCBhbG9uZyB3aXRoIHNob3J0IHRleHQgZGVzY3JpcHRpb24gb2YgdGhlIHBhZ2UgYW5kIGEgdGh1bWJuYWlsLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcmVtYXJrc1xuICAgICAgICAgKiBUaGlzIG1ldGhvZCBpcyBwYXJ0IG9mIHRoZSB7QGxpbmsgUGFnZSB8IFBhZ2UgfS5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHRpdGxlIC0gVGhlIHRpdGxlIG9yIHBhZ2UgSWQgb2YgdGhlIHBhZ2VcbiAgICAgICAgICogQHBhcmFtIHJlZGlyZWN0IC0gV2hldGhlciB0byByZWRpcmVjdCBpbiBjYXNlIG9mIDMwMlxuICAgICAgICAgKiBAcmV0dXJucyBUaGUgcmVsYXRlZCBwYWdlcyBhbmQgc3VtbWFyeSBhcyBhbiBhcnJheSBvZiB7QGxpbmsgd2lraVN1bW1hcnkgfCB3aWtpU3VtbWFyeX1cbiAgICAgICAgICpcbiAgICAgICAgICogQGV4cGVyaW1lbnRhbFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5yZWxhdGVkID0gYXN5bmMgKHBhZ2VPcHRpb25zKSA9PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5fcmVsYXRlZCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCAoMCwgZXhwb3J0cy5yZWxhdGVkKSh0aGlzLnRpdGxlLCBwYWdlT3B0aW9ucyA9PT0gbnVsbCB8fCBwYWdlT3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGFnZU9wdGlvbnMucmVkaXJlY3QpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZWxhdGVkID0gcmVzdWx0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fcmVsYXRlZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfMS5yZWxhdGVkRXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogR2V0cyB0aGUgbGlzdCBvZiBtZWRpYSBpdGVtcyAoaW1hZ2VzLCBhdWRpbywgYW5kIHZpZGVvKSBpbiB0aGVcbiAgICAgICAgICogb3JkZXIgaW4gd2hpY2ggdGhleSBhcHBlYXIgb24gYSBnaXZlbiB3aWtpIHBhZ2UuXG4gICAgICAgICAqXG4gICAgICAgICAqIEByZW1hcmtzXG4gICAgICAgICAqIENhbGxlZCBpbiBwYWdlIG9iamVjdCBhbmQgYWxzbyB0aHJvdWdoIGluZGV4XG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB0aXRsZSAtIFRoZSB0aXRsZSBvciBwYWdlIElkIG9mIHRoZSBwYWdlXG4gICAgICAgICAqIEBwYXJhbSByZWRpcmVjdCAtIFdoZXRoZXIgdG8gcmVkaXJlY3QgaW4gY2FzZSBvZiAzMDJcbiAgICAgICAgICogQHJldHVybnMgVGhlIHJlbGF0ZWQgcGFnZXMgYW5kIHN1bW1hcnkgYXMgYW4gYXJyYXkgb2Yge0BsaW5rIHdpa2lNZWRpYVJlc3VsdCB8IHdpa2lNZWRpYVJlc3VsdH1cbiAgICAgICAgICpcbiAgICAgICAgICogQGV4cGVyaW1lbnRhbFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5tZWRpYSA9IGFzeW5jIChwYWdlT3B0aW9ucykgPT4ge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX21lZGlhKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0ICgwLCBleHBvcnRzLm1lZGlhKSh0aGlzLnRpdGxlLCBwYWdlT3B0aW9ucyA9PT0gbnVsbCB8fCBwYWdlT3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGFnZU9wdGlvbnMucmVkaXJlY3QpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9tZWRpYSA9IHJlc3VsdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21lZGlhO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLm1lZGlhRXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgKiBSZXR1cm5zIG1vYmlsZS1vcHRpbWlzZWQgSFRNTCBvZiBhIHBhZ2VcbiAgICAgICAgKlxuICAgICAgICAqIEBwYXJhbSB0aXRsZSAtIFRoZSB0aXRsZSBvZiB0aGUgcGFnZSB0byBxdWVyeVxuICAgICAgICAqIEBwYXJhbSByZWRpcmVjdCAtIFdoZXRoZXIgdG8gcmVkaXJlY3QgaW4gY2FzZSBvZiAzMDJcbiAgICAgICAgKiBAcmV0dXJucyBSZXR1cm5zIEhUTUwgc3RyaW5nXG4gICAgICAgICovXG4gICAgICAgIHRoaXMubW9iaWxlSHRtbCA9IGFzeW5jIChwYWdlT3B0aW9ucykgPT4ge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX21vYmlsZUh0bWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgKDAsIGV4cG9ydHMubW9iaWxlSHRtbCkodGhpcy50aXRsZSwgcGFnZU9wdGlvbnMgPT09IG51bGwgfHwgcGFnZU9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBhZ2VPcHRpb25zLnJlZGlyZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbW9iaWxlSHRtbCA9IHJlc3VsdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21vYmlsZUh0bWw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuaHRtbEVycm9yKGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJldHVybnMgcGRmIG9mIGEgZ2l2ZW4gcGFnZVxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0gcGRmT3B0aW9ucyAtIHtAbGluayBwZGZPcHRpb25zIHwgcGRmT3B0aW9ucyB9XG4gICAgICAgICAqIEByZXR1cm5zIFJldHVybnMgcGF0aCBzdHJpbmdcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucGRmID0gYXN5bmMgKHBkZk9wdGlvbnMpID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgKDAsIGV4cG9ydHMucGRmKSh0aGlzLnRpdGxlLCBwZGZPcHRpb25zKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLnBkZkVycm9yKGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5wYWdlaWQgPSByZXNwb25zZS5wYWdlaWQ7XG4gICAgICAgIHRoaXMubnMgPSByZXNwb25zZS5ucztcbiAgICAgICAgdGhpcy50aXRsZSA9IHJlc3BvbnNlLnRpdGxlO1xuICAgICAgICB0aGlzLmNvbnRlbnRtb2RlbCA9IHJlc3BvbnNlLmNvbnRlbnRtb2RlbDtcbiAgICAgICAgdGhpcy5wYWdlbGFuZ3VhZ2UgPSByZXNwb25zZS5wYWdlbGFuZ3VhZ2U7XG4gICAgICAgIHRoaXMucGFnZWxhbmd1YWdlZGlyID0gcmVzcG9uc2UucGFnZWxhbmd1YWdlZGlyO1xuICAgICAgICB0aGlzLnRvdWNoZWQgPSByZXNwb25zZS50b3VjaGVkO1xuICAgICAgICB0aGlzLmxhc3RyZXZpZCA9IHJlc3BvbnNlLmxhc3RyZXZpZDtcbiAgICAgICAgdGhpcy5sZW5ndGggPSByZXNwb25zZS5sZW5ndGg7XG4gICAgICAgIHRoaXMuZnVsbHVybCA9IHJlc3BvbnNlLmZ1bGx1cmw7XG4gICAgICAgIHRoaXMuZWRpdHVybCA9IHJlc3BvbnNlLmVkaXR1cmw7XG4gICAgICAgIHRoaXMuY2Fub25pY2FsdXJsID0gcmVzcG9uc2UuY2Fub25pY2FsdXJsO1xuICAgIH1cbiAgICBhc3luYyBydW5NZXRob2QoZnVuY3Rpb25OYW1lKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBldmFsKGB0aGlzLiR7ZnVuY3Rpb25OYW1lfSgpYCk7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLnByZWxvYWRFcnJvcihlcnJvcik7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLlBhZ2UgPSBQYWdlO1xuLyoqXG4gKiBSZXR1cm5zIHRoZSBpbWFnZXMgcHJlc2VudCBpbiBhIHdpa2kgcGFnZVxuICpcbiAqIEByZW1hcmtzXG4gKiBDYWxsZWQgaW4gcGFnZSBvYmplY3QgYW5kIGFsc28gdGhyb3VnaCB3aWtpIGRlZmF1bHQgb2JqZWN0XG4gKlxuICogQHBhcmFtIHRpdGxlIC0gVGhlIHRpdGxlIG9yIHBhZ2UgSWQgb2YgdGhlIHBhZ2VcbiAqIEBwYXJhbSBsaXN0T3B0aW9ucyAtIHtAbGluayBsaXN0T3B0aW9ucyB8IGxpc3RPcHRpb25zIH1cbiAqIEByZXR1cm5zIGFuIGFycmF5IG9mIGltYWdlUmVzdWx0IHtAbGluayBpbWFnZVJlc3VsdCB8IGltYWdlUmVzdWx0IH1cbiAqL1xuY29uc3QgaW1hZ2VzID0gYXN5bmMgKHRpdGxlLCBsaXN0T3B0aW9ucykgPT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGxldCBpbWFnZU9wdGlvbnMgPSB7XG4gICAgICAgICAgICBnZW5lcmF0b3I6ICdpbWFnZXMnLFxuICAgICAgICAgICAgZ2ltbGltaXQ6IChsaXN0T3B0aW9ucyA9PT0gbnVsbCB8fCBsaXN0T3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogbGlzdE9wdGlvbnMubGltaXQpIHx8IDUsXG4gICAgICAgICAgICBwcm9wOiAnaW1hZ2VpbmZvJyxcbiAgICAgICAgICAgIGlpcHJvcDogJ3VybCdcbiAgICAgICAgfTtcbiAgICAgICAgaW1hZ2VPcHRpb25zID0gKDAsIHV0aWxzXzEuc2V0UGFnZUlkT3JUaXRsZVBhcmFtKShpbWFnZU9wdGlvbnMsIHRpdGxlKTtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCAoMCwgcmVxdWVzdF8xLmRlZmF1bHQpKGltYWdlT3B0aW9ucywgbGlzdE9wdGlvbnMgPT09IG51bGwgfHwgbGlzdE9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGxpc3RPcHRpb25zLnJlZGlyZWN0KTtcbiAgICAgICAgY29uc3QgaW1hZ2VzID0gW107XG4gICAgICAgIGNvbnN0IGltYWdlS2V5cyA9IE9iamVjdC5rZXlzKHJlc3BvbnNlLnF1ZXJ5LnBhZ2VzKTtcbiAgICAgICAgZm9yIChjb25zdCBpbWFnZSBvZiBpbWFnZUtleXMpIHtcbiAgICAgICAgICAgIGNvbnN0IGltYWdlSW5mbyA9IHJlc3BvbnNlLnF1ZXJ5LnBhZ2VzW2ltYWdlXTtcbiAgICAgICAgICAgIGltYWdlSW5mby51cmwgPSBpbWFnZUluZm8uaW1hZ2VpbmZvWzBdLnVybDtcbiAgICAgICAgICAgIGltYWdlcy5wdXNoKGltYWdlSW5mbyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGltYWdlcztcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfMS5pbWFnZUVycm9yKGVycm9yKTtcbiAgICB9XG59O1xuZXhwb3J0cy5pbWFnZXMgPSBpbWFnZXM7XG4vKipcbiAqIFJldHVybnMgdGhlIGludHJvIHByZXNlbnQgaW4gYSB3aWtpIHBhZ2VcbiAqXG4gKiBAcmVtYXJrc1xuICogQ2FsbGVkIGluIHBhZ2Ugb2JqZWN0IGFuZCBhbHNvIHRocm91Z2ggd2lraSBkZWZhdWx0IG9iamVjdFxuICpcbiAqIEBwYXJhbSB0aXRsZSAtIFRoZSB0aXRsZSBvciBwYWdlIElkIG9mIHRoZSBwYWdlXG4gKiBAcGFyYW0gcmVkaXJlY3QgLSBXaGV0aGVyIHRvIHJlZGlyZWN0IGluIGNhc2Ugb2YgMzAyXG4gKiBAcmV0dXJucyBUaGUgaW50cm8gc3RyaW5nXG4gKi9cbmNvbnN0IGludHJvID0gYXN5bmMgKHRpdGxlLCByZWRpcmVjdCA9IHRydWUpID0+IHtcbiAgICB2YXIgX2E7XG4gICAgdHJ5IHtcbiAgICAgICAgbGV0IGludHJvT3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHByb3A6ICdleHRyYWN0cycsXG4gICAgICAgICAgICBleHBsYWludGV4dDogJycsXG4gICAgICAgICAgICBleGludHJvOiAnJyxcbiAgICAgICAgfTtcbiAgICAgICAgaW50cm9PcHRpb25zID0gKDAsIHV0aWxzXzEuc2V0UGFnZUlkT3JUaXRsZVBhcmFtKShpbnRyb09wdGlvbnMsIHRpdGxlKTtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCAoMCwgcmVxdWVzdF8xLmRlZmF1bHQpKGludHJvT3B0aW9ucywgcmVkaXJlY3QpO1xuICAgICAgICBjb25zdCBwYWdlSWQgPSAoMCwgdXRpbHNfMS5zZXRQYWdlSWQpKGludHJvT3B0aW9ucywgcmVzcG9uc2UpO1xuICAgICAgICByZXR1cm4gKF9hID0gcmVzcG9uc2UgPT09IG51bGwgfHwgcmVzcG9uc2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlc3BvbnNlLnF1ZXJ5KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EucGFnZXNbcGFnZUlkXS5leHRyYWN0O1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLmludHJvRXJyb3IoZXJyb3IpO1xuICAgIH1cbn07XG5leHBvcnRzLmludHJvID0gaW50cm87XG4vKipcbiAqIFJldHVybnMgdGhlIGh0bWwgY29udGVudCBvZiBhIHBhZ2VcbiAqXG4gKiBAcmVtYXJrc1xuICogQ2FsbGVkIGluIHBhZ2Ugb2JqZWN0IGFuZCBhbHNvIHRocm91Z2ggd2lraSBkZWZhdWx0IG9iamVjdFxuICpcbiAqIEBwYXJhbSB0aXRsZSAtIFRoZSB0aXRsZSBvciBwYWdlIElkIG9mIHRoZSBwYWdlXG4gKiBAcGFyYW0gcmVkaXJlY3QgLSBXaGV0aGVyIHRvIHJlZGlyZWN0IGluIGNhc2Ugb2YgMzAyXG4gKiBAcmV0dXJucyBUaGUgaHRtbCBjb250ZW50IGFzIHN0cmluZ1xuICpcbiAqIEBiZXRhXG4gKi9cbmNvbnN0IGh0bWwgPSBhc3luYyAodGl0bGUsIHJlZGlyZWN0ID0gdHJ1ZSkgPT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGxldCBodG1sT3B0aW9ucyA9IHtcbiAgICAgICAgICAgICdwcm9wJzogJ3JldmlzaW9ucycsXG4gICAgICAgICAgICAncnZwcm9wJzogJ2NvbnRlbnQnLFxuICAgICAgICAgICAgJ3J2bGltaXQnOiAxLFxuICAgICAgICAgICAgJ3J2cGFyc2UnOiAnJ1xuICAgICAgICB9O1xuICAgICAgICBodG1sT3B0aW9ucyA9ICgwLCB1dGlsc18xLnNldFBhZ2VJZE9yVGl0bGVQYXJhbSkoaHRtbE9wdGlvbnMsIHRpdGxlKTtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCAoMCwgcmVxdWVzdF8xLmRlZmF1bHQpKGh0bWxPcHRpb25zLCByZWRpcmVjdCk7XG4gICAgICAgIGNvbnN0IHBhZ2VJZCA9ICgwLCB1dGlsc18xLnNldFBhZ2VJZCkoaHRtbE9wdGlvbnMsIHJlc3BvbnNlKTtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLnF1ZXJ5LnBhZ2VzW3BhZ2VJZF0ucmV2aXNpb25zWzBdWycqJ107XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuaHRtbEVycm9yKGVycm9yKTtcbiAgICB9XG59O1xuZXhwb3J0cy5odG1sID0gaHRtbDtcbi8qKlxuICogUmV0dXJucyB0aGUgcGxhaW4gdGV4dCBjb250ZW50IG9mIGEgcGFnZSBhcyB3ZWxsIGFzIHBhcmVudCBpZCBhbmQgcmV2aXNpb24gaWRcbiAqXG4gKiBAcmVtYXJrc1xuICogQ2FsbGVkIGluIHBhZ2Ugb2JqZWN0IGFuZCBhbHNvIHRocm91Z2ggd2lraSBkZWZhdWx0IG9iamVjdFxuICpcbiAqIEBwYXJhbSB0aXRsZSAtIFRoZSB0aXRsZSBvciBwYWdlIElkIG9mIHRoZSBwYWdlXG4gKiBAcGFyYW0gcmVkaXJlY3QgLSBXaGV0aGVyIHRvIHJlZGlyZWN0IGluIGNhc2Ugb2YgMzAyXG4gKiBAcmV0dXJucyBUaGUgcGxhaW4gdGV4dCBhcyBzdHJpbmcgYW5kIHRoZSBwYXJlbnQgYW5kIHJldmlzaW9uIGlkc1xuICovXG5jb25zdCBjb250ZW50ID0gYXN5bmMgKHRpdGxlLCByZWRpcmVjdCA9IHRydWUpID0+IHtcbiAgICB0cnkge1xuICAgICAgICBsZXQgY29udGVudE9wdGlvbnMgPSB7XG4gICAgICAgICAgICAncHJvcCc6ICdleHRyYWN0c3xyZXZpc2lvbnMnLFxuICAgICAgICAgICAgJ2V4cGxhaW50ZXh0JzogJycsXG4gICAgICAgICAgICAncnZwcm9wJzogJ2lkcydcbiAgICAgICAgfTtcbiAgICAgICAgY29udGVudE9wdGlvbnMgPSAoMCwgdXRpbHNfMS5zZXRQYWdlSWRPclRpdGxlUGFyYW0pKGNvbnRlbnRPcHRpb25zLCB0aXRsZSk7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgKDAsIHJlcXVlc3RfMS5kZWZhdWx0KShjb250ZW50T3B0aW9ucywgcmVkaXJlY3QpO1xuICAgICAgICBjb25zdCBwYWdlSWQgPSAoMCwgdXRpbHNfMS5zZXRQYWdlSWQpKGNvbnRlbnRPcHRpb25zLCByZXNwb25zZSk7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHJlc3BvbnNlWydxdWVyeSddWydwYWdlcyddW3BhZ2VJZF1bJ2V4dHJhY3QnXTtcbiAgICAgICAgY29uc3QgaWRzID0ge1xuICAgICAgICAgICAgcmV2aXNpb25JZDogcmVzcG9uc2VbJ3F1ZXJ5J11bJ3BhZ2VzJ11bcGFnZUlkXVsncmV2aXNpb25zJ11bMF1bJ3JldmlkJ10sXG4gICAgICAgICAgICBwYXJlbnRJZDogcmVzcG9uc2VbJ3F1ZXJ5J11bJ3BhZ2VzJ11bcGFnZUlkXVsncmV2aXNpb25zJ11bMF1bJ3BhcmVudGlkJ11cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlc3VsdCxcbiAgICAgICAgICAgIGlkc1xuICAgICAgICB9O1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLmNvbnRlbnRFcnJvcihlcnJvcik7XG4gICAgfVxufTtcbmV4cG9ydHMuY29udGVudCA9IGNvbnRlbnQ7XG4vKipcbiAqIFJldHVybnMgdGhlIGNldGVnb3JpZXMgcHJlc2VudCBpbiBwYWdlXG4gKlxuICogQHJlbWFya3NcbiAqIENhbGxlZCBpbiBwYWdlIG9iamVjdCBhbmQgYWxzbyB0aHJvdWdoIHdpa2kgZGVmYXVsdCBvYmplY3RcbiAqXG4gKiBAcGFyYW0gdGl0bGUgLSBUaGUgdGl0bGUgb3IgcGFnZSBJZCBvZiB0aGUgcGFnZVxuICogQHBhcmFtIGxpc3RPcHRpb25zIC0ge0BsaW5rIGxpc3RPcHRpb25zIHwgbGlzdE9wdGlvbnMgfVxuICogQHJldHVybnMgVGhlIGNhdGVnb3JpZXMgYXMgYW4gYXJyYXkgb2Ygc3RyaW5nXG4gKi9cbmNvbnN0IGNhdGVnb3JpZXMgPSBhc3luYyAodGl0bGUsIGxpc3RPcHRpb25zKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgbGV0IGNhdGVnb3J5T3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHByb3A6ICdjYXRlZ29yaWVzJyxcbiAgICAgICAgICAgIHBsbGltaXQ6IGxpc3RPcHRpb25zID09PSBudWxsIHx8IGxpc3RPcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBsaXN0T3B0aW9ucy5saW1pdCxcbiAgICAgICAgfTtcbiAgICAgICAgY2F0ZWdvcnlPcHRpb25zID0gKDAsIHV0aWxzXzEuc2V0UGFnZUlkT3JUaXRsZVBhcmFtKShjYXRlZ29yeU9wdGlvbnMsIHRpdGxlKTtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCAoMCwgcmVxdWVzdF8xLmRlZmF1bHQpKGNhdGVnb3J5T3B0aW9ucywgbGlzdE9wdGlvbnMgPT09IG51bGwgfHwgbGlzdE9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGxpc3RPcHRpb25zLnJlZGlyZWN0KTtcbiAgICAgICAgY29uc3QgcGFnZUlkID0gKDAsIHV0aWxzXzEuc2V0UGFnZUlkKShjYXRlZ29yeU9wdGlvbnMsIHJlc3BvbnNlKTtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLnF1ZXJ5LnBhZ2VzW3BhZ2VJZF0uY2F0ZWdvcmllcy5tYXAoKGNhdGVnb3J5KSA9PiBjYXRlZ29yeS50aXRsZSk7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuY2F0ZWdvcmllc0Vycm9yKGVycm9yKTtcbiAgICB9XG59O1xuZXhwb3J0cy5jYXRlZ29yaWVzID0gY2F0ZWdvcmllcztcbi8qKlxuICogUmV0dXJucyB0aGUgbGlua3MgcHJlc2VudCBpbiBwYWdlXG4gKlxuICogQHJlbWFya3NcbiAqIENhbGxlZCBpbiBwYWdlIG9iamVjdCBhbmQgYWxzbyB0aHJvdWdoIHdpa2kgZGVmYXVsdCBvYmplY3RcbiAqXG4gKiBAcGFyYW0gdGl0bGUgLSBUaGUgdGl0bGUgb3IgcGFnZSBJZCBvZiB0aGUgcGFnZVxuICogQHBhcmFtIGxpc3RPcHRpb25zIC0ge0BsaW5rIGxpc3RPcHRpb25zIHwgbGlzdE9wdGlvbnMgfVxuICogQHJldHVybnMgVGhlIGxpbmtzIGFzIGFuIGFycmF5IG9mIHN0cmluZ1xuICovXG5jb25zdCBsaW5rcyA9IGFzeW5jICh0aXRsZSwgbGlzdE9wdGlvbnMpID0+IHtcbiAgICB0cnkge1xuICAgICAgICBsZXQgbGlua3NPcHRpb25zID0ge1xuICAgICAgICAgICAgcHJvcDogJ2xpbmtzJyxcbiAgICAgICAgICAgIHBsbmFtZXNwYWNlOiAwLFxuICAgICAgICAgICAgcGxsaW1pdDogKGxpc3RPcHRpb25zID09PSBudWxsIHx8IGxpc3RPcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBsaXN0T3B0aW9ucy5saW1pdCkgfHwgJ21heCcsXG4gICAgICAgIH07XG4gICAgICAgIGxpbmtzT3B0aW9ucyA9ICgwLCB1dGlsc18xLnNldFBhZ2VJZE9yVGl0bGVQYXJhbSkobGlua3NPcHRpb25zLCB0aXRsZSk7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgKDAsIHJlcXVlc3RfMS5kZWZhdWx0KShsaW5rc09wdGlvbnMsIGxpc3RPcHRpb25zID09PSBudWxsIHx8IGxpc3RPcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBsaXN0T3B0aW9ucy5yZWRpcmVjdCk7XG4gICAgICAgIGNvbnN0IHBhZ2VJZCA9ICgwLCB1dGlsc18xLnNldFBhZ2VJZCkobGlua3NPcHRpb25zLCByZXNwb25zZSk7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHJlc3BvbnNlLnF1ZXJ5LnBhZ2VzW3BhZ2VJZF0ubGlua3MubWFwKChsaW5rKSA9PiBsaW5rLnRpdGxlKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfMS5saW5rc0Vycm9yKGVycm9yKTtcbiAgICB9XG59O1xuZXhwb3J0cy5saW5rcyA9IGxpbmtzO1xuLyoqXG4gKiBSZXR1cm5zIHRoZSByZWZlcmVuY2VzIG9mIGV4dGVybmFsIGxpbmtzIHByZXNlbnQgaW4gcGFnZVxuICpcbiAqIEByZW1hcmtzXG4gKiBDYWxsZWQgaW4gcGFnZSBvYmplY3QgYW5kIGFsc28gdGhyb3VnaCB3aWtpIGRlZmF1bHQgb2JqZWN0XG4gKlxuICogQHBhcmFtIHRpdGxlIC0gVGhlIHRpdGxlIG9yIHBhZ2UgSWQgb2YgdGhlIHBhZ2VcbiAqIEBwYXJhbSBsaXN0T3B0aW9ucyAtIHtAbGluayBsaXN0T3B0aW9ucyB8IGxpc3RPcHRpb25zIH1cbiAqIEByZXR1cm5zIFRoZSByZWZlcmVuY2VzIGFzIGFuIGFycmF5IG9mIHN0cmluZ1xuICovXG5jb25zdCByZWZlcmVuY2VzID0gYXN5bmMgKHRpdGxlLCBsaXN0T3B0aW9ucykgPT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGxldCBleHRMaW5rc09wdGlvbnMgPSB7XG4gICAgICAgICAgICBwcm9wOiAnZXh0bGlua3MnLFxuICAgICAgICAgICAgZWxsaW1pdDogKGxpc3RPcHRpb25zID09PSBudWxsIHx8IGxpc3RPcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBsaXN0T3B0aW9ucy5saW1pdCkgfHwgJ21heCcsXG4gICAgICAgIH07XG4gICAgICAgIGV4dExpbmtzT3B0aW9ucyA9ICgwLCB1dGlsc18xLnNldFBhZ2VJZE9yVGl0bGVQYXJhbSkoZXh0TGlua3NPcHRpb25zLCB0aXRsZSk7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgKDAsIHJlcXVlc3RfMS5kZWZhdWx0KShleHRMaW5rc09wdGlvbnMsIGxpc3RPcHRpb25zID09PSBudWxsIHx8IGxpc3RPcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBsaXN0T3B0aW9ucy5yZWRpcmVjdCk7XG4gICAgICAgIGNvbnN0IHBhZ2VJZCA9ICgwLCB1dGlsc18xLnNldFBhZ2VJZCkoZXh0TGlua3NPcHRpb25zLCByZXNwb25zZSk7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHJlc3BvbnNlLnF1ZXJ5LnBhZ2VzW3BhZ2VJZF0uZXh0bGlua3MubWFwKChsaW5rKSA9PiBsaW5rWycqJ10pO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLmxpbmtzRXJyb3IoZXJyb3IpO1xuICAgIH1cbn07XG5leHBvcnRzLnJlZmVyZW5jZXMgPSByZWZlcmVuY2VzO1xuLyoqXG4gKiBSZXR1cm5zIHRoZSBjb29yZGluYXRlcyBvZiBhIHBhZ2VcbiAqXG4gKiBAcmVtYXJrc1xuICogQ2FsbGVkIGluIHBhZ2Ugb2JqZWN0IGFuZCBhbHNvIHRocm91Z2ggd2lraSBkZWZhdWx0IG9iamVjdFxuICpcbiAqIEBwYXJhbSB0aXRsZSAtIFRoZSB0aXRsZSBvciBwYWdlIElkIG9mIHRoZSBwYWdlXG4gKiBAcGFyYW0gcmVkaXJlY3QgLSBXaGV0aGVyIHRvIHJlZGlyZWN0IGluIGNhc2Ugb2YgMzAyXG4gKiBAcmV0dXJucyBUaGUgY29vcmRpbmF0ZXMgYXMge0BsaW5rIGNvb3JkaW5hdGVzUmVzdWx0IHwgY29vcmRpbmF0ZXNSZXN1bHR9XG4gKi9cbmNvbnN0IGNvb3JkaW5hdGVzID0gYXN5bmMgKHRpdGxlLCByZWRpcmVjdCA9IHRydWUpID0+IHtcbiAgICB0cnkge1xuICAgICAgICBsZXQgY29vcmRpbmF0ZXNPcHRpb25zID0ge1xuICAgICAgICAgICAgcHJvcDogJ2Nvb3JkaW5hdGVzJyxcbiAgICAgICAgfTtcbiAgICAgICAgY29vcmRpbmF0ZXNPcHRpb25zID0gKDAsIHV0aWxzXzEuc2V0UGFnZUlkT3JUaXRsZVBhcmFtKShjb29yZGluYXRlc09wdGlvbnMsIHRpdGxlKTtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCAoMCwgcmVxdWVzdF8xLmRlZmF1bHQpKGNvb3JkaW5hdGVzT3B0aW9ucywgcmVkaXJlY3QpO1xuICAgICAgICBjb25zdCBwYWdlSWQgPSAoMCwgdXRpbHNfMS5zZXRQYWdlSWQpKGNvb3JkaW5hdGVzT3B0aW9ucywgcmVzcG9uc2UpO1xuICAgICAgICBjb25zdCBjb29yZGluYXRlcyA9IHJlc3BvbnNlLnF1ZXJ5LnBhZ2VzW3BhZ2VJZF0uY29vcmRpbmF0ZXM7XG4gICAgICAgIHJldHVybiBjb29yZGluYXRlcyA/IGNvb3JkaW5hdGVzWzBdIDogbnVsbDtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfMS5jb29yZGluYXRlc0Vycm9yKGVycm9yKTtcbiAgICB9XG59O1xuZXhwb3J0cy5jb29yZGluYXRlcyA9IGNvb3JkaW5hdGVzO1xuLyoqXG4gKiBSZXR1cm5zIHRoZSBsYW5ndWFnZSBsaW5rcyBwcmVzZW50IGluIHRoZSBwYWdlXG4gKlxuICogQHJlbWFya3NcbiAqIENhbGxlZCBpbiBwYWdlIG9iamVjdCBhbmQgYWxzbyB0aHJvdWdoIHdpa2kgZGVmYXVsdCBvYmplY3RcbiAqXG4gKiBAcGFyYW0gdGl0bGUgLSBUaGUgdGl0bGUgb3IgcGFnZSBJZCBvZiB0aGUgcGFnZVxuICogQHBhcmFtIGxpc3RPcHRpb25zIC0ge0BsaW5rIGxpc3RPcHRpb25zIHwgbGlzdE9wdGlvbnMgfVxuICogQHJldHVybnMgVGhlIGxpbmtzIGFzIGFuIGFycmF5IG9mIHtAbGluayBsYW5nTGlua3NSZXN1bHQgfCBsYW5nTGlua3NSZXN1bHQgfVxuICovXG5jb25zdCBsYW5nTGlua3MgPSBhc3luYyAodGl0bGUsIGxpc3RPcHRpb25zKSA9PiB7XG4gICAgdmFyIF9hO1xuICAgIHRyeSB7XG4gICAgICAgIGxldCBsYW5ndWFnZU9wdGlvbnMgPSB7XG4gICAgICAgICAgICBwcm9wOiAnbGFuZ2xpbmtzJyxcbiAgICAgICAgICAgIGxsbGltaXQ6IChsaXN0T3B0aW9ucyA9PT0gbnVsbCB8fCBsaXN0T3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogbGlzdE9wdGlvbnMubGltaXQpIHx8ICdtYXgnLFxuICAgICAgICAgICAgbGxwcm9wOiAndXJsJ1xuICAgICAgICB9O1xuICAgICAgICBsYW5ndWFnZU9wdGlvbnMgPSAoMCwgdXRpbHNfMS5zZXRQYWdlSWRPclRpdGxlUGFyYW0pKGxhbmd1YWdlT3B0aW9ucywgdGl0bGUpO1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0ICgwLCByZXF1ZXN0XzEuZGVmYXVsdCkobGFuZ3VhZ2VPcHRpb25zLCBsaXN0T3B0aW9ucyA9PT0gbnVsbCB8fCBsaXN0T3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogbGlzdE9wdGlvbnMucmVkaXJlY3QpO1xuICAgICAgICBjb25zdCBwYWdlSWQgPSAoMCwgdXRpbHNfMS5zZXRQYWdlSWQpKGxhbmd1YWdlT3B0aW9ucywgcmVzcG9uc2UpO1xuICAgICAgICBjb25zdCByZXN1bHQgPSAoKF9hID0gcmVzcG9uc2UucXVlcnkucGFnZXNbcGFnZUlkXS5sYW5nbGlua3MpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IFtdKS5tYXAoKGxpbmspID0+IHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgbGFuZzogbGluay5sYW5nLFxuICAgICAgICAgICAgICAgIHRpdGxlOiBsaW5rWycqJ10sXG4gICAgICAgICAgICAgICAgdXJsOiBsaW5rLnVybFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEubGlua3NFcnJvcihlcnJvcik7XG4gICAgfVxufTtcbmV4cG9ydHMubGFuZ0xpbmtzID0gbGFuZ0xpbmtzO1xuLyoqXG4gKiBSZXR1cm5zIHRoZSBpbmZvYm94IGNvbnRlbnQgb2YgcGFnZSBpZiBwcmVzZW50XG4gKlxuICogQHJlbWFya3NcbiAqIENhbGxlZCBpbiBwYWdlIG9iamVjdCBhbmQgYWxzbyB0aHJvdWdoIHdpa2kgZGVmYXVsdCBvYmplY3RcbiAqXG4gKiBAcGFyYW0gdGl0bGUgLSBUaGUgdGl0bGUgb3IgcGFnZSBJZCBvZiB0aGUgcGFnZVxuICogQHBhcmFtIHJlZGlyZWN0IC0gV2hldGhlciB0byByZWRpcmVjdCBpbiBjYXNlIG9mIDMwMlxuICogQHJldHVybnMgVGhlIGluZm8gYXMgSlNPTiBvYmplY3RcbiAqL1xuY29uc3QgaW5mb2JveCA9IGFzeW5jICh0aXRsZSwgcmVkaXJlY3QgPSB0cnVlKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgaW5mb2JveE9wdGlvbnMgPSB7XG4gICAgICAgICAgICBwcm9wOiAncmV2aXNpb25zJyxcbiAgICAgICAgICAgIHJ2cHJvcDogJ2NvbnRlbnQnLFxuICAgICAgICAgICAgcnZzZWN0aW9uOiAwXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGZ1bGxJbmZvID0gYXdhaXQgKDAsIGV4cG9ydHMucmF3SW5mbykodGl0bGUsIGluZm9ib3hPcHRpb25zLCByZWRpcmVjdCk7XG4gICAgICAgIGNvbnN0IGluZm8gPSBpbmZvYm94UGFyc2VyKGZ1bGxJbmZvKS5nZW5lcmFsO1xuICAgICAgICByZXR1cm4gaW5mbztcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfMS5pbmZvYm94RXJyb3IoZXJyb3IpO1xuICAgIH1cbn07XG5leHBvcnRzLmluZm9ib3ggPSBpbmZvYm94O1xuLyoqXG4gKiBSZXR1cm5zIHRoZSB0YWJsZSBjb250ZW50IG9mIHBhZ2UgaWYgcHJlc2VudFxuICpcbiAqIEByZW1hcmtzXG4gKiBDYWxsZWQgaW4gcGFnZSBvYmplY3QgYW5kIGFsc28gdGhyb3VnaCB3aWtpIGRlZmF1bHQgb2JqZWN0XG4gKlxuICogQHBhcmFtIHRpdGxlIC0gVGhlIHRpdGxlIG9yIHBhZ2UgSWQgb2YgdGhlIHBhZ2VcbiAqIEBwYXJhbSByZWRpcmVjdCAtIFdoZXRoZXIgdG8gcmVkaXJlY3QgaW4gY2FzZSBvZiAzMDJcbiAqIEByZXR1cm5zIFRoZSB0YWJsZXMgYXMgYXJyYXlzIG9mIEpTT04gb2JqZWN0c1xuICovXG5jb25zdCB0YWJsZXMgPSBhc3luYyAodGl0bGUsIHJlZGlyZWN0ID0gdHJ1ZSkgPT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHRhYmxlT3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHByb3A6ICdyZXZpc2lvbnMnLFxuICAgICAgICAgICAgcnZwcm9wOiAnY29udGVudCcsXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGZ1bGxJbmZvID0gYXdhaXQgKDAsIGV4cG9ydHMucmF3SW5mbykodGl0bGUsIHRhYmxlT3B0aW9ucywgcmVkaXJlY3QpO1xuICAgICAgICBjb25zdCBpbmZvID0gaW5mb2JveFBhcnNlcihmdWxsSW5mbykudGFibGVzO1xuICAgICAgICByZXR1cm4gaW5mbztcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfMS5pbmZvYm94RXJyb3IoZXJyb3IpO1xuICAgIH1cbn07XG5leHBvcnRzLnRhYmxlcyA9IHRhYmxlcztcbi8qKlxuICogUmV0dXJucyB0aGUgcmF3IGluZm8gb2YgdGhlIHBhZ2VcbiAqXG4gKiBAcmVtYXJrc1xuICogVGhpcyBpcyBub3QgZXhwb3J0ZWQgYW5kIHVzZWQgaW50ZXJuYWxseVxuICpcbiAqIEBwYXJhbSB0aXRsZSAtIFRoZSB0aXRsZSBvciBwYWdlIElkIG9mIHRoZSBwYWdlXG4gKiBAcGFyYW0gcmVkaXJlY3QgLSBXaGV0aGVyIHRvIHJlZGlyZWN0IGluIGNhc2Ugb2YgMzAyXG4gKiBAcmV0dXJucyBUaGUgcmF3SW5mbyBvZiB0aGUgcGFnZVxuICpcbiAqL1xuY29uc3QgcmF3SW5mbyA9IGFzeW5jICh0aXRsZSwgb3B0aW9ucywgcmVkaXJlY3QgPSB0cnVlKSA9PiB7XG4gICAgdmFyIF9hO1xuICAgIHRyeSB7XG4gICAgICAgIG9wdGlvbnMgPSAoMCwgdXRpbHNfMS5zZXRQYWdlSWRPclRpdGxlUGFyYW0pKG9wdGlvbnMsIHRpdGxlKTtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCAoMCwgcmVxdWVzdF8xLmRlZmF1bHQpKG9wdGlvbnMsIHJlZGlyZWN0KTtcbiAgICAgICAgaWYgKCEoKF9hID0gcmVzcG9uc2UucXVlcnkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5wYWdlcykpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfMS53aWtpRXJyb3IobWVzc2FnZXNfMS5NU0dTLklORk9CT1hfTk9UX0VYSVNUKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwYWdlSWQgPSAoMCwgdXRpbHNfMS5zZXRQYWdlSWQpKG9wdGlvbnMsIHJlc3BvbnNlKTtcbiAgICAgICAgY29uc3QgZGF0YSA9IHJlc3BvbnNlLnF1ZXJ5LnBhZ2VzW3BhZ2VJZF1bJ3JldmlzaW9ucyddWzBdO1xuICAgICAgICByZXR1cm4gZGF0YSA/IGRhdGFbJyonXSA6ICcnO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLmluZm9ib3hFcnJvcihlcnJvcik7XG4gICAgfVxufTtcbmV4cG9ydHMucmF3SW5mbyA9IHJhd0luZm87XG4vL1JFU1QtQVBJIFJlcXVlc3RzIGJhc2VkIG9uIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy9hcGkvcmVzdF92MS8jL1xuLy9BUElzIHNlZW1zIHRvIHN1cHBvcnQgb25seSB0aXRsZSBwYXJhbWV0ZXJzIHdoaWNoIGlzIGEgZHJhd2JhY2tcbi8qKlxuICogUmV0dXJucyB0aGUgc3VtbWFyeSBvZiB0aGUgcGFnZVxuICpcbiAqIEByZW1hcmtzXG4gKiBDYWxsZWQgaW4gcGFnZSBvYmplY3QgYW5kIGFsc28gdGhyb3VnaCB3aWtpIGRlZmF1bHQgb2JqZWN0XG4gKlxuICogQHBhcmFtIHRpdGxlIC0gVGhlIHRpdGxlIG9yIHBhZ2UgSWQgb2YgdGhlIHBhZ2VcbiAqIEBwYXJhbSByZWRpcmVjdCAtIFdoZXRoZXIgdG8gcmVkaXJlY3QgaW4gY2FzZSBvZiAzMDJcbiAqIEByZXR1cm5zIFRoZSBzdW1tYXJ5IG9mIHRoZSBwYWdlIGFzIHtAbGluayB3aWtpU3VtbWFyeSB8IHdpa2lTdW1tYXJ5fVxuICovXG5jb25zdCBzdW1tYXJ5ID0gYXN5bmMgKHRpdGxlLCByZWRpcmVjdCA9IHRydWUpID0+IHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBwYXRoID0gJ3BhZ2Uvc3VtbWFyeS8nICsgdGl0bGUucmVwbGFjZShcIiBcIiwgXCJfXCIpO1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0ICgwLCByZXF1ZXN0XzEubWFrZVJlc3RSZXF1ZXN0KShwYXRoLCByZWRpcmVjdCk7XG4gICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfMS5zdW1tYXJ5RXJyb3IoZXJyb3IpO1xuICAgIH1cbn07XG5leHBvcnRzLnN1bW1hcnkgPSBzdW1tYXJ5O1xuLyoqXG4gKiBSZXR1cm5zIHN1bW1hcmllcyBmb3IgMjAgcGFnZXMgcmVsYXRlZCB0byB0aGUgZ2l2ZW4gcGFnZS4gU3VtbWFyaWVzIGluY2x1ZGUgcGFnZSB0aXRsZSwgbmFtZXNwYWNlXG4gKiBhbmQgaWQgYWxvbmcgd2l0aCBzaG9ydCB0ZXh0IGRlc2NyaXB0aW9uIG9mIHRoZSBwYWdlIGFuZCBhIHRodW1ibmFpbC5cbiAqXG4gKiBAcmVtYXJrc1xuICogQ2FsbGVkIGluIHBhZ2Ugb2JqZWN0IGFuZCBhbHNvIHRocm91Z2ggaW5kZXhcbiAqXG4gKiBAcGFyYW0gdGl0bGUgLSBUaGUgdGl0bGUgb3IgcGFnZSBJZCBvZiB0aGUgcGFnZVxuICogQHBhcmFtIHJlZGlyZWN0IC0gV2hldGhlciB0byByZWRpcmVjdCBpbiBjYXNlIG9mIDMwMlxuICogQHJldHVybnMgVGhlIHJlbGF0ZWQgcGFnZXMgYW5kIHN1bW1hcnkgYXMgYW4gYXJyYXkgb2Yge0BsaW5rIHdpa2lTdW1tYXJ5IHwgd2lraVN1bW1hcnl9XG4gKlxuICogQGV4cGVyaW1lbnRhbFxuICovXG5jb25zdCByZWxhdGVkID0gYXN5bmMgKHRpdGxlLCByZWRpcmVjdCA9IHRydWUpID0+IHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBwYXRoID0gJ3BhZ2UvcmVsYXRlZC8nICsgdGl0bGUucmVwbGFjZShcIiBcIiwgXCJfXCIpO1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0ICgwLCByZXF1ZXN0XzEubWFrZVJlc3RSZXF1ZXN0KShwYXRoLCByZWRpcmVjdCk7XG4gICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfMS5yZWxhdGVkRXJyb3IoZXJyb3IpO1xuICAgIH1cbn07XG5leHBvcnRzLnJlbGF0ZWQgPSByZWxhdGVkO1xuLyoqXG4gKiBHZXRzIHRoZSBsaXN0IG9mIG1lZGlhIGl0ZW1zIChpbWFnZXMsIGF1ZGlvLCBhbmQgdmlkZW8pIGluIHRoZVxuICogb3JkZXIgaW4gd2hpY2ggdGhleSBhcHBlYXIgb24gYSBnaXZlbiB3aWtpIHBhZ2UuXG4gKlxuICogQHJlbWFya3NcbiAqIENhbGxlZCBpbiBwYWdlIG9iamVjdCBhbmQgYWxzbyB0aHJvdWdoIGluZGV4XG4gKlxuICogQHBhcmFtIHRpdGxlIC0gVGhlIHRpdGxlIG9yIHBhZ2UgSWQgb2YgdGhlIHBhZ2VcbiAqIEBwYXJhbSByZWRpcmVjdCAtIFdoZXRoZXIgdG8gcmVkaXJlY3QgaW4gY2FzZSBvZiAzMDJcbiAqIEByZXR1cm5zIFRoZSByZWxhdGVkIHBhZ2VzIGFuZCBzdW1tYXJ5IGFzIGFuIGFycmF5IG9mIHtAbGluayB3aWtpTWVkaWFSZXN1bHQgfCB3aWtpTWVkaWFSZXN1bHR9XG4gKlxuICogQGV4cGVyaW1lbnRhbFxuICovXG5jb25zdCBtZWRpYSA9IGFzeW5jICh0aXRsZSwgcmVkaXJlY3QgPSB0cnVlKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgcGF0aCA9ICdwYWdlL21lZGlhLWxpc3QvJyArIHRpdGxlLnJlcGxhY2UoXCIgXCIsIFwiX1wiKTtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCAoMCwgcmVxdWVzdF8xLm1ha2VSZXN0UmVxdWVzdCkocGF0aCwgcmVkaXJlY3QpO1xuICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEubWVkaWFFcnJvcihlcnJvcik7XG4gICAgfVxufTtcbmV4cG9ydHMubWVkaWEgPSBtZWRpYTtcbi8qKlxuICogUmV0dXJucyBtb2JpbGUtb3B0aW1pc2VkIEhUTUwgb2YgYSBwYWdlXG4gKlxuICogQHBhcmFtIHRpdGxlIC0gVGhlIHRpdGxlIG9mIHRoZSBwYWdlIHRvIHF1ZXJ5XG4gKiBAcGFyYW0gcmVkaXJlY3QgLSBXaGV0aGVyIHRvIHJlZGlyZWN0IGluIGNhc2Ugb2YgMzAyXG4gKiBAcmV0dXJucyBSZXR1cm5zIEhUTUwgc3RyaW5nXG4gKi9cbmNvbnN0IG1vYmlsZUh0bWwgPSBhc3luYyAodGl0bGUsIHJlZGlyZWN0ID0gdHJ1ZSkgPT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHBhdGggPSBgcGFnZS9tb2JpbGUtaHRtbC8ke3RpdGxlfWA7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0ICgwLCByZXF1ZXN0XzEubWFrZVJlc3RSZXF1ZXN0KShwYXRoLCByZWRpcmVjdCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuaHRtbEVycm9yKGVycm9yKTtcbiAgICB9XG59O1xuZXhwb3J0cy5tb2JpbGVIdG1sID0gbW9iaWxlSHRtbDtcbi8qKlxuICogUmV0dXJucyBwZGYgb2YgYSBnaXZlbiBwYWdlXG4gKlxuICogQHBhcmFtIHRpdGxlIC0gVGhlIHRpdGxlIG9mIHRoZSBwYWdlIHRvIHF1ZXJ5XG4gKiBAcGFyYW0gcGRmT3B0aW9ucyAtIHtAbGluayBwZGZPcHRpb25zIHwgcGRmT3B0aW9ucyB9XG4gKiBAcmV0dXJucyBSZXR1cm5zIHBkZiBmb3JtYXRcbiAqL1xuY29uc3QgcGRmID0gYXN5bmMgKHRpdGxlLCBwZGZPcHRpb25zKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgbGV0IHBhdGggPSBgcGFnZS9wZGYvJHt0aXRsZX1gO1xuICAgICAgICAocGRmT3B0aW9ucyA9PT0gbnVsbCB8fCBwZGZPcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwZGZPcHRpb25zLmZvcm1hdCkgPyBwYXRoICs9IGAvJHtwZGZPcHRpb25zLmZvcm1hdH1gIDogbnVsbDtcbiAgICAgICAgKHBkZk9wdGlvbnMgPT09IG51bGwgfHwgcGRmT3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGRmT3B0aW9ucy50eXBlKSA/IHBhdGggKz0gYC8ke3BkZk9wdGlvbnMudHlwZX1gIDogbnVsbDtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gKDAsIHJlcXVlc3RfMS5yZXR1cm5SZXN0VXJsKShwYXRoKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfMS5wZGZFcnJvcihlcnJvcik7XG4gICAgfVxufTtcbmV4cG9ydHMucGRmID0gcGRmO1xuLyoqXG4gKiBSZXR1cm5zIGNpdGF0aW9uIG9mIGEgZ2l2ZW4gcGFnZSwgb3IgcXVlcnkgc3RyaW5nXG4gKlxuICogQHBhcmFtIGZvcm1hdCAtIHRoZSBmb3JtYXQgb2YgdGhlIGNpdGF0aW9uIHJlc3VsdFxuICogQHBhcmFtIHF1ZXJ5IC0gdXJsIG9yIHF1ZXJ5IHN0cmluZ1xuICogQHBhcmFtIGxhbmd1YWdlIC0gaWYgeW91IHdhbnQgbGFudWFnZSBlbmFibGVkIHJlc3VsdHNcbiAqIEByZXR1cm5zIFJldHVybnMgY2lhdGlvbiBkYXRhXG4gKi9cbmNvbnN0IGNpdGF0aW9uID0gYXN5bmMgKHF1ZXJ5LCBmb3JtYXQsIGxhbmd1YWdlKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgbGV0IHBhdGggPSBgZGF0YS9jaXRhdGlvbmA7XG4gICAgICAgIHBhdGggKz0gZm9ybWF0ID8gYC8ke2Zvcm1hdH1gIDogYC9tZWRpYXdpa2lgO1xuICAgICAgICBwYXRoICs9IGAvJHtxdWVyeX1gO1xuICAgICAgICBsYW5ndWFnZSA/IHBhdGggKz0gYC8ke2xhbmd1YWdlfWAgOiBudWxsO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCAoMCwgcmVxdWVzdF8xLm1ha2VSZXN0UmVxdWVzdCkocGF0aCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuY2l0YXRpb25FcnJvcihlcnJvcik7XG4gICAgfVxufTtcbmV4cG9ydHMuY2l0YXRpb24gPSBjaXRhdGlvbjtcbmV4cG9ydHMuZGVmYXVsdCA9IFBhZ2U7XG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IHJlcXVlc3RfMSA9IHJlcXVpcmUoXCIuL3JlcXVlc3RcIik7XG5jb25zdCBwYWdlXzEgPSByZXF1aXJlKFwiLi9wYWdlXCIpO1xuY29uc3QgZXJyb3JzXzEgPSByZXF1aXJlKFwiLi9lcnJvcnNcIik7XG5jb25zdCBtZXNzYWdlc18xID0gcmVxdWlyZShcIi4vbWVzc2FnZXNcIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG4vKipcbiAqIFRoZSBkZWZhdWx0IHdpa2kgZXhwb3J0XG4gKlxuICogQHJlbWFya3NcbiAqIEludGVybmFsbHkgY2FsbHMgd2lraS5wYWdlXG4gKlxuICovXG5jb25zdCB3aWtpID0gYXN5bmMgKHRpdGxlLCBwYWdlT3B0aW9ucykgPT4ge1xuICAgIHJldHVybiB3aWtpLnBhZ2UodGl0bGUsIHBhZ2VPcHRpb25zKTtcbn07XG4vKipcbiAqIFJldHVybnMgdGhlIHNlYXJjaCByZXN1bHRzIGZvciBhIGdpdmVuIHF1ZXJ5XG4gKlxuICogQHJlbWFya3NcbiAqIExpbWl0cyByZXN1bHRzIGJ5IGRlZmF1bHQgdG8gMTBcbiAqXG4gKiBAcGFyYW0gcXVlcnkgLSBUaGUgc3RyaW5nIHRvIHNlYXJjaCBmb3JcbiAqIEBwYXJhbSBzZWFyY2hPcHRpb25zIC0gVGhlIG51bWJlciBvZiByZXN1bHRzIGFuZCBpZiBzdWdnZXN0aW9uIG5lZWRlZCB7QGxpbmsgc2VhcmNoT3B0aW9ucyB8IHNlYXJjaE9wdGlvbnMgfVxuICogQHJldHVybnMgYW4gYXJyYXkgb2Yge0BsaW5rIHdpa2lTZWFyY2hSZXN1bHQgfCB3aWtpU2VhcmNoUmVzdWx0IH1cbiAqL1xud2lraS5zZWFyY2ggPSBhc3luYyAocXVlcnksIHNlYXJjaE9wdGlvbnMpID0+IHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBzZWFyY2hQYXJhbXMgPSB7XG4gICAgICAgICAgICAnbGlzdCc6ICdzZWFyY2gnLFxuICAgICAgICAgICAgJ3NycHJvcCc6ICcnLFxuICAgICAgICAgICAgJ3NybGltaXQnOiAoc2VhcmNoT3B0aW9ucyA9PT0gbnVsbCB8fCBzZWFyY2hPcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzZWFyY2hPcHRpb25zLmxpbWl0KSB8fCAxMCxcbiAgICAgICAgICAgICdzcnNlYXJjaCc6IHF1ZXJ5XG4gICAgICAgIH07XG4gICAgICAgIChzZWFyY2hPcHRpb25zID09PSBudWxsIHx8IHNlYXJjaE9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHNlYXJjaE9wdGlvbnMuc3VnZ2VzdGlvbikgPyBzZWFyY2hQYXJhbXNbJ3NyaW5mbyddID0gJ3N1Z2dlc3Rpb24nIDogbnVsbDtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCAoMCwgcmVxdWVzdF8xLmRlZmF1bHQpKHNlYXJjaFBhcmFtcyk7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHtcbiAgICAgICAgICAgIHJlc3VsdHM6IHJlc3BvbnNlLnF1ZXJ5LnNlYXJjaCxcbiAgICAgICAgICAgIHN1Z2dlc3Rpb246IHJlc3BvbnNlLnF1ZXJ5LnNlYXJjaGluZm8gPyByZXNwb25zZS5xdWVyeS5zZWFyY2hpbmZvLnN1Z2dlc3Rpb24gOiBudWxsXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuc2VhcmNoRXJyb3IoZXJyb3IpO1xuICAgIH1cbn07XG4vKipcbiAqIFJldHVybnMgdGhlIHBhZ2UgZm9yIGEgZ2l2ZW4gdGl0bGUgb3Igc3RyaW5nXG4gKlxuICogQHJlbWFya3NcbiAqIENhbGwgdGhpcyBtZXRob2QgdG8gZ2V0IHRoZSBiYXNpYyBpbmZvIGZvciBwYWdlIGFuZCBhbHNvIHRvIHByZWxvYWQgYW55IHBhcmFtcyB5b3UgbWlnaHQgdXNlIGluIGZ1dHVyZVxuICpcbiAqIEBwYXJhbSB0aXRsZSAtIFRoZSB0aXRsZSBvciBwYWdlIElkIG9mIHRoZSBwYWdlXG4gKiBAcGFyYW0gcGFnZU9wdGlvbnMgLSBXaGV0aGVyIHRvIHJlZGlyZWN0LCBhdXRvU3VnZ2VzdCBvciBwcmVsb2FkIGFueSBmaWVsZHMge0BsaW5rIHBhZ2VPcHRpb25zIHwgcGFnZU9wdGlvbnMgfVxuICogQHJldHVybnMgVGhlIGludHJvIHN0cmluZ1xuICovXG53aWtpLnBhZ2UgPSBhc3luYyAodGl0bGUsIHBhZ2VPcHRpb25zKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHBhZ2VPcHRpb25zID09PSBudWxsIHx8IHBhZ2VPcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwYWdlT3B0aW9ucy5hdXRvU3VnZ2VzdCkge1xuICAgICAgICAgICAgdGl0bGUgPSBhd2FpdCAoMCwgdXRpbHNfMS5zZXRUaXRsZUZvclBhZ2UpKHRpdGxlKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgcGFnZVBhcmFtcyA9IHtcbiAgICAgICAgICAgIHByb3A6ICdpbmZvfHBhZ2Vwcm9wcycsXG4gICAgICAgICAgICBpbnByb3A6ICd1cmwnLFxuICAgICAgICAgICAgcHBwcm9wOiAnZGlzYW1iaWd1YXRpb24nLFxuICAgICAgICB9O1xuICAgICAgICBwYWdlUGFyYW1zID0gKDAsIHV0aWxzXzEuc2V0UGFnZUlkT3JUaXRsZVBhcmFtKShwYWdlUGFyYW1zLCB0aXRsZSk7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgKDAsIHJlcXVlc3RfMS5kZWZhdWx0KShwYWdlUGFyYW1zKTtcbiAgICAgICAgbGV0IHBhZ2VJbmZvID0gcmVzcG9uc2UucXVlcnkucGFnZXM7XG4gICAgICAgIGNvbnN0IHBhZ2VJZCA9ICgwLCB1dGlsc18xLnNldFBhZ2VJZCkocGFnZVBhcmFtcywgcmVzcG9uc2UpO1xuICAgICAgICBwYWdlSW5mbyA9IHBhZ2VJbmZvW3BhZ2VJZF07XG4gICAgICAgIGlmIChwYWdlSW5mby5taXNzaW5nID09ICcnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEucGFnZUVycm9yKGAke21lc3NhZ2VzXzEuTVNHUy5QQUdFX05PVF9FWElTVH0ke3RpdGxlfWApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBhZ2UgPSBuZXcgcGFnZV8xLmRlZmF1bHQocGFnZUluZm8pO1xuICAgICAgICBpZiAocGFnZU9wdGlvbnMgPT09IG51bGwgfHwgcGFnZU9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBhZ2VPcHRpb25zLnByZWxvYWQpIHtcbiAgICAgICAgICAgIGlmICghKHBhZ2VPcHRpb25zID09PSBudWxsIHx8IHBhZ2VPcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwYWdlT3B0aW9ucy5maWVsZHMpKSB7XG4gICAgICAgICAgICAgICAgcGFnZU9wdGlvbnMuZmllbGRzID0gWydzdW1tYXJ5JywgJ2ltYWdlcyddO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChjb25zdCBmaWVsZCBvZiBwYWdlT3B0aW9ucy5maWVsZHMpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCBwYWdlLnJ1bk1ldGhvZChmaWVsZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBhZ2U7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEucGFnZUVycm9yKGVycm9yKTtcbiAgICB9XG59O1xuLyoqXG4gKiBSZXR1cm5zIHRoZSBpbnRybyBwcmVzZW50IGluIGEgd2lraSBwYWdlXG4gKlxuICogQHJlbWFya3NcbiAqIENhbGxlZCBpbiBwYWdlIG9iamVjdCBhbmQgYWxzbyB0aHJvdWdoIHdpa2kgZGVmYXVsdCBvYmplY3RcbiAqXG4gKiBAcGFyYW0gdGl0bGUgLSBUaGUgdGl0bGUgb3IgcGFnZSBJZCBvZiB0aGUgcGFnZVxuICogQHBhcmFtIHBhZ2VPcHRpb25zIC0gV2hldGhlciB0byByZWRpcmVjdCBpbiBjYXNlIG9mIDMwMlxuICogQHJldHVybnMgVGhlIGludHJvIHN0cmluZ1xuICovXG53aWtpLmludHJvID0gYXN5bmMgKHRpdGxlLCBwYWdlT3B0aW9ucykgPT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGlmIChwYWdlT3B0aW9ucyA9PT0gbnVsbCB8fCBwYWdlT3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGFnZU9wdGlvbnMuYXV0b1N1Z2dlc3QpIHtcbiAgICAgICAgICAgIHRpdGxlID0gYXdhaXQgKDAsIHV0aWxzXzEuc2V0VGl0bGVGb3JQYWdlKSh0aXRsZSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgKDAsIHBhZ2VfMS5pbnRybykodGl0bGUsIHBhZ2VPcHRpb25zID09PSBudWxsIHx8IHBhZ2VPcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwYWdlT3B0aW9ucy5yZWRpcmVjdCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuaW50cm9FcnJvcihlcnJvcik7XG4gICAgfVxufTtcbi8qKlxuICogUmV0dXJucyB0aGUgaW1hZ2VzIHByZXNlbnQgaW4gYSB3aWtpIHBhZ2VcbiAqXG4gKiBAcmVtYXJrc1xuICogQ2FsbGVkIGluIHBhZ2Ugb2JqZWN0IGFuZCBhbHNvIHRocm91Z2ggd2lraSBkZWZhdWx0IG9iamVjdFxuICpcbiAqIEBwYXJhbSB0aXRsZSAtIFRoZSB0aXRsZSBvciBwYWdlIElkIG9mIHRoZSBwYWdlXG4gKiBAcGFyYW0gbGlzdE9wdGlvbnMgLSB7QGxpbmsgbGlzdE9wdGlvbnMgfCBsaXN0T3B0aW9ucyB9XG4gKiBAcmV0dXJucyBhbiBhcnJheSBvZiBpbWFnZVJlc3VsdCB7QGxpbmsgaW1hZ2VSZXN1bHQgfCBpbWFnZVJlc3VsdCB9XG4gKi9cbndpa2kuaW1hZ2VzID0gYXN5bmMgKHRpdGxlLCBsaXN0T3B0aW9ucykgPT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGlmIChsaXN0T3B0aW9ucyA9PT0gbnVsbCB8fCBsaXN0T3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogbGlzdE9wdGlvbnMuYXV0b1N1Z2dlc3QpIHtcbiAgICAgICAgICAgIHRpdGxlID0gYXdhaXQgKDAsIHV0aWxzXzEuc2V0VGl0bGVGb3JQYWdlKSh0aXRsZSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgKDAsIHBhZ2VfMS5pbWFnZXMpKHRpdGxlLCBsaXN0T3B0aW9ucyk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuaW1hZ2VFcnJvcihlcnJvcik7XG4gICAgfVxufTtcbi8qKlxuICogUmV0dXJucyB0aGUgc3VtbWFyeSBvZiB0aGUgcGFnZVxuICpcbiAqIEByZW1hcmtzXG4gKiBDYWxsZWQgaW4gcGFnZSBvYmplY3QgYW5kIGFsc28gdGhyb3VnaCB3aWtpIGRlZmF1bHQgb2JqZWN0XG4gKlxuICogQHBhcmFtIHRpdGxlIC0gVGhlIHRpdGxlIG9yIHBhZ2UgSWQgb2YgdGhlIHBhZ2VcbiAqIEBwYXJhbSBwYWdlT3B0aW9ucyAtIFdoZXRoZXIgdG8gcmVkaXJlY3QgaW4gY2FzZSBvZiAzMDJcbiAqIEByZXR1cm5zIFRoZSBzdW1tYXJ5IG9mIHRoZSBwYWdlIGFzIHtAbGluayB3aWtpU3VtbWFyeSB8IHdpa2lTdW1tYXJ5fVxuICovXG53aWtpLnN1bW1hcnkgPSBhc3luYyAodGl0bGUsIHBhZ2VPcHRpb25zKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHBhZ2VPcHRpb25zID09PSBudWxsIHx8IHBhZ2VPcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwYWdlT3B0aW9ucy5hdXRvU3VnZ2VzdCkge1xuICAgICAgICAgICAgdGl0bGUgPSBhd2FpdCAoMCwgdXRpbHNfMS5zZXRUaXRsZUZvclBhZ2UpKHRpdGxlKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCAoMCwgcGFnZV8xLnN1bW1hcnkpKHRpdGxlLCBwYWdlT3B0aW9ucyA9PT0gbnVsbCB8fCBwYWdlT3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGFnZU9wdGlvbnMucmVkaXJlY3QpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLnN1bW1hcnlFcnJvcihlcnJvcik7XG4gICAgfVxufTtcbi8qKlxuICogUmV0dXJucyB0aGUgaHRtbCBjb250ZW50IG9mIGEgcGFnZVxuICpcbiAqIEByZW1hcmtzXG4gKiBDYWxsZWQgaW4gcGFnZSBvYmplY3QgYW5kIGFsc28gdGhyb3VnaCB3aWtpIGRlZmF1bHQgb2JqZWN0XG4gKlxuICogQHBhcmFtIHRpdGxlIC0gVGhlIHRpdGxlIG9yIHBhZ2UgSWQgb2YgdGhlIHBhZ2VcbiAqIEBwYXJhbSBwYWdlT3B0aW9ucyAtIFdoZXRoZXIgdG8gcmVkaXJlY3QgaW4gY2FzZSBvZiAzMDJcbiAqIEByZXR1cm5zIFRoZSBodG1sIGNvbnRlbnQgYXMgc3RyaW5nXG4gKlxuICogQGJldGFcbiAqL1xud2lraS5odG1sID0gYXN5bmMgKHRpdGxlLCBwYWdlT3B0aW9ucykgPT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGlmIChwYWdlT3B0aW9ucyA9PT0gbnVsbCB8fCBwYWdlT3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGFnZU9wdGlvbnMuYXV0b1N1Z2dlc3QpIHtcbiAgICAgICAgICAgIHRpdGxlID0gYXdhaXQgKDAsIHV0aWxzXzEuc2V0VGl0bGVGb3JQYWdlKSh0aXRsZSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgKDAsIHBhZ2VfMS5odG1sKSh0aXRsZSwgcGFnZU9wdGlvbnMgPT09IG51bGwgfHwgcGFnZU9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBhZ2VPcHRpb25zLnJlZGlyZWN0KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfMS5odG1sRXJyb3IoZXJyb3IpO1xuICAgIH1cbn07XG4vKipcbiAqIFJldHVybnMgdGhlIHBsYWluIHRleHQgY29udGVudCBvZiBhIHBhZ2VcbiAqXG4gKiBAcmVtYXJrc1xuICogQ2FsbGVkIGluIHBhZ2Ugb2JqZWN0IGFuZCBhbHNvIHRocm91Z2ggd2lraSBkZWZhdWx0IG9iamVjdFxuICpcbiAqIEBwYXJhbSB0aXRsZSAtIFRoZSB0aXRsZSBvciBwYWdlIElkIG9mIHRoZSBwYWdlXG4gKiBAcGFyYW0gcGFnZU9wdGlvbnMgLSBXaGV0aGVyIHRvIHJlZGlyZWN0IGluIGNhc2Ugb2YgMzAyXG4gKiBAcmV0dXJucyBUaGUgcGxhaW4gdGV4dCBhcyBzdHJpbmcgYW5kIHRoZSBwYXJlbnQgYW5kIHJldmlzaW9uIGlkc1xuICovXG53aWtpLmNvbnRlbnQgPSBhc3luYyAodGl0bGUsIHBhZ2VPcHRpb25zKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHBhZ2VPcHRpb25zID09PSBudWxsIHx8IHBhZ2VPcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwYWdlT3B0aW9ucy5hdXRvU3VnZ2VzdCkge1xuICAgICAgICAgICAgdGl0bGUgPSBhd2FpdCAoMCwgdXRpbHNfMS5zZXRUaXRsZUZvclBhZ2UpKHRpdGxlKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0ICgwLCBwYWdlXzEuY29udGVudCkodGl0bGUsIHBhZ2VPcHRpb25zID09PSBudWxsIHx8IHBhZ2VPcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwYWdlT3B0aW9ucy5yZWRpcmVjdCk7XG4gICAgICAgIHJldHVybiByZXNwb25zZS5yZXN1bHQ7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuY29udGVudEVycm9yKGVycm9yKTtcbiAgICB9XG59O1xuLyoqXG4gKiBSZXR1cm5zIHRoZSBjZXRlZ29yaWVzIHByZXNlbnQgaW4gcGFnZVxuICpcbiAqIEByZW1hcmtzXG4gKiBDYWxsZWQgaW4gcGFnZSBvYmplY3QgYW5kIGFsc28gdGhyb3VnaCB3aWtpIGRlZmF1bHQgb2JqZWN0XG4gKlxuICogQHBhcmFtIHRpdGxlIC0gVGhlIHRpdGxlIG9yIHBhZ2UgSWQgb2YgdGhlIHBhZ2VcbiAqIEBwYXJhbSBsaXN0T3B0aW9ucyAtIHtAbGluayBsaXN0T3B0aW9ucyB8IGxpc3RPcHRpb25zIH1cbiAqIEByZXR1cm5zIFRoZSBjYXRlZ29yaWVzIGFzIGFuIGFycmF5IG9mIHN0cmluZ1xuICovXG53aWtpLmNhdGVnb3JpZXMgPSBhc3luYyAodGl0bGUsIGxpc3RPcHRpb25zKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKGxpc3RPcHRpb25zID09PSBudWxsIHx8IGxpc3RPcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBsaXN0T3B0aW9ucy5hdXRvU3VnZ2VzdCkge1xuICAgICAgICAgICAgdGl0bGUgPSBhd2FpdCAoMCwgdXRpbHNfMS5zZXRUaXRsZUZvclBhZ2UpKHRpdGxlKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0ICgwLCBwYWdlXzEuY2F0ZWdvcmllcykodGl0bGUsIGxpc3RPcHRpb25zKTtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLmNhdGVnb3JpZXNFcnJvcihlcnJvcik7XG4gICAgfVxufTtcbi8qKlxuICogUmV0dXJucyBzdW1tYXJpZXMgZm9yIDIwIHBhZ2VzIHJlbGF0ZWQgdG8gdGhlIGdpdmVuIHBhZ2UuIFN1bW1hcmllcyBpbmNsdWRlIHBhZ2UgdGl0bGUsIG5hbWVzcGFjZVxuICogYW5kIGlkIGFsb25nIHdpdGggc2hvcnQgdGV4dCBkZXNjcmlwdGlvbiBvZiB0aGUgcGFnZSBhbmQgYSB0aHVtYm5haWwuXG4gKlxuICogQHJlbWFya3NcbiAqIENhbGxlZCBpbiBwYWdlIG9iamVjdCBhbmQgYWxzbyB0aHJvdWdoIGluZGV4XG4gKlxuICogQHBhcmFtIHRpdGxlIC0gVGhlIHRpdGxlIG9yIHBhZ2UgSWQgb2YgdGhlIHBhZ2VcbiAqIEBwYXJhbSBwYWdlT3B0aW9ucyAtIFdoZXRoZXIgdG8gcmVkaXJlY3QgaW4gY2FzZSBvZiAzMDJcbiAqIEByZXR1cm5zIFRoZSByZWxhdGVkIHBhZ2VzIGFuZCBzdW1tYXJ5IGFzIGFuIGFycmF5IG9mIHtAbGluayB3aWtpU3VtbWFyeSB8IHdpa2lTdW1tYXJ5fVxuICpcbiAqIEBleHBlcmltZW50YWxcbiAqL1xud2lraS5yZWxhdGVkID0gYXN5bmMgKHRpdGxlLCBwYWdlT3B0aW9ucykgPT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGlmIChwYWdlT3B0aW9ucyA9PT0gbnVsbCB8fCBwYWdlT3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGFnZU9wdGlvbnMuYXV0b1N1Z2dlc3QpIHtcbiAgICAgICAgICAgIHRpdGxlID0gYXdhaXQgKDAsIHV0aWxzXzEuc2V0VGl0bGVGb3JQYWdlKSh0aXRsZSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCAoMCwgcGFnZV8xLnJlbGF0ZWQpKHRpdGxlLCBwYWdlT3B0aW9ucyA9PT0gbnVsbCB8fCBwYWdlT3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGFnZU9wdGlvbnMucmVkaXJlY3QpO1xuICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEucmVsYXRlZEVycm9yKGVycm9yKTtcbiAgICB9XG59O1xuLyoqXG4gKiBHZXRzIHRoZSBsaXN0IG9mIG1lZGlhIGl0ZW1zIChpbWFnZXMsIGF1ZGlvLCBhbmQgdmlkZW8pIGluIHRoZVxuICogb3JkZXIgaW4gd2hpY2ggdGhleSBhcHBlYXIgb24gYSBnaXZlbiB3aWtpIHBhZ2UuXG4gKlxuICogQHJlbWFya3NcbiAqIENhbGxlZCBpbiBwYWdlIG9iamVjdCBhbmQgYWxzbyB0aHJvdWdoIGluZGV4XG4gKlxuICogQHBhcmFtIHRpdGxlIC0gVGhlIHRpdGxlIG9yIHBhZ2UgSWQgb2YgdGhlIHBhZ2VcbiAqIEBwYXJhbSByZWRpcmVjdCAtIFdoZXRoZXIgdG8gcmVkaXJlY3QgaW4gY2FzZSBvZiAzMDJcbiAqIEByZXR1cm5zIFRoZSByZWxhdGVkIHBhZ2VzIGFuZCBzdW1tYXJ5IGFzIGFuIGFycmF5IG9mIHtAbGluayB3aWtpTWVkaWFSZXN1bHQgfCB3aWtpTWVkaWFSZXN1bHR9XG4gKlxuICogQGV4cGVyaW1lbnRhbFxuICovXG53aWtpLm1lZGlhID0gYXN5bmMgKHRpdGxlLCBwYWdlT3B0aW9ucykgPT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGlmIChwYWdlT3B0aW9ucyA9PT0gbnVsbCB8fCBwYWdlT3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGFnZU9wdGlvbnMuYXV0b1N1Z2dlc3QpIHtcbiAgICAgICAgICAgIHRpdGxlID0gYXdhaXQgKDAsIHV0aWxzXzEuc2V0VGl0bGVGb3JQYWdlKSh0aXRsZSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCAoMCwgcGFnZV8xLm1lZGlhKSh0aXRsZSwgcGFnZU9wdGlvbnMgPT09IG51bGwgfHwgcGFnZU9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBhZ2VPcHRpb25zLnJlZGlyZWN0KTtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLm1lZGlhRXJyb3IoZXJyb3IpO1xuICAgIH1cbn07XG4vKipcbiAqIFJldHVybnMgdGhlIGxpbmtzIHByZXNlbnQgaW4gcGFnZVxuICpcbiAqIEByZW1hcmtzXG4gKiBDYWxsZWQgaW4gcGFnZSBvYmplY3QgYW5kIGFsc28gdGhyb3VnaCB3aWtpIGRlZmF1bHQgb2JqZWN0XG4gKlxuICogQHBhcmFtIHRpdGxlIC0gVGhlIHRpdGxlIG9yIHBhZ2UgSWQgb2YgdGhlIHBhZ2VcbiAqIEBwYXJhbSBsaXN0T3B0aW9ucyAtIHtAbGluayBsaXN0T3B0aW9ucyB8IGxpc3RPcHRpb25zIH1cbiAqIEByZXR1cm5zIFRoZSBsaW5rcyBhcyBhbiBhcnJheSBvZiBzdHJpbmdcbiAqL1xud2lraS5saW5rcyA9IGFzeW5jICh0aXRsZSwgbGlzdE9wdGlvbnMpID0+IHtcbiAgICB0cnkge1xuICAgICAgICBpZiAobGlzdE9wdGlvbnMgPT09IG51bGwgfHwgbGlzdE9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGxpc3RPcHRpb25zLmF1dG9TdWdnZXN0KSB7XG4gICAgICAgICAgICB0aXRsZSA9IGF3YWl0ICgwLCB1dGlsc18xLnNldFRpdGxlRm9yUGFnZSkodGl0bGUpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgKDAsIHBhZ2VfMS5saW5rcykodGl0bGUsIGxpc3RPcHRpb25zKTtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLmxpbmtzRXJyb3IoZXJyb3IpO1xuICAgIH1cbn07XG4vKipcbiAqIFJldHVybnMgdGhlIHJlZmVyZW5jZXMgb2YgZXh0ZXJuYWwgbGlua3MgcHJlc2VudCBpbiBwYWdlXG4gKlxuICogQHJlbWFya3NcbiAqIENhbGxlZCBpbiBwYWdlIG9iamVjdCBhbmQgYWxzbyB0aHJvdWdoIHdpa2kgZGVmYXVsdCBvYmplY3RcbiAqXG4gKiBAcGFyYW0gdGl0bGUgLSBUaGUgdGl0bGUgb3IgcGFnZSBJZCBvZiB0aGUgcGFnZVxuICogQHBhcmFtIGxpc3RPcHRpb25zIC0ge0BsaW5rIGxpc3RPcHRpb25zIHwgbGlzdE9wdGlvbnMgfVxuICogQHJldHVybnMgVGhlIHJlZmVyZW5jZXMgYXMgYW4gYXJyYXkgb2Ygc3RyaW5nXG4gKi9cbndpa2kucmVmZXJlbmNlcyA9IGFzeW5jICh0aXRsZSwgbGlzdE9wdGlvbnMpID0+IHtcbiAgICB0cnkge1xuICAgICAgICBpZiAobGlzdE9wdGlvbnMgPT09IG51bGwgfHwgbGlzdE9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGxpc3RPcHRpb25zLmF1dG9TdWdnZXN0KSB7XG4gICAgICAgICAgICB0aXRsZSA9IGF3YWl0ICgwLCB1dGlsc18xLnNldFRpdGxlRm9yUGFnZSkodGl0bGUpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgKDAsIHBhZ2VfMS5yZWZlcmVuY2VzKSh0aXRsZSwgbGlzdE9wdGlvbnMpO1xuICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEubGlua3NFcnJvcihlcnJvcik7XG4gICAgfVxufTtcbi8qKlxuICogUmV0dXJucyB0aGUgY29vcmRpbmF0ZXMgb2YgYSBwYWdlXG4gKlxuICogQHJlbWFya3NcbiAqIENhbGxlZCBpbiBwYWdlIG9iamVjdCBhbmQgYWxzbyB0aHJvdWdoIHdpa2kgZGVmYXVsdCBvYmplY3RcbiAqXG4gKiBAcGFyYW0gdGl0bGUgLSBUaGUgdGl0bGUgb3IgcGFnZSBJZCBvZiB0aGUgcGFnZVxuICogQHBhcmFtIHBhZ2VPcHRpb25zIC0gV2hldGhlciB0byByZWRpcmVjdCBpbiBjYXNlIG9mIDMwMlxuICogQHJldHVybnMgVGhlIGNvb3JkaW5hdGVzIGFzIHtAbGluayBjb29yZGluYXRlc1Jlc3VsdCB8IGNvb3JkaW5hdGVzUmVzdWx0fVxuICovXG53aWtpLmNvb3JkaW5hdGVzID0gYXN5bmMgKHRpdGxlLCBwYWdlT3B0aW9ucykgPT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGlmIChwYWdlT3B0aW9ucyA9PT0gbnVsbCB8fCBwYWdlT3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGFnZU9wdGlvbnMuYXV0b1N1Z2dlc3QpIHtcbiAgICAgICAgICAgIHRpdGxlID0gYXdhaXQgKDAsIHV0aWxzXzEuc2V0VGl0bGVGb3JQYWdlKSh0aXRsZSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCAoMCwgcGFnZV8xLmNvb3JkaW5hdGVzKSh0aXRsZSwgcGFnZU9wdGlvbnMgPT09IG51bGwgfHwgcGFnZU9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBhZ2VPcHRpb25zLnJlZGlyZWN0KTtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLmNvb3JkaW5hdGVzRXJyb3IoZXJyb3IpO1xuICAgIH1cbn07XG4vKipcbiAqIFJldHVybnMgdGhlIGxhbmd1YWdlIGxpbmtzIHByZXNlbnQgaW4gdGhlIHBhZ2VcbiAqXG4gKiBAcmVtYXJrc1xuICogQ2FsbGVkIGluIHBhZ2Ugb2JqZWN0IGFuZCBhbHNvIHRocm91Z2ggd2lraSBkZWZhdWx0IG9iamVjdFxuICpcbiAqIEBwYXJhbSB0aXRsZSAtIFRoZSB0aXRsZSBvciBwYWdlIElkIG9mIHRoZSBwYWdlXG4gKiBAcGFyYW0gbGlzdE9wdGlvbnMgLSB7QGxpbmsgbGlzdE9wdGlvbnMgfCBsaXN0T3B0aW9ucyB9XG4gKiBAcmV0dXJucyBUaGUgbGlua3MgYXMgYW4gYXJyYXkgb2Yge0BsaW5rIGxhbmdMaW5rc1Jlc3VsdCB8IGxhbmdMaW5rc1Jlc3VsdCB9XG4gKi9cbndpa2kubGFuZ0xpbmtzID0gYXN5bmMgKHRpdGxlLCBsaXN0T3B0aW9ucykgPT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGlmIChsaXN0T3B0aW9ucyA9PT0gbnVsbCB8fCBsaXN0T3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogbGlzdE9wdGlvbnMuYXV0b1N1Z2dlc3QpIHtcbiAgICAgICAgICAgIHRpdGxlID0gYXdhaXQgKDAsIHV0aWxzXzEuc2V0VGl0bGVGb3JQYWdlKSh0aXRsZSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCAoMCwgcGFnZV8xLmxhbmdMaW5rcykodGl0bGUsIGxpc3RPcHRpb25zKTtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLmxpbmtzRXJyb3IoZXJyb3IpO1xuICAgIH1cbn07XG4vKipcbiAqIFJldHVybnMgdGhlIGluZm9ib3ggY29udGVudCBvZiBwYWdlIGlmIHByZXNlbnRcbiAqXG4gKiBAcmVtYXJrc1xuICogQ2FsbGVkIGluIHBhZ2Ugb2JqZWN0IGFuZCBhbHNvIHRocm91Z2ggd2lraSBkZWZhdWx0IG9iamVjdFxuICpcbiAqIEBwYXJhbSB0aXRsZSAtIFRoZSB0aXRsZSBvciBwYWdlIElkIG9mIHRoZSBwYWdlXG4gKiBAcGFyYW0gcGFnZU9wdGlvbnMgLSBXaGV0aGVyIHRvIHJlZGlyZWN0IGluIGNhc2Ugb2YgMzAyXG4gKiBAcmV0dXJucyBUaGUgaW5mbyBhcyBKU09OIG9iamVjdFxuICovXG53aWtpLmluZm9ib3ggPSBhc3luYyAodGl0bGUsIHBhZ2VPcHRpb25zKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHBhZ2VPcHRpb25zID09PSBudWxsIHx8IHBhZ2VPcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwYWdlT3B0aW9ucy5hdXRvU3VnZ2VzdCkge1xuICAgICAgICAgICAgdGl0bGUgPSBhd2FpdCAoMCwgdXRpbHNfMS5zZXRUaXRsZUZvclBhZ2UpKHRpdGxlKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0ICgwLCBwYWdlXzEuaW5mb2JveCkodGl0bGUsIHBhZ2VPcHRpb25zID09PSBudWxsIHx8IHBhZ2VPcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwYWdlT3B0aW9ucy5yZWRpcmVjdCk7XG4gICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfMS5pbmZvYm94RXJyb3IoZXJyb3IpO1xuICAgIH1cbn07XG4vKipcbiAqIFJldHVybnMgdGhlIHRhYmxlIGNvbnRlbnQgb2YgcGFnZSBpZiBwcmVzZW50XG4gKlxuICogQHJlbWFya3NcbiAqIENhbGxlZCBpbiBwYWdlIG9iamVjdCBhbmQgYWxzbyB0aHJvdWdoIHdpa2kgZGVmYXVsdCBvYmplY3RcbiAqXG4gKiBAcGFyYW0gdGl0bGUgLSBUaGUgdGl0bGUgb3IgcGFnZSBJZCBvZiB0aGUgcGFnZVxuICogQHBhcmFtIHBhZ2VPcHRpb25zIC0gV2hldGhlciB0byByZWRpcmVjdCBpbiBjYXNlIG9mIDMwMlxuICogQHJldHVybnMgVGhlIHRhYmxlcyBhcyBhcnJheXMgb2YgSlNPTiBvYmplY3RzXG4gKi9cbndpa2kudGFibGVzID0gYXN5bmMgKHRpdGxlLCBwYWdlT3B0aW9ucykgPT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGlmIChwYWdlT3B0aW9ucyA9PT0gbnVsbCB8fCBwYWdlT3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGFnZU9wdGlvbnMuYXV0b1N1Z2dlc3QpIHtcbiAgICAgICAgICAgIHRpdGxlID0gYXdhaXQgKDAsIHV0aWxzXzEuc2V0VGl0bGVGb3JQYWdlKSh0aXRsZSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCAoMCwgcGFnZV8xLnRhYmxlcykodGl0bGUsIHBhZ2VPcHRpb25zID09PSBudWxsIHx8IHBhZ2VPcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwYWdlT3B0aW9ucy5yZWRpcmVjdCk7XG4gICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfMS5pbmZvYm94RXJyb3IoZXJyb3IpO1xuICAgIH1cbn07XG4vKipcbiAqIFJldHVybnMgdGhlIGxhbmd1YWdlcyBhdmFpbGFibGUgaW4gd2lraVxuICpcbiAqIEByZW1hcmtzXG4gKiBVc2UgdGhpcyBpZiB5b3Ugd2FudCB0byBjaGVjayBpZiBhIGxhbnVhZ2UgZXhpc3RzIGJlZm9yZSBhY3R1YWxseSBzZXR0aW5nIGl0XG4gKlxuICogQHJldHVybnMgVGhlIGxhbmd1YWdlcyBhbiBhcnJheSBvZiB7QGxpbmsgbGFuZ3VhZ2VSZXN1bHQgfCBsYW5ndWFnZVJlc3VsdH1cbiAqL1xud2lraS5sYW5ndWFnZXMgPSBhc3luYyAoKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgbGFuZ1BhcmFtcyA9IHtcbiAgICAgICAgICAgICdtZXRhJzogJ3NpdGVpbmZvJyxcbiAgICAgICAgICAgICdzaXByb3AnOiAnbGFuZ3VhZ2VzJ1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0ICgwLCByZXF1ZXN0XzEuZGVmYXVsdCkobGFuZ1BhcmFtcyk7XG4gICAgICAgIGNvbnN0IGxhbmd1YWdlcyA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IGxhbmcgb2YgcmVzcG9uc2UucXVlcnkubGFuZ3VhZ2VzKSB7XG4gICAgICAgICAgICBsYW5ndWFnZXMucHVzaCh7IFtsYW5nLmNvZGVdOiBsYW5nWycqJ10gfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxhbmd1YWdlcztcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfMS53aWtpRXJyb3IoZXJyb3IpO1xuICAgIH1cbn07XG4vKipcbiAqIHNldHMgdGhlIGxhbmd1YWdlcyB0byBnaXZlbiBzdHJpbmcgLSB2ZXJpZnkgeW91ciBpbnB1dCB1c2luZyBsYW5ndWFnZXMgbWV0aG9kXG4gKlxuICogQHJlbWFya3NcbiAqIFVzZSB0aGlzIHRvIHNldCB5b3VyIGxhbmd1YWdlIGZvciBmdXR1cmUgYXBpIGNhbGxzXG4gKlxuICogQHJldHVybnMgVGhlIG5ldyBhcGkgZW5kcG9pbnQgYXMgc3RyaW5nXG4gKi9cbndpa2kuc2V0TGFuZyA9IChsYW5ndWFnZSkgPT4ge1xuICAgIGNvbnN0IGFwaVVybCA9ICgwLCByZXF1ZXN0XzEuc2V0QVBJVXJsKShsYW5ndWFnZSk7XG4gICAgcmV0dXJuIGFwaVVybDtcbn07XG4vKipcbiAqIFJldHVybnMgdGhlIHBhZ2VzIHdpdGggY29vcmRpbmF0ZXMgbmVhciB0aGUgZ2VvIHNlYXJjaCBjb29yZGluYXRlc1xuICpcbiAqIEByZW1hcmtzXG4gKiBMYXRpdHVkZSBhbmQgbG9uZ2l0dWRlIHNob3VsZCBiZSB2YWxpZCB2YWx1ZXNcbiAqXG4gKiBAcGFyYW0gbGF0aXR1ZGUgLSBUaGUgbGF0aXR1ZGUgdG8gc2VhcmNoXG4gKiBAcGFyYW0gbG9uZ2l0dWRlIC0gVGhlIGxvbmdpdHVkZSB0byBzZWFyY2hcbiAqIEBwYXJhbSBnZW9PcHRpb25zIC0gVGhlIG51bWJlciBvZiByZXN1bHRzIGFuZCB0aGUgc2VhcmNoIHJhZGl1cyB7QGxpbmsgZ2VvT3B0aW9ucyB8IGdlb09wdGlvbnN9XG4gKiBAcmV0dXJucyBUaGUgcmVzdWx0cyBhcyBhbiBhcnJheSBvZiB7QGxpbmsgZ2VvU2VhcmNoUmVzdWx0IHwgZ2VvU2VhcmNoUmVzdWx0fVxuICovXG53aWtpLmdlb1NlYXJjaCA9IGFzeW5jIChsYXRpdHVkZSwgbG9uZ2l0dWRlLCBnZW9PcHRpb25zKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgZ2VvU2VhcmNoUGFyYW1zID0ge1xuICAgICAgICAgICAgJ2xpc3QnOiAnZ2Vvc2VhcmNoJyxcbiAgICAgICAgICAgICdnc3JhZGl1cyc6IChnZW9PcHRpb25zID09PSBudWxsIHx8IGdlb09wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGdlb09wdGlvbnMucmFkaXVzKSB8fCAxMDAwLFxuICAgICAgICAgICAgJ2dzY29vcmQnOiBgJHtsYXRpdHVkZX18JHtsb25naXR1ZGV9YCxcbiAgICAgICAgICAgICdnc2xpbWl0JzogKGdlb09wdGlvbnMgPT09IG51bGwgfHwgZ2VvT3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogZ2VvT3B0aW9ucy5saW1pdCkgfHwgMTAsXG4gICAgICAgICAgICAnZ3Nwcm9wJzogJ3R5cGUnXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHJlc3VsdHMgPSBhd2FpdCAoMCwgcmVxdWVzdF8xLmRlZmF1bHQpKGdlb1NlYXJjaFBhcmFtcyk7XG4gICAgICAgIGNvbnN0IHNlYXJjaFBhZ2VzID0gcmVzdWx0cy5xdWVyeS5nZW9zZWFyY2g7XG4gICAgICAgIHJldHVybiBzZWFyY2hQYWdlcztcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfMS5nZW9TZWFyY2hFcnJvcihlcnJvcik7XG4gICAgfVxufTtcbi8qKlxuICogUmV0dXJucyB0aGUgc3VnZ2VzdGlvbiBmb3IgYSBnaXZlbiBxdWVyeVxuICpcbiAqIEByZW1hcmtzXG4gKiBVc2UgdGhpcyBpZiB5b3Ugd2FudCB5b3VyIHVzZXIgdG8gYXBwcm92ZSB0aGUgc3VnZ2VzdGlvbiBiZWZvcmUgdXNpbmcgaXRcbiAqXG4gKiBAcGFyYW0gcXVlcnkgLSBUaGUgc3RyaW5nIHRvIHF1ZXJ5XG4gKiBAcmV0dXJucyBSZXR1cm5zIGEgc3RyaW5nIG9yIG51bGwgYmFzZWQgb24gaWYgc3VnZ2VzdGlvbiBpcyBwcmVzZW50IG9yIG5vdFxuICovXG53aWtpLnN1Z2dlc3QgPSBhc3luYyAocXVlcnkpID0+IHtcbiAgICB2YXIgX2EsIF9iLCBfYywgX2Q7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3Qgc3VnZ2VzdFBhcmFtcyA9IHtcbiAgICAgICAgICAgICdsaXN0JzogJ3NlYXJjaCcsXG4gICAgICAgICAgICAnc3JpbmZvJzogJ3N1Z2dlc3Rpb24nLFxuICAgICAgICAgICAgJ3NycHJvcCc6ICcnLFxuICAgICAgICAgICAgJ3Nyc2VhcmNoJzogcXVlcnlcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgKDAsIHJlcXVlc3RfMS5kZWZhdWx0KShzdWdnZXN0UGFyYW1zKTtcbiAgICAgICAgcmV0dXJuICgoX2IgPSAoX2EgPSByZXN1bHQucXVlcnkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5zZWFyY2hpbmZvKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Iuc3VnZ2VzdGlvbikgPyAoX2QgPSAoX2MgPSByZXN1bHQucXVlcnkpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy5zZWFyY2hpbmZvKSA9PT0gbnVsbCB8fCBfZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Quc3VnZ2VzdGlvbiA6IG51bGw7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuc2VhcmNoRXJyb3IoZXJyb3IpO1xuICAgIH1cbn07XG4vKipcbiAqIFJldHVybnMgdGhlIGV2ZW50cyBmb3IgYSBnaXZlbiBkYXlcbiAqXG4gKiBAcmVtYXJrc1xuICogVGhlIGFwaSByZXR1cm5zIHRoZSBldmVudHMgdGhhdCBoYXBwZW5lZCBvbiBhIHBhcnRpY3VsYXIgbW9udGggYW5kIGRheVxuICpcbiAqIEBwYXJhbSBldmVudE9wdGlvbnMgLSB0aGUgZXZlbnQgdHlwZXMsIGFuZCB0aGUgbW9udGggYW5kIGRheSB7QGxpbmsgZXZlbnRPcHRpb25zIHwgZXZlbnRPcHRpb25zfVxuICogQHJldHVybnMgUmV0dXJucyB0aGUgcmVzdWx0cyBhcyBhcnJheSBvZiB7QGxpbmsgZXZlbnRSZXN1bHQgfCBldmVudFJlc3VsdH1cbiAqL1xud2lraS5vblRoaXNEYXkgPSBhc3luYyAoZXZlbnRPcHRpb25zID0ge30pID0+IHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCB0eXBlID0gZXZlbnRPcHRpb25zLnR5cGUgfHwgJ2FsbCc7XG4gICAgICAgIGNvbnN0IG1tID0gKGV2ZW50T3B0aW9ucy5tb250aCB8fCAoMCwgdXRpbHNfMS5nZXRDdXJyZW50TW9udGgpKCkpLnRvU3RyaW5nKCkucGFkU3RhcnQoMiwgXCIwXCIpO1xuICAgICAgICBjb25zdCBkZCA9IChldmVudE9wdGlvbnMuZGF5IHx8ICgwLCB1dGlsc18xLmdldEN1cnJlbnREYXkpKCkpLnRvU3RyaW5nKCkucGFkU3RhcnQoMiwgXCIwXCIpO1xuICAgICAgICBjb25zdCBwYXRoID0gYGZlZWQvb250aGlzZGF5LyR7dHlwZX0vJHttbX0vJHtkZH1gO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCAoMCwgcmVxdWVzdF8xLm1ha2VSZXN0UmVxdWVzdCkocGF0aCwgdHJ1ZSk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuZXZlbnRzRXJyb3IoZXJyb3IpO1xuICAgIH1cbn07XG4vKipcbiAqIFJldHVybnMgZmVhdHVyZWQgY29udGVudCBmb3IgYSBnaXZlbiBkYXlcbiAqXG4gKiBAcmVtYXJrc1xuICogVGhlIGFwaSByZXR1cm5zIGNvbnRlbnQgZmVhdHVyZWQgYXQgYSBwYXJ0aWN1bGFyIGRhdGVcbiAqXG4gKiBAcGFyYW0gZmNPcHRpb25zIC0gdGhlIHllYXIvbW9udGgvZGF5IG9mIGZlYXR1cmVkIGNvbnRlbnQgYnkge0BsaW5rIGZjT3B0aW9ucyB8IGV2ZW50T3B0aW9uc31cbiAqIEByZXR1cm5zIFJldHVybnMgdGhlIHJlc3VsdHMgYXMgYXJyYXkgb2Yge0BsaW5rIGZjUmVzdWx0IHwgZmNSZXN1bHR9XG4gKi9cbndpa2kuZmVhdHVyZWRDb250ZW50ID0gYXN5bmMgKGZjT3B0aW9ucyA9IHt9KSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgeXl5eSA9IChmY09wdGlvbnMueWVhciB8fCAoMCwgdXRpbHNfMS5nZXRDdXJyZW50WWVhcikoKSkudG9TdHJpbmcoKTtcbiAgICAgICAgY29uc3QgbW0gPSAoZmNPcHRpb25zLm1vbnRoIHx8ICgwLCB1dGlsc18xLmdldEN1cnJlbnRNb250aCkoKSkudG9TdHJpbmcoKS5wYWRTdGFydCgyLCBcIjBcIik7XG4gICAgICAgIGNvbnN0IGRkID0gKGZjT3B0aW9ucy5kYXkgfHwgKDAsIHV0aWxzXzEuZ2V0Q3VycmVudERheSkoKSkudG9TdHJpbmcoKS5wYWRTdGFydCgyLCBcIjBcIik7XG4gICAgICAgIGNvbnN0IHBhdGggPSBgZmVlZC9mZWF0dXJlZC8ke3l5eXl9LyR7bW19LyR7ZGR9YDtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgKDAsIHJlcXVlc3RfMS5tYWtlUmVzdFJlcXVlc3QpKHBhdGgsIHRydWUpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLmZjRXJyb3IoZXJyb3IpO1xuICAgIH1cbn07XG4vKipcbiAqIFJldHVybnMgYSByYW5kb20gcGFnZVxuICpcbiAqIEBwYXJhbSBmb3JtYXQgLSBUaGUgZGVzaXJlZCByZXR1cm4gZm9ybWF0XG4gKiBAcmV0dXJucyBSZXR1cm5zIGNvbnRlbnQgZnJvbSBhIHJhbmRvbSBwYWdlXG4gKi9cbndpa2kucmFuZG9tID0gYXN5bmMgKGZvcm1hdCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICghZm9ybWF0KSB7XG4gICAgICAgICAgICBmb3JtYXQgPSAnc3VtbWFyeSc7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcGF0aCA9IGBwYWdlL3JhbmRvbS8ke2Zvcm1hdH1gO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCAoMCwgcmVxdWVzdF8xLm1ha2VSZXN0UmVxdWVzdCkocGF0aCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEud2lraUVycm9yKGVycm9yKTtcbiAgICB9XG59O1xuLyoqXG4gKiBSZXR1cm5zIG1vYmlsZS1vcHRpbWlzZWQgSFRNTCBvZiBhIHBhZ2VcbiAqXG4gKiBAcGFyYW0gdGl0bGUgLSBUaGUgdGl0bGUgb2YgdGhlIHBhZ2UgdG8gcXVlcnlcbiAqIEBwYXJhbSBwYWdlT3B0aW9ucyAtIFdoZXRoZXIgdG8gcmVkaXJlY3QgaW4gY2FzZSBvZiAzMDJcbiAqIEByZXR1cm5zIFJldHVybnMgSFRNTCBzdHJpbmdcbiAqL1xud2lraS5tb2JpbGVIdG1sID0gYXN5bmMgKHRpdGxlLCBwYWdlT3B0aW9ucykgPT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGlmIChwYWdlT3B0aW9ucyA9PT0gbnVsbCB8fCBwYWdlT3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGFnZU9wdGlvbnMuYXV0b1N1Z2dlc3QpIHtcbiAgICAgICAgICAgIHRpdGxlID0gYXdhaXQgKDAsIHV0aWxzXzEuc2V0VGl0bGVGb3JQYWdlKSh0aXRsZSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgKDAsIHBhZ2VfMS5tb2JpbGVIdG1sKSh0aXRsZSwgcGFnZU9wdGlvbnMgPT09IG51bGwgfHwgcGFnZU9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBhZ2VPcHRpb25zLnJlZGlyZWN0KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfMS5odG1sRXJyb3IoZXJyb3IpO1xuICAgIH1cbn07XG4vKipcbiAqIFJldHVybnMgcGRmIG9mIGEgZ2l2ZW4gcGFnZVxuICpcbiAqIEBwYXJhbSB0aXRsZSAtIFRoZSB0aXRsZSBvZiB0aGUgcGFnZSB0byBxdWVyeVxuICogQHBhcmFtIHBkZk9wdGlvbnMgLSB7QGxpbmsgcGRmT3B0aW9ucyB8IHBkZk9wdGlvbnMgfVxuICogQHJldHVybnMgUmV0dXJucyBwZGYgZm9ybWF0XG4gKi9cbndpa2kucGRmID0gYXN5bmMgKHRpdGxlLCBwZGZPcHRpb25zKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHBkZk9wdGlvbnMgPT09IG51bGwgfHwgcGRmT3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGRmT3B0aW9ucy5hdXRvU3VnZ2VzdCkge1xuICAgICAgICAgICAgdGl0bGUgPSBhd2FpdCAoMCwgdXRpbHNfMS5zZXRUaXRsZUZvclBhZ2UpKHRpdGxlKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCAoMCwgcGFnZV8xLnBkZikodGl0bGUsIHBkZk9wdGlvbnMpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLnBkZkVycm9yKGVycm9yKTtcbiAgICB9XG59O1xuLyoqXG4gKiBSZXR1cm5zIGNpdGF0aW9uIG9mIGEgZ2l2ZW4gcGFnZSwgb3IgcXVlcnkgc3RyaW5nXG4gKlxuICogQHBhcmFtIGZvcm1hdCAtIHRoZSBmb3JtYXQgb2YgdGhlIGNpdGF0aW9uIHJlc3VsdFxuICogQHBhcmFtIHF1ZXJ5IC0gdXJsIG9yIHF1ZXJ5IHN0cmluZ1xuICogQHBhcmFtIGxhbmd1YWdlIC0gaWYgeW91IHdhbnQgbGFudWFnZSBlbmFibGVkIHJlc3VsdHNcbiAqIEByZXR1cm5zIFJldHVybnMgY2l0YXRpb24gZGF0YVxuICovXG53aWtpLmNpdGF0aW9uID0gYXN5bmMgKHF1ZXJ5LCBmb3JtYXQsIGxhbmd1YWdlKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgKDAsIHBhZ2VfMS5jaXRhdGlvbikocXVlcnksIGZvcm1hdCwgbGFuZ3VhZ2UpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLmNpdGF0aW9uRXJyb3IoZXJyb3IpO1xuICAgIH1cbn07XG4vKipcbiAqIFJldHVybnMgdGhlIGF1dG9jb21wbGV0aW9uIHJlc3VsdHMgZm9yIGEgZ2l2ZW4gcXVlcnlcbiAqXG4gKiBAcmVtYXJrc1xuICogTGltaXRzIHJlc3VsdHMgYnkgZGVmYXVsdCB0byAxMFxuICpcbiAqIEBwYXJhbSBxdWVyeSAtIFRoZSBzdHJpbmcgdG8gc2VhcmNoIGZvclxuICogQHBhcmFtIGF1dG9jb21wbGV0aW9uT3B0aW9ucyAtIFRoZSBudW1iZXIgb2YgcmVzdWx0cyB7QGxpbmsgYXV0b2NvbXBsZXRpb25PcHRpb25zIHwgYXV0b2NvbXBsZXRpb25PcHRpb25zIH1cbiAqIEByZXR1cm5zIGFuIGFycmF5IG9mIHN0cmluZ1xuICovXG53aWtpLmF1dG9jb21wbGV0aW9ucyA9IGFzeW5jIChxdWVyeSwgYXV0b2NvbXBsZXRpb25PcHRpb25zKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgYXV0b2NvbXBsZXRpb25zUGFyYW1zID0ge1xuICAgICAgICAgICAgbGlzdDogXCJzZWFyY2hcIixcbiAgICAgICAgICAgIGxpbWl0OiAoYXV0b2NvbXBsZXRpb25PcHRpb25zID09PSBudWxsIHx8IGF1dG9jb21wbGV0aW9uT3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogYXV0b2NvbXBsZXRpb25PcHRpb25zLmxpbWl0KSB8fCAxMCxcbiAgICAgICAgICAgIHNlYXJjaDogcXVlcnksXG4gICAgICAgICAgICBhY3Rpb246IFwib3BlbnNlYXJjaFwiLFxuICAgICAgICAgICAgcmVkaXJlY3Q6IFwicmV0dXJuXCJcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgWywgYXV0b2NvbXBsZXRpb25zXSA9IGF3YWl0ICgwLCByZXF1ZXN0XzEuZGVmYXVsdCkoYXV0b2NvbXBsZXRpb25zUGFyYW1zLCBmYWxzZSk7XG4gICAgICAgIHJldHVybiBhdXRvY29tcGxldGlvbnM7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuYXV0b2NvbXBsZXRpb25zRXJyb3IoZXJyb3IpO1xuICAgIH1cbn07XG4vKipcbiAqIENoYW5nZSB0aGUgZGVmYXVsdCB1c2VyIGFnZW50IGZvciB3aWtpcGVkaWFcbiAqXG4gKiBAcGFyYW0gdXNlckFnZW50IC0gVGhlIG5ldyBjdXN0b20gdXNlckFnZW50XG4gKi9cbndpa2kuc2V0VXNlckFnZW50ID0gKHVzZXJBZ2VudCkgPT4ge1xuICAgICgwLCByZXF1ZXN0XzEuc2V0VXNlckFnZW50KSh1c2VyQWdlbnQpO1xufTtcbmV4cG9ydHMuZGVmYXVsdCA9IHdpa2k7XG4vLyBGb3IgQ29tbW9uSlMgZGVmYXVsdCBleHBvcnQgc3VwcG9ydFxubW9kdWxlLmV4cG9ydHMgPSB3aWtpO1xubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IHdpa2k7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vZXJyb3JzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9yZXN1bHRUeXBlc1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vb3B0aW9uVHlwZXNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3BhZ2VcIiksIGV4cG9ydHMpO1xuIiwgImltcG9ydCB7IFNldHRpbmcsIFBsdWdpbiwgSXRlbVZpZXcsIFdvcmtzcGFjZUxlYWYsIGRlYm91bmNlLCBOb3RpY2UgfSBmcm9tICdvYnNpZGlhbic7XG5pbXBvcnQgKiBhcyBkMyBmcm9tIFwiZDNcIjtcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBhcGlDbGllbnQgfSBmcm9tICdhcGlDbGllbnQnO1xuaW1wb3J0IHsgU2VhcmNoVmlldyB9IGZyb20gJ3ZpZXcnO1xuXG5jb25zdCBERUZBVUxUX05FVFdPUktfU0VUVElOR1MgOiBhbnkgPSB7XG5cdHJlbGV2YW5jZVNjb3JlVGhyZXNob2xkOiAwLjUsXG5cdG5vZGVTaXplOiA0LFxuXHRsaW5rVGhpY2tuZXNzOiAwLjMsXG5cdHJlcGVsRm9yY2U6IDQwMCxcblx0bGlua0ZvcmNlOiAwLjQsXG5cdGxpbmtEaXN0YW5jZTogNzAsXG5cdGNlbnRlckZvcmNlOiAwLjEsXG5cdHRleHRGYWRlVGhyZXNob2xkOiAxLjEsXG5cdG1pbkxpbmtUaGlja25lc3M6IDAuMyxcblx0bWF4TGlua1RoaWNrbmVzczogMC42LFxuXHRtYXhMYWJlbENoYXJhY3RlcnM6IDE4LFxuXHRsaW5rTGFiZWxTaXplOiA3LFxuXHRub2RlTGFiZWxTaXplOiA2LFxuXHRjb25uZWN0aW9uVHlwZTogJ2Jsb2NrJyxcblx0bm90ZUZpbGxDb2xvcjogJyM3Yzg1OTQnLFxuXHRibG9ja0ZpbGxDb2xvcjogJyM5MjZlYzknLFxuXHR3aWtpRmlsbENvbG9yOiAnIzE0NWRhMCcsXG5cdGxhbmd1YWdlOiAncHQnXG59XG5cblxuLypcblx0TWFpbiBDb2xvcnNcblx0TWVudSB0ZXh0OiAjYTNhZWNiXG5cdEhvdmVyZWRPdmVyTm9kZTogI2Q0NmViZVxuXHROb3JtYWxOb2RlOiAjOTI2ZWM5XG5cdGNlbnRyYWxOb2RlOiAjN2M4NTk0XG5cdExpbms6ICM0Yzc3ODdcblx0U2xpZGVyS25vYjogI2YzZWU1ZFxuKi9cblxuaW50ZXJmYWNlIFBsdWdpblNldHRpbmdzIHtcbiAgICByZWxldmFuY2VTY29yZVRocmVzaG9sZDogbnVtYmVyO1xuICAgIG5vZGVTaXplOiBudW1iZXI7XG4gICAgbGlua1RoaWNrbmVzczogbnVtYmVyO1xuICAgIHJlcGVsRm9yY2U6IG51bWJlcjtcbiAgICBsaW5rRm9yY2U6IG51bWJlcjtcbiAgICBsaW5rRGlzdGFuY2U6IG51bWJlcjtcbiAgICBjZW50ZXJGb3JjZTogbnVtYmVyO1xuICAgIHRleHRGYWRlVGhyZXNob2xkOiBudW1iZXI7XG4gICAgbWluTGlua1RoaWNrbmVzczogbnVtYmVyO1xuICAgIG1heExpbmtUaGlja25lc3M6IG51bWJlcjtcbiAgICBtYXhMYWJlbENoYXJhY3RlcnM6IG51bWJlcjtcbiAgICBsaW5rTGFiZWxTaXplOiBudW1iZXI7XG4gICAgbm9kZUxhYmVsU2l6ZTogbnVtYmVyO1xuXHRjb25uZWN0aW9uVHlwZTogc3RyaW5nO1xuXHRub3RlRmlsbENvbG9yOiBzdHJpbmc7XG5cdGJsb2NrRmlsbENvbG9yOiBzdHJpbmc7XG5cdHdpa2lGaWxsQ29sb3I6IHN0cmluZztcblx0bGFuZ3VhZ2U6IHN0cmluZztcbn1cblxuZGVjbGFyZSBnbG9iYWwge1xuICAgIGludGVyZmFjZSBXaW5kb3cge1xuICAgICAgICBTbWFydFNlYXJjaDogYW55O1xuICAgIH1cbn1cblxuY2xhc3MgU2NHcmFwaEl0ZW1WaWV3IGV4dGVuZHMgSXRlbVZpZXcge1xuXG5cdHByaXZhdGUgcGx1Z2luOiBTY0dyYXBoVmlldztcblxuXHRjdXJyZW50Tm90ZUtleTogc3RyaW5nOyBcblx0Y2VudHJhbE5vdGU6IGFueTtcblx0Y2VudHJhbE5vZGU6IGFueTtcblx0Y29ubmVjdGlvblR5cGUgPSAnYmxvY2snO1xuICAgIGlzSG92ZXJpbmc6IGJvb2xlYW47IFxuXHRyZWxldmFuY2VTY29yZVRocmVzaG9sZCA9IDAuNTtcblx0bm9kZVNpemUgPSA0O1xuXHRsaW5rVGhpY2tuZXNzID0gMC4zO1xuXHRyZXBlbEZvcmNlID0gNDAwO1xuXHRsaW5rRm9yY2UgPSAwLjQ7XG5cdGxpbmtEaXN0YW5jZSA9IDcwO1xuXHRjZW50ZXJGb3JjZSA9IDAuMztcblx0dGV4dEZhZGVUaHJlc2hvbGQgPSAxLjE7XG5cdG1pblNjb3JlID0gMTtcblx0bWF4U2NvcmUgPSAwO1xuXHRtaW5Ob2RlU2l6ZSA9IDM7XG5cdG1heE5vZGVTaXplID0gNjtcblx0bWluTGlua1RoaWNrbmVzcyA9IDAuMztcblx0bWF4TGlua1RoaWNrbmVzcyA9IDAuNjtcblx0bm9kZVNlbGVjdGlvbjogYW55O1xuXHRsaW5rU2VsZWN0aW9uOiBhbnk7XG5cdGxpbmtMYWJlbFNlbGVjdGlvbjogYW55O1xuXHRsYWJlbFNlbGVjdGlvbjogYW55O1xuXHR1cGRhdGluZ1Zpc3VhbGl6YXRpb246IGJvb2xlYW47XG5cdGlzQ3RybFByZXNzZWQgPSBmYWxzZTtcblx0aXNBbHRQcmVzc2VkID0gZmFsc2U7XG4gICAgaXNEcmFnZ2luZyA9IGZhbHNlO1xuXHRpc0NoYW5naW5nQ29ubmVjdGlvblR5cGUgPSB0cnVlO1xuICAgIHNlbGVjdGlvbkJveDogYW55O1xuXHR2YWxpZGF0ZWRMaW5rczogYW55O1xuXHRtYXhMYWJlbENoYXJhY3RlcnMgPSAxODtcblx0bGlua0xhYmVsU2l6ZSA9IDc7XG5cdG5vZGVMYWJlbFNpemUgPSA2O1xuXHRibG9ja0ZpbGxDb2xvciA9ICcjOTI2ZWM5Jztcblx0bm90ZUZpbGxDb2xvciA9ICcjN2M4NTk0Jztcblx0d2lraUZpbGxDb2xvciA9ICcjMTQ1ZGEwJztcblx0bGFuZ3VhZ2UgPSAncHQnO1xuXHRzdGFydFggPSAwO1xuXHRzdGFydFkgPSAwO1xuXHRub2RlcyA6IGFueSA9IFtdO1xuXHRsaW5rcyA6IGFueSA9IFtdO1xuXHRjb25uZWN0aW9ucyA6IGFueSA9IFtdO1xuXHRzdmdHcm91cDogZDMuU2VsZWN0aW9uPFNWR0dFbGVtZW50LCB1bmtub3duLCBudWxsLCB1bmRlZmluZWQ+O1xuXHRzdmc6IGQzLlNlbGVjdGlvbjxTVkdTVkdFbGVtZW50LCB1bmtub3duLCBudWxsLCB1bmRlZmluZWQ+O1xuXHRjZW50ZXJIaWdobGlnaHRlZCA9IGZhbHNlO1xuXHRzaW11bGF0aW9uOiBhbnk7XG5cdGRyYWdnaW5nID0gZmFsc2U7XG5cdGhpZ2hsaWdodGVkTm9kZUlkID0gJy0xJztcblx0Y3VycmVudE5vdGVDaGFuZ2luZyA9IGZhbHNlO1xuXHRpc0ZpbHRlcmluZyA9IGZhbHNlO1x0XG5cdHNldHRpbmdzTWFkZSA9IGZhbHNlO1xuXG4gICAgY29uc3RydWN0b3IobGVhZjogV29ya3NwYWNlTGVhZiwgcGx1Z2luOiBTY0dyYXBoVmlldykge1xuICAgICAgICBzdXBlcihsZWFmKTtcblx0XHR0aGlzLmN1cnJlbnROb3RlS2V5ID0gJyc7XG5cdFx0dGhpcy5pc0hvdmVyaW5nID0gZmFsc2U7XG5cdFx0dGhpcy5wbHVnaW4gPSBwbHVnaW47XG5cblx0XHQvLyBTZXQgdGhlIGluaXRpYWwgdmFsdWVzIGZyb20gdGhlIGxvYWRlZCBzZXR0aW5nc1xuICAgICAgICB0aGlzLnJlbGV2YW5jZVNjb3JlVGhyZXNob2xkID0gdGhpcy5wbHVnaW4uc2V0dGluZ3MucmVsZXZhbmNlU2NvcmVUaHJlc2hvbGQ7XG4gICAgICAgIHRoaXMubm9kZVNpemUgPSB0aGlzLnBsdWdpbi5zZXR0aW5ncy5ub2RlU2l6ZTtcbiAgICAgICAgdGhpcy5saW5rVGhpY2tuZXNzID0gdGhpcy5wbHVnaW4uc2V0dGluZ3MubGlua1RoaWNrbmVzcztcbiAgICAgICAgdGhpcy5yZXBlbEZvcmNlID0gdGhpcy5wbHVnaW4uc2V0dGluZ3MucmVwZWxGb3JjZTtcbiAgICAgICAgdGhpcy5saW5rRm9yY2UgPSB0aGlzLnBsdWdpbi5zZXR0aW5ncy5saW5rRm9yY2U7XG4gICAgICAgIHRoaXMubGlua0Rpc3RhbmNlID0gdGhpcy5wbHVnaW4uc2V0dGluZ3MubGlua0Rpc3RhbmNlO1xuICAgICAgICB0aGlzLmNlbnRlckZvcmNlID0gdGhpcy5wbHVnaW4uc2V0dGluZ3MuY2VudGVyRm9yY2U7XG4gICAgICAgIHRoaXMudGV4dEZhZGVUaHJlc2hvbGQgPSB0aGlzLnBsdWdpbi5zZXR0aW5ncy50ZXh0RmFkZVRocmVzaG9sZDtcbiAgICAgICAgdGhpcy5taW5MaW5rVGhpY2tuZXNzID0gdGhpcy5wbHVnaW4uc2V0dGluZ3MubWluTGlua1RoaWNrbmVzcztcbiAgICAgICAgdGhpcy5tYXhMaW5rVGhpY2tuZXNzID0gdGhpcy5wbHVnaW4uc2V0dGluZ3MubWF4TGlua1RoaWNrbmVzcztcbiAgICAgICAgdGhpcy5tYXhMYWJlbENoYXJhY3RlcnMgPSB0aGlzLnBsdWdpbi5zZXR0aW5ncy5tYXhMYWJlbENoYXJhY3RlcnM7XG4gICAgICAgIHRoaXMubGlua0xhYmVsU2l6ZSA9IHRoaXMucGx1Z2luLnNldHRpbmdzLmxpbmtMYWJlbFNpemU7XG4gICAgICAgIHRoaXMubm9kZUxhYmVsU2l6ZSA9IHRoaXMucGx1Z2luLnNldHRpbmdzLm5vZGVMYWJlbFNpemU7XG4gICAgICAgIHRoaXMuY29ubmVjdGlvblR5cGUgPSB0aGlzLnBsdWdpbi5zZXR0aW5ncy5jb25uZWN0aW9uVHlwZTtcblx0XHR0aGlzLm5vdGVGaWxsQ29sb3IgPSB0aGlzLnBsdWdpbi5zZXR0aW5ncy5ub3RlRmlsbENvbG9yO1xuXHRcdHRoaXMuYmxvY2tGaWxsQ29sb3IgPSB0aGlzLnBsdWdpbi5zZXR0aW5ncy5ibG9ja0ZpbGxDb2xvcjtcblx0XHR0aGlzLndpa2lGaWxsQ29sb3IgPSB0aGlzLnBsdWdpbi5zZXR0aW5ncy53aWtpRmlsbENvbG9yO1xuXHRcdHRoaXMubGFuZ3VhZ2UgPSB0aGlzLnBsdWdpbi5zZXR0aW5ncy5sYW5ndWFnZTtcblxuXG4gICAgfVxuXG4gICAgZ2V0Vmlld1R5cGUoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIFwic21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplclwiO1xuICAgIH1cblxuICAgIGdldERpc3BsYXlUZXh0KCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBcIlNtYXJ0IGNvbm5lY3Rpb25zIHZpc3VhbGl6ZXJcIjtcbiAgICB9XG5cbiAgICBnZXRJY29uKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBcImdpdC1mb3JrXCI7XG4gICAgfVxuXG5cdHVwZGF0ZU5vZGVBcHBlYXJhbmNlKCkge1xuXHRcdHRoaXMubm9kZVNlbGVjdGlvbi50cmFuc2l0aW9uKCkuZHVyYXRpb24oNTAwKVxuXHRcdFx0LmF0dHIoJ2ZpbGwnLCAoZDogYW55KSA9PiBkLmZpbGwpXG5cdFx0XHQuYXR0cignc3Ryb2tlJywgKGQ6IGFueSkgPT4gZC5zZWxlY3RlZCA/ICdibGFuY2hlZGFsbW9uZCcgOiAoZC5oaWdobGlnaHRlZCA/ICcjZDQ2ZWJlJyA6ICd0cmFuc3BhcmVudCcpKVxuXHRcdFx0LmF0dHIoJ3N0cm9rZS13aWR0aCcsIChkOiBhbnkpID0+IGQuc2VsZWN0ZWQgPyAxLjUgOiAoZC5oaWdobGlnaHRlZCA/IDAuMyA6IDApKVxuXHRcdFx0LmF0dHIoJ29wYWNpdHknLCAoZDogYW55KSA9PiB0aGlzLmdldE5vZGVPcGFjaXR5KGQpKTtcblx0fVxuXHRcblxuXHQvLyBnZXROb2RlRmlsbChkOiBhbnkpIHtcblx0Ly8gXHRpZiAoZC5pZCA9PT0gdGhpcy5jZW50cmFsTm9kZS5pZCkgcmV0dXJuICcjN2M4NTk0Jztcblx0Ly8gXHRpZiAoZC5oaWdobGlnaHRlZCAmJiAhZC5zZWxlY3RlZCkgcmV0dXJuICcjZDQ2ZWJlJztcblx0Ly8gXHRyZXR1cm4gZC5ncm91cCA9PT0gJ25vdGUnID8gJyM3Yzg1OTQnIDogJyM5MjZlYzknO1xuXHQvLyB9XG5cblx0Z2V0Tm9kZU9wYWNpdHkoZDogYW55KSB7XG5cdFx0aWYgKGQuaWQgPT09IHRoaXMuY2VudHJhbE5vZGUuaWQpIHJldHVybiAxO1xuXHRcdGlmIChkLnNlbGVjdGVkKSByZXR1cm4gMTtcblx0XHRpZiAoZC5oaWdobGlnaHRlZCkgcmV0dXJuIDAuODtcblx0XHRyZXR1cm4gdGhpcy5pc0hvdmVyaW5nID8gMC4xIDogMTtcblx0fVxuXG4gICAgdG9nZ2xlTm9kZVNlbGVjdGlvbihub2RlSWQ6IHN0cmluZykge1xuXHRcdGNvbnN0IG5vZGUgPSB0aGlzLm5vZGVTZWxlY3Rpb24uZGF0YSgpLmZpbmQoKGQ6IGFueSkgPT4gZC5pZCA9PT0gbm9kZUlkKTtcblx0XHRpZiAobm9kZSkge1xuXHRcdFx0bm9kZS5zZWxlY3RlZCA9ICFub2RlLnNlbGVjdGVkO1xuXHRcdFx0aWYgKCFub2RlLnNlbGVjdGVkKSB7XG5cdFx0XHRcdG5vZGUuaGlnaGxpZ2h0ZWQgPSBmYWxzZTtcblx0XHRcdH1cblx0XHRcdHRoaXMudXBkYXRlTm9kZUFwcGVhcmFuY2UoKTtcblx0XHR9XG5cdH1cblx0XG5cblx0Y2xlYXJTZWxlY3Rpb25zKCkge1xuXHRcdHRoaXMubm9kZVNlbGVjdGlvbi5lYWNoKChkOiBhbnkpID0+IHtcblx0XHRcdGQuc2VsZWN0ZWQgPSBmYWxzZTtcblx0XHRcdGQuaGlnaGxpZ2h0ZWQgPSBmYWxzZTtcblx0XHR9KTtcblx0XHR0aGlzLnVwZGF0ZU5vZGVBcHBlYXJhbmNlKCk7XG5cdH1cblxuXHRoaWdobGlnaHROb2RlKG5vZGU6IGFueSkge1xuXHRcdFxuICAgICAgICBpZiAobm9kZS5pZCA9PT0gdGhpcy5jZW50cmFsTm9kZS5pZCkge1xuICAgICAgICAgICAgdGhpcy5jZW50ZXJIaWdobGlnaHRlZCA9IHRydWU7XG4gICAgICAgIH1cblxuXHRcdHRoaXMuaGlnaGxpZ2h0ZWROb2RlSWQgPSBub2RlLmlkO1xuXG4gICAgICAgIHRoaXMubm9kZVNlbGVjdGlvbi5lYWNoKChkOiBhbnkpID0+IHtcbiAgICAgICAgICAgIGlmIChkLmlkICE9PSB0aGlzLmNlbnRyYWxOb2RlLmlkKSB7XG4gICAgICAgICAgICAgICAgZC5oaWdobGlnaHRlZCA9IChkLmlkID09PSBub2RlLmlkIHx8IHRoaXMudmFsaWRhdGVkTGlua3Muc29tZSgobGluazogYW55KSA9PlxuICAgICAgICAgICAgICAgICAgICAobGluay5zb3VyY2UuaWQgPT09IG5vZGUuaWQgJiYgbGluay50YXJnZXQuaWQgPT09IGQuaWQpIHx8XG4gICAgICAgICAgICAgICAgICAgIChsaW5rLnRhcmdldC5pZCA9PT0gbm9kZS5pZCAmJiBsaW5rLnNvdXJjZS5pZCA9PT0gZC5pZCkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMudXBkYXRlTm9kZUFwcGVhcmFuY2UoKTtcbiAgICAgICAgdGhpcy51cGRhdGVMaW5rQXBwZWFyYW5jZShub2RlKTtcbiAgICAgICAgdGhpcy51cGRhdGVMYWJlbEFwcGVhcmFuY2Uobm9kZSk7XG4gICAgICAgIHRoaXMudXBkYXRlTGlua0xhYmVsQXBwZWFyYW5jZShub2RlKTtcbiAgICB9XG5cdFxuXHRcblx0dXBkYXRlSGlnaGxpZ2h0KGQ6IGFueSwgbm9kZTogYW55KSB7XG5cdFx0aWYgKGQuaWQgIT09IHRoaXMuY2VudHJhbE5vZGUuaWQpIHtcblx0XHRcdGQuaGlnaGxpZ2h0ZWQgPSAoZC5pZCA9PT0gbm9kZS5pZCB8fCB0aGlzLnZhbGlkYXRlZExpbmtzLnNvbWUoKGxpbms6IGFueSkgPT5cblx0XHRcdFx0KGxpbmsuc291cmNlLmlkID09PSBub2RlLmlkICYmIGxpbmsudGFyZ2V0LmlkID09PSBkLmlkKSB8fFxuXHRcdFx0XHQobGluay50YXJnZXQuaWQgPT09IG5vZGUuaWQgJiYgbGluay5zb3VyY2UuaWQgPT09IGQuaWQpKSk7XG5cdFx0fVxuXHR9XG5cblx0dXBkYXRlTGlua0FwcGVhcmFuY2Uobm9kZTogYW55KSB7XG5cdFx0dGhpcy5saW5rU2VsZWN0aW9uLnRyYW5zaXRpb24oKS5kdXJhdGlvbig1MDApXG5cdFx0XHQuYXR0cignb3BhY2l0eScsIChkOiBhbnkpID0+IChkLnNvdXJjZS5pZCA9PT0gbm9kZS5pZCB8fCBkLnRhcmdldC5pZCA9PT0gbm9kZS5pZCkgPyAxIDogMC4xKTtcblx0fVxuXG5cdHVwZGF0ZUxhYmVsQXBwZWFyYW5jZShub2RlOiBhbnkpIHtcblx0XHR0aGlzLmxhYmVsU2VsZWN0aW9uLnRyYW5zaXRpb24oKS5kdXJhdGlvbig1MDApXG5cdFx0XHQuYXR0cignb3BhY2l0eScsIChkOiBhbnkpID0+IHRoaXMuZ2V0TGFiZWxPcGFjaXR5KGQsIG5vZGUpKVxuXHRcdFx0LnRleHQoKGQ6IGFueSkgPT4gIGQuaWQgPT09IHRoaXMuaGlnaGxpZ2h0ZWROb2RlSWQgPyB0aGlzLmZvcm1hdExhYmVsKGQubmFtZSwgZmFsc2UpIDogdGhpcy5mb3JtYXRMYWJlbChkLm5hbWUsIHRydWUpKTtcblx0fVxuXHRcblx0Z2V0TGFiZWxPcGFjaXR5KGQ6IGFueSwgbm9kZTogYW55KSB7XG5cdFx0aWYgKCFub2RlKSB7XG5cdFx0XHRyZXR1cm4gMTsgLy8gUmVzZXQgdG8gZnVsbCBvcGFjaXR5IGlmIG5vIG5vZGUgaXMgaGlnaGxpZ2h0ZWRcblx0XHR9XG5cdFx0cmV0dXJuIChkLmlkID09PSBub2RlLmlkIHx8IHRoaXMudmFsaWRhdGVkTGlua3Muc29tZSgobGluazogYW55KSA9PlxuXHRcdFx0KGxpbmsuc291cmNlLmlkID09PSBub2RlLmlkICYmIGxpbmsudGFyZ2V0LmlkID09PSBkLmlkKSkgfHwgZC5pZCA9PSB0aGlzLmNlbnRyYWxOb2RlLmlkKSA/IDEgOiAwLjE7XG5cdH1cblx0XG5cdHVwZGF0ZUxpbmtMYWJlbEFwcGVhcmFuY2Uobm9kZTogYW55KSB7XG5cdFx0dGhpcy5saW5rTGFiZWxTZWxlY3Rpb24udHJhbnNpdGlvbigpLmR1cmF0aW9uKDUwMClcblx0XHQuYXR0cignb3BhY2l0eScsIChkOiBhbnkpID0+IHtcblx0XHRcdHJldHVybiAoZC5zb3VyY2UuaWQgPT09IG5vZGUuaWQgfHwgZC50YXJnZXQuaWQgPT09IG5vZGUuaWQpID8gMSA6IDA7XG5cdFx0fSlcblx0fVxuXHRcblxuXHR1bmhpZ2hsaWdodE5vZGUobm9kZSA6IGFueSkge1xuXG5cdFx0Ly8gUmVzZXQgaGlnaGxpZ2h0ZWQgbm9kZWlkXG5cdFx0dGhpcy5oaWdobGlnaHRlZE5vZGVJZCA9ICctMSc7XG5cbiAgICAgICAgdGhpcy5ub2RlU2VsZWN0aW9uLmVhY2goKGQ6IGFueSkgPT4ge1xuICAgICAgICAgICAgaWYgKGQuaWQgIT09IHRoaXMuY2VudHJhbE5vZGUuaWQpIGQuaGlnaGxpZ2h0ZWQgPSBmYWxzZTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy51cGRhdGVOb2RlQXBwZWFyYW5jZSgpO1xuICAgICAgICB0aGlzLnJlc2V0TGlua0FwcGVhcmFuY2UoKTtcbiAgICAgICAgdGhpcy5yZXNldExhYmVsQXBwZWFyYW5jZSgpO1xuICAgICAgICB0aGlzLnJlc2V0TGlua0xhYmVsQXBwZWFyYW5jZSgpO1xuICAgICAgICB0aGlzLnVwZGF0ZUxhYmVsQXBwZWFyYW5jZShudWxsKTsgLy8gUGFzcyBmYWxzZSB0byByZXNldCBsYWJlbCBwb3NpdGlvblxuICAgIH1cblx0XG5cblx0cmVzZXRMaW5rQXBwZWFyYW5jZSgpIHtcblx0XHR0aGlzLmxpbmtTZWxlY3Rpb24udHJhbnNpdGlvbigpLmR1cmF0aW9uKDUwMCkuYXR0cignb3BhY2l0eScsIDEpO1xuXHR9XG5cblx0cmVzZXRMYWJlbEFwcGVhcmFuY2UoKSB7XG5cdFx0dGhpcy5sYWJlbFNlbGVjdGlvbi50cmFuc2l0aW9uKCkuZHVyYXRpb24oNTAwKS5hdHRyKCdvcGFjaXR5JywgMSlcblx0XHRcdC50ZXh0KChkOiBhbnkpID0+IHRoaXMuZm9ybWF0TGFiZWwoZC5uYW1lLCB0cnVlKSk7XG5cdH1cblxuXHRyZXNldExpbmtMYWJlbEFwcGVhcmFuY2UoKSB7XG5cdFx0dGhpcy5saW5rTGFiZWxTZWxlY3Rpb24udHJhbnNpdGlvbigpLmR1cmF0aW9uKDUwMCkuYXR0cignb3BhY2l0eScsIDApO1xuXHR9XG5cblx0Zm9ybWF0TGFiZWwocGF0aDogc3RyaW5nLCB0cnVuY2F0ZTogYm9vbGVhbiA9IHRydWUpIHtcblx0XHRsZXQgbGFiZWwgPSB0aGlzLmV4dHJhY3RMYWJlbChwYXRoKTtcblx0XHRyZXR1cm4gdHJ1bmNhdGUgPyB0aGlzLnRydW5jYXRlTGFiZWwobGFiZWwpIDogbGFiZWw7XG5cdH1cblxuXHRleHRyYWN0TGFiZWwocGF0aDogc3RyaW5nKSB7XG5cdFx0bGV0IGxhYmVsID0gcGF0aDtcblxuXHRcdC8vIFJlbW92ZSB0aGUgYW5jaG9yIHBhcnQgaWYgaXQgZXhpc3RzXG5cdFx0aWYgKHBhdGggJiYgcGF0aC5pbmNsdWRlcygnIycpKSB7XG5cblx0XHRcdGNvbnN0IHBhcnRzID0gcGF0aC5zcGxpdCgnIycpO1xuXG5cdFx0XHRsZXQgbGFzdFBhcnQgPSBwYXJ0c1twYXJ0cy5sZW5ndGggLSAxXTsgLy8gVGFrZSB0aGUgbGFzdCBwYXJ0IGFmdGVyIHNwbGl0dGluZyBieSAnIydcbiAgICBcblx0XHRcdC8vIENoZWNrIGlmIHRoZSBsYXN0IHBhcnQgaXMgZW1wdHkgb3IgbWF0Y2hlcyB0aGUgcGF0dGVybiB7bnVtYmVyfVxuXHRcdFx0aWYgKGxhc3RQYXJ0ID09PSAnJyB8fCAvXlxce1xcZCtcXH0kLy50ZXN0KGxhc3RQYXJ0KSkge1xuXHRcdFx0XHQvLyBDb25jYXRlbmF0ZSB0aGUgbGFzdCB0d28gcGFydHNcblx0XHRcdFx0bGFzdFBhcnQgPSBwYXJ0c1twYXJ0cy5sZW5ndGggLSAyXSArICcjJyArIGxhc3RQYXJ0O1xuXHRcdFx0fVx0XG5cdFx0XHRcblx0XHRcdC8vICAvLyBDaGVjayBpZiBsYXN0UGFydCBjb250YWlucyBhbnkgJy8nIGFuZCBpZiBzbywgdGFrZSB0aGUgbGFzdCBwYXJ0IGFmdGVyIHNwbGl0dGluZyBieSAnLydcblx0XHRcdCBpZiAobGFzdFBhcnQuaW5jbHVkZXMoJy8nKSkge1xuXHRcdFx0XHRsYXN0UGFydCA9IGxhc3RQYXJ0LnNwbGl0KCcvJykucG9wKCkgfHwgbGFzdFBhcnQ7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGxhYmVsID0gbGFzdFBhcnQ7XG5cblx0XHR9IGVsc2UgaWYgKHBhdGgpIHtcblx0XHRcdGxhYmVsID0gcGF0aC5zcGxpdCgnLycpLnBvcCgpIHx8IGxhYmVsOyAvLyBUYWtlIHRoZSBsYXN0IHBhcnQgYWZ0ZXIgc3BsaXR0aW5nIGJ5ICcvJ1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gJyc7XG5cdFx0fVxuXHRcblxuXHRcdGxhYmVsID0gbGFiZWwucmVwbGFjZSgvW1xcW1xcXV0vZywgJycpIC8vIFJlbW92ZSBicmFja2V0cyBpZiB0aGV5IGV4aXN0XG4gICAgICAgICAgICAgLnJlcGxhY2UoL1xcLlteLyNdKyMoPz1cXHtcXGQrXFx9JCkvLCAnJykgLy8gUmVtb3ZlIGhhc2h0YWcgaWYgaXQgZXhpc3RzXG4gICAgICAgICAgICAgLnJlcGxhY2UoL1xcLlteLy5dKyQvLCAnJyk7IC8vIFJlbW92ZSBmaWxlIGV4dGVuc2lvbiBpZiBpdCBleGlzdHNcblxuXHRcblx0XHRyZXR1cm4gbGFiZWw7XG5cdFx0XG5cdH1cblxuXHR0cnVuY2F0ZUxhYmVsKGxhYmVsOiBzdHJpbmcpIHtcblx0XHRyZXR1cm4gbGFiZWwubGVuZ3RoID4gdGhpcy5tYXhMYWJlbENoYXJhY3RlcnMgPyBsYWJlbC5zbGljZSgwLCB0aGlzLm1heExhYmVsQ2hhcmFjdGVycykgKyAnLi4uJyA6IGxhYmVsO1xuXHR9XG5cblx0Z2V0IGVudigpIHsgcmV0dXJuIHdpbmRvdy5TbWFydFNlYXJjaD8ubWFpbj8uZW52OyB9XG5cdGdldCBzbWFydE5vdGVzKCkgeyByZXR1cm4gd2luZG93LlNtYXJ0U2VhcmNoPy5tYWluPy5lbnY/LnNtYXJ0X3NvdXJjZXM/Lml0ZW1zOyB9XG5cdFxuXG5cdGFzeW5jIG9uT3BlbigpIHtcblx0XHR0aGlzLmNvbnRlbnRFbC5jcmVhdGVFbCgnaDInLCB7IHRleHQ6ICdTbWFydCBWaXN1YWxpemVyJyB9KTtcblx0XHR0aGlzLmNvbnRlbnRFbC5jcmVhdGVFbCgncCcsIHsgdGV4dDogJ1dhaXRpbmcgZm9yIFNtYXJ0IENvbm5lY3Rpb25zIHRvIGxvYWQuLi4nIH0pO1xuXHRcdGNvbnNvbGUubG9nKHRoaXMuYXBwKTtcblxuXHRcdCAvLyBJbnRyb2R1Y2UgYSBzbWFsbCBkZWxheSBiZWZvcmUgcmVuZGVyaW5nIHRvIGdpdmUgdmlldyB0aW1lIHRvIGxvYWRcblx0XHQgc2V0VGltZW91dCgoKSA9PiB7XG5cdFx0XHR0aGlzLnJlbmRlcigpO1xuXHRcdH0sIDUwMCk7IC8vIEFkanVzdCB0aGUgZGVsYXkgYXMgbmVlZGVkXG5cblx0fVxuXG5cdGFzeW5jIHJlbmRlcigpIHtcblx0XHQvLyB3YWl0IHVudGlsIHRoaXMuc21hcnROb3RlcyBpcyBhdmFpbGFibGVcblx0XHR3aGlsZSAoIXRoaXMuZW52Py5lbnRpdGllc19sb2FkZWQpIHtcblx0XHRcdGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCAyMDAwKSk7XG5cdFx0fVxuXG5cdFx0dGhpcy5jb250ZW50RWwuZW1wdHkoKTtcblx0XHR0aGlzLmluaXRpYWxpemVWYXJpYWJsZXMoKTtcblx0XHRpZiAoT2JqZWN0LmtleXModGhpcy5zbWFydE5vdGVzKS5sZW5ndGggPT09IDApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0dGhpcy5zZXR1cFNldHRpbmdzTWVudSgpO1xuXHRcdHRoaXMuc2V0dXBTVkcoKTtcblx0XHR0aGlzLmFkZEV2ZW50TGlzdGVuZXJzKCk7XHRcdFxuXHRcdHRoaXMud2F0Y2hGb3JOb3RlQ2hhbmdlcygpO1xuXG5cdFx0Ly8gTG9hZCBsYXRlc3QgYWN0aXZlIGZpbGUgaWYgb3BlbmluZyB2aWV3IGZvciBmaXJzdCB0aW1lXG5cdFx0Y29uc3QgY3VycmVudE5vZGVDaGFuZ2UgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlRmlsZSgpO1xuXHRcdGlmIChjdXJyZW50Tm9kZUNoYW5nZSAmJiAhdGhpcy5jdXJyZW50Tm90ZUNoYW5naW5nKSB7XG5cdFx0XHR0aGlzLmN1cnJlbnROb3RlS2V5ID0gY3VycmVudE5vZGVDaGFuZ2UucGF0aDtcblx0XHRcdHRoaXMuY3VycmVudE5vdGVDaGFuZ2luZyA9IHRydWU7XG5cdFx0XHR0aGlzLnJlbmRlcigpO1xuXHRcdFx0cmV0dXJuXG5cdFx0fVxuXHRcdFx0XHRcblx0XHRcblx0XHRhd2FpdCB0aGlzLnVwZGF0ZVZpc3VhbGl6YXRpb24oKTtcblx0fVxuXG5cdGFzeW5jIHdhaXRGb3JTbWFydE5vdGVzKCkge1xuXHRcdGNvbnN0IG1heFJldHJpZXMgPSAxMDsgLy8gU2V0IGEgbWF4IG51bWJlciBvZiByZXRyaWVzIHRvIGF2b2lkIGluZmluaXRlIGxvb3Bcblx0XHRjb25zdCBkZWxheSA9IDIwMDA7IC8vIERlbGF5IGluIG1pbGxpc2Vjb25kcyBiZXR3ZWVuIHJldHJpZXNcblx0XG5cdFx0Zm9yIChsZXQgYXR0ZW1wdCA9IDA7IGF0dGVtcHQgPCBtYXhSZXRyaWVzOyBhdHRlbXB0KyspIHtcblx0XHRcdGNvbnNvbGUubG9nKHRoaXMuZW52KTtcblx0XHRcdGlmICh0aGlzLmVudj8uZW50aXRpZXNfbG9hZGVkKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCBkZWxheSkpO1xuXHRcdH1cblx0XG5cdFx0Ly8gSWYgd2UgcmVhY2ggaGVyZSwgaXQgbWVhbnMgdGhlIGVudGl0aWVzIGFyZSBzdGlsbCBub3QgbG9hZGVkXG5cdFx0Y29uc29sZS5lcnJvcignU21hcnQgbm90ZXMgZGlkIG5vdCBsb2FkIGluIHRpbWUnKTtcblx0XHR0aGlzLmNvbnRlbnRFbC5jcmVhdGVFbCgncCcsIHsgdGV4dDogJ0ZhaWxlZCB0byBsb2FkIFNtYXJ0IENvbm5lY3Rpb25zLicgfSk7XG5cdH1cblxuXHRpbml0aWFsaXplVmFyaWFibGVzKCkge1xuXHRcdHRoaXMubWluU2NvcmUgPSAxO1xuXHRcdHRoaXMubWF4U2NvcmUgPSAwO1xuXHR9XG5cblx0c2V0dXBTVkcoKSB7XG5cdFx0Y29uc3Qgd2lkdGggPSB0aGlzLmNvbnRlbnRFbC5jbGllbnRXaWR0aDtcblx0XHRjb25zdCBoZWlnaHQgPSB0aGlzLmNvbnRlbnRFbC5jbGllbnRIZWlnaHQ7XG5cdFxuXHRcdGNvbnN0IHN2ZyA9IGQzLnNlbGVjdCh0aGlzLmNvbnRlbnRFbClcblx0XHRcdC5hcHBlbmQoJ3N2ZycpXG5cdFx0XHQuYXR0cignd2lkdGgnLCAnMTAwJScpXG5cdFx0XHQuYXR0cignaGVpZ2h0JywgJzk4JScpXG5cdFx0XHQuYXR0cigndmlld0JveCcsIGAke3dpZHRoLzR9ICR7aGVpZ2h0LzR9ICR7d2lkdGgvMn0gJHtoZWlnaHQvMn1gKVxuXHRcdFx0LmF0dHIoJ3ByZXNlcnZlQXNwZWN0UmF0aW8nLCAneE1pZFlNaWQgbWVldCcpXG5cdFx0XHQuY2FsbChkMy56b29tKClcblx0XHRcdFx0LnNjYWxlRXh0ZW50KFswLjEsIDEwXSlcblx0XHRcdFx0Lm9uKCd6b29tJywgKGV2ZW50KSA9PiB7XG5cdFx0XHRcdFx0c3ZnR3JvdXAuYXR0cigndHJhbnNmb3JtJywgZXZlbnQudHJhbnNmb3JtKTtcblx0XHRcdFx0XHR0aGlzLnVwZGF0ZUxhYmVsT3BhY2l0eShldmVudC50cmFuc2Zvcm0uayk7XG5cdFx0XHRcdH0pKTtcblx0XHRcdFx0XG5cdFx0Y29uc3Qgc3ZnR3JvdXAgPSBzdmcuYXBwZW5kKCdnJyk7XG5cdFxuXHRcdHN2Z0dyb3VwLmFwcGVuZCgnZycpLmF0dHIoJ2NsYXNzJywgJ3NtYXJ0LWNvbm5lY3Rpb25zLXZpc3VhbGl6ZXItbGlua3MnKTtcblx0XHRzdmdHcm91cC5hcHBlbmQoJ2cnKS5hdHRyKCdjbGFzcycsICdzbWFydC1jb25uZWN0aW9ucy12aXN1YWxpemVyLW5vZGUtbGFiZWxzJyk7XG5cdFx0c3ZnR3JvdXAuYXBwZW5kKCdnJykuYXR0cignY2xhc3MnLCAnc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1saW5rLWxhYmVscycpO1xuXHRcdHN2Z0dyb3VwLmFwcGVuZCgnZycpLmF0dHIoJ2NsYXNzJywgJ3NtYXJ0LWNvbm5lY3Rpb25zLXZpc3VhbGl6ZXItbm9kZXMnKTtcblx0XG5cdFx0dGhpcy5zdmdHcm91cCA9IHN2Z0dyb3VwO1xuXHRcdHRoaXMuc3ZnID0gc3ZnO1xuXHR9XG5cdFxuXG5cdGdldFNWR0RpbWVuc2lvbnMoKSB7XG5cdFx0Y29uc3Qgd2lkdGggPSB0aGlzLmNvbnRlbnRFbC5jbGllbnRXaWR0aCB8fCB0aGlzLmNvbnRlbnRFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aDtcblx0XHRjb25zdCBoZWlnaHQgPSB0aGlzLmNvbnRlbnRFbC5jbGllbnRIZWlnaHQgfHwgdGhpcy5jb250ZW50RWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0O1xuXHRcdHJldHVybiB7IHdpZHRoLCBoZWlnaHQgfTtcblx0fVxuXHRcblxuXHRjcmVhdGVTVkcod2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIpIHtcblx0XHRyZXR1cm4gZDMuc2VsZWN0KHRoaXMuY29udGVudEVsKVxuXHRcdFx0LmFwcGVuZCgnc3ZnJylcblx0XHRcdC5hdHRyKCd3aWR0aCcsICcxMDAlJylcblx0XHRcdC5hdHRyKCdoZWlnaHQnLCAnOTglJylcblx0XHRcdC5hdHRyKCd2aWV3Qm94JywgYDAgMCAke3dpZHRofSAke2hlaWdodH1gKVxuXHRcdFx0LmF0dHIoJ3ByZXNlcnZlQXNwZWN0UmF0aW8nLCAneE1pZFlNaWQgbWVldCcpXG5cdFx0XHQuc3R5bGUoJ2JhY2tncm91bmQnLCAnIzJkMzAzOScpXG5cdFx0XHQuY2FsbChkMy56b29tKCkuc2NhbGVFeHRlbnQoWzAuMSwgMTBdKS5vbignem9vbScsIHRoaXMub25ab29tLmJpbmQodGhpcykpKTtcblx0fVxuXG5cdGNyZWF0ZVNWR0dyb3VwKHN2ZzogYW55KSB7XG5cdFx0cmV0dXJuIHN2Zy5hcHBlbmQoJ2cnKTtcblx0fVxuXG5cdG9uWm9vbShldmVudDogYW55KSB7XG5cdFx0ZDMuc2VsZWN0KCdnJykuYXR0cigndHJhbnNmb3JtJywgZXZlbnQudHJhbnNmb3JtKTtcblx0XHR0aGlzLnVwZGF0ZUxhYmVsT3BhY2l0eShldmVudC50cmFuc2Zvcm0uayk7XG5cdH1cblxuXHRpbml0aWFsaXplU2ltdWxhdGlvbih3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcikge1xuXHRcdHRoaXMuc2ltdWxhdGlvbiA9IGQzLmZvcmNlU2ltdWxhdGlvbigpXG5cdFx0XHQuZm9yY2UoJ2NlbnRlcicsIGQzLmZvcmNlQ2VudGVyKHdpZHRoIC8gMiwgaGVpZ2h0IC8gMikuc3RyZW5ndGgodGhpcy5jZW50ZXJGb3JjZSkpXG5cdFx0XHQuZm9yY2UoJ2NoYXJnZScsIGQzLmZvcmNlTWFueUJvZHkoKS5zdHJlbmd0aCgtdGhpcy5yZXBlbEZvcmNlKSlcblx0XHRcdC8vIC5mb3JjZSgnbGluaycsIGQzLmZvcmNlTGluaygpLmlkKChkOiBhbnkpID0+IGQuaWQpLmRpc3RhbmNlKHRoaXMubGlua0Rpc3RhbmNlKS5zdHJlbmd0aCh0aGlzLmxpbmtGb3JjZSkpXG5cdFx0XHQuZm9yY2UoJ2xpbmsnLCBkMy5mb3JjZUxpbmsoKVxuICAgICAgICAgICAgICAgIC5pZCgoZDogYW55KSA9PiBkLmlkKVxuICAgICAgICAgICAgICAgIC5kaXN0YW5jZSgoZDogYW55KSA9PiB0aGlzLmxpbmtEaXN0YW5jZVNjYWxlKGQuc2NvcmUpKVxuICAgICAgICAgICAgICAgIC5zdHJlbmd0aCh0aGlzLmxpbmtGb3JjZSkpXG5cdFx0XHQuZm9yY2UoJ2NvbGxpZGUnLCBkMy5mb3JjZUNvbGxpZGUoKS5yYWRpdXModGhpcy5ub2RlU2l6ZSArIDMpLnN0cmVuZ3RoKDAuNykpXG5cdFx0XHQub24oJ3RpY2snLCB0aGlzLnNpbXVsYXRpb25UaWNrSGFuZGxlci5iaW5kKHRoaXMpKTtcblxuXHRcdCAvLyBBZGQgdGhlIGN1c3RvbSBmb3JjZSBmb3IgbGFiZWxzXG5cdFx0ICB0aGlzLnNpbXVsYXRpb24uZm9yY2UoJ2xhYmVscycsIHRoaXMuYXZvaWRMYWJlbENvbGxpc2lvbnMuYmluZCh0aGlzKSk7XG5cblx0XHQvLyBEaXNhYmxlIHRoZSBjZW50ZXJpbmcgZm9yY2UgYWZ0ZXIgdGhlIGluaXRpYWwgcG9zaXRpb25pbmdcblx0XHQvLyB0aGlzLnNpbXVsYXRpb24ub24oJ2VuZCcsICgpID0+IHtcblx0XHQvLyBcdGNvbnNvbGUubG9nKCdTaW11bGF0aW9uIGVuZGVkLCBjZW50ZXIgZm9yY2UgcmVtb3ZlZC4nKTtcblx0XHQvLyBcdHRoaXMuc2ltdWxhdGlvbi5mb3JjZSgnY2VudGVyJywgbnVsbCk7IC8vIFJlbW92ZSB0aGUgY2VudGVyIGZvcmNlIGFmdGVyIGluaXRpYWwgc3RhYmlsaXphdGlvblxuXHRcdC8vIH0pO1xuXG5cdH1cblxuXG5cdHJlbmRlckxlZ2VuZCgpIHtcblx0XHRpZiAodGhpcy52YWxpZGF0ZWRMaW5rcy5sZW5ndGggPT09IDApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRjb25zdCB0eXBlcyA9IFsnYmxvY2snLCAnbm90ZSddOyAvLyBDb25uZWN0aW9uIHR5cGVzXG5cdFx0Y29uc3QgY291bnRzID0gdHlwZXMubWFwKHR5cGUgPT4gdGhpcy5ub2Rlcy5maWx0ZXIoKG5vZGU6IGFueSkgPT4gKG5vZGUuZ3JvdXAgPT09IHR5cGUpICYmIG5vZGUuaWQgIT09IHRoaXMuY2VudHJhbE5vZGUuaWQpLmxlbmd0aCk7XG5cblx0XHQvLyBJbml0aWFsaXplIGNvbG9ycyB3aXRoIGRlZmF1bHQgdmFsdWVzXG4gICAgXHRsZXQgY29sb3JzOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9ID0geyAnYmxvY2snOiBERUZBVUxUX05FVFdPUktfU0VUVElOR1MuYmxvY2tGaWxsQ29sb3IsICdub3RlJzogREVGQVVMVF9ORVRXT1JLX1NFVFRJTkdTLm5vdGVGaWxsQ29sb3IsICd3aWtpJzogREVGQVVMVF9ORVRXT1JLX1NFVFRJTkdTLndpa2lGaWxsQ29sb3IgfTsgXG5cblx0XHQvLyBJdGVyYXRlIG92ZXIgbm9kZXMgdG8gZmluZCB0aGUgY29sb3IgZm9yIGVhY2ggdHlwZVxuXHRcdGZvciAobGV0IG5vZGUgb2YgdGhpcy5ub2Rlcykge1xuXHRcdFx0aWYgKGNvbG9yc1tub2RlLmdyb3VwXSkge1xuXHRcdFx0XHRjb2xvcnNbbm9kZS5ncm91cF0gPSBub2RlLmZpbGw7XG5cdFx0XHR9XG5cdFx0fVx0XG5cblx0XHQvLyBVc2UgY29udGVudEVsIHRvIGNyZWF0ZSBhIHRhYmxlIGNvbnRhaW5lclxuXHRcdGNvbnN0IHRhYmxlQ29udGFpbmVyID0gdGhpcy5jb250ZW50RWwuY3JlYXRlRWwoJ2RpdicsIHsgY2xzOiAnc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1sZWdlbmQtY29udGFpbmVyJyB9KTtcblxuXHRcdC8vIENyZWF0ZSB0YWJsZSBoZWFkZXJcblx0XHRjb25zdCBoZWFkZXIgPSB0YWJsZUNvbnRhaW5lci5jcmVhdGVFbCgnZGl2JywgeyBjbHM6ICdzbWFydC1jb25uZWN0aW9ucy12aXN1YWxpemVyLWxlZ2VuZC1oZWFkZXInIH0pO1xuXHRcdFsnQ29ubmVjdGlvbiBUeXBlJywgJ0NvdW50JywgJ0NvbG9yJ10uZm9yRWFjaChoZWFkZXJUaXRsZSA9PiB7XG5cblx0XHRcdC8vIEFzc2lnbiBhcHByb3BpYXRlIGNsYXNzIGJhc2VkIG9uIGNvbHVtblxuXHRcdFx0c3dpdGNoKGhlYWRlclRpdGxlKSB7XG5cdFx0XHRcdGNhc2UgXCJDb25uZWN0aW9uIFR5cGVcIjpcblx0XHRcdFx0XHRoZWFkZXIuY3JlYXRlRWwoJ2RpdicsIHsgdGV4dDogaGVhZGVyVGl0bGUsIGNsczogJ3NtYXJ0LWNvbm5lY3Rpb25zLXZpc3VhbGl6ZXItdmFyaWFibGUtY29sJyB9KTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcIkNvdW50XCI6XG5cdFx0XHRcdFx0aGVhZGVyLmNyZWF0ZUVsKCdkaXYnLCB7IHRleHQ6IGhlYWRlclRpdGxlLCBjbHM6ICdzbWFydC1jb25uZWN0aW9ucy12aXN1YWxpemVyLWNvdW50LWNvbCcgfSk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgXCJDb2xvclwiOlxuXHRcdFx0XHRcdGhlYWRlci5jcmVhdGVFbCgnZGl2JywgeyB0ZXh0OiBoZWFkZXJUaXRsZSwgY2xzOiAnc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1jb2xvci1jb2wnIH0pO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdGhlYWRlci5jcmVhdGVFbCgnZGl2JywgeyB0ZXh0OiBoZWFkZXJUaXRsZSwgY2xzOiAnc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci12YXJpYWJsZS1jb2wnIH0pO1xuXHRcdFx0XHRcdGJyZWFrXG5cdFx0XHR9XG5cblx0XHR9KTtcblxuXHRcdC8vIENyZWF0ZSByb3dzIGZvciBlYWNoIHR5cGVcblx0XHR0eXBlcy5mb3JFYWNoKCh0eXBlLCBpbmRleCkgPT4ge1xuXHRcdFx0aWYgKGNvdW50c1tpbmRleF0gPiAwKSB7IC8vIENoZWNrIGlmIHRoZSBjb3VudCBpcyBncmVhdGVyIHRoYW4gemVyb1xuXHRcdFx0XHRjb25zdCByb3cgPSB0YWJsZUNvbnRhaW5lci5jcmVhdGVFbCgnZGl2JywgeyBjbHM6ICdzbWFydC1jb25uZWN0aW9ucy12aXN1YWxpemVyLWxlZ2VuZC1yb3cnIH0pO1xuXHRcdFx0XHRcblx0XHRcdFx0cm93LmNyZWF0ZUVsKCdkaXYnLCB7IHRleHQ6IHRoaXMuY2FwaXRhbGl6ZUZpcnN0TGV0dGVyKHR5cGUpLCBjbHM6ICdzbWFydC1jb25uZWN0aW9ucy12aXN1YWxpemVyLXZhcmlhYmxlLWNvbCcgfSk7XG5cdFx0XHRcdHJvdy5jcmVhdGVFbCgnZGl2JywgeyB0ZXh0OiBgJHtjb3VudHNbaW5kZXhdfWAsIGNsczogJ3NtYXJ0LWNvbm5lY3Rpb25zLXZpc3VhbGl6ZXItY291bnQtY29sJyB9KTtcblx0XHRcdFx0XG5cdFx0XHRcdGNvbnN0IGNvbG9yQ2VsbCA9IHJvdy5jcmVhdGVFbCgnZGl2JywgeyBjbHM6ICdzbWFydC1jb25uZWN0aW9ucy12aXN1YWxpemVyLWNvbG9yLWNvbCcgfSk7XG5cdFx0XHRcdGNvbnN0IGNvbG9yUGlja2VyID0gY29sb3JDZWxsLmNyZWF0ZUVsKCdpbnB1dCcsIHsgdHlwZTogJ2NvbG9yJywgdmFsdWU6IGNvbG9yc1t0eXBlIGFzIGtleW9mIHR5cGVvZiBjb2xvcnNdLCBjbHM6ICdzbWFydC1jb25uZWN0aW9ucy12aXN1YWxpemVyLWxlZ2VuZC1jb2xvci1waWNrZXInIH0pO1xuXHRcblx0XHRcdFx0Y29sb3JQaWNrZXIuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKGUpID0+IHRoaXMudXBkYXRlTm9kZUNvbG9ycyh0eXBlLCAoZS50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudCkudmFsdWUpKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXG5cdGNhcGl0YWxpemVGaXJzdExldHRlcihzdHI6IHN0cmluZyk6IHN0cmluZyB7XG5cdFx0aWYgKCFzdHIpIHJldHVybiBzdHI7XG5cdFx0Y29uc29sZS5sb2coJ3N0cmluZzogJywgc3RyKTtcblx0XHRyZXR1cm4gc3RyLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyLnNsaWNlKDEpO1xuXHR9XG5cblx0dXBkYXRlTm9kZUNvbG9ycyh0eXBlOiBzdHJpbmcsIGNvbG9yOiBzdHJpbmcpIHtcblxuXHRcdGlmICh0eXBlID09PSAnbm90ZScgJiYgY29sb3IgIT09IHRoaXMubm90ZUZpbGxDb2xvcikge1xuXHRcdFx0dGhpcy5ub3RlRmlsbENvbG9yID0gY29sb3I7XG5cdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5ub3RlRmlsbENvbG9yID0gY29sb3I7XG5cdFx0XHR0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTsgLy8gU2F2ZSB0aGUgc2V0dGluZ3NcdFx0XG5cdFx0fVxuXG5cdFx0aWYgKHR5cGUgPT09ICdibG9jaycgJiYgY29sb3IgIT09IHRoaXMuYmxvY2tGaWxsQ29sb3IpIHtcblx0XHRcdHRoaXMuYmxvY2tGaWxsQ29sb3IgPSBjb2xvcjtcblx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLmJsb2NrRmlsbENvbG9yID0gY29sb3I7XG5cdFx0XHR0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTsgLy8gU2F2ZSB0aGUgc2V0dGluZ3NcdFx0XG5cdFx0fVxuXG5cdFx0aWYgKHR5cGUgPT09ICd3aWtpJyAmJiBjb2xvciAhPT0gdGhpcy53aWtpRmlsbENvbG9yKSB7XG5cdFx0XHR0aGlzLndpa2lGaWxsQ29sb3IgPSBjb2xvcjtcblx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLndpa2lGaWxsQ29sb3IgPSBjb2xvcjtcblx0XHRcdHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpOyAvLyBTYXZlIHRoZSBzZXR0aW5nc1x0XHRcblx0XHR9XG5cblxuICAgICAgICB0aGlzLm5vZGVzLmZvckVhY2goKG5vZGUgOiBhbnkpID0+IHtcbiAgICAgICAgICAgIGlmIChub2RlLmdyb3VwID09PSB0eXBlKSB7XG4gICAgICAgICAgICAgICAgbm9kZS5maWxsID0gY29sb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnVwZGF0ZU5vZGVGaWxsKCk7XG4gICAgfVxuXG4gICAgdXBkYXRlTm9kZUZpbGwoKSB7XG4gICAgICAgIC8vIFVwZGF0ZSB0aGUgRDMgdmlzdWFsaXphdGlvbiBoZXJlXG4gICAgICAgIHRoaXMubm9kZVNlbGVjdGlvbi5hdHRyKCdmaWxsJywgKGQ6IGFueSkgPT4gZC5maWxsKTtcbiAgICB9XG5cblx0Ly8gRW5zdXJlIG5vZGUgbGFiZWxzIGRvbnQgY29sbGlkZSB3aXRoIGFueSBlbGVtZW50c1xuXHRhdm9pZExhYmVsQ29sbGlzaW9ucygpIHtcblx0XHRjb25zdCBwYWRkaW5nID0gNTsgLy8gQWRqdXN0IHBhZGRpbmcgYXMgbmVlZGVkXG5cdFx0cmV0dXJuIChhbHBoYTogbnVtYmVyKSA9PiB7XG5cdFx0XHRjb25zdCBxdWFkdHJlZSA9IGQzLnF1YWR0cmVlKClcblx0XHRcdFx0LngoKGQ6IGFueSkgPT4gZC54KVxuXHRcdFx0XHQueSgoZDogYW55KSA9PiBkLnkpXG5cdFx0XHRcdC5hZGRBbGwodGhpcy5sYWJlbFNlbGVjdGlvbi5kYXRhKCkpO1xuXHRcblx0XHRcdHRoaXMubGFiZWxTZWxlY3Rpb24uZWFjaCgoZDogYW55KSA9PiB7XG5cdFx0XHRcdGNvbnN0IHJhZGl1cyA9IGQucmFkaXVzICsgcGFkZGluZzsgLy8gQXNzdW1pbmcgZWFjaCBsYWJlbCBoYXMgYSByYWRpdXMsIGFkanVzdCBhcyBuZWNlc3Nhcnlcblx0XHRcdFx0Y29uc3QgbngxID0gZC54IC0gcmFkaXVzLCBueDIgPSBkLnggKyByYWRpdXMsIG55MSA9IGQueSAtIHJhZGl1cywgbnkyID0gZC55ICsgcmFkaXVzO1xuXHRcblx0XHRcdFx0cXVhZHRyZWUudmlzaXQoKHF1YWQsIHgxLCB5MSwgeDIsIHkyKSA9PiB7XG5cdFx0XHRcdFx0aWYgKCdkYXRhJyBpbiBxdWFkICYmIHF1YWQuZGF0YSAmJiAocXVhZC5kYXRhICE9PSBkKSkge1x0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0bGV0IHggPSBkLnggLSAocXVhZC5kYXRhIGFzIGFueSkueCxcblx0XHRcdFx0XHRcdFx0eSA9IGQueSAtIChxdWFkLmRhdGEgYXMgYW55KS55LFxuXHRcdFx0XHRcdFx0XHRsID0gTWF0aC5zcXJ0KHggKiB4ICsgeSAqIHkpLFxuXHRcdFx0XHRcdFx0XHRyID0gcmFkaXVzICsgKHF1YWQuZGF0YSBhcyBhbnkpLnJhZGl1cztcblx0XHRcdFx0XHRcdGlmIChsIDwgcikge1xuXHRcdFx0XHRcdFx0XHRsID0gKGwgLSByKSAvIGwgKiBhbHBoYTtcblx0XHRcdFx0XHRcdFx0ZC54IC09IHggKj0gbDtcblx0XHRcdFx0XHRcdFx0ZC55IC09IHkgKj0gbDtcblx0XHRcdFx0XHRcdFx0KHF1YWQuZGF0YSBhcyBhbnkpLnggKz0geDtcblx0XHRcdFx0XHRcdFx0KHF1YWQuZGF0YSBhcyBhbnkpLnkgKz0geTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHgxID4gbngyIHx8IHgyIDwgbngxIHx8IHkxID4gbnkyIHx8IHkyIDwgbnkxO1xuXHRcdFx0XHR9KTtcblx0XHRcdH0pO1xuXHRcdH07XG5cdH1cblxuXHRhZGRFdmVudExpc3RlbmVycygpIHtcblx0XHR0aGlzLnNldHVwU1ZHRXZlbnRMaXN0ZW5lcnMoKTtcblx0XHR0aGlzLnNldHVwS2V5Ym9hcmRFdmVudExpc3RlbmVycygpO1xuXHR9XG5cblx0c2V0dXBTVkdFdmVudExpc3RlbmVycygpIHtcblx0XHRkMy5zZWxlY3QoJ3N2ZycpXG5cdFx0XHQub24oJ21vdXNlZG93bicsIHRoaXMub25Nb3VzZURvd24uYmluZCh0aGlzKSlcblx0XHRcdC5vbignbW91c2Vtb3ZlJywgdGhpcy5vbk1vdXNlTW92ZS5iaW5kKHRoaXMpKVxuXHRcdFx0Lm9uKCdtb3VzZXVwJywgdGhpcy5vbk1vdXNlVXAuYmluZCh0aGlzKSlcblx0XHRcdC5vbignY2xpY2snLCB0aGlzLm9uU1ZHQ2xpY2suYmluZCh0aGlzKSk7XG5cdH1cblxuXHQvLyBUT0RPOiBBZGQgYmFjayBpbiB3aGVuIHJlYWR5IGZvciBtdWx0aXNlbGVjdFxuXHRvbk1vdXNlRG93bihldmVudDogYW55KSB7XG5cdFx0Ly8gaWYgKCFldmVudC5jdHJsS2V5KSB0aGlzLmNsZWFyU2VsZWN0aW9ucygpO1xuXHRcdC8vIHRoaXMuc3RhcnRCb3hTZWxlY3Rpb24oZXZlbnQpO1xuXHR9XG5cblx0b25Nb3VzZU1vdmUoZXZlbnQ6IGFueSkge1xuXHRcdC8vIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdC8vIHRoaXMudXBkYXRlQm94U2VsZWN0aW9uKGV2ZW50KTtcblx0fVxuXG5cdG9uTW91c2VVcCgpIHtcblx0XHQvLyB0aGlzLmVuZEJveFNlbGVjdGlvbigpO1xuXHR9XG5cblx0b25TVkdDbGljayhldmVudDogYW55KSB7XG5cdFx0aWYgKCFldmVudC5kZWZhdWx0UHJldmVudGVkICYmICFldmVudC5jdHJsS2V5KSB0aGlzLmNsZWFyU2VsZWN0aW9ucygpO1xuXHR9XG5cblx0c2V0dXBLZXlib2FyZEV2ZW50TGlzdGVuZXJzKCkge1xuXHRcdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLm9uS2V5RG93bi5iaW5kKHRoaXMpKTtcblx0XHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIHRoaXMub25LZXlVcC5iaW5kKHRoaXMpKTtcblx0fVxuXG5cdC8vIFRPRE86OiBBZGQgYmFjayB3aGVuIHJlYWR5IGZvciBtdWx0aXNlbGVjdFxuXHRvbktleURvd24oZXZlbnQ6IGFueSkge1xuXHRcdC8vIGlmIChldmVudC5rZXkgPT09ICdBbHQnIHx8IGV2ZW50LmtleSA9PT0gJ0FsdEdyYXBoJykgdGhpcy5pc0FsdFByZXNzZWQgPSB0cnVlO1xuXHRcdC8vIGlmIChldmVudC5rZXkgPT09ICdDb250cm9sJykge1xuXHRcdC8vIFx0dGhpcy5pc0N0cmxQcmVzc2VkID0gdHJ1ZTtcblx0XHQvLyBcdGQzLnNlbGVjdCgnc3ZnJykuc3R5bGUoJ2N1cnNvcicsICdjcm9zc2hhaXInKTtcblx0XHQvLyB9XG5cdH1cblxuXHRvbktleVVwKGV2ZW50OiBhbnkpIHtcblx0XHQvLyBpZiAoZXZlbnQua2V5ID09PSAnQWx0JyB8fCBldmVudC5rZXkgPT09ICdBbHRHcmFwaCcpIHRoaXMuaXNBbHRQcmVzc2VkID0gZmFsc2U7XG5cdFx0Ly8gaWYgKGV2ZW50LmtleSA9PT0gJ0NvbnRyb2wnKSB7XG5cdFx0Ly8gXHR0aGlzLmlzQ3RybFByZXNzZWQgPSBmYWxzZTtcblx0XHQvLyBcdGQzLnNlbGVjdCgnc3ZnJykuc3R5bGUoJ2N1cnNvcicsICdkZWZhdWx0Jyk7XG5cdFx0Ly8gfVxuXHR9XG5cblx0c2V0dXBTZXR0aW5nc01lbnUoKSB7XG4gICAgICAgIC8vIFJlbW92ZSBhbnkgZXhpc3Rpbmcgc2V0dGluZ3MgaWNvbiBhbmQgZHJvcGRvd24gbWVudVxuICAgICAgICBjb25zdCBleGlzdGluZ0ljb24gPSB0aGlzLmNvbnRlbnRFbC5xdWVyeVNlbGVjdG9yKCcuc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1zZXR0aW5ncy1pY29uJyk7XG4gICAgICAgIGlmIChleGlzdGluZ0ljb24pIHtcbiAgICAgICAgICAgIGV4aXN0aW5nSWNvbi5yZW1vdmUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGV4aXN0aW5nRHJvcGRvd25NZW51ID0gdGhpcy5jb250ZW50RWwucXVlcnlTZWxlY3RvcignLnNjLXZpc3VhbGl6ZXItZHJvcGRvd24tbWVudScpO1xuICAgICAgICBpZiAoZXhpc3RpbmdEcm9wZG93bk1lbnUpIHtcbiAgICAgICAgICAgIGV4aXN0aW5nRHJvcGRvd25NZW51LnJlbW92ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ3JlYXRlIG5ldyBzZXR0aW5ncyBpY29uIGFuZCBkcm9wZG93biBtZW51XG4gICAgICAgIHRoaXMuY3JlYXRlU2V0dGluZ3NJY29uKCk7XG4gICAgICAgIHRoaXMuY3JlYXRlRHJvcGRvd25NZW51KCk7XG4gICAgICAgIHRoaXMuc2V0dXBBY2NvcmRpb25IZWFkZXJzKCk7XG4gICAgICAgIHRoaXMuc2V0dXBTZXR0aW5nc0V2ZW50TGlzdGVuZXJzKCk7XG4gICAgfVxuXG5cdGNyZWF0ZURyb3Bkb3duTWVudSgpIHtcblx0XHRjb25zdCBkcm9wZG93bk1lbnUgPSB0aGlzLmNvbnRlbnRFbC5jcmVhdGVFbCgnZGl2JywgeyBjbHM6ICdzYy12aXN1YWxpemVyLWRyb3Bkb3duLW1lbnUnIH0pO1xuXHRcdHRoaXMuYnVpbGREcm9wZG93bk1lbnVDb250ZW50KGRyb3Bkb3duTWVudSk7XG5cdH1cblxuXHRidWlsZERyb3Bkb3duTWVudUNvbnRlbnQoZHJvcGRvd25NZW51OiBIVE1MRWxlbWVudCkge1xuXHRcdGNvbnN0IG1lbnVIZWFkZXIgPSBkcm9wZG93bk1lbnUuY3JlYXRlRWwoJ2RpdicsIHsgY2xzOiAnc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1tZW51LWhlYWRlcicgfSk7XG5cdFx0XG5cdFx0Ly8gQXBwZW5kIHRoZSByZWZyZXNoIGljb24gY3JlYXRlZCBieSBjcmVhdGVSZWZyZXNoSWNvblxuXHRcdGNvbnN0IHJlZnJlc2hJY29uID0gdGhpcy5jcmVhdGVSZWZyZXNoSWNvbigpO1xuXHRcdHJlZnJlc2hJY29uLmNsYXNzTGlzdC5hZGQoJ3NtYXJ0LWNvbm5lY3Rpb25zLXZpc3VhbGl6ZXItaWNvbicpOyAvLyBFbnN1cmUgaXQgaGFzIHRoZSAnaWNvbicgY2xhc3MgZm9yIHN0eWxpbmdcblx0XHRyZWZyZXNoSWNvbi5zZXRBdHRyaWJ1dGUoJ2lkJywgJ3NtYXJ0LWNvbm5lY3Rpb25zLXZpc3VhbGl6ZXItcmVmcmVzaC1pY29uJyk7IC8vIFNldCB0aGUgSUQgZm9yIHNwZWNpZmljIHN0eWxpbmcgb3Igc2VsZWN0aW9uXG5cdFx0bWVudUhlYWRlci5hcHBlbmRDaGlsZChyZWZyZXNoSWNvbik7XHRcblx0XHRcblx0XHQvLyBBcHBlbmQgdGhlIG5ldyBYIGljb24gY3JlYXRlZCBieSBjcmVhdGVOZXdYSWNvblxuXHRcdGNvbnN0IHhJY29uID0gdGhpcy5jcmVhdGVOZXdYSWNvbigpO1xuXHRcdHhJY29uLmNsYXNzTGlzdC5hZGQoJ3NtYXJ0LWNvbm5lY3Rpb25zLXZpc3VhbGl6ZXItaWNvbicpOyAvLyBFbnN1cmUgaXQgaGFzIHRoZSAnaWNvbicgY2xhc3MgZm9yIHN0eWxpbmdcblx0XHR4SWNvbi5zZXRBdHRyaWJ1dGUoJ2lkJywgJ3NtYXJ0LWNvbm5lY3Rpb25zLXZpc3VhbGl6ZXItY2xvc2UtaWNvbicpOyAvLyBTZXQgdGhlIElEIGZvciBzcGVjaWZpYyBzdHlsaW5nIG9yIHNlbGVjdGlvblxuXHRcdG1lbnVIZWFkZXIuYXBwZW5kQ2hpbGQoeEljb24pO1xuICBcblx0XHR0aGlzLmFkZEFjY29yZGlvbkl0ZW0oZHJvcGRvd25NZW51LCAnRmlsdGVycycsIHRoaXMuZ2V0RmlsdGVyc0NvbnRlbnQuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5hZGRBY2NvcmRpb25JdGVtKGRyb3Bkb3duTWVudSwgJ0Rpc3BsYXknLCB0aGlzLmdldERpc3BsYXlDb250ZW50LmJpbmQodGhpcykpO1xuXHRcdHRoaXMuYWRkQWNjb3JkaW9uSXRlbShkcm9wZG93bk1lbnUsICdGb3JjZXMnLCB0aGlzLmdldEZvcmNlc0NvbnRlbnQuYmluZCh0aGlzKSk7XG5cdH1cblx0XG5cdFxuXHRhZGRBY2NvcmRpb25JdGVtKHBhcmVudDogSFRNTEVsZW1lbnQsIHRpdGxlOiBzdHJpbmcsIGJ1aWxkQ29udGVudDogKHBhcmVudDogSFRNTEVsZW1lbnQpID0+IHZvaWQpIHtcblx0XHRjb25zdCBhY2NvcmRpb25JdGVtID0gcGFyZW50LmNyZWF0ZUVsKCdkaXYnLCB7IGNsczogJ3NtYXJ0LWNvbm5lY3Rpb25zLXZpc3VhbGl6ZXItYWNjb3JkaW9uLWl0ZW0nIH0pO1xuXHRcdGNvbnN0IGhlYWRlciA9IGFjY29yZGlvbkl0ZW0uY3JlYXRlRWwoJ2RpdicsIHsgY2xzOiAnc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1hY2NvcmRpb24taGVhZGVyJyB9KTtcblx0XG5cdFx0Y29uc3QgYXJyb3dJY29uID0gaGVhZGVyLmNyZWF0ZUVsKCdzcGFuJywgeyBjbHM6ICdzbWFydC1jb25uZWN0aW9ucy12aXN1YWxpemVyLWFycm93LWljb24nIH0pO1xuXHRcdGFycm93SWNvbi5hcHBlbmRDaGlsZCh0aGlzLmNyZWF0ZVJpZ2h0QXJyb3coKSk7XG5cdFxuXHRcdGhlYWRlci5jcmVhdGVFbCgnc3BhbicsIHsgdGV4dDogdGl0bGUgfSk7XG5cdFxuXHRcdGNvbnN0IGFjY29yZGlvbkNvbnRlbnQgPSBhY2NvcmRpb25JdGVtLmNyZWF0ZUVsKCdkaXYnLCB7IGNsczogJ3NtYXJ0LWNvbm5lY3Rpb25zLXZpc3VhbGl6ZXItYWNjb3JkaW9uLWNvbnRlbnQnIH0pO1xuXHRcdGJ1aWxkQ29udGVudChhY2NvcmRpb25Db250ZW50KTtcblx0fVxuXHRcblx0Z2V0RmlsdGVyc0NvbnRlbnQocGFyZW50OiBIVE1MRWxlbWVudCkge1xuXHRcdGNvbnN0IHNsaWRlckNvbnRhaW5lckxhbmcgPSBwYXJlbnQuY3JlYXRlRWwoJ2RpdicsIHsgY2xzOiAnc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1zbGlkZXItY29udGFpbmVyJyB9KTtcblxuICAgICAgICBzbGlkZXJDb250YWluZXJMYW5nLmNyZWF0ZUVsKCdoMicsIHsgdGV4dDogJ0xhbmd1YWdlIFNldHRpbmdzJyB9KTtcbiAgICAgICAgbmV3IFNldHRpbmcoc2xpZGVyQ29udGFpbmVyTGFuZylcbiAgICAgICAgICAgIC5zZXROYW1lKCdTZWxlY3QgTGFuZ3VhZ2UnKVxuICAgICAgICAgICAgLnNldERlc2MoJ0Nob29zZSB5b3VyIHByZWZlcnJlZCBsYW5ndWFnZScpXG4gICAgICAgICAgICAuYWRkRHJvcGRvd24oZHJvcERvd24gPT4ge1xuICAgICAgICAgICAgICAgIGRyb3BEb3duLmFkZE9wdGlvbignZW4nLCAnRW5nbGlzaCcpOyAgICAgLy8gT3B0aW9uIGZvciBFbmdsaXNoXG4gICAgICAgICAgICAgICAgZHJvcERvd24uYWRkT3B0aW9uKCdwdCcsICdQb3J0dWd1ZXNlJyk7IC8vIE9wdGlvbiBmb3IgUG9ydHVndWVzZVxuICAgICAgICAgICAgICAgIGRyb3BEb3duLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmxhbmd1YWdlKTsgLy8gU2V0IHRoZSBjdXJyZW50IHZhbHVlXG5cbiAgICAgICAgICAgICAgICBkcm9wRG93bi5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MubGFuZ3VhZ2UgPSB2YWx1ZTsgLy8gVXBkYXRlIHRoZSBzZXR0aW5nIHdpdGggc2VsZWN0ZWQgdmFsdWVcbiAgICAgICAgICAgICAgICAgICAgYXBpQ2xpZW50LnNldExhbmcodmFsdWUpO1xuXHRcdFx0XHRcdHRoaXMudXBkYXRlVmlzdWFsaXphdGlvbigpO1xuXHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpOyAvLyBTYXZlIHRoZSB1cGRhdGVkIHNldHRpbmdzXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcblxuXHRcdGNvbnN0IHNsaWRlckNvbnRhaW5lcjEgPSBwYXJlbnQuY3JlYXRlRWwoJ2RpdicsIHsgY2xzOiAnc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1zbGlkZXItY29udGFpbmVyJyB9KTtcblx0XHRzbGlkZXJDb250YWluZXIxLmNyZWF0ZUVsKCdsYWJlbCcsIHsgXG5cdFx0XHR0ZXh0OiBgTWluIHJlbGV2YW5jZTogJHsodGhpcy5yZWxldmFuY2VTY29yZVRocmVzaG9sZCAqIDEwMCkudG9GaXhlZCgwKX0lYCwgXG5cdFx0XHRhdHRyOiB7IGlkOiAnc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1zY29yZVRocmVzaG9sZExhYmVsJywgZm9yOiAnc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1zY29yZVRocmVzaG9sZCcgfSBcblx0XHR9KTtcblxuXHRcdGNvbnN0IHJlbGV2YW5jZVNsaWRlciA9IHNsaWRlckNvbnRhaW5lcjEuY3JlYXRlRWwoJ2lucHV0JywgeyBcblx0XHRcdGF0dHI6IHsgXG5cdFx0XHRcdHR5cGU6ICdyYW5nZScsIFxuXHRcdFx0XHRpZDogJ3NtYXJ0LWNvbm5lY3Rpb25zLXZpc3VhbGl6ZXItc2NvcmVUaHJlc2hvbGQnLCBcblx0XHRcdFx0Y2xhc3M6ICdzbWFydC1jb25uZWN0aW9ucy12aXN1YWxpemVyLXNsaWRlcicsIFxuXHRcdFx0XHRuYW1lOiAnc2NvcmVUaHJlc2hvbGQnLCBcblx0XHRcdFx0bWluOiAnMCcsIFxuXHRcdFx0XHRtYXg6ICcwLjk5JywgXG5cdFx0XHRcdHN0ZXA6ICcwLjAxJyBcblx0XHRcdH0gXG5cdFx0fSk7XG5cblx0XHQvLyBFbnN1cmUgdGhlIHNsaWRlcidzIHZhbHVlIGlzIHNldCBhZnRlciBpdCBpcyBhcHBlbmRlZCB0byB0aGUgRE9NXG5cdFx0cmVsZXZhbmNlU2xpZGVyLnZhbHVlID0gdGhpcy5yZWxldmFuY2VTY29yZVRocmVzaG9sZC50b1N0cmluZygpO1xuXHRcblx0XHRwYXJlbnQuY3JlYXRlRWwoJ2xhYmVsJywgeyB0ZXh0OiAnQ29ubmVjdGlvbiB0eXBlOicsIGNsczogJ3NtYXJ0LWNvbm5lY3Rpb25zLXZpc3VhbGl6ZXItc2V0dGluZ3MtaXRlbS1jb250ZW50LWxhYmVsJyB9KTtcblx0XG5cdFx0Y29uc3QgcmFkaW9Db250YWluZXIgPSBwYXJlbnQuY3JlYXRlRWwoJ2RpdicsIHsgY2xzOiAnc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1yYWRpby1jb250YWluZXInIH0pO1xuXG5cdFx0Y29uc3QgcmFkaW9CbG9ja0xhYmVsID0gcmFkaW9Db250YWluZXIuY3JlYXRlRWwoJ2xhYmVsJyk7XG5cdFx0Y29uc3QgYmxvY2tSYWRpbyA9IHJhZGlvQmxvY2tMYWJlbC5jcmVhdGVFbCgnaW5wdXQnLCB7IFxuXHRcdFx0YXR0cjogeyBcblx0XHRcdFx0dHlwZTogJ3JhZGlvJywgXG5cdFx0XHRcdG5hbWU6ICdjb25uZWN0aW9uVHlwZScsIFxuXHRcdFx0XHR2YWx1ZTogJ2Jsb2NrJyBcblx0XHRcdH0gXG5cdFx0fSk7XG5cdFx0YmxvY2tSYWRpby5jaGVja2VkID0gKHRoaXMuY29ubmVjdGlvblR5cGUgPT09ICdibG9jaycpOyAvLyBTZXQgY2hlY2tlZCBiYXNlZCBvbiBjb25uZWN0aW9uVHlwZVxuXHRcdHJhZGlvQmxvY2tMYWJlbC5hcHBlbmRUZXh0KCcgQmxvY2snKTtcblx0XG5cdFx0Y29uc3QgcmFkaW9Ob3RlTGFiZWwgPSByYWRpb0NvbnRhaW5lci5jcmVhdGVFbCgnbGFiZWwnKTtcblx0XHRjb25zdCBub3RlUmFkaW8gPSByYWRpb05vdGVMYWJlbC5jcmVhdGVFbCgnaW5wdXQnLCB7IFxuXHRcdFx0YXR0cjogeyBcblx0XHRcdFx0dHlwZTogJ3JhZGlvJywgXG5cdFx0XHRcdG5hbWU6ICdjb25uZWN0aW9uVHlwZScsIFxuXHRcdFx0XHR2YWx1ZTogJ25vdGUnIFxuXHRcdFx0fSBcblx0XHR9KTtcblx0XHRub3RlUmFkaW8uY2hlY2tlZCA9ICh0aGlzLmNvbm5lY3Rpb25UeXBlID09PSAnbm90ZScpOyAvLyBTZXQgY2hlY2tlZCBiYXNlZCBvbiBjb25uZWN0aW9uVHlwZVxuXHRcdHJhZGlvTm90ZUxhYmVsLmFwcGVuZFRleHQoJyBOb3RlJyk7XG5cblx0XHRjb25zdCByYWRpb0JvdGhMYWJlbCA9IHJhZGlvQ29udGFpbmVyLmNyZWF0ZUVsKCdsYWJlbCcpO1xuXHRcdGNvbnN0IGJvdGhSYWRpbyA9IHJhZGlvQm90aExhYmVsLmNyZWF0ZUVsKCdpbnB1dCcsIHsgXG5cdFx0XHRhdHRyOiB7IFxuXHRcdFx0XHR0eXBlOiAncmFkaW8nLCBcblx0XHRcdFx0bmFtZTogJ2Nvbm5lY3Rpb25UeXBlJywgXG5cdFx0XHRcdHZhbHVlOiAnYm90aCcgXG5cdFx0XHR9IFxuXHRcdH0pO1xuXHRcdGJvdGhSYWRpby5jaGVja2VkID0gKHRoaXMuY29ubmVjdGlvblR5cGUgPT09ICdib3RoJyk7IC8vIFNldCBjaGVja2VkIGJhc2VkIG9uIGNvbm5lY3Rpb25UeXBlXG5cdFx0cmFkaW9Cb3RoTGFiZWwuYXBwZW5kVGV4dCgnIEJvdGgnKTtcblx0fVxuXHRcblxuXHRnZXREaXNwbGF5Q29udGVudChwYXJlbnQ6IEhUTUxFbGVtZW50KSB7XG5cdFx0Y29uc3QgZGlzcGxheVNldHRpbmdzID0gW1xuXHRcdFx0eyBpZDogJ3NtYXJ0LWNvbm5lY3Rpb25zLXZpc3VhbGl6ZXItbm9kZVNpemUnLCBsYWJlbDogJ05vZGUgc2l6ZScsIHZhbHVlOiB0aGlzLm5vZGVTaXplLCBtaW46IDEsIG1heDogMTUsIHN0ZXA6IDAuMDEgfSxcblx0XHRcdHsgaWQ6ICdzbWFydC1jb25uZWN0aW9ucy12aXN1YWxpemVyLW1heExhYmVsQ2hhcmFjdGVycycsIGxhYmVsOiAnTWF4IGxhYmVsIGNoYXJhY3RlcnMnLCB2YWx1ZTogdGhpcy5tYXhMYWJlbENoYXJhY3RlcnMsIG1pbjogMSwgbWF4OiA1MCwgc3RlcDogMSB9LFxuXHRcdFx0eyBpZDogJ3NtYXJ0LWNvbm5lY3Rpb25zLXZpc3VhbGl6ZXItbGlua0xhYmVsU2l6ZScsIGxhYmVsOiAnTGluayBsYWJlbCBzaXplJywgdmFsdWU6IHRoaXMubGlua0xhYmVsU2l6ZSwgbWluOiAxLCBtYXg6IDE1LCBzdGVwOiAwLjAxIH0sXG5cdFx0XHR7IGlkOiAnc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1ub2RlTGFiZWxTaXplJywgbGFiZWw6ICdOb2RlIGxhYmVsIHNpemUnLCB2YWx1ZTogdGhpcy5ub2RlTGFiZWxTaXplLCBtaW46IDEsIG1heDogMjYsIHN0ZXA6IDEgfSxcblx0XHRcdHsgaWQ6ICdzbWFydC1jb25uZWN0aW9ucy12aXN1YWxpemVyLW1pbkxpbmtUaGlja25lc3MnLCBsYWJlbDogJ01pbiBsaW5rIHRoaWNrbmVzcycsIHZhbHVlOiB0aGlzLm1pbkxpbmtUaGlja25lc3MsIG1pbjogMC4xLCBtYXg6IDEwLCBzdGVwOiAwLjAxIH0sXG5cdFx0XHR7IGlkOiAnc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1tYXhMaW5rVGhpY2tuZXNzJywgbGFiZWw6ICdNYXggbGluayB0aGlja25lc3MnLCB2YWx1ZTogdGhpcy5tYXhMaW5rVGhpY2tuZXNzLCBtaW46IDAuMSwgbWF4OiAxMCwgc3RlcDogMC4wMSB9LFxuXHRcdFx0eyBpZDogJ3NtYXJ0LWNvbm5lY3Rpb25zLXZpc3VhbGl6ZXItZmFkZVRocmVzaG9sZCcsIGxhYmVsOiAnVGV4dCBmYWRlIHRocmVzaG9sZCcsIHZhbHVlOiB0aGlzLnRleHRGYWRlVGhyZXNob2xkLCBtaW46IDAuMSwgbWF4OiAxMCwgc3RlcDogMC4wMSB9XG5cdFx0XTtcblx0XG5cdFx0ZGlzcGxheVNldHRpbmdzLmZvckVhY2goc2V0dGluZyA9PiB7XG5cdFx0XHRjb25zdCBzbGlkZXJDb250YWluZXIgPSBwYXJlbnQuY3JlYXRlRWwoJ2RpdicsIHsgY2xzOiAnc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1zbGlkZXItY29udGFpbmVyJyB9KTtcblx0XHRcdHNsaWRlckNvbnRhaW5lci5jcmVhdGVFbCgnbGFiZWwnLCB7IHRleHQ6IGAke3NldHRpbmcubGFiZWx9OiAke3NldHRpbmcudmFsdWV9YCwgYXR0cjogeyBpZDogYCR7c2V0dGluZy5pZH1MYWJlbGAsIGZvcjogc2V0dGluZy5pZCB9IH0pO1xuXHRcdFx0c2xpZGVyQ29udGFpbmVyLmNyZWF0ZUVsKCdpbnB1dCcsIHsgYXR0cjogeyB0eXBlOiAncmFuZ2UnLCBpZDogc2V0dGluZy5pZCwgY2xhc3M6ICdzbWFydC1jb25uZWN0aW9ucy12aXN1YWxpemVyLXNsaWRlcicsIG5hbWU6IHNldHRpbmcuaWQsIG1pbjogYCR7c2V0dGluZy5taW59YCwgbWF4OiBgJHtzZXR0aW5nLm1heH1gLCB2YWx1ZTogYCR7c2V0dGluZy52YWx1ZX1gLCBzdGVwOiBgJHtzZXR0aW5nLnN0ZXB9YCB9IH0pO1xuXHRcdH0pO1xuXHR9XG5cdFxuXG5cdGdldEZvcmNlc0NvbnRlbnQocGFyZW50OiBIVE1MRWxlbWVudCkge1xuXHRcdGNvbnN0IGZvcmNlc1NldHRpbmdzID0gW1xuXHRcdFx0eyBpZDogJ3NtYXJ0LWNvbm5lY3Rpb25zLXZpc3VhbGl6ZXItcmVwZWxGb3JjZScsIGxhYmVsOiAnUmVwZWwgZm9yY2UnLCB2YWx1ZTogdGhpcy5yZXBlbEZvcmNlLCBtaW46IDAsIG1heDogMTUwMCwgc3RlcDogMSB9LFxuXHRcdFx0eyBpZDogJ3NtYXJ0LWNvbm5lY3Rpb25zLXZpc3VhbGl6ZXItbGlua0ZvcmNlJywgbGFiZWw6ICdMaW5rIGZvcmNlJywgdmFsdWU6IHRoaXMubGlua0ZvcmNlLCBtaW46IDAsIG1heDogMSwgc3RlcDogMC4wMSB9LFxuXHRcdFx0eyBpZDogJ3NtYXJ0LWNvbm5lY3Rpb25zLXZpc3VhbGl6ZXItbGlua0Rpc3RhbmNlJywgbGFiZWw6ICdMaW5rIGRpc3RhbmNlJywgdmFsdWU6IHRoaXMubGlua0Rpc3RhbmNlLCBtaW46IDEwLCBtYXg6IDIwMCwgc3RlcDogMSB9XG5cdFx0XTtcblx0XG5cdFx0Zm9yY2VzU2V0dGluZ3MuZm9yRWFjaChzZXR0aW5nID0+IHtcblx0XHRcdGNvbnN0IHNsaWRlckNvbnRhaW5lciA9IHBhcmVudC5jcmVhdGVFbCgnZGl2JywgeyBjbHM6ICdzbWFydC1jb25uZWN0aW9ucy12aXN1YWxpemVyLXNsaWRlci1jb250YWluZXInIH0pO1xuXHRcdFx0c2xpZGVyQ29udGFpbmVyLmNyZWF0ZUVsKCdsYWJlbCcsIHsgdGV4dDogYCR7c2V0dGluZy5sYWJlbH06ICR7c2V0dGluZy52YWx1ZX1gLCBhdHRyOiB7IGlkOiBgJHtzZXR0aW5nLmlkfUxhYmVsYCwgZm9yOiBzZXR0aW5nLmlkIH0gfSk7XG5cdFx0XHRzbGlkZXJDb250YWluZXIuY3JlYXRlRWwoJ2lucHV0JywgeyBhdHRyOiB7IHR5cGU6ICdyYW5nZScsIGlkOiBzZXR0aW5nLmlkLCBjbGFzczogJ3NtYXJ0LWNvbm5lY3Rpb25zLXZpc3VhbGl6ZXItc2xpZGVyJywgbmFtZTogc2V0dGluZy5pZCwgbWluOiBgJHtzZXR0aW5nLm1pbn1gLCBtYXg6IGAke3NldHRpbmcubWF4fWAsIHZhbHVlOiBgJHtzZXR0aW5nLnZhbHVlfWAsIHN0ZXA6IGAke3NldHRpbmcuc3RlcH1gIH0gfSk7XG5cdFx0fSk7XG5cdH1cblx0XG5cdHRvZ2dsZURyb3Bkb3duTWVudSgpIHtcblx0XHRjb25zdCBkcm9wZG93bk1lbnUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2MtdmlzdWFsaXplci1kcm9wZG93bi1tZW51JykgYXMgSFRNTEVsZW1lbnQ7XG5cdFxuXHRcdGlmIChkcm9wZG93bk1lbnUpIHtcblx0XHRcdGRyb3Bkb3duTWVudS5jbGFzc0xpc3QudG9nZ2xlKCd2aXNpYmxlJyk7XG5cdFxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb25zb2xlLmVycm9yKCdEcm9wZG93biBtZW51IGVsZW1lbnQgbm90IGZvdW5kJyk7XG5cdFx0fVxuXHR9XG5cdFxuXG5cdHNldHVwQWNjb3JkaW9uSGVhZGVycygpIHtcblx0XHRjb25zdCBhY2NvcmRpb25IZWFkZXJzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnNtYXJ0LWNvbm5lY3Rpb25zLXZpc3VhbGl6ZXItYWNjb3JkaW9uLWhlYWRlcicpO1xuXHRcdGFjY29yZGlvbkhlYWRlcnMuZm9yRWFjaChoZWFkZXIgPT4gaGVhZGVyLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy50b2dnbGVBY2NvcmRpb25Db250ZW50LmJpbmQodGhpcykpKTtcblx0fVxuXG5cdHRvZ2dsZUFjY29yZGlvbkNvbnRlbnQoZXZlbnQ6IGFueSkge1xuXHRcdGNvbnN0IGNvbnRlbnQgPSBldmVudC5jdXJyZW50VGFyZ2V0Lm5leHRFbGVtZW50U2libGluZztcblx0XHRjb25zdCBhcnJvd0ljb24gPSBldmVudC5jdXJyZW50VGFyZ2V0LnF1ZXJ5U2VsZWN0b3IoJy5zbWFydC1jb25uZWN0aW9ucy12aXN1YWxpemVyLWFycm93LWljb24nKTtcblx0XHRpZiAoY29udGVudCAmJiBhcnJvd0ljb24pIHtcblx0XHRcdGNvbnRlbnQuY2xhc3NMaXN0LnRvZ2dsZSgnc2hvdycpO1xuXHRcdFx0YXJyb3dJY29uLmlubmVySFRNTCA9ICcnOyAvLyBDbGVhciBjdXJyZW50IGNvbnRlbnRcblx0XHRcdGFycm93SWNvbi5hcHBlbmRDaGlsZChjb250ZW50LmNsYXNzTGlzdC5jb250YWlucygnc2hvdycpID8gdGhpcy5jcmVhdGVEcm9wZG93bkFycm93KCkgOiB0aGlzLmNyZWF0ZVJpZ2h0QXJyb3coKSk7XG5cdFx0fVxuXHR9XG5cdFxuXHRjcmVhdGVEcm9wZG93bkFycm93KCkge1xuXHRcdGNvbnN0IHN2ZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsIFwic3ZnXCIpO1xuXHRcdHN2Zy5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcInNtYXJ0LWNvbm5lY3Rpb25zLXZpc3VhbGl6ZXItZHJvcGRvd24taW5kaWNhdG9yXCIpO1xuXHRcdHN2Zy5zZXRBdHRyaWJ1dGUoXCJ2aWV3Qm94XCIsIFwiMCAwIDE2IDE2XCIpO1xuXHRcdHN2Zy5zZXRBdHRyaWJ1dGUoXCJmaWxsXCIsIFwiY3VycmVudENvbG9yXCIpO1xuXHRcblx0XHRjb25zdCBwYXRoID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiwgXCJwYXRoXCIpO1xuXHRcdHBhdGguc2V0QXR0cmlidXRlKFwiZmlsbC1ydWxlXCIsIFwiZXZlbm9kZFwiKTtcblx0XHRwYXRoLnNldEF0dHJpYnV0ZShcImRcIiwgXCJNMS42NDYgNC42NDZhLjUuNSAwIDAgMSAuNzA4IDBMOCAxMC4yOTNsNS42NDYtNS42NDdhLjUuNSAwIDAgMSAuNzA4LjcwOGwtNiA2YS41LjUgMCAwIDEtLjcwOCAwbC02LTZhLjUuNSAwIDAgMSAwLS43MDh6XCIpO1xuXHRcblx0XHRzdmcuYXBwZW5kQ2hpbGQocGF0aCk7XG5cdFx0cmV0dXJuIHN2Zztcblx0fVxuXHRcblx0Y3JlYXRlUmlnaHRBcnJvdygpIHtcblx0XHRjb25zdCBzdmcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLCBcInN2Z1wiKTtcblx0XHRzdmcuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgXCJzbWFydC1jb25uZWN0aW9ucy12aXN1YWxpemVyLWRyb3Bkb3duLWluZGljYXRvclwiKTtcblx0XHRzdmcuc2V0QXR0cmlidXRlKFwidmlld0JveFwiLCBcIjAgMCAxNiAxNlwiKTtcblx0XHRzdmcuc2V0QXR0cmlidXRlKFwiZmlsbFwiLCBcImN1cnJlbnRDb2xvclwiKTtcblx0XG5cdFx0Y29uc3QgcGF0aCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsIFwicGF0aFwiKTtcblx0XHRwYXRoLnNldEF0dHJpYnV0ZShcImZpbGwtcnVsZVwiLCBcImV2ZW5vZGRcIik7XG5cdFx0cGF0aC5zZXRBdHRyaWJ1dGUoXCJkXCIsIFwiTTQuNjQ2IDEuNjQ2YS41LjUgMCAwIDEgLjcwOCAwbDYgNmEuNS41IDAgMCAxIDAgLjcwOGwtNiA2YS41LjUgMCAwIDEtLjcwOC0uNzA4TDEwLjI5MyA4IDQuNjQ2IDIuMzU0YS41LjUgMCAwIDEgMC0uNzA4elwiKTtcblx0XG5cdFx0c3ZnLmFwcGVuZENoaWxkKHBhdGgpO1xuXHRcdHJldHVybiBzdmc7XG5cdH1cblxuXHRjcmVhdGVTZXR0aW5nc0ljb24oKSB7XG5cdFx0Ly8gQ3JlYXRlIHRoZSBjb250YWluZXIgZGl2IGZvciB0aGUgc2V0dGluZ3MgaWNvblxuXHRcdGNvbnN0IHNldHRpbmdzSWNvbiA9IHRoaXMuY29udGVudEVsLmNyZWF0ZUVsKCdkaXYnLCB7XG5cdFx0XHRjbHM6IFsnc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1zZXR0aW5ncy1pY29uJywgXSxcblx0XHRcdGF0dHI6IHsgJ2FyaWEtbGFiZWwnOiAnT3BlbiBncmFwaCBzZXR0aW5ncycgfVxuXHRcdH0pO1xuXHRcblx0XHQvLyBDcmVhdGUgU1ZHIGVsZW1lbnQgZm9yIHNldHRpbmdzIGljb25cblx0XHRjb25zdCBzdmcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLCBcInN2Z1wiKTtcblx0XHRzdmcuc2V0QXR0cmlidXRlKFwid2lkdGhcIiwgXCIyNFwiKTtcblx0XHRzdmcuc2V0QXR0cmlidXRlKFwiaGVpZ2h0XCIsIFwiMjRcIik7XG5cdFx0c3ZnLnNldEF0dHJpYnV0ZShcInZpZXdCb3hcIiwgXCIwIDAgMjQgMjRcIik7XG5cdFx0c3ZnLnNldEF0dHJpYnV0ZShcImZpbGxcIiwgXCJub25lXCIpO1xuXHRcdHN2Zy5zZXRBdHRyaWJ1dGUoXCJzdHJva2VcIiwgXCJjdXJyZW50Q29sb3JcIik7XG5cdFx0c3ZnLnNldEF0dHJpYnV0ZShcInN0cm9rZS13aWR0aFwiLCBcIjJcIik7XG5cdFx0c3ZnLnNldEF0dHJpYnV0ZShcInN0cm9rZS1saW5lY2FwXCIsIFwicm91bmRcIik7XG5cdFx0c3ZnLnNldEF0dHJpYnV0ZShcInN0cm9rZS1saW5lam9pblwiLCBcInJvdW5kXCIpO1xuXHRcdHN2Zy5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcInNtYXJ0LWNvbm5lY3Rpb25zLXZpc3VhbGl6ZXItc3ZnLWljb24gc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1sdWNpZGUtc2V0dGluZ3NcIik7XG5cdFxuXHRcdC8vIENyZWF0ZSBwYXRoIGVsZW1lbnQgZm9yIHNldHRpbmdzIGljb25cblx0XHRjb25zdCBwYXRoID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiwgXCJwYXRoXCIpO1xuXHRcdHBhdGguc2V0QXR0cmlidXRlKFwiZFwiLCBcIk0xMi4yMiAyaC0uNDRhMiAyIDAgMCAwLTIgMnYuMThhMiAyIDAgMCAxLTEgMS43M2wtLjQzLjI1YTIgMiAwIDAgMS0yIDBsLS4xNS0uMDhhMiAyIDAgMCAwLTIuNzMuNzNsLS4yMi4zOGEyIDIgMCAwIDAgLjczIDIuNzNsLjE1LjFhMiAyIDAgMCAxIDEgMS43MnYuNTFhMiAyIDAgMCAxLTEgMS43NGwtLjE1LjA5YTIgMiAwIDAgMC0uNzMgMi43M2wuMjIuMzhhMiAyIDAgMCAwIDIuNzMuNzNsLjE1LS4wOGEyIDIgMCAwIDEgMiAwbC40My4yNWEyIDIgMCAwIDEgMSAxLjczVjIwYTIgMiAwIDAgMCAyIDJoLjQ0YTIgMiAwIDAgMCAyLTJ2LS4xOGEyIDIgMCAwIDEgMS0xLjczbC40My0uMjVhMiAyIDAgMCAxIDIgMGwuMTUuMDhhMiAyIDAgMCAwIDIuNzMtLjczbC4yMi0uMzlhMiAyIDAgMCAwLS43My0yLjczbC0uMTUtLjA4YTIgMiAwIDAgMS0xLTEuNzR2LS41YTIgMiAwIDAgMSAxLTEuNzRsLjE1LS4wOWEyIDIgMCAwIDAgLjczLTIuNzNsLS4yMi0uMzhhMiAyIDAgMCAwLTIuNzMtLjczbC0uMTUuMDhhMiAyIDAgMCAxLTIgMGwtLjQzLS4yNWEyIDIgMCAwIDEtMS0xLjczVjRhMiAyIDAgMCAwLTItMnpcIik7XG5cdFx0c3ZnLmFwcGVuZENoaWxkKHBhdGgpO1xuXHRcblx0XHQvLyBDcmVhdGUgY2lyY2xlIGVsZW1lbnQgZm9yIHNldHRpbmdzIGljb25cblx0XHRjb25zdCBjaXJjbGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLCBcImNpcmNsZVwiKTtcblx0XHRjaXJjbGUuc2V0QXR0cmlidXRlKFwiY3hcIiwgXCIxMlwiKTtcblx0XHRjaXJjbGUuc2V0QXR0cmlidXRlKFwiY3lcIiwgXCIxMlwiKTtcblx0XHRjaXJjbGUuc2V0QXR0cmlidXRlKFwiclwiLCBcIjNcIik7XG5cdFx0c3ZnLmFwcGVuZENoaWxkKGNpcmNsZSk7XG5cdFxuXHRcdC8vIEFwcGVuZCBTVkcgdG8gc2V0dGluZ3MgaWNvbiBjb250YWluZXJcblx0XHRzZXR0aW5nc0ljb24uYXBwZW5kQ2hpbGQoc3ZnKTtcblx0XG5cdFx0c2V0dGluZ3NJY29uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy50b2dnbGVEcm9wZG93bk1lbnUpO1xuXHR9XG5cblx0Y3JlYXRlUmVmcmVzaEljb24oKSB7XG5cdFx0Y29uc3QgcmVmcmVzaEljb24gPSB0aGlzLmNvbnRlbnRFbC5jcmVhdGVFbCgnZGl2JywgeyBjbHM6ICdzbWFydC1jb25uZWN0aW9ucy12aXN1YWxpemVyLXJlZnJlc2gtaWNvbicgfSk7XG5cdFxuXHRcdGNvbnN0IHN2ZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsIFwic3ZnXCIpO1xuXHRcdHN2Zy5zZXRBdHRyaWJ1dGUoXCJ3aWR0aFwiLCBcIjI0XCIpO1xuXHRcdHN2Zy5zZXRBdHRyaWJ1dGUoXCJoZWlnaHRcIiwgXCIyNFwiKTtcblx0XHRzdmcuc2V0QXR0cmlidXRlKFwidmlld0JveFwiLCBcIjAgMCAyNCAyNFwiKTtcblx0XHRzdmcuc2V0QXR0cmlidXRlKFwiZmlsbFwiLCBcIm5vbmVcIik7XG5cdFx0c3ZnLnNldEF0dHJpYnV0ZShcInN0cm9rZVwiLCBcImN1cnJlbnRDb2xvclwiKTtcblx0XHRzdmcuc2V0QXR0cmlidXRlKFwic3Ryb2tlLXdpZHRoXCIsIFwiMlwiKTtcblx0XHRzdmcuc2V0QXR0cmlidXRlKFwic3Ryb2tlLWxpbmVjYXBcIiwgXCJyb3VuZFwiKTtcblx0XHRzdmcuc2V0QXR0cmlidXRlKFwic3Ryb2tlLWxpbmVqb2luXCIsIFwicm91bmRcIik7XG5cdFx0c3ZnLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwic21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1zdmctaWNvbiBzbWFydC1jb25uZWN0aW9ucy12aXN1YWxpemVyLWx1Y2lkZS1yb3RhdGUtY2N3XCIpO1xuXHRcblx0XHRjb25zdCBwYXRoMSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsIFwicGF0aFwiKTtcblx0XHRwYXRoMS5zZXRBdHRyaWJ1dGUoXCJkXCIsIFwiTTMgMTJhOSA5IDAgMSAwIDktOSA5Ljc1IDkuNzUgMCAwIDAtNi43NCAyLjc0TDMgOFwiKTtcblx0XHRzdmcuYXBwZW5kQ2hpbGQocGF0aDEpO1xuXHRcblx0XHRjb25zdCBwYXRoMiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsIFwicGF0aFwiKTtcblx0XHRwYXRoMi5zZXRBdHRyaWJ1dGUoXCJkXCIsIFwiTTMgM3Y1aDVcIik7XG5cdFx0c3ZnLmFwcGVuZENoaWxkKHBhdGgyKTtcblx0XG5cdFx0cmVmcmVzaEljb24uYXBwZW5kQ2hpbGQoc3ZnKTtcblx0XG5cdFx0cmV0dXJuIHJlZnJlc2hJY29uOyAvLyBSZXR1cm4gdGhlIGNvbXBsZXRlIGljb24gZWxlbWVudFxuXHR9XG5cblx0Y3JlYXRlTmV3WEljb24oKSB7XG5cdFx0Y29uc3QgeEljb24gPSB0aGlzLmNvbnRlbnRFbC5jcmVhdGVFbCgnZGl2JywgeyBjbHM6ICdzbWFydC1jb25uZWN0aW9ucy12aXN1YWxpemVyLXgtaWNvbicgfSk7XG5cdFxuXHRcdGNvbnN0IHN2ZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsIFwic3ZnXCIpO1xuXHRcdHN2Zy5zZXRBdHRyaWJ1dGUoXCJ3aWR0aFwiLCBcIjI0XCIpO1xuXHRcdHN2Zy5zZXRBdHRyaWJ1dGUoXCJoZWlnaHRcIiwgXCIyNFwiKTtcblx0XHRzdmcuc2V0QXR0cmlidXRlKFwidmlld0JveFwiLCBcIjAgMCAyNCAyNFwiKTtcblx0XHRzdmcuc2V0QXR0cmlidXRlKFwiZmlsbFwiLCBcIm5vbmVcIik7XG5cdFx0c3ZnLnNldEF0dHJpYnV0ZShcInN0cm9rZVwiLCBcImN1cnJlbnRDb2xvclwiKTtcblx0XHRzdmcuc2V0QXR0cmlidXRlKFwic3Ryb2tlLXdpZHRoXCIsIFwiMlwiKTtcblx0XHRzdmcuc2V0QXR0cmlidXRlKFwic3Ryb2tlLWxpbmVjYXBcIiwgXCJyb3VuZFwiKTtcblx0XHRzdmcuc2V0QXR0cmlidXRlKFwic3Ryb2tlLWxpbmVqb2luXCIsIFwicm91bmRcIik7XG5cdFx0c3ZnLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwic21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1zdmctaWNvbiBzbWFydC1jb25uZWN0aW9ucy12aXN1YWxpemVyLWx1Y2lkZS14XCIpO1xuXHRcblx0XHRjb25zdCBwYXRoMSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsIFwicGF0aFwiKTtcblx0XHRwYXRoMS5zZXRBdHRyaWJ1dGUoXCJkXCIsIFwiTTE4IDYgNiAxOFwiKTtcblx0XHRzdmcuYXBwZW5kQ2hpbGQocGF0aDEpO1xuXHRcblx0XHRjb25zdCBwYXRoMiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsIFwicGF0aFwiKTtcblx0XHRwYXRoMi5zZXRBdHRyaWJ1dGUoXCJkXCIsIFwibTYgNiAxMiAxMlwiKTtcblx0XHRzdmcuYXBwZW5kQ2hpbGQocGF0aDIpO1xuXHRcblx0XHR4SWNvbi5hcHBlbmRDaGlsZChzdmcpO1xuXHRcblx0XHRyZXR1cm4geEljb247IC8vIFJldHVybiB0aGUgY29tcGxldGUgaWNvbiBlbGVtZW50XG5cdH1cblxuXHRzZXR1cFNldHRpbmdzRXZlbnRMaXN0ZW5lcnMoKSB7XG5cdFx0dGhpcy5zZXR1cFNjb3JlVGhyZXNob2xkU2xpZGVyKCk7XG5cdFx0dGhpcy5zZXR1cE5vZGVTaXplU2xpZGVyKCk7XG5cdFx0dGhpcy5zZXR1cExpbmVUaGlja25lc3NTbGlkZXIoKTtcblx0XHR0aGlzLnNldHVwQ2VudGVyRm9yY2VTbGlkZXIoKTtcblx0XHR0aGlzLnNldHVwUmVwZWxGb3JjZVNsaWRlcigpO1xuXHRcdHRoaXMuc2V0dXBMaW5rRm9yY2VTbGlkZXIoKTtcblx0XHR0aGlzLnNldHVwTGlua0Rpc3RhbmNlU2xpZGVyKCk7XG5cdFx0dGhpcy5zZXR1cEZhZGVUaHJlc2hvbGRTbGlkZXIoKTtcblx0XHR0aGlzLnNldHVwTWluTGlua1RoaWNrbmVzc1NsaWRlcigpO1xuXHRcdHRoaXMuc2V0dXBNYXhMaW5rVGhpY2tuZXNzU2xpZGVyKCk7XG5cdFx0dGhpcy5zZXR1cENvbm5lY3Rpb25UeXBlUmFkaW9zKCk7XG5cdFx0dGhpcy5zZXR1cE1heExhYmVsQ2hhcmFjdGVyc1NsaWRlcigpO1xuXHRcdHRoaXMuc2V0dXBMaW5rTGFiZWxTaXplU2xpZGVyKCk7XG5cdFx0dGhpcy5zZXR1cE5vZGVMYWJlbFNpemVTbGlkZXIoKTtcblx0XHR0aGlzLnNldHVwQ2xvc2VJY29uKCk7XG5cdFx0dGhpcy5zZXR1cFJlZnJlc2hJY29uKCk7XG5cdH1cblxuXHRzZXR1cFNjb3JlVGhyZXNob2xkU2xpZGVyKCkge1xuXHRcdGNvbnN0IHNjb3JlVGhyZXNob2xkU2xpZGVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NtYXJ0LWNvbm5lY3Rpb25zLXZpc3VhbGl6ZXItc2NvcmVUaHJlc2hvbGQnKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xuXHRcdGlmIChzY29yZVRocmVzaG9sZFNsaWRlcikge1xuXHRcdFx0c2NvcmVUaHJlc2hvbGRTbGlkZXIuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCAoZXZlbnQpID0+IHRoaXMudXBkYXRlU2NvcmVUaHJlc2hvbGQoZXZlbnQpKTtcblx0XHRcdGNvbnN0IGRlYm91bmNlZFVwZGF0ZSA9IGRlYm91bmNlKGFzeW5jKGV2ZW50OiBFdmVudCkgPT4ge1xuXHRcdFx0XHRhd2FpdCB0aGlzLnVwZGF0ZVZpc3VhbGl6YXRpb24ocGFyc2VGbG9hdCgoZXZlbnQudGFyZ2V0IGFzIEhUTUxJbnB1dEVsZW1lbnQpLnZhbHVlKSk7XG5cdFx0XHR9LCA1MDAsIHRydWUpO1x0XHRcdFxuXHRcdFx0c2NvcmVUaHJlc2hvbGRTbGlkZXIuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBkZWJvdW5jZWRVcGRhdGUpO1xuXHRcdH1cblx0fVxuXG5cdHVwZGF0ZVNjb3JlVGhyZXNob2xkKGV2ZW50OiBhbnkpIHtcblx0XHRjb25zdCBuZXdTY29yZVRocmVzaG9sZCA9IHBhcnNlRmxvYXQoZXZlbnQudGFyZ2V0LnZhbHVlKTtcblx0XHRjb25zdCBsYWJlbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzbWFydC1jb25uZWN0aW9ucy12aXN1YWxpemVyLXNjb3JlVGhyZXNob2xkTGFiZWwnKTtcblx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5yZWxldmFuY2VTY29yZVRocmVzaG9sZCA9IG5ld1Njb3JlVGhyZXNob2xkOyAvLyBVcGRhdGUgdGhlIHNldHRpbmdzXG4gICAgICAgIHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpOyAvLyBTYXZlIHRoZSBzZXR0aW5nc1xuXHRcdGlmIChsYWJlbCkgbGFiZWwudGV4dENvbnRlbnQgPSBgTWluIHJlbGV2YW5jZTogJHsobmV3U2NvcmVUaHJlc2hvbGQgKiAxMDApLnRvRml4ZWQoMCl9JWA7XG5cdH1cblxuXHRzZXR1cE5vZGVTaXplU2xpZGVyKCkge1xuXHRcdGNvbnN0IG5vZGVTaXplU2xpZGVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NtYXJ0LWNvbm5lY3Rpb25zLXZpc3VhbGl6ZXItbm9kZVNpemUnKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xuXHRcdGlmIChub2RlU2l6ZVNsaWRlcikge1xuXHRcdFx0bm9kZVNpemVTbGlkZXIuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCAoZXZlbnQpID0+IHRoaXMudXBkYXRlTm9kZVNpemUoZXZlbnQpKTtcblx0XHR9XG5cdH1cblxuXHR1cGRhdGVOb2RlU2l6ZShldmVudDogYW55KSB7XG5cdFx0Y29uc3QgbmV3Tm9kZVNpemUgPSBwYXJzZUZsb2F0KGV2ZW50LnRhcmdldC52YWx1ZSk7XG5cdFx0Y29uc3QgbGFiZWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1ub2RlU2l6ZUxhYmVsJyk7XG5cdFx0aWYgKGxhYmVsKSBsYWJlbC50ZXh0Q29udGVudCA9IGBOb2RlIHNpemU6ICR7bmV3Tm9kZVNpemV9YDtcblx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5ub2RlU2l6ZSA9IG5ld05vZGVTaXplOyAvLyBVcGRhdGUgdGhlIHNldHRpbmdzXG4gICAgICAgIHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpOyAvLyBTYXZlIHRoZSBzZXR0aW5nc1xuXHRcdHRoaXMubm9kZVNpemUgPSBuZXdOb2RlU2l6ZTtcblx0XHR0aGlzLnVwZGF0ZU5vZGVTaXplcygpO1xuXHR9XG5cblx0c2V0dXBMaW5lVGhpY2tuZXNzU2xpZGVyKCkge1xuXHRcdGNvbnN0IGxpbmVUaGlja25lc3NTbGlkZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1saW5lVGhpY2tuZXNzJykgYXMgSFRNTElucHV0RWxlbWVudDtcblx0XHRpZiAobGluZVRoaWNrbmVzc1NsaWRlcikge1xuXHRcdFx0bGluZVRoaWNrbmVzc1NsaWRlci5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIChldmVudCkgPT4gdGhpcy51cGRhdGVMaW5lVGhpY2tuZXNzKGV2ZW50KSk7XG5cdFx0fVxuXHR9XG5cblx0dXBkYXRlTGluZVRoaWNrbmVzcyhldmVudDogYW55KSB7XG5cdFx0Y29uc3QgbmV3TGluZVRoaWNrbmVzcyA9IHBhcnNlRmxvYXQoZXZlbnQudGFyZ2V0LnZhbHVlKTtcblx0XHRjb25zdCBsYWJlbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdsaW5lVGhpY2tuZXNzTGFiZWwnKTtcblx0XHRpZiAobGFiZWwpIGxhYmVsLnRleHRDb250ZW50ID0gYExpbmUgdGhpY2tuZXNzOiAke25ld0xpbmVUaGlja25lc3N9YDtcblx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5saW5rVGhpY2tuZXNzID0gbmV3TGluZVRoaWNrbmVzczsgLy8gVXBkYXRlIHRoZSBzZXR0aW5nc1xuICAgICAgICB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTsgLy8gU2F2ZSB0aGUgc2V0dGluZ3Ncblx0XHR0aGlzLmxpbmtUaGlja25lc3MgPSBuZXdMaW5lVGhpY2tuZXNzO1xuXHRcdHRoaXMudXBkYXRlTGlua1RoaWNrbmVzcygpO1xuXHR9XG5cblx0c2V0dXBDZW50ZXJGb3JjZVNsaWRlcigpIHtcblx0XHRjb25zdCBjZW50ZXJGb3JjZVNsaWRlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzbWFydC1jb25uZWN0aW9ucy12aXN1YWxpemVyLWNlbnRlckZvcmNlJykgYXMgSFRNTElucHV0RWxlbWVudDtcblx0XHRpZiAoY2VudGVyRm9yY2VTbGlkZXIpIHtcblx0XHRcdGNlbnRlckZvcmNlU2xpZGVyLmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgKGV2ZW50KSA9PiB0aGlzLnVwZGF0ZUNlbnRlckZvcmNlKGV2ZW50KSk7XG5cdFx0fVxuXHR9XG5cblx0dXBkYXRlQ2VudGVyRm9yY2UoZXZlbnQ6IGFueSkge1xuXHRcdGNvbnN0IG5ld0NlbnRlckZvcmNlID0gcGFyc2VGbG9hdChldmVudC50YXJnZXQudmFsdWUpO1xuXHRcdGNvbnN0IGxhYmVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NlbnRlckZvcmNlTGFiZWwnKTtcblx0XHRpZiAobGFiZWwpIGxhYmVsLnRleHRDb250ZW50ID0gYENlbnRlciBmb3JjZTogJHtuZXdDZW50ZXJGb3JjZX1gO1xuXHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLmNlbnRlckZvcmNlID0gbmV3Q2VudGVyRm9yY2U7IC8vIFVwZGF0ZSB0aGUgc2V0dGluZ3NcbiAgICAgICAgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7IC8vIFNhdmUgdGhlIHNldHRpbmdzXG5cdFx0dGhpcy5jZW50ZXJGb3JjZSA9IG5ld0NlbnRlckZvcmNlO1xuXHRcdHRoaXMudXBkYXRlU2ltdWxhdGlvbkZvcmNlcygpO1xuXHR9XG5cblx0c2V0dXBSZXBlbEZvcmNlU2xpZGVyKCkge1xuXHRcdGNvbnN0IHJlcGVsRm9yY2VTbGlkZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1yZXBlbEZvcmNlJykgYXMgSFRNTElucHV0RWxlbWVudDtcblx0XHRpZiAocmVwZWxGb3JjZVNsaWRlcikge1xuXHRcdFx0cmVwZWxGb3JjZVNsaWRlci5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIChldmVudCkgPT4gdGhpcy51cGRhdGVSZXBlbEZvcmNlKGV2ZW50KSk7XG5cdFx0fVxuXHR9XG5cblx0dXBkYXRlUmVwZWxGb3JjZShldmVudDogYW55KSB7XG5cdFx0Y29uc3QgbmV3UmVwZWxGb3JjZSA9IHBhcnNlRmxvYXQoZXZlbnQudGFyZ2V0LnZhbHVlKTtcblx0XHRjb25zdCBsYWJlbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzbWFydC1jb25uZWN0aW9ucy12aXN1YWxpemVyLXJlcGVsRm9yY2VMYWJlbCcpO1xuXHRcdGlmIChsYWJlbCkgbGFiZWwudGV4dENvbnRlbnQgPSBgUmVwZWwgZm9yY2U6ICR7bmV3UmVwZWxGb3JjZX1gO1xuXHRcdHRoaXMucmVwZWxGb3JjZSA9IG5ld1JlcGVsRm9yY2U7XG5cdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MucmVwZWxGb3JjZSA9IG5ld1JlcGVsRm9yY2U7IC8vIFVwZGF0ZSB0aGUgc2V0dGluZ3NcbiAgICAgICAgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7IC8vIFNhdmUgdGhlIHNldHRpbmdzXG5cdFx0dGhpcy51cGRhdGVTaW11bGF0aW9uRm9yY2VzKCk7XG5cdH1cblxuXHRzZXR1cExpbmtGb3JjZVNsaWRlcigpIHtcblx0XHRjb25zdCBsaW5rRm9yY2VTbGlkZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1saW5rRm9yY2UnKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xuXHRcdGlmIChsaW5rRm9yY2VTbGlkZXIpIHtcblx0XHRcdGxpbmtGb3JjZVNsaWRlci5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIChldmVudCkgPT4gdGhpcy51cGRhdGVMaW5rRm9yY2UoZXZlbnQpKTtcblx0XHR9XG5cdH1cblxuXHR1cGRhdGVMaW5rRm9yY2UoZXZlbnQ6IGFueSkge1xuXHRcdGNvbnN0IG5ld0xpbmtGb3JjZSA9IHBhcnNlRmxvYXQoZXZlbnQudGFyZ2V0LnZhbHVlKTtcblx0XHRjb25zdCBsYWJlbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzbWFydC1jb25uZWN0aW9ucy12aXN1YWxpemVyLWxpbmtGb3JjZUxhYmVsJyk7XG5cdFx0aWYgKGxhYmVsKSBsYWJlbC50ZXh0Q29udGVudCA9IGBMaW5rIGZvcmNlOiAke25ld0xpbmtGb3JjZX1gO1xuXHRcdHRoaXMubGlua0ZvcmNlID0gbmV3TGlua0ZvcmNlO1xuXHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLmxpbmtGb3JjZSA9IG5ld0xpbmtGb3JjZTsgLy8gVXBkYXRlIHRoZSBzZXR0aW5nc1xuICAgICAgICB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTsgLy8gU2F2ZSB0aGUgc2V0dGluZ3Ncblx0XHR0aGlzLnVwZGF0ZVNpbXVsYXRpb25Gb3JjZXMoKTtcblx0fVxuXG5cdHNldHVwTGlua0Rpc3RhbmNlU2xpZGVyKCkge1xuXHRcdGNvbnN0IGxpbmtEaXN0YW5jZVNsaWRlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzbWFydC1jb25uZWN0aW9ucy12aXN1YWxpemVyLWxpbmtEaXN0YW5jZScpIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG5cdFx0aWYgKGxpbmtEaXN0YW5jZVNsaWRlcikge1xuXHRcdFx0bGlua0Rpc3RhbmNlU2xpZGVyLmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgKGV2ZW50KSA9PiB0aGlzLnVwZGF0ZUxpbmtEaXN0YW5jZShldmVudCkpO1xuXHRcdH1cblx0fVxuXG5cdHVwZGF0ZUxpbmtEaXN0YW5jZShldmVudDogYW55KSB7XG5cdFx0Y29uc3QgbmV3TGlua0Rpc3RhbmNlID0gcGFyc2VGbG9hdChldmVudC50YXJnZXQudmFsdWUpO1xuXHRcdGNvbnN0IGxhYmVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NtYXJ0LWNvbm5lY3Rpb25zLXZpc3VhbGl6ZXItbGlua0Rpc3RhbmNlTGFiZWwnKTtcblx0XHRpZiAobGFiZWwpIGxhYmVsLnRleHRDb250ZW50ID0gYExpbmsgZGlzdGFuY2U6ICR7bmV3TGlua0Rpc3RhbmNlfWA7XG5cdFx0dGhpcy5saW5rRGlzdGFuY2UgPSBuZXdMaW5rRGlzdGFuY2U7XG5cdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MubGlua0Rpc3RhbmNlID0gbmV3TGlua0Rpc3RhbmNlOyAvLyBVcGRhdGUgdGhlIHNldHRpbmdzXG4gICAgICAgIHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpOyAvLyBTYXZlIHRoZSBzZXR0aW5nc1xuXHRcdHRoaXMudXBkYXRlU2ltdWxhdGlvbkZvcmNlcygpO1xuXHR9XG5cblx0c2V0dXBGYWRlVGhyZXNob2xkU2xpZGVyKCkge1xuXHRcdGNvbnN0IGZhZGVUaHJlc2hvbGRTbGlkZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1mYWRlVGhyZXNob2xkJykgYXMgSFRNTElucHV0RWxlbWVudDtcblx0XHRpZiAoZmFkZVRocmVzaG9sZFNsaWRlcikge1xuXHRcdFx0ZmFkZVRocmVzaG9sZFNsaWRlci5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIChldmVudCkgPT4ge1xuXHRcdFx0XHR0aGlzLnVwZGF0ZUZhZGVUaHJlc2hvbGQoZXZlbnQpO1xuXHRcdFx0XHR0aGlzLnVwZGF0ZUxhYmVsT3BhY2l0eShkMy56b29tVHJhbnNmb3JtKGQzLnNlbGVjdCgnc3ZnJykubm9kZSgpIGFzIEVsZW1lbnQpLmspO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHR9XG5cblx0dXBkYXRlRmFkZVRocmVzaG9sZChldmVudDogYW55KSB7XG5cdFx0Y29uc3QgbmV3RmFkZVRocmVzaG9sZCA9IHBhcnNlRmxvYXQoZXZlbnQudGFyZ2V0LnZhbHVlKTtcblx0XHRjb25zdCBsYWJlbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzbWFydC1jb25uZWN0aW9ucy12aXN1YWxpemVyLWZhZGVUaHJlc2hvbGRMYWJlbCcpO1xuXHRcdGlmIChsYWJlbCkgbGFiZWwudGV4dENvbnRlbnQgPSBgVGV4dCBmYWRlIHRocmVzaG9sZDogJHtuZXdGYWRlVGhyZXNob2xkfWA7XG5cdFx0dGhpcy50ZXh0RmFkZVRocmVzaG9sZCA9IG5ld0ZhZGVUaHJlc2hvbGQ7XG5cdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MudGV4dEZhZGVUaHJlc2hvbGQgPSBuZXdGYWRlVGhyZXNob2xkOyAvLyBVcGRhdGUgdGhlIHNldHRpbmdzXG4gICAgICAgIHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpOyAvLyBTYXZlIHRoZSBzZXR0aW5nc1xuXHR9XG5cblx0c2V0dXBNaW5MaW5rVGhpY2tuZXNzU2xpZGVyKCkge1xuXHRcdGNvbnN0IG1pbkxpbmtUaGlja25lc3NTbGlkZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1taW5MaW5rVGhpY2tuZXNzJykgYXMgSFRNTElucHV0RWxlbWVudDtcblx0XHRpZiAobWluTGlua1RoaWNrbmVzc1NsaWRlcikge1xuXHRcdFx0bWluTGlua1RoaWNrbmVzc1NsaWRlci5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIChldmVudCkgPT4gdGhpcy51cGRhdGVNaW5MaW5rVGhpY2tuZXNzKGV2ZW50KSk7XG5cdFx0fVxuXHR9XG5cblx0dXBkYXRlTWluTGlua1RoaWNrbmVzcyhldmVudDogYW55KSB7XG5cdFx0Y29uc3QgbmV3TWluTGlua1RoaWNrbmVzcyA9IHBhcnNlRmxvYXQoZXZlbnQudGFyZ2V0LnZhbHVlKTtcblx0XHRjb25zdCBsYWJlbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzbWFydC1jb25uZWN0aW9ucy12aXN1YWxpemVyLW1pbkxpbmtUaGlja25lc3NMYWJlbCcpO1xuXHRcdGlmIChsYWJlbCkgbGFiZWwudGV4dENvbnRlbnQgPSBgTWluIGxpbmsgdGhpY2tuZXNzOiAke25ld01pbkxpbmtUaGlja25lc3N9YDtcblx0XHR0aGlzLm1pbkxpbmtUaGlja25lc3MgPSBuZXdNaW5MaW5rVGhpY2tuZXNzO1xuXHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLm1pbkxpbmtUaGlja25lc3MgPSBuZXdNaW5MaW5rVGhpY2tuZXNzOyAvLyBVcGRhdGUgdGhlIHNldHRpbmdzXG4gICAgICAgIHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpOyAvLyBTYXZlIHRoZSBzZXR0aW5nc1xuXHRcdHRoaXMudXBkYXRlTGlua1RoaWNrbmVzcygpO1xuXHR9XG5cblx0c2V0dXBNYXhMaW5rVGhpY2tuZXNzU2xpZGVyKCkge1xuXHRcdGNvbnN0IG1heExpbmtUaGlja25lc3NTbGlkZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1tYXhMaW5rVGhpY2tuZXNzJykgYXMgSFRNTElucHV0RWxlbWVudDtcblx0XHRpZiAobWF4TGlua1RoaWNrbmVzc1NsaWRlcikge1xuXHRcdFx0bWF4TGlua1RoaWNrbmVzc1NsaWRlci5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIChldmVudCkgPT4gdGhpcy51cGRhdGVNYXhMaW5rVGhpY2tuZXNzKGV2ZW50KSk7XG5cdFx0fVxuXHR9XG5cblx0dXBkYXRlTWF4TGlua1RoaWNrbmVzcyhldmVudDogYW55KSB7XG5cdFx0Y29uc3QgbmV3TWF4TGlua1RoaWNrbmVzcyA9IHBhcnNlRmxvYXQoZXZlbnQudGFyZ2V0LnZhbHVlKTtcblx0XHRjb25zdCBsYWJlbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzbWFydC1jb25uZWN0aW9ucy12aXN1YWxpemVyLW1heExpbmtUaGlja25lc3NMYWJlbCcpO1xuXHRcdGlmIChsYWJlbCkgbGFiZWwudGV4dENvbnRlbnQgPSBgTWF4IGxpbmsgdGhpY2tuZXNzOiAke25ld01heExpbmtUaGlja25lc3N9YDtcblx0XHR0aGlzLm1heExpbmtUaGlja25lc3MgPSBuZXdNYXhMaW5rVGhpY2tuZXNzO1xuICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5tYXhMaW5rVGhpY2tuZXNzID0gbmV3TWF4TGlua1RoaWNrbmVzczsgLy8gVXBkYXRlIHRoZSBzZXR0aW5nc1xuICAgICAgICB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTsgLy8gU2F2ZSB0aGUgc2V0dGluZ3Ncblx0XHR0aGlzLnVwZGF0ZUxpbmtUaGlja25lc3MoKTtcblx0fVxuXG5cdHNldHVwQ29ubmVjdGlvblR5cGVSYWRpb3MoKSB7XG5cdFx0Y29uc3QgY29ubmVjdGlvblR5cGVSYWRpb3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdpbnB1dFtuYW1lPVwiY29ubmVjdGlvblR5cGVcIl0nKTtcblx0XHRjb25uZWN0aW9uVHlwZVJhZGlvcy5mb3JFYWNoKHJhZGlvID0+IHJhZGlvLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChldmVudCkgPT4gdGhpcy51cGRhdGVDb25uZWN0aW9uVHlwZShldmVudCkpKTtcblx0fVxuXG5cdGFzeW5jIHVwZGF0ZUNvbm5lY3Rpb25UeXBlKGV2ZW50OiBhbnkpIHtcblx0XHR0aGlzLmNvbm5lY3Rpb25UeXBlID0gZXZlbnQudGFyZ2V0LnZhbHVlO1xuXHRcdHRoaXMuaXNDaGFuZ2luZ0Nvbm5lY3Rpb25UeXBlID0gdHJ1ZTtcblx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5jb25uZWN0aW9uVHlwZSA9IHRoaXMuY29ubmVjdGlvblR5cGU7IC8vIFVwZGF0ZSB0aGUgc2V0dGluZ3NcbiAgICAgICAgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7IC8vIFNhdmUgdGhlIHNldHRpbmdzXG5cdFx0YXdhaXQgdGhpcy51cGRhdGVWaXN1YWxpemF0aW9uKCk7XG5cdH1cblxuXHRzZXR1cE1heExhYmVsQ2hhcmFjdGVyc1NsaWRlcigpIHtcblx0XHRjb25zdCBtYXhMYWJlbENoYXJhY3RlcnNTbGlkZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1tYXhMYWJlbENoYXJhY3RlcnMnKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xuXHRcdGlmIChtYXhMYWJlbENoYXJhY3RlcnNTbGlkZXIpIHtcblx0XHRcdG1heExhYmVsQ2hhcmFjdGVyc1NsaWRlci5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIChldmVudCkgPT4gdGhpcy51cGRhdGVNYXhMYWJlbENoYXJhY3RlcnMoZXZlbnQpKTtcblx0XHR9XG5cdH1cblxuXHR1cGRhdGVNYXhMYWJlbENoYXJhY3RlcnMoZXZlbnQ6IGFueSkge1xuXHRcdGNvbnN0IG5ld01heExhYmVsQ2hhcmFjdGVycyA9IHBhcnNlSW50KGV2ZW50LnRhcmdldC52YWx1ZSwgMTApO1xuXHRcdGNvbnN0IGxhYmVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NtYXJ0LWNvbm5lY3Rpb25zLXZpc3VhbGl6ZXItbWF4TGFiZWxDaGFyYWN0ZXJzTGFiZWwnKTtcblx0XHRpZiAobGFiZWwpIGxhYmVsLnRleHRDb250ZW50ID0gYE1heCBMYWJlbCBDaGFyYWN0ZXJzOiAke25ld01heExhYmVsQ2hhcmFjdGVyc31gO1xuXHRcdHRoaXMubWF4TGFiZWxDaGFyYWN0ZXJzID0gbmV3TWF4TGFiZWxDaGFyYWN0ZXJzO1xuXHRcdHRoaXMudXBkYXRlTm9kZUxhYmVscygpO1xuXHR9XG5cblx0c2V0dXBMaW5rTGFiZWxTaXplU2xpZGVyKCkge1xuXHRcdGNvbnN0IGxpbmtMYWJlbFNpemVTbGlkZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1saW5rTGFiZWxTaXplJykgYXMgSFRNTElucHV0RWxlbWVudDtcblx0XHRpZiAobGlua0xhYmVsU2l6ZVNsaWRlcikge1xuXHRcdFx0bGlua0xhYmVsU2l6ZVNsaWRlci5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIChldmVudCkgPT4gdGhpcy51cGRhdGVMaW5rTGFiZWxTaXplKGV2ZW50KSk7XG5cdFx0fVxuXHR9XG5cblx0dXBkYXRlTGlua0xhYmVsU2l6ZShldmVudDogYW55KSB7XG5cdFx0Y29uc3QgbmV3TGlua0xhYmVsU2l6ZSA9IHBhcnNlRmxvYXQoZXZlbnQudGFyZ2V0LnZhbHVlKTtcblx0XHRjb25zdCBsYWJlbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzbWFydC1jb25uZWN0aW9ucy12aXN1YWxpemVyLWxpbmtMYWJlbFNpemVMYWJlbCcpO1xuXHRcdGlmIChsYWJlbCkgbGFiZWwudGV4dENvbnRlbnQgPSBgTGluayBMYWJlbCBTaXplOiAke25ld0xpbmtMYWJlbFNpemV9YDtcblx0XHR0aGlzLmxpbmtMYWJlbFNpemUgPSBuZXdMaW5rTGFiZWxTaXplO1xuXHRcdHRoaXMudXBkYXRlTGlua0xhYmVsU2l6ZXMoKTtcblx0fVxuXG5cdHNldHVwTm9kZUxhYmVsU2l6ZVNsaWRlcigpIHtcblx0XHRjb25zdCBub2RlTGFiZWxTaXplU2xpZGVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NtYXJ0LWNvbm5lY3Rpb25zLXZpc3VhbGl6ZXItbm9kZUxhYmVsU2l6ZScpIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG5cdFx0aWYgKG5vZGVMYWJlbFNpemVTbGlkZXIpIHtcblx0XHRcdG5vZGVMYWJlbFNpemVTbGlkZXIuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCAoZXZlbnQpID0+IHRoaXMudXBkYXRlTm9kZUxhYmVsU2l6ZShldmVudCkpO1xuXHRcdH1cblx0fVxuXG5cdHVwZGF0ZU5vZGVMYWJlbFNpemUoZXZlbnQ6IGFueSkge1xuXHRcdGNvbnNvbGUubG9nKCdmbG91bmRkZCcpO1xuXHRcdGNvbnN0IG5ld05vZGVMYWJlbFNpemUgPSBwYXJzZUZsb2F0KGV2ZW50LnRhcmdldC52YWx1ZSk7XG5cdFx0Y29uc3QgbGFiZWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1ub2RlTGFiZWxTaXplTGFiZWwnKTtcblx0XHRpZiAobGFiZWwpIGxhYmVsLnRleHRDb250ZW50ID0gYE5vZGUgTGFiZWwgU2l6ZTogJHtuZXdOb2RlTGFiZWxTaXplfWA7XG5cdFx0dGhpcy5ub2RlTGFiZWxTaXplID0gbmV3Tm9kZUxhYmVsU2l6ZTtcblx0XHR0aGlzLnVwZGF0ZU5vZGVMYWJlbFNpemVzKCk7XG5cdH1cblxuXHQvLyBVcGRhdGVkIHNldHVwQ2xvc2VJY29uIG1ldGhvZFxuXHRzZXR1cENsb3NlSWNvbigpIHtcblx0XHRjb25zdCBjbG9zZUljb24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1jbG9zZS1pY29uJyk7XG5cdFx0aWYgKGNsb3NlSWNvbikgY2xvc2VJY29uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gdGhpcy50b2dnbGVEcm9wZG93bk1lbnUoKSk7XG5cdH1cblxuXHRjbG9zZURyb3Bkb3duTWVudSgpIHtcblx0XHRjb25zdCBkcm9wZG93bk1lbnUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2MtdmlzdWFsaXplci1kcm9wZG93bi1tZW51Jyk7XG5cdFx0aWYgKGRyb3Bkb3duTWVudSkgZHJvcGRvd25NZW51LmNsYXNzTGlzdC5yZW1vdmUoJ29wZW4nKTtcblx0fVxuXG5cdHNldHVwUmVmcmVzaEljb24oKSB7XG5cdFx0Y29uc3QgcmVmcmVzaEljb24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1yZWZyZXNoLWljb24nKTtcblx0XHRpZiAocmVmcmVzaEljb24pIHJlZnJlc2hJY29uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgYXN5bmMoKSA9PiBhd2FpdCB0aGlzLnJlc2V0VG9EZWZhdWx0KCkpO1xuXHR9XG5cblx0YXN5bmMgcmVzZXRUb0RlZmF1bHQoKSB7XG5cblx0XHQvLyBSZXNldCBhbGwgdmFsdWVzIHRvIHRoZWlyIGRlZmF1bHRcblx0XHR0aGlzLnJlbGV2YW5jZVNjb3JlVGhyZXNob2xkID0gREVGQVVMVF9ORVRXT1JLX1NFVFRJTkdTLnJlbGV2YW5jZVNjb3JlVGhyZXNob2xkO1xuXHRcdHRoaXMubm9kZVNpemUgPSBERUZBVUxUX05FVFdPUktfU0VUVElOR1Mubm9kZVNpemU7XG5cdFx0dGhpcy5saW5rVGhpY2tuZXNzID0gREVGQVVMVF9ORVRXT1JLX1NFVFRJTkdTLmxpbmVUaGlja25lc3M7XG5cdFx0dGhpcy5yZXBlbEZvcmNlID0gREVGQVVMVF9ORVRXT1JLX1NFVFRJTkdTLnJlcGVsRm9yY2U7XG5cdFx0dGhpcy5saW5rRm9yY2UgPSBERUZBVUxUX05FVFdPUktfU0VUVElOR1MubGlua0ZvcmNlO1xuXHRcdHRoaXMubGlua0Rpc3RhbmNlID0gREVGQVVMVF9ORVRXT1JLX1NFVFRJTkdTLmxpbmtEaXN0YW5jZTtcblx0XHR0aGlzLmNlbnRlckZvcmNlID0gREVGQVVMVF9ORVRXT1JLX1NFVFRJTkdTLmNlbnRlckZvcmNlO1xuXHRcdHRoaXMudGV4dEZhZGVUaHJlc2hvbGQgPSBERUZBVUxUX05FVFdPUktfU0VUVElOR1MudGV4dEZhZGVUaHJlc2hvbGQ7XG5cdFx0dGhpcy5taW5MaW5rVGhpY2tuZXNzID0gREVGQVVMVF9ORVRXT1JLX1NFVFRJTkdTLm1pbkxpbmtUaGlja25lc3M7XG5cdFx0dGhpcy5tYXhMaW5rVGhpY2tuZXNzID0gREVGQVVMVF9ORVRXT1JLX1NFVFRJTkdTLm1heExpbmtUaGlja25lc3M7XG5cdFx0dGhpcy5tYXhMYWJlbENoYXJhY3RlcnMgPSBERUZBVUxUX05FVFdPUktfU0VUVElOR1MubWF4TGFiZWxDaGFyYWN0ZXJzO1xuXHRcdHRoaXMubGlua0xhYmVsU2l6ZSA9IERFRkFVTFRfTkVUV09SS19TRVRUSU5HUy5saW5rTGFiZWxTaXplO1xuXHRcdHRoaXMubm9kZUxhYmVsU2l6ZSA9IERFRkFVTFRfTkVUV09SS19TRVRUSU5HUy5ub2RlTGFiZWxTaXplO1xuXHRcdHRoaXMuY29ubmVjdGlvblR5cGUgPSBERUZBVUxUX05FVFdPUktfU0VUVElOR1MuY29ubmVjdGlvblR5cGU7XG5cdFx0dGhpcy5ub3RlRmlsbENvbG9yID0gREVGQVVMVF9ORVRXT1JLX1NFVFRJTkdTLm5vdGVGaWxsQ29sb3I7XG5cdFx0dGhpcy5ibG9ja0ZpbGxDb2xvciA9IERFRkFVTFRfTkVUV09SS19TRVRUSU5HUy5ibG9ja0ZpbGxDb2xvcjtcblx0XHR0aGlzLndpa2lGaWxsQ29sb3IgPSBERUZBVUxUX05FVFdPUktfU0VUVElOR1Mud2lraUZpbGxDb2xvcjtcblx0XHR0aGlzLmxhbmd1YWdlID0gREVGQVVMVF9ORVRXT1JLX1NFVFRJTkdTLmxhbmd1YWdlO1xuXG5cdFx0Ly8gU2F2ZSBwbHVnaW4gc2V0dGluZ3Ncblx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5yZWxldmFuY2VTY29yZVRocmVzaG9sZCA9IERFRkFVTFRfTkVUV09SS19TRVRUSU5HUy5yZWxldmFuY2VTY29yZVRocmVzaG9sZDtcblx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5ub2RlU2l6ZSA9IERFRkFVTFRfTkVUV09SS19TRVRUSU5HUy5ub2RlU2l6ZTtcblx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5saW5rVGhpY2tuZXNzID0gREVGQVVMVF9ORVRXT1JLX1NFVFRJTkdTLmxpbmVUaGlja25lc3M7XG5cdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MucmVwZWxGb3JjZSA9IERFRkFVTFRfTkVUV09SS19TRVRUSU5HUy5yZXBlbEZvcmNlO1xuXHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLmxpbmtGb3JjZSA9IERFRkFVTFRfTkVUV09SS19TRVRUSU5HUy5saW5rRm9yY2U7XG5cdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MubGlua0Rpc3RhbmNlID0gREVGQVVMVF9ORVRXT1JLX1NFVFRJTkdTLmxpbmtEaXN0YW5jZTtcblx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5jZW50ZXJGb3JjZSA9IERFRkFVTFRfTkVUV09SS19TRVRUSU5HUy5jZW50ZXJGb3JjZTtcblx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy50ZXh0RmFkZVRocmVzaG9sZCA9IERFRkFVTFRfTkVUV09SS19TRVRUSU5HUy50ZXh0RmFkZVRocmVzaG9sZDtcblx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5taW5MaW5rVGhpY2tuZXNzID0gREVGQVVMVF9ORVRXT1JLX1NFVFRJTkdTLm1pbkxpbmtUaGlja25lc3M7XG5cdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MubWF4TGlua1RoaWNrbmVzcyA9IERFRkFVTFRfTkVUV09SS19TRVRUSU5HUy5tYXhMaW5rVGhpY2tuZXNzO1xuXHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLm1heExhYmVsQ2hhcmFjdGVycyA9IERFRkFVTFRfTkVUV09SS19TRVRUSU5HUy5tYXhMYWJlbENoYXJhY3RlcnM7XG5cdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MubGlua0xhYmVsU2l6ZSA9IERFRkFVTFRfTkVUV09SS19TRVRUSU5HUy5saW5rTGFiZWxTaXplO1xuXHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLm5vZGVMYWJlbFNpemUgPSBERUZBVUxUX05FVFdPUktfU0VUVElOR1Mubm9kZUxhYmVsU2l6ZTtcblx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5jb25uZWN0aW9uVHlwZSA9IERFRkFVTFRfTkVUV09SS19TRVRUSU5HUy5jb25uZWN0aW9uVHlwZTtcblx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5ub3RlRmlsbENvbG9yID0gREVGQVVMVF9ORVRXT1JLX1NFVFRJTkdTLm5vdGVGaWxsQ29sb3I7XG5cdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MuYmxvY2tGaWxsQ29sb3IgPSBERUZBVUxUX05FVFdPUktfU0VUVElOR1MuYmxvY2tGaWxsQ29sb3I7XG5cdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3Mud2lraUZpbGxDb2xvciA9IERFRkFVTFRfTkVUV09SS19TRVRUSU5HUy53aWtpRmlsbENvbG9yO1xuICAgICAgICB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTsgLy8gU2F2ZSB0aGUgc2V0dGluZ3NcblxuXHRcdC8vIFVwZGF0ZSB2aXN1YWxpemF0aW9uXG5cdFx0dGhpcy51cGRhdGVMYWJlbHNUb0RlZmF1bHRzKCk7XG5cdFx0dGhpcy51cGRhdGVTbGlkZXJzKCk7XG5cdFx0dGhpcy51cGRhdGVOb2RlU2l6ZXMoKTtcblx0XHR0aGlzLnVwZGF0ZUxpbmtUaGlja25lc3MoKTtcblx0XHR0aGlzLnVwZGF0ZVNpbXVsYXRpb25Gb3JjZXMoKTtcblx0XHRhd2FpdCB0aGlzLnVwZGF0ZVZpc3VhbGl6YXRpb24odGhpcy5yZWxldmFuY2VTY29yZVRocmVzaG9sZCk7XG5cdFx0XG5cdH1cblxuXHR1cGRhdGVMYWJlbHNUb0RlZmF1bHRzKCkge1xuXHRcdGNvbnN0IGxhYmVscyA9IHtcblx0XHRcdCdzbWFydC1jb25uZWN0aW9ucy12aXN1YWxpemVyLXNjb3JlVGhyZXNob2xkTGFiZWwnOiBgTWluIHJlbGV2YW5jZTogJHsodGhpcy5yZWxldmFuY2VTY29yZVRocmVzaG9sZCAqIDEwMCkudG9GaXhlZCgwKX0lYCxcblx0XHRcdCdzbWFydC1jb25uZWN0aW9ucy12aXN1YWxpemVyLW5vZGVTaXplTGFiZWwnOiBgTm9kZSBzaXplOiAke3RoaXMubm9kZVNpemV9YCxcblx0XHRcdCdzbWFydC1jb25uZWN0aW9ucy12aXN1YWxpemVyLW1heExhYmVsQ2hhcmFjdGVyc0xhYmVsJzogYE1heCBsYWJlbCBjaGFyYWN0ZXJzOiAke3RoaXMubWF4TGFiZWxDaGFyYWN0ZXJzfWAsXG5cdFx0XHQnc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1saW5rTGFiZWxTaXplTGFiZWwnOiBgTGluayBsYWJlbCBzaXplOiAke3RoaXMubGlua0xhYmVsU2l6ZX1gLFxuXHRcdFx0J3NtYXJ0LWNvbm5lY3Rpb25zLXZpc3VhbGl6ZXItc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1ub2RlTGFiZWxTaXplTGFiZWwnOiBgTm9kZSBsYWJlbCBzaXplOiAke3RoaXMubm9kZUxhYmVsU2l6ZX1gLFxuXHRcdFx0J3NtYXJ0LWNvbm5lY3Rpb25zLXZpc3VhbGl6ZXItbWluTGlua1RoaWNrbmVzc0xhYmVsJzogYE1pbiBsaW5rIHRoaWNrbmVzczogJHt0aGlzLm1pbkxpbmtUaGlja25lc3N9YCxcblx0XHRcdCdzbWFydC1jb25uZWN0aW9ucy12aXN1YWxpemVyLW1heExpbmtUaGlja25lc3NMYWJlbCc6IGBNYXggbGluayB0aGlja25lc3M6ICR7dGhpcy5tYXhMaW5rVGhpY2tuZXNzfWAsXG5cdFx0XHQnc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1mYWRlVGhyZXNob2xkTGFiZWwnOiBgVGV4dCBmYWRlIHRocmVzaG9sZDogJHt0aGlzLnRleHRGYWRlVGhyZXNob2xkfWAsXG5cdFx0XHQnc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1yZXBlbEZvcmNlTGFiZWwnOiBgUmVwZWwgZm9yY2U6ICR7dGhpcy5yZXBlbEZvcmNlfWAsXG5cdFx0XHQnc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1saW5rRm9yY2VMYWJlbCc6IGBMaW5rIGZvcmNlOiAke3RoaXMubGlua0ZvcmNlfWAsXG5cdFx0XHQnc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1saW5rRGlzdGFuY2VMYWJlbCc6IGBMaW5rIGRpc3RhbmNlOiAke3RoaXMubGlua0Rpc3RhbmNlfWBcblx0XHR9O1xuXHRcblx0XHRmb3IgKGNvbnN0IFtpZCwgdGV4dF0gb2YgT2JqZWN0LmVudHJpZXMobGFiZWxzKSkge1xuXHRcdFx0Y29uc3QgbGFiZWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCk7XG5cdFx0XHRpZiAobGFiZWwpIHtcblx0XHRcdFx0bGFiZWwudGV4dENvbnRlbnQgPSB0ZXh0O1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHVwZGF0ZVNsaWRlcnMoKSB7XG5cdFx0Y29uc3Qgc2NvcmVUaHJlc2hvbGRTbGlkZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1zY29yZVRocmVzaG9sZCcpIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG5cdFx0Y29uc3Qgbm9kZVNpemVTbGlkZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1ub2RlU2l6ZScpIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG5cdFx0Ly8gY29uc3QgbGluZVRoaWNrbmVzc1NsaWRlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdsaW5lVGhpY2tuZXNzJykgYXMgSFRNTElucHV0RWxlbWVudDtcblx0XHQvLyBjb25zdCBjZW50ZXJGb3JjZVNsaWRlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjZW50ZXJGb3JjZScpIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG5cdFx0Y29uc3QgcmVwZWxGb3JjZVNsaWRlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzbWFydC1jb25uZWN0aW9ucy12aXN1YWxpemVyLXJlcGVsRm9yY2UnKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xuXHRcdGNvbnN0IGxpbmtGb3JjZVNsaWRlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzbWFydC1jb25uZWN0aW9ucy12aXN1YWxpemVyLWxpbmtGb3JjZScpIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG5cdFx0Y29uc3QgbGlua0Rpc3RhbmNlU2xpZGVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NtYXJ0LWNvbm5lY3Rpb25zLXZpc3VhbGl6ZXItbGlua0Rpc3RhbmNlJykgYXMgSFRNTElucHV0RWxlbWVudDtcblx0XHRjb25zdCBmYWRlVGhyZXNob2xkU2xpZGVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NtYXJ0LWNvbm5lY3Rpb25zLXZpc3VhbGl6ZXItZmFkZVRocmVzaG9sZCcpIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG5cdFx0Y29uc3QgbWluTGlua1RoaWNrbmVzc1NsaWRlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzbWFydC1jb25uZWN0aW9ucy12aXN1YWxpemVyLW1pbkxpbmtUaGlja25lc3MnKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xuXHRcdGNvbnN0IG1heExpbmtUaGlja25lc3NTbGlkZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1tYXhMaW5rVGhpY2tuZXNzJykgYXMgSFRNTElucHV0RWxlbWVudDtcblx0XHRjb25zdCBtYXhMYWJlbENoYXJhY3RlcnNTbGlkZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1tYXhMYWJlbENoYXJhY3RlcnMnKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xuXHRcdGNvbnN0IGxpbmtMYWJlbFNpemVTbGlkZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1saW5rTGFiZWxTaXplJykgYXMgSFRNTElucHV0RWxlbWVudDtcblx0XHRjb25zdCBub2RlTGFiZWxTaXplU2xpZGVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NtYXJ0LWNvbm5lY3Rpb25zLXZpc3VhbGl6ZXItbm9kZUxhYmVsU2l6ZScpIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG5cdFx0XG5cdFx0c2NvcmVUaHJlc2hvbGRTbGlkZXIudmFsdWUgPSBgJHt0aGlzLnJlbGV2YW5jZVNjb3JlVGhyZXNob2xkfWA7XG5cdFx0bm9kZVNpemVTbGlkZXIudmFsdWUgPSBgJHt0aGlzLm5vZGVTaXplfWA7XG5cdFx0Ly8gbGluZVRoaWNrbmVzc1NsaWRlci52YWx1ZSA9IGAke3RoaXMubGlua1RoaWNrbmVzc31gO1xuXHRcdC8vIGNlbnRlckZvcmNlU2xpZGVyLnZhbHVlID0gYCR7dGhpcy5jZW50ZXJGb3JjZX1gO1xuXHRcdHJlcGVsRm9yY2VTbGlkZXIudmFsdWUgPSBgJHt0aGlzLnJlcGVsRm9yY2V9YDtcblx0XHRsaW5rRm9yY2VTbGlkZXIudmFsdWUgPSBgJHt0aGlzLmxpbmtGb3JjZX1gO1xuXHRcdGxpbmtEaXN0YW5jZVNsaWRlci52YWx1ZSA9IGAke3RoaXMubGlua0Rpc3RhbmNlfWA7XG5cdFx0ZmFkZVRocmVzaG9sZFNsaWRlci52YWx1ZSA9IGAke3RoaXMudGV4dEZhZGVUaHJlc2hvbGR9YDtcblx0XHRtaW5MaW5rVGhpY2tuZXNzU2xpZGVyLnZhbHVlID0gYCR7dGhpcy5taW5MaW5rVGhpY2tuZXNzfWA7XG5cdFx0bWF4TGlua1RoaWNrbmVzc1NsaWRlci52YWx1ZSA9IGAke3RoaXMubWF4TGlua1RoaWNrbmVzc31gO1xuXHRcdG1heExhYmVsQ2hhcmFjdGVyc1NsaWRlci52YWx1ZSA9IGAke3RoaXMubWF4TGFiZWxDaGFyYWN0ZXJzfWA7XG5cdFx0bGlua0xhYmVsU2l6ZVNsaWRlci52YWx1ZSA9IGAke3RoaXMubGlua0xhYmVsU2l6ZX1gO1xuXHRcdG5vZGVMYWJlbFNpemVTbGlkZXIudmFsdWUgPSBgJHt0aGlzLm5vZGVMYWJlbFNpemV9YDtcblx0fVxuXG5cdHdhdGNoRm9yTm90ZUNoYW5nZXMoKSB7XG5cdFx0dGhpcy5hcHAud29ya3NwYWNlLm9uKCdmaWxlLW9wZW4nLCAoZmlsZSkgPT4ge1xuXHRcdFx0aWYgKGZpbGUgJiYgKHRoaXMuY3VycmVudE5vdGVLZXkgIT09IGZpbGUucGF0aCkgJiYgIXRoaXMuaXNIb3ZlcmluZyAmJiB0aGlzLmNvbnRhaW5lckVsLmNoaWxkcmVuWzFdLmNoZWNrVmlzaWJpbGl0eSgpKSB7XG5cdFx0XHRcdHRoaXMuY3VycmVudE5vdGVLZXkgPSBmaWxlLnBhdGg7XG5cdFx0XHRcdHRoaXMuY3VycmVudE5vdGVDaGFuZ2luZyA9IHRydWU7XG5cdFx0XHRcdHRoaXMucmVuZGVyKCk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cblxuXHRhc3luYyB1cGRhdGVWaXN1YWxpemF0aW9uKG5ld1Njb3JlVGhyZXNob2xkPzogbnVtYmVyLCBub2RlTmFtZT86IHN0cmluZykge1xuXG5cdFx0Ly8gT25seSB1cGRhdGUgaWYgd2UncmUgbm90IGFscmVhZHkgdXBkYXRpbmdcblx0XHRpZiAodGhpcy51cGRhdGluZ1Zpc3VhbGl6YXRpb24gJiYgIXRoaXMuaXNDaGFuZ2luZ0Nvbm5lY3Rpb25UeXBlKSB7XG5cdFx0XHR0aGlzLnVwZGF0aW5nVmlzdWFsaXphdGlvbiA9IGZhbHNlO1xuXHRcdFx0dGhpcy5jdXJyZW50Tm90ZUNoYW5naW5nID0gZmFsc2U7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dGhpcy5pc0NoYW5naW5nQ29ubmVjdGlvblR5cGUgPSBmYWxzZTtcblx0XG5cdFx0aWYgKG5ld1Njb3JlVGhyZXNob2xkICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdHRoaXMucmVsZXZhbmNlU2NvcmVUaHJlc2hvbGQgPSBuZXdTY29yZVRocmVzaG9sZDtcblx0XHR9XG5cdFxuXHRcdGF3YWl0IHRoaXMudXBkYXRlQ29ubmVjdGlvbnMobm9kZU5hbWUpO1xuXG5cdFx0Y29uc3QgZmlsdGVyZWRDb25uZWN0aW9ucyA9IHRoaXMuY29ubmVjdGlvbnMuZmlsdGVyKChjb25uZWN0aW9uOiBhbnkpID0+IGNvbm5lY3Rpb24uc2NvcmUgPj0gdGhpcy5yZWxldmFuY2VTY29yZVRocmVzaG9sZCk7XG5cdFx0XG5cdFx0Y29uc3QgdmlzaWJsZU5vZGVzID0gbmV3IFNldDxzdHJpbmc+KCk7XG5cdFx0ZmlsdGVyZWRDb25uZWN0aW9ucy5mb3JFYWNoKChjb25uZWN0aW9uOiBhbnkpID0+IHtcblx0XHRcdHZpc2libGVOb2Rlcy5hZGQoY29ubmVjdGlvbi5zb3VyY2UpO1xuXHRcdFx0dmlzaWJsZU5vZGVzLmFkZChjb25uZWN0aW9uLnRhcmdldCk7XG5cdFx0fSk7XG5cdFx0Ly8gQWx3YXlzIGluY2x1ZGUgdGhlIGNlbnRyYWwgbm9kZVxuXHRcdHZpc2libGVOb2Rlcy5hZGQodGhpcy5jZW50cmFsTm90ZT8ua2V5KTtcblx0XHRjb25zdCBub2Rlc0RhdGEgPSBBcnJheS5mcm9tKHZpc2libGVOb2RlcykubWFwKChpZDogYW55KSA9PiB7XG5cdFx0XHRjb25zdCBub2RlID0gdGhpcy5ub2Rlcy5maW5kKChub2RlOiBhbnkpID0+IG5vZGUuaWQgPT09IGlkKTtcblx0XHRcdHJldHVybiBub2RlID8gbm9kZSA6IG51bGw7XG5cdFx0fSkuZmlsdGVyKEJvb2xlYW4pO1xuXG5cdFx0IC8vIEVuc3VyZSB0aGUgY2VudHJhbCBub2RlIGlzIGluY2x1ZGVkIGluIG5vZGVzRGF0YVxuXHRcdCBpZiAoIW5vZGVzRGF0YS5zb21lKChub2RlOiBhbnkpID0+IG5vZGUuaWQgPT09IHRoaXMuY2VudHJhbE5vdGUua2V5KSkge1xuXHRcdFx0Y29uc3QgY2VudHJhbE5vZGUgPSB0aGlzLm5vZGVzLmZpbmQoKG5vZGU6IGFueSkgPT4gbm9kZS5pZCA9PT0gdGhpcy5jZW50cmFsTm90ZS5rZXkpO1xuXHRcdFx0aWYgKGNlbnRyYWxOb2RlKSB7XG5cdFx0XHRcdG5vZGVzRGF0YS5wdXNoKGNlbnRyYWxOb2RlKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQgLy8gQ2hlY2sgYW5kIGluaXRpYWxpemUgbm9kZSBwb3NpdGlvbnNcblx0XHQgbm9kZXNEYXRhLmZvckVhY2goKG5vZGU6IGFueSkgPT4ge1xuXG5cdFx0XHRpZiAoIW5vZGUueCB8fCAhbm9kZS55KSB7XG5cdFx0XHRcdGNvbnNvbGUud2FybihgTm9kZSB3aXRoIGludmFsaWQgcG9zaXRpb246ICR7bm9kZS5pZH1gKTtcblx0XHRcdFx0bm9kZS54ID0gTWF0aC5yYW5kb20oKSAqIDEwMDA7IC8vIG9yIHNvbWUgZGVmYXVsdCB2YWx1ZVxuXHRcdFx0XHRub2RlLnkgPSBNYXRoLnJhbmRvbSgpICogMTAwMDsgLy8gb3Igc29tZSBkZWZhdWx0IHZhbHVlXG5cdFx0XHR9XG5cdFx0fSk7XG5cblxuXHRcblx0XHR0aGlzLnZhbGlkYXRlZExpbmtzID0gZmlsdGVyZWRDb25uZWN0aW9ucy5maWx0ZXIoKGxpbms6IGFueSkgPT4ge1xuXHRcdFx0Y29uc3Qgc291cmNlTm9kZSA9IG5vZGVzRGF0YS5maW5kKChub2RlOiBhbnkpID0+IG5vZGUuaWQgPT09IGxpbmsuc291cmNlKTtcblx0XHRcdGNvbnN0IHRhcmdldE5vZGUgPSBub2Rlc0RhdGEuZmluZCgobm9kZTogYW55KSA9PiBub2RlLmlkID09PSBsaW5rLnRhcmdldCk7XG5cdFx0XHRpZiAoIXNvdXJjZU5vZGUgfHwgIXRhcmdldE5vZGUpIHtcblx0XHRcdFx0Y29uc29sZS53YXJuKGBMaW5rIHNvdXJjZSBvciB0YXJnZXQgbm9kZSBub3QgZm91bmQ6ICR7bGluay5zb3VyY2V9LCAke2xpbmsudGFyZ2V0fWApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHNvdXJjZU5vZGUgJiYgdGFyZ2V0Tm9kZTtcblx0XHR9KTtcblx0XG5cdFx0aWYgKG5vZGVzRGF0YS5sZW5ndGggPT09IDAgfHwgdGhpcy52YWxpZGF0ZWRMaW5rcy5sZW5ndGggPT09IDApIHtcblx0XHRcdHRoaXMudXBkYXRpbmdWaXN1YWxpemF0aW9uID0gZmFsc2U7XG5cdFx0XHRjb25zb2xlLndhcm4oJ05vIG5vZGVzIG9yIGxpbmtzIHRvIGRpc3BsYXkgYWZ0ZXIgZmlsdGVyaW5nLiBBYm9ydGluZyB1cGRhdGUuJyk7XG5cdFx0XHRuZXcgTm90aWNlKCdObyBub2RlcyBvciBsaW5rcyB0byBkaXNwbGF5IGFmdGVyIGZpbHRlcmluZy4gQWRqdXN0IGZpbHRlciBzZXR0aW5ncycpO1xuXG5cdFx0XHQgLy8gQ2xlYXIgdGhlIGV4aXN0aW5nIG5vZGVzIGFuZCBsaW5rcyBmcm9tIHRoZSB2aXN1YWxpemF0aW9uXG5cdFx0XHQgdGhpcy5ub2RlU2VsZWN0aW9uID0gdGhpcy5zdmdHcm91cC5zZWxlY3QoJ2cuc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1ub2RlcycpLnNlbGVjdEFsbCgnY2lyY2xlJykuZGF0YShbXSkuZXhpdCgpLnJlbW92ZSgpO1xuXHRcdFx0IHRoaXMubGlua1NlbGVjdGlvbiA9IHRoaXMuc3ZnR3JvdXAuc2VsZWN0KCdnLnNtYXJ0LWNvbm5lY3Rpb25zLXZpc3VhbGl6ZXItbGlua3MnKS5zZWxlY3RBbGwoJ2xpbmUnKS5kYXRhKFtdKS5leGl0KCkucmVtb3ZlKCk7XG5cdFx0XHQgdGhpcy5saW5rTGFiZWxTZWxlY3Rpb24gPSB0aGlzLnN2Z0dyb3VwLnNlbGVjdCgnZy5zbWFydC1jb25uZWN0aW9ucy12aXN1YWxpemVyLWxpbmstbGFiZWxzJykuc2VsZWN0QWxsKCd0ZXh0JykuZGF0YShbXSkuZXhpdCgpLnJlbW92ZSgpO1xuXHRcdFx0IHRoaXMubGFiZWxTZWxlY3Rpb24gPSB0aGlzLnN2Z0dyb3VwLnNlbGVjdCgnZy5zbWFydC1jb25uZWN0aW9ucy12aXN1YWxpemVyLW5vZGUtbGFiZWxzJykuc2VsZWN0QWxsKCd0ZXh0JykuZGF0YShbXSkuZXhpdCgpLnJlbW92ZSgpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XG5cdFx0dGhpcy51cGRhdGVOb2RlQW5kTGlua1NlbGVjdGlvbihub2Rlc0RhdGEpO1xuXG5cdFx0XG5cdFx0aWYgKCF0aGlzLnNpbXVsYXRpb24gfHwgdGhpcy5jdXJyZW50Tm90ZUNoYW5naW5nIHx8IHRoaXMuaXNGaWx0ZXJpbmcpIHtcblx0XHRcdGNvbnN0IHsgd2lkdGgsIGhlaWdodCB9ID0gdGhpcy5nZXRTVkdEaW1lbnNpb25zKCk7XG5cdFx0XHR0aGlzLmluaXRpYWxpemVTaW11bGF0aW9uKHdpZHRoLCBoZWlnaHQpO1xuXHRcdFx0dGhpcy5jdXJyZW50Tm90ZUNoYW5naW5nID0gZmFsc2U7XG5cdFx0XHR0aGlzLmlzRmlsdGVyaW5nID0gZmFsc2U7XG5cdFx0fVxuXHRcblx0XHR0aGlzLnNpbXVsYXRpb24ubm9kZXMobm9kZXNEYXRhKS5vbigndGljaycsIHRoaXMuc2ltdWxhdGlvblRpY2tIYW5kbGVyLmJpbmQodGhpcykpO1xuXHRcdHRoaXMuc2ltdWxhdGlvbi5mb3JjZSgnbGluaycpLmxpbmtzKHRoaXMudmFsaWRhdGVkTGlua3MpXG5cdFx0LmRpc3RhbmNlKChkOiBhbnkpID0+IHRoaXMubGlua0Rpc3RhbmNlU2NhbGUoZC5zY29yZSkpOyAvLyBFbnN1cmUgdGhlIGxpbmsgZGlzdGFuY2UgaXMgYXBwbGllZFxuXG5cdFx0dGhpcy5zaW11bGF0aW9uLmFscGhhKDEpLnJlc3RhcnQoKTtcblxuXHRcdC8vIFN0b3AgdGhlIHNpbXVsYXRpb24gYWZ0ZXIgYSBzaG9ydCBkZWxheVxuXHRcdHNldFRpbWVvdXQoKCkgPT4ge1xuXHRcdFx0dGhpcy5zaW11bGF0aW9uLmFscGhhVGFyZ2V0KDApO1xuXHRcdH0sIDEwMDApOyAvLyBBZGp1c3QgdGhlIGRlbGF5IGFzIG5lZWRlZFxuXHRcblx0XHR0aGlzLnVwZGF0aW5nVmlzdWFsaXphdGlvbiA9IGZhbHNlO1xuXG5cdFx0Ly8gVE9ETzogQ29tbWVudCBiYWNrIHdoZW4gcHVzaGluZyBsZWdlbmRcblx0XHQvLyBGaXJzdCwgY2xlYXIgdGhlIGV4aXN0aW5nIGxlZ2VuZCBpZiBpdCBleGlzdHNcblx0XHQvLyBjb25zdCBleGlzdGluZ0xlZ2VuZCA9IHRoaXMuY29udGVudEVsLnF1ZXJ5U2VsZWN0b3IoJy5sZWdlbmQtY29udGFpbmVyJyk7XG5cdFx0Ly8gaWYgKGV4aXN0aW5nTGVnZW5kKSB7XG5cdFx0Ly8gXHRleGlzdGluZ0xlZ2VuZC5yZW1vdmUoKTtcblx0XHQvLyB9XG5cblx0XHQvLyBOb3csIHJlLXJlbmRlciB0aGUgbGVnZW5kIHdpdGggdXBkYXRlZCBub2RlIGRhdGFcblx0XHQvLyB0aGlzLnJlbmRlckxlZ2VuZCgpO1xuXHR9XG5cblx0c2ltdWxhdGlvblRpY2tIYW5kbGVyKCkge1xuXHRcdHRoaXMubm9kZVNlbGVjdGlvbi5hdHRyKCdjeCcsIChkOiBhbnkpID0+IGQueCkuYXR0cignY3knLCAoZDogYW55KSA9PiBkLnkpLnN0eWxlKCdjdXJzb3InLCAncG9pbnRlcicpO1xuXHRcdHRoaXMubGlua1NlbGVjdGlvbi5hdHRyKCd4MScsIChkOiBhbnkpID0+IGQuc291cmNlLnggfHwgMCkuYXR0cigneTEnLCAoZDogYW55KSA9PiBkLnNvdXJjZS55IHx8IDApLnN0eWxlKCdjdXJzb3InLCAncG9pbnRlcicpXG5cdFx0XHQuYXR0cigneDInLCAoZDogYW55KSA9PiBkLnRhcmdldC54IHx8IDApLmF0dHIoJ3kyJywgKGQ6IGFueSkgPT4gZC50YXJnZXQueSB8fCAwKTtcblx0XHR0aGlzLmxpbmtMYWJlbFNlbGVjdGlvbi5hdHRyKCd4JywgKGQ6IGFueSkgPT4gKChkLnNvdXJjZS54ICsgZC50YXJnZXQueCkgLyAyKSlcblx0XHRcdC5hdHRyKCd5JywgKGQ6IGFueSkgPT4gKChkLnNvdXJjZS55ICsgZC50YXJnZXQueSkgLyAyKSk7XG5cdFx0dGhpcy5sYWJlbFNlbGVjdGlvblxuXHRcdFx0LmF0dHIoJ3gnLCAoZDogYW55KSA9PiBkLngpXG5cdFx0XHQuYXR0cigneScsIChkOiBhbnkpID0+IGQueSk7XG5cdFxuXHR9XG5cdFxuXHRcblx0YXN5bmMgZ2V0V2lraU5vZGVzKG5vZGVUaXRsZTogc3RyaW5nKSB7XG5cdFx0Y29uc3QgdGl0bGUgPSBub2RlVGl0bGUgIT0gJycgPyBub2RlVGl0bGUgOiB0aGlzPy5jdXJyZW50Tm90ZUtleT8uc3BsaXQoJy8nKT8ucG9wKCk/LnJlcGxhY2UoXCIubWRcIiwgXCJcIikgfHwgJyc7XG5cdFx0Y29uc3QgcmVzID0gYXdhaXQgYXBpQ2xpZW50LmdldFJlc3BvbnNlKHRpdGxlLnJlcGxhY2UoXCIubWRcIiwgXCJcIikpLnRoZW4oY29udGVudCA9PiBjb250ZW50KS5jYXRjaChlID0+IGNvbnNvbGUuaW5mbyhlKSk7XG5cdFx0aWYgKCFyZXMpXG5cdFx0XHRyZXR1cm4gW107XG5cdFx0Y29uc3Qgbm90ZUNvbm5lY3Rpb25zID0gcmVzPy5tYXAobCA9PiAoe1xuXHRcdFx0aXRlbToge1xuXHRcdFx0XHR1cmw6bD8uY29udGVudF91cmxzPy5kZXNrdG9wPy5wYWdlLFxuXHRcdFx0XHR0aXRsZTpgJHtsPy5ub3JtYWxpemVkdGl0bGV9Lm1kYCxcblx0XHRcdFx0a2V5OmAke2w/Lm5vcm1hbGl6ZWR0aXRsZX0ubWRgLFxuXHRcdFx0XHRmaWxsOiB0aGlzLndpa2lGaWxsQ29sb3IsXG5cdFx0XHRcdGlkOmAke2w/Lm5vcm1hbGl6ZWR0aXRsZX0ubWRgLFxuXHRcdFx0XHR0eXBlOiAnd2lraSdcblx0XHRcdH0sXG5cdFx0XHRzY29yZTogMSxcblx0XHR9KSlcblx0XHRyZXR1cm4gbm90ZUNvbm5lY3Rpb25zO1xuXHR9XG5cdFxuXHRhc3luYyB1cGRhdGVDb25uZWN0aW9ucyhub2RlTmFtZT86IHN0cmluZykge1xuXHRcdHRoaXMubm9kZXMgPSBbXTtcblx0XHR0aGlzLmxpbmtzID0gW107XG5cdFx0dGhpcy5jb25uZWN0aW9ucyA9IFtdO1xuXHRcdHRoaXMubWluU2NvcmUgPSAxO1xuXHRcdHRoaXMubWF4U2NvcmUgPSAwO1xuXHRcdGxldCBjdXJyZW50Tm90ZUtleSA9ICBub2RlTmFtZSB8fCB0aGlzLmN1cnJlbnROb3RlS2V5O1xuXHRcdGlmICghY3VycmVudE5vdGVLZXkpIHJldHVybjtcblx0XHR0aGlzLmNlbnRyYWxOb3RlID0gdGhpcy5zbWFydE5vdGVzW2N1cnJlbnROb3RlS2V5XSB8fCB7XG5cdFx0XHR1cmw6YGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpLyR7bm9kZU5hbWV9YCxcblx0XHRcdHRpdGxlOm5vZGVOYW1lLFxuXHRcdFx0a2V5Om5vZGVOYW1lLFxuXHRcdFx0aWQ6bm9kZU5hbWUsXG5cdFx0XHR0eXBlOiAnd2lraSdcblx0XHR9O1xuXHRcdHRoaXMuY3VycmVudE5vdGVLZXkgPSB0aGlzLmNlbnRyYWxOb3RlLmtleTsgXG5cdFx0Y29uc29sZS5sb2coJ2NlbnRyYWwgbm90ZTogJywgdGhpcy5jZW50cmFsTm90ZSk7XG5cblx0XHQvLyBjb25zb2xlLmxvZygnY2VudHJhbCBub3RlIGNvbm5lY3Rpb25zOiAnLCBwYXJzZShzdHJpbmdpZnkodGhpcy5jZW50cmFsTm90ZS5maW5kX2Nvbm5lY3Rpb25zKCkpKSk7XG5cdFx0bGV0IG5vdGVDb25uZWN0aW9ucyA9IFtdO1xuXHRcdGlmICh0aGlzLmNlbnRyYWxOb3RlICYmIHRoaXMuY2VudHJhbE5vdGUuZmluZF9jb25uZWN0aW9ucyl7XG5cdFx0XHRub3RlQ29ubmVjdGlvbnMgPSB0aGlzLmNlbnRyYWxOb3RlLmZpbmRfY29ubmVjdGlvbnMoKS5maWx0ZXIoXG5cdFx0XHRcdChjb25uZWN0aW9uOiBhbnkpID0+IGNvbm5lY3Rpb24uc2NvcmUgPj0gdGhpcy5yZWxldmFuY2VTY29yZVRocmVzaG9sZCk7XG5cdFx0fVxuXHRcdGNvbnN0IHdpa2lOb2RlcyA9IGF3YWl0IHRoaXMuZ2V0V2lraU5vZGVzKHRoaXMuY3VycmVudE5vdGVLZXkpOyBcblx0XHRub3RlQ29ubmVjdGlvbnMgPSBub3RlQ29ubmVjdGlvbnMuY29uY2F0KHdpa2lOb2Rlcyk7XG5cdFx0XG5cblx0XHR0aGlzLmFkZENlbnRyYWxOb2RlKCk7XG5cdFx0dGhpcy5hZGRGaWx0ZXJlZENvbm5lY3Rpb25zKG5vdGVDb25uZWN0aW9ucyk7XG5cdFx0Y29uc3QgaXNWYWxpZCA9IHRoaXMudmFsaWRhdGVHcmFwaERhdGEodGhpcy5ub2RlcywgdGhpcy5saW5rcyk7XG5cdFx0aWYgKCFpc1ZhbGlkKSBjb25zb2xlLmVycm9yKCdHcmFwaCBkYXRhIHZhbGlkYXRpb24gZmFpbGVkLicpO1xuXHR9XG5cdFxuXHRcblx0YWRkQ2VudHJhbE5vZGUoKSB7XG5cdFx0XG5cdFx0aWYgKHRoaXMuY2VudHJhbE5vdGUua2V5ICYmIHRoaXMuY2VudHJhbE5vdGUua2V5LnRyaW0oKSAhPT0gJycgJiYgIXRoaXMubm9kZXMuc29tZSgobm9kZTogeyBpZDogYW55OyB9KSA9PiBub2RlLmlkID09PSB0aGlzLmNlbnRyYWxOb3RlLmtleSkpIHtcblxuXHRcdFx0Y29uc3Qgc3ZnID0gdGhpcy5zdmcubm9kZSgpIGFzIFNWR1NWR0VsZW1lbnQ7XG5cdFx0XHRjb25zdCB7IHdpZHRoLCBoZWlnaHQgfSA9IHN2Zy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuXHRcdFx0dGhpcy5ub2Rlcy5wdXNoKHtcblx0XHRcdFx0aWQ6IHRoaXMuY2VudHJhbE5vdGUua2V5LFxuXHRcdFx0XHRuYW1lOiB0aGlzLmNlbnRyYWxOb3RlLmtleSxcblx0XHRcdFx0Z3JvdXA6ICdub3RlJyxcblx0XHRcdFx0eDogd2lkdGggLyAyLFxuXHRcdFx0XHR5OiBoZWlnaHQgLyAyLFxuXHRcdFx0XHRmeDogbnVsbCxcblx0XHRcdFx0Znk6IG51bGwsXG5cdFx0XHRcdGZpbGw6IHRoaXM/LmNlbnRyYWxOb3RlPy50eXBlID09PSAnd2lraScgPyB0aGlzLndpa2lGaWxsQ29sb3IgOiB0aGlzLm5vdGVGaWxsQ29sb3IsXG5cdFx0XHRcdHNlbGVjdGVkOiBmYWxzZSxcblx0XHRcdFx0aGlnaGxpZ2h0ZWQ6IGZhbHNlLFxuXHRcdFx0XHR0eXBlOiB0aGlzLmNlbnRyYWxOb3RlPy50eXBlXG5cdFx0XHR9KTtcblx0XHRcdHRoaXMuY2VudHJhbE5vZGUgPSB0aGlzLm5vZGVzW3RoaXMubm9kZXMubGVuZ3RoIC0gMV07XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNvbnNvbGUuZXJyb3IoYENlbnRyYWwgbm9kZSBub3QgZm91bmQgb3IgYWxyZWFkeSBleGlzdHM6ICR7dGhpcy5jZW50cmFsTm90ZS5rZXl9YCk7XG5cdFx0fVxuXHR9XG5cdFxuXHRhZGRGaWx0ZXJlZENvbm5lY3Rpb25zKG5vdGVDb25uZWN0aW9uczogYW55KSB7XG5cblx0XHRjb25zdCBmaWx0ZXJlZENvbm5lY3Rpb25zID0gbm90ZUNvbm5lY3Rpb25zLmZpbHRlcigoY29ubmVjdGlvbjogYW55KSA9PiB7XG5cdFx0XHRpZiAodGhpcy5jb25uZWN0aW9uVHlwZSA9PT0gJ2JvdGgnICkge1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTsgLy8gcmV0dXJuIGFsbCBjb25uZWN0aW9uc1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly8gSWYgY29ubmVjdGlvblR5cGUgaXMgYmxvY2ssIHJldHVybiB0cnVlIGlmIGNvbm5lY3Rpb24gaXMgYSBTbWFydEJsb2NrLCBvdGhlcndpc2UgcmV0dXJuIGZhbHNlXG5cdFx0XHRcdHJldHVybiAodGhpcy5jb25uZWN0aW9uVHlwZSA9PT0gJ2Jsb2NrJykgPT09IChjb25uZWN0aW9uLml0ZW0gaW5zdGFuY2VvZiB0aGlzLmVudi5pdGVtX3R5cGVzLlNtYXJ0QmxvY2spIHx8IGNvbm5lY3Rpb24/Lml0ZW0/LnR5cGUgPT09ICd3aWtpJztcblxuXHRcdFx0fVxuXHRcdH0pO1x0XHQvLyBjb25zb2xlLmxvZygnRmlsdGVyZWQgY29ubmVjdGlvbnM6JywgZmlsdGVyZWRDb25uZWN0aW9ucyk7XG5cdFx0ZmlsdGVyZWRDb25uZWN0aW9ucy5mb3JFYWNoKChjb25uZWN0aW9uOiBhbnksIGluZGV4OiBhbnkpID0+IHtcblx0XHRcdC8vIGNvbnNvbGUubG9nKCdGaWx0ZXJlZCBjb25uZWN0aW9uOicsIGNvbm5lY3Rpb24sICdJbmRleDonLCBpbmRleCk7XG5cdFx0XHRpZiAoY29ubmVjdGlvbiAmJiBjb25uZWN0aW9uLml0ZW0gJiYgY29ubmVjdGlvbi5pdGVtLmtleSkge1xuXHRcdFx0XHRjb25zdCBjb25uZWN0aW9uSWQgPSBjb25uZWN0aW9uLml0ZW0ua2V5O1xuXHRcdFx0XHQvLyBjb25zb2xlLmxvZygnQWRkaW5nIGNvbm5lY3Rpb24gbm9kZSBmb3IgSUQ6JywgY29ubmVjdGlvbklkKTtcblxuXHRcdFx0XHR0aGlzLmFkZENvbm5lY3Rpb25Ob2RlKGNvbm5lY3Rpb25JZCwgY29ubmVjdGlvbik7XG5cdFx0XHRcdC8vIGNvbnNvbGUubG9nKCdBZGRpbmcgY29ubmVjdGlvbiBsaW5rIGZvciBJRDonLCBjb25uZWN0aW9uSWQpO1xuXG5cdFx0XHRcdHRoaXMuYWRkQ29ubmVjdGlvbkxpbmsoY29ubmVjdGlvbklkLCBjb25uZWN0aW9uKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNvbnNvbGUud2FybihgU2tpcHBpbmcgaW52YWxpZCBjb25uZWN0aW9uIGF0IGluZGV4ICR7aW5kZXh9OmAsIGNvbm5lY3Rpb24pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdC8vIGNvbnNvbGUubG9nKCdOb2RlcyBhZnRlciBhZGRGaWx0ZXJlZENvbm5lY3Rpb25zOicsIHRoaXMubm9kZXMpO1xuXHRcdC8vIGNvbnNvbGUubG9nKCdMaW5rcyBhZnRlciBhZGRGaWx0ZXJlZENvbm5lY3Rpb25zOicsIHRoaXMubGlua3MpO1x0XG5cdH1cblxuXHRhZGRDb25uZWN0aW9uTm9kZShjb25uZWN0aW9uSWQ6IGFueSwgY29ubmVjdGlvbjogYW55KSB7XG5cdFx0aWYgKCF0aGlzLm5vZGVzLnNvbWUoKG5vZGU6IHsgaWQ6IHN0cmluZzsgfSkgPT4gbm9kZS5pZCA9PT0gY29ubmVjdGlvbklkKSkge1xuXHRcdFx0dGhpcy5ub2Rlcy5wdXNoKHtcblx0XHRcdFx0aWQ6IGNvbm5lY3Rpb25JZCxcblx0XHRcdFx0bmFtZTogY29ubmVjdGlvbklkLFxuXHRcdFx0XHRncm91cDogKGNvbm5lY3Rpb24uaXRlbSBpbnN0YW5jZW9mIHRoaXMuZW52Lml0ZW1fdHlwZXMuU21hcnRCbG9jaykgPyAnYmxvY2snIDogJ25vdGUnLFxuXHRcdFx0XHR4OiBNYXRoLnJhbmRvbSgpICogMTAwMCxcblx0XHRcdFx0eTogTWF0aC5yYW5kb20oKSAqIDEwMDAsXG5cdFx0XHRcdGZ4OiBudWxsLFxuXHRcdFx0XHRmeTogbnVsbCxcblx0XHRcdFx0ZmlsbDogKGNvbm5lY3Rpb24uaXRlbSBpbnN0YW5jZW9mIHRoaXMuZW52Lml0ZW1fdHlwZXMuU21hcnRCbG9jaykgPyB0aGlzLmJsb2NrRmlsbENvbG9yIDogY29ubmVjdGlvbj8uaXRlbT8udHlwZSA9PT0gJ3dpa2knID8gdGhpcy53aWtpRmlsbENvbG9yIDogdGhpcy5ub3RlRmlsbENvbG9yLFxuXHRcdFx0XHRzZWxlY3RlZDogZmFsc2UsXG5cdFx0XHRcdGhpZ2hsaWdodGVkOiBmYWxzZSxcblx0XHRcdFx0dHlwZTogY29ubmVjdGlvbj8uaXRlbT8udHlwZSxcblx0XHRcdFx0dXJsOiBjb25uZWN0aW9uPy5pdGVtPy51cmxcblx0XHRcdH0pO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb25zb2xlLmxvZygnTm9kZSBhbHJlYWR5IGV4aXN0cyBmb3IgY29ubmVjdGlvbiBJRDonLGNvbm5lY3Rpb25JZCk7XG5cdFx0fVxuXHR9XG5cdFxuXHRhZGRDb25uZWN0aW9uTGluayhjb25uZWN0aW9uSWQ6IHN0cmluZywgY29ubmVjdGlvbjogYW55KSB7XG5cdFx0Y29uc3Qgc291cmNlTm9kZSA9IHRoaXMubm9kZXMuZmluZCgobm9kZTogeyBpZDogc3RyaW5nOyB9KSA9PiBub2RlLmlkID09PSB0aGlzLmNlbnRyYWxOb3RlLmtleSk7XG5cdFx0Y29uc3QgdGFyZ2V0Tm9kZSA9IHRoaXMubm9kZXMuZmluZCgobm9kZTogeyBpZDogc3RyaW5nOyB9KSA9PiBub2RlLmlkID09PSBjb25uZWN0aW9uSWQpO1xuXHRcblx0XHRpZiAoIXNvdXJjZU5vZGUpIHtcblx0XHRcdGNvbnNvbGUuZXJyb3IoYFNvdXJjZSBub2RlIG5vdCBmb3VuZDogJHt0aGlzLmNlbnRyYWxOb3RlLmtleX1gKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFxuXHRcdGlmICghdGFyZ2V0Tm9kZSkge1xuXHRcdFx0Y29uc29sZS5lcnJvcihgVGFyZ2V0IG5vZGUgbm90IGZvdW5kOiAke2Nvbm5lY3Rpb25JZH1gKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFxuXHRcdHRoaXMubGlua3MucHVzaCh7XG5cdFx0XHRzb3VyY2U6IHRoaXMuY2VudHJhbE5vdGUua2V5LFxuXHRcdFx0dGFyZ2V0OiBjb25uZWN0aW9uSWQsXG5cdFx0XHR2YWx1ZTogY29ubmVjdGlvbi5zY29yZSB8fCAwXG5cdFx0fSk7XG5cdFx0dGhpcy5jb25uZWN0aW9ucy5wdXNoKHtcblx0XHRcdHNvdXJjZTogdGhpcy5jZW50cmFsTm90ZS5rZXksXG5cdFx0XHR0YXJnZXQ6IGNvbm5lY3Rpb25JZCxcblx0XHRcdHNjb3JlOiBjb25uZWN0aW9uLnNjb3JlIHx8IDBcblx0XHR9KTtcblx0XHR0aGlzLnVwZGF0ZVNjb3JlUmFuZ2UoY29ubmVjdGlvbi5zY29yZSk7XG5cdH1cblx0XG5cblx0dXBkYXRlU2NvcmVSYW5nZShzY29yZTogbnVtYmVyKSB7XG5cdFx0aWYgKHNjb3JlID4gdGhpcy5tYXhTY29yZSkgdGhpcy5tYXhTY29yZSA9IHNjb3JlO1xuXHRcdGlmIChzY29yZSA8IHRoaXMubWluU2NvcmUpIHRoaXMubWluU2NvcmUgPSBzY29yZTtcblx0fVxuXG5cdHZhbGlkYXRlR3JhcGhEYXRhKG5vZGVzOiBhbnlbXSwgbGlua3M6IGFueVtdKTogYm9vbGVhbiB7XG5cdFx0Y29uc3Qgbm9kZUlkcyA9IG5ldyBTZXQobm9kZXMubWFwKG5vZGUgPT4gbm9kZS5pZCkpO1xuXHRcdGxldCBpc1ZhbGlkID0gdHJ1ZTtcblx0XHRsaW5rcy5mb3JFYWNoKChsaW5rLCBpbmRleCkgPT4ge1xuXHRcdFx0aWYgKCFub2RlSWRzLmhhcyhsaW5rLnNvdXJjZSkpIHtcblx0XHRcdFx0Y29uc29sZS5lcnJvcihgTGluayBhdCBpbmRleCAke2luZGV4fSBoYXMgYW4gaW52YWxpZCBzb3VyY2U6ICR7bGluay5zb3VyY2V9YCk7XG5cdFx0XHRcdGlzVmFsaWQgPSBmYWxzZTtcblx0XHRcdH1cblx0XHRcdGlmICghbm9kZUlkcy5oYXMobGluay50YXJnZXQpKSB7XG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoYExpbmsgYXQgaW5kZXggJHtpbmRleH0gaGFzIGFuIGludmFsaWQgdGFyZ2V0OiAke2xpbmsudGFyZ2V0fWApO1xuXHRcdFx0XHRpc1ZhbGlkID0gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0bm9kZXMuZm9yRWFjaCgobm9kZSwgaW5kZXgpID0+IHtcblx0XHRcdGlmICghbm9kZS5oYXNPd25Qcm9wZXJ0eSgnaWQnKSB8fCAhbm9kZS5oYXNPd25Qcm9wZXJ0eSgnbmFtZScpIHx8ICFub2RlLmhhc093blByb3BlcnR5KCdncm91cCcpKSB7XG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoYE5vZGUgYXQgaW5kZXggJHtpbmRleH0gaXMgbWlzc2luZyByZXF1aXJlZCBwcm9wZXJ0aWVzOiAke0pTT04uc3RyaW5naWZ5KG5vZGUpfWApO1xuXHRcdFx0XHRpc1ZhbGlkID0gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0cmV0dXJuIGlzVmFsaWQ7XG5cdH1cblx0XG5cblx0dXBkYXRlTm9kZUFuZExpbmtTZWxlY3Rpb24obm9kZXNEYXRhOiBhbnkpIHtcblx0XHRjb25zdCBzdmdHcm91cCA9IHRoaXMuc3ZnR3JvdXA7XG5cdFxuXHRcdCAvLyBVcGRhdGUgbGlua3MgZmlyc3Rcblx0XHQgdGhpcy5saW5rU2VsZWN0aW9uID0gc3ZnR3JvdXAuc2VsZWN0KCdnLnNtYXJ0LWNvbm5lY3Rpb25zLXZpc3VhbGl6ZXItbGlua3MnKS5zZWxlY3RBbGwoJ2xpbmUnKVxuXHRcdCAuZGF0YSh0aGlzLnZhbGlkYXRlZExpbmtzLCAoZDogYW55KSA9PiBgJHtkLnNvdXJjZX0tJHtkLnRhcmdldH1gKVxuXHRcdCAuam9pbihcblx0XHRcdCBlbnRlciA9PiB0aGlzLmVudGVyTGluayhlbnRlciksXG5cdFx0XHQgdXBkYXRlID0+IHRoaXMudXBkYXRlTGluayh1cGRhdGUpLFxuXHRcdFx0IGV4aXQgPT4gZXhpdC5yZW1vdmUoKVxuXHRcdCApO1xuIFxuXHRcdFxuXHRcdCB0aGlzLmxpbmtMYWJlbFNlbGVjdGlvbiA9IHN2Z0dyb3VwLnNlbGVjdCgnZy5zbWFydC1jb25uZWN0aW9ucy12aXN1YWxpemVyLWxpbmstbGFiZWxzJykuc2VsZWN0QWxsKCd0ZXh0JylcbiAgICAgICAgLmRhdGEodGhpcy52YWxpZGF0ZWRMaW5rcywgKGQ6IGFueSkgPT4gYCR7ZC5zb3VyY2UuaWR9LSR7ZC50YXJnZXQuaWR9YClcbiAgICAgICAgLmpvaW4oXG4gICAgICAgICAgICBlbnRlciA9PiB0aGlzLmVudGVyTGlua0xhYmVsKGVudGVyKSxcbiAgICAgICAgICAgIHVwZGF0ZSA9PiB0aGlzLnVwZGF0ZUxpbmtMYWJlbCh1cGRhdGUpLFxuICAgICAgICAgICAgZXhpdCA9PiBleGl0LnJlbW92ZSgpXG4gICAgICAgICk7XG5cdFxuXHRcdHRoaXMubGFiZWxTZWxlY3Rpb24gPSBzdmdHcm91cC5zZWxlY3QoJ2cuc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1ub2RlLWxhYmVscycpLnNlbGVjdEFsbCgndGV4dCcpXG5cdFx0XHQuZGF0YShub2Rlc0RhdGEsIChkOiBhbnkpID0+IGQuaWQpXG5cdFx0XHQuam9pbihcblx0XHRcdFx0ZW50ZXIgPT4gdGhpcy5lbnRlckxhYmVsKGVudGVyKSxcblx0XHRcdFx0dXBkYXRlID0+IHRoaXMudXBkYXRlTGFiZWwodXBkYXRlKSxcblx0XHRcdFx0ZXhpdCA9PiBleGl0LnJlbW92ZSgpXG5cdFx0XHQpXG5cdFx0XHQuYXR0cigneCcsIChkOiBhbnkpID0+IGQueClcblx0XHRcdC5hdHRyKCd5JywgKGQ6IGFueSkgPT4gZC55KTtcblxuXHRcdC8vIFVwZGF0ZSBub2RlcyBhZnRlciBsaW5rc1xuXHRcdHRoaXMubm9kZVNlbGVjdGlvbiA9IHN2Z0dyb3VwLnNlbGVjdCgnZy5zbWFydC1jb25uZWN0aW9ucy12aXN1YWxpemVyLW5vZGVzJykuc2VsZWN0QWxsKCdjaXJjbGUnKVxuXHRcdFx0LmRhdGEobm9kZXNEYXRhLCAoZDogYW55KSA9PiB7IFxuXHRcdFx0XHQgcmV0dXJuIGQuaWQ7XG5cdFx0XHRcdH0pXG5cdFx0XHQuam9pbihcblx0XHRcdFx0ZW50ZXIgPT4gdGhpcy5lbnRlck5vZGUoZW50ZXIpLFxuXHRcdFx0XHR1cGRhdGUgPT4gdGhpcy51cGRhdGVOb2RlKHVwZGF0ZSksXG5cdFx0XHRcdGV4aXQgPT4gZXhpdC5yZW1vdmUoKVxuXHRcdFx0KTtcblx0XG5cdH1cblx0XG5cblx0ZW50ZXJOb2RlKGVudGVyOiBhbnkpIHtcblx0XHRjb25zdCB0aGF0ID0gdGhpczsgIC8vIFJlZmVyZW5jZSB0byAndGhpcycgY29udGV4dCBmb3IgaW5uZXIgZnVuY3Rpb25zXG5cdFx0cmV0dXJuIGVudGVyLmFwcGVuZCgnY2lyY2xlJylcblx0XHRcdC5hdHRyKCdjbGFzcycsICdzbWFydC1jb25uZWN0aW9ucy12aXN1YWxpemVyLW5vZGUnKVxuXHRcdFx0LmF0dHIoJ3InLCAoZDogYW55KSA9PiBkLmlkID09PSB0aGlzLmNlbnRyYWxOb2RlLmlkID8gdGhpcy5ub2RlU2l6ZSArIDIgOiB0aGlzLm5vZGVTaXplKVxuXHRcdFx0LmF0dHIoJ2ZpbGwnLCAoZDogYW55KSA9PiBkLmZpbGwpXG5cdFx0XHQuYXR0cignc3Ryb2tlJywgKGQ6IGFueSkgPT4gZC5zZWxlY3RlZCA/ICdibGFuY2hlZGFsbW9uZCcgOiAndHJhbnNwYXJlbnQnKVxuXHRcdFx0LmF0dHIoJ3N0cm9rZS13aWR0aCcsIChkOiBhbnkpID0+IGQuc2VsZWN0ZWQgPyAxLjUgOiAwLjMpXG5cdFx0XHQuYXR0cignb3BhY2l0eScsIDEpXG5cdFx0XHQuYXR0cignY3Vyc29yJywgJ3BvaW50ZXInKVxuXHRcdFx0LmNhbGwoZDMuZHJhZygpLm9uKCdzdGFydCcsIHRoaXMub25EcmFnU3RhcnQuYmluZCh0aGlzKSlcblx0XHRcdFx0Lm9uKCdkcmFnJywgdGhpcy5vbkRyYWcuYmluZCh0aGlzKSlcblx0XHRcdFx0Lm9uKCdlbmQnLCB0aGlzLm9uRHJhZ0VuZC5iaW5kKHRoaXMpKSlcblx0XHRcdC5vbignY2xpY2snLCB0aGlzLm9uTm9kZUNsaWNrLmJpbmQodGhpcykpXG5cdFx0XHQub24oJ21vdXNlb3ZlcicsIHRoaXMub25Ob2RlTW91c2VPdmVyLmJpbmQodGhpcykpXG5cdFx0XHQub24oJ21vdXNlb3V0JywgdGhpcy5vbk5vZGVNb3VzZU91dC5iaW5kKHRoaXMpKTtcblx0fVxuXG5cdHVwZGF0ZU5vZGUodXBkYXRlOiBhbnkpIHtcblx0XHRyZXR1cm4gdXBkYXRlLmF0dHIoJ3InLCAoZDogYW55KSA9PiBkLmlkID09PSB0aGlzLmNlbnRyYWxOb2RlLmlkID8gdGhpcy5ub2RlU2l6ZSArIDIgOiB0aGlzLm5vZGVTaXplKVxuXHRcdFx0LmF0dHIoJ2ZpbGwnLCAoZDogYW55KSA9PiBkLnNlbGVjdGVkID8gJyNmM2VlNWQnIDogZC5maWxsKVxuXHRcdFx0LmF0dHIoJ3N0cm9rZScsIChkOiBhbnkpID0+IGQuc2VsZWN0ZWQgPyAnYmxhbmNoZWRhbG1vbmQnIDogJ3RyYW5zcGFyZW50Jylcblx0XHRcdC5hdHRyKCdzdHJva2Utd2lkdGgnLCAoZDogYW55KSA9PiBkLnNlbGVjdGVkID8gMS41IDogMC4zKTtcblx0fVxuXHRvbkRyYWdTdGFydChldmVudDogYW55LCBkOiBhbnkpIHtcblx0XHRpZiAoIWV2ZW50LmFjdGl2ZSkgdGhpcy5zaW11bGF0aW9uLmFscGhhVGFyZ2V0KDAuMykucmVzdGFydCgpO1xuXHRcdHRoaXMuZHJhZ2dpbmcgPSB0cnVlO1xuXHRcdGQuZnggPSBkLng7XG5cdFx0ZC5meSA9IGQueTtcblx0fVxuXHRcblx0b25EcmFnKGV2ZW50OiBhbnksIGQ6IGFueSkge1xuXG5cdFx0Ly8gRW5zdXJlIGhvdmVyaW5nIGRhdGUgaXNudCBhY3RpdmUgd2hlbiBkcmFnZ2luZy5cblx0XHRpZih0aGlzLmlzSG92ZXJpbmcpIHRoaXMuaXNIb3ZlcmluZyA9IGZhbHNlO1xuXG5cdFx0ZC5meCA9IGV2ZW50Lng7XG5cdFx0ZC5meSA9IGV2ZW50Lnk7XG5cdFxuXHRcdC8vIGlmIChkLmlkID09PSB0aGlzLmNlbnRyYWxOb2RlLmlkKSB7XG5cdFx0Ly8gIC8vIFVwZGF0ZSB0aGUgcG9zaXRpb24gb2YgdGhlIG5vZGUncyBsYWJlbCBpbW1lZGlhdGVseSBkdXJpbmcgZHJhZ2dpbmdcblx0XHQvLyAgdGhpcy5sYWJlbFNlbGVjdGlvblxuXHRcdC8vICAuZmlsdGVyKChub2RlOiBhbnkpID0+IG5vZGUuaWQgPT09IGQuaWQpXG5cdFx0Ly8gIC5hdHRyKCd4JywgZC54KVxuXHRcdC8vICAuYXR0cigneScsICgpID0+IHtcblx0XHQvLyBcdCBpZiAoZC5oaWdobGlnaHRlZCkge1xuXHRcdC8vIFx0XHQgcmV0dXJuIGQueSArIDg7IC8vIEtlZXAgbGFiZWwgOHB4IGRvd24gaWYgbm9kZSBpcyBoaWdobGlnaHRlZFxuXHRcdC8vIFx0IH1cblx0XHQvLyBcdCByZXR1cm4gZC55O1xuXHRcdC8vICB9KTtcblxuXHRcdC8vIH1cblxuXHR9XG5cdFxuXHRcblx0XG5cdG9uRHJhZ0VuZChldmVudDogYW55LCBkOiBhbnkpIHtcblx0XHRpZiAoIWV2ZW50LmFjdGl2ZSkgdGhpcy5zaW11bGF0aW9uLmFscGhhVGFyZ2V0KDApO1xuXHRcdGQuZnggPSBudWxsO1xuXHRcdGQuZnkgPSBudWxsO1xuXHRcdHRoaXMuZHJhZ2dpbmcgPSBmYWxzZVxuXG5cblx0fVxuXG5cdGFzeW5jIG9wZW5TZWFyY2gobm9kZTogYW55KSB7XG5cdFx0Y29uc3QgbmV3VGl0bGUgPSBgU2VhcmNoOiAke25vZGU/Lm5hbWV9YDsgLy8gRGVmaW5lIHRoZSBuZXcgdGl0bGUgYmFzZWQgb24gdGhlIFVSTFxuXHRcdC8vIEdldCB0aGUgY3VycmVudCBhY3RpdmUgbGVhZlxuXHRcdGNvbnN0IGxlYWYgPSB0aGlzLmFwcC53b3Jrc3BhY2UuYWN0aXZlTGVhZjtcblxuXHRcdGlmIChsZWFmICYmIGxlYWYudmlldyBpbnN0YW5jZW9mIFNlYXJjaFZpZXcpIHtcblx0XHRcdC8vIElmIHRoZXJlJ3MgYW4gZXhpc3RpbmcgU2VhcmNoVmlldywgdXBkYXRlIGl0cyBVUkwgYW5kIHNldCBpdHMgc3RhdGVcblx0XHRcdGxlYWYudmlldy5mcmFtZS5zZXRBdHRyKCdzcmMnLCBub2RlPy51cmwpO1xuXHRcdFx0bGVhZi52aWV3LnVybCA9IG5vZGU/LnVybDtcblxuXHRcdFx0Ly8gVXBkYXRlIGRpc3BsYXkgdGV4dCB1c2luZyBzZXRWaWV3U3RhdGVcblx0XHRcdHRoaXMuYXBwLndvcmtzcGFjZT8uYWN0aXZlTGVhZj8uc2V0Vmlld1N0YXRlKHtcblx0XHRcdFx0dHlwZTogbGVhZi52aWV3LmdldFZpZXdUeXBlKCksXG5cdFx0XHRcdGFjdGl2ZTogdHJ1ZSxcblx0XHRcdFx0c3RhdGU6IHsgdmlld1RpdGxlOiBuZXdUaXRsZSB9IC8vIFBhc3MgdGhlIG5ldyB0aXRsZSBpbiBzdGF0ZVxuXHRcdFx0fSk7XG5cdFx0XHR0aGlzLmFwcC53b3Jrc3BhY2Uuc2V0QWN0aXZlTGVhZihsZWFmKTsgLy8gRW5zdXJlIGl0J3MgdGhlIGFjdGl2ZSBsZWFmXG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIElmIG5vIGFjdGl2ZSBTZWFyY2hWaWV3LCBjcmVhdGUgYSBuZXcgb25lXG5cdFx0XHRjb25zdCBuZXdMZWFmID0gdGhpcy5hcHAud29ya3NwYWNlLmdldExlYWYodHJ1ZSk7IC8vIHRydWUgZW5zdXJlcyBpdCdzIGEgbmV3IGxlYWZcblx0XHRcdGNvbnN0IHZpZXcgPSBuZXcgU2VhcmNoVmlldyh0aGlzLCBuZXdMZWFmLCBub2RlPy51cmwsIG5vZGU/Lm5hbWUpO1xuXHRcdFx0YXdhaXQgbmV3TGVhZi5vcGVuKHZpZXcpO1xuXG5cdFx0XHQvLyBTZXQgaW5pdGlhbCBkaXNwbGF5IHRleHQgdmlhIHNldFZpZXdTdGF0ZSBmb3IgdGhlIG5ld2x5IGNyZWF0ZWQgdmlld1xuXHRcdFx0YXdhaXQgbmV3TGVhZi5zZXRWaWV3U3RhdGUoe1xuXHRcdFx0XHR0eXBlOiB2aWV3LmdldFZpZXdUeXBlKCksXG5cdFx0XHRcdGFjdGl2ZTogdHJ1ZSxcblx0XHRcdFx0c3RhdGU6IHsgdmlld1RpdGxlOiBuZXdUaXRsZSB9IC8vIFNldCBpbml0aWFsIHRpdGxlIGZvciB0aGUgbmV3IHZpZXdcblx0XHRcdH0pO1xuXHRcdFx0dGhpcy5hcHAud29ya3NwYWNlLnNldEFjdGl2ZUxlYWYobmV3TGVhZik7IC8vIFNldCB0aGlzIGxlYWYgYXMgYWN0aXZlXG5cdFx0fVxuXHR9XG5cdFxuXHRhc3luYyBvbk5vZGVDbGljayhldmVudDogYW55LCBkOiBhbnkpIHtcblxuXHRcdC8vIERvbid0IG5lZWQgdG8gdG91Y2ggY2VudHJhbCBzaW5jZSB3ZSdyZSBpbiBpdFxuXHRcdGlmKGQuaWQgPT09IHRoaXMuY2VudHJhbE5vZGUuaWQpIHJldHVybjtcblxuXHRcdFxuXHRcdFxuXHRcdGlmIChkPy50eXBlID09PSAnd2lraScpXG5cdFx0XHRhd2FpdCB0aGlzLm9wZW5TZWFyY2goZCk7XG5cdFx0ZWxzZVxuXHRcdFx0dGhpcy5lbnYucGx1Z2luLm9wZW5fbm90ZShkLmlkLCBldmVudClcblx0XHRcblx0XHRhd2FpdCB0aGlzLnVwZGF0ZVZpc3VhbGl6YXRpb24odGhpcy5yZWxldmFuY2VTY29yZVRocmVzaG9sZCwgZD8ubmFtZSk7XG5cblx0XHQvLyBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHQvLyBUT0RPOjogQnJpbmcgYmFjayB3aGVuIHJlYWR5IGZvciBzZWxlY3Rpb25cblxuXHRcdC8vIGlmICghdGhpcy5pc0FsdFByZXNzZWQpIHRoaXMuY2xlYXJTZWxlY3Rpb25zKCk7XG5cdFx0Ly8gZC5zZWxlY3RlZCA9ICFkLnNlbGVjdGVkO1xuXHRcdC8vIGlmICghZC5zZWxlY3RlZCkge1xuXHRcdC8vIFx0ZC5oaWdobGlnaHRlZCA9IGZhbHNlO1xuXHRcdC8vIH1cblx0XHQvLyB0aGlzLnVwZGF0ZU5vZGVBcHBlYXJhbmNlKCk7XG5cdH1cdFxuXG5cdG9uTm9kZU1vdXNlT3ZlcihldmVudDogYW55LCBkOiBhbnkpIHtcblxuXHRcdC8vIERvbnQgdHJpZ2dlciBwb3NzaWJsZSBoaWdobGlnaHRzIGlmIHVzZXIgZHJhZ2dpbmcgYXJvdW5kIG5vZGVzIHF1aWNrbHkgZm9yIGZ1blxuXHRcdGlmKHRoaXMuZHJhZ2dpbmcpIHJldHVybjtcblx0XHRcdFx0XHRcblx0XHQvLyBEb24ndCBhcHBseSBob3ZlciBhZmZlY3QgdG8gY2VudGVyIG5vZGVcblx0XHRpZihkLmlkID09PSB0aGlzLmNlbnRyYWxOb2RlLmlkKSByZXR1cm47XG5cblx0XHQvLyBIb3ZlcmluZyBzdGF0ZSBhY3RpdmVcblx0XHR0aGlzLmlzSG92ZXJpbmcgPSB0cnVlO1xuXG5cdFx0Ly8gSGlnaGxpZ2h0IG5vZGVcblx0XHR0aGlzLmhpZ2hsaWdodE5vZGUoZCk7XG5cblx0XHQvLyBTaG93IGxpbmsgbGFiZWxzIGFzc29jaWF0ZWQgd2l0aCB0aGUgbm9kZVxuXHRcdHRoaXMudXBkYXRlTGlua0xhYmVsQXBwZWFyYW5jZShkKTtcblxuXHRcdC8vIFRPRE86OiBDb21tZW50IGJhY2sgd2hlbiByZWFkeSB0byBpbXBsZW1lbnQgTGFiZWwgTW92ZW1lbnQgYW5pbWF0aW9uIG9uIGhvdmVyXG5cdFx0Ly8gY29uc29sZS5sb2coYEhvdmVyaW5nIG92ZXIgbm9kZTogJHtkLmlkfSwgb3JpZ2luYWwgeTogJHtkLnl9YCk7XG5cdFx0Ly8gdGhpcy5zdmdHcm91cC5zZWxlY3QoYHRleHRbZGF0YS1pZD0nJHtkLmlkfSddYCkudHJhbnNpdGlvbigpLmR1cmF0aW9uKDQwMDApLmF0dHIoJ3knLCBkLnkgKyA4KTsgLy8gQW5pbWF0ZSBsYWJlbCBkb3duIDEwIHBpeGVsc1xuXHRcblx0XHR0aGlzLmFwcC53b3Jrc3BhY2UudHJpZ2dlcihcImhvdmVyLWxpbmtcIiwge1xuXHRcdFx0ZXZlbnQsXG5cdFx0XHRzb3VyY2U6ICdEMycsXG5cdFx0XHRob3ZlclBhcmVudDogZXZlbnQuY3VycmVudFRhcmdldC5wYXJlbnRFbGVtZW50LFxuXHRcdFx0dGFyZ2V0RWw6IGV2ZW50LmN1cnJlbnRUYXJnZXQsXG5cdFx0XHRsaW5rdGV4dDogZC5pZCxcblx0XHR9KTtcblx0fVxuXHRcblx0b25Ob2RlTW91c2VPdXQoZXZlbnQ6IGFueSwgZDogYW55KSB7XG5cdFx0aWYgKHRoaXMuZHJhZ2dpbmcpIHJldHVybjtcblxuXHRcdHRoaXMuaXNIb3ZlcmluZyA9IGZhbHNlO1xuXHRcdHRoaXMuY2VudGVySGlnaGxpZ2h0ZWQgPSBmYWxzZTtcblx0XHR0aGlzLnVuaGlnaGxpZ2h0Tm9kZShkKTtcblxuXHRcdC8vIEhpZGUgbGluayBsYWJlbHMgYXNzb2NpYXRlZCB3aXRoIHRoZSBub2RlXG5cdFx0dGhpcy51cGRhdGVMaW5rTGFiZWxBcHBlYXJhbmNlKHsgaWQ6IG51bGwgfSk7XG5cdFxuXHRcdC8vIFRPRE86OiBDb21tZW50IGJhY2sgd2hlbiByZWFkeSB0byBpbXBsZW1lbnQgTGFiZWwgTU92ZW1lbnQgYW5pbWF0aW9uIG9uIGhvdmVyXG5cdFx0Ly8gY29uc29sZS5sb2coYE1vdXNlIG91dCBmcm9tIG5vZGU6ICR7ZC5pZH0sIHJldHVybmluZyBsYWJlbCB0byB5OiAke2QueX1gKTtcblx0XHQvLyB0aGlzLnN2Z0dyb3VwLnNlbGVjdChgdGV4dFtkYXRhLWlkPScke2QuaWR9J11gKS50cmFuc2l0aW9uKCkuZHVyYXRpb24oNDAwKS5hdHRyKCd5JywgZC55KTsgLy8gQW5pbWF0ZSBsYWJlbCBiYWNrIHRvIG9yaWdpbmFsIHBvc2l0aW9uXG5cdH1cblx0XG5cdHVwZGF0ZUxpbmtMYWJlbFBvc2l0aW9ucygpIHtcblx0XHR0aGlzLmxpbmtMYWJlbFNlbGVjdGlvblxuXHRcdFx0LmF0dHIoJ3gnLCAoZDogYW55KSA9PiAoZC5zb3VyY2UueCArIGQudGFyZ2V0LngpIC8gMilcblx0XHRcdC5hdHRyKCd5JywgKGQ6IGFueSkgPT4gKGQuc291cmNlLnkgKyBkLnRhcmdldC55KSAvIDIpO1xuXHR9XG5cdHVwZGF0ZUxpbmtTZWxlY3Rpb24oc3ZnR3JvdXA6IGFueSkge1xuXHRcdHJldHVybiBzdmdHcm91cC5zZWxlY3QoJ2cubGlua3MnKS5zZWxlY3RBbGwoJ2xpbmUnKVxuXHRcdFx0LmRhdGEodGhpcy52YWxpZGF0ZWRMaW5rcywgKGQ6IGFueSkgPT4gYCR7ZC5zb3VyY2V9LSR7ZC50YXJnZXR9YClcblx0XHRcdC5zdHlsZSgnY3Vyc29yJywgJ3BvaW50ZXInKVxuXHRcdFx0LmpvaW4oXG5cdFx0XHRcdChlbnRlcjogYW55KSA9PiB0aGlzLmVudGVyTGluayhlbnRlciksXG5cdFx0XHRcdCh1cGRhdGU6IGFueSkgPT4gdGhpcy51cGRhdGVMaW5rKHVwZGF0ZSksXG5cdFx0XHRcdChleGl0OiB7IHJlbW92ZTogKCkgPT4gYW55OyB9KSA9PiBleGl0LnJlbW92ZSgpXG5cdFx0XHQpO1xuXHR9XG5cblx0ZW50ZXJMaW5rKGVudGVyOiBhbnkpIHtcblx0XHRyZXR1cm4gZW50ZXIuYXBwZW5kKCdsaW5lJylcblx0XHRcdC5hdHRyKCdjbGFzcycsICdzbWFydC1jb25uZWN0aW9ucy12aXN1YWxpemVyLWxpbmsnKVxuXHRcdFx0LmF0dHIoJ3N0cm9rZScsICcjNGM3Nzg3Jylcblx0XHRcdC5hdHRyKCdzdHJva2Utd2lkdGgnLCAoZDogYW55KSA9PiB0aGlzLmdldExpbmtTdHJva2VXaWR0aChkKSlcblx0XHRcdC5hdHRyKCdzdHJva2Utb3BhY2l0eScsIDEpXG5cdFx0XHQuYXR0cignb3BhY2l0eScsIDEpO1xuXHR9XG5cblx0dXBkYXRlTGluayh1cGRhdGU6IGFueSkge1xuXHRcdHJldHVybiB1cGRhdGUuYXR0cignc3Ryb2tlJywgJyM0Yzc3ODcnKVxuXHRcdFx0LmF0dHIoJ3N0cm9rZS13aWR0aCcsIChkOiBhbnkpID0+IHRoaXMuZ2V0TGlua1N0cm9rZVdpZHRoKGQpKTtcblx0fVxuXG5cdGdldExpbmtTdHJva2VXaWR0aChkOiBhbnkpIHtcblx0XHRyZXR1cm4gZDMuc2NhbGVMaW5lYXIoKVxuXHRcdFx0LmRvbWFpbihbdGhpcy5taW5TY29yZSwgdGhpcy5tYXhTY29yZV0pXG5cdFx0XHQucmFuZ2UoW3RoaXMubWluTGlua1RoaWNrbmVzcywgdGhpcy5tYXhMaW5rVGhpY2tuZXNzXSkoZC5zY29yZSk7XG5cdH1cblxuXHR1cGRhdGVMaW5rTGFiZWxTZWxlY3Rpb24oc3ZnR3JvdXA6IGFueSkge1xuXHRcdHJldHVybiBzdmdHcm91cC5hcHBlbmQoJ2cnKVxuXHRcdFx0LmF0dHIoJ2NsYXNzJywgJ3NtYXJ0LWNvbm5lY3Rpb25zLXZpc3VhbGl6ZXItbGluay1sYWJlbHMnKVxuXHRcdFx0LnNlbGVjdEFsbCgndGV4dCcpXG5cdFx0XHQuZGF0YSh0aGlzLnZhbGlkYXRlZExpbmtzLCAoZDogYW55KSA9PiBgJHtkLnNvdXJjZS5pZH0tJHtkLnRhcmdldC5pZH1gKVxuXHRcdFx0LmpvaW4oXG5cdFx0XHRcdChlbnRlcjogYW55KSA9PiB0aGlzLmVudGVyTGlua0xhYmVsKGVudGVyKSxcblx0XHRcdFx0KHVwZGF0ZTogYW55KSA9PiB0aGlzLnVwZGF0ZUxpbmtMYWJlbCh1cGRhdGUpLFxuXHRcdFx0XHQoZXhpdDogeyByZW1vdmU6ICgpID0+IGFueTsgfSkgPT4gZXhpdC5yZW1vdmUoKVxuXHRcdFx0KTtcblx0fVxuXG5cdGVudGVyTGlua0xhYmVsKGVudGVyOiBhbnkpIHtcblx0XHRyZXR1cm4gZW50ZXIuYXBwZW5kKCd0ZXh0Jylcblx0XHRcdC5hdHRyKCdjbGFzcycsICdzbWFydC1jb25uZWN0aW9ucy12aXN1YWxpemVyLWxpbmstbGFiZWwnKVxuXHRcdFx0LmF0dHIoJ2ZvbnQtc2l6ZScsIHRoaXMubGlua0xhYmVsU2l6ZSlcblx0XHRcdC5hdHRyKCdmaWxsJywgJyNiYmInKVxuXHRcdFx0LmF0dHIoJ29wYWNpdHknLCAwKVxuXHRcdFx0LmF0dHIoJ3gnLCAoZDogYW55KSA9PiBkLngpIC8vIEluaXRpYWxpemUgeCBwb3NpdGlvblxuXHRcdFx0LmF0dHIoJ3knLCAoZDogYW55KSA9PiBkLnkpIC8vIEluaXRpYWxpemUgeSBwb3NpdGlvblxuXG5cdFx0XHQudGV4dCgoZDogYW55KSA9PiAoZC5zY29yZSAqIDEwMCkudG9GaXhlZCgxKSArICclJyk7XG5cdH1cblxuXHR1cGRhdGVMaW5rTGFiZWwodXBkYXRlOiBhbnkpIHtcblx0XHRcblx0XHRyZXR1cm4gdXBkYXRlLnRleHQoKGQ6IGFueSkgPT4gKGQuc2NvcmUgKiAxMDApLnRvRml4ZWQoMSkpXG5cdFx0LmF0dHIoJ3gnLCAoZDogYW55KSA9PiBkLngpIC8vIEluaXRpYWxpemUgeCBwb3NpdGlvblxuXHRcdC5hdHRyKCd5JywgKGQ6IGFueSkgPT4gZC55KSAvLyBJbml0aWFsaXplIHkgcG9zaXRpb25cblxuXHR9XG5cblx0ZW50ZXJMYWJlbChlbnRlcjogYW55KSB7XG5cdFx0cmV0dXJuIGVudGVyLmFwcGVuZCgndGV4dCcpXG5cdFx0XHQuYXR0cignY2xhc3MnLCAnc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1sYWJlbCcpXG5cdFx0XHQuYXR0cignZHgnLCAwKVxuXHRcdFx0LmF0dHIoJ2ZvbnQtc2l6ZScsIHRoaXMubm9kZUxhYmVsU2l6ZSlcblx0XHRcdC5hdHRyKCdkeScsIDEyKVxuXHRcdFx0LmF0dHIoJ3RleHQtYW5jaG9yJywgJ21pZGRsZScpXG5cdFx0XHQuYXR0cignZmlsbCcsICcjYmJiJylcblx0XHRcdC5hdHRyKCdkYXRhLWlkJywgKGQ6IGFueSkgPT4gZC5pZClcblx0XHRcdC5hdHRyKCdvcGFjaXR5JywgMSlcblx0XHRcdC5hdHRyKCd4JywgKGQ6IGFueSkgPT4gZC54KSAvLyBJbml0aWFsaXplIHggcG9zaXRpb25cblx0XHRcdC5hdHRyKCd5JywgKGQ6IGFueSkgPT4gZC55KSAvLyBJbml0aWFsaXplIHkgcG9zaXRpb25cblx0XHRcdC50ZXh0KChkOiBhbnkpID0+IHRoaXMuZm9ybWF0TGFiZWwoZC5uYW1lKSk7XG5cdH1cblx0XG5cdFxuXHR1cGRhdGVMYWJlbCh1cGRhdGU6IGFueSkge1xuXHRcdHJldHVybiB1cGRhdGUuYXR0cignZHgnLCAwKVxuXHRcdFx0LmF0dHIoJ2RhdGEtaWQnLCAoZDogYW55KSA9PiBkLmlkKVxuXHRcdFx0LmF0dHIoJ3RleHQtYW5jaG9yJywgJ21pZGRsZScpXG5cdFx0XHQudGV4dCgoZDogYW55KSA9PiBkLmlkID09PSB0aGlzLmhpZ2hsaWdodGVkTm9kZUlkID8gdGhpcy5mb3JtYXRMYWJlbChkLm5hbWUsIGZhbHNlKSA6IHRoaXMuZm9ybWF0TGFiZWwoZC5uYW1lLCB0cnVlKSlcblx0XHRcdC5hdHRyKCdmaWxsJywgJyNiYmInKVxuXHRcdFx0LmF0dHIoJ2ZvbnQtc2l6ZScsIHRoaXMubm9kZUxhYmVsU2l6ZSlcblx0XHRcdC5hdHRyKCd4JywgKGQ6IGFueSkgPT4gZC54KSAvLyBVcGRhdGUgeCBwb3NpdGlvblxuXHRcdFx0LmF0dHIoJ3knLCAoZDogYW55KSA9PiBkLnkpIC8vIFVwZGF0ZSB5IHBvc2l0aW9uIHdpdGggb2Zmc2V0IGZvciBoaWdobGlnaHRcblx0XHRcdC5hdHRyKCdvcGFjaXR5JywgMSk7XG5cdH1cblx0XG5cblx0dXBkYXRlTm9kZVNpemVzKCkge1xuXHRcdHRoaXMubm9kZVNlbGVjdGlvbi5hdHRyKCdyJywgKGQ6IGFueSkgPT4gZC5pZCA9PT0gdGhpcy5jZW50cmFsTm9kZS5pZCA/IHRoaXMubm9kZVNpemUgKyAzIDogdGhpcy5ub2RlU2l6ZSk7XG5cdH1cblxuXHR1cGRhdGVMaW5rVGhpY2tuZXNzKCkge1xuXHRcdGNvbnN0IGxpbmtTdHJva2VTY2FsZSA9IGQzLnNjYWxlTGluZWFyKClcblx0XHRcdC5kb21haW4oW3RoaXMubWluU2NvcmUsIHRoaXMubWF4U2NvcmVdKVxuXHRcdFx0LnJhbmdlKFt0aGlzLm1pbkxpbmtUaGlja25lc3MsIHRoaXMubWF4TGlua1RoaWNrbmVzc10pO1xuXHRcdHRoaXMubGlua1NlbGVjdGlvbi5hdHRyKCdzdHJva2Utd2lkdGgnLCAoZDogYW55KSA9PiBsaW5rU3Ryb2tlU2NhbGUoZC5zY29yZSkpO1xuXHR9XG5cblx0dXBkYXRlU2ltdWxhdGlvbkZvcmNlcygpIHtcblx0XHRpZiAoIXRoaXMuc2ltdWxhdGlvbikge1xuXHRcdFx0Y29uc29sZS5lcnJvcignU2ltdWxhdGlvbiBub3QgaW5pdGlhbGl6ZWQnKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0dGhpcy5zaW11bGF0aW9uXG5cdFx0XHQvLyAuZm9yY2UoJ2NlbnRlcicsIGQzLmZvcmNlQ2VudGVyKHdpZHRoIC8gMiwgaGVpZ2h0IC8gMikuc3RyZW5ndGgodGhpcy5jZW50ZXJGb3JjZSkpXG5cdFx0XHQuZm9yY2UoJ2NoYXJnZScsIGQzLmZvcmNlTWFueUJvZHkoKS5zdHJlbmd0aCgtdGhpcy5yZXBlbEZvcmNlKSlcblx0XHRcdC5mb3JjZSgnbGluaycsIGQzLmZvcmNlTGluayh0aGlzLnZhbGlkYXRlZExpbmtzKVxuXHRcdFx0XHQuaWQoKGQ6IGFueSkgPT4gZC5pZClcblx0XHRcdFx0LmRpc3RhbmNlKChkOiBhbnkpID0+IHRoaXMubGlua0Rpc3RhbmNlU2NhbGUoZC5zY29yZSkpXG5cdFx0XHRcdC5zdHJlbmd0aCh0aGlzLmxpbmtGb3JjZSkpXHRcdFxuXHRcdFx0Ly8gLmZvcmNlKCdjb2xsaWRlJywgZDMuZm9yY2VDb2xsaWRlKCkucmFkaXVzKHRoaXMubm9kZVNpemUgKyAzKS5zdHJlbmd0aCgwLjcpKTtcblxuICAgIFx0dGhpcy5zaW11bGF0aW9uLmFscGhhVGFyZ2V0KDAuMykucmVzdGFydCgpO1xuXHRcdFxuXHRcdC8vIFN0b3AgdGhlIHNpbXVsYXRpb24gYWZ0ZXIgYSBzaG9ydCBkZWxheVxuXHRcdHNldFRpbWVvdXQoKCkgPT4ge1xuXHRcdFx0dGhpcy5zaW11bGF0aW9uLmFscGhhVGFyZ2V0KDApO1xuXHRcdH0sIDEwMDApOyAvLyBBZGp1c3QgdGhlIGRlbGF5IGFzIG5lZWRlZFxuXHR9XG5cblx0bm9ybWFsaXplU2NvcmUoc2NvcmU6IG51bWJlcikgOiBudW1iZXJ7XG5cdFx0Ly8gV2hlbiBvbmx5IG9uZSBsaW5rLCBjYW4ndCByZXR1biAwXG5cdFx0aWYgKHRoaXMubWluU2NvcmUgPT09IHRoaXMubWF4U2NvcmUpIHtcblx0XHRcdHJldHVybiAwLjU7IC8vIG9yIGFueSBvdGhlciB2YWx1ZSBpbiB0aGUgcmFuZ2UgWzAsIDFdXG5cdFx0fVxuICAgICAgICByZXR1cm4gKHNjb3JlIC0gdGhpcy5taW5TY29yZSkgLyAodGhpcy5tYXhTY29yZSAtIHRoaXMubWluU2NvcmUpO1xuICAgIH1cblxuXHRsaW5rRGlzdGFuY2VTY2FsZShzY29yZTogbnVtYmVyKSB7XG4gICAgICAgIHJldHVybiBkMy5zY2FsZUxpbmVhcigpXG4gICAgICAgICAgICAuZG9tYWluKFswLCAxXSlcbiAgICAgICAgICAgIC5yYW5nZShbdGhpcy5saW5rRGlzdGFuY2UgKiAyLCB0aGlzLmxpbmtEaXN0YW5jZSAvIDJdKSh0aGlzLm5vcm1hbGl6ZVNjb3JlKHNjb3JlKSk7XG4gICAgfVxuXHRcblxuXHR1cGRhdGVMYWJlbE9wYWNpdHkoem9vbUxldmVsOiBudW1iZXIpIHtcblx0XHRjb25zdCBtYXhPcGFjaXR5ID0gMTtcblx0XHRjb25zdCBtaW5PcGFjaXR5ID0gMDtcblx0XHRjb25zdCBtaW5ab29tID0gMC4xO1xuXHRcdGNvbnN0IG1heFpvb20gPSB0aGlzLnRleHRGYWRlVGhyZXNob2xkOyAvLyBVc2UgdGhlIHRocmVzaG9sZCB2YWx1ZSBmcm9tIHRoZSBzbGlkZXJcblx0XG5cdFx0bGV0IG5ld09wYWNpdHkgPSAoem9vbUxldmVsIC0gbWluWm9vbSkgLyAobWF4Wm9vbSAtIG1pblpvb20pO1xuXHRcdGlmICh6b29tTGV2ZWwgPD0gbWluWm9vbSkgbmV3T3BhY2l0eSA9IG1pbk9wYWNpdHk7XG5cdFx0aWYgKHpvb21MZXZlbCA+PSBtYXhab29tKSBuZXdPcGFjaXR5ID0gbWF4T3BhY2l0eTtcblx0XG5cdFx0bmV3T3BhY2l0eSA9IE1hdGgubWF4KG1pbk9wYWNpdHksIE1hdGgubWluKG1heE9wYWNpdHksIG5ld09wYWNpdHkpKTtcblx0XHRcblx0XHQvLyBVcGRhdGUgbm9kZSBsYWJlbHMgb3BhY2l0eSBiYXNlZCBvbiB6b29tIGxldmVsXG5cdFx0aWYodGhpcy5sYWJlbFNlbGVjdGlvbikge1xuXHRcdFx0dGhpcy5sYWJlbFNlbGVjdGlvbi50cmFuc2l0aW9uKCkuZHVyYXRpb24oMzAwKS5hdHRyKCdvcGFjaXR5JywgbmV3T3BhY2l0eSk7XG5cdFx0fVxuXHR9XHRcblx0XG5cblx0dXBkYXRlTm9kZUxhYmVscygpIHtcblx0XHR0aGlzLmxhYmVsU2VsZWN0aW9uLmF0dHIoJ2ZvbnQtc2l6ZScsIHRoaXMubm9kZUxhYmVsU2l6ZSlcblx0XHRcdC50ZXh0KChkOiBhbnkpID0+IHRoaXMuZm9ybWF0TGFiZWwoZC5uYW1lLCB0cnVlKSk7XG5cdH1cblxuXHR1cGRhdGVMaW5rTGFiZWxTaXplcygpIHtcblxuXHRcdGlmICh0aGlzLmxpbmtMYWJlbFNlbGVjdGlvbikge1xuXHRcdFx0dGhpcy5saW5rTGFiZWxTZWxlY3Rpb24uYXR0cignZm9udC1zaXplJywgdGhpcy5saW5rTGFiZWxTaXplKTtcblx0XHR9XG5cdH1cblxuXHR1cGRhdGVOb2RlTGFiZWxTaXplcygpIHtcblx0XHR0aGlzLmxhYmVsU2VsZWN0aW9uLmF0dHIoJ2ZvbnQtc2l6ZScsIHRoaXMubm9kZUxhYmVsU2l6ZSk7XG5cdH1cblxuXHR1cGRhdGVOb2RlTGFiZWxPcGFjaXR5KHpvb21MZXZlbDogbnVtYmVyKSB7XG5cdFx0Y29uc3QgbWF4T3BhY2l0eSA9IDE7XG5cdFx0Y29uc3QgbWluT3BhY2l0eSA9IDA7XG5cdFx0Y29uc3QgbWluWm9vbSA9IDAuMTtcblx0XHRjb25zdCBtYXhab29tID0gdGhpcy50ZXh0RmFkZVRocmVzaG9sZDsgLy8gVXNlIHRoZSB0aHJlc2hvbGQgdmFsdWUgZnJvbSB0aGUgc2xpZGVyXG5cdFxuXHRcdGxldCBuZXdPcGFjaXR5ID0gKHpvb21MZXZlbCAtIG1pblpvb20pIC8gKG1heFpvb20gLSBtaW5ab29tKTtcblx0XHRpZiAoem9vbUxldmVsIDw9IG1pblpvb20pIG5ld09wYWNpdHkgPSBtaW5PcGFjaXR5O1xuXHRcdGlmICh6b29tTGV2ZWwgPj0gbWF4Wm9vbSkgbmV3T3BhY2l0eSA9IG1heE9wYWNpdHk7XG5cdFxuXHRcdG5ld09wYWNpdHkgPSBNYXRoLm1heChtaW5PcGFjaXR5LCBNYXRoLm1pbihtYXhPcGFjaXR5LCBuZXdPcGFjaXR5KSk7XG5cdFx0XG5cdFx0dGhpcy5sYWJlbFNlbGVjdGlvbi50cmFuc2l0aW9uKCkuZHVyYXRpb24oMzAwKS5hdHRyKCdvcGFjaXR5JywgbmV3T3BhY2l0eSk7XG5cdH1cblxuXHRzdGFydEJveFNlbGVjdGlvbihldmVudDogYW55KSB7XG5cdFx0aWYgKCF0aGlzLmlzQ3RybFByZXNzZWQpIHJldHVybjtcblx0XHR0aGlzLmlzRHJhZ2dpbmcgPSB0cnVlO1xuXHRcdGNvbnN0IFt4LCB5XSA9IGQzLnBvaW50ZXIoZXZlbnQpO1xuXHRcdHRoaXMuc2VsZWN0aW9uQm94ID0gZDMuc2VsZWN0KCdzdmcnKS5hcHBlbmQoJ3JlY3QnKVxuXHRcdFx0LmF0dHIoJ2NsYXNzJywgJ3NtYXJ0LWNvbm5lY3Rpb25zLXZpc3VhbGl6ZXItc2VsZWN0aW9uLWJveCcpXG5cdFx0XHQuYXR0cigneCcsIHgpXG5cdFx0XHQuYXR0cigneScsIHkpXG5cdFx0XHQuYXR0cignd2lkdGgnLCAwKVxuXHRcdFx0LmF0dHIoJ2hlaWdodCcsIDApXG5cdFx0XHQuYXR0cignc3Ryb2tlJywgJyMwMGYnKVxuXHRcdFx0LmF0dHIoJ3N0cm9rZS13aWR0aCcsIDEpXG5cdFx0XHQuYXR0cignZmlsbCcsICdyZ2JhKDAsIDAsIDI1NSwgMC4zKScpO1xuXHRcdHRoaXMuc3RhcnRYID0geDtcblx0XHR0aGlzLnN0YXJ0WSA9IHk7XG5cdH1cblxuXHR1cGRhdGVCb3hTZWxlY3Rpb24oZXZlbnQ6IGFueSkge1xuXHRcdGlmICghdGhpcy5pc0RyYWdnaW5nKSByZXR1cm47XG5cdFx0Y29uc3QgW3gsIHldID0gZDMucG9pbnRlcihldmVudCk7XG5cdFx0Y29uc3QgbmV3V2lkdGggPSB4IC0gdGhpcy5zdGFydFg7XG5cdFx0Y29uc3QgbmV3SGVpZ2h0ID0geSAtIHRoaXMuc3RhcnRZO1xuXHRcdHRoaXMuc2VsZWN0aW9uQm94XG5cdFx0XHQuYXR0cignd2lkdGgnLCBNYXRoLmFicyhuZXdXaWR0aCkpXG5cdFx0XHQuYXR0cignaGVpZ2h0JywgTWF0aC5hYnMobmV3SGVpZ2h0KSlcblx0XHRcdC5hdHRyKCd4JywgTWF0aC5taW4oeCwgdGhpcy5zdGFydFgpKVxuXHRcdFx0LmF0dHIoJ3knLCBNYXRoLm1pbih5LCB0aGlzLnN0YXJ0WSkpO1xuXHRcdHRoaXMudXBkYXRlTm9kZVNlbGVjdGlvbkluQm94KG5ld1dpZHRoLCBuZXdIZWlnaHQpO1xuXHRcdHRoaXMudXBkYXRlTm9kZUFwcGVhcmFuY2UoKTtcblx0fVxuXG5cdHVwZGF0ZU5vZGVTZWxlY3Rpb25JbkJveChuZXdXaWR0aDogbnVtYmVyLCBuZXdIZWlnaHQ6IG51bWJlcikge1xuXHRcdGNvbnN0IGVuZFggPSB0aGlzLnN0YXJ0WCArIG5ld1dpZHRoO1xuXHRcdGNvbnN0IGVuZFkgPSB0aGlzLnN0YXJ0WSArIG5ld0hlaWdodDtcblx0XHRjb25zdCB0cmFuc2Zvcm1lZFN0YXJ0WCA9IE1hdGgubWluKHRoaXMuc3RhcnRYLCBlbmRYKTtcblx0XHRjb25zdCB0cmFuc2Zvcm1lZFN0YXJ0WSA9IE1hdGgubWluKHRoaXMuc3RhcnRZLCBlbmRZKTtcblx0XHRjb25zdCB0cmFuc2Zvcm1lZEVuZFggPSBNYXRoLm1heCh0aGlzLnN0YXJ0WCwgZW5kWCk7XG5cdFx0Y29uc3QgdHJhbnNmb3JtZWRFbmRZID0gTWF0aC5tYXgodGhpcy5zdGFydFksIGVuZFkpO1xuXHRcdGNvbnN0IHRyYW5zZm9ybSA9IGQzLnpvb21UcmFuc2Zvcm0oZDMuc2VsZWN0KCdzdmcnKS5ub2RlKCkgYXMgRWxlbWVudCk7XG5cdFx0Y29uc3Qgem9vbWVkU3RhcnRYID0gKHRyYW5zZm9ybWVkU3RhcnRYIC0gdHJhbnNmb3JtLngpIC8gdHJhbnNmb3JtLms7XG5cdFx0Y29uc3Qgem9vbWVkU3RhcnRZID0gKHRyYW5zZm9ybWVkU3RhcnRZIC0gdHJhbnNmb3JtLnkpIC8gdHJhbnNmb3JtLms7XG5cdFx0Y29uc3Qgem9vbWVkRW5kWCA9ICh0cmFuc2Zvcm1lZEVuZFggLSB0cmFuc2Zvcm0ueCkgLyB0cmFuc2Zvcm0uaztcblx0XHRjb25zdCB6b29tZWRFbmRZID0gKHRyYW5zZm9ybWVkRW5kWSAtIHRyYW5zZm9ybS55KSAvIHRyYW5zZm9ybS5rO1xuXHRcdHRoaXMubm9kZVNlbGVjdGlvbi5lYWNoKChkOiBhbnkpID0+IHtcblx0XHRcdGNvbnN0IG5vZGVYID0gZC54O1xuXHRcdFx0Y29uc3Qgbm9kZVkgPSBkLnk7XG5cdFx0XHRkLnNlbGVjdGVkID0gbm9kZVggPj0gem9vbWVkU3RhcnRYICYmIG5vZGVYIDw9IHpvb21lZEVuZFggJiYgbm9kZVkgPj0gem9vbWVkU3RhcnRZICYmIG5vZGVZIDw9IHpvb21lZEVuZFk7XG5cdFx0fSk7XG5cdH1cblxuXHRlbmRCb3hTZWxlY3Rpb24oKSB7XG5cdFx0aWYgKCF0aGlzLmlzRHJhZ2dpbmcpIHJldHVybjtcblx0XHR0aGlzLmlzRHJhZ2dpbmcgPSBmYWxzZTtcblx0XHR0aGlzLnNlbGVjdGlvbkJveC5yZW1vdmUoKTtcblx0fVxuXG5cdFxuXG5cdC8vIFRPRE86OiBBZGQgYmFjayBpbiB3aGVuIHJlYWR5IGZvciB0b29sdGlcblx0Ly8gc2hvd1Rvb2x0aXAoZXZlbnQ6IGFueSwgZDogYW55KSB7XG5cdC8vIFx0Y29uc3QgdG9vbHRpcCA9IGQzLnNlbGVjdCgnLnRvb2x0aXAnKTtcblx0Ly8gXHR0b29sdGlwLnRleHQoZC5uYW1lKVxuXHQvLyBcdFx0LnN0eWxlKCd2aXNpYmlsaXR5JywgJ3Zpc2libGUnKTtcblx0Ly8gXHRjb25zdCBbeCwgeV0gPSBkMy5wb2ludGVyKGV2ZW50KTtcblx0Ly8gXHR0b29sdGlwLnN0eWxlKCd0b3AnLCBgJHt5ICsgMTB9cHhgKVxuXHQvLyBcdFx0LnN0eWxlKCdsZWZ0JywgYCR7eCArIDEwfXB4YCk7XG5cdC8vIH1cblxuXHQvLyBoaWRlVG9vbHRpcCgpIHtcblx0Ly8gXHRjb25zdCB0b29sdGlwID0gZDMuc2VsZWN0KCcudG9vbHRpcCcpO1xuXHQvLyBcdHRvb2x0aXAuc3R5bGUoJ3Zpc2liaWxpdHknLCAnaGlkZGVuJyk7XG5cdC8vIH1cblxufVxuXG5cdFxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2NHcmFwaFZpZXcgZXh0ZW5kcyBQbHVnaW4ge1xuXG5cdHNldHRpbmdzOiBQbHVnaW5TZXR0aW5ncztcblxuICAgIGFzeW5jIG9ubG9hZCgpIHtcblxuXHRcdGF3YWl0IHRoaXMubG9hZFNldHRpbmdzKCk7XG5cblx0XHQvLyBSZWdpc3RlciB0aGUgbmV3IHZpZXdcbiAgICAgICAgdGhpcy5yZWdpc3RlclZpZXcoXCJzbWFydC1jb25uZWN0aW9ucy12aXN1YWxpemVyXCIsIChsZWFmOiBXb3Jrc3BhY2VMZWFmKSA9PiBuZXcgU2NHcmFwaEl0ZW1WaWV3KGxlYWYsIHRoaXMpKTtcblxuXHRcdC8vIFJlZ2lzdGVyIGhvdmVyIGxpbmsgc291cmNlXG5cdFx0dGhpcy5yZWdpc3RlckhvdmVyTGlua1NvdXJjZSgnc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplcicsIHtcblx0XHRcdGRpc3BsYXk6ICdTbWFydCBjb25uZWN0aW9ucyB2aXN1YWxpemVyIGhvdmVyIGxpbmsgc291cmNlJyxcblx0XHRcdGRlZmF1bHRNb2Q6IHRydWVcblx0XHR9KTtcblxuICAgICAgICAvLyBUaGlzIGNyZWF0ZXMgYW4gaWNvbiBpbiB0aGUgbGVmdCByaWJib24uXG4gICAgICAgIHRoaXMuYWRkUmliYm9uSWNvbignZ2l0LWZvcmsnLCAnT3BlbiBzbWFydCBjb25uZWN0aW9ucyB2aXN1YWxpemVyJywgKGV2dDogTW91c2VFdmVudCkgPT4ge1xuICAgICAgICAgICBcdC8vIENoZWNrIGlmIHRoZSB2aWV3IGlzIGFscmVhZHkgb3BlblxuXHRcdFx0Y29uc3QgZXhpc3RpbmdMZWFmID0gdGhpcy5hcHAud29ya3NwYWNlLmdldExlYXZlc09mVHlwZShcInNtYXJ0LWNvbm5lY3Rpb25zLXZpc3VhbGl6ZXJcIilbMF07XG5cdFx0XHRpZiAoZXhpc3RpbmdMZWFmKSB7XG5cdFx0XHRcdC8vIElmIGl0IGV4aXN0cywgZm9jdXMgb24gaXRcblx0XHRcdFx0dGhpcy5hcHAud29ya3NwYWNlLnNldEFjdGl2ZUxlYWYoZXhpc3RpbmdMZWFmKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdC8vIENyZWF0ZSBhIG5ldyBsZWFmIGluIHRoZSBjdXJyZW50IHdvcmtzcGFjZVxuXHRcdFx0XHRsZXQgbGVhZiA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRMZWFmKHRydWUpO1xuXHRcdFx0XHQvLyBTZXQgdGhlIG5ldyBsZWFmJ3MgdmlldyB0byB5b3VyIGN1c3RvbSB2aWV3XG5cdFx0XHRcdGxlYWYuc2V0Vmlld1N0YXRlKHtcblx0XHRcdFx0XHR0eXBlOiBcInNtYXJ0LWNvbm5lY3Rpb25zLXZpc3VhbGl6ZXJcIixcblx0XHRcdFx0XHRhY3RpdmU6IHRydWUsXG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuICAgICAgICB9KVxuXHRcdFxuXG4gICAgfVxuXG5cdGFzeW5jIGxvYWRTZXR0aW5ncygpIHtcbiAgICAgICAgdGhpcy5zZXR0aW5ncyA9IE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfTkVUV09SS19TRVRUSU5HUywgYXdhaXQgdGhpcy5sb2FkRGF0YSgpKTtcbiAgICB9XG5cblx0YXN5bmMgc2F2ZVNldHRpbmdzKCkge1xuICAgICAgICBhd2FpdCB0aGlzLnNhdmVEYXRhKHRoaXMuc2V0dGluZ3MpO1xuICAgIH1cblxuICAgIG9udW5sb2FkKCkge1xuXG5cdH1cblxufVxuIiwgImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFzY2VuZGluZyhhLCBiKSB7XG4gIHJldHVybiBhID09IG51bGwgfHwgYiA9PSBudWxsID8gTmFOIDogYSA8IGIgPyAtMSA6IGEgPiBiID8gMSA6IGEgPj0gYiA/IDAgOiBOYU47XG59XG4iLCAiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGVzY2VuZGluZyhhLCBiKSB7XG4gIHJldHVybiBhID09IG51bGwgfHwgYiA9PSBudWxsID8gTmFOXG4gICAgOiBiIDwgYSA/IC0xXG4gICAgOiBiID4gYSA/IDFcbiAgICA6IGIgPj0gYSA/IDBcbiAgICA6IE5hTjtcbn1cbiIsICJpbXBvcnQgYXNjZW5kaW5nIGZyb20gXCIuL2FzY2VuZGluZy5qc1wiO1xuaW1wb3J0IGRlc2NlbmRpbmcgZnJvbSBcIi4vZGVzY2VuZGluZy5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBiaXNlY3RvcihmKSB7XG4gIGxldCBjb21wYXJlMSwgY29tcGFyZTIsIGRlbHRhO1xuXG4gIC8vIElmIGFuIGFjY2Vzc29yIGlzIHNwZWNpZmllZCwgcHJvbW90ZSBpdCB0byBhIGNvbXBhcmF0b3IuIEluIHRoaXMgY2FzZSB3ZVxuICAvLyBjYW4gdGVzdCB3aGV0aGVyIHRoZSBzZWFyY2ggdmFsdWUgaXMgKHNlbGYtKSBjb21wYXJhYmxlLiBXZSBjYW5cdTIwMTl0IGRvIHRoaXNcbiAgLy8gZm9yIGEgY29tcGFyYXRvciAoZXhjZXB0IGZvciBzcGVjaWZpYywga25vd24gY29tcGFyYXRvcnMpIGJlY2F1c2Ugd2UgY2FuXHUyMDE5dFxuICAvLyB0ZWxsIGlmIHRoZSBjb21wYXJhdG9yIGlzIHN5bW1ldHJpYywgYW5kIGFuIGFzeW1tZXRyaWMgY29tcGFyYXRvciBjYW5cdTIwMTl0IGJlXG4gIC8vIHVzZWQgdG8gdGVzdCB3aGV0aGVyIGEgc2luZ2xlIHZhbHVlIGlzIGNvbXBhcmFibGUuXG4gIGlmIChmLmxlbmd0aCAhPT0gMikge1xuICAgIGNvbXBhcmUxID0gYXNjZW5kaW5nO1xuICAgIGNvbXBhcmUyID0gKGQsIHgpID0+IGFzY2VuZGluZyhmKGQpLCB4KTtcbiAgICBkZWx0YSA9IChkLCB4KSA9PiBmKGQpIC0geDtcbiAgfSBlbHNlIHtcbiAgICBjb21wYXJlMSA9IGYgPT09IGFzY2VuZGluZyB8fCBmID09PSBkZXNjZW5kaW5nID8gZiA6IHplcm87XG4gICAgY29tcGFyZTIgPSBmO1xuICAgIGRlbHRhID0gZjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxlZnQoYSwgeCwgbG8gPSAwLCBoaSA9IGEubGVuZ3RoKSB7XG4gICAgaWYgKGxvIDwgaGkpIHtcbiAgICAgIGlmIChjb21wYXJlMSh4LCB4KSAhPT0gMCkgcmV0dXJuIGhpO1xuICAgICAgZG8ge1xuICAgICAgICBjb25zdCBtaWQgPSAobG8gKyBoaSkgPj4+IDE7XG4gICAgICAgIGlmIChjb21wYXJlMihhW21pZF0sIHgpIDwgMCkgbG8gPSBtaWQgKyAxO1xuICAgICAgICBlbHNlIGhpID0gbWlkO1xuICAgICAgfSB3aGlsZSAobG8gPCBoaSk7XG4gICAgfVxuICAgIHJldHVybiBsbztcbiAgfVxuXG4gIGZ1bmN0aW9uIHJpZ2h0KGEsIHgsIGxvID0gMCwgaGkgPSBhLmxlbmd0aCkge1xuICAgIGlmIChsbyA8IGhpKSB7XG4gICAgICBpZiAoY29tcGFyZTEoeCwgeCkgIT09IDApIHJldHVybiBoaTtcbiAgICAgIGRvIHtcbiAgICAgICAgY29uc3QgbWlkID0gKGxvICsgaGkpID4+PiAxO1xuICAgICAgICBpZiAoY29tcGFyZTIoYVttaWRdLCB4KSA8PSAwKSBsbyA9IG1pZCArIDE7XG4gICAgICAgIGVsc2UgaGkgPSBtaWQ7XG4gICAgICB9IHdoaWxlIChsbyA8IGhpKTtcbiAgICB9XG4gICAgcmV0dXJuIGxvO1xuICB9XG5cbiAgZnVuY3Rpb24gY2VudGVyKGEsIHgsIGxvID0gMCwgaGkgPSBhLmxlbmd0aCkge1xuICAgIGNvbnN0IGkgPSBsZWZ0KGEsIHgsIGxvLCBoaSAtIDEpO1xuICAgIHJldHVybiBpID4gbG8gJiYgZGVsdGEoYVtpIC0gMV0sIHgpID4gLWRlbHRhKGFbaV0sIHgpID8gaSAtIDEgOiBpO1xuICB9XG5cbiAgcmV0dXJuIHtsZWZ0LCBjZW50ZXIsIHJpZ2h0fTtcbn1cblxuZnVuY3Rpb24gemVybygpIHtcbiAgcmV0dXJuIDA7XG59XG4iLCAiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbnVtYmVyKHgpIHtcbiAgcmV0dXJuIHggPT09IG51bGwgPyBOYU4gOiAreDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uKiBudW1iZXJzKHZhbHVlcywgdmFsdWVvZikge1xuICBpZiAodmFsdWVvZiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZm9yIChsZXQgdmFsdWUgb2YgdmFsdWVzKSB7XG4gICAgICBpZiAodmFsdWUgIT0gbnVsbCAmJiAodmFsdWUgPSArdmFsdWUpID49IHZhbHVlKSB7XG4gICAgICAgIHlpZWxkIHZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBsZXQgaW5kZXggPSAtMTtcbiAgICBmb3IgKGxldCB2YWx1ZSBvZiB2YWx1ZXMpIHtcbiAgICAgIGlmICgodmFsdWUgPSB2YWx1ZW9mKHZhbHVlLCArK2luZGV4LCB2YWx1ZXMpKSAhPSBudWxsICYmICh2YWx1ZSA9ICt2YWx1ZSkgPj0gdmFsdWUpIHtcbiAgICAgICAgeWllbGQgdmFsdWU7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iLCAiaW1wb3J0IGFzY2VuZGluZyBmcm9tIFwiLi9hc2NlbmRpbmcuanNcIjtcbmltcG9ydCBiaXNlY3RvciBmcm9tIFwiLi9iaXNlY3Rvci5qc1wiO1xuaW1wb3J0IG51bWJlciBmcm9tIFwiLi9udW1iZXIuanNcIjtcblxuY29uc3QgYXNjZW5kaW5nQmlzZWN0ID0gYmlzZWN0b3IoYXNjZW5kaW5nKTtcbmV4cG9ydCBjb25zdCBiaXNlY3RSaWdodCA9IGFzY2VuZGluZ0Jpc2VjdC5yaWdodDtcbmV4cG9ydCBjb25zdCBiaXNlY3RMZWZ0ID0gYXNjZW5kaW5nQmlzZWN0LmxlZnQ7XG5leHBvcnQgY29uc3QgYmlzZWN0Q2VudGVyID0gYmlzZWN0b3IobnVtYmVyKS5jZW50ZXI7XG5leHBvcnQgZGVmYXVsdCBiaXNlY3RSaWdodDtcbiIsICJjb25zdCBlMTAgPSBNYXRoLnNxcnQoNTApLFxuICAgIGU1ID0gTWF0aC5zcXJ0KDEwKSxcbiAgICBlMiA9IE1hdGguc3FydCgyKTtcblxuZnVuY3Rpb24gdGlja1NwZWMoc3RhcnQsIHN0b3AsIGNvdW50KSB7XG4gIGNvbnN0IHN0ZXAgPSAoc3RvcCAtIHN0YXJ0KSAvIE1hdGgubWF4KDAsIGNvdW50KSxcbiAgICAgIHBvd2VyID0gTWF0aC5mbG9vcihNYXRoLmxvZzEwKHN0ZXApKSxcbiAgICAgIGVycm9yID0gc3RlcCAvIE1hdGgucG93KDEwLCBwb3dlciksXG4gICAgICBmYWN0b3IgPSBlcnJvciA+PSBlMTAgPyAxMCA6IGVycm9yID49IGU1ID8gNSA6IGVycm9yID49IGUyID8gMiA6IDE7XG4gIGxldCBpMSwgaTIsIGluYztcbiAgaWYgKHBvd2VyIDwgMCkge1xuICAgIGluYyA9IE1hdGgucG93KDEwLCAtcG93ZXIpIC8gZmFjdG9yO1xuICAgIGkxID0gTWF0aC5yb3VuZChzdGFydCAqIGluYyk7XG4gICAgaTIgPSBNYXRoLnJvdW5kKHN0b3AgKiBpbmMpO1xuICAgIGlmIChpMSAvIGluYyA8IHN0YXJ0KSArK2kxO1xuICAgIGlmIChpMiAvIGluYyA+IHN0b3ApIC0taTI7XG4gICAgaW5jID0gLWluYztcbiAgfSBlbHNlIHtcbiAgICBpbmMgPSBNYXRoLnBvdygxMCwgcG93ZXIpICogZmFjdG9yO1xuICAgIGkxID0gTWF0aC5yb3VuZChzdGFydCAvIGluYyk7XG4gICAgaTIgPSBNYXRoLnJvdW5kKHN0b3AgLyBpbmMpO1xuICAgIGlmIChpMSAqIGluYyA8IHN0YXJ0KSArK2kxO1xuICAgIGlmIChpMiAqIGluYyA+IHN0b3ApIC0taTI7XG4gIH1cbiAgaWYgKGkyIDwgaTEgJiYgMC41IDw9IGNvdW50ICYmIGNvdW50IDwgMikgcmV0dXJuIHRpY2tTcGVjKHN0YXJ0LCBzdG9wLCBjb3VudCAqIDIpO1xuICByZXR1cm4gW2kxLCBpMiwgaW5jXTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdGlja3Moc3RhcnQsIHN0b3AsIGNvdW50KSB7XG4gIHN0b3AgPSArc3RvcCwgc3RhcnQgPSArc3RhcnQsIGNvdW50ID0gK2NvdW50O1xuICBpZiAoIShjb3VudCA+IDApKSByZXR1cm4gW107XG4gIGlmIChzdGFydCA9PT0gc3RvcCkgcmV0dXJuIFtzdGFydF07XG4gIGNvbnN0IHJldmVyc2UgPSBzdG9wIDwgc3RhcnQsIFtpMSwgaTIsIGluY10gPSByZXZlcnNlID8gdGlja1NwZWMoc3RvcCwgc3RhcnQsIGNvdW50KSA6IHRpY2tTcGVjKHN0YXJ0LCBzdG9wLCBjb3VudCk7XG4gIGlmICghKGkyID49IGkxKSkgcmV0dXJuIFtdO1xuICBjb25zdCBuID0gaTIgLSBpMSArIDEsIHRpY2tzID0gbmV3IEFycmF5KG4pO1xuICBpZiAocmV2ZXJzZSkge1xuICAgIGlmIChpbmMgPCAwKSBmb3IgKGxldCBpID0gMDsgaSA8IG47ICsraSkgdGlja3NbaV0gPSAoaTIgLSBpKSAvIC1pbmM7XG4gICAgZWxzZSBmb3IgKGxldCBpID0gMDsgaSA8IG47ICsraSkgdGlja3NbaV0gPSAoaTIgLSBpKSAqIGluYztcbiAgfSBlbHNlIHtcbiAgICBpZiAoaW5jIDwgMCkgZm9yIChsZXQgaSA9IDA7IGkgPCBuOyArK2kpIHRpY2tzW2ldID0gKGkxICsgaSkgLyAtaW5jO1xuICAgIGVsc2UgZm9yIChsZXQgaSA9IDA7IGkgPCBuOyArK2kpIHRpY2tzW2ldID0gKGkxICsgaSkgKiBpbmM7XG4gIH1cbiAgcmV0dXJuIHRpY2tzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGlja0luY3JlbWVudChzdGFydCwgc3RvcCwgY291bnQpIHtcbiAgc3RvcCA9ICtzdG9wLCBzdGFydCA9ICtzdGFydCwgY291bnQgPSArY291bnQ7XG4gIHJldHVybiB0aWNrU3BlYyhzdGFydCwgc3RvcCwgY291bnQpWzJdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGlja1N0ZXAoc3RhcnQsIHN0b3AsIGNvdW50KSB7XG4gIHN0b3AgPSArc3RvcCwgc3RhcnQgPSArc3RhcnQsIGNvdW50ID0gK2NvdW50O1xuICBjb25zdCByZXZlcnNlID0gc3RvcCA8IHN0YXJ0LCBpbmMgPSByZXZlcnNlID8gdGlja0luY3JlbWVudChzdG9wLCBzdGFydCwgY291bnQpIDogdGlja0luY3JlbWVudChzdGFydCwgc3RvcCwgY291bnQpO1xuICByZXR1cm4gKHJldmVyc2UgPyAtMSA6IDEpICogKGluYyA8IDAgPyAxIC8gLWluYyA6IGluYyk7XG59XG4iLCAidmFyIG5vb3AgPSB7dmFsdWU6ICgpID0+IHt9fTtcblxuZnVuY3Rpb24gZGlzcGF0Y2goKSB7XG4gIGZvciAodmFyIGkgPSAwLCBuID0gYXJndW1lbnRzLmxlbmd0aCwgXyA9IHt9LCB0OyBpIDwgbjsgKytpKSB7XG4gICAgaWYgKCEodCA9IGFyZ3VtZW50c1tpXSArIFwiXCIpIHx8ICh0IGluIF8pIHx8IC9bXFxzLl0vLnRlc3QodCkpIHRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgdHlwZTogXCIgKyB0KTtcbiAgICBfW3RdID0gW107XG4gIH1cbiAgcmV0dXJuIG5ldyBEaXNwYXRjaChfKTtcbn1cblxuZnVuY3Rpb24gRGlzcGF0Y2goXykge1xuICB0aGlzLl8gPSBfO1xufVxuXG5mdW5jdGlvbiBwYXJzZVR5cGVuYW1lcyh0eXBlbmFtZXMsIHR5cGVzKSB7XG4gIHJldHVybiB0eXBlbmFtZXMudHJpbSgpLnNwbGl0KC9efFxccysvKS5tYXAoZnVuY3Rpb24odCkge1xuICAgIHZhciBuYW1lID0gXCJcIiwgaSA9IHQuaW5kZXhPZihcIi5cIik7XG4gICAgaWYgKGkgPj0gMCkgbmFtZSA9IHQuc2xpY2UoaSArIDEpLCB0ID0gdC5zbGljZSgwLCBpKTtcbiAgICBpZiAodCAmJiAhdHlwZXMuaGFzT3duUHJvcGVydHkodCkpIHRocm93IG5ldyBFcnJvcihcInVua25vd24gdHlwZTogXCIgKyB0KTtcbiAgICByZXR1cm4ge3R5cGU6IHQsIG5hbWU6IG5hbWV9O1xuICB9KTtcbn1cblxuRGlzcGF0Y2gucHJvdG90eXBlID0gZGlzcGF0Y2gucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogRGlzcGF0Y2gsXG4gIG9uOiBmdW5jdGlvbih0eXBlbmFtZSwgY2FsbGJhY2spIHtcbiAgICB2YXIgXyA9IHRoaXMuXyxcbiAgICAgICAgVCA9IHBhcnNlVHlwZW5hbWVzKHR5cGVuYW1lICsgXCJcIiwgXyksXG4gICAgICAgIHQsXG4gICAgICAgIGkgPSAtMSxcbiAgICAgICAgbiA9IFQubGVuZ3RoO1xuXG4gICAgLy8gSWYgbm8gY2FsbGJhY2sgd2FzIHNwZWNpZmllZCwgcmV0dXJuIHRoZSBjYWxsYmFjayBvZiB0aGUgZ2l2ZW4gdHlwZSBhbmQgbmFtZS5cbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoKHQgPSAodHlwZW5hbWUgPSBUW2ldKS50eXBlKSAmJiAodCA9IGdldChfW3RdLCB0eXBlbmFtZS5uYW1lKSkpIHJldHVybiB0O1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIElmIGEgdHlwZSB3YXMgc3BlY2lmaWVkLCBzZXQgdGhlIGNhbGxiYWNrIGZvciB0aGUgZ2l2ZW4gdHlwZSBhbmQgbmFtZS5cbiAgICAvLyBPdGhlcndpc2UsIGlmIGEgbnVsbCBjYWxsYmFjayB3YXMgc3BlY2lmaWVkLCByZW1vdmUgY2FsbGJhY2tzIG9mIHRoZSBnaXZlbiBuYW1lLlxuICAgIGlmIChjYWxsYmFjayAhPSBudWxsICYmIHR5cGVvZiBjYWxsYmFjayAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGNhbGxiYWNrOiBcIiArIGNhbGxiYWNrKTtcbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgaWYgKHQgPSAodHlwZW5hbWUgPSBUW2ldKS50eXBlKSBfW3RdID0gc2V0KF9bdF0sIHR5cGVuYW1lLm5hbWUsIGNhbGxiYWNrKTtcbiAgICAgIGVsc2UgaWYgKGNhbGxiYWNrID09IG51bGwpIGZvciAodCBpbiBfKSBfW3RdID0gc2V0KF9bdF0sIHR5cGVuYW1lLm5hbWUsIG51bGwpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICBjb3B5OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgY29weSA9IHt9LCBfID0gdGhpcy5fO1xuICAgIGZvciAodmFyIHQgaW4gXykgY29weVt0XSA9IF9bdF0uc2xpY2UoKTtcbiAgICByZXR1cm4gbmV3IERpc3BhdGNoKGNvcHkpO1xuICB9LFxuICBjYWxsOiBmdW5jdGlvbih0eXBlLCB0aGF0KSB7XG4gICAgaWYgKChuID0gYXJndW1lbnRzLmxlbmd0aCAtIDIpID4gMCkgZm9yICh2YXIgYXJncyA9IG5ldyBBcnJheShuKSwgaSA9IDAsIG4sIHQ7IGkgPCBuOyArK2kpIGFyZ3NbaV0gPSBhcmd1bWVudHNbaSArIDJdO1xuICAgIGlmICghdGhpcy5fLmhhc093blByb3BlcnR5KHR5cGUpKSB0aHJvdyBuZXcgRXJyb3IoXCJ1bmtub3duIHR5cGU6IFwiICsgdHlwZSk7XG4gICAgZm9yICh0ID0gdGhpcy5fW3R5cGVdLCBpID0gMCwgbiA9IHQubGVuZ3RoOyBpIDwgbjsgKytpKSB0W2ldLnZhbHVlLmFwcGx5KHRoYXQsIGFyZ3MpO1xuICB9LFxuICBhcHBseTogZnVuY3Rpb24odHlwZSwgdGhhdCwgYXJncykge1xuICAgIGlmICghdGhpcy5fLmhhc093blByb3BlcnR5KHR5cGUpKSB0aHJvdyBuZXcgRXJyb3IoXCJ1bmtub3duIHR5cGU6IFwiICsgdHlwZSk7XG4gICAgZm9yICh2YXIgdCA9IHRoaXMuX1t0eXBlXSwgaSA9IDAsIG4gPSB0Lmxlbmd0aDsgaSA8IG47ICsraSkgdFtpXS52YWx1ZS5hcHBseSh0aGF0LCBhcmdzKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gZ2V0KHR5cGUsIG5hbWUpIHtcbiAgZm9yICh2YXIgaSA9IDAsIG4gPSB0eXBlLmxlbmd0aCwgYzsgaSA8IG47ICsraSkge1xuICAgIGlmICgoYyA9IHR5cGVbaV0pLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgIHJldHVybiBjLnZhbHVlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBzZXQodHlwZSwgbmFtZSwgY2FsbGJhY2spIHtcbiAgZm9yICh2YXIgaSA9IDAsIG4gPSB0eXBlLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgIGlmICh0eXBlW2ldLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgIHR5cGVbaV0gPSBub29wLCB0eXBlID0gdHlwZS5zbGljZSgwLCBpKS5jb25jYXQodHlwZS5zbGljZShpICsgMSkpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIGlmIChjYWxsYmFjayAhPSBudWxsKSB0eXBlLnB1c2goe25hbWU6IG5hbWUsIHZhbHVlOiBjYWxsYmFja30pO1xuICByZXR1cm4gdHlwZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZGlzcGF0Y2g7XG4iLCAiZXhwb3J0IHZhciB4aHRtbCA9IFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHN2ZzogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLFxuICB4aHRtbDogeGh0bWwsXG4gIHhsaW5rOiBcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIixcbiAgeG1sOiBcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwiLFxuICB4bWxuczogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3htbG5zL1wiXG59O1xuIiwgImltcG9ydCBuYW1lc3BhY2VzIGZyb20gXCIuL25hbWVzcGFjZXMuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSkge1xuICB2YXIgcHJlZml4ID0gbmFtZSArPSBcIlwiLCBpID0gcHJlZml4LmluZGV4T2YoXCI6XCIpO1xuICBpZiAoaSA+PSAwICYmIChwcmVmaXggPSBuYW1lLnNsaWNlKDAsIGkpKSAhPT0gXCJ4bWxuc1wiKSBuYW1lID0gbmFtZS5zbGljZShpICsgMSk7XG4gIHJldHVybiBuYW1lc3BhY2VzLmhhc093blByb3BlcnR5KHByZWZpeCkgPyB7c3BhY2U6IG5hbWVzcGFjZXNbcHJlZml4XSwgbG9jYWw6IG5hbWV9IDogbmFtZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbn1cbiIsICJpbXBvcnQgbmFtZXNwYWNlIGZyb20gXCIuL25hbWVzcGFjZS5qc1wiO1xuaW1wb3J0IHt4aHRtbH0gZnJvbSBcIi4vbmFtZXNwYWNlcy5qc1wiO1xuXG5mdW5jdGlvbiBjcmVhdG9ySW5oZXJpdChuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgZG9jdW1lbnQgPSB0aGlzLm93bmVyRG9jdW1lbnQsXG4gICAgICAgIHVyaSA9IHRoaXMubmFtZXNwYWNlVVJJO1xuICAgIHJldHVybiB1cmkgPT09IHhodG1sICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5uYW1lc3BhY2VVUkkgPT09IHhodG1sXG4gICAgICAgID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChuYW1lKVxuICAgICAgICA6IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyh1cmksIG5hbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjcmVhdG9yRml4ZWQoZnVsbG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLm93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUpIHtcbiAgdmFyIGZ1bGxuYW1lID0gbmFtZXNwYWNlKG5hbWUpO1xuICByZXR1cm4gKGZ1bGxuYW1lLmxvY2FsXG4gICAgICA/IGNyZWF0b3JGaXhlZFxuICAgICAgOiBjcmVhdG9ySW5oZXJpdCkoZnVsbG5hbWUpO1xufVxuIiwgImZ1bmN0aW9uIG5vbmUoKSB7fVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3Rvcikge1xuICByZXR1cm4gc2VsZWN0b3IgPT0gbnVsbCA/IG5vbmUgOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcbiAgfTtcbn1cbiIsICJpbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXguanNcIjtcbmltcG9ydCBzZWxlY3RvciBmcm9tIFwiLi4vc2VsZWN0b3IuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0KSB7XG4gIGlmICh0eXBlb2Ygc2VsZWN0ICE9PSBcImZ1bmN0aW9uXCIpIHNlbGVjdCA9IHNlbGVjdG9yKHNlbGVjdCk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gbmV3IEFycmF5KG0pLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBzdWJncm91cCA9IHN1Ymdyb3Vwc1tqXSA9IG5ldyBBcnJheShuKSwgbm9kZSwgc3Vibm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiAoc3Vibm9kZSA9IHNlbGVjdC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSkpIHtcbiAgICAgICAgaWYgKFwiX19kYXRhX19cIiBpbiBub2RlKSBzdWJub2RlLl9fZGF0YV9fID0gbm9kZS5fX2RhdGFfXztcbiAgICAgICAgc3ViZ3JvdXBbaV0gPSBzdWJub2RlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHN1Ymdyb3VwcywgdGhpcy5fcGFyZW50cyk7XG59XG4iLCAiLy8gR2l2ZW4gc29tZXRoaW5nIGFycmF5IGxpa2UgKG9yIG51bGwpLCByZXR1cm5zIHNvbWV0aGluZyB0aGF0IGlzIHN0cmljdGx5IGFuXG4vLyBhcnJheS4gVGhpcyBpcyB1c2VkIHRvIGVuc3VyZSB0aGF0IGFycmF5LWxpa2Ugb2JqZWN0cyBwYXNzZWQgdG8gZDMuc2VsZWN0QWxsXG4vLyBvciBzZWxlY3Rpb24uc2VsZWN0QWxsIGFyZSBjb252ZXJ0ZWQgaW50byBwcm9wZXIgYXJyYXlzIHdoZW4gY3JlYXRpbmcgYVxuLy8gc2VsZWN0aW9uOyB3ZSBkb25cdTIwMTl0IGV2ZXIgd2FudCB0byBjcmVhdGUgYSBzZWxlY3Rpb24gYmFja2VkIGJ5IGEgbGl2ZVxuLy8gSFRNTENvbGxlY3Rpb24gb3IgTm9kZUxpc3QuIEhvd2V2ZXIsIG5vdGUgdGhhdCBzZWxlY3Rpb24uc2VsZWN0QWxsIHdpbGwgdXNlIGFcbi8vIHN0YXRpYyBOb2RlTGlzdCBhcyBhIGdyb3VwLCBzaW5jZSBpdCBzYWZlbHkgZGVyaXZlZCBmcm9tIHF1ZXJ5U2VsZWN0b3JBbGwuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhcnJheSh4KSB7XG4gIHJldHVybiB4ID09IG51bGwgPyBbXSA6IEFycmF5LmlzQXJyYXkoeCkgPyB4IDogQXJyYXkuZnJvbSh4KTtcbn1cbiIsICJmdW5jdGlvbiBlbXB0eSgpIHtcbiAgcmV0dXJuIFtdO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3Rvcikge1xuICByZXR1cm4gc2VsZWN0b3IgPT0gbnVsbCA/IGVtcHR5IDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XG4gIH07XG59XG4iLCAiaW1wb3J0IHtTZWxlY3Rpb259IGZyb20gXCIuL2luZGV4LmpzXCI7XG5pbXBvcnQgYXJyYXkgZnJvbSBcIi4uL2FycmF5LmpzXCI7XG5pbXBvcnQgc2VsZWN0b3JBbGwgZnJvbSBcIi4uL3NlbGVjdG9yQWxsLmpzXCI7XG5cbmZ1bmN0aW9uIGFycmF5QWxsKHNlbGVjdCkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGFycmF5KHNlbGVjdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0KSB7XG4gIGlmICh0eXBlb2Ygc2VsZWN0ID09PSBcImZ1bmN0aW9uXCIpIHNlbGVjdCA9IGFycmF5QWxsKHNlbGVjdCk7XG4gIGVsc2Ugc2VsZWN0ID0gc2VsZWN0b3JBbGwoc2VsZWN0KTtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBzdWJncm91cHMgPSBbXSwgcGFyZW50cyA9IFtdLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICBzdWJncm91cHMucHVzaChzZWxlY3QuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCkpO1xuICAgICAgICBwYXJlbnRzLnB1c2gobm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24oc3ViZ3JvdXBzLCBwYXJlbnRzKTtcbn1cbiIsICJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3Rvcikge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMubWF0Y2hlcyhzZWxlY3Rvcik7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjaGlsZE1hdGNoZXIoc2VsZWN0b3IpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKG5vZGUpIHtcbiAgICByZXR1cm4gbm9kZS5tYXRjaGVzKHNlbGVjdG9yKTtcbiAgfTtcbn1cblxuIiwgImltcG9ydCB7Y2hpbGRNYXRjaGVyfSBmcm9tIFwiLi4vbWF0Y2hlci5qc1wiO1xuXG52YXIgZmluZCA9IEFycmF5LnByb3RvdHlwZS5maW5kO1xuXG5mdW5jdGlvbiBjaGlsZEZpbmQobWF0Y2gpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBmaW5kLmNhbGwodGhpcy5jaGlsZHJlbiwgbWF0Y2gpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjaGlsZEZpcnN0KCkge1xuICByZXR1cm4gdGhpcy5maXJzdEVsZW1lbnRDaGlsZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obWF0Y2gpIHtcbiAgcmV0dXJuIHRoaXMuc2VsZWN0KG1hdGNoID09IG51bGwgPyBjaGlsZEZpcnN0XG4gICAgICA6IGNoaWxkRmluZCh0eXBlb2YgbWF0Y2ggPT09IFwiZnVuY3Rpb25cIiA/IG1hdGNoIDogY2hpbGRNYXRjaGVyKG1hdGNoKSkpO1xufVxuIiwgImltcG9ydCB7Y2hpbGRNYXRjaGVyfSBmcm9tIFwiLi4vbWF0Y2hlci5qc1wiO1xuXG52YXIgZmlsdGVyID0gQXJyYXkucHJvdG90eXBlLmZpbHRlcjtcblxuZnVuY3Rpb24gY2hpbGRyZW4oKSB7XG4gIHJldHVybiBBcnJheS5mcm9tKHRoaXMuY2hpbGRyZW4pO1xufVxuXG5mdW5jdGlvbiBjaGlsZHJlbkZpbHRlcihtYXRjaCkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGZpbHRlci5jYWxsKHRoaXMuY2hpbGRyZW4sIG1hdGNoKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obWF0Y2gpIHtcbiAgcmV0dXJuIHRoaXMuc2VsZWN0QWxsKG1hdGNoID09IG51bGwgPyBjaGlsZHJlblxuICAgICAgOiBjaGlsZHJlbkZpbHRlcih0eXBlb2YgbWF0Y2ggPT09IFwiZnVuY3Rpb25cIiA/IG1hdGNoIDogY2hpbGRNYXRjaGVyKG1hdGNoKSkpO1xufVxuIiwgImltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleC5qc1wiO1xuaW1wb3J0IG1hdGNoZXIgZnJvbSBcIi4uL21hdGNoZXIuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obWF0Y2gpIHtcbiAgaWYgKHR5cGVvZiBtYXRjaCAhPT0gXCJmdW5jdGlvblwiKSBtYXRjaCA9IG1hdGNoZXIobWF0Y2gpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgc3ViZ3JvdXAgPSBzdWJncm91cHNbal0gPSBbXSwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiBtYXRjaC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSkge1xuICAgICAgICBzdWJncm91cC5wdXNoKG5vZGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHN1Ymdyb3VwcywgdGhpcy5fcGFyZW50cyk7XG59XG4iLCAiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odXBkYXRlKSB7XG4gIHJldHVybiBuZXcgQXJyYXkodXBkYXRlLmxlbmd0aCk7XG59XG4iLCAiaW1wb3J0IHNwYXJzZSBmcm9tIFwiLi9zcGFyc2UuanNcIjtcbmltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24odGhpcy5fZW50ZXIgfHwgdGhpcy5fZ3JvdXBzLm1hcChzcGFyc2UpLCB0aGlzLl9wYXJlbnRzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEVudGVyTm9kZShwYXJlbnQsIGRhdHVtKSB7XG4gIHRoaXMub3duZXJEb2N1bWVudCA9IHBhcmVudC5vd25lckRvY3VtZW50O1xuICB0aGlzLm5hbWVzcGFjZVVSSSA9IHBhcmVudC5uYW1lc3BhY2VVUkk7XG4gIHRoaXMuX25leHQgPSBudWxsO1xuICB0aGlzLl9wYXJlbnQgPSBwYXJlbnQ7XG4gIHRoaXMuX19kYXRhX18gPSBkYXR1bTtcbn1cblxuRW50ZXJOb2RlLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IEVudGVyTm9kZSxcbiAgYXBwZW5kQ2hpbGQ6IGZ1bmN0aW9uKGNoaWxkKSB7IHJldHVybiB0aGlzLl9wYXJlbnQuaW5zZXJ0QmVmb3JlKGNoaWxkLCB0aGlzLl9uZXh0KTsgfSxcbiAgaW5zZXJ0QmVmb3JlOiBmdW5jdGlvbihjaGlsZCwgbmV4dCkgeyByZXR1cm4gdGhpcy5fcGFyZW50Lmluc2VydEJlZm9yZShjaGlsZCwgbmV4dCk7IH0sXG4gIHF1ZXJ5U2VsZWN0b3I6IGZ1bmN0aW9uKHNlbGVjdG9yKSB7IHJldHVybiB0aGlzLl9wYXJlbnQucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7IH0sXG4gIHF1ZXJ5U2VsZWN0b3JBbGw6IGZ1bmN0aW9uKHNlbGVjdG9yKSB7IHJldHVybiB0aGlzLl9wYXJlbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7IH1cbn07XG4iLCAiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHg7XG4gIH07XG59XG4iLCAiaW1wb3J0IHtTZWxlY3Rpb259IGZyb20gXCIuL2luZGV4LmpzXCI7XG5pbXBvcnQge0VudGVyTm9kZX0gZnJvbSBcIi4vZW50ZXIuanNcIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi4vY29uc3RhbnQuanNcIjtcblxuZnVuY3Rpb24gYmluZEluZGV4KHBhcmVudCwgZ3JvdXAsIGVudGVyLCB1cGRhdGUsIGV4aXQsIGRhdGEpIHtcbiAgdmFyIGkgPSAwLFxuICAgICAgbm9kZSxcbiAgICAgIGdyb3VwTGVuZ3RoID0gZ3JvdXAubGVuZ3RoLFxuICAgICAgZGF0YUxlbmd0aCA9IGRhdGEubGVuZ3RoO1xuXG4gIC8vIFB1dCBhbnkgbm9uLW51bGwgbm9kZXMgdGhhdCBmaXQgaW50byB1cGRhdGUuXG4gIC8vIFB1dCBhbnkgbnVsbCBub2RlcyBpbnRvIGVudGVyLlxuICAvLyBQdXQgYW55IHJlbWFpbmluZyBkYXRhIGludG8gZW50ZXIuXG4gIGZvciAoOyBpIDwgZGF0YUxlbmd0aDsgKytpKSB7XG4gICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgbm9kZS5fX2RhdGFfXyA9IGRhdGFbaV07XG4gICAgICB1cGRhdGVbaV0gPSBub2RlO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbnRlcltpXSA9IG5ldyBFbnRlck5vZGUocGFyZW50LCBkYXRhW2ldKTtcbiAgICB9XG4gIH1cblxuICAvLyBQdXQgYW55IG5vbi1udWxsIG5vZGVzIHRoYXQgZG9uXHUyMDE5dCBmaXQgaW50byBleGl0LlxuICBmb3IgKDsgaSA8IGdyb3VwTGVuZ3RoOyArK2kpIHtcbiAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICBleGl0W2ldID0gbm9kZTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYmluZEtleShwYXJlbnQsIGdyb3VwLCBlbnRlciwgdXBkYXRlLCBleGl0LCBkYXRhLCBrZXkpIHtcbiAgdmFyIGksXG4gICAgICBub2RlLFxuICAgICAgbm9kZUJ5S2V5VmFsdWUgPSBuZXcgTWFwLFxuICAgICAgZ3JvdXBMZW5ndGggPSBncm91cC5sZW5ndGgsXG4gICAgICBkYXRhTGVuZ3RoID0gZGF0YS5sZW5ndGgsXG4gICAgICBrZXlWYWx1ZXMgPSBuZXcgQXJyYXkoZ3JvdXBMZW5ndGgpLFxuICAgICAga2V5VmFsdWU7XG5cbiAgLy8gQ29tcHV0ZSB0aGUga2V5IGZvciBlYWNoIG5vZGUuXG4gIC8vIElmIG11bHRpcGxlIG5vZGVzIGhhdmUgdGhlIHNhbWUga2V5LCB0aGUgZHVwbGljYXRlcyBhcmUgYWRkZWQgdG8gZXhpdC5cbiAgZm9yIChpID0gMDsgaSA8IGdyb3VwTGVuZ3RoOyArK2kpIHtcbiAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICBrZXlWYWx1ZXNbaV0gPSBrZXlWYWx1ZSA9IGtleS5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSArIFwiXCI7XG4gICAgICBpZiAobm9kZUJ5S2V5VmFsdWUuaGFzKGtleVZhbHVlKSkge1xuICAgICAgICBleGl0W2ldID0gbm9kZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGVCeUtleVZhbHVlLnNldChrZXlWYWx1ZSwgbm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gQ29tcHV0ZSB0aGUga2V5IGZvciBlYWNoIGRhdHVtLlxuICAvLyBJZiB0aGVyZSBhIG5vZGUgYXNzb2NpYXRlZCB3aXRoIHRoaXMga2V5LCBqb2luIGFuZCBhZGQgaXQgdG8gdXBkYXRlLlxuICAvLyBJZiB0aGVyZSBpcyBub3QgKG9yIHRoZSBrZXkgaXMgYSBkdXBsaWNhdGUpLCBhZGQgaXQgdG8gZW50ZXIuXG4gIGZvciAoaSA9IDA7IGkgPCBkYXRhTGVuZ3RoOyArK2kpIHtcbiAgICBrZXlWYWx1ZSA9IGtleS5jYWxsKHBhcmVudCwgZGF0YVtpXSwgaSwgZGF0YSkgKyBcIlwiO1xuICAgIGlmIChub2RlID0gbm9kZUJ5S2V5VmFsdWUuZ2V0KGtleVZhbHVlKSkge1xuICAgICAgdXBkYXRlW2ldID0gbm9kZTtcbiAgICAgIG5vZGUuX19kYXRhX18gPSBkYXRhW2ldO1xuICAgICAgbm9kZUJ5S2V5VmFsdWUuZGVsZXRlKGtleVZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZW50ZXJbaV0gPSBuZXcgRW50ZXJOb2RlKHBhcmVudCwgZGF0YVtpXSk7XG4gICAgfVxuICB9XG5cbiAgLy8gQWRkIGFueSByZW1haW5pbmcgbm9kZXMgdGhhdCB3ZXJlIG5vdCBib3VuZCB0byBkYXRhIHRvIGV4aXQuXG4gIGZvciAoaSA9IDA7IGkgPCBncm91cExlbmd0aDsgKytpKSB7XG4gICAgaWYgKChub2RlID0gZ3JvdXBbaV0pICYmIChub2RlQnlLZXlWYWx1ZS5nZXQoa2V5VmFsdWVzW2ldKSA9PT0gbm9kZSkpIHtcbiAgICAgIGV4aXRbaV0gPSBub2RlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBkYXR1bShub2RlKSB7XG4gIHJldHVybiBub2RlLl9fZGF0YV9fO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIEFycmF5LmZyb20odGhpcywgZGF0dW0pO1xuXG4gIHZhciBiaW5kID0ga2V5ID8gYmluZEtleSA6IGJpbmRJbmRleCxcbiAgICAgIHBhcmVudHMgPSB0aGlzLl9wYXJlbnRzLFxuICAgICAgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzO1xuXG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdmFsdWUgPSBjb25zdGFudCh2YWx1ZSk7XG5cbiAgZm9yICh2YXIgbSA9IGdyb3Vwcy5sZW5ndGgsIHVwZGF0ZSA9IG5ldyBBcnJheShtKSwgZW50ZXIgPSBuZXcgQXJyYXkobSksIGV4aXQgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgdmFyIHBhcmVudCA9IHBhcmVudHNbal0sXG4gICAgICAgIGdyb3VwID0gZ3JvdXBzW2pdLFxuICAgICAgICBncm91cExlbmd0aCA9IGdyb3VwLmxlbmd0aCxcbiAgICAgICAgZGF0YSA9IGFycmF5bGlrZSh2YWx1ZS5jYWxsKHBhcmVudCwgcGFyZW50ICYmIHBhcmVudC5fX2RhdGFfXywgaiwgcGFyZW50cykpLFxuICAgICAgICBkYXRhTGVuZ3RoID0gZGF0YS5sZW5ndGgsXG4gICAgICAgIGVudGVyR3JvdXAgPSBlbnRlcltqXSA9IG5ldyBBcnJheShkYXRhTGVuZ3RoKSxcbiAgICAgICAgdXBkYXRlR3JvdXAgPSB1cGRhdGVbal0gPSBuZXcgQXJyYXkoZGF0YUxlbmd0aCksXG4gICAgICAgIGV4aXRHcm91cCA9IGV4aXRbal0gPSBuZXcgQXJyYXkoZ3JvdXBMZW5ndGgpO1xuXG4gICAgYmluZChwYXJlbnQsIGdyb3VwLCBlbnRlckdyb3VwLCB1cGRhdGVHcm91cCwgZXhpdEdyb3VwLCBkYXRhLCBrZXkpO1xuXG4gICAgLy8gTm93IGNvbm5lY3QgdGhlIGVudGVyIG5vZGVzIHRvIHRoZWlyIGZvbGxvd2luZyB1cGRhdGUgbm9kZSwgc3VjaCB0aGF0XG4gICAgLy8gYXBwZW5kQ2hpbGQgY2FuIGluc2VydCB0aGUgbWF0ZXJpYWxpemVkIGVudGVyIG5vZGUgYmVmb3JlIHRoaXMgbm9kZSxcbiAgICAvLyByYXRoZXIgdGhhbiBhdCB0aGUgZW5kIG9mIHRoZSBwYXJlbnQgbm9kZS5cbiAgICBmb3IgKHZhciBpMCA9IDAsIGkxID0gMCwgcHJldmlvdXMsIG5leHQ7IGkwIDwgZGF0YUxlbmd0aDsgKytpMCkge1xuICAgICAgaWYgKHByZXZpb3VzID0gZW50ZXJHcm91cFtpMF0pIHtcbiAgICAgICAgaWYgKGkwID49IGkxKSBpMSA9IGkwICsgMTtcbiAgICAgICAgd2hpbGUgKCEobmV4dCA9IHVwZGF0ZUdyb3VwW2kxXSkgJiYgKytpMSA8IGRhdGFMZW5ndGgpO1xuICAgICAgICBwcmV2aW91cy5fbmV4dCA9IG5leHQgfHwgbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB1cGRhdGUgPSBuZXcgU2VsZWN0aW9uKHVwZGF0ZSwgcGFyZW50cyk7XG4gIHVwZGF0ZS5fZW50ZXIgPSBlbnRlcjtcbiAgdXBkYXRlLl9leGl0ID0gZXhpdDtcbiAgcmV0dXJuIHVwZGF0ZTtcbn1cblxuLy8gR2l2ZW4gc29tZSBkYXRhLCB0aGlzIHJldHVybnMgYW4gYXJyYXktbGlrZSB2aWV3IG9mIGl0OiBhbiBvYmplY3QgdGhhdFxuLy8gZXhwb3NlcyBhIGxlbmd0aCBwcm9wZXJ0eSBhbmQgYWxsb3dzIG51bWVyaWMgaW5kZXhpbmcuIE5vdGUgdGhhdCB1bmxpa2Vcbi8vIHNlbGVjdEFsbCwgdGhpcyBpc25cdTIwMTl0IHdvcnJpZWQgYWJvdXQgXHUyMDFDbGl2ZVx1MjAxRCBjb2xsZWN0aW9ucyBiZWNhdXNlIHRoZSByZXN1bHRpbmdcbi8vIGFycmF5IHdpbGwgb25seSBiZSB1c2VkIGJyaWVmbHkgd2hpbGUgZGF0YSBpcyBiZWluZyBib3VuZC4gKEl0IGlzIHBvc3NpYmxlIHRvXG4vLyBjYXVzZSB0aGUgZGF0YSB0byBjaGFuZ2Ugd2hpbGUgaXRlcmF0aW5nIGJ5IHVzaW5nIGEga2V5IGZ1bmN0aW9uLCBidXQgcGxlYXNlXG4vLyBkb25cdTIwMTl0OyB3ZVx1MjAxOWQgcmF0aGVyIGF2b2lkIGEgZ3JhdHVpdG91cyBjb3B5LilcbmZ1bmN0aW9uIGFycmF5bGlrZShkYXRhKSB7XG4gIHJldHVybiB0eXBlb2YgZGF0YSA9PT0gXCJvYmplY3RcIiAmJiBcImxlbmd0aFwiIGluIGRhdGFcbiAgICA/IGRhdGEgLy8gQXJyYXksIFR5cGVkQXJyYXksIE5vZGVMaXN0LCBhcnJheS1saWtlXG4gICAgOiBBcnJheS5mcm9tKGRhdGEpOyAvLyBNYXAsIFNldCwgaXRlcmFibGUsIHN0cmluZywgb3IgYW55dGhpbmcgZWxzZVxufVxuIiwgImltcG9ydCBzcGFyc2UgZnJvbSBcIi4vc3BhcnNlLmpzXCI7XG5pbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXguanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHRoaXMuX2V4aXQgfHwgdGhpcy5fZ3JvdXBzLm1hcChzcGFyc2UpLCB0aGlzLl9wYXJlbnRzKTtcbn1cbiIsICJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihvbmVudGVyLCBvbnVwZGF0ZSwgb25leGl0KSB7XG4gIHZhciBlbnRlciA9IHRoaXMuZW50ZXIoKSwgdXBkYXRlID0gdGhpcywgZXhpdCA9IHRoaXMuZXhpdCgpO1xuICBpZiAodHlwZW9mIG9uZW50ZXIgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGVudGVyID0gb25lbnRlcihlbnRlcik7XG4gICAgaWYgKGVudGVyKSBlbnRlciA9IGVudGVyLnNlbGVjdGlvbigpO1xuICB9IGVsc2Uge1xuICAgIGVudGVyID0gZW50ZXIuYXBwZW5kKG9uZW50ZXIgKyBcIlwiKTtcbiAgfVxuICBpZiAob251cGRhdGUgIT0gbnVsbCkge1xuICAgIHVwZGF0ZSA9IG9udXBkYXRlKHVwZGF0ZSk7XG4gICAgaWYgKHVwZGF0ZSkgdXBkYXRlID0gdXBkYXRlLnNlbGVjdGlvbigpO1xuICB9XG4gIGlmIChvbmV4aXQgPT0gbnVsbCkgZXhpdC5yZW1vdmUoKTsgZWxzZSBvbmV4aXQoZXhpdCk7XG4gIHJldHVybiBlbnRlciAmJiB1cGRhdGUgPyBlbnRlci5tZXJnZSh1cGRhdGUpLm9yZGVyKCkgOiB1cGRhdGU7XG59XG4iLCAiaW1wb3J0IHtTZWxlY3Rpb259IGZyb20gXCIuL2luZGV4LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNvbnRleHQpIHtcbiAgdmFyIHNlbGVjdGlvbiA9IGNvbnRleHQuc2VsZWN0aW9uID8gY29udGV4dC5zZWxlY3Rpb24oKSA6IGNvbnRleHQ7XG5cbiAgZm9yICh2YXIgZ3JvdXBzMCA9IHRoaXMuX2dyb3VwcywgZ3JvdXBzMSA9IHNlbGVjdGlvbi5fZ3JvdXBzLCBtMCA9IGdyb3VwczAubGVuZ3RoLCBtMSA9IGdyb3VwczEubGVuZ3RoLCBtID0gTWF0aC5taW4obTAsIG0xKSwgbWVyZ2VzID0gbmV3IEFycmF5KG0wKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cDAgPSBncm91cHMwW2pdLCBncm91cDEgPSBncm91cHMxW2pdLCBuID0gZ3JvdXAwLmxlbmd0aCwgbWVyZ2UgPSBtZXJnZXNbal0gPSBuZXcgQXJyYXkobiksIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwMFtpXSB8fCBncm91cDFbaV0pIHtcbiAgICAgICAgbWVyZ2VbaV0gPSBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBqIDwgbTA7ICsraikge1xuICAgIG1lcmdlc1tqXSA9IGdyb3VwczBbal07XG4gIH1cblxuICByZXR1cm4gbmV3IFNlbGVjdGlvbihtZXJnZXMsIHRoaXMuX3BhcmVudHMpO1xufVxuIiwgImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgaiA9IC0xLCBtID0gZ3JvdXBzLmxlbmd0aDsgKytqIDwgbTspIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgaSA9IGdyb3VwLmxlbmd0aCAtIDEsIG5leHQgPSBncm91cFtpXSwgbm9kZTsgLS1pID49IDA7KSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIGlmIChuZXh0ICYmIG5vZGUuY29tcGFyZURvY3VtZW50UG9zaXRpb24obmV4dCkgXiA0KSBuZXh0LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5vZGUsIG5leHQpO1xuICAgICAgICBuZXh0ID0gbm9kZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cbiIsICJpbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXguanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY29tcGFyZSkge1xuICBpZiAoIWNvbXBhcmUpIGNvbXBhcmUgPSBhc2NlbmRpbmc7XG5cbiAgZnVuY3Rpb24gY29tcGFyZU5vZGUoYSwgYikge1xuICAgIHJldHVybiBhICYmIGIgPyBjb21wYXJlKGEuX19kYXRhX18sIGIuX19kYXRhX18pIDogIWEgLSAhYjtcbiAgfVxuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHNvcnRncm91cHMgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIHNvcnRncm91cCA9IHNvcnRncm91cHNbal0gPSBuZXcgQXJyYXkobiksIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIHNvcnRncm91cFtpXSA9IG5vZGU7XG4gICAgICB9XG4gICAgfVxuICAgIHNvcnRncm91cC5zb3J0KGNvbXBhcmVOb2RlKTtcbiAgfVxuXG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHNvcnRncm91cHMsIHRoaXMuX3BhcmVudHMpLm9yZGVyKCk7XG59XG5cbmZ1bmN0aW9uIGFzY2VuZGluZyhhLCBiKSB7XG4gIHJldHVybiBhIDwgYiA/IC0xIDogYSA+IGIgPyAxIDogYSA+PSBiID8gMCA6IE5hTjtcbn1cbiIsICJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIGNhbGxiYWNrID0gYXJndW1lbnRzWzBdO1xuICBhcmd1bWVudHNbMF0gPSB0aGlzO1xuICBjYWxsYmFjay5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICByZXR1cm4gdGhpcztcbn1cbiIsICJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIEFycmF5LmZyb20odGhpcyk7XG59XG4iLCAiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBqID0gMCwgbSA9IGdyb3Vwcy5sZW5ndGg7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgaSA9IDAsIG4gPSBncm91cC5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgIHZhciBub2RlID0gZ3JvdXBbaV07XG4gICAgICBpZiAobm9kZSkgcmV0dXJuIG5vZGU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG4iLCAiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIGxldCBzaXplID0gMDtcbiAgZm9yIChjb25zdCBub2RlIG9mIHRoaXMpICsrc2l6ZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICByZXR1cm4gc2l6ZTtcbn1cbiIsICJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuICF0aGlzLm5vZGUoKTtcbn1cbiIsICJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjYWxsYmFjaykge1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgaiA9IDAsIG0gPSBncm91cHMubGVuZ3RoOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIGkgPSAwLCBuID0gZ3JvdXAubGVuZ3RoLCBub2RlOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSBjYWxsYmFjay5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cbiIsICJpbXBvcnQgbmFtZXNwYWNlIGZyb20gXCIuLi9uYW1lc3BhY2UuanNcIjtcblxuZnVuY3Rpb24gYXR0clJlbW92ZShuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0clJlbW92ZU5TKGZ1bGxuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJDb25zdGFudChuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyQ29uc3RhbnROUyhmdWxsbmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsLCB2YWx1ZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJGdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmICh2ID09IG51bGwpIHRoaXMucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICAgIGVsc2UgdGhpcy5zZXRBdHRyaWJ1dGUobmFtZSwgdik7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJGdW5jdGlvbk5TKGZ1bGxuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmICh2ID09IG51bGwpIHRoaXMucmVtb3ZlQXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgICBlbHNlIHRoaXMuc2V0QXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsLCB2KTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgdmFyIGZ1bGxuYW1lID0gbmFtZXNwYWNlKG5hbWUpO1xuXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgIHZhciBub2RlID0gdGhpcy5ub2RlKCk7XG4gICAgcmV0dXJuIGZ1bGxuYW1lLmxvY2FsXG4gICAgICAgID8gbm9kZS5nZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpXG4gICAgICAgIDogbm9kZS5nZXRBdHRyaWJ1dGUoZnVsbG5hbWUpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuZWFjaCgodmFsdWUgPT0gbnVsbFxuICAgICAgPyAoZnVsbG5hbWUubG9jYWwgPyBhdHRyUmVtb3ZlTlMgOiBhdHRyUmVtb3ZlKSA6ICh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgPyAoZnVsbG5hbWUubG9jYWwgPyBhdHRyRnVuY3Rpb25OUyA6IGF0dHJGdW5jdGlvbilcbiAgICAgIDogKGZ1bGxuYW1lLmxvY2FsID8gYXR0ckNvbnN0YW50TlMgOiBhdHRyQ29uc3RhbnQpKSkoZnVsbG5hbWUsIHZhbHVlKSk7XG59XG4iLCAiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obm9kZSkge1xuICByZXR1cm4gKG5vZGUub3duZXJEb2N1bWVudCAmJiBub2RlLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcpIC8vIG5vZGUgaXMgYSBOb2RlXG4gICAgICB8fCAobm9kZS5kb2N1bWVudCAmJiBub2RlKSAvLyBub2RlIGlzIGEgV2luZG93XG4gICAgICB8fCBub2RlLmRlZmF1bHRWaWV3OyAvLyBub2RlIGlzIGEgRG9jdW1lbnRcbn1cbiIsICJpbXBvcnQgZGVmYXVsdFZpZXcgZnJvbSBcIi4uL3dpbmRvdy5qc1wiO1xuXG5mdW5jdGlvbiBzdHlsZVJlbW92ZShuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnN0eWxlLnJlbW92ZVByb3BlcnR5KG5hbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZUNvbnN0YW50KG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5zdHlsZS5zZXRQcm9wZXJ0eShuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZUZ1bmN0aW9uKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmICh2ID09IG51bGwpIHRoaXMuc3R5bGUucmVtb3ZlUHJvcGVydHkobmFtZSk7XG4gICAgZWxzZSB0aGlzLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIHYsIHByaW9yaXR5KTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMVxuICAgICAgPyB0aGlzLmVhY2goKHZhbHVlID09IG51bGxcbiAgICAgICAgICAgID8gc3R5bGVSZW1vdmUgOiB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgICAgPyBzdHlsZUZ1bmN0aW9uXG4gICAgICAgICAgICA6IHN0eWxlQ29uc3RhbnQpKG5hbWUsIHZhbHVlLCBwcmlvcml0eSA9PSBudWxsID8gXCJcIiA6IHByaW9yaXR5KSlcbiAgICAgIDogc3R5bGVWYWx1ZSh0aGlzLm5vZGUoKSwgbmFtZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdHlsZVZhbHVlKG5vZGUsIG5hbWUpIHtcbiAgcmV0dXJuIG5vZGUuc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZShuYW1lKVxuICAgICAgfHwgZGVmYXVsdFZpZXcobm9kZSkuZ2V0Q29tcHV0ZWRTdHlsZShub2RlLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKG5hbWUpO1xufVxuIiwgImZ1bmN0aW9uIHByb3BlcnR5UmVtb3ZlKG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIGRlbGV0ZSB0aGlzW25hbWVdO1xuICB9O1xufVxuXG5mdW5jdGlvbiBwcm9wZXJ0eUNvbnN0YW50KG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzW25hbWVdID0gdmFsdWU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHByb3BlcnR5RnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAodiA9PSBudWxsKSBkZWxldGUgdGhpc1tuYW1lXTtcbiAgICBlbHNlIHRoaXNbbmFtZV0gPSB2O1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDFcbiAgICAgID8gdGhpcy5lYWNoKCh2YWx1ZSA9PSBudWxsXG4gICAgICAgICAgPyBwcm9wZXJ0eVJlbW92ZSA6IHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgPyBwcm9wZXJ0eUZ1bmN0aW9uXG4gICAgICAgICAgOiBwcm9wZXJ0eUNvbnN0YW50KShuYW1lLCB2YWx1ZSkpXG4gICAgICA6IHRoaXMubm9kZSgpW25hbWVdO1xufVxuIiwgImZ1bmN0aW9uIGNsYXNzQXJyYXkoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcudHJpbSgpLnNwbGl0KC9efFxccysvKTtcbn1cblxuZnVuY3Rpb24gY2xhc3NMaXN0KG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUuY2xhc3NMaXN0IHx8IG5ldyBDbGFzc0xpc3Qobm9kZSk7XG59XG5cbmZ1bmN0aW9uIENsYXNzTGlzdChub2RlKSB7XG4gIHRoaXMuX25vZGUgPSBub2RlO1xuICB0aGlzLl9uYW1lcyA9IGNsYXNzQXJyYXkobm9kZS5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSB8fCBcIlwiKTtcbn1cblxuQ2xhc3NMaXN0LnByb3RvdHlwZSA9IHtcbiAgYWRkOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgdmFyIGkgPSB0aGlzLl9uYW1lcy5pbmRleE9mKG5hbWUpO1xuICAgIGlmIChpIDwgMCkge1xuICAgICAgdGhpcy5fbmFtZXMucHVzaChuYW1lKTtcbiAgICAgIHRoaXMuX25vZGUuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgdGhpcy5fbmFtZXMuam9pbihcIiBcIikpO1xuICAgIH1cbiAgfSxcbiAgcmVtb3ZlOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgdmFyIGkgPSB0aGlzLl9uYW1lcy5pbmRleE9mKG5hbWUpO1xuICAgIGlmIChpID49IDApIHtcbiAgICAgIHRoaXMuX25hbWVzLnNwbGljZShpLCAxKTtcbiAgICAgIHRoaXMuX25vZGUuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgdGhpcy5fbmFtZXMuam9pbihcIiBcIikpO1xuICAgIH1cbiAgfSxcbiAgY29udGFpbnM6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5fbmFtZXMuaW5kZXhPZihuYW1lKSA+PSAwO1xuICB9XG59O1xuXG5mdW5jdGlvbiBjbGFzc2VkQWRkKG5vZGUsIG5hbWVzKSB7XG4gIHZhciBsaXN0ID0gY2xhc3NMaXN0KG5vZGUpLCBpID0gLTEsIG4gPSBuYW1lcy5sZW5ndGg7XG4gIHdoaWxlICgrK2kgPCBuKSBsaXN0LmFkZChuYW1lc1tpXSk7XG59XG5cbmZ1bmN0aW9uIGNsYXNzZWRSZW1vdmUobm9kZSwgbmFtZXMpIHtcbiAgdmFyIGxpc3QgPSBjbGFzc0xpc3Qobm9kZSksIGkgPSAtMSwgbiA9IG5hbWVzLmxlbmd0aDtcbiAgd2hpbGUgKCsraSA8IG4pIGxpc3QucmVtb3ZlKG5hbWVzW2ldKTtcbn1cblxuZnVuY3Rpb24gY2xhc3NlZFRydWUobmFtZXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIGNsYXNzZWRBZGQodGhpcywgbmFtZXMpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjbGFzc2VkRmFsc2UobmFtZXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIGNsYXNzZWRSZW1vdmUodGhpcywgbmFtZXMpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjbGFzc2VkRnVuY3Rpb24obmFtZXMsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAodmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKSA/IGNsYXNzZWRBZGQgOiBjbGFzc2VkUmVtb3ZlKSh0aGlzLCBuYW1lcyk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHZhciBuYW1lcyA9IGNsYXNzQXJyYXkobmFtZSArIFwiXCIpO1xuXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgIHZhciBsaXN0ID0gY2xhc3NMaXN0KHRoaXMubm9kZSgpKSwgaSA9IC0xLCBuID0gbmFtZXMubGVuZ3RoO1xuICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoIWxpc3QuY29udGFpbnMobmFtZXNbaV0pKSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gdGhpcy5lYWNoKCh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgPyBjbGFzc2VkRnVuY3Rpb24gOiB2YWx1ZVxuICAgICAgPyBjbGFzc2VkVHJ1ZVxuICAgICAgOiBjbGFzc2VkRmFsc2UpKG5hbWVzLCB2YWx1ZSkpO1xufVxuIiwgImZ1bmN0aW9uIHRleHRSZW1vdmUoKSB7XG4gIHRoaXMudGV4dENvbnRlbnQgPSBcIlwiO1xufVxuXG5mdW5jdGlvbiB0ZXh0Q29uc3RhbnQodmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMudGV4dENvbnRlbnQgPSB2YWx1ZTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdGV4dEZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgdGhpcy50ZXh0Q29udGVudCA9IHYgPT0gbnVsbCA/IFwiXCIgOiB2O1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgPyB0aGlzLmVhY2godmFsdWUgPT0gbnVsbFxuICAgICAgICAgID8gdGV4dFJlbW92ZSA6ICh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgID8gdGV4dEZ1bmN0aW9uXG4gICAgICAgICAgOiB0ZXh0Q29uc3RhbnQpKHZhbHVlKSlcbiAgICAgIDogdGhpcy5ub2RlKCkudGV4dENvbnRlbnQ7XG59XG4iLCAiZnVuY3Rpb24gaHRtbFJlbW92ZSgpIHtcbiAgdGhpcy5pbm5lckhUTUwgPSBcIlwiO1xufVxuXG5mdW5jdGlvbiBodG1sQ29uc3RhbnQodmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuaW5uZXJIVE1MID0gdmFsdWU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGh0bWxGdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIHRoaXMuaW5uZXJIVE1MID0gdiA9PSBudWxsID8gXCJcIiA6IHY7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMuZWFjaCh2YWx1ZSA9PSBudWxsXG4gICAgICAgICAgPyBodG1sUmVtb3ZlIDogKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgPyBodG1sRnVuY3Rpb25cbiAgICAgICAgICA6IGh0bWxDb25zdGFudCkodmFsdWUpKVxuICAgICAgOiB0aGlzLm5vZGUoKS5pbm5lckhUTUw7XG59XG4iLCAiZnVuY3Rpb24gcmFpc2UoKSB7XG4gIGlmICh0aGlzLm5leHRTaWJsaW5nKSB0aGlzLnBhcmVudE5vZGUuYXBwZW5kQ2hpbGQodGhpcyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5lYWNoKHJhaXNlKTtcbn1cbiIsICJmdW5jdGlvbiBsb3dlcigpIHtcbiAgaWYgKHRoaXMucHJldmlvdXNTaWJsaW5nKSB0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXMsIHRoaXMucGFyZW50Tm9kZS5maXJzdENoaWxkKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmVhY2gobG93ZXIpO1xufVxuIiwgImltcG9ydCBjcmVhdG9yIGZyb20gXCIuLi9jcmVhdG9yLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUpIHtcbiAgdmFyIGNyZWF0ZSA9IHR5cGVvZiBuYW1lID09PSBcImZ1bmN0aW9uXCIgPyBuYW1lIDogY3JlYXRvcihuYW1lKTtcbiAgcmV0dXJuIHRoaXMuc2VsZWN0KGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmFwcGVuZENoaWxkKGNyZWF0ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfSk7XG59XG4iLCAiaW1wb3J0IGNyZWF0b3IgZnJvbSBcIi4uL2NyZWF0b3IuanNcIjtcbmltcG9ydCBzZWxlY3RvciBmcm9tIFwiLi4vc2VsZWN0b3IuanNcIjtcblxuZnVuY3Rpb24gY29uc3RhbnROdWxsKCkge1xuICByZXR1cm4gbnVsbDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgYmVmb3JlKSB7XG4gIHZhciBjcmVhdGUgPSB0eXBlb2YgbmFtZSA9PT0gXCJmdW5jdGlvblwiID8gbmFtZSA6IGNyZWF0b3IobmFtZSksXG4gICAgICBzZWxlY3QgPSBiZWZvcmUgPT0gbnVsbCA/IGNvbnN0YW50TnVsbCA6IHR5cGVvZiBiZWZvcmUgPT09IFwiZnVuY3Rpb25cIiA/IGJlZm9yZSA6IHNlbGVjdG9yKGJlZm9yZSk7XG4gIHJldHVybiB0aGlzLnNlbGVjdChmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5pbnNlcnRCZWZvcmUoY3JlYXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksIHNlbGVjdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IG51bGwpO1xuICB9KTtcbn1cbiIsICJmdW5jdGlvbiByZW1vdmUoKSB7XG4gIHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudE5vZGU7XG4gIGlmIChwYXJlbnQpIHBhcmVudC5yZW1vdmVDaGlsZCh0aGlzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmVhY2gocmVtb3ZlKTtcbn1cbiIsICJmdW5jdGlvbiBzZWxlY3Rpb25fY2xvbmVTaGFsbG93KCkge1xuICB2YXIgY2xvbmUgPSB0aGlzLmNsb25lTm9kZShmYWxzZSksIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcbiAgcmV0dXJuIHBhcmVudCA/IHBhcmVudC5pbnNlcnRCZWZvcmUoY2xvbmUsIHRoaXMubmV4dFNpYmxpbmcpIDogY2xvbmU7XG59XG5cbmZ1bmN0aW9uIHNlbGVjdGlvbl9jbG9uZURlZXAoKSB7XG4gIHZhciBjbG9uZSA9IHRoaXMuY2xvbmVOb2RlKHRydWUpLCBwYXJlbnQgPSB0aGlzLnBhcmVudE5vZGU7XG4gIHJldHVybiBwYXJlbnQgPyBwYXJlbnQuaW5zZXJ0QmVmb3JlKGNsb25lLCB0aGlzLm5leHRTaWJsaW5nKSA6IGNsb25lO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihkZWVwKSB7XG4gIHJldHVybiB0aGlzLnNlbGVjdChkZWVwID8gc2VsZWN0aW9uX2Nsb25lRGVlcCA6IHNlbGVjdGlvbl9jbG9uZVNoYWxsb3cpO1xufVxuIiwgImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMucHJvcGVydHkoXCJfX2RhdGFfX1wiLCB2YWx1ZSlcbiAgICAgIDogdGhpcy5ub2RlKCkuX19kYXRhX187XG59XG4iLCAiZnVuY3Rpb24gY29udGV4dExpc3RlbmVyKGxpc3RlbmVyKSB7XG4gIHJldHVybiBmdW5jdGlvbihldmVudCkge1xuICAgIGxpc3RlbmVyLmNhbGwodGhpcywgZXZlbnQsIHRoaXMuX19kYXRhX18pO1xuICB9O1xufVxuXG5mdW5jdGlvbiBwYXJzZVR5cGVuYW1lcyh0eXBlbmFtZXMpIHtcbiAgcmV0dXJuIHR5cGVuYW1lcy50cmltKCkuc3BsaXQoL158XFxzKy8pLm1hcChmdW5jdGlvbih0KSB7XG4gICAgdmFyIG5hbWUgPSBcIlwiLCBpID0gdC5pbmRleE9mKFwiLlwiKTtcbiAgICBpZiAoaSA+PSAwKSBuYW1lID0gdC5zbGljZShpICsgMSksIHQgPSB0LnNsaWNlKDAsIGkpO1xuICAgIHJldHVybiB7dHlwZTogdCwgbmFtZTogbmFtZX07XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBvblJlbW92ZSh0eXBlbmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIG9uID0gdGhpcy5fX29uO1xuICAgIGlmICghb24pIHJldHVybjtcbiAgICBmb3IgKHZhciBqID0gMCwgaSA9IC0xLCBtID0gb24ubGVuZ3RoLCBvOyBqIDwgbTsgKytqKSB7XG4gICAgICBpZiAobyA9IG9uW2pdLCAoIXR5cGVuYW1lLnR5cGUgfHwgby50eXBlID09PSB0eXBlbmFtZS50eXBlKSAmJiBvLm5hbWUgPT09IHR5cGVuYW1lLm5hbWUpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKG8udHlwZSwgby5saXN0ZW5lciwgby5vcHRpb25zKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9uWysraV0gPSBvO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoKytpKSBvbi5sZW5ndGggPSBpO1xuICAgIGVsc2UgZGVsZXRlIHRoaXMuX19vbjtcbiAgfTtcbn1cblxuZnVuY3Rpb24gb25BZGQodHlwZW5hbWUsIHZhbHVlLCBvcHRpb25zKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgb24gPSB0aGlzLl9fb24sIG8sIGxpc3RlbmVyID0gY29udGV4dExpc3RlbmVyKHZhbHVlKTtcbiAgICBpZiAob24pIGZvciAodmFyIGogPSAwLCBtID0gb24ubGVuZ3RoOyBqIDwgbTsgKytqKSB7XG4gICAgICBpZiAoKG8gPSBvbltqXSkudHlwZSA9PT0gdHlwZW5hbWUudHlwZSAmJiBvLm5hbWUgPT09IHR5cGVuYW1lLm5hbWUpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKG8udHlwZSwgby5saXN0ZW5lciwgby5vcHRpb25zKTtcbiAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKG8udHlwZSwgby5saXN0ZW5lciA9IGxpc3RlbmVyLCBvLm9wdGlvbnMgPSBvcHRpb25zKTtcbiAgICAgICAgby52YWx1ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcih0eXBlbmFtZS50eXBlLCBsaXN0ZW5lciwgb3B0aW9ucyk7XG4gICAgbyA9IHt0eXBlOiB0eXBlbmFtZS50eXBlLCBuYW1lOiB0eXBlbmFtZS5uYW1lLCB2YWx1ZTogdmFsdWUsIGxpc3RlbmVyOiBsaXN0ZW5lciwgb3B0aW9uczogb3B0aW9uc307XG4gICAgaWYgKCFvbikgdGhpcy5fX29uID0gW29dO1xuICAgIGVsc2Ugb24ucHVzaChvKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odHlwZW5hbWUsIHZhbHVlLCBvcHRpb25zKSB7XG4gIHZhciB0eXBlbmFtZXMgPSBwYXJzZVR5cGVuYW1lcyh0eXBlbmFtZSArIFwiXCIpLCBpLCBuID0gdHlwZW5hbWVzLmxlbmd0aCwgdDtcblxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICB2YXIgb24gPSB0aGlzLm5vZGUoKS5fX29uO1xuICAgIGlmIChvbikgZm9yICh2YXIgaiA9IDAsIG0gPSBvbi5sZW5ndGgsIG87IGogPCBtOyArK2opIHtcbiAgICAgIGZvciAoaSA9IDAsIG8gPSBvbltqXTsgaSA8IG47ICsraSkge1xuICAgICAgICBpZiAoKHQgPSB0eXBlbmFtZXNbaV0pLnR5cGUgPT09IG8udHlwZSAmJiB0Lm5hbWUgPT09IG8ubmFtZSkge1xuICAgICAgICAgIHJldHVybiBvLnZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuXG4gIG9uID0gdmFsdWUgPyBvbkFkZCA6IG9uUmVtb3ZlO1xuICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB0aGlzLmVhY2gob24odHlwZW5hbWVzW2ldLCB2YWx1ZSwgb3B0aW9ucykpO1xuICByZXR1cm4gdGhpcztcbn1cbiIsICJpbXBvcnQgZGVmYXVsdFZpZXcgZnJvbSBcIi4uL3dpbmRvdy5qc1wiO1xuXG5mdW5jdGlvbiBkaXNwYXRjaEV2ZW50KG5vZGUsIHR5cGUsIHBhcmFtcykge1xuICB2YXIgd2luZG93ID0gZGVmYXVsdFZpZXcobm9kZSksXG4gICAgICBldmVudCA9IHdpbmRvdy5DdXN0b21FdmVudDtcblxuICBpZiAodHlwZW9mIGV2ZW50ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBldmVudCA9IG5ldyBldmVudCh0eXBlLCBwYXJhbXMpO1xuICB9IGVsc2Uge1xuICAgIGV2ZW50ID0gd2luZG93LmRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiRXZlbnRcIik7XG4gICAgaWYgKHBhcmFtcykgZXZlbnQuaW5pdEV2ZW50KHR5cGUsIHBhcmFtcy5idWJibGVzLCBwYXJhbXMuY2FuY2VsYWJsZSksIGV2ZW50LmRldGFpbCA9IHBhcmFtcy5kZXRhaWw7XG4gICAgZWxzZSBldmVudC5pbml0RXZlbnQodHlwZSwgZmFsc2UsIGZhbHNlKTtcbiAgfVxuXG4gIG5vZGUuZGlzcGF0Y2hFdmVudChldmVudCk7XG59XG5cbmZ1bmN0aW9uIGRpc3BhdGNoQ29uc3RhbnQodHlwZSwgcGFyYW1zKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZGlzcGF0Y2hFdmVudCh0aGlzLCB0eXBlLCBwYXJhbXMpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBkaXNwYXRjaEZ1bmN0aW9uKHR5cGUsIHBhcmFtcykge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGRpc3BhdGNoRXZlbnQodGhpcywgdHlwZSwgcGFyYW1zLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih0eXBlLCBwYXJhbXMpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaCgodHlwZW9mIHBhcmFtcyA9PT0gXCJmdW5jdGlvblwiXG4gICAgICA/IGRpc3BhdGNoRnVuY3Rpb25cbiAgICAgIDogZGlzcGF0Y2hDb25zdGFudCkodHlwZSwgcGFyYW1zKSk7XG59XG4iLCAiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24qKCkge1xuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIGogPSAwLCBtID0gZ3JvdXBzLmxlbmd0aDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBpID0gMCwgbiA9IGdyb3VwLmxlbmd0aCwgbm9kZTsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkgeWllbGQgbm9kZTtcbiAgICB9XG4gIH1cbn1cbiIsICJpbXBvcnQgc2VsZWN0aW9uX3NlbGVjdCBmcm9tIFwiLi9zZWxlY3QuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fc2VsZWN0QWxsIGZyb20gXCIuL3NlbGVjdEFsbC5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9zZWxlY3RDaGlsZCBmcm9tIFwiLi9zZWxlY3RDaGlsZC5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9zZWxlY3RDaGlsZHJlbiBmcm9tIFwiLi9zZWxlY3RDaGlsZHJlbi5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9maWx0ZXIgZnJvbSBcIi4vZmlsdGVyLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2RhdGEgZnJvbSBcIi4vZGF0YS5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9lbnRlciBmcm9tIFwiLi9lbnRlci5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9leGl0IGZyb20gXCIuL2V4aXQuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fam9pbiBmcm9tIFwiLi9qb2luLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX21lcmdlIGZyb20gXCIuL21lcmdlLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX29yZGVyIGZyb20gXCIuL29yZGVyLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX3NvcnQgZnJvbSBcIi4vc29ydC5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9jYWxsIGZyb20gXCIuL2NhbGwuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fbm9kZXMgZnJvbSBcIi4vbm9kZXMuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fbm9kZSBmcm9tIFwiLi9ub2RlLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX3NpemUgZnJvbSBcIi4vc2l6ZS5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9lbXB0eSBmcm9tIFwiLi9lbXB0eS5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9lYWNoIGZyb20gXCIuL2VhY2guanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fYXR0ciBmcm9tIFwiLi9hdHRyLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX3N0eWxlIGZyb20gXCIuL3N0eWxlLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX3Byb3BlcnR5IGZyb20gXCIuL3Byb3BlcnR5LmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2NsYXNzZWQgZnJvbSBcIi4vY2xhc3NlZC5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl90ZXh0IGZyb20gXCIuL3RleHQuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25faHRtbCBmcm9tIFwiLi9odG1sLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX3JhaXNlIGZyb20gXCIuL3JhaXNlLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2xvd2VyIGZyb20gXCIuL2xvd2VyLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2FwcGVuZCBmcm9tIFwiLi9hcHBlbmQuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25faW5zZXJ0IGZyb20gXCIuL2luc2VydC5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9yZW1vdmUgZnJvbSBcIi4vcmVtb3ZlLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2Nsb25lIGZyb20gXCIuL2Nsb25lLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2RhdHVtIGZyb20gXCIuL2RhdHVtLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX29uIGZyb20gXCIuL29uLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2Rpc3BhdGNoIGZyb20gXCIuL2Rpc3BhdGNoLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2l0ZXJhdG9yIGZyb20gXCIuL2l0ZXJhdG9yLmpzXCI7XG5cbmV4cG9ydCB2YXIgcm9vdCA9IFtudWxsXTtcblxuZXhwb3J0IGZ1bmN0aW9uIFNlbGVjdGlvbihncm91cHMsIHBhcmVudHMpIHtcbiAgdGhpcy5fZ3JvdXBzID0gZ3JvdXBzO1xuICB0aGlzLl9wYXJlbnRzID0gcGFyZW50cztcbn1cblxuZnVuY3Rpb24gc2VsZWN0aW9uKCkge1xuICByZXR1cm4gbmV3IFNlbGVjdGlvbihbW2RvY3VtZW50LmRvY3VtZW50RWxlbWVudF1dLCByb290KTtcbn1cblxuZnVuY3Rpb24gc2VsZWN0aW9uX3NlbGVjdGlvbigpIHtcbiAgcmV0dXJuIHRoaXM7XG59XG5cblNlbGVjdGlvbi5wcm90b3R5cGUgPSBzZWxlY3Rpb24ucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogU2VsZWN0aW9uLFxuICBzZWxlY3Q6IHNlbGVjdGlvbl9zZWxlY3QsXG4gIHNlbGVjdEFsbDogc2VsZWN0aW9uX3NlbGVjdEFsbCxcbiAgc2VsZWN0Q2hpbGQ6IHNlbGVjdGlvbl9zZWxlY3RDaGlsZCxcbiAgc2VsZWN0Q2hpbGRyZW46IHNlbGVjdGlvbl9zZWxlY3RDaGlsZHJlbixcbiAgZmlsdGVyOiBzZWxlY3Rpb25fZmlsdGVyLFxuICBkYXRhOiBzZWxlY3Rpb25fZGF0YSxcbiAgZW50ZXI6IHNlbGVjdGlvbl9lbnRlcixcbiAgZXhpdDogc2VsZWN0aW9uX2V4aXQsXG4gIGpvaW46IHNlbGVjdGlvbl9qb2luLFxuICBtZXJnZTogc2VsZWN0aW9uX21lcmdlLFxuICBzZWxlY3Rpb246IHNlbGVjdGlvbl9zZWxlY3Rpb24sXG4gIG9yZGVyOiBzZWxlY3Rpb25fb3JkZXIsXG4gIHNvcnQ6IHNlbGVjdGlvbl9zb3J0LFxuICBjYWxsOiBzZWxlY3Rpb25fY2FsbCxcbiAgbm9kZXM6IHNlbGVjdGlvbl9ub2RlcyxcbiAgbm9kZTogc2VsZWN0aW9uX25vZGUsXG4gIHNpemU6IHNlbGVjdGlvbl9zaXplLFxuICBlbXB0eTogc2VsZWN0aW9uX2VtcHR5LFxuICBlYWNoOiBzZWxlY3Rpb25fZWFjaCxcbiAgYXR0cjogc2VsZWN0aW9uX2F0dHIsXG4gIHN0eWxlOiBzZWxlY3Rpb25fc3R5bGUsXG4gIHByb3BlcnR5OiBzZWxlY3Rpb25fcHJvcGVydHksXG4gIGNsYXNzZWQ6IHNlbGVjdGlvbl9jbGFzc2VkLFxuICB0ZXh0OiBzZWxlY3Rpb25fdGV4dCxcbiAgaHRtbDogc2VsZWN0aW9uX2h0bWwsXG4gIHJhaXNlOiBzZWxlY3Rpb25fcmFpc2UsXG4gIGxvd2VyOiBzZWxlY3Rpb25fbG93ZXIsXG4gIGFwcGVuZDogc2VsZWN0aW9uX2FwcGVuZCxcbiAgaW5zZXJ0OiBzZWxlY3Rpb25faW5zZXJ0LFxuICByZW1vdmU6IHNlbGVjdGlvbl9yZW1vdmUsXG4gIGNsb25lOiBzZWxlY3Rpb25fY2xvbmUsXG4gIGRhdHVtOiBzZWxlY3Rpb25fZGF0dW0sXG4gIG9uOiBzZWxlY3Rpb25fb24sXG4gIGRpc3BhdGNoOiBzZWxlY3Rpb25fZGlzcGF0Y2gsXG4gIFtTeW1ib2wuaXRlcmF0b3JdOiBzZWxlY3Rpb25faXRlcmF0b3Jcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHNlbGVjdGlvbjtcbiIsICJpbXBvcnQge1NlbGVjdGlvbiwgcm9vdH0gZnJvbSBcIi4vc2VsZWN0aW9uL2luZGV4LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gIHJldHVybiB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCJcbiAgICAgID8gbmV3IFNlbGVjdGlvbihbW2RvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpXV0sIFtkb2N1bWVudC5kb2N1bWVudEVsZW1lbnRdKVxuICAgICAgOiBuZXcgU2VsZWN0aW9uKFtbc2VsZWN0b3JdXSwgcm9vdCk7XG59XG4iLCAiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZXZlbnQpIHtcbiAgbGV0IHNvdXJjZUV2ZW50O1xuICB3aGlsZSAoc291cmNlRXZlbnQgPSBldmVudC5zb3VyY2VFdmVudCkgZXZlbnQgPSBzb3VyY2VFdmVudDtcbiAgcmV0dXJuIGV2ZW50O1xufVxuIiwgImltcG9ydCBzb3VyY2VFdmVudCBmcm9tIFwiLi9zb3VyY2VFdmVudC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihldmVudCwgbm9kZSkge1xuICBldmVudCA9IHNvdXJjZUV2ZW50KGV2ZW50KTtcbiAgaWYgKG5vZGUgPT09IHVuZGVmaW5lZCkgbm9kZSA9IGV2ZW50LmN1cnJlbnRUYXJnZXQ7XG4gIGlmIChub2RlKSB7XG4gICAgdmFyIHN2ZyA9IG5vZGUub3duZXJTVkdFbGVtZW50IHx8IG5vZGU7XG4gICAgaWYgKHN2Zy5jcmVhdGVTVkdQb2ludCkge1xuICAgICAgdmFyIHBvaW50ID0gc3ZnLmNyZWF0ZVNWR1BvaW50KCk7XG4gICAgICBwb2ludC54ID0gZXZlbnQuY2xpZW50WCwgcG9pbnQueSA9IGV2ZW50LmNsaWVudFk7XG4gICAgICBwb2ludCA9IHBvaW50Lm1hdHJpeFRyYW5zZm9ybShub2RlLmdldFNjcmVlbkNUTSgpLmludmVyc2UoKSk7XG4gICAgICByZXR1cm4gW3BvaW50LngsIHBvaW50LnldO1xuICAgIH1cbiAgICBpZiAobm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QpIHtcbiAgICAgIHZhciByZWN0ID0gbm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIHJldHVybiBbZXZlbnQuY2xpZW50WCAtIHJlY3QubGVmdCAtIG5vZGUuY2xpZW50TGVmdCwgZXZlbnQuY2xpZW50WSAtIHJlY3QudG9wIC0gbm9kZS5jbGllbnRUb3BdO1xuICAgIH1cbiAgfVxuICByZXR1cm4gW2V2ZW50LnBhZ2VYLCBldmVudC5wYWdlWV07XG59XG4iLCAiLy8gVGhlc2UgYXJlIHR5cGljYWxseSB1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGggbm9ldmVudCB0byBlbnN1cmUgdGhhdCB3ZSBjYW5cbi8vIHByZXZlbnREZWZhdWx0IG9uIHRoZSBldmVudC5cbmV4cG9ydCBjb25zdCBub25wYXNzaXZlID0ge3Bhc3NpdmU6IGZhbHNlfTtcbmV4cG9ydCBjb25zdCBub25wYXNzaXZlY2FwdHVyZSA9IHtjYXB0dXJlOiB0cnVlLCBwYXNzaXZlOiBmYWxzZX07XG5cbmV4cG9ydCBmdW5jdGlvbiBub3Byb3BhZ2F0aW9uKGV2ZW50KSB7XG4gIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihldmVudCkge1xuICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICBldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbn1cbiIsICJpbXBvcnQge3NlbGVjdH0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IG5vZXZlbnQsIHtub25wYXNzaXZlY2FwdHVyZX0gZnJvbSBcIi4vbm9ldmVudC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2aWV3KSB7XG4gIHZhciByb290ID0gdmlldy5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsXG4gICAgICBzZWxlY3Rpb24gPSBzZWxlY3Qodmlldykub24oXCJkcmFnc3RhcnQuZHJhZ1wiLCBub2V2ZW50LCBub25wYXNzaXZlY2FwdHVyZSk7XG4gIGlmIChcIm9uc2VsZWN0c3RhcnRcIiBpbiByb290KSB7XG4gICAgc2VsZWN0aW9uLm9uKFwic2VsZWN0c3RhcnQuZHJhZ1wiLCBub2V2ZW50LCBub25wYXNzaXZlY2FwdHVyZSk7XG4gIH0gZWxzZSB7XG4gICAgcm9vdC5fX25vc2VsZWN0ID0gcm9vdC5zdHlsZS5Nb3pVc2VyU2VsZWN0O1xuICAgIHJvb3Quc3R5bGUuTW96VXNlclNlbGVjdCA9IFwibm9uZVwiO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB5ZXNkcmFnKHZpZXcsIG5vY2xpY2spIHtcbiAgdmFyIHJvb3QgPSB2aWV3LmRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxcbiAgICAgIHNlbGVjdGlvbiA9IHNlbGVjdCh2aWV3KS5vbihcImRyYWdzdGFydC5kcmFnXCIsIG51bGwpO1xuICBpZiAobm9jbGljaykge1xuICAgIHNlbGVjdGlvbi5vbihcImNsaWNrLmRyYWdcIiwgbm9ldmVudCwgbm9ucGFzc2l2ZWNhcHR1cmUpO1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IHNlbGVjdGlvbi5vbihcImNsaWNrLmRyYWdcIiwgbnVsbCk7IH0sIDApO1xuICB9XG4gIGlmIChcIm9uc2VsZWN0c3RhcnRcIiBpbiByb290KSB7XG4gICAgc2VsZWN0aW9uLm9uKFwic2VsZWN0c3RhcnQuZHJhZ1wiLCBudWxsKTtcbiAgfSBlbHNlIHtcbiAgICByb290LnN0eWxlLk1velVzZXJTZWxlY3QgPSByb290Ll9fbm9zZWxlY3Q7XG4gICAgZGVsZXRlIHJvb3QuX19ub3NlbGVjdDtcbiAgfVxufVxuIiwgImV4cG9ydCBkZWZhdWx0IHggPT4gKCkgPT4geDtcbiIsICJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBEcmFnRXZlbnQodHlwZSwge1xuICBzb3VyY2VFdmVudCxcbiAgc3ViamVjdCxcbiAgdGFyZ2V0LFxuICBpZGVudGlmaWVyLFxuICBhY3RpdmUsXG4gIHgsIHksIGR4LCBkeSxcbiAgZGlzcGF0Y2hcbn0pIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGhpcywge1xuICAgIHR5cGU6IHt2YWx1ZTogdHlwZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlfSxcbiAgICBzb3VyY2VFdmVudDoge3ZhbHVlOiBzb3VyY2VFdmVudCwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlfSxcbiAgICBzdWJqZWN0OiB7dmFsdWU6IHN1YmplY3QsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZX0sXG4gICAgdGFyZ2V0OiB7dmFsdWU6IHRhcmdldCwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlfSxcbiAgICBpZGVudGlmaWVyOiB7dmFsdWU6IGlkZW50aWZpZXIsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZX0sXG4gICAgYWN0aXZlOiB7dmFsdWU6IGFjdGl2ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlfSxcbiAgICB4OiB7dmFsdWU6IHgsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZX0sXG4gICAgeToge3ZhbHVlOiB5LCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWV9LFxuICAgIGR4OiB7dmFsdWU6IGR4LCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWV9LFxuICAgIGR5OiB7dmFsdWU6IGR5LCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWV9LFxuICAgIF86IHt2YWx1ZTogZGlzcGF0Y2h9XG4gIH0pO1xufVxuXG5EcmFnRXZlbnQucHJvdG90eXBlLm9uID0gZnVuY3Rpb24oKSB7XG4gIHZhciB2YWx1ZSA9IHRoaXMuXy5vbi5hcHBseSh0aGlzLl8sIGFyZ3VtZW50cyk7XG4gIHJldHVybiB2YWx1ZSA9PT0gdGhpcy5fID8gdGhpcyA6IHZhbHVlO1xufTtcbiIsICJpbXBvcnQge2Rpc3BhdGNofSBmcm9tIFwiZDMtZGlzcGF0Y2hcIjtcbmltcG9ydCB7c2VsZWN0LCBwb2ludGVyfSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQgbm9kcmFnLCB7eWVzZHJhZ30gZnJvbSBcIi4vbm9kcmFnLmpzXCI7XG5pbXBvcnQgbm9ldmVudCwge25vbnBhc3NpdmUsIG5vbnBhc3NpdmVjYXB0dXJlLCBub3Byb3BhZ2F0aW9ufSBmcm9tIFwiLi9ub2V2ZW50LmpzXCI7XG5pbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnQuanNcIjtcbmltcG9ydCBEcmFnRXZlbnQgZnJvbSBcIi4vZXZlbnQuanNcIjtcblxuLy8gSWdub3JlIHJpZ2h0LWNsaWNrLCBzaW5jZSB0aGF0IHNob3VsZCBvcGVuIHRoZSBjb250ZXh0IG1lbnUuXG5mdW5jdGlvbiBkZWZhdWx0RmlsdGVyKGV2ZW50KSB7XG4gIHJldHVybiAhZXZlbnQuY3RybEtleSAmJiAhZXZlbnQuYnV0dG9uO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0Q29udGFpbmVyKCkge1xuICByZXR1cm4gdGhpcy5wYXJlbnROb2RlO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0U3ViamVjdChldmVudCwgZCkge1xuICByZXR1cm4gZCA9PSBudWxsID8ge3g6IGV2ZW50LngsIHk6IGV2ZW50Lnl9IDogZDtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdFRvdWNoYWJsZSgpIHtcbiAgcmV0dXJuIG5hdmlnYXRvci5tYXhUb3VjaFBvaW50cyB8fCAoXCJvbnRvdWNoc3RhcnRcIiBpbiB0aGlzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBmaWx0ZXIgPSBkZWZhdWx0RmlsdGVyLFxuICAgICAgY29udGFpbmVyID0gZGVmYXVsdENvbnRhaW5lcixcbiAgICAgIHN1YmplY3QgPSBkZWZhdWx0U3ViamVjdCxcbiAgICAgIHRvdWNoYWJsZSA9IGRlZmF1bHRUb3VjaGFibGUsXG4gICAgICBnZXN0dXJlcyA9IHt9LFxuICAgICAgbGlzdGVuZXJzID0gZGlzcGF0Y2goXCJzdGFydFwiLCBcImRyYWdcIiwgXCJlbmRcIiksXG4gICAgICBhY3RpdmUgPSAwLFxuICAgICAgbW91c2Vkb3dueCxcbiAgICAgIG1vdXNlZG93bnksXG4gICAgICBtb3VzZW1vdmluZyxcbiAgICAgIHRvdWNoZW5kaW5nLFxuICAgICAgY2xpY2tEaXN0YW5jZTIgPSAwO1xuXG4gIGZ1bmN0aW9uIGRyYWcoc2VsZWN0aW9uKSB7XG4gICAgc2VsZWN0aW9uXG4gICAgICAgIC5vbihcIm1vdXNlZG93bi5kcmFnXCIsIG1vdXNlZG93bmVkKVxuICAgICAgLmZpbHRlcih0b3VjaGFibGUpXG4gICAgICAgIC5vbihcInRvdWNoc3RhcnQuZHJhZ1wiLCB0b3VjaHN0YXJ0ZWQpXG4gICAgICAgIC5vbihcInRvdWNobW92ZS5kcmFnXCIsIHRvdWNobW92ZWQsIG5vbnBhc3NpdmUpXG4gICAgICAgIC5vbihcInRvdWNoZW5kLmRyYWcgdG91Y2hjYW5jZWwuZHJhZ1wiLCB0b3VjaGVuZGVkKVxuICAgICAgICAuc3R5bGUoXCJ0b3VjaC1hY3Rpb25cIiwgXCJub25lXCIpXG4gICAgICAgIC5zdHlsZShcIi13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvclwiLCBcInJnYmEoMCwwLDAsMClcIik7XG4gIH1cblxuICBmdW5jdGlvbiBtb3VzZWRvd25lZChldmVudCwgZCkge1xuICAgIGlmICh0b3VjaGVuZGluZyB8fCAhZmlsdGVyLmNhbGwodGhpcywgZXZlbnQsIGQpKSByZXR1cm47XG4gICAgdmFyIGdlc3R1cmUgPSBiZWZvcmVzdGFydCh0aGlzLCBjb250YWluZXIuY2FsbCh0aGlzLCBldmVudCwgZCksIGV2ZW50LCBkLCBcIm1vdXNlXCIpO1xuICAgIGlmICghZ2VzdHVyZSkgcmV0dXJuO1xuICAgIHNlbGVjdChldmVudC52aWV3KVxuICAgICAgLm9uKFwibW91c2Vtb3ZlLmRyYWdcIiwgbW91c2Vtb3ZlZCwgbm9ucGFzc2l2ZWNhcHR1cmUpXG4gICAgICAub24oXCJtb3VzZXVwLmRyYWdcIiwgbW91c2V1cHBlZCwgbm9ucGFzc2l2ZWNhcHR1cmUpO1xuICAgIG5vZHJhZyhldmVudC52aWV3KTtcbiAgICBub3Byb3BhZ2F0aW9uKGV2ZW50KTtcbiAgICBtb3VzZW1vdmluZyA9IGZhbHNlO1xuICAgIG1vdXNlZG93bnggPSBldmVudC5jbGllbnRYO1xuICAgIG1vdXNlZG93bnkgPSBldmVudC5jbGllbnRZO1xuICAgIGdlc3R1cmUoXCJzdGFydFwiLCBldmVudCk7XG4gIH1cblxuICBmdW5jdGlvbiBtb3VzZW1vdmVkKGV2ZW50KSB7XG4gICAgbm9ldmVudChldmVudCk7XG4gICAgaWYgKCFtb3VzZW1vdmluZykge1xuICAgICAgdmFyIGR4ID0gZXZlbnQuY2xpZW50WCAtIG1vdXNlZG93bngsIGR5ID0gZXZlbnQuY2xpZW50WSAtIG1vdXNlZG93bnk7XG4gICAgICBtb3VzZW1vdmluZyA9IGR4ICogZHggKyBkeSAqIGR5ID4gY2xpY2tEaXN0YW5jZTI7XG4gICAgfVxuICAgIGdlc3R1cmVzLm1vdXNlKFwiZHJhZ1wiLCBldmVudCk7XG4gIH1cblxuICBmdW5jdGlvbiBtb3VzZXVwcGVkKGV2ZW50KSB7XG4gICAgc2VsZWN0KGV2ZW50LnZpZXcpLm9uKFwibW91c2Vtb3ZlLmRyYWcgbW91c2V1cC5kcmFnXCIsIG51bGwpO1xuICAgIHllc2RyYWcoZXZlbnQudmlldywgbW91c2Vtb3ZpbmcpO1xuICAgIG5vZXZlbnQoZXZlbnQpO1xuICAgIGdlc3R1cmVzLm1vdXNlKFwiZW5kXCIsIGV2ZW50KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRvdWNoc3RhcnRlZChldmVudCwgZCkge1xuICAgIGlmICghZmlsdGVyLmNhbGwodGhpcywgZXZlbnQsIGQpKSByZXR1cm47XG4gICAgdmFyIHRvdWNoZXMgPSBldmVudC5jaGFuZ2VkVG91Y2hlcyxcbiAgICAgICAgYyA9IGNvbnRhaW5lci5jYWxsKHRoaXMsIGV2ZW50LCBkKSxcbiAgICAgICAgbiA9IHRvdWNoZXMubGVuZ3RoLCBpLCBnZXN0dXJlO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKGdlc3R1cmUgPSBiZWZvcmVzdGFydCh0aGlzLCBjLCBldmVudCwgZCwgdG91Y2hlc1tpXS5pZGVudGlmaWVyLCB0b3VjaGVzW2ldKSkge1xuICAgICAgICBub3Byb3BhZ2F0aW9uKGV2ZW50KTtcbiAgICAgICAgZ2VzdHVyZShcInN0YXJ0XCIsIGV2ZW50LCB0b3VjaGVzW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB0b3VjaG1vdmVkKGV2ZW50KSB7XG4gICAgdmFyIHRvdWNoZXMgPSBldmVudC5jaGFuZ2VkVG91Y2hlcyxcbiAgICAgICAgbiA9IHRvdWNoZXMubGVuZ3RoLCBpLCBnZXN0dXJlO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKGdlc3R1cmUgPSBnZXN0dXJlc1t0b3VjaGVzW2ldLmlkZW50aWZpZXJdKSB7XG4gICAgICAgIG5vZXZlbnQoZXZlbnQpO1xuICAgICAgICBnZXN0dXJlKFwiZHJhZ1wiLCBldmVudCwgdG91Y2hlc1tpXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdG91Y2hlbmRlZChldmVudCkge1xuICAgIHZhciB0b3VjaGVzID0gZXZlbnQuY2hhbmdlZFRvdWNoZXMsXG4gICAgICAgIG4gPSB0b3VjaGVzLmxlbmd0aCwgaSwgZ2VzdHVyZTtcblxuICAgIGlmICh0b3VjaGVuZGluZykgY2xlYXJUaW1lb3V0KHRvdWNoZW5kaW5nKTtcbiAgICB0b3VjaGVuZGluZyA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IHRvdWNoZW5kaW5nID0gbnVsbDsgfSwgNTAwKTsgLy8gR2hvc3QgY2xpY2tzIGFyZSBkZWxheWVkIVxuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChnZXN0dXJlID0gZ2VzdHVyZXNbdG91Y2hlc1tpXS5pZGVudGlmaWVyXSkge1xuICAgICAgICBub3Byb3BhZ2F0aW9uKGV2ZW50KTtcbiAgICAgICAgZ2VzdHVyZShcImVuZFwiLCBldmVudCwgdG91Y2hlc1tpXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gYmVmb3Jlc3RhcnQodGhhdCwgY29udGFpbmVyLCBldmVudCwgZCwgaWRlbnRpZmllciwgdG91Y2gpIHtcbiAgICB2YXIgZGlzcGF0Y2ggPSBsaXN0ZW5lcnMuY29weSgpLFxuICAgICAgICBwID0gcG9pbnRlcih0b3VjaCB8fCBldmVudCwgY29udGFpbmVyKSwgZHgsIGR5LFxuICAgICAgICBzO1xuXG4gICAgaWYgKChzID0gc3ViamVjdC5jYWxsKHRoYXQsIG5ldyBEcmFnRXZlbnQoXCJiZWZvcmVzdGFydFwiLCB7XG4gICAgICAgIHNvdXJjZUV2ZW50OiBldmVudCxcbiAgICAgICAgdGFyZ2V0OiBkcmFnLFxuICAgICAgICBpZGVudGlmaWVyLFxuICAgICAgICBhY3RpdmUsXG4gICAgICAgIHg6IHBbMF0sXG4gICAgICAgIHk6IHBbMV0sXG4gICAgICAgIGR4OiAwLFxuICAgICAgICBkeTogMCxcbiAgICAgICAgZGlzcGF0Y2hcbiAgICAgIH0pLCBkKSkgPT0gbnVsbCkgcmV0dXJuO1xuXG4gICAgZHggPSBzLnggLSBwWzBdIHx8IDA7XG4gICAgZHkgPSBzLnkgLSBwWzFdIHx8IDA7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gZ2VzdHVyZSh0eXBlLCBldmVudCwgdG91Y2gpIHtcbiAgICAgIHZhciBwMCA9IHAsIG47XG4gICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSBcInN0YXJ0XCI6IGdlc3R1cmVzW2lkZW50aWZpZXJdID0gZ2VzdHVyZSwgbiA9IGFjdGl2ZSsrOyBicmVhaztcbiAgICAgICAgY2FzZSBcImVuZFwiOiBkZWxldGUgZ2VzdHVyZXNbaWRlbnRpZmllcl0sIC0tYWN0aXZlOyAvLyBmYWxscyB0aHJvdWdoXG4gICAgICAgIGNhc2UgXCJkcmFnXCI6IHAgPSBwb2ludGVyKHRvdWNoIHx8IGV2ZW50LCBjb250YWluZXIpLCBuID0gYWN0aXZlOyBicmVhaztcbiAgICAgIH1cbiAgICAgIGRpc3BhdGNoLmNhbGwoXG4gICAgICAgIHR5cGUsXG4gICAgICAgIHRoYXQsXG4gICAgICAgIG5ldyBEcmFnRXZlbnQodHlwZSwge1xuICAgICAgICAgIHNvdXJjZUV2ZW50OiBldmVudCxcbiAgICAgICAgICBzdWJqZWN0OiBzLFxuICAgICAgICAgIHRhcmdldDogZHJhZyxcbiAgICAgICAgICBpZGVudGlmaWVyLFxuICAgICAgICAgIGFjdGl2ZTogbixcbiAgICAgICAgICB4OiBwWzBdICsgZHgsXG4gICAgICAgICAgeTogcFsxXSArIGR5LFxuICAgICAgICAgIGR4OiBwWzBdIC0gcDBbMF0sXG4gICAgICAgICAgZHk6IHBbMV0gLSBwMFsxXSxcbiAgICAgICAgICBkaXNwYXRjaFxuICAgICAgICB9KSxcbiAgICAgICAgZFxuICAgICAgKTtcbiAgICB9O1xuICB9XG5cbiAgZHJhZy5maWx0ZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZmlsdGVyID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCghIV8pLCBkcmFnKSA6IGZpbHRlcjtcbiAgfTtcblxuICBkcmFnLmNvbnRhaW5lciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjb250YWluZXIgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KF8pLCBkcmFnKSA6IGNvbnRhaW5lcjtcbiAgfTtcblxuICBkcmFnLnN1YmplY3QgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc3ViamVjdCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoXyksIGRyYWcpIDogc3ViamVjdDtcbiAgfTtcblxuICBkcmFnLnRvdWNoYWJsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0b3VjaGFibGUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCEhXyksIGRyYWcpIDogdG91Y2hhYmxlO1xuICB9O1xuXG4gIGRyYWcub24gPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdmFsdWUgPSBsaXN0ZW5lcnMub24uYXBwbHkobGlzdGVuZXJzLCBhcmd1bWVudHMpO1xuICAgIHJldHVybiB2YWx1ZSA9PT0gbGlzdGVuZXJzID8gZHJhZyA6IHZhbHVlO1xuICB9O1xuXG4gIGRyYWcuY2xpY2tEaXN0YW5jZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjbGlja0Rpc3RhbmNlMiA9IChfID0gK18pICogXywgZHJhZykgOiBNYXRoLnNxcnQoY2xpY2tEaXN0YW5jZTIpO1xuICB9O1xuXG4gIHJldHVybiBkcmFnO1xufVxuIiwgImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNvbnN0cnVjdG9yLCBmYWN0b3J5LCBwcm90b3R5cGUpIHtcbiAgY29uc3RydWN0b3IucHJvdG90eXBlID0gZmFjdG9yeS5wcm90b3R5cGUgPSBwcm90b3R5cGU7XG4gIHByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGNvbnN0cnVjdG9yO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZXh0ZW5kKHBhcmVudCwgZGVmaW5pdGlvbikge1xuICB2YXIgcHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShwYXJlbnQucHJvdG90eXBlKTtcbiAgZm9yICh2YXIga2V5IGluIGRlZmluaXRpb24pIHByb3RvdHlwZVtrZXldID0gZGVmaW5pdGlvbltrZXldO1xuICByZXR1cm4gcHJvdG90eXBlO1xufVxuIiwgImltcG9ydCBkZWZpbmUsIHtleHRlbmR9IGZyb20gXCIuL2RlZmluZS5qc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gQ29sb3IoKSB7fVxuXG5leHBvcnQgdmFyIGRhcmtlciA9IDAuNztcbmV4cG9ydCB2YXIgYnJpZ2h0ZXIgPSAxIC8gZGFya2VyO1xuXG52YXIgcmVJID0gXCJcXFxccyooWystXT9cXFxcZCspXFxcXHMqXCIsXG4gICAgcmVOID0gXCJcXFxccyooWystXT8oPzpcXFxcZCpcXFxcLik/XFxcXGQrKD86W2VFXVsrLV0/XFxcXGQrKT8pXFxcXHMqXCIsXG4gICAgcmVQID0gXCJcXFxccyooWystXT8oPzpcXFxcZCpcXFxcLik/XFxcXGQrKD86W2VFXVsrLV0/XFxcXGQrKT8pJVxcXFxzKlwiLFxuICAgIHJlSGV4ID0gL14jKFswLTlhLWZdezMsOH0pJC8sXG4gICAgcmVSZ2JJbnRlZ2VyID0gbmV3IFJlZ0V4cChgXnJnYlxcXFwoJHtyZUl9LCR7cmVJfSwke3JlSX1cXFxcKSRgKSxcbiAgICByZVJnYlBlcmNlbnQgPSBuZXcgUmVnRXhwKGBecmdiXFxcXCgke3JlUH0sJHtyZVB9LCR7cmVQfVxcXFwpJGApLFxuICAgIHJlUmdiYUludGVnZXIgPSBuZXcgUmVnRXhwKGBecmdiYVxcXFwoJHtyZUl9LCR7cmVJfSwke3JlSX0sJHtyZU59XFxcXCkkYCksXG4gICAgcmVSZ2JhUGVyY2VudCA9IG5ldyBSZWdFeHAoYF5yZ2JhXFxcXCgke3JlUH0sJHtyZVB9LCR7cmVQfSwke3JlTn1cXFxcKSRgKSxcbiAgICByZUhzbFBlcmNlbnQgPSBuZXcgUmVnRXhwKGBeaHNsXFxcXCgke3JlTn0sJHtyZVB9LCR7cmVQfVxcXFwpJGApLFxuICAgIHJlSHNsYVBlcmNlbnQgPSBuZXcgUmVnRXhwKGBeaHNsYVxcXFwoJHtyZU59LCR7cmVQfSwke3JlUH0sJHtyZU59XFxcXCkkYCk7XG5cbnZhciBuYW1lZCA9IHtcbiAgYWxpY2VibHVlOiAweGYwZjhmZixcbiAgYW50aXF1ZXdoaXRlOiAweGZhZWJkNyxcbiAgYXF1YTogMHgwMGZmZmYsXG4gIGFxdWFtYXJpbmU6IDB4N2ZmZmQ0LFxuICBhenVyZTogMHhmMGZmZmYsXG4gIGJlaWdlOiAweGY1ZjVkYyxcbiAgYmlzcXVlOiAweGZmZTRjNCxcbiAgYmxhY2s6IDB4MDAwMDAwLFxuICBibGFuY2hlZGFsbW9uZDogMHhmZmViY2QsXG4gIGJsdWU6IDB4MDAwMGZmLFxuICBibHVldmlvbGV0OiAweDhhMmJlMixcbiAgYnJvd246IDB4YTUyYTJhLFxuICBidXJseXdvb2Q6IDB4ZGViODg3LFxuICBjYWRldGJsdWU6IDB4NWY5ZWEwLFxuICBjaGFydHJldXNlOiAweDdmZmYwMCxcbiAgY2hvY29sYXRlOiAweGQyNjkxZSxcbiAgY29yYWw6IDB4ZmY3ZjUwLFxuICBjb3JuZmxvd2VyYmx1ZTogMHg2NDk1ZWQsXG4gIGNvcm5zaWxrOiAweGZmZjhkYyxcbiAgY3JpbXNvbjogMHhkYzE0M2MsXG4gIGN5YW46IDB4MDBmZmZmLFxuICBkYXJrYmx1ZTogMHgwMDAwOGIsXG4gIGRhcmtjeWFuOiAweDAwOGI4YixcbiAgZGFya2dvbGRlbnJvZDogMHhiODg2MGIsXG4gIGRhcmtncmF5OiAweGE5YTlhOSxcbiAgZGFya2dyZWVuOiAweDAwNjQwMCxcbiAgZGFya2dyZXk6IDB4YTlhOWE5LFxuICBkYXJra2hha2k6IDB4YmRiNzZiLFxuICBkYXJrbWFnZW50YTogMHg4YjAwOGIsXG4gIGRhcmtvbGl2ZWdyZWVuOiAweDU1NmIyZixcbiAgZGFya29yYW5nZTogMHhmZjhjMDAsXG4gIGRhcmtvcmNoaWQ6IDB4OTkzMmNjLFxuICBkYXJrcmVkOiAweDhiMDAwMCxcbiAgZGFya3NhbG1vbjogMHhlOTk2N2EsXG4gIGRhcmtzZWFncmVlbjogMHg4ZmJjOGYsXG4gIGRhcmtzbGF0ZWJsdWU6IDB4NDgzZDhiLFxuICBkYXJrc2xhdGVncmF5OiAweDJmNGY0ZixcbiAgZGFya3NsYXRlZ3JleTogMHgyZjRmNGYsXG4gIGRhcmt0dXJxdW9pc2U6IDB4MDBjZWQxLFxuICBkYXJrdmlvbGV0OiAweDk0MDBkMyxcbiAgZGVlcHBpbms6IDB4ZmYxNDkzLFxuICBkZWVwc2t5Ymx1ZTogMHgwMGJmZmYsXG4gIGRpbWdyYXk6IDB4Njk2OTY5LFxuICBkaW1ncmV5OiAweDY5Njk2OSxcbiAgZG9kZ2VyYmx1ZTogMHgxZTkwZmYsXG4gIGZpcmVicmljazogMHhiMjIyMjIsXG4gIGZsb3JhbHdoaXRlOiAweGZmZmFmMCxcbiAgZm9yZXN0Z3JlZW46IDB4MjI4YjIyLFxuICBmdWNoc2lhOiAweGZmMDBmZixcbiAgZ2FpbnNib3JvOiAweGRjZGNkYyxcbiAgZ2hvc3R3aGl0ZTogMHhmOGY4ZmYsXG4gIGdvbGQ6IDB4ZmZkNzAwLFxuICBnb2xkZW5yb2Q6IDB4ZGFhNTIwLFxuICBncmF5OiAweDgwODA4MCxcbiAgZ3JlZW46IDB4MDA4MDAwLFxuICBncmVlbnllbGxvdzogMHhhZGZmMmYsXG4gIGdyZXk6IDB4ODA4MDgwLFxuICBob25leWRldzogMHhmMGZmZjAsXG4gIGhvdHBpbms6IDB4ZmY2OWI0LFxuICBpbmRpYW5yZWQ6IDB4Y2Q1YzVjLFxuICBpbmRpZ286IDB4NGIwMDgyLFxuICBpdm9yeTogMHhmZmZmZjAsXG4gIGtoYWtpOiAweGYwZTY4YyxcbiAgbGF2ZW5kZXI6IDB4ZTZlNmZhLFxuICBsYXZlbmRlcmJsdXNoOiAweGZmZjBmNSxcbiAgbGF3bmdyZWVuOiAweDdjZmMwMCxcbiAgbGVtb25jaGlmZm9uOiAweGZmZmFjZCxcbiAgbGlnaHRibHVlOiAweGFkZDhlNixcbiAgbGlnaHRjb3JhbDogMHhmMDgwODAsXG4gIGxpZ2h0Y3lhbjogMHhlMGZmZmYsXG4gIGxpZ2h0Z29sZGVucm9keWVsbG93OiAweGZhZmFkMixcbiAgbGlnaHRncmF5OiAweGQzZDNkMyxcbiAgbGlnaHRncmVlbjogMHg5MGVlOTAsXG4gIGxpZ2h0Z3JleTogMHhkM2QzZDMsXG4gIGxpZ2h0cGluazogMHhmZmI2YzEsXG4gIGxpZ2h0c2FsbW9uOiAweGZmYTA3YSxcbiAgbGlnaHRzZWFncmVlbjogMHgyMGIyYWEsXG4gIGxpZ2h0c2t5Ymx1ZTogMHg4N2NlZmEsXG4gIGxpZ2h0c2xhdGVncmF5OiAweDc3ODg5OSxcbiAgbGlnaHRzbGF0ZWdyZXk6IDB4Nzc4ODk5LFxuICBsaWdodHN0ZWVsYmx1ZTogMHhiMGM0ZGUsXG4gIGxpZ2h0eWVsbG93OiAweGZmZmZlMCxcbiAgbGltZTogMHgwMGZmMDAsXG4gIGxpbWVncmVlbjogMHgzMmNkMzIsXG4gIGxpbmVuOiAweGZhZjBlNixcbiAgbWFnZW50YTogMHhmZjAwZmYsXG4gIG1hcm9vbjogMHg4MDAwMDAsXG4gIG1lZGl1bWFxdWFtYXJpbmU6IDB4NjZjZGFhLFxuICBtZWRpdW1ibHVlOiAweDAwMDBjZCxcbiAgbWVkaXVtb3JjaGlkOiAweGJhNTVkMyxcbiAgbWVkaXVtcHVycGxlOiAweDkzNzBkYixcbiAgbWVkaXVtc2VhZ3JlZW46IDB4M2NiMzcxLFxuICBtZWRpdW1zbGF0ZWJsdWU6IDB4N2I2OGVlLFxuICBtZWRpdW1zcHJpbmdncmVlbjogMHgwMGZhOWEsXG4gIG1lZGl1bXR1cnF1b2lzZTogMHg0OGQxY2MsXG4gIG1lZGl1bXZpb2xldHJlZDogMHhjNzE1ODUsXG4gIG1pZG5pZ2h0Ymx1ZTogMHgxOTE5NzAsXG4gIG1pbnRjcmVhbTogMHhmNWZmZmEsXG4gIG1pc3R5cm9zZTogMHhmZmU0ZTEsXG4gIG1vY2Nhc2luOiAweGZmZTRiNSxcbiAgbmF2YWpvd2hpdGU6IDB4ZmZkZWFkLFxuICBuYXZ5OiAweDAwMDA4MCxcbiAgb2xkbGFjZTogMHhmZGY1ZTYsXG4gIG9saXZlOiAweDgwODAwMCxcbiAgb2xpdmVkcmFiOiAweDZiOGUyMyxcbiAgb3JhbmdlOiAweGZmYTUwMCxcbiAgb3JhbmdlcmVkOiAweGZmNDUwMCxcbiAgb3JjaGlkOiAweGRhNzBkNixcbiAgcGFsZWdvbGRlbnJvZDogMHhlZWU4YWEsXG4gIHBhbGVncmVlbjogMHg5OGZiOTgsXG4gIHBhbGV0dXJxdW9pc2U6IDB4YWZlZWVlLFxuICBwYWxldmlvbGV0cmVkOiAweGRiNzA5MyxcbiAgcGFwYXlhd2hpcDogMHhmZmVmZDUsXG4gIHBlYWNocHVmZjogMHhmZmRhYjksXG4gIHBlcnU6IDB4Y2Q4NTNmLFxuICBwaW5rOiAweGZmYzBjYixcbiAgcGx1bTogMHhkZGEwZGQsXG4gIHBvd2RlcmJsdWU6IDB4YjBlMGU2LFxuICBwdXJwbGU6IDB4ODAwMDgwLFxuICByZWJlY2NhcHVycGxlOiAweDY2MzM5OSxcbiAgcmVkOiAweGZmMDAwMCxcbiAgcm9zeWJyb3duOiAweGJjOGY4ZixcbiAgcm95YWxibHVlOiAweDQxNjllMSxcbiAgc2FkZGxlYnJvd246IDB4OGI0NTEzLFxuICBzYWxtb246IDB4ZmE4MDcyLFxuICBzYW5keWJyb3duOiAweGY0YTQ2MCxcbiAgc2VhZ3JlZW46IDB4MmU4YjU3LFxuICBzZWFzaGVsbDogMHhmZmY1ZWUsXG4gIHNpZW5uYTogMHhhMDUyMmQsXG4gIHNpbHZlcjogMHhjMGMwYzAsXG4gIHNreWJsdWU6IDB4ODdjZWViLFxuICBzbGF0ZWJsdWU6IDB4NmE1YWNkLFxuICBzbGF0ZWdyYXk6IDB4NzA4MDkwLFxuICBzbGF0ZWdyZXk6IDB4NzA4MDkwLFxuICBzbm93OiAweGZmZmFmYSxcbiAgc3ByaW5nZ3JlZW46IDB4MDBmZjdmLFxuICBzdGVlbGJsdWU6IDB4NDY4MmI0LFxuICB0YW46IDB4ZDJiNDhjLFxuICB0ZWFsOiAweDAwODA4MCxcbiAgdGhpc3RsZTogMHhkOGJmZDgsXG4gIHRvbWF0bzogMHhmZjYzNDcsXG4gIHR1cnF1b2lzZTogMHg0MGUwZDAsXG4gIHZpb2xldDogMHhlZTgyZWUsXG4gIHdoZWF0OiAweGY1ZGViMyxcbiAgd2hpdGU6IDB4ZmZmZmZmLFxuICB3aGl0ZXNtb2tlOiAweGY1ZjVmNSxcbiAgeWVsbG93OiAweGZmZmYwMCxcbiAgeWVsbG93Z3JlZW46IDB4OWFjZDMyXG59O1xuXG5kZWZpbmUoQ29sb3IsIGNvbG9yLCB7XG4gIGNvcHkoY2hhbm5lbHMpIHtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihuZXcgdGhpcy5jb25zdHJ1Y3RvciwgdGhpcywgY2hhbm5lbHMpO1xuICB9LFxuICBkaXNwbGF5YWJsZSgpIHtcbiAgICByZXR1cm4gdGhpcy5yZ2IoKS5kaXNwbGF5YWJsZSgpO1xuICB9LFxuICBoZXg6IGNvbG9yX2Zvcm1hdEhleCwgLy8gRGVwcmVjYXRlZCEgVXNlIGNvbG9yLmZvcm1hdEhleC5cbiAgZm9ybWF0SGV4OiBjb2xvcl9mb3JtYXRIZXgsXG4gIGZvcm1hdEhleDg6IGNvbG9yX2Zvcm1hdEhleDgsXG4gIGZvcm1hdEhzbDogY29sb3JfZm9ybWF0SHNsLFxuICBmb3JtYXRSZ2I6IGNvbG9yX2Zvcm1hdFJnYixcbiAgdG9TdHJpbmc6IGNvbG9yX2Zvcm1hdFJnYlxufSk7XG5cbmZ1bmN0aW9uIGNvbG9yX2Zvcm1hdEhleCgpIHtcbiAgcmV0dXJuIHRoaXMucmdiKCkuZm9ybWF0SGV4KCk7XG59XG5cbmZ1bmN0aW9uIGNvbG9yX2Zvcm1hdEhleDgoKSB7XG4gIHJldHVybiB0aGlzLnJnYigpLmZvcm1hdEhleDgoKTtcbn1cblxuZnVuY3Rpb24gY29sb3JfZm9ybWF0SHNsKCkge1xuICByZXR1cm4gaHNsQ29udmVydCh0aGlzKS5mb3JtYXRIc2woKTtcbn1cblxuZnVuY3Rpb24gY29sb3JfZm9ybWF0UmdiKCkge1xuICByZXR1cm4gdGhpcy5yZ2IoKS5mb3JtYXRSZ2IoKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29sb3IoZm9ybWF0KSB7XG4gIHZhciBtLCBsO1xuICBmb3JtYXQgPSAoZm9ybWF0ICsgXCJcIikudHJpbSgpLnRvTG93ZXJDYXNlKCk7XG4gIHJldHVybiAobSA9IHJlSGV4LmV4ZWMoZm9ybWF0KSkgPyAobCA9IG1bMV0ubGVuZ3RoLCBtID0gcGFyc2VJbnQobVsxXSwgMTYpLCBsID09PSA2ID8gcmdibihtKSAvLyAjZmYwMDAwXG4gICAgICA6IGwgPT09IDMgPyBuZXcgUmdiKChtID4+IDggJiAweGYpIHwgKG0gPj4gNCAmIDB4ZjApLCAobSA+PiA0ICYgMHhmKSB8IChtICYgMHhmMCksICgobSAmIDB4ZikgPDwgNCkgfCAobSAmIDB4ZiksIDEpIC8vICNmMDBcbiAgICAgIDogbCA9PT0gOCA/IHJnYmEobSA+PiAyNCAmIDB4ZmYsIG0gPj4gMTYgJiAweGZmLCBtID4+IDggJiAweGZmLCAobSAmIDB4ZmYpIC8gMHhmZikgLy8gI2ZmMDAwMDAwXG4gICAgICA6IGwgPT09IDQgPyByZ2JhKChtID4+IDEyICYgMHhmKSB8IChtID4+IDggJiAweGYwKSwgKG0gPj4gOCAmIDB4ZikgfCAobSA+PiA0ICYgMHhmMCksIChtID4+IDQgJiAweGYpIHwgKG0gJiAweGYwKSwgKCgobSAmIDB4ZikgPDwgNCkgfCAobSAmIDB4ZikpIC8gMHhmZikgLy8gI2YwMDBcbiAgICAgIDogbnVsbCkgLy8gaW52YWxpZCBoZXhcbiAgICAgIDogKG0gPSByZVJnYkludGVnZXIuZXhlYyhmb3JtYXQpKSA/IG5ldyBSZ2IobVsxXSwgbVsyXSwgbVszXSwgMSkgLy8gcmdiKDI1NSwgMCwgMClcbiAgICAgIDogKG0gPSByZVJnYlBlcmNlbnQuZXhlYyhmb3JtYXQpKSA/IG5ldyBSZ2IobVsxXSAqIDI1NSAvIDEwMCwgbVsyXSAqIDI1NSAvIDEwMCwgbVszXSAqIDI1NSAvIDEwMCwgMSkgLy8gcmdiKDEwMCUsIDAlLCAwJSlcbiAgICAgIDogKG0gPSByZVJnYmFJbnRlZ2VyLmV4ZWMoZm9ybWF0KSkgPyByZ2JhKG1bMV0sIG1bMl0sIG1bM10sIG1bNF0pIC8vIHJnYmEoMjU1LCAwLCAwLCAxKVxuICAgICAgOiAobSA9IHJlUmdiYVBlcmNlbnQuZXhlYyhmb3JtYXQpKSA/IHJnYmEobVsxXSAqIDI1NSAvIDEwMCwgbVsyXSAqIDI1NSAvIDEwMCwgbVszXSAqIDI1NSAvIDEwMCwgbVs0XSkgLy8gcmdiKDEwMCUsIDAlLCAwJSwgMSlcbiAgICAgIDogKG0gPSByZUhzbFBlcmNlbnQuZXhlYyhmb3JtYXQpKSA/IGhzbGEobVsxXSwgbVsyXSAvIDEwMCwgbVszXSAvIDEwMCwgMSkgLy8gaHNsKDEyMCwgNTAlLCA1MCUpXG4gICAgICA6IChtID0gcmVIc2xhUGVyY2VudC5leGVjKGZvcm1hdCkpID8gaHNsYShtWzFdLCBtWzJdIC8gMTAwLCBtWzNdIC8gMTAwLCBtWzRdKSAvLyBoc2xhKDEyMCwgNTAlLCA1MCUsIDEpXG4gICAgICA6IG5hbWVkLmhhc093blByb3BlcnR5KGZvcm1hdCkgPyByZ2JuKG5hbWVkW2Zvcm1hdF0pIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG4gICAgICA6IGZvcm1hdCA9PT0gXCJ0cmFuc3BhcmVudFwiID8gbmV3IFJnYihOYU4sIE5hTiwgTmFOLCAwKVxuICAgICAgOiBudWxsO1xufVxuXG5mdW5jdGlvbiByZ2JuKG4pIHtcbiAgcmV0dXJuIG5ldyBSZ2IobiA+PiAxNiAmIDB4ZmYsIG4gPj4gOCAmIDB4ZmYsIG4gJiAweGZmLCAxKTtcbn1cblxuZnVuY3Rpb24gcmdiYShyLCBnLCBiLCBhKSB7XG4gIGlmIChhIDw9IDApIHIgPSBnID0gYiA9IE5hTjtcbiAgcmV0dXJuIG5ldyBSZ2IociwgZywgYiwgYSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZ2JDb252ZXJ0KG8pIHtcbiAgaWYgKCEobyBpbnN0YW5jZW9mIENvbG9yKSkgbyA9IGNvbG9yKG8pO1xuICBpZiAoIW8pIHJldHVybiBuZXcgUmdiO1xuICBvID0gby5yZ2IoKTtcbiAgcmV0dXJuIG5ldyBSZ2Ioby5yLCBvLmcsIG8uYiwgby5vcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJnYihyLCBnLCBiLCBvcGFjaXR5KSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gcmdiQ29udmVydChyKSA6IG5ldyBSZ2IociwgZywgYiwgb3BhY2l0eSA9PSBudWxsID8gMSA6IG9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gUmdiKHIsIGcsIGIsIG9wYWNpdHkpIHtcbiAgdGhpcy5yID0gK3I7XG4gIHRoaXMuZyA9ICtnO1xuICB0aGlzLmIgPSArYjtcbiAgdGhpcy5vcGFjaXR5ID0gK29wYWNpdHk7XG59XG5cbmRlZmluZShSZ2IsIHJnYiwgZXh0ZW5kKENvbG9yLCB7XG4gIGJyaWdodGVyKGspIHtcbiAgICBrID0gayA9PSBudWxsID8gYnJpZ2h0ZXIgOiBNYXRoLnBvdyhicmlnaHRlciwgayk7XG4gICAgcmV0dXJuIG5ldyBSZ2IodGhpcy5yICogaywgdGhpcy5nICogaywgdGhpcy5iICogaywgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgZGFya2VyKGspIHtcbiAgICBrID0gayA9PSBudWxsID8gZGFya2VyIDogTWF0aC5wb3coZGFya2VyLCBrKTtcbiAgICByZXR1cm4gbmV3IFJnYih0aGlzLnIgKiBrLCB0aGlzLmcgKiBrLCB0aGlzLmIgKiBrLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICByZ2IoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG4gIGNsYW1wKCkge1xuICAgIHJldHVybiBuZXcgUmdiKGNsYW1waSh0aGlzLnIpLCBjbGFtcGkodGhpcy5nKSwgY2xhbXBpKHRoaXMuYiksIGNsYW1wYSh0aGlzLm9wYWNpdHkpKTtcbiAgfSxcbiAgZGlzcGxheWFibGUoKSB7XG4gICAgcmV0dXJuICgtMC41IDw9IHRoaXMuciAmJiB0aGlzLnIgPCAyNTUuNSlcbiAgICAgICAgJiYgKC0wLjUgPD0gdGhpcy5nICYmIHRoaXMuZyA8IDI1NS41KVxuICAgICAgICAmJiAoLTAuNSA8PSB0aGlzLmIgJiYgdGhpcy5iIDwgMjU1LjUpXG4gICAgICAgICYmICgwIDw9IHRoaXMub3BhY2l0eSAmJiB0aGlzLm9wYWNpdHkgPD0gMSk7XG4gIH0sXG4gIGhleDogcmdiX2Zvcm1hdEhleCwgLy8gRGVwcmVjYXRlZCEgVXNlIGNvbG9yLmZvcm1hdEhleC5cbiAgZm9ybWF0SGV4OiByZ2JfZm9ybWF0SGV4LFxuICBmb3JtYXRIZXg4OiByZ2JfZm9ybWF0SGV4OCxcbiAgZm9ybWF0UmdiOiByZ2JfZm9ybWF0UmdiLFxuICB0b1N0cmluZzogcmdiX2Zvcm1hdFJnYlxufSkpO1xuXG5mdW5jdGlvbiByZ2JfZm9ybWF0SGV4KCkge1xuICByZXR1cm4gYCMke2hleCh0aGlzLnIpfSR7aGV4KHRoaXMuZyl9JHtoZXgodGhpcy5iKX1gO1xufVxuXG5mdW5jdGlvbiByZ2JfZm9ybWF0SGV4OCgpIHtcbiAgcmV0dXJuIGAjJHtoZXgodGhpcy5yKX0ke2hleCh0aGlzLmcpfSR7aGV4KHRoaXMuYil9JHtoZXgoKGlzTmFOKHRoaXMub3BhY2l0eSkgPyAxIDogdGhpcy5vcGFjaXR5KSAqIDI1NSl9YDtcbn1cblxuZnVuY3Rpb24gcmdiX2Zvcm1hdFJnYigpIHtcbiAgY29uc3QgYSA9IGNsYW1wYSh0aGlzLm9wYWNpdHkpO1xuICByZXR1cm4gYCR7YSA9PT0gMSA/IFwicmdiKFwiIDogXCJyZ2JhKFwifSR7Y2xhbXBpKHRoaXMucil9LCAke2NsYW1waSh0aGlzLmcpfSwgJHtjbGFtcGkodGhpcy5iKX0ke2EgPT09IDEgPyBcIilcIiA6IGAsICR7YX0pYH1gO1xufVxuXG5mdW5jdGlvbiBjbGFtcGEob3BhY2l0eSkge1xuICByZXR1cm4gaXNOYU4ob3BhY2l0eSkgPyAxIDogTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgb3BhY2l0eSkpO1xufVxuXG5mdW5jdGlvbiBjbGFtcGkodmFsdWUpIHtcbiAgcmV0dXJuIE1hdGgubWF4KDAsIE1hdGgubWluKDI1NSwgTWF0aC5yb3VuZCh2YWx1ZSkgfHwgMCkpO1xufVxuXG5mdW5jdGlvbiBoZXgodmFsdWUpIHtcbiAgdmFsdWUgPSBjbGFtcGkodmFsdWUpO1xuICByZXR1cm4gKHZhbHVlIDwgMTYgPyBcIjBcIiA6IFwiXCIpICsgdmFsdWUudG9TdHJpbmcoMTYpO1xufVxuXG5mdW5jdGlvbiBoc2xhKGgsIHMsIGwsIGEpIHtcbiAgaWYgKGEgPD0gMCkgaCA9IHMgPSBsID0gTmFOO1xuICBlbHNlIGlmIChsIDw9IDAgfHwgbCA+PSAxKSBoID0gcyA9IE5hTjtcbiAgZWxzZSBpZiAocyA8PSAwKSBoID0gTmFOO1xuICByZXR1cm4gbmV3IEhzbChoLCBzLCBsLCBhKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhzbENvbnZlcnQobykge1xuICBpZiAobyBpbnN0YW5jZW9mIEhzbCkgcmV0dXJuIG5ldyBIc2woby5oLCBvLnMsIG8ubCwgby5vcGFjaXR5KTtcbiAgaWYgKCEobyBpbnN0YW5jZW9mIENvbG9yKSkgbyA9IGNvbG9yKG8pO1xuICBpZiAoIW8pIHJldHVybiBuZXcgSHNsO1xuICBpZiAobyBpbnN0YW5jZW9mIEhzbCkgcmV0dXJuIG87XG4gIG8gPSBvLnJnYigpO1xuICB2YXIgciA9IG8uciAvIDI1NSxcbiAgICAgIGcgPSBvLmcgLyAyNTUsXG4gICAgICBiID0gby5iIC8gMjU1LFxuICAgICAgbWluID0gTWF0aC5taW4ociwgZywgYiksXG4gICAgICBtYXggPSBNYXRoLm1heChyLCBnLCBiKSxcbiAgICAgIGggPSBOYU4sXG4gICAgICBzID0gbWF4IC0gbWluLFxuICAgICAgbCA9IChtYXggKyBtaW4pIC8gMjtcbiAgaWYgKHMpIHtcbiAgICBpZiAociA9PT0gbWF4KSBoID0gKGcgLSBiKSAvIHMgKyAoZyA8IGIpICogNjtcbiAgICBlbHNlIGlmIChnID09PSBtYXgpIGggPSAoYiAtIHIpIC8gcyArIDI7XG4gICAgZWxzZSBoID0gKHIgLSBnKSAvIHMgKyA0O1xuICAgIHMgLz0gbCA8IDAuNSA/IG1heCArIG1pbiA6IDIgLSBtYXggLSBtaW47XG4gICAgaCAqPSA2MDtcbiAgfSBlbHNlIHtcbiAgICBzID0gbCA+IDAgJiYgbCA8IDEgPyAwIDogaDtcbiAgfVxuICByZXR1cm4gbmV3IEhzbChoLCBzLCBsLCBvLm9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaHNsKGgsIHMsIGwsIG9wYWNpdHkpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyBoc2xDb252ZXJ0KGgpIDogbmV3IEhzbChoLCBzLCBsLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XG59XG5cbmZ1bmN0aW9uIEhzbChoLCBzLCBsLCBvcGFjaXR5KSB7XG4gIHRoaXMuaCA9ICtoO1xuICB0aGlzLnMgPSArcztcbiAgdGhpcy5sID0gK2w7XG4gIHRoaXMub3BhY2l0eSA9ICtvcGFjaXR5O1xufVxuXG5kZWZpbmUoSHNsLCBoc2wsIGV4dGVuZChDb2xvciwge1xuICBicmlnaHRlcihrKSB7XG4gICAgayA9IGsgPT0gbnVsbCA/IGJyaWdodGVyIDogTWF0aC5wb3coYnJpZ2h0ZXIsIGspO1xuICAgIHJldHVybiBuZXcgSHNsKHRoaXMuaCwgdGhpcy5zLCB0aGlzLmwgKiBrLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICBkYXJrZXIoaykge1xuICAgIGsgPSBrID09IG51bGwgPyBkYXJrZXIgOiBNYXRoLnBvdyhkYXJrZXIsIGspO1xuICAgIHJldHVybiBuZXcgSHNsKHRoaXMuaCwgdGhpcy5zLCB0aGlzLmwgKiBrLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICByZ2IoKSB7XG4gICAgdmFyIGggPSB0aGlzLmggJSAzNjAgKyAodGhpcy5oIDwgMCkgKiAzNjAsXG4gICAgICAgIHMgPSBpc05hTihoKSB8fCBpc05hTih0aGlzLnMpID8gMCA6IHRoaXMucyxcbiAgICAgICAgbCA9IHRoaXMubCxcbiAgICAgICAgbTIgPSBsICsgKGwgPCAwLjUgPyBsIDogMSAtIGwpICogcyxcbiAgICAgICAgbTEgPSAyICogbCAtIG0yO1xuICAgIHJldHVybiBuZXcgUmdiKFxuICAgICAgaHNsMnJnYihoID49IDI0MCA/IGggLSAyNDAgOiBoICsgMTIwLCBtMSwgbTIpLFxuICAgICAgaHNsMnJnYihoLCBtMSwgbTIpLFxuICAgICAgaHNsMnJnYihoIDwgMTIwID8gaCArIDI0MCA6IGggLSAxMjAsIG0xLCBtMiksXG4gICAgICB0aGlzLm9wYWNpdHlcbiAgICApO1xuICB9LFxuICBjbGFtcCgpIHtcbiAgICByZXR1cm4gbmV3IEhzbChjbGFtcGgodGhpcy5oKSwgY2xhbXB0KHRoaXMucyksIGNsYW1wdCh0aGlzLmwpLCBjbGFtcGEodGhpcy5vcGFjaXR5KSk7XG4gIH0sXG4gIGRpc3BsYXlhYmxlKCkge1xuICAgIHJldHVybiAoMCA8PSB0aGlzLnMgJiYgdGhpcy5zIDw9IDEgfHwgaXNOYU4odGhpcy5zKSlcbiAgICAgICAgJiYgKDAgPD0gdGhpcy5sICYmIHRoaXMubCA8PSAxKVxuICAgICAgICAmJiAoMCA8PSB0aGlzLm9wYWNpdHkgJiYgdGhpcy5vcGFjaXR5IDw9IDEpO1xuICB9LFxuICBmb3JtYXRIc2woKSB7XG4gICAgY29uc3QgYSA9IGNsYW1wYSh0aGlzLm9wYWNpdHkpO1xuICAgIHJldHVybiBgJHthID09PSAxID8gXCJoc2woXCIgOiBcImhzbGEoXCJ9JHtjbGFtcGgodGhpcy5oKX0sICR7Y2xhbXB0KHRoaXMucykgKiAxMDB9JSwgJHtjbGFtcHQodGhpcy5sKSAqIDEwMH0lJHthID09PSAxID8gXCIpXCIgOiBgLCAke2F9KWB9YDtcbiAgfVxufSkpO1xuXG5mdW5jdGlvbiBjbGFtcGgodmFsdWUpIHtcbiAgdmFsdWUgPSAodmFsdWUgfHwgMCkgJSAzNjA7XG4gIHJldHVybiB2YWx1ZSA8IDAgPyB2YWx1ZSArIDM2MCA6IHZhbHVlO1xufVxuXG5mdW5jdGlvbiBjbGFtcHQodmFsdWUpIHtcbiAgcmV0dXJuIE1hdGgubWF4KDAsIE1hdGgubWluKDEsIHZhbHVlIHx8IDApKTtcbn1cblxuLyogRnJvbSBGdkQgMTMuMzcsIENTUyBDb2xvciBNb2R1bGUgTGV2ZWwgMyAqL1xuZnVuY3Rpb24gaHNsMnJnYihoLCBtMSwgbTIpIHtcbiAgcmV0dXJuIChoIDwgNjAgPyBtMSArIChtMiAtIG0xKSAqIGggLyA2MFxuICAgICAgOiBoIDwgMTgwID8gbTJcbiAgICAgIDogaCA8IDI0MCA/IG0xICsgKG0yIC0gbTEpICogKDI0MCAtIGgpIC8gNjBcbiAgICAgIDogbTEpICogMjU1O1xufVxuIiwgImV4cG9ydCBmdW5jdGlvbiBiYXNpcyh0MSwgdjAsIHYxLCB2MiwgdjMpIHtcbiAgdmFyIHQyID0gdDEgKiB0MSwgdDMgPSB0MiAqIHQxO1xuICByZXR1cm4gKCgxIC0gMyAqIHQxICsgMyAqIHQyIC0gdDMpICogdjBcbiAgICAgICsgKDQgLSA2ICogdDIgKyAzICogdDMpICogdjFcbiAgICAgICsgKDEgKyAzICogdDEgKyAzICogdDIgLSAzICogdDMpICogdjJcbiAgICAgICsgdDMgKiB2MykgLyA2O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZXMpIHtcbiAgdmFyIG4gPSB2YWx1ZXMubGVuZ3RoIC0gMTtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICB2YXIgaSA9IHQgPD0gMCA/ICh0ID0gMCkgOiB0ID49IDEgPyAodCA9IDEsIG4gLSAxKSA6IE1hdGguZmxvb3IodCAqIG4pLFxuICAgICAgICB2MSA9IHZhbHVlc1tpXSxcbiAgICAgICAgdjIgPSB2YWx1ZXNbaSArIDFdLFxuICAgICAgICB2MCA9IGkgPiAwID8gdmFsdWVzW2kgLSAxXSA6IDIgKiB2MSAtIHYyLFxuICAgICAgICB2MyA9IGkgPCBuIC0gMSA/IHZhbHVlc1tpICsgMl0gOiAyICogdjIgLSB2MTtcbiAgICByZXR1cm4gYmFzaXMoKHQgLSBpIC8gbikgKiBuLCB2MCwgdjEsIHYyLCB2Myk7XG4gIH07XG59XG4iLCAiaW1wb3J0IHtiYXNpc30gZnJvbSBcIi4vYmFzaXMuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWVzKSB7XG4gIHZhciBuID0gdmFsdWVzLmxlbmd0aDtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICB2YXIgaSA9IE1hdGguZmxvb3IoKCh0ICU9IDEpIDwgMCA/ICsrdCA6IHQpICogbiksXG4gICAgICAgIHYwID0gdmFsdWVzWyhpICsgbiAtIDEpICUgbl0sXG4gICAgICAgIHYxID0gdmFsdWVzW2kgJSBuXSxcbiAgICAgICAgdjIgPSB2YWx1ZXNbKGkgKyAxKSAlIG5dLFxuICAgICAgICB2MyA9IHZhbHVlc1soaSArIDIpICUgbl07XG4gICAgcmV0dXJuIGJhc2lzKCh0IC0gaSAvIG4pICogbiwgdjAsIHYxLCB2MiwgdjMpO1xuICB9O1xufVxuIiwgImV4cG9ydCBkZWZhdWx0IHggPT4gKCkgPT4geDtcbiIsICJpbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnQuanNcIjtcblxuZnVuY3Rpb24gbGluZWFyKGEsIGQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gYSArIHQgKiBkO1xuICB9O1xufVxuXG5mdW5jdGlvbiBleHBvbmVudGlhbChhLCBiLCB5KSB7XG4gIHJldHVybiBhID0gTWF0aC5wb3coYSwgeSksIGIgPSBNYXRoLnBvdyhiLCB5KSAtIGEsIHkgPSAxIC8geSwgZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBNYXRoLnBvdyhhICsgdCAqIGIsIHkpO1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaHVlKGEsIGIpIHtcbiAgdmFyIGQgPSBiIC0gYTtcbiAgcmV0dXJuIGQgPyBsaW5lYXIoYSwgZCA+IDE4MCB8fCBkIDwgLTE4MCA/IGQgLSAzNjAgKiBNYXRoLnJvdW5kKGQgLyAzNjApIDogZCkgOiBjb25zdGFudChpc05hTihhKSA/IGIgOiBhKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdhbW1hKHkpIHtcbiAgcmV0dXJuICh5ID0gK3kpID09PSAxID8gbm9nYW1tYSA6IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICByZXR1cm4gYiAtIGEgPyBleHBvbmVudGlhbChhLCBiLCB5KSA6IGNvbnN0YW50KGlzTmFOKGEpID8gYiA6IGEpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBub2dhbW1hKGEsIGIpIHtcbiAgdmFyIGQgPSBiIC0gYTtcbiAgcmV0dXJuIGQgPyBsaW5lYXIoYSwgZCkgOiBjb25zdGFudChpc05hTihhKSA/IGIgOiBhKTtcbn1cbiIsICJpbXBvcnQge3JnYiBhcyBjb2xvclJnYn0gZnJvbSBcImQzLWNvbG9yXCI7XG5pbXBvcnQgYmFzaXMgZnJvbSBcIi4vYmFzaXMuanNcIjtcbmltcG9ydCBiYXNpc0Nsb3NlZCBmcm9tIFwiLi9iYXNpc0Nsb3NlZC5qc1wiO1xuaW1wb3J0IG5vZ2FtbWEsIHtnYW1tYX0gZnJvbSBcIi4vY29sb3IuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIHJnYkdhbW1hKHkpIHtcbiAgdmFyIGNvbG9yID0gZ2FtbWEoeSk7XG5cbiAgZnVuY3Rpb24gcmdiKHN0YXJ0LCBlbmQpIHtcbiAgICB2YXIgciA9IGNvbG9yKChzdGFydCA9IGNvbG9yUmdiKHN0YXJ0KSkuciwgKGVuZCA9IGNvbG9yUmdiKGVuZCkpLnIpLFxuICAgICAgICBnID0gY29sb3Ioc3RhcnQuZywgZW5kLmcpLFxuICAgICAgICBiID0gY29sb3Ioc3RhcnQuYiwgZW5kLmIpLFxuICAgICAgICBvcGFjaXR5ID0gbm9nYW1tYShzdGFydC5vcGFjaXR5LCBlbmQub3BhY2l0eSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgIHN0YXJ0LnIgPSByKHQpO1xuICAgICAgc3RhcnQuZyA9IGcodCk7XG4gICAgICBzdGFydC5iID0gYih0KTtcbiAgICAgIHN0YXJ0Lm9wYWNpdHkgPSBvcGFjaXR5KHQpO1xuICAgICAgcmV0dXJuIHN0YXJ0ICsgXCJcIjtcbiAgICB9O1xuICB9XG5cbiAgcmdiLmdhbW1hID0gcmdiR2FtbWE7XG5cbiAgcmV0dXJuIHJnYjtcbn0pKDEpO1xuXG5mdW5jdGlvbiByZ2JTcGxpbmUoc3BsaW5lKSB7XG4gIHJldHVybiBmdW5jdGlvbihjb2xvcnMpIHtcbiAgICB2YXIgbiA9IGNvbG9ycy5sZW5ndGgsXG4gICAgICAgIHIgPSBuZXcgQXJyYXkobiksXG4gICAgICAgIGcgPSBuZXcgQXJyYXkobiksXG4gICAgICAgIGIgPSBuZXcgQXJyYXkobiksXG4gICAgICAgIGksIGNvbG9yO1xuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGNvbG9yID0gY29sb3JSZ2IoY29sb3JzW2ldKTtcbiAgICAgIHJbaV0gPSBjb2xvci5yIHx8IDA7XG4gICAgICBnW2ldID0gY29sb3IuZyB8fCAwO1xuICAgICAgYltpXSA9IGNvbG9yLmIgfHwgMDtcbiAgICB9XG4gICAgciA9IHNwbGluZShyKTtcbiAgICBnID0gc3BsaW5lKGcpO1xuICAgIGIgPSBzcGxpbmUoYik7XG4gICAgY29sb3Iub3BhY2l0eSA9IDE7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgIGNvbG9yLnIgPSByKHQpO1xuICAgICAgY29sb3IuZyA9IGcodCk7XG4gICAgICBjb2xvci5iID0gYih0KTtcbiAgICAgIHJldHVybiBjb2xvciArIFwiXCI7XG4gICAgfTtcbiAgfTtcbn1cblxuZXhwb3J0IHZhciByZ2JCYXNpcyA9IHJnYlNwbGluZShiYXNpcyk7XG5leHBvcnQgdmFyIHJnYkJhc2lzQ2xvc2VkID0gcmdiU3BsaW5lKGJhc2lzQ2xvc2VkKTtcbiIsICJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIGlmICghYikgYiA9IFtdO1xuICB2YXIgbiA9IGEgPyBNYXRoLm1pbihiLmxlbmd0aCwgYS5sZW5ndGgpIDogMCxcbiAgICAgIGMgPSBiLnNsaWNlKCksXG4gICAgICBpO1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIGNbaV0gPSBhW2ldICogKDEgLSB0KSArIGJbaV0gKiB0O1xuICAgIHJldHVybiBjO1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNOdW1iZXJBcnJheSh4KSB7XG4gIHJldHVybiBBcnJheUJ1ZmZlci5pc1ZpZXcoeCkgJiYgISh4IGluc3RhbmNlb2YgRGF0YVZpZXcpO1xufVxuIiwgImltcG9ydCB2YWx1ZSBmcm9tIFwiLi92YWx1ZS5qc1wiO1xuaW1wb3J0IG51bWJlckFycmF5LCB7aXNOdW1iZXJBcnJheX0gZnJvbSBcIi4vbnVtYmVyQXJyYXkuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICByZXR1cm4gKGlzTnVtYmVyQXJyYXkoYikgPyBudW1iZXJBcnJheSA6IGdlbmVyaWNBcnJheSkoYSwgYik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmljQXJyYXkoYSwgYikge1xuICB2YXIgbmIgPSBiID8gYi5sZW5ndGggOiAwLFxuICAgICAgbmEgPSBhID8gTWF0aC5taW4obmIsIGEubGVuZ3RoKSA6IDAsXG4gICAgICB4ID0gbmV3IEFycmF5KG5hKSxcbiAgICAgIGMgPSBuZXcgQXJyYXkobmIpLFxuICAgICAgaTtcblxuICBmb3IgKGkgPSAwOyBpIDwgbmE7ICsraSkgeFtpXSA9IHZhbHVlKGFbaV0sIGJbaV0pO1xuICBmb3IgKDsgaSA8IG5iOyArK2kpIGNbaV0gPSBiW2ldO1xuXG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgZm9yIChpID0gMDsgaSA8IG5hOyArK2kpIGNbaV0gPSB4W2ldKHQpO1xuICAgIHJldHVybiBjO1xuICB9O1xufVxuIiwgImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgdmFyIGQgPSBuZXcgRGF0ZTtcbiAgcmV0dXJuIGEgPSArYSwgYiA9ICtiLCBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIGQuc2V0VGltZShhICogKDEgLSB0KSArIGIgKiB0KSwgZDtcbiAgfTtcbn1cbiIsICJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHJldHVybiBhID0gK2EsIGIgPSArYiwgZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBhICogKDEgLSB0KSArIGIgKiB0O1xuICB9O1xufVxuIiwgImltcG9ydCB2YWx1ZSBmcm9tIFwiLi92YWx1ZS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHZhciBpID0ge30sXG4gICAgICBjID0ge30sXG4gICAgICBrO1xuXG4gIGlmIChhID09PSBudWxsIHx8IHR5cGVvZiBhICE9PSBcIm9iamVjdFwiKSBhID0ge307XG4gIGlmIChiID09PSBudWxsIHx8IHR5cGVvZiBiICE9PSBcIm9iamVjdFwiKSBiID0ge307XG5cbiAgZm9yIChrIGluIGIpIHtcbiAgICBpZiAoayBpbiBhKSB7XG4gICAgICBpW2tdID0gdmFsdWUoYVtrXSwgYltrXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNba10gPSBiW2tdO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgZm9yIChrIGluIGkpIGNba10gPSBpW2tdKHQpO1xuICAgIHJldHVybiBjO1xuICB9O1xufVxuIiwgImltcG9ydCBudW1iZXIgZnJvbSBcIi4vbnVtYmVyLmpzXCI7XG5cbnZhciByZUEgPSAvWy0rXT8oPzpcXGQrXFwuP1xcZCp8XFwuP1xcZCspKD86W2VFXVstK10/XFxkKyk/L2csXG4gICAgcmVCID0gbmV3IFJlZ0V4cChyZUEuc291cmNlLCBcImdcIik7XG5cbmZ1bmN0aW9uIHplcm8oYikge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGI7XG4gIH07XG59XG5cbmZ1bmN0aW9uIG9uZShiKSB7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIGIodCkgKyBcIlwiO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHZhciBiaSA9IHJlQS5sYXN0SW5kZXggPSByZUIubGFzdEluZGV4ID0gMCwgLy8gc2NhbiBpbmRleCBmb3IgbmV4dCBudW1iZXIgaW4gYlxuICAgICAgYW0sIC8vIGN1cnJlbnQgbWF0Y2ggaW4gYVxuICAgICAgYm0sIC8vIGN1cnJlbnQgbWF0Y2ggaW4gYlxuICAgICAgYnMsIC8vIHN0cmluZyBwcmVjZWRpbmcgY3VycmVudCBudW1iZXIgaW4gYiwgaWYgYW55XG4gICAgICBpID0gLTEsIC8vIGluZGV4IGluIHNcbiAgICAgIHMgPSBbXSwgLy8gc3RyaW5nIGNvbnN0YW50cyBhbmQgcGxhY2Vob2xkZXJzXG4gICAgICBxID0gW107IC8vIG51bWJlciBpbnRlcnBvbGF0b3JzXG5cbiAgLy8gQ29lcmNlIGlucHV0cyB0byBzdHJpbmdzLlxuICBhID0gYSArIFwiXCIsIGIgPSBiICsgXCJcIjtcblxuICAvLyBJbnRlcnBvbGF0ZSBwYWlycyBvZiBudW1iZXJzIGluIGEgJiBiLlxuICB3aGlsZSAoKGFtID0gcmVBLmV4ZWMoYSkpXG4gICAgICAmJiAoYm0gPSByZUIuZXhlYyhiKSkpIHtcbiAgICBpZiAoKGJzID0gYm0uaW5kZXgpID4gYmkpIHsgLy8gYSBzdHJpbmcgcHJlY2VkZXMgdGhlIG5leHQgbnVtYmVyIGluIGJcbiAgICAgIGJzID0gYi5zbGljZShiaSwgYnMpO1xuICAgICAgaWYgKHNbaV0pIHNbaV0gKz0gYnM7IC8vIGNvYWxlc2NlIHdpdGggcHJldmlvdXMgc3RyaW5nXG4gICAgICBlbHNlIHNbKytpXSA9IGJzO1xuICAgIH1cbiAgICBpZiAoKGFtID0gYW1bMF0pID09PSAoYm0gPSBibVswXSkpIHsgLy8gbnVtYmVycyBpbiBhICYgYiBtYXRjaFxuICAgICAgaWYgKHNbaV0pIHNbaV0gKz0gYm07IC8vIGNvYWxlc2NlIHdpdGggcHJldmlvdXMgc3RyaW5nXG4gICAgICBlbHNlIHNbKytpXSA9IGJtO1xuICAgIH0gZWxzZSB7IC8vIGludGVycG9sYXRlIG5vbi1tYXRjaGluZyBudW1iZXJzXG4gICAgICBzWysraV0gPSBudWxsO1xuICAgICAgcS5wdXNoKHtpOiBpLCB4OiBudW1iZXIoYW0sIGJtKX0pO1xuICAgIH1cbiAgICBiaSA9IHJlQi5sYXN0SW5kZXg7XG4gIH1cblxuICAvLyBBZGQgcmVtYWlucyBvZiBiLlxuICBpZiAoYmkgPCBiLmxlbmd0aCkge1xuICAgIGJzID0gYi5zbGljZShiaSk7XG4gICAgaWYgKHNbaV0pIHNbaV0gKz0gYnM7IC8vIGNvYWxlc2NlIHdpdGggcHJldmlvdXMgc3RyaW5nXG4gICAgZWxzZSBzWysraV0gPSBicztcbiAgfVxuXG4gIC8vIFNwZWNpYWwgb3B0aW1pemF0aW9uIGZvciBvbmx5IGEgc2luZ2xlIG1hdGNoLlxuICAvLyBPdGhlcndpc2UsIGludGVycG9sYXRlIGVhY2ggb2YgdGhlIG51bWJlcnMgYW5kIHJlam9pbiB0aGUgc3RyaW5nLlxuICByZXR1cm4gcy5sZW5ndGggPCAyID8gKHFbMF1cbiAgICAgID8gb25lKHFbMF0ueClcbiAgICAgIDogemVybyhiKSlcbiAgICAgIDogKGIgPSBxLmxlbmd0aCwgZnVuY3Rpb24odCkge1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBvOyBpIDwgYjsgKytpKSBzWyhvID0gcVtpXSkuaV0gPSBvLngodCk7XG4gICAgICAgICAgcmV0dXJuIHMuam9pbihcIlwiKTtcbiAgICAgICAgfSk7XG59XG4iLCAiaW1wb3J0IHtjb2xvcn0gZnJvbSBcImQzLWNvbG9yXCI7XG5pbXBvcnQgcmdiIGZyb20gXCIuL3JnYi5qc1wiO1xuaW1wb3J0IHtnZW5lcmljQXJyYXl9IGZyb20gXCIuL2FycmF5LmpzXCI7XG5pbXBvcnQgZGF0ZSBmcm9tIFwiLi9kYXRlLmpzXCI7XG5pbXBvcnQgbnVtYmVyIGZyb20gXCIuL251bWJlci5qc1wiO1xuaW1wb3J0IG9iamVjdCBmcm9tIFwiLi9vYmplY3QuanNcIjtcbmltcG9ydCBzdHJpbmcgZnJvbSBcIi4vc3RyaW5nLmpzXCI7XG5pbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnQuanNcIjtcbmltcG9ydCBudW1iZXJBcnJheSwge2lzTnVtYmVyQXJyYXl9IGZyb20gXCIuL251bWJlckFycmF5LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgdmFyIHQgPSB0eXBlb2YgYiwgYztcbiAgcmV0dXJuIGIgPT0gbnVsbCB8fCB0ID09PSBcImJvb2xlYW5cIiA/IGNvbnN0YW50KGIpXG4gICAgICA6ICh0ID09PSBcIm51bWJlclwiID8gbnVtYmVyXG4gICAgICA6IHQgPT09IFwic3RyaW5nXCIgPyAoKGMgPSBjb2xvcihiKSkgPyAoYiA9IGMsIHJnYikgOiBzdHJpbmcpXG4gICAgICA6IGIgaW5zdGFuY2VvZiBjb2xvciA/IHJnYlxuICAgICAgOiBiIGluc3RhbmNlb2YgRGF0ZSA/IGRhdGVcbiAgICAgIDogaXNOdW1iZXJBcnJheShiKSA/IG51bWJlckFycmF5XG4gICAgICA6IEFycmF5LmlzQXJyYXkoYikgPyBnZW5lcmljQXJyYXlcbiAgICAgIDogdHlwZW9mIGIudmFsdWVPZiAhPT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBiLnRvU3RyaW5nICE9PSBcImZ1bmN0aW9uXCIgfHwgaXNOYU4oYikgPyBvYmplY3RcbiAgICAgIDogbnVtYmVyKShhLCBiKTtcbn1cbiIsICJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHJldHVybiBhID0gK2EsIGIgPSArYiwgZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKGEgKiAoMSAtIHQpICsgYiAqIHQpO1xuICB9O1xufVxuIiwgInZhciBkZWdyZWVzID0gMTgwIC8gTWF0aC5QSTtcblxuZXhwb3J0IHZhciBpZGVudGl0eSA9IHtcbiAgdHJhbnNsYXRlWDogMCxcbiAgdHJhbnNsYXRlWTogMCxcbiAgcm90YXRlOiAwLFxuICBza2V3WDogMCxcbiAgc2NhbGVYOiAxLFxuICBzY2FsZVk6IDFcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgdmFyIHNjYWxlWCwgc2NhbGVZLCBza2V3WDtcbiAgaWYgKHNjYWxlWCA9IE1hdGguc3FydChhICogYSArIGIgKiBiKSkgYSAvPSBzY2FsZVgsIGIgLz0gc2NhbGVYO1xuICBpZiAoc2tld1ggPSBhICogYyArIGIgKiBkKSBjIC09IGEgKiBza2V3WCwgZCAtPSBiICogc2tld1g7XG4gIGlmIChzY2FsZVkgPSBNYXRoLnNxcnQoYyAqIGMgKyBkICogZCkpIGMgLz0gc2NhbGVZLCBkIC89IHNjYWxlWSwgc2tld1ggLz0gc2NhbGVZO1xuICBpZiAoYSAqIGQgPCBiICogYykgYSA9IC1hLCBiID0gLWIsIHNrZXdYID0gLXNrZXdYLCBzY2FsZVggPSAtc2NhbGVYO1xuICByZXR1cm4ge1xuICAgIHRyYW5zbGF0ZVg6IGUsXG4gICAgdHJhbnNsYXRlWTogZixcbiAgICByb3RhdGU6IE1hdGguYXRhbjIoYiwgYSkgKiBkZWdyZWVzLFxuICAgIHNrZXdYOiBNYXRoLmF0YW4oc2tld1gpICogZGVncmVlcyxcbiAgICBzY2FsZVg6IHNjYWxlWCxcbiAgICBzY2FsZVk6IHNjYWxlWVxuICB9O1xufVxuIiwgImltcG9ydCBkZWNvbXBvc2UsIHtpZGVudGl0eX0gZnJvbSBcIi4vZGVjb21wb3NlLmpzXCI7XG5cbnZhciBzdmdOb2RlO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlZiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlQ3NzKHZhbHVlKSB7XG4gIGNvbnN0IG0gPSBuZXcgKHR5cGVvZiBET01NYXRyaXggPT09IFwiZnVuY3Rpb25cIiA/IERPTU1hdHJpeCA6IFdlYktpdENTU01hdHJpeCkodmFsdWUgKyBcIlwiKTtcbiAgcmV0dXJuIG0uaXNJZGVudGl0eSA/IGlkZW50aXR5IDogZGVjb21wb3NlKG0uYSwgbS5iLCBtLmMsIG0uZCwgbS5lLCBtLmYpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VTdmcodmFsdWUpIHtcbiAgaWYgKHZhbHVlID09IG51bGwpIHJldHVybiBpZGVudGl0eTtcbiAgaWYgKCFzdmdOb2RlKSBzdmdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiwgXCJnXCIpO1xuICBzdmdOb2RlLnNldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiLCB2YWx1ZSk7XG4gIGlmICghKHZhbHVlID0gc3ZnTm9kZS50cmFuc2Zvcm0uYmFzZVZhbC5jb25zb2xpZGF0ZSgpKSkgcmV0dXJuIGlkZW50aXR5O1xuICB2YWx1ZSA9IHZhbHVlLm1hdHJpeDtcbiAgcmV0dXJuIGRlY29tcG9zZSh2YWx1ZS5hLCB2YWx1ZS5iLCB2YWx1ZS5jLCB2YWx1ZS5kLCB2YWx1ZS5lLCB2YWx1ZS5mKTtcbn1cbiIsICJpbXBvcnQgbnVtYmVyIGZyb20gXCIuLi9udW1iZXIuanNcIjtcbmltcG9ydCB7cGFyc2VDc3MsIHBhcnNlU3ZnfSBmcm9tIFwiLi9wYXJzZS5qc1wiO1xuXG5mdW5jdGlvbiBpbnRlcnBvbGF0ZVRyYW5zZm9ybShwYXJzZSwgcHhDb21tYSwgcHhQYXJlbiwgZGVnUGFyZW4pIHtcblxuICBmdW5jdGlvbiBwb3Aocykge1xuICAgIHJldHVybiBzLmxlbmd0aCA/IHMucG9wKCkgKyBcIiBcIiA6IFwiXCI7XG4gIH1cblxuICBmdW5jdGlvbiB0cmFuc2xhdGUoeGEsIHlhLCB4YiwgeWIsIHMsIHEpIHtcbiAgICBpZiAoeGEgIT09IHhiIHx8IHlhICE9PSB5Yikge1xuICAgICAgdmFyIGkgPSBzLnB1c2goXCJ0cmFuc2xhdGUoXCIsIG51bGwsIHB4Q29tbWEsIG51bGwsIHB4UGFyZW4pO1xuICAgICAgcS5wdXNoKHtpOiBpIC0gNCwgeDogbnVtYmVyKHhhLCB4Yil9LCB7aTogaSAtIDIsIHg6IG51bWJlcih5YSwgeWIpfSk7XG4gICAgfSBlbHNlIGlmICh4YiB8fCB5Yikge1xuICAgICAgcy5wdXNoKFwidHJhbnNsYXRlKFwiICsgeGIgKyBweENvbW1hICsgeWIgKyBweFBhcmVuKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByb3RhdGUoYSwgYiwgcywgcSkge1xuICAgIGlmIChhICE9PSBiKSB7XG4gICAgICBpZiAoYSAtIGIgPiAxODApIGIgKz0gMzYwOyBlbHNlIGlmIChiIC0gYSA+IDE4MCkgYSArPSAzNjA7IC8vIHNob3J0ZXN0IHBhdGhcbiAgICAgIHEucHVzaCh7aTogcy5wdXNoKHBvcChzKSArIFwicm90YXRlKFwiLCBudWxsLCBkZWdQYXJlbikgLSAyLCB4OiBudW1iZXIoYSwgYil9KTtcbiAgICB9IGVsc2UgaWYgKGIpIHtcbiAgICAgIHMucHVzaChwb3AocykgKyBcInJvdGF0ZShcIiArIGIgKyBkZWdQYXJlbik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc2tld1goYSwgYiwgcywgcSkge1xuICAgIGlmIChhICE9PSBiKSB7XG4gICAgICBxLnB1c2goe2k6IHMucHVzaChwb3AocykgKyBcInNrZXdYKFwiLCBudWxsLCBkZWdQYXJlbikgLSAyLCB4OiBudW1iZXIoYSwgYil9KTtcbiAgICB9IGVsc2UgaWYgKGIpIHtcbiAgICAgIHMucHVzaChwb3AocykgKyBcInNrZXdYKFwiICsgYiArIGRlZ1BhcmVuKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzY2FsZSh4YSwgeWEsIHhiLCB5YiwgcywgcSkge1xuICAgIGlmICh4YSAhPT0geGIgfHwgeWEgIT09IHliKSB7XG4gICAgICB2YXIgaSA9IHMucHVzaChwb3AocykgKyBcInNjYWxlKFwiLCBudWxsLCBcIixcIiwgbnVsbCwgXCIpXCIpO1xuICAgICAgcS5wdXNoKHtpOiBpIC0gNCwgeDogbnVtYmVyKHhhLCB4Yil9LCB7aTogaSAtIDIsIHg6IG51bWJlcih5YSwgeWIpfSk7XG4gICAgfSBlbHNlIGlmICh4YiAhPT0gMSB8fCB5YiAhPT0gMSkge1xuICAgICAgcy5wdXNoKHBvcChzKSArIFwic2NhbGUoXCIgKyB4YiArIFwiLFwiICsgeWIgKyBcIilcIik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKGEsIGIpIHtcbiAgICB2YXIgcyA9IFtdLCAvLyBzdHJpbmcgY29uc3RhbnRzIGFuZCBwbGFjZWhvbGRlcnNcbiAgICAgICAgcSA9IFtdOyAvLyBudW1iZXIgaW50ZXJwb2xhdG9yc1xuICAgIGEgPSBwYXJzZShhKSwgYiA9IHBhcnNlKGIpO1xuICAgIHRyYW5zbGF0ZShhLnRyYW5zbGF0ZVgsIGEudHJhbnNsYXRlWSwgYi50cmFuc2xhdGVYLCBiLnRyYW5zbGF0ZVksIHMsIHEpO1xuICAgIHJvdGF0ZShhLnJvdGF0ZSwgYi5yb3RhdGUsIHMsIHEpO1xuICAgIHNrZXdYKGEuc2tld1gsIGIuc2tld1gsIHMsIHEpO1xuICAgIHNjYWxlKGEuc2NhbGVYLCBhLnNjYWxlWSwgYi5zY2FsZVgsIGIuc2NhbGVZLCBzLCBxKTtcbiAgICBhID0gYiA9IG51bGw7IC8vIGdjXG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgIHZhciBpID0gLTEsIG4gPSBxLmxlbmd0aCwgbztcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBzWyhvID0gcVtpXSkuaV0gPSBvLngodCk7XG4gICAgICByZXR1cm4gcy5qb2luKFwiXCIpO1xuICAgIH07XG4gIH07XG59XG5cbmV4cG9ydCB2YXIgaW50ZXJwb2xhdGVUcmFuc2Zvcm1Dc3MgPSBpbnRlcnBvbGF0ZVRyYW5zZm9ybShwYXJzZUNzcywgXCJweCwgXCIsIFwicHgpXCIsIFwiZGVnKVwiKTtcbmV4cG9ydCB2YXIgaW50ZXJwb2xhdGVUcmFuc2Zvcm1TdmcgPSBpbnRlcnBvbGF0ZVRyYW5zZm9ybShwYXJzZVN2ZywgXCIsIFwiLCBcIilcIiwgXCIpXCIpO1xuIiwgInZhciBlcHNpbG9uMiA9IDFlLTEyO1xuXG5mdW5jdGlvbiBjb3NoKHgpIHtcbiAgcmV0dXJuICgoeCA9IE1hdGguZXhwKHgpKSArIDEgLyB4KSAvIDI7XG59XG5cbmZ1bmN0aW9uIHNpbmgoeCkge1xuICByZXR1cm4gKCh4ID0gTWF0aC5leHAoeCkpIC0gMSAvIHgpIC8gMjtcbn1cblxuZnVuY3Rpb24gdGFuaCh4KSB7XG4gIHJldHVybiAoKHggPSBNYXRoLmV4cCgyICogeCkpIC0gMSkgLyAoeCArIDEpO1xufVxuXG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gem9vbVJobyhyaG8sIHJobzIsIHJobzQpIHtcblxuICAvLyBwMCA9IFt1eDAsIHV5MCwgdzBdXG4gIC8vIHAxID0gW3V4MSwgdXkxLCB3MV1cbiAgZnVuY3Rpb24gem9vbShwMCwgcDEpIHtcbiAgICB2YXIgdXgwID0gcDBbMF0sIHV5MCA9IHAwWzFdLCB3MCA9IHAwWzJdLFxuICAgICAgICB1eDEgPSBwMVswXSwgdXkxID0gcDFbMV0sIHcxID0gcDFbMl0sXG4gICAgICAgIGR4ID0gdXgxIC0gdXgwLFxuICAgICAgICBkeSA9IHV5MSAtIHV5MCxcbiAgICAgICAgZDIgPSBkeCAqIGR4ICsgZHkgKiBkeSxcbiAgICAgICAgaSxcbiAgICAgICAgUztcblxuICAgIC8vIFNwZWNpYWwgY2FzZSBmb3IgdTAgXHUyMjQ1IHUxLlxuICAgIGlmIChkMiA8IGVwc2lsb24yKSB7XG4gICAgICBTID0gTWF0aC5sb2codzEgLyB3MCkgLyByaG87XG4gICAgICBpID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgIHV4MCArIHQgKiBkeCxcbiAgICAgICAgICB1eTAgKyB0ICogZHksXG4gICAgICAgICAgdzAgKiBNYXRoLmV4cChyaG8gKiB0ICogUylcbiAgICAgICAgXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBHZW5lcmFsIGNhc2UuXG4gICAgZWxzZSB7XG4gICAgICB2YXIgZDEgPSBNYXRoLnNxcnQoZDIpLFxuICAgICAgICAgIGIwID0gKHcxICogdzEgLSB3MCAqIHcwICsgcmhvNCAqIGQyKSAvICgyICogdzAgKiByaG8yICogZDEpLFxuICAgICAgICAgIGIxID0gKHcxICogdzEgLSB3MCAqIHcwIC0gcmhvNCAqIGQyKSAvICgyICogdzEgKiByaG8yICogZDEpLFxuICAgICAgICAgIHIwID0gTWF0aC5sb2coTWF0aC5zcXJ0KGIwICogYjAgKyAxKSAtIGIwKSxcbiAgICAgICAgICByMSA9IE1hdGgubG9nKE1hdGguc3FydChiMSAqIGIxICsgMSkgLSBiMSk7XG4gICAgICBTID0gKHIxIC0gcjApIC8gcmhvO1xuICAgICAgaSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIHMgPSB0ICogUyxcbiAgICAgICAgICAgIGNvc2hyMCA9IGNvc2gocjApLFxuICAgICAgICAgICAgdSA9IHcwIC8gKHJobzIgKiBkMSkgKiAoY29zaHIwICogdGFuaChyaG8gKiBzICsgcjApIC0gc2luaChyMCkpO1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgIHV4MCArIHUgKiBkeCxcbiAgICAgICAgICB1eTAgKyB1ICogZHksXG4gICAgICAgICAgdzAgKiBjb3NocjAgLyBjb3NoKHJobyAqIHMgKyByMClcbiAgICAgICAgXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpLmR1cmF0aW9uID0gUyAqIDEwMDAgKiByaG8gLyBNYXRoLlNRUlQyO1xuXG4gICAgcmV0dXJuIGk7XG4gIH1cblxuICB6b29tLnJobyA9IGZ1bmN0aW9uKF8pIHtcbiAgICB2YXIgXzEgPSBNYXRoLm1heCgxZS0zLCArXyksIF8yID0gXzEgKiBfMSwgXzQgPSBfMiAqIF8yO1xuICAgIHJldHVybiB6b29tUmhvKF8xLCBfMiwgXzQpO1xuICB9O1xuXG4gIHJldHVybiB6b29tO1xufSkoTWF0aC5TUVJUMiwgMiwgNCk7XG4iLCAidmFyIGZyYW1lID0gMCwgLy8gaXMgYW4gYW5pbWF0aW9uIGZyYW1lIHBlbmRpbmc/XG4gICAgdGltZW91dCA9IDAsIC8vIGlzIGEgdGltZW91dCBwZW5kaW5nP1xuICAgIGludGVydmFsID0gMCwgLy8gYXJlIGFueSB0aW1lcnMgYWN0aXZlP1xuICAgIHBva2VEZWxheSA9IDEwMDAsIC8vIGhvdyBmcmVxdWVudGx5IHdlIGNoZWNrIGZvciBjbG9jayBza2V3XG4gICAgdGFza0hlYWQsXG4gICAgdGFza1RhaWwsXG4gICAgY2xvY2tMYXN0ID0gMCxcbiAgICBjbG9ja05vdyA9IDAsXG4gICAgY2xvY2tTa2V3ID0gMCxcbiAgICBjbG9jayA9IHR5cGVvZiBwZXJmb3JtYW5jZSA9PT0gXCJvYmplY3RcIiAmJiBwZXJmb3JtYW5jZS5ub3cgPyBwZXJmb3JtYW5jZSA6IERhdGUsXG4gICAgc2V0RnJhbWUgPSB0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiICYmIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPyB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lLmJpbmQod2luZG93KSA6IGZ1bmN0aW9uKGYpIHsgc2V0VGltZW91dChmLCAxNyk7IH07XG5cbmV4cG9ydCBmdW5jdGlvbiBub3coKSB7XG4gIHJldHVybiBjbG9ja05vdyB8fCAoc2V0RnJhbWUoY2xlYXJOb3cpLCBjbG9ja05vdyA9IGNsb2NrLm5vdygpICsgY2xvY2tTa2V3KTtcbn1cblxuZnVuY3Rpb24gY2xlYXJOb3coKSB7XG4gIGNsb2NrTm93ID0gMDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFRpbWVyKCkge1xuICB0aGlzLl9jYWxsID1cbiAgdGhpcy5fdGltZSA9XG4gIHRoaXMuX25leHQgPSBudWxsO1xufVxuXG5UaW1lci5wcm90b3R5cGUgPSB0aW1lci5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBUaW1lcixcbiAgcmVzdGFydDogZnVuY3Rpb24oY2FsbGJhY2ssIGRlbGF5LCB0aW1lKSB7XG4gICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiY2FsbGJhY2sgaXMgbm90IGEgZnVuY3Rpb25cIik7XG4gICAgdGltZSA9ICh0aW1lID09IG51bGwgPyBub3coKSA6ICt0aW1lKSArIChkZWxheSA9PSBudWxsID8gMCA6ICtkZWxheSk7XG4gICAgaWYgKCF0aGlzLl9uZXh0ICYmIHRhc2tUYWlsICE9PSB0aGlzKSB7XG4gICAgICBpZiAodGFza1RhaWwpIHRhc2tUYWlsLl9uZXh0ID0gdGhpcztcbiAgICAgIGVsc2UgdGFza0hlYWQgPSB0aGlzO1xuICAgICAgdGFza1RhaWwgPSB0aGlzO1xuICAgIH1cbiAgICB0aGlzLl9jYWxsID0gY2FsbGJhY2s7XG4gICAgdGhpcy5fdGltZSA9IHRpbWU7XG4gICAgc2xlZXAoKTtcbiAgfSxcbiAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuX2NhbGwpIHtcbiAgICAgIHRoaXMuX2NhbGwgPSBudWxsO1xuICAgICAgdGhpcy5fdGltZSA9IEluZmluaXR5O1xuICAgICAgc2xlZXAoKTtcbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydCBmdW5jdGlvbiB0aW1lcihjYWxsYmFjaywgZGVsYXksIHRpbWUpIHtcbiAgdmFyIHQgPSBuZXcgVGltZXI7XG4gIHQucmVzdGFydChjYWxsYmFjaywgZGVsYXksIHRpbWUpO1xuICByZXR1cm4gdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRpbWVyRmx1c2goKSB7XG4gIG5vdygpOyAvLyBHZXQgdGhlIGN1cnJlbnQgdGltZSwgaWYgbm90IGFscmVhZHkgc2V0LlxuICArK2ZyYW1lOyAvLyBQcmV0ZW5kIHdlXHUyMDE5dmUgc2V0IGFuIGFsYXJtLCBpZiB3ZSBoYXZlblx1MjAxOXQgYWxyZWFkeS5cbiAgdmFyIHQgPSB0YXNrSGVhZCwgZTtcbiAgd2hpbGUgKHQpIHtcbiAgICBpZiAoKGUgPSBjbG9ja05vdyAtIHQuX3RpbWUpID49IDApIHQuX2NhbGwuY2FsbCh1bmRlZmluZWQsIGUpO1xuICAgIHQgPSB0Ll9uZXh0O1xuICB9XG4gIC0tZnJhbWU7XG59XG5cbmZ1bmN0aW9uIHdha2UoKSB7XG4gIGNsb2NrTm93ID0gKGNsb2NrTGFzdCA9IGNsb2NrLm5vdygpKSArIGNsb2NrU2tldztcbiAgZnJhbWUgPSB0aW1lb3V0ID0gMDtcbiAgdHJ5IHtcbiAgICB0aW1lckZsdXNoKCk7XG4gIH0gZmluYWxseSB7XG4gICAgZnJhbWUgPSAwO1xuICAgIG5hcCgpO1xuICAgIGNsb2NrTm93ID0gMDtcbiAgfVxufVxuXG5mdW5jdGlvbiBwb2tlKCkge1xuICB2YXIgbm93ID0gY2xvY2subm93KCksIGRlbGF5ID0gbm93IC0gY2xvY2tMYXN0O1xuICBpZiAoZGVsYXkgPiBwb2tlRGVsYXkpIGNsb2NrU2tldyAtPSBkZWxheSwgY2xvY2tMYXN0ID0gbm93O1xufVxuXG5mdW5jdGlvbiBuYXAoKSB7XG4gIHZhciB0MCwgdDEgPSB0YXNrSGVhZCwgdDIsIHRpbWUgPSBJbmZpbml0eTtcbiAgd2hpbGUgKHQxKSB7XG4gICAgaWYgKHQxLl9jYWxsKSB7XG4gICAgICBpZiAodGltZSA+IHQxLl90aW1lKSB0aW1lID0gdDEuX3RpbWU7XG4gICAgICB0MCA9IHQxLCB0MSA9IHQxLl9uZXh0O1xuICAgIH0gZWxzZSB7XG4gICAgICB0MiA9IHQxLl9uZXh0LCB0MS5fbmV4dCA9IG51bGw7XG4gICAgICB0MSA9IHQwID8gdDAuX25leHQgPSB0MiA6IHRhc2tIZWFkID0gdDI7XG4gICAgfVxuICB9XG4gIHRhc2tUYWlsID0gdDA7XG4gIHNsZWVwKHRpbWUpO1xufVxuXG5mdW5jdGlvbiBzbGVlcCh0aW1lKSB7XG4gIGlmIChmcmFtZSkgcmV0dXJuOyAvLyBTb29uZXN0IGFsYXJtIGFscmVhZHkgc2V0LCBvciB3aWxsIGJlLlxuICBpZiAodGltZW91dCkgdGltZW91dCA9IGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgdmFyIGRlbGF5ID0gdGltZSAtIGNsb2NrTm93OyAvLyBTdHJpY3RseSBsZXNzIHRoYW4gaWYgd2UgcmVjb21wdXRlZCBjbG9ja05vdy5cbiAgaWYgKGRlbGF5ID4gMjQpIHtcbiAgICBpZiAodGltZSA8IEluZmluaXR5KSB0aW1lb3V0ID0gc2V0VGltZW91dCh3YWtlLCB0aW1lIC0gY2xvY2subm93KCkgLSBjbG9ja1NrZXcpO1xuICAgIGlmIChpbnRlcnZhbCkgaW50ZXJ2YWwgPSBjbGVhckludGVydmFsKGludGVydmFsKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoIWludGVydmFsKSBjbG9ja0xhc3QgPSBjbG9jay5ub3coKSwgaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChwb2tlLCBwb2tlRGVsYXkpO1xuICAgIGZyYW1lID0gMSwgc2V0RnJhbWUod2FrZSk7XG4gIH1cbn1cbiIsICJpbXBvcnQge1RpbWVyfSBmcm9tIFwiLi90aW1lci5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjYWxsYmFjaywgZGVsYXksIHRpbWUpIHtcbiAgdmFyIHQgPSBuZXcgVGltZXI7XG4gIGRlbGF5ID0gZGVsYXkgPT0gbnVsbCA/IDAgOiArZGVsYXk7XG4gIHQucmVzdGFydChlbGFwc2VkID0+IHtcbiAgICB0LnN0b3AoKTtcbiAgICBjYWxsYmFjayhlbGFwc2VkICsgZGVsYXkpO1xuICB9LCBkZWxheSwgdGltZSk7XG4gIHJldHVybiB0O1xufVxuIiwgImltcG9ydCB7ZGlzcGF0Y2h9IGZyb20gXCJkMy1kaXNwYXRjaFwiO1xuaW1wb3J0IHt0aW1lciwgdGltZW91dH0gZnJvbSBcImQzLXRpbWVyXCI7XG5cbnZhciBlbXB0eU9uID0gZGlzcGF0Y2goXCJzdGFydFwiLCBcImVuZFwiLCBcImNhbmNlbFwiLCBcImludGVycnVwdFwiKTtcbnZhciBlbXB0eVR3ZWVuID0gW107XG5cbmV4cG9ydCB2YXIgQ1JFQVRFRCA9IDA7XG5leHBvcnQgdmFyIFNDSEVEVUxFRCA9IDE7XG5leHBvcnQgdmFyIFNUQVJUSU5HID0gMjtcbmV4cG9ydCB2YXIgU1RBUlRFRCA9IDM7XG5leHBvcnQgdmFyIFJVTk5JTkcgPSA0O1xuZXhwb3J0IHZhciBFTkRJTkcgPSA1O1xuZXhwb3J0IHZhciBFTkRFRCA9IDY7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5vZGUsIG5hbWUsIGlkLCBpbmRleCwgZ3JvdXAsIHRpbWluZykge1xuICB2YXIgc2NoZWR1bGVzID0gbm9kZS5fX3RyYW5zaXRpb247XG4gIGlmICghc2NoZWR1bGVzKSBub2RlLl9fdHJhbnNpdGlvbiA9IHt9O1xuICBlbHNlIGlmIChpZCBpbiBzY2hlZHVsZXMpIHJldHVybjtcbiAgY3JlYXRlKG5vZGUsIGlkLCB7XG4gICAgbmFtZTogbmFtZSxcbiAgICBpbmRleDogaW5kZXgsIC8vIEZvciBjb250ZXh0IGR1cmluZyBjYWxsYmFjay5cbiAgICBncm91cDogZ3JvdXAsIC8vIEZvciBjb250ZXh0IGR1cmluZyBjYWxsYmFjay5cbiAgICBvbjogZW1wdHlPbixcbiAgICB0d2VlbjogZW1wdHlUd2VlbixcbiAgICB0aW1lOiB0aW1pbmcudGltZSxcbiAgICBkZWxheTogdGltaW5nLmRlbGF5LFxuICAgIGR1cmF0aW9uOiB0aW1pbmcuZHVyYXRpb24sXG4gICAgZWFzZTogdGltaW5nLmVhc2UsXG4gICAgdGltZXI6IG51bGwsXG4gICAgc3RhdGU6IENSRUFURURcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0KG5vZGUsIGlkKSB7XG4gIHZhciBzY2hlZHVsZSA9IGdldChub2RlLCBpZCk7XG4gIGlmIChzY2hlZHVsZS5zdGF0ZSA+IENSRUFURUQpIHRocm93IG5ldyBFcnJvcihcInRvbyBsYXRlOyBhbHJlYWR5IHNjaGVkdWxlZFwiKTtcbiAgcmV0dXJuIHNjaGVkdWxlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0KG5vZGUsIGlkKSB7XG4gIHZhciBzY2hlZHVsZSA9IGdldChub2RlLCBpZCk7XG4gIGlmIChzY2hlZHVsZS5zdGF0ZSA+IFNUQVJURUQpIHRocm93IG5ldyBFcnJvcihcInRvbyBsYXRlOyBhbHJlYWR5IHJ1bm5pbmdcIik7XG4gIHJldHVybiBzY2hlZHVsZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldChub2RlLCBpZCkge1xuICB2YXIgc2NoZWR1bGUgPSBub2RlLl9fdHJhbnNpdGlvbjtcbiAgaWYgKCFzY2hlZHVsZSB8fCAhKHNjaGVkdWxlID0gc2NoZWR1bGVbaWRdKSkgdGhyb3cgbmV3IEVycm9yKFwidHJhbnNpdGlvbiBub3QgZm91bmRcIik7XG4gIHJldHVybiBzY2hlZHVsZTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlKG5vZGUsIGlkLCBzZWxmKSB7XG4gIHZhciBzY2hlZHVsZXMgPSBub2RlLl9fdHJhbnNpdGlvbixcbiAgICAgIHR3ZWVuO1xuXG4gIC8vIEluaXRpYWxpemUgdGhlIHNlbGYgdGltZXIgd2hlbiB0aGUgdHJhbnNpdGlvbiBpcyBjcmVhdGVkLlxuICAvLyBOb3RlIHRoZSBhY3R1YWwgZGVsYXkgaXMgbm90IGtub3duIHVudGlsIHRoZSBmaXJzdCBjYWxsYmFjayFcbiAgc2NoZWR1bGVzW2lkXSA9IHNlbGY7XG4gIHNlbGYudGltZXIgPSB0aW1lcihzY2hlZHVsZSwgMCwgc2VsZi50aW1lKTtcblxuICBmdW5jdGlvbiBzY2hlZHVsZShlbGFwc2VkKSB7XG4gICAgc2VsZi5zdGF0ZSA9IFNDSEVEVUxFRDtcbiAgICBzZWxmLnRpbWVyLnJlc3RhcnQoc3RhcnQsIHNlbGYuZGVsYXksIHNlbGYudGltZSk7XG5cbiAgICAvLyBJZiB0aGUgZWxhcHNlZCBkZWxheSBpcyBsZXNzIHRoYW4gb3VyIGZpcnN0IHNsZWVwLCBzdGFydCBpbW1lZGlhdGVseS5cbiAgICBpZiAoc2VsZi5kZWxheSA8PSBlbGFwc2VkKSBzdGFydChlbGFwc2VkIC0gc2VsZi5kZWxheSk7XG4gIH1cblxuICBmdW5jdGlvbiBzdGFydChlbGFwc2VkKSB7XG4gICAgdmFyIGksIGosIG4sIG87XG5cbiAgICAvLyBJZiB0aGUgc3RhdGUgaXMgbm90IFNDSEVEVUxFRCwgdGhlbiB3ZSBwcmV2aW91c2x5IGVycm9yZWQgb24gc3RhcnQuXG4gICAgaWYgKHNlbGYuc3RhdGUgIT09IFNDSEVEVUxFRCkgcmV0dXJuIHN0b3AoKTtcblxuICAgIGZvciAoaSBpbiBzY2hlZHVsZXMpIHtcbiAgICAgIG8gPSBzY2hlZHVsZXNbaV07XG4gICAgICBpZiAoby5uYW1lICE9PSBzZWxmLm5hbWUpIGNvbnRpbnVlO1xuXG4gICAgICAvLyBXaGlsZSB0aGlzIGVsZW1lbnQgYWxyZWFkeSBoYXMgYSBzdGFydGluZyB0cmFuc2l0aW9uIGR1cmluZyB0aGlzIGZyYW1lLFxuICAgICAgLy8gZGVmZXIgc3RhcnRpbmcgYW4gaW50ZXJydXB0aW5nIHRyYW5zaXRpb24gdW50aWwgdGhhdCB0cmFuc2l0aW9uIGhhcyBhXG4gICAgICAvLyBjaGFuY2UgdG8gdGljayAoYW5kIHBvc3NpYmx5IGVuZCk7IHNlZSBkMy9kMy10cmFuc2l0aW9uIzU0IVxuICAgICAgaWYgKG8uc3RhdGUgPT09IFNUQVJURUQpIHJldHVybiB0aW1lb3V0KHN0YXJ0KTtcblxuICAgICAgLy8gSW50ZXJydXB0IHRoZSBhY3RpdmUgdHJhbnNpdGlvbiwgaWYgYW55LlxuICAgICAgaWYgKG8uc3RhdGUgPT09IFJVTk5JTkcpIHtcbiAgICAgICAgby5zdGF0ZSA9IEVOREVEO1xuICAgICAgICBvLnRpbWVyLnN0b3AoKTtcbiAgICAgICAgby5vbi5jYWxsKFwiaW50ZXJydXB0XCIsIG5vZGUsIG5vZGUuX19kYXRhX18sIG8uaW5kZXgsIG8uZ3JvdXApO1xuICAgICAgICBkZWxldGUgc2NoZWR1bGVzW2ldO1xuICAgICAgfVxuXG4gICAgICAvLyBDYW5jZWwgYW55IHByZS1lbXB0ZWQgdHJhbnNpdGlvbnMuXG4gICAgICBlbHNlIGlmICgraSA8IGlkKSB7XG4gICAgICAgIG8uc3RhdGUgPSBFTkRFRDtcbiAgICAgICAgby50aW1lci5zdG9wKCk7XG4gICAgICAgIG8ub24uY2FsbChcImNhbmNlbFwiLCBub2RlLCBub2RlLl9fZGF0YV9fLCBvLmluZGV4LCBvLmdyb3VwKTtcbiAgICAgICAgZGVsZXRlIHNjaGVkdWxlc1tpXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBEZWZlciB0aGUgZmlyc3QgdGljayB0byBlbmQgb2YgdGhlIGN1cnJlbnQgZnJhbWU7IHNlZSBkMy9kMyMxNTc2LlxuICAgIC8vIE5vdGUgdGhlIHRyYW5zaXRpb24gbWF5IGJlIGNhbmNlbGVkIGFmdGVyIHN0YXJ0IGFuZCBiZWZvcmUgdGhlIGZpcnN0IHRpY2shXG4gICAgLy8gTm90ZSB0aGlzIG11c3QgYmUgc2NoZWR1bGVkIGJlZm9yZSB0aGUgc3RhcnQgZXZlbnQ7IHNlZSBkMy9kMy10cmFuc2l0aW9uIzE2IVxuICAgIC8vIEFzc3VtaW5nIHRoaXMgaXMgc3VjY2Vzc2Z1bCwgc3Vic2VxdWVudCBjYWxsYmFja3MgZ28gc3RyYWlnaHQgdG8gdGljay5cbiAgICB0aW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHNlbGYuc3RhdGUgPT09IFNUQVJURUQpIHtcbiAgICAgICAgc2VsZi5zdGF0ZSA9IFJVTk5JTkc7XG4gICAgICAgIHNlbGYudGltZXIucmVzdGFydCh0aWNrLCBzZWxmLmRlbGF5LCBzZWxmLnRpbWUpO1xuICAgICAgICB0aWNrKGVsYXBzZWQpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gRGlzcGF0Y2ggdGhlIHN0YXJ0IGV2ZW50LlxuICAgIC8vIE5vdGUgdGhpcyBtdXN0IGJlIGRvbmUgYmVmb3JlIHRoZSB0d2VlbiBhcmUgaW5pdGlhbGl6ZWQuXG4gICAgc2VsZi5zdGF0ZSA9IFNUQVJUSU5HO1xuICAgIHNlbGYub24uY2FsbChcInN0YXJ0XCIsIG5vZGUsIG5vZGUuX19kYXRhX18sIHNlbGYuaW5kZXgsIHNlbGYuZ3JvdXApO1xuICAgIGlmIChzZWxmLnN0YXRlICE9PSBTVEFSVElORykgcmV0dXJuOyAvLyBpbnRlcnJ1cHRlZFxuICAgIHNlbGYuc3RhdGUgPSBTVEFSVEVEO1xuXG4gICAgLy8gSW5pdGlhbGl6ZSB0aGUgdHdlZW4sIGRlbGV0aW5nIG51bGwgdHdlZW4uXG4gICAgdHdlZW4gPSBuZXcgQXJyYXkobiA9IHNlbGYudHdlZW4ubGVuZ3RoKTtcbiAgICBmb3IgKGkgPSAwLCBqID0gLTE7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChvID0gc2VsZi50d2VlbltpXS52YWx1ZS5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIHNlbGYuaW5kZXgsIHNlbGYuZ3JvdXApKSB7XG4gICAgICAgIHR3ZWVuWysral0gPSBvO1xuICAgICAgfVxuICAgIH1cbiAgICB0d2Vlbi5sZW5ndGggPSBqICsgMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRpY2soZWxhcHNlZCkge1xuICAgIHZhciB0ID0gZWxhcHNlZCA8IHNlbGYuZHVyYXRpb24gPyBzZWxmLmVhc2UuY2FsbChudWxsLCBlbGFwc2VkIC8gc2VsZi5kdXJhdGlvbikgOiAoc2VsZi50aW1lci5yZXN0YXJ0KHN0b3ApLCBzZWxmLnN0YXRlID0gRU5ESU5HLCAxKSxcbiAgICAgICAgaSA9IC0xLFxuICAgICAgICBuID0gdHdlZW4ubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIHR3ZWVuW2ldLmNhbGwobm9kZSwgdCk7XG4gICAgfVxuXG4gICAgLy8gRGlzcGF0Y2ggdGhlIGVuZCBldmVudC5cbiAgICBpZiAoc2VsZi5zdGF0ZSA9PT0gRU5ESU5HKSB7XG4gICAgICBzZWxmLm9uLmNhbGwoXCJlbmRcIiwgbm9kZSwgbm9kZS5fX2RhdGFfXywgc2VsZi5pbmRleCwgc2VsZi5ncm91cCk7XG4gICAgICBzdG9wKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc3RvcCgpIHtcbiAgICBzZWxmLnN0YXRlID0gRU5ERUQ7XG4gICAgc2VsZi50aW1lci5zdG9wKCk7XG4gICAgZGVsZXRlIHNjaGVkdWxlc1tpZF07XG4gICAgZm9yICh2YXIgaSBpbiBzY2hlZHVsZXMpIHJldHVybjsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIGRlbGV0ZSBub2RlLl9fdHJhbnNpdGlvbjtcbiAgfVxufVxuIiwgImltcG9ydCB7U1RBUlRJTkcsIEVORElORywgRU5ERUR9IGZyb20gXCIuL3RyYW5zaXRpb24vc2NoZWR1bGUuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obm9kZSwgbmFtZSkge1xuICB2YXIgc2NoZWR1bGVzID0gbm9kZS5fX3RyYW5zaXRpb24sXG4gICAgICBzY2hlZHVsZSxcbiAgICAgIGFjdGl2ZSxcbiAgICAgIGVtcHR5ID0gdHJ1ZSxcbiAgICAgIGk7XG5cbiAgaWYgKCFzY2hlZHVsZXMpIHJldHVybjtcblxuICBuYW1lID0gbmFtZSA9PSBudWxsID8gbnVsbCA6IG5hbWUgKyBcIlwiO1xuXG4gIGZvciAoaSBpbiBzY2hlZHVsZXMpIHtcbiAgICBpZiAoKHNjaGVkdWxlID0gc2NoZWR1bGVzW2ldKS5uYW1lICE9PSBuYW1lKSB7IGVtcHR5ID0gZmFsc2U7IGNvbnRpbnVlOyB9XG4gICAgYWN0aXZlID0gc2NoZWR1bGUuc3RhdGUgPiBTVEFSVElORyAmJiBzY2hlZHVsZS5zdGF0ZSA8IEVORElORztcbiAgICBzY2hlZHVsZS5zdGF0ZSA9IEVOREVEO1xuICAgIHNjaGVkdWxlLnRpbWVyLnN0b3AoKTtcbiAgICBzY2hlZHVsZS5vbi5jYWxsKGFjdGl2ZSA/IFwiaW50ZXJydXB0XCIgOiBcImNhbmNlbFwiLCBub2RlLCBub2RlLl9fZGF0YV9fLCBzY2hlZHVsZS5pbmRleCwgc2NoZWR1bGUuZ3JvdXApO1xuICAgIGRlbGV0ZSBzY2hlZHVsZXNbaV07XG4gIH1cblxuICBpZiAoZW1wdHkpIGRlbGV0ZSBub2RlLl9fdHJhbnNpdGlvbjtcbn1cbiIsICJpbXBvcnQgaW50ZXJydXB0IGZyb20gXCIuLi9pbnRlcnJ1cHQuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSkge1xuICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgIGludGVycnVwdCh0aGlzLCBuYW1lKTtcbiAgfSk7XG59XG4iLCAiaW1wb3J0IHtnZXQsIHNldH0gZnJvbSBcIi4vc2NoZWR1bGUuanNcIjtcblxuZnVuY3Rpb24gdHdlZW5SZW1vdmUoaWQsIG5hbWUpIHtcbiAgdmFyIHR3ZWVuMCwgdHdlZW4xO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNjaGVkdWxlID0gc2V0KHRoaXMsIGlkKSxcbiAgICAgICAgdHdlZW4gPSBzY2hlZHVsZS50d2VlbjtcblxuICAgIC8vIElmIHRoaXMgbm9kZSBzaGFyZWQgdHdlZW4gd2l0aCB0aGUgcHJldmlvdXMgbm9kZSxcbiAgICAvLyBqdXN0IGFzc2lnbiB0aGUgdXBkYXRlZCBzaGFyZWQgdHdlZW4gYW5kIHdlXHUyMDE5cmUgZG9uZSFcbiAgICAvLyBPdGhlcndpc2UsIGNvcHktb24td3JpdGUuXG4gICAgaWYgKHR3ZWVuICE9PSB0d2VlbjApIHtcbiAgICAgIHR3ZWVuMSA9IHR3ZWVuMCA9IHR3ZWVuO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIG4gPSB0d2VlbjEubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGlmICh0d2VlbjFbaV0ubmFtZSA9PT0gbmFtZSkge1xuICAgICAgICAgIHR3ZWVuMSA9IHR3ZWVuMS5zbGljZSgpO1xuICAgICAgICAgIHR3ZWVuMS5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBzY2hlZHVsZS50d2VlbiA9IHR3ZWVuMTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdHdlZW5GdW5jdGlvbihpZCwgbmFtZSwgdmFsdWUpIHtcbiAgdmFyIHR3ZWVuMCwgdHdlZW4xO1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzY2hlZHVsZSA9IHNldCh0aGlzLCBpZCksXG4gICAgICAgIHR3ZWVuID0gc2NoZWR1bGUudHdlZW47XG5cbiAgICAvLyBJZiB0aGlzIG5vZGUgc2hhcmVkIHR3ZWVuIHdpdGggdGhlIHByZXZpb3VzIG5vZGUsXG4gICAgLy8ganVzdCBhc3NpZ24gdGhlIHVwZGF0ZWQgc2hhcmVkIHR3ZWVuIGFuZCB3ZVx1MjAxOXJlIGRvbmUhXG4gICAgLy8gT3RoZXJ3aXNlLCBjb3B5LW9uLXdyaXRlLlxuICAgIGlmICh0d2VlbiAhPT0gdHdlZW4wKSB7XG4gICAgICB0d2VlbjEgPSAodHdlZW4wID0gdHdlZW4pLnNsaWNlKCk7XG4gICAgICBmb3IgKHZhciB0ID0ge25hbWU6IG5hbWUsIHZhbHVlOiB2YWx1ZX0sIGkgPSAwLCBuID0gdHdlZW4xLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgICBpZiAodHdlZW4xW2ldLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgICAgICB0d2VlbjFbaV0gPSB0O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoaSA9PT0gbikgdHdlZW4xLnB1c2godCk7XG4gICAgfVxuXG4gICAgc2NoZWR1bGUudHdlZW4gPSB0d2VlbjE7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHZhciBpZCA9IHRoaXMuX2lkO1xuXG4gIG5hbWUgKz0gXCJcIjtcblxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICB2YXIgdHdlZW4gPSBnZXQodGhpcy5ub2RlKCksIGlkKS50d2VlbjtcbiAgICBmb3IgKHZhciBpID0gMCwgbiA9IHR3ZWVuLmxlbmd0aCwgdDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKCh0ID0gdHdlZW5baV0pLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHQudmFsdWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuZWFjaCgodmFsdWUgPT0gbnVsbCA/IHR3ZWVuUmVtb3ZlIDogdHdlZW5GdW5jdGlvbikoaWQsIG5hbWUsIHZhbHVlKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0d2VlblZhbHVlKHRyYW5zaXRpb24sIG5hbWUsIHZhbHVlKSB7XG4gIHZhciBpZCA9IHRyYW5zaXRpb24uX2lkO1xuXG4gIHRyYW5zaXRpb24uZWFjaChmdW5jdGlvbigpIHtcbiAgICB2YXIgc2NoZWR1bGUgPSBzZXQodGhpcywgaWQpO1xuICAgIChzY2hlZHVsZS52YWx1ZSB8fCAoc2NoZWR1bGUudmFsdWUgPSB7fSkpW25hbWVdID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKG5vZGUpIHtcbiAgICByZXR1cm4gZ2V0KG5vZGUsIGlkKS52YWx1ZVtuYW1lXTtcbiAgfTtcbn1cbiIsICJpbXBvcnQge2NvbG9yfSBmcm9tIFwiZDMtY29sb3JcIjtcbmltcG9ydCB7aW50ZXJwb2xhdGVOdW1iZXIsIGludGVycG9sYXRlUmdiLCBpbnRlcnBvbGF0ZVN0cmluZ30gZnJvbSBcImQzLWludGVycG9sYXRlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgdmFyIGM7XG4gIHJldHVybiAodHlwZW9mIGIgPT09IFwibnVtYmVyXCIgPyBpbnRlcnBvbGF0ZU51bWJlclxuICAgICAgOiBiIGluc3RhbmNlb2YgY29sb3IgPyBpbnRlcnBvbGF0ZVJnYlxuICAgICAgOiAoYyA9IGNvbG9yKGIpKSA/IChiID0gYywgaW50ZXJwb2xhdGVSZ2IpXG4gICAgICA6IGludGVycG9sYXRlU3RyaW5nKShhLCBiKTtcbn1cbiIsICJpbXBvcnQge2ludGVycG9sYXRlVHJhbnNmb3JtU3ZnIGFzIGludGVycG9sYXRlVHJhbnNmb3JtfSBmcm9tIFwiZDMtaW50ZXJwb2xhdGVcIjtcbmltcG9ydCB7bmFtZXNwYWNlfSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge3R3ZWVuVmFsdWV9IGZyb20gXCIuL3R3ZWVuLmpzXCI7XG5pbXBvcnQgaW50ZXJwb2xhdGUgZnJvbSBcIi4vaW50ZXJwb2xhdGUuanNcIjtcblxuZnVuY3Rpb24gYXR0clJlbW92ZShuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0clJlbW92ZU5TKGZ1bGxuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJDb25zdGFudChuYW1lLCBpbnRlcnBvbGF0ZSwgdmFsdWUxKSB7XG4gIHZhciBzdHJpbmcwMCxcbiAgICAgIHN0cmluZzEgPSB2YWx1ZTEgKyBcIlwiLFxuICAgICAgaW50ZXJwb2xhdGUwO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHN0cmluZzAgPSB0aGlzLmdldEF0dHJpYnV0ZShuYW1lKTtcbiAgICByZXR1cm4gc3RyaW5nMCA9PT0gc3RyaW5nMSA/IG51bGxcbiAgICAgICAgOiBzdHJpbmcwID09PSBzdHJpbmcwMCA/IGludGVycG9sYXRlMFxuICAgICAgICA6IGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHN0cmluZzAwID0gc3RyaW5nMCwgdmFsdWUxKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckNvbnN0YW50TlMoZnVsbG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZTEpIHtcbiAgdmFyIHN0cmluZzAwLFxuICAgICAgc3RyaW5nMSA9IHZhbHVlMSArIFwiXCIsXG4gICAgICBpbnRlcnBvbGF0ZTA7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RyaW5nMCA9IHRoaXMuZ2V0QXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgICByZXR1cm4gc3RyaW5nMCA9PT0gc3RyaW5nMSA/IG51bGxcbiAgICAgICAgOiBzdHJpbmcwID09PSBzdHJpbmcwMCA/IGludGVycG9sYXRlMFxuICAgICAgICA6IGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHN0cmluZzAwID0gc3RyaW5nMCwgdmFsdWUxKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckZ1bmN0aW9uKG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZSkge1xuICB2YXIgc3RyaW5nMDAsXG4gICAgICBzdHJpbmcxMCxcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdHJpbmcwLCB2YWx1ZTEgPSB2YWx1ZSh0aGlzKSwgc3RyaW5nMTtcbiAgICBpZiAodmFsdWUxID09IG51bGwpIHJldHVybiB2b2lkIHRoaXMucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICAgIHN0cmluZzAgPSB0aGlzLmdldEF0dHJpYnV0ZShuYW1lKTtcbiAgICBzdHJpbmcxID0gdmFsdWUxICsgXCJcIjtcbiAgICByZXR1cm4gc3RyaW5nMCA9PT0gc3RyaW5nMSA/IG51bGxcbiAgICAgICAgOiBzdHJpbmcwID09PSBzdHJpbmcwMCAmJiBzdHJpbmcxID09PSBzdHJpbmcxMCA/IGludGVycG9sYXRlMFxuICAgICAgICA6IChzdHJpbmcxMCA9IHN0cmluZzEsIGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHN0cmluZzAwID0gc3RyaW5nMCwgdmFsdWUxKSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJGdW5jdGlvbk5TKGZ1bGxuYW1lLCBpbnRlcnBvbGF0ZSwgdmFsdWUpIHtcbiAgdmFyIHN0cmluZzAwLFxuICAgICAgc3RyaW5nMTAsXG4gICAgICBpbnRlcnBvbGF0ZTA7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RyaW5nMCwgdmFsdWUxID0gdmFsdWUodGhpcyksIHN0cmluZzE7XG4gICAgaWYgKHZhbHVlMSA9PSBudWxsKSByZXR1cm4gdm9pZCB0aGlzLnJlbW92ZUF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gICAgc3RyaW5nMCA9IHRoaXMuZ2V0QXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgICBzdHJpbmcxID0gdmFsdWUxICsgXCJcIjtcbiAgICByZXR1cm4gc3RyaW5nMCA9PT0gc3RyaW5nMSA/IG51bGxcbiAgICAgICAgOiBzdHJpbmcwID09PSBzdHJpbmcwMCAmJiBzdHJpbmcxID09PSBzdHJpbmcxMCA/IGludGVycG9sYXRlMFxuICAgICAgICA6IChzdHJpbmcxMCA9IHN0cmluZzEsIGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHN0cmluZzAwID0gc3RyaW5nMCwgdmFsdWUxKSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHZhciBmdWxsbmFtZSA9IG5hbWVzcGFjZShuYW1lKSwgaSA9IGZ1bGxuYW1lID09PSBcInRyYW5zZm9ybVwiID8gaW50ZXJwb2xhdGVUcmFuc2Zvcm0gOiBpbnRlcnBvbGF0ZTtcbiAgcmV0dXJuIHRoaXMuYXR0clR3ZWVuKG5hbWUsIHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICA/IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJGdW5jdGlvbk5TIDogYXR0ckZ1bmN0aW9uKShmdWxsbmFtZSwgaSwgdHdlZW5WYWx1ZSh0aGlzLCBcImF0dHIuXCIgKyBuYW1lLCB2YWx1ZSkpXG4gICAgICA6IHZhbHVlID09IG51bGwgPyAoZnVsbG5hbWUubG9jYWwgPyBhdHRyUmVtb3ZlTlMgOiBhdHRyUmVtb3ZlKShmdWxsbmFtZSlcbiAgICAgIDogKGZ1bGxuYW1lLmxvY2FsID8gYXR0ckNvbnN0YW50TlMgOiBhdHRyQ29uc3RhbnQpKGZ1bGxuYW1lLCBpLCB2YWx1ZSkpO1xufVxuIiwgImltcG9ydCB7bmFtZXNwYWNlfSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5cbmZ1bmN0aW9uIGF0dHJJbnRlcnBvbGF0ZShuYW1lLCBpKSB7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUobmFtZSwgaS5jYWxsKHRoaXMsIHQpKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckludGVycG9sYXRlTlMoZnVsbG5hbWUsIGkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCwgaS5jYWxsKHRoaXMsIHQpKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0clR3ZWVuTlMoZnVsbG5hbWUsIHZhbHVlKSB7XG4gIHZhciB0MCwgaTA7XG4gIGZ1bmN0aW9uIHR3ZWVuKCkge1xuICAgIHZhciBpID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAoaSAhPT0gaTApIHQwID0gKGkwID0gaSkgJiYgYXR0ckludGVycG9sYXRlTlMoZnVsbG5hbWUsIGkpO1xuICAgIHJldHVybiB0MDtcbiAgfVxuICB0d2Vlbi5fdmFsdWUgPSB2YWx1ZTtcbiAgcmV0dXJuIHR3ZWVuO1xufVxuXG5mdW5jdGlvbiBhdHRyVHdlZW4obmFtZSwgdmFsdWUpIHtcbiAgdmFyIHQwLCBpMDtcbiAgZnVuY3Rpb24gdHdlZW4oKSB7XG4gICAgdmFyIGkgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmIChpICE9PSBpMCkgdDAgPSAoaTAgPSBpKSAmJiBhdHRySW50ZXJwb2xhdGUobmFtZSwgaSk7XG4gICAgcmV0dXJuIHQwO1xuICB9XG4gIHR3ZWVuLl92YWx1ZSA9IHZhbHVlO1xuICByZXR1cm4gdHdlZW47XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHZhciBrZXkgPSBcImF0dHIuXCIgKyBuYW1lO1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHJldHVybiAoa2V5ID0gdGhpcy50d2VlbihrZXkpKSAmJiBrZXkuX3ZhbHVlO1xuICBpZiAodmFsdWUgPT0gbnVsbCkgcmV0dXJuIHRoaXMudHdlZW4oa2V5LCBudWxsKTtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3I7XG4gIHZhciBmdWxsbmFtZSA9IG5hbWVzcGFjZShuYW1lKTtcbiAgcmV0dXJuIHRoaXMudHdlZW4oa2V5LCAoZnVsbG5hbWUubG9jYWwgPyBhdHRyVHdlZW5OUyA6IGF0dHJUd2VlbikoZnVsbG5hbWUsIHZhbHVlKSk7XG59XG4iLCAiaW1wb3J0IHtnZXQsIGluaXR9IGZyb20gXCIuL3NjaGVkdWxlLmpzXCI7XG5cbmZ1bmN0aW9uIGRlbGF5RnVuY3Rpb24oaWQsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBpbml0KHRoaXMsIGlkKS5kZWxheSA9ICt2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBkZWxheUNvbnN0YW50KGlkLCB2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPSArdmFsdWUsIGZ1bmN0aW9uKCkge1xuICAgIGluaXQodGhpcywgaWQpLmRlbGF5ID0gdmFsdWU7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHZhciBpZCA9IHRoaXMuX2lkO1xuXG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMuZWFjaCgodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICA/IGRlbGF5RnVuY3Rpb25cbiAgICAgICAgICA6IGRlbGF5Q29uc3RhbnQpKGlkLCB2YWx1ZSkpXG4gICAgICA6IGdldCh0aGlzLm5vZGUoKSwgaWQpLmRlbGF5O1xufVxuIiwgImltcG9ydCB7Z2V0LCBzZXR9IGZyb20gXCIuL3NjaGVkdWxlLmpzXCI7XG5cbmZ1bmN0aW9uIGR1cmF0aW9uRnVuY3Rpb24oaWQsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBzZXQodGhpcywgaWQpLmR1cmF0aW9uID0gK3ZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGR1cmF0aW9uQ29uc3RhbnQoaWQsIHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9ICt2YWx1ZSwgZnVuY3Rpb24oKSB7XG4gICAgc2V0KHRoaXMsIGlkKS5kdXJhdGlvbiA9IHZhbHVlO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICB2YXIgaWQgPSB0aGlzLl9pZDtcblxuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgPyB0aGlzLmVhY2goKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgPyBkdXJhdGlvbkZ1bmN0aW9uXG4gICAgICAgICAgOiBkdXJhdGlvbkNvbnN0YW50KShpZCwgdmFsdWUpKVxuICAgICAgOiBnZXQodGhpcy5ub2RlKCksIGlkKS5kdXJhdGlvbjtcbn1cbiIsICJpbXBvcnQge2dldCwgc2V0fSBmcm9tIFwiLi9zY2hlZHVsZS5qc1wiO1xuXG5mdW5jdGlvbiBlYXNlQ29uc3RhbnQoaWQsIHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgc2V0KHRoaXMsIGlkKS5lYXNlID0gdmFsdWU7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHZhciBpZCA9IHRoaXMuX2lkO1xuXG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMuZWFjaChlYXNlQ29uc3RhbnQoaWQsIHZhbHVlKSlcbiAgICAgIDogZ2V0KHRoaXMubm9kZSgpLCBpZCkuZWFzZTtcbn1cbiIsICJpbXBvcnQge3NldH0gZnJvbSBcIi4vc2NoZWR1bGUuanNcIjtcblxuZnVuY3Rpb24gZWFzZVZhcnlpbmcoaWQsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHR5cGVvZiB2ICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcbiAgICBzZXQodGhpcywgaWQpLmVhc2UgPSB2O1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcbiAgcmV0dXJuIHRoaXMuZWFjaChlYXNlVmFyeWluZyh0aGlzLl9pZCwgdmFsdWUpKTtcbn1cbiIsICJpbXBvcnQge21hdGNoZXJ9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7VHJhbnNpdGlvbn0gZnJvbSBcIi4vaW5kZXguanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obWF0Y2gpIHtcbiAgaWYgKHR5cGVvZiBtYXRjaCAhPT0gXCJmdW5jdGlvblwiKSBtYXRjaCA9IG1hdGNoZXIobWF0Y2gpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgc3ViZ3JvdXAgPSBzdWJncm91cHNbal0gPSBbXSwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiBtYXRjaC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSkge1xuICAgICAgICBzdWJncm91cC5wdXNoKG5vZGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgVHJhbnNpdGlvbihzdWJncm91cHMsIHRoaXMuX3BhcmVudHMsIHRoaXMuX25hbWUsIHRoaXMuX2lkKTtcbn1cbiIsICJpbXBvcnQge1RyYW5zaXRpb259IGZyb20gXCIuL2luZGV4LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHRyYW5zaXRpb24pIHtcbiAgaWYgKHRyYW5zaXRpb24uX2lkICE9PSB0aGlzLl9pZCkgdGhyb3cgbmV3IEVycm9yO1xuXG4gIGZvciAodmFyIGdyb3VwczAgPSB0aGlzLl9ncm91cHMsIGdyb3VwczEgPSB0cmFuc2l0aW9uLl9ncm91cHMsIG0wID0gZ3JvdXBzMC5sZW5ndGgsIG0xID0gZ3JvdXBzMS5sZW5ndGgsIG0gPSBNYXRoLm1pbihtMCwgbTEpLCBtZXJnZXMgPSBuZXcgQXJyYXkobTApLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwMCA9IGdyb3VwczBbal0sIGdyb3VwMSA9IGdyb3VwczFbal0sIG4gPSBncm91cDAubGVuZ3RoLCBtZXJnZSA9IG1lcmdlc1tqXSA9IG5ldyBBcnJheShuKSwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXAwW2ldIHx8IGdyb3VwMVtpXSkge1xuICAgICAgICBtZXJnZVtpXSA9IG5vZGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZm9yICg7IGogPCBtMDsgKytqKSB7XG4gICAgbWVyZ2VzW2pdID0gZ3JvdXBzMFtqXTtcbiAgfVxuXG4gIHJldHVybiBuZXcgVHJhbnNpdGlvbihtZXJnZXMsIHRoaXMuX3BhcmVudHMsIHRoaXMuX25hbWUsIHRoaXMuX2lkKTtcbn1cbiIsICJpbXBvcnQge2dldCwgc2V0LCBpbml0fSBmcm9tIFwiLi9zY2hlZHVsZS5qc1wiO1xuXG5mdW5jdGlvbiBzdGFydChuYW1lKSB7XG4gIHJldHVybiAobmFtZSArIFwiXCIpLnRyaW0oKS5zcGxpdCgvXnxcXHMrLykuZXZlcnkoZnVuY3Rpb24odCkge1xuICAgIHZhciBpID0gdC5pbmRleE9mKFwiLlwiKTtcbiAgICBpZiAoaSA+PSAwKSB0ID0gdC5zbGljZSgwLCBpKTtcbiAgICByZXR1cm4gIXQgfHwgdCA9PT0gXCJzdGFydFwiO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gb25GdW5jdGlvbihpZCwgbmFtZSwgbGlzdGVuZXIpIHtcbiAgdmFyIG9uMCwgb24xLCBzaXQgPSBzdGFydChuYW1lKSA/IGluaXQgOiBzZXQ7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2NoZWR1bGUgPSBzaXQodGhpcywgaWQpLFxuICAgICAgICBvbiA9IHNjaGVkdWxlLm9uO1xuXG4gICAgLy8gSWYgdGhpcyBub2RlIHNoYXJlZCBhIGRpc3BhdGNoIHdpdGggdGhlIHByZXZpb3VzIG5vZGUsXG4gICAgLy8ganVzdCBhc3NpZ24gdGhlIHVwZGF0ZWQgc2hhcmVkIGRpc3BhdGNoIGFuZCB3ZVx1MjAxOXJlIGRvbmUhXG4gICAgLy8gT3RoZXJ3aXNlLCBjb3B5LW9uLXdyaXRlLlxuICAgIGlmIChvbiAhPT0gb24wKSAob24xID0gKG9uMCA9IG9uKS5jb3B5KCkpLm9uKG5hbWUsIGxpc3RlbmVyKTtcblxuICAgIHNjaGVkdWxlLm9uID0gb24xO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCBsaXN0ZW5lcikge1xuICB2YXIgaWQgPSB0aGlzLl9pZDtcblxuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA8IDJcbiAgICAgID8gZ2V0KHRoaXMubm9kZSgpLCBpZCkub24ub24obmFtZSlcbiAgICAgIDogdGhpcy5lYWNoKG9uRnVuY3Rpb24oaWQsIG5hbWUsIGxpc3RlbmVyKSk7XG59XG4iLCAiZnVuY3Rpb24gcmVtb3ZlRnVuY3Rpb24oaWQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudE5vZGU7XG4gICAgZm9yICh2YXIgaSBpbiB0aGlzLl9fdHJhbnNpdGlvbikgaWYgKCtpICE9PSBpZCkgcmV0dXJuO1xuICAgIGlmIChwYXJlbnQpIHBhcmVudC5yZW1vdmVDaGlsZCh0aGlzKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLm9uKFwiZW5kLnJlbW92ZVwiLCByZW1vdmVGdW5jdGlvbih0aGlzLl9pZCkpO1xufVxuIiwgImltcG9ydCB7c2VsZWN0b3J9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7VHJhbnNpdGlvbn0gZnJvbSBcIi4vaW5kZXguanNcIjtcbmltcG9ydCBzY2hlZHVsZSwge2dldH0gZnJvbSBcIi4vc2NoZWR1bGUuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0KSB7XG4gIHZhciBuYW1lID0gdGhpcy5fbmFtZSxcbiAgICAgIGlkID0gdGhpcy5faWQ7XG5cbiAgaWYgKHR5cGVvZiBzZWxlY3QgIT09IFwiZnVuY3Rpb25cIikgc2VsZWN0ID0gc2VsZWN0b3Ioc2VsZWN0KTtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBzdWJncm91cHMgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIHN1Ymdyb3VwID0gc3ViZ3JvdXBzW2pdID0gbmV3IEFycmF5KG4pLCBub2RlLCBzdWJub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKChub2RlID0gZ3JvdXBbaV0pICYmIChzdWJub2RlID0gc2VsZWN0LmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApKSkge1xuICAgICAgICBpZiAoXCJfX2RhdGFfX1wiIGluIG5vZGUpIHN1Ym5vZGUuX19kYXRhX18gPSBub2RlLl9fZGF0YV9fO1xuICAgICAgICBzdWJncm91cFtpXSA9IHN1Ym5vZGU7XG4gICAgICAgIHNjaGVkdWxlKHN1Ymdyb3VwW2ldLCBuYW1lLCBpZCwgaSwgc3ViZ3JvdXAsIGdldChub2RlLCBpZCkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgVHJhbnNpdGlvbihzdWJncm91cHMsIHRoaXMuX3BhcmVudHMsIG5hbWUsIGlkKTtcbn1cbiIsICJpbXBvcnQge3NlbGVjdG9yQWxsfSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge1RyYW5zaXRpb259IGZyb20gXCIuL2luZGV4LmpzXCI7XG5pbXBvcnQgc2NoZWR1bGUsIHtnZXR9IGZyb20gXCIuL3NjaGVkdWxlLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdCkge1xuICB2YXIgbmFtZSA9IHRoaXMuX25hbWUsXG4gICAgICBpZCA9IHRoaXMuX2lkO1xuXG4gIGlmICh0eXBlb2Ygc2VsZWN0ICE9PSBcImZ1bmN0aW9uXCIpIHNlbGVjdCA9IHNlbGVjdG9yQWxsKHNlbGVjdCk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gW10sIHBhcmVudHMgPSBbXSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgZm9yICh2YXIgY2hpbGRyZW4gPSBzZWxlY3QuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCksIGNoaWxkLCBpbmhlcml0ID0gZ2V0KG5vZGUsIGlkKSwgayA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGsgPCBsOyArK2spIHtcbiAgICAgICAgICBpZiAoY2hpbGQgPSBjaGlsZHJlbltrXSkge1xuICAgICAgICAgICAgc2NoZWR1bGUoY2hpbGQsIG5hbWUsIGlkLCBrLCBjaGlsZHJlbiwgaW5oZXJpdCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHN1Ymdyb3Vwcy5wdXNoKGNoaWxkcmVuKTtcbiAgICAgICAgcGFyZW50cy5wdXNoKG5vZGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgVHJhbnNpdGlvbihzdWJncm91cHMsIHBhcmVudHMsIG5hbWUsIGlkKTtcbn1cbiIsICJpbXBvcnQge3NlbGVjdGlvbn0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuXG52YXIgU2VsZWN0aW9uID0gc2VsZWN0aW9uLnByb3RvdHlwZS5jb25zdHJ1Y3RvcjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHRoaXMuX2dyb3VwcywgdGhpcy5fcGFyZW50cyk7XG59XG4iLCAiaW1wb3J0IHtpbnRlcnBvbGF0ZVRyYW5zZm9ybUNzcyBhcyBpbnRlcnBvbGF0ZVRyYW5zZm9ybX0gZnJvbSBcImQzLWludGVycG9sYXRlXCI7XG5pbXBvcnQge3N0eWxlfSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge3NldH0gZnJvbSBcIi4vc2NoZWR1bGUuanNcIjtcbmltcG9ydCB7dHdlZW5WYWx1ZX0gZnJvbSBcIi4vdHdlZW4uanNcIjtcbmltcG9ydCBpbnRlcnBvbGF0ZSBmcm9tIFwiLi9pbnRlcnBvbGF0ZS5qc1wiO1xuXG5mdW5jdGlvbiBzdHlsZU51bGwobmFtZSwgaW50ZXJwb2xhdGUpIHtcbiAgdmFyIHN0cmluZzAwLFxuICAgICAgc3RyaW5nMTAsXG4gICAgICBpbnRlcnBvbGF0ZTA7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RyaW5nMCA9IHN0eWxlKHRoaXMsIG5hbWUpLFxuICAgICAgICBzdHJpbmcxID0gKHRoaXMuc3R5bGUucmVtb3ZlUHJvcGVydHkobmFtZSksIHN0eWxlKHRoaXMsIG5hbWUpKTtcbiAgICByZXR1cm4gc3RyaW5nMCA9PT0gc3RyaW5nMSA/IG51bGxcbiAgICAgICAgOiBzdHJpbmcwID09PSBzdHJpbmcwMCAmJiBzdHJpbmcxID09PSBzdHJpbmcxMCA/IGludGVycG9sYXRlMFxuICAgICAgICA6IGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHN0cmluZzAwID0gc3RyaW5nMCwgc3RyaW5nMTAgPSBzdHJpbmcxKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3R5bGVSZW1vdmUobmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShuYW1lKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3R5bGVDb25zdGFudChuYW1lLCBpbnRlcnBvbGF0ZSwgdmFsdWUxKSB7XG4gIHZhciBzdHJpbmcwMCxcbiAgICAgIHN0cmluZzEgPSB2YWx1ZTEgKyBcIlwiLFxuICAgICAgaW50ZXJwb2xhdGUwO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHN0cmluZzAgPSBzdHlsZSh0aGlzLCBuYW1lKTtcbiAgICByZXR1cm4gc3RyaW5nMCA9PT0gc3RyaW5nMSA/IG51bGxcbiAgICAgICAgOiBzdHJpbmcwID09PSBzdHJpbmcwMCA/IGludGVycG9sYXRlMFxuICAgICAgICA6IGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHN0cmluZzAwID0gc3RyaW5nMCwgdmFsdWUxKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3R5bGVGdW5jdGlvbihuYW1lLCBpbnRlcnBvbGF0ZSwgdmFsdWUpIHtcbiAgdmFyIHN0cmluZzAwLFxuICAgICAgc3RyaW5nMTAsXG4gICAgICBpbnRlcnBvbGF0ZTA7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RyaW5nMCA9IHN0eWxlKHRoaXMsIG5hbWUpLFxuICAgICAgICB2YWx1ZTEgPSB2YWx1ZSh0aGlzKSxcbiAgICAgICAgc3RyaW5nMSA9IHZhbHVlMSArIFwiXCI7XG4gICAgaWYgKHZhbHVlMSA9PSBudWxsKSBzdHJpbmcxID0gdmFsdWUxID0gKHRoaXMuc3R5bGUucmVtb3ZlUHJvcGVydHkobmFtZSksIHN0eWxlKHRoaXMsIG5hbWUpKTtcbiAgICByZXR1cm4gc3RyaW5nMCA9PT0gc3RyaW5nMSA/IG51bGxcbiAgICAgICAgOiBzdHJpbmcwID09PSBzdHJpbmcwMCAmJiBzdHJpbmcxID09PSBzdHJpbmcxMCA/IGludGVycG9sYXRlMFxuICAgICAgICA6IChzdHJpbmcxMCA9IHN0cmluZzEsIGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHN0cmluZzAwID0gc3RyaW5nMCwgdmFsdWUxKSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0eWxlTWF5YmVSZW1vdmUoaWQsIG5hbWUpIHtcbiAgdmFyIG9uMCwgb24xLCBsaXN0ZW5lcjAsIGtleSA9IFwic3R5bGUuXCIgKyBuYW1lLCBldmVudCA9IFwiZW5kLlwiICsga2V5LCByZW1vdmU7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2NoZWR1bGUgPSBzZXQodGhpcywgaWQpLFxuICAgICAgICBvbiA9IHNjaGVkdWxlLm9uLFxuICAgICAgICBsaXN0ZW5lciA9IHNjaGVkdWxlLnZhbHVlW2tleV0gPT0gbnVsbCA/IHJlbW92ZSB8fCAocmVtb3ZlID0gc3R5bGVSZW1vdmUobmFtZSkpIDogdW5kZWZpbmVkO1xuXG4gICAgLy8gSWYgdGhpcyBub2RlIHNoYXJlZCBhIGRpc3BhdGNoIHdpdGggdGhlIHByZXZpb3VzIG5vZGUsXG4gICAgLy8ganVzdCBhc3NpZ24gdGhlIHVwZGF0ZWQgc2hhcmVkIGRpc3BhdGNoIGFuZCB3ZVx1MjAxOXJlIGRvbmUhXG4gICAgLy8gT3RoZXJ3aXNlLCBjb3B5LW9uLXdyaXRlLlxuICAgIGlmIChvbiAhPT0gb24wIHx8IGxpc3RlbmVyMCAhPT0gbGlzdGVuZXIpIChvbjEgPSAob24wID0gb24pLmNvcHkoKSkub24oZXZlbnQsIGxpc3RlbmVyMCA9IGxpc3RlbmVyKTtcblxuICAgIHNjaGVkdWxlLm9uID0gb24xO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcbiAgdmFyIGkgPSAobmFtZSArPSBcIlwiKSA9PT0gXCJ0cmFuc2Zvcm1cIiA/IGludGVycG9sYXRlVHJhbnNmb3JtIDogaW50ZXJwb2xhdGU7XG4gIHJldHVybiB2YWx1ZSA9PSBudWxsID8gdGhpc1xuICAgICAgLnN0eWxlVHdlZW4obmFtZSwgc3R5bGVOdWxsKG5hbWUsIGkpKVxuICAgICAgLm9uKFwiZW5kLnN0eWxlLlwiICsgbmFtZSwgc3R5bGVSZW1vdmUobmFtZSkpXG4gICAgOiB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIiA/IHRoaXNcbiAgICAgIC5zdHlsZVR3ZWVuKG5hbWUsIHN0eWxlRnVuY3Rpb24obmFtZSwgaSwgdHdlZW5WYWx1ZSh0aGlzLCBcInN0eWxlLlwiICsgbmFtZSwgdmFsdWUpKSlcbiAgICAgIC5lYWNoKHN0eWxlTWF5YmVSZW1vdmUodGhpcy5faWQsIG5hbWUpKVxuICAgIDogdGhpc1xuICAgICAgLnN0eWxlVHdlZW4obmFtZSwgc3R5bGVDb25zdGFudChuYW1lLCBpLCB2YWx1ZSksIHByaW9yaXR5KVxuICAgICAgLm9uKFwiZW5kLnN0eWxlLlwiICsgbmFtZSwgbnVsbCk7XG59XG4iLCAiZnVuY3Rpb24gc3R5bGVJbnRlcnBvbGF0ZShuYW1lLCBpLCBwcmlvcml0eSkge1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHRoaXMuc3R5bGUuc2V0UHJvcGVydHkobmFtZSwgaS5jYWxsKHRoaXMsIHQpLCBwcmlvcml0eSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0eWxlVHdlZW4obmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG4gIHZhciB0LCBpMDtcbiAgZnVuY3Rpb24gdHdlZW4oKSB7XG4gICAgdmFyIGkgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmIChpICE9PSBpMCkgdCA9IChpMCA9IGkpICYmIHN0eWxlSW50ZXJwb2xhdGUobmFtZSwgaSwgcHJpb3JpdHkpO1xuICAgIHJldHVybiB0O1xuICB9XG4gIHR3ZWVuLl92YWx1ZSA9IHZhbHVlO1xuICByZXR1cm4gdHdlZW47XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICB2YXIga2V5ID0gXCJzdHlsZS5cIiArIChuYW1lICs9IFwiXCIpO1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHJldHVybiAoa2V5ID0gdGhpcy50d2VlbihrZXkpKSAmJiBrZXkuX3ZhbHVlO1xuICBpZiAodmFsdWUgPT0gbnVsbCkgcmV0dXJuIHRoaXMudHdlZW4oa2V5LCBudWxsKTtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3I7XG4gIHJldHVybiB0aGlzLnR3ZWVuKGtleSwgc3R5bGVUd2VlbihuYW1lLCB2YWx1ZSwgcHJpb3JpdHkgPT0gbnVsbCA/IFwiXCIgOiBwcmlvcml0eSkpO1xufVxuIiwgImltcG9ydCB7dHdlZW5WYWx1ZX0gZnJvbSBcIi4vdHdlZW4uanNcIjtcblxuZnVuY3Rpb24gdGV4dENvbnN0YW50KHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnRleHRDb250ZW50ID0gdmFsdWU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHRleHRGdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZhbHVlMSA9IHZhbHVlKHRoaXMpO1xuICAgIHRoaXMudGV4dENvbnRlbnQgPSB2YWx1ZTEgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZTE7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiB0aGlzLnR3ZWVuKFwidGV4dFwiLCB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgPyB0ZXh0RnVuY3Rpb24odHdlZW5WYWx1ZSh0aGlzLCBcInRleHRcIiwgdmFsdWUpKVxuICAgICAgOiB0ZXh0Q29uc3RhbnQodmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSArIFwiXCIpKTtcbn1cbiIsICJmdW5jdGlvbiB0ZXh0SW50ZXJwb2xhdGUoaSkge1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHRoaXMudGV4dENvbnRlbnQgPSBpLmNhbGwodGhpcywgdCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHRleHRUd2Vlbih2YWx1ZSkge1xuICB2YXIgdDAsIGkwO1xuICBmdW5jdGlvbiB0d2VlbigpIHtcbiAgICB2YXIgaSA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKGkgIT09IGkwKSB0MCA9IChpMCA9IGkpICYmIHRleHRJbnRlcnBvbGF0ZShpKTtcbiAgICByZXR1cm4gdDA7XG4gIH1cbiAgdHdlZW4uX3ZhbHVlID0gdmFsdWU7XG4gIHJldHVybiB0d2Vlbjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUpIHtcbiAgdmFyIGtleSA9IFwidGV4dFwiO1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDEpIHJldHVybiAoa2V5ID0gdGhpcy50d2VlbihrZXkpKSAmJiBrZXkuX3ZhbHVlO1xuICBpZiAodmFsdWUgPT0gbnVsbCkgcmV0dXJuIHRoaXMudHdlZW4oa2V5LCBudWxsKTtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3I7XG4gIHJldHVybiB0aGlzLnR3ZWVuKGtleSwgdGV4dFR3ZWVuKHZhbHVlKSk7XG59XG4iLCAiaW1wb3J0IHtUcmFuc2l0aW9uLCBuZXdJZH0gZnJvbSBcIi4vaW5kZXguanNcIjtcbmltcG9ydCBzY2hlZHVsZSwge2dldH0gZnJvbSBcIi4vc2NoZWR1bGUuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBuYW1lID0gdGhpcy5fbmFtZSxcbiAgICAgIGlkMCA9IHRoaXMuX2lkLFxuICAgICAgaWQxID0gbmV3SWQoKTtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICB2YXIgaW5oZXJpdCA9IGdldChub2RlLCBpZDApO1xuICAgICAgICBzY2hlZHVsZShub2RlLCBuYW1lLCBpZDEsIGksIGdyb3VwLCB7XG4gICAgICAgICAgdGltZTogaW5oZXJpdC50aW1lICsgaW5oZXJpdC5kZWxheSArIGluaGVyaXQuZHVyYXRpb24sXG4gICAgICAgICAgZGVsYXk6IDAsXG4gICAgICAgICAgZHVyYXRpb246IGluaGVyaXQuZHVyYXRpb24sXG4gICAgICAgICAgZWFzZTogaW5oZXJpdC5lYXNlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgVHJhbnNpdGlvbihncm91cHMsIHRoaXMuX3BhcmVudHMsIG5hbWUsIGlkMSk7XG59XG4iLCAiaW1wb3J0IHtzZXR9IGZyb20gXCIuL3NjaGVkdWxlLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgb24wLCBvbjEsIHRoYXQgPSB0aGlzLCBpZCA9IHRoYXQuX2lkLCBzaXplID0gdGhhdC5zaXplKCk7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICB2YXIgY2FuY2VsID0ge3ZhbHVlOiByZWplY3R9LFxuICAgICAgICBlbmQgPSB7dmFsdWU6IGZ1bmN0aW9uKCkgeyBpZiAoLS1zaXplID09PSAwKSByZXNvbHZlKCk7IH19O1xuXG4gICAgdGhhdC5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHNjaGVkdWxlID0gc2V0KHRoaXMsIGlkKSxcbiAgICAgICAgICBvbiA9IHNjaGVkdWxlLm9uO1xuXG4gICAgICAvLyBJZiB0aGlzIG5vZGUgc2hhcmVkIGEgZGlzcGF0Y2ggd2l0aCB0aGUgcHJldmlvdXMgbm9kZSxcbiAgICAgIC8vIGp1c3QgYXNzaWduIHRoZSB1cGRhdGVkIHNoYXJlZCBkaXNwYXRjaCBhbmQgd2VcdTIwMTlyZSBkb25lIVxuICAgICAgLy8gT3RoZXJ3aXNlLCBjb3B5LW9uLXdyaXRlLlxuICAgICAgaWYgKG9uICE9PSBvbjApIHtcbiAgICAgICAgb24xID0gKG9uMCA9IG9uKS5jb3B5KCk7XG4gICAgICAgIG9uMS5fLmNhbmNlbC5wdXNoKGNhbmNlbCk7XG4gICAgICAgIG9uMS5fLmludGVycnVwdC5wdXNoKGNhbmNlbCk7XG4gICAgICAgIG9uMS5fLmVuZC5wdXNoKGVuZCk7XG4gICAgICB9XG5cbiAgICAgIHNjaGVkdWxlLm9uID0gb24xO1xuICAgIH0pO1xuXG4gICAgLy8gVGhlIHNlbGVjdGlvbiB3YXMgZW1wdHksIHJlc29sdmUgZW5kIGltbWVkaWF0ZWx5XG4gICAgaWYgKHNpemUgPT09IDApIHJlc29sdmUoKTtcbiAgfSk7XG59XG4iLCAiaW1wb3J0IHtzZWxlY3Rpb259IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB0cmFuc2l0aW9uX2F0dHIgZnJvbSBcIi4vYXR0ci5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fYXR0clR3ZWVuIGZyb20gXCIuL2F0dHJUd2Vlbi5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fZGVsYXkgZnJvbSBcIi4vZGVsYXkuanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX2R1cmF0aW9uIGZyb20gXCIuL2R1cmF0aW9uLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9lYXNlIGZyb20gXCIuL2Vhc2UuanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX2Vhc2VWYXJ5aW5nIGZyb20gXCIuL2Vhc2VWYXJ5aW5nLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9maWx0ZXIgZnJvbSBcIi4vZmlsdGVyLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9tZXJnZSBmcm9tIFwiLi9tZXJnZS5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fb24gZnJvbSBcIi4vb24uanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX3JlbW92ZSBmcm9tIFwiLi9yZW1vdmUuanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX3NlbGVjdCBmcm9tIFwiLi9zZWxlY3QuanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX3NlbGVjdEFsbCBmcm9tIFwiLi9zZWxlY3RBbGwuanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX3NlbGVjdGlvbiBmcm9tIFwiLi9zZWxlY3Rpb24uanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX3N0eWxlIGZyb20gXCIuL3N0eWxlLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9zdHlsZVR3ZWVuIGZyb20gXCIuL3N0eWxlVHdlZW4uanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX3RleHQgZnJvbSBcIi4vdGV4dC5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fdGV4dFR3ZWVuIGZyb20gXCIuL3RleHRUd2Vlbi5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fdHJhbnNpdGlvbiBmcm9tIFwiLi90cmFuc2l0aW9uLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl90d2VlbiBmcm9tIFwiLi90d2Vlbi5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fZW5kIGZyb20gXCIuL2VuZC5qc1wiO1xuXG52YXIgaWQgPSAwO1xuXG5leHBvcnQgZnVuY3Rpb24gVHJhbnNpdGlvbihncm91cHMsIHBhcmVudHMsIG5hbWUsIGlkKSB7XG4gIHRoaXMuX2dyb3VwcyA9IGdyb3VwcztcbiAgdGhpcy5fcGFyZW50cyA9IHBhcmVudHM7XG4gIHRoaXMuX25hbWUgPSBuYW1lO1xuICB0aGlzLl9pZCA9IGlkO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0cmFuc2l0aW9uKG5hbWUpIHtcbiAgcmV0dXJuIHNlbGVjdGlvbigpLnRyYW5zaXRpb24obmFtZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBuZXdJZCgpIHtcbiAgcmV0dXJuICsraWQ7XG59XG5cbnZhciBzZWxlY3Rpb25fcHJvdG90eXBlID0gc2VsZWN0aW9uLnByb3RvdHlwZTtcblxuVHJhbnNpdGlvbi5wcm90b3R5cGUgPSB0cmFuc2l0aW9uLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IFRyYW5zaXRpb24sXG4gIHNlbGVjdDogdHJhbnNpdGlvbl9zZWxlY3QsXG4gIHNlbGVjdEFsbDogdHJhbnNpdGlvbl9zZWxlY3RBbGwsXG4gIHNlbGVjdENoaWxkOiBzZWxlY3Rpb25fcHJvdG90eXBlLnNlbGVjdENoaWxkLFxuICBzZWxlY3RDaGlsZHJlbjogc2VsZWN0aW9uX3Byb3RvdHlwZS5zZWxlY3RDaGlsZHJlbixcbiAgZmlsdGVyOiB0cmFuc2l0aW9uX2ZpbHRlcixcbiAgbWVyZ2U6IHRyYW5zaXRpb25fbWVyZ2UsXG4gIHNlbGVjdGlvbjogdHJhbnNpdGlvbl9zZWxlY3Rpb24sXG4gIHRyYW5zaXRpb246IHRyYW5zaXRpb25fdHJhbnNpdGlvbixcbiAgY2FsbDogc2VsZWN0aW9uX3Byb3RvdHlwZS5jYWxsLFxuICBub2Rlczogc2VsZWN0aW9uX3Byb3RvdHlwZS5ub2RlcyxcbiAgbm9kZTogc2VsZWN0aW9uX3Byb3RvdHlwZS5ub2RlLFxuICBzaXplOiBzZWxlY3Rpb25fcHJvdG90eXBlLnNpemUsXG4gIGVtcHR5OiBzZWxlY3Rpb25fcHJvdG90eXBlLmVtcHR5LFxuICBlYWNoOiBzZWxlY3Rpb25fcHJvdG90eXBlLmVhY2gsXG4gIG9uOiB0cmFuc2l0aW9uX29uLFxuICBhdHRyOiB0cmFuc2l0aW9uX2F0dHIsXG4gIGF0dHJUd2VlbjogdHJhbnNpdGlvbl9hdHRyVHdlZW4sXG4gIHN0eWxlOiB0cmFuc2l0aW9uX3N0eWxlLFxuICBzdHlsZVR3ZWVuOiB0cmFuc2l0aW9uX3N0eWxlVHdlZW4sXG4gIHRleHQ6IHRyYW5zaXRpb25fdGV4dCxcbiAgdGV4dFR3ZWVuOiB0cmFuc2l0aW9uX3RleHRUd2VlbixcbiAgcmVtb3ZlOiB0cmFuc2l0aW9uX3JlbW92ZSxcbiAgdHdlZW46IHRyYW5zaXRpb25fdHdlZW4sXG4gIGRlbGF5OiB0cmFuc2l0aW9uX2RlbGF5LFxuICBkdXJhdGlvbjogdHJhbnNpdGlvbl9kdXJhdGlvbixcbiAgZWFzZTogdHJhbnNpdGlvbl9lYXNlLFxuICBlYXNlVmFyeWluZzogdHJhbnNpdGlvbl9lYXNlVmFyeWluZyxcbiAgZW5kOiB0cmFuc2l0aW9uX2VuZCxcbiAgW1N5bWJvbC5pdGVyYXRvcl06IHNlbGVjdGlvbl9wcm90b3R5cGVbU3ltYm9sLml0ZXJhdG9yXVxufTtcbiIsICJleHBvcnQgZnVuY3Rpb24gY3ViaWNJbih0KSB7XG4gIHJldHVybiB0ICogdCAqIHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjdWJpY091dCh0KSB7XG4gIHJldHVybiAtLXQgKiB0ICogdCArIDE7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjdWJpY0luT3V0KHQpIHtcbiAgcmV0dXJuICgodCAqPSAyKSA8PSAxID8gdCAqIHQgKiB0IDogKHQgLT0gMikgKiB0ICogdCArIDIpIC8gMjtcbn1cbiIsICJpbXBvcnQge1RyYW5zaXRpb24sIG5ld0lkfSBmcm9tIFwiLi4vdHJhbnNpdGlvbi9pbmRleC5qc1wiO1xuaW1wb3J0IHNjaGVkdWxlIGZyb20gXCIuLi90cmFuc2l0aW9uL3NjaGVkdWxlLmpzXCI7XG5pbXBvcnQge2Vhc2VDdWJpY0luT3V0fSBmcm9tIFwiZDMtZWFzZVwiO1xuaW1wb3J0IHtub3d9IGZyb20gXCJkMy10aW1lclwiO1xuXG52YXIgZGVmYXVsdFRpbWluZyA9IHtcbiAgdGltZTogbnVsbCwgLy8gU2V0IG9uIHVzZS5cbiAgZGVsYXk6IDAsXG4gIGR1cmF0aW9uOiAyNTAsXG4gIGVhc2U6IGVhc2VDdWJpY0luT3V0XG59O1xuXG5mdW5jdGlvbiBpbmhlcml0KG5vZGUsIGlkKSB7XG4gIHZhciB0aW1pbmc7XG4gIHdoaWxlICghKHRpbWluZyA9IG5vZGUuX190cmFuc2l0aW9uKSB8fCAhKHRpbWluZyA9IHRpbWluZ1tpZF0pKSB7XG4gICAgaWYgKCEobm9kZSA9IG5vZGUucGFyZW50Tm9kZSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgdHJhbnNpdGlvbiAke2lkfSBub3QgZm91bmRgKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRpbWluZztcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSkge1xuICB2YXIgaWQsXG4gICAgICB0aW1pbmc7XG5cbiAgaWYgKG5hbWUgaW5zdGFuY2VvZiBUcmFuc2l0aW9uKSB7XG4gICAgaWQgPSBuYW1lLl9pZCwgbmFtZSA9IG5hbWUuX25hbWU7XG4gIH0gZWxzZSB7XG4gICAgaWQgPSBuZXdJZCgpLCAodGltaW5nID0gZGVmYXVsdFRpbWluZykudGltZSA9IG5vdygpLCBuYW1lID0gbmFtZSA9PSBudWxsID8gbnVsbCA6IG5hbWUgKyBcIlwiO1xuICB9XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgc2NoZWR1bGUobm9kZSwgbmFtZSwgaWQsIGksIGdyb3VwLCB0aW1pbmcgfHwgaW5oZXJpdChub2RlLCBpZCkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgVHJhbnNpdGlvbihncm91cHMsIHRoaXMuX3BhcmVudHMsIG5hbWUsIGlkKTtcbn1cbiIsICJpbXBvcnQge3NlbGVjdGlvbn0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHNlbGVjdGlvbl9pbnRlcnJ1cHQgZnJvbSBcIi4vaW50ZXJydXB0LmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX3RyYW5zaXRpb24gZnJvbSBcIi4vdHJhbnNpdGlvbi5qc1wiO1xuXG5zZWxlY3Rpb24ucHJvdG90eXBlLmludGVycnVwdCA9IHNlbGVjdGlvbl9pbnRlcnJ1cHQ7XG5zZWxlY3Rpb24ucHJvdG90eXBlLnRyYW5zaXRpb24gPSBzZWxlY3Rpb25fdHJhbnNpdGlvbjtcbiIsICJpbXBvcnQge2Rpc3BhdGNofSBmcm9tIFwiZDMtZGlzcGF0Y2hcIjtcbmltcG9ydCB7ZHJhZ0Rpc2FibGUsIGRyYWdFbmFibGV9IGZyb20gXCJkMy1kcmFnXCI7XG5pbXBvcnQge2ludGVycG9sYXRlfSBmcm9tIFwiZDMtaW50ZXJwb2xhdGVcIjtcbmltcG9ydCB7cG9pbnRlciwgc2VsZWN0fSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge2ludGVycnVwdH0gZnJvbSBcImQzLXRyYW5zaXRpb25cIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudC5qc1wiO1xuaW1wb3J0IEJydXNoRXZlbnQgZnJvbSBcIi4vZXZlbnQuanNcIjtcbmltcG9ydCBub2V2ZW50LCB7bm9wcm9wYWdhdGlvbn0gZnJvbSBcIi4vbm9ldmVudC5qc1wiO1xuXG52YXIgTU9ERV9EUkFHID0ge25hbWU6IFwiZHJhZ1wifSxcbiAgICBNT0RFX1NQQUNFID0ge25hbWU6IFwic3BhY2VcIn0sXG4gICAgTU9ERV9IQU5ETEUgPSB7bmFtZTogXCJoYW5kbGVcIn0sXG4gICAgTU9ERV9DRU5URVIgPSB7bmFtZTogXCJjZW50ZXJcIn07XG5cbmNvbnN0IHthYnMsIG1heCwgbWlufSA9IE1hdGg7XG5cbmZ1bmN0aW9uIG51bWJlcjEoZSkge1xuICByZXR1cm4gWytlWzBdLCArZVsxXV07XG59XG5cbmZ1bmN0aW9uIG51bWJlcjIoZSkge1xuICByZXR1cm4gW251bWJlcjEoZVswXSksIG51bWJlcjEoZVsxXSldO1xufVxuXG52YXIgWCA9IHtcbiAgbmFtZTogXCJ4XCIsXG4gIGhhbmRsZXM6IFtcIndcIiwgXCJlXCJdLm1hcCh0eXBlKSxcbiAgaW5wdXQ6IGZ1bmN0aW9uKHgsIGUpIHsgcmV0dXJuIHggPT0gbnVsbCA/IG51bGwgOiBbWyt4WzBdLCBlWzBdWzFdXSwgWyt4WzFdLCBlWzFdWzFdXV07IH0sXG4gIG91dHB1dDogZnVuY3Rpb24oeHkpIHsgcmV0dXJuIHh5ICYmIFt4eVswXVswXSwgeHlbMV1bMF1dOyB9XG59O1xuXG52YXIgWSA9IHtcbiAgbmFtZTogXCJ5XCIsXG4gIGhhbmRsZXM6IFtcIm5cIiwgXCJzXCJdLm1hcCh0eXBlKSxcbiAgaW5wdXQ6IGZ1bmN0aW9uKHksIGUpIHsgcmV0dXJuIHkgPT0gbnVsbCA/IG51bGwgOiBbW2VbMF1bMF0sICt5WzBdXSwgW2VbMV1bMF0sICt5WzFdXV07IH0sXG4gIG91dHB1dDogZnVuY3Rpb24oeHkpIHsgcmV0dXJuIHh5ICYmIFt4eVswXVsxXSwgeHlbMV1bMV1dOyB9XG59O1xuXG52YXIgWFkgPSB7XG4gIG5hbWU6IFwieHlcIixcbiAgaGFuZGxlczogW1wiblwiLCBcIndcIiwgXCJlXCIsIFwic1wiLCBcIm53XCIsIFwibmVcIiwgXCJzd1wiLCBcInNlXCJdLm1hcCh0eXBlKSxcbiAgaW5wdXQ6IGZ1bmN0aW9uKHh5KSB7IHJldHVybiB4eSA9PSBudWxsID8gbnVsbCA6IG51bWJlcjIoeHkpOyB9LFxuICBvdXRwdXQ6IGZ1bmN0aW9uKHh5KSB7IHJldHVybiB4eTsgfVxufTtcblxudmFyIGN1cnNvcnMgPSB7XG4gIG92ZXJsYXk6IFwiY3Jvc3NoYWlyXCIsXG4gIHNlbGVjdGlvbjogXCJtb3ZlXCIsXG4gIG46IFwibnMtcmVzaXplXCIsXG4gIGU6IFwiZXctcmVzaXplXCIsXG4gIHM6IFwibnMtcmVzaXplXCIsXG4gIHc6IFwiZXctcmVzaXplXCIsXG4gIG53OiBcIm53c2UtcmVzaXplXCIsXG4gIG5lOiBcIm5lc3ctcmVzaXplXCIsXG4gIHNlOiBcIm53c2UtcmVzaXplXCIsXG4gIHN3OiBcIm5lc3ctcmVzaXplXCJcbn07XG5cbnZhciBmbGlwWCA9IHtcbiAgZTogXCJ3XCIsXG4gIHc6IFwiZVwiLFxuICBudzogXCJuZVwiLFxuICBuZTogXCJud1wiLFxuICBzZTogXCJzd1wiLFxuICBzdzogXCJzZVwiXG59O1xuXG52YXIgZmxpcFkgPSB7XG4gIG46IFwic1wiLFxuICBzOiBcIm5cIixcbiAgbnc6IFwic3dcIixcbiAgbmU6IFwic2VcIixcbiAgc2U6IFwibmVcIixcbiAgc3c6IFwibndcIlxufTtcblxudmFyIHNpZ25zWCA9IHtcbiAgb3ZlcmxheTogKzEsXG4gIHNlbGVjdGlvbjogKzEsXG4gIG46IG51bGwsXG4gIGU6ICsxLFxuICBzOiBudWxsLFxuICB3OiAtMSxcbiAgbnc6IC0xLFxuICBuZTogKzEsXG4gIHNlOiArMSxcbiAgc3c6IC0xXG59O1xuXG52YXIgc2lnbnNZID0ge1xuICBvdmVybGF5OiArMSxcbiAgc2VsZWN0aW9uOiArMSxcbiAgbjogLTEsXG4gIGU6IG51bGwsXG4gIHM6ICsxLFxuICB3OiBudWxsLFxuICBudzogLTEsXG4gIG5lOiAtMSxcbiAgc2U6ICsxLFxuICBzdzogKzFcbn07XG5cbmZ1bmN0aW9uIHR5cGUodCkge1xuICByZXR1cm4ge3R5cGU6IHR9O1xufVxuXG4vLyBJZ25vcmUgcmlnaHQtY2xpY2ssIHNpbmNlIHRoYXQgc2hvdWxkIG9wZW4gdGhlIGNvbnRleHQgbWVudS5cbmZ1bmN0aW9uIGRlZmF1bHRGaWx0ZXIoZXZlbnQpIHtcbiAgcmV0dXJuICFldmVudC5jdHJsS2V5ICYmICFldmVudC5idXR0b247XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRFeHRlbnQoKSB7XG4gIHZhciBzdmcgPSB0aGlzLm93bmVyU1ZHRWxlbWVudCB8fCB0aGlzO1xuICBpZiAoc3ZnLmhhc0F0dHJpYnV0ZShcInZpZXdCb3hcIikpIHtcbiAgICBzdmcgPSBzdmcudmlld0JveC5iYXNlVmFsO1xuICAgIHJldHVybiBbW3N2Zy54LCBzdmcueV0sIFtzdmcueCArIHN2Zy53aWR0aCwgc3ZnLnkgKyBzdmcuaGVpZ2h0XV07XG4gIH1cbiAgcmV0dXJuIFtbMCwgMF0sIFtzdmcud2lkdGguYmFzZVZhbC52YWx1ZSwgc3ZnLmhlaWdodC5iYXNlVmFsLnZhbHVlXV07XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRUb3VjaGFibGUoKSB7XG4gIHJldHVybiBuYXZpZ2F0b3IubWF4VG91Y2hQb2ludHMgfHwgKFwib250b3VjaHN0YXJ0XCIgaW4gdGhpcyk7XG59XG5cbi8vIExpa2UgZDMubG9jYWwsIGJ1dCB3aXRoIHRoZSBuYW1lIFx1MjAxQ19fYnJ1c2hcdTIwMUQgcmF0aGVyIHRoYW4gYXV0by1nZW5lcmF0ZWQuXG5mdW5jdGlvbiBsb2NhbChub2RlKSB7XG4gIHdoaWxlICghbm9kZS5fX2JydXNoKSBpZiAoIShub2RlID0gbm9kZS5wYXJlbnROb2RlKSkgcmV0dXJuO1xuICByZXR1cm4gbm9kZS5fX2JydXNoO1xufVxuXG5mdW5jdGlvbiBlbXB0eShleHRlbnQpIHtcbiAgcmV0dXJuIGV4dGVudFswXVswXSA9PT0gZXh0ZW50WzFdWzBdXG4gICAgICB8fCBleHRlbnRbMF1bMV0gPT09IGV4dGVudFsxXVsxXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJydXNoU2VsZWN0aW9uKG5vZGUpIHtcbiAgdmFyIHN0YXRlID0gbm9kZS5fX2JydXNoO1xuICByZXR1cm4gc3RhdGUgPyBzdGF0ZS5kaW0ub3V0cHV0KHN0YXRlLnNlbGVjdGlvbikgOiBudWxsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYnJ1c2hYKCkge1xuICByZXR1cm4gYnJ1c2goWCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBicnVzaFkoKSB7XG4gIHJldHVybiBicnVzaChZKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBicnVzaChYWSk7XG59XG5cbmZ1bmN0aW9uIGJydXNoKGRpbSkge1xuICB2YXIgZXh0ZW50ID0gZGVmYXVsdEV4dGVudCxcbiAgICAgIGZpbHRlciA9IGRlZmF1bHRGaWx0ZXIsXG4gICAgICB0b3VjaGFibGUgPSBkZWZhdWx0VG91Y2hhYmxlLFxuICAgICAga2V5cyA9IHRydWUsXG4gICAgICBsaXN0ZW5lcnMgPSBkaXNwYXRjaChcInN0YXJ0XCIsIFwiYnJ1c2hcIiwgXCJlbmRcIiksXG4gICAgICBoYW5kbGVTaXplID0gNixcbiAgICAgIHRvdWNoZW5kaW5nO1xuXG4gIGZ1bmN0aW9uIGJydXNoKGdyb3VwKSB7XG4gICAgdmFyIG92ZXJsYXkgPSBncm91cFxuICAgICAgICAucHJvcGVydHkoXCJfX2JydXNoXCIsIGluaXRpYWxpemUpXG4gICAgICAuc2VsZWN0QWxsKFwiLm92ZXJsYXlcIilcbiAgICAgIC5kYXRhKFt0eXBlKFwib3ZlcmxheVwiKV0pO1xuXG4gICAgb3ZlcmxheS5lbnRlcigpLmFwcGVuZChcInJlY3RcIilcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcIm92ZXJsYXlcIilcbiAgICAgICAgLmF0dHIoXCJwb2ludGVyLWV2ZW50c1wiLCBcImFsbFwiKVxuICAgICAgICAuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzLm92ZXJsYXkpXG4gICAgICAubWVyZ2Uob3ZlcmxheSlcbiAgICAgICAgLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGV4dGVudCA9IGxvY2FsKHRoaXMpLmV4dGVudDtcbiAgICAgICAgICBzZWxlY3QodGhpcylcbiAgICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIGV4dGVudFswXVswXSlcbiAgICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIGV4dGVudFswXVsxXSlcbiAgICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBleHRlbnRbMV1bMF0gLSBleHRlbnRbMF1bMF0pXG4gICAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGV4dGVudFsxXVsxXSAtIGV4dGVudFswXVsxXSk7XG4gICAgICAgIH0pO1xuXG4gICAgZ3JvdXAuc2VsZWN0QWxsKFwiLnNlbGVjdGlvblwiKVxuICAgICAgLmRhdGEoW3R5cGUoXCJzZWxlY3Rpb25cIildKVxuICAgICAgLmVudGVyKCkuYXBwZW5kKFwicmVjdFwiKVxuICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwic2VsZWN0aW9uXCIpXG4gICAgICAgIC5hdHRyKFwiY3Vyc29yXCIsIGN1cnNvcnMuc2VsZWN0aW9uKVxuICAgICAgICAuYXR0cihcImZpbGxcIiwgXCIjNzc3XCIpXG4gICAgICAgIC5hdHRyKFwiZmlsbC1vcGFjaXR5XCIsIDAuMylcbiAgICAgICAgLmF0dHIoXCJzdHJva2VcIiwgXCIjZmZmXCIpXG4gICAgICAgIC5hdHRyKFwic2hhcGUtcmVuZGVyaW5nXCIsIFwiY3Jpc3BFZGdlc1wiKTtcblxuICAgIHZhciBoYW5kbGUgPSBncm91cC5zZWxlY3RBbGwoXCIuaGFuZGxlXCIpXG4gICAgICAuZGF0YShkaW0uaGFuZGxlcywgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC50eXBlOyB9KTtcblxuICAgIGhhbmRsZS5leGl0KCkucmVtb3ZlKCk7XG5cbiAgICBoYW5kbGUuZW50ZXIoKS5hcHBlbmQoXCJyZWN0XCIpXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gXCJoYW5kbGUgaGFuZGxlLS1cIiArIGQudHlwZTsgfSlcbiAgICAgICAgLmF0dHIoXCJjdXJzb3JcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gY3Vyc29yc1tkLnR5cGVdOyB9KTtcblxuICAgIGdyb3VwXG4gICAgICAgIC5lYWNoKHJlZHJhdylcbiAgICAgICAgLmF0dHIoXCJmaWxsXCIsIFwibm9uZVwiKVxuICAgICAgICAuYXR0cihcInBvaW50ZXItZXZlbnRzXCIsIFwiYWxsXCIpXG4gICAgICAgIC5vbihcIm1vdXNlZG93bi5icnVzaFwiLCBzdGFydGVkKVxuICAgICAgLmZpbHRlcih0b3VjaGFibGUpXG4gICAgICAgIC5vbihcInRvdWNoc3RhcnQuYnJ1c2hcIiwgc3RhcnRlZClcbiAgICAgICAgLm9uKFwidG91Y2htb3ZlLmJydXNoXCIsIHRvdWNobW92ZWQpXG4gICAgICAgIC5vbihcInRvdWNoZW5kLmJydXNoIHRvdWNoY2FuY2VsLmJydXNoXCIsIHRvdWNoZW5kZWQpXG4gICAgICAgIC5zdHlsZShcInRvdWNoLWFjdGlvblwiLCBcIm5vbmVcIilcbiAgICAgICAgLnN0eWxlKFwiLXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yXCIsIFwicmdiYSgwLDAsMCwwKVwiKTtcbiAgfVxuXG4gIGJydXNoLm1vdmUgPSBmdW5jdGlvbihncm91cCwgc2VsZWN0aW9uLCBldmVudCkge1xuICAgIGlmIChncm91cC50d2Vlbikge1xuICAgICAgZ3JvdXBcbiAgICAgICAgICAub24oXCJzdGFydC5icnVzaFwiLCBmdW5jdGlvbihldmVudCkgeyBlbWl0dGVyKHRoaXMsIGFyZ3VtZW50cykuYmVmb3Jlc3RhcnQoKS5zdGFydChldmVudCk7IH0pXG4gICAgICAgICAgLm9uKFwiaW50ZXJydXB0LmJydXNoIGVuZC5icnVzaFwiLCBmdW5jdGlvbihldmVudCkgeyBlbWl0dGVyKHRoaXMsIGFyZ3VtZW50cykuZW5kKGV2ZW50KTsgfSlcbiAgICAgICAgICAudHdlZW4oXCJicnVzaFwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcyxcbiAgICAgICAgICAgICAgICBzdGF0ZSA9IHRoYXQuX19icnVzaCxcbiAgICAgICAgICAgICAgICBlbWl0ID0gZW1pdHRlcih0aGF0LCBhcmd1bWVudHMpLFxuICAgICAgICAgICAgICAgIHNlbGVjdGlvbjAgPSBzdGF0ZS5zZWxlY3Rpb24sXG4gICAgICAgICAgICAgICAgc2VsZWN0aW9uMSA9IGRpbS5pbnB1dCh0eXBlb2Ygc2VsZWN0aW9uID09PSBcImZ1bmN0aW9uXCIgPyBzZWxlY3Rpb24uYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IHNlbGVjdGlvbiwgc3RhdGUuZXh0ZW50KSxcbiAgICAgICAgICAgICAgICBpID0gaW50ZXJwb2xhdGUoc2VsZWN0aW9uMCwgc2VsZWN0aW9uMSk7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHR3ZWVuKHQpIHtcbiAgICAgICAgICAgICAgc3RhdGUuc2VsZWN0aW9uID0gdCA9PT0gMSAmJiBzZWxlY3Rpb24xID09PSBudWxsID8gbnVsbCA6IGkodCk7XG4gICAgICAgICAgICAgIHJlZHJhdy5jYWxsKHRoYXQpO1xuICAgICAgICAgICAgICBlbWl0LmJydXNoKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBzZWxlY3Rpb24wICE9PSBudWxsICYmIHNlbGVjdGlvbjEgIT09IG51bGwgPyB0d2VlbiA6IHR3ZWVuKDEpO1xuICAgICAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBncm91cFxuICAgICAgICAgIC5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzLFxuICAgICAgICAgICAgICAgIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgICAgICAgICAgc3RhdGUgPSB0aGF0Ll9fYnJ1c2gsXG4gICAgICAgICAgICAgICAgc2VsZWN0aW9uMSA9IGRpbS5pbnB1dCh0eXBlb2Ygc2VsZWN0aW9uID09PSBcImZ1bmN0aW9uXCIgPyBzZWxlY3Rpb24uYXBwbHkodGhhdCwgYXJncykgOiBzZWxlY3Rpb24sIHN0YXRlLmV4dGVudCksXG4gICAgICAgICAgICAgICAgZW1pdCA9IGVtaXR0ZXIodGhhdCwgYXJncykuYmVmb3Jlc3RhcnQoKTtcblxuICAgICAgICAgICAgaW50ZXJydXB0KHRoYXQpO1xuICAgICAgICAgICAgc3RhdGUuc2VsZWN0aW9uID0gc2VsZWN0aW9uMSA9PT0gbnVsbCA/IG51bGwgOiBzZWxlY3Rpb24xO1xuICAgICAgICAgICAgcmVkcmF3LmNhbGwodGhhdCk7XG4gICAgICAgICAgICBlbWl0LnN0YXJ0KGV2ZW50KS5icnVzaChldmVudCkuZW5kKGV2ZW50KTtcbiAgICAgICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgYnJ1c2guY2xlYXIgPSBmdW5jdGlvbihncm91cCwgZXZlbnQpIHtcbiAgICBicnVzaC5tb3ZlKGdyb3VwLCBudWxsLCBldmVudCk7XG4gIH07XG5cbiAgZnVuY3Rpb24gcmVkcmF3KCkge1xuICAgIHZhciBncm91cCA9IHNlbGVjdCh0aGlzKSxcbiAgICAgICAgc2VsZWN0aW9uID0gbG9jYWwodGhpcykuc2VsZWN0aW9uO1xuXG4gICAgaWYgKHNlbGVjdGlvbikge1xuICAgICAgZ3JvdXAuc2VsZWN0QWxsKFwiLnNlbGVjdGlvblwiKVxuICAgICAgICAgIC5zdHlsZShcImRpc3BsYXlcIiwgbnVsbClcbiAgICAgICAgICAuYXR0cihcInhcIiwgc2VsZWN0aW9uWzBdWzBdKVxuICAgICAgICAgIC5hdHRyKFwieVwiLCBzZWxlY3Rpb25bMF1bMV0pXG4gICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBzZWxlY3Rpb25bMV1bMF0gLSBzZWxlY3Rpb25bMF1bMF0pXG4gICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgc2VsZWN0aW9uWzFdWzFdIC0gc2VsZWN0aW9uWzBdWzFdKTtcblxuICAgICAgZ3JvdXAuc2VsZWN0QWxsKFwiLmhhbmRsZVwiKVxuICAgICAgICAgIC5zdHlsZShcImRpc3BsYXlcIiwgbnVsbClcbiAgICAgICAgICAuYXR0cihcInhcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC50eXBlW2QudHlwZS5sZW5ndGggLSAxXSA9PT0gXCJlXCIgPyBzZWxlY3Rpb25bMV1bMF0gLSBoYW5kbGVTaXplIC8gMiA6IHNlbGVjdGlvblswXVswXSAtIGhhbmRsZVNpemUgLyAyOyB9KVxuICAgICAgICAgIC5hdHRyKFwieVwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLnR5cGVbMF0gPT09IFwic1wiID8gc2VsZWN0aW9uWzFdWzFdIC0gaGFuZGxlU2l6ZSAvIDIgOiBzZWxlY3Rpb25bMF1bMV0gLSBoYW5kbGVTaXplIC8gMjsgfSlcbiAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQudHlwZSA9PT0gXCJuXCIgfHwgZC50eXBlID09PSBcInNcIiA/IHNlbGVjdGlvblsxXVswXSAtIHNlbGVjdGlvblswXVswXSArIGhhbmRsZVNpemUgOiBoYW5kbGVTaXplOyB9KVxuICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQudHlwZSA9PT0gXCJlXCIgfHwgZC50eXBlID09PSBcIndcIiA/IHNlbGVjdGlvblsxXVsxXSAtIHNlbGVjdGlvblswXVsxXSArIGhhbmRsZVNpemUgOiBoYW5kbGVTaXplOyB9KTtcbiAgICB9XG5cbiAgICBlbHNlIHtcbiAgICAgIGdyb3VwLnNlbGVjdEFsbChcIi5zZWxlY3Rpb24sLmhhbmRsZVwiKVxuICAgICAgICAgIC5zdHlsZShcImRpc3BsYXlcIiwgXCJub25lXCIpXG4gICAgICAgICAgLmF0dHIoXCJ4XCIsIG51bGwpXG4gICAgICAgICAgLmF0dHIoXCJ5XCIsIG51bGwpXG4gICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBudWxsKVxuICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIG51bGwpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGVtaXR0ZXIodGhhdCwgYXJncywgY2xlYW4pIHtcbiAgICB2YXIgZW1pdCA9IHRoYXQuX19icnVzaC5lbWl0dGVyO1xuICAgIHJldHVybiBlbWl0ICYmICghY2xlYW4gfHwgIWVtaXQuY2xlYW4pID8gZW1pdCA6IG5ldyBFbWl0dGVyKHRoYXQsIGFyZ3MsIGNsZWFuKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIEVtaXR0ZXIodGhhdCwgYXJncywgY2xlYW4pIHtcbiAgICB0aGlzLnRoYXQgPSB0aGF0O1xuICAgIHRoaXMuYXJncyA9IGFyZ3M7XG4gICAgdGhpcy5zdGF0ZSA9IHRoYXQuX19icnVzaDtcbiAgICB0aGlzLmFjdGl2ZSA9IDA7XG4gICAgdGhpcy5jbGVhbiA9IGNsZWFuO1xuICB9XG5cbiAgRW1pdHRlci5wcm90b3R5cGUgPSB7XG4gICAgYmVmb3Jlc3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKCsrdGhpcy5hY3RpdmUgPT09IDEpIHRoaXMuc3RhdGUuZW1pdHRlciA9IHRoaXMsIHRoaXMuc3RhcnRpbmcgPSB0cnVlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBzdGFydDogZnVuY3Rpb24oZXZlbnQsIG1vZGUpIHtcbiAgICAgIGlmICh0aGlzLnN0YXJ0aW5nKSB0aGlzLnN0YXJ0aW5nID0gZmFsc2UsIHRoaXMuZW1pdChcInN0YXJ0XCIsIGV2ZW50LCBtb2RlKTtcbiAgICAgIGVsc2UgdGhpcy5lbWl0KFwiYnJ1c2hcIiwgZXZlbnQpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBicnVzaDogZnVuY3Rpb24oZXZlbnQsIG1vZGUpIHtcbiAgICAgIHRoaXMuZW1pdChcImJydXNoXCIsIGV2ZW50LCBtb2RlKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgZW5kOiBmdW5jdGlvbihldmVudCwgbW9kZSkge1xuICAgICAgaWYgKC0tdGhpcy5hY3RpdmUgPT09IDApIGRlbGV0ZSB0aGlzLnN0YXRlLmVtaXR0ZXIsIHRoaXMuZW1pdChcImVuZFwiLCBldmVudCwgbW9kZSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIGVtaXQ6IGZ1bmN0aW9uKHR5cGUsIGV2ZW50LCBtb2RlKSB7XG4gICAgICB2YXIgZCA9IHNlbGVjdCh0aGlzLnRoYXQpLmRhdHVtKCk7XG4gICAgICBsaXN0ZW5lcnMuY2FsbChcbiAgICAgICAgdHlwZSxcbiAgICAgICAgdGhpcy50aGF0LFxuICAgICAgICBuZXcgQnJ1c2hFdmVudCh0eXBlLCB7XG4gICAgICAgICAgc291cmNlRXZlbnQ6IGV2ZW50LFxuICAgICAgICAgIHRhcmdldDogYnJ1c2gsXG4gICAgICAgICAgc2VsZWN0aW9uOiBkaW0ub3V0cHV0KHRoaXMuc3RhdGUuc2VsZWN0aW9uKSxcbiAgICAgICAgICBtb2RlLFxuICAgICAgICAgIGRpc3BhdGNoOiBsaXN0ZW5lcnNcbiAgICAgICAgfSksXG4gICAgICAgIGRcbiAgICAgICk7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIHN0YXJ0ZWQoZXZlbnQpIHtcbiAgICBpZiAodG91Y2hlbmRpbmcgJiYgIWV2ZW50LnRvdWNoZXMpIHJldHVybjtcbiAgICBpZiAoIWZpbHRlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSByZXR1cm47XG5cbiAgICB2YXIgdGhhdCA9IHRoaXMsXG4gICAgICAgIHR5cGUgPSBldmVudC50YXJnZXQuX19kYXRhX18udHlwZSxcbiAgICAgICAgbW9kZSA9IChrZXlzICYmIGV2ZW50Lm1ldGFLZXkgPyB0eXBlID0gXCJvdmVybGF5XCIgOiB0eXBlKSA9PT0gXCJzZWxlY3Rpb25cIiA/IE1PREVfRFJBRyA6IChrZXlzICYmIGV2ZW50LmFsdEtleSA/IE1PREVfQ0VOVEVSIDogTU9ERV9IQU5ETEUpLFxuICAgICAgICBzaWduWCA9IGRpbSA9PT0gWSA/IG51bGwgOiBzaWduc1hbdHlwZV0sXG4gICAgICAgIHNpZ25ZID0gZGltID09PSBYID8gbnVsbCA6IHNpZ25zWVt0eXBlXSxcbiAgICAgICAgc3RhdGUgPSBsb2NhbCh0aGF0KSxcbiAgICAgICAgZXh0ZW50ID0gc3RhdGUuZXh0ZW50LFxuICAgICAgICBzZWxlY3Rpb24gPSBzdGF0ZS5zZWxlY3Rpb24sXG4gICAgICAgIFcgPSBleHRlbnRbMF1bMF0sIHcwLCB3MSxcbiAgICAgICAgTiA9IGV4dGVudFswXVsxXSwgbjAsIG4xLFxuICAgICAgICBFID0gZXh0ZW50WzFdWzBdLCBlMCwgZTEsXG4gICAgICAgIFMgPSBleHRlbnRbMV1bMV0sIHMwLCBzMSxcbiAgICAgICAgZHggPSAwLFxuICAgICAgICBkeSA9IDAsXG4gICAgICAgIG1vdmluZyxcbiAgICAgICAgc2hpZnRpbmcgPSBzaWduWCAmJiBzaWduWSAmJiBrZXlzICYmIGV2ZW50LnNoaWZ0S2V5LFxuICAgICAgICBsb2NrWCxcbiAgICAgICAgbG9ja1ksXG4gICAgICAgIHBvaW50cyA9IEFycmF5LmZyb20oZXZlbnQudG91Y2hlcyB8fCBbZXZlbnRdLCB0ID0+IHtcbiAgICAgICAgICBjb25zdCBpID0gdC5pZGVudGlmaWVyO1xuICAgICAgICAgIHQgPSBwb2ludGVyKHQsIHRoYXQpO1xuICAgICAgICAgIHQucG9pbnQwID0gdC5zbGljZSgpO1xuICAgICAgICAgIHQuaWRlbnRpZmllciA9IGk7XG4gICAgICAgICAgcmV0dXJuIHQ7XG4gICAgICAgIH0pO1xuXG4gICAgaW50ZXJydXB0KHRoYXQpO1xuICAgIHZhciBlbWl0ID0gZW1pdHRlcih0aGF0LCBhcmd1bWVudHMsIHRydWUpLmJlZm9yZXN0YXJ0KCk7XG5cbiAgICBpZiAodHlwZSA9PT0gXCJvdmVybGF5XCIpIHtcbiAgICAgIGlmIChzZWxlY3Rpb24pIG1vdmluZyA9IHRydWU7XG4gICAgICBjb25zdCBwdHMgPSBbcG9pbnRzWzBdLCBwb2ludHNbMV0gfHwgcG9pbnRzWzBdXTtcbiAgICAgIHN0YXRlLnNlbGVjdGlvbiA9IHNlbGVjdGlvbiA9IFtbXG4gICAgICAgICAgdzAgPSBkaW0gPT09IFkgPyBXIDogbWluKHB0c1swXVswXSwgcHRzWzFdWzBdKSxcbiAgICAgICAgICBuMCA9IGRpbSA9PT0gWCA/IE4gOiBtaW4ocHRzWzBdWzFdLCBwdHNbMV1bMV0pXG4gICAgICAgIF0sIFtcbiAgICAgICAgICBlMCA9IGRpbSA9PT0gWSA/IEUgOiBtYXgocHRzWzBdWzBdLCBwdHNbMV1bMF0pLFxuICAgICAgICAgIHMwID0gZGltID09PSBYID8gUyA6IG1heChwdHNbMF1bMV0sIHB0c1sxXVsxXSlcbiAgICAgICAgXV07XG4gICAgICBpZiAocG9pbnRzLmxlbmd0aCA+IDEpIG1vdmUoZXZlbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB3MCA9IHNlbGVjdGlvblswXVswXTtcbiAgICAgIG4wID0gc2VsZWN0aW9uWzBdWzFdO1xuICAgICAgZTAgPSBzZWxlY3Rpb25bMV1bMF07XG4gICAgICBzMCA9IHNlbGVjdGlvblsxXVsxXTtcbiAgICB9XG5cbiAgICB3MSA9IHcwO1xuICAgIG4xID0gbjA7XG4gICAgZTEgPSBlMDtcbiAgICBzMSA9IHMwO1xuXG4gICAgdmFyIGdyb3VwID0gc2VsZWN0KHRoYXQpXG4gICAgICAgIC5hdHRyKFwicG9pbnRlci1ldmVudHNcIiwgXCJub25lXCIpO1xuXG4gICAgdmFyIG92ZXJsYXkgPSBncm91cC5zZWxlY3RBbGwoXCIub3ZlcmxheVwiKVxuICAgICAgICAuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzW3R5cGVdKTtcblxuICAgIGlmIChldmVudC50b3VjaGVzKSB7XG4gICAgICBlbWl0Lm1vdmVkID0gbW92ZWQ7XG4gICAgICBlbWl0LmVuZGVkID0gZW5kZWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB2aWV3ID0gc2VsZWN0KGV2ZW50LnZpZXcpXG4gICAgICAgICAgLm9uKFwibW91c2Vtb3ZlLmJydXNoXCIsIG1vdmVkLCB0cnVlKVxuICAgICAgICAgIC5vbihcIm1vdXNldXAuYnJ1c2hcIiwgZW5kZWQsIHRydWUpO1xuICAgICAgaWYgKGtleXMpIHZpZXdcbiAgICAgICAgICAub24oXCJrZXlkb3duLmJydXNoXCIsIGtleWRvd25lZCwgdHJ1ZSlcbiAgICAgICAgICAub24oXCJrZXl1cC5icnVzaFwiLCBrZXl1cHBlZCwgdHJ1ZSlcblxuICAgICAgZHJhZ0Rpc2FibGUoZXZlbnQudmlldyk7XG4gICAgfVxuXG4gICAgcmVkcmF3LmNhbGwodGhhdCk7XG4gICAgZW1pdC5zdGFydChldmVudCwgbW9kZS5uYW1lKTtcblxuICAgIGZ1bmN0aW9uIG1vdmVkKGV2ZW50KSB7XG4gICAgICBmb3IgKGNvbnN0IHAgb2YgZXZlbnQuY2hhbmdlZFRvdWNoZXMgfHwgW2V2ZW50XSkge1xuICAgICAgICBmb3IgKGNvbnN0IGQgb2YgcG9pbnRzKVxuICAgICAgICAgIGlmIChkLmlkZW50aWZpZXIgPT09IHAuaWRlbnRpZmllcikgZC5jdXIgPSBwb2ludGVyKHAsIHRoYXQpO1xuICAgICAgfVxuICAgICAgaWYgKHNoaWZ0aW5nICYmICFsb2NrWCAmJiAhbG9ja1kgJiYgcG9pbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBjb25zdCBwb2ludCA9IHBvaW50c1swXTtcbiAgICAgICAgaWYgKGFicyhwb2ludC5jdXJbMF0gLSBwb2ludFswXSkgPiBhYnMocG9pbnQuY3VyWzFdIC0gcG9pbnRbMV0pKVxuICAgICAgICAgIGxvY2tZID0gdHJ1ZTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgIGxvY2tYID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGZvciAoY29uc3QgcG9pbnQgb2YgcG9pbnRzKVxuICAgICAgICBpZiAocG9pbnQuY3VyKSBwb2ludFswXSA9IHBvaW50LmN1clswXSwgcG9pbnRbMV0gPSBwb2ludC5jdXJbMV07XG4gICAgICBtb3ZpbmcgPSB0cnVlO1xuICAgICAgbm9ldmVudChldmVudCk7XG4gICAgICBtb3ZlKGV2ZW50KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtb3ZlKGV2ZW50KSB7XG4gICAgICBjb25zdCBwb2ludCA9IHBvaW50c1swXSwgcG9pbnQwID0gcG9pbnQucG9pbnQwO1xuICAgICAgdmFyIHQ7XG5cbiAgICAgIGR4ID0gcG9pbnRbMF0gLSBwb2ludDBbMF07XG4gICAgICBkeSA9IHBvaW50WzFdIC0gcG9pbnQwWzFdO1xuXG4gICAgICBzd2l0Y2ggKG1vZGUpIHtcbiAgICAgICAgY2FzZSBNT0RFX1NQQUNFOlxuICAgICAgICBjYXNlIE1PREVfRFJBRzoge1xuICAgICAgICAgIGlmIChzaWduWCkgZHggPSBtYXgoVyAtIHcwLCBtaW4oRSAtIGUwLCBkeCkpLCB3MSA9IHcwICsgZHgsIGUxID0gZTAgKyBkeDtcbiAgICAgICAgICBpZiAoc2lnblkpIGR5ID0gbWF4KE4gLSBuMCwgbWluKFMgLSBzMCwgZHkpKSwgbjEgPSBuMCArIGR5LCBzMSA9IHMwICsgZHk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBNT0RFX0hBTkRMRToge1xuICAgICAgICAgIGlmIChwb2ludHNbMV0pIHtcbiAgICAgICAgICAgIGlmIChzaWduWCkgdzEgPSBtYXgoVywgbWluKEUsIHBvaW50c1swXVswXSkpLCBlMSA9IG1heChXLCBtaW4oRSwgcG9pbnRzWzFdWzBdKSksIHNpZ25YID0gMTtcbiAgICAgICAgICAgIGlmIChzaWduWSkgbjEgPSBtYXgoTiwgbWluKFMsIHBvaW50c1swXVsxXSkpLCBzMSA9IG1heChOLCBtaW4oUywgcG9pbnRzWzFdWzFdKSksIHNpZ25ZID0gMTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHNpZ25YIDwgMCkgZHggPSBtYXgoVyAtIHcwLCBtaW4oRSAtIHcwLCBkeCkpLCB3MSA9IHcwICsgZHgsIGUxID0gZTA7XG4gICAgICAgICAgICBlbHNlIGlmIChzaWduWCA+IDApIGR4ID0gbWF4KFcgLSBlMCwgbWluKEUgLSBlMCwgZHgpKSwgdzEgPSB3MCwgZTEgPSBlMCArIGR4O1xuICAgICAgICAgICAgaWYgKHNpZ25ZIDwgMCkgZHkgPSBtYXgoTiAtIG4wLCBtaW4oUyAtIG4wLCBkeSkpLCBuMSA9IG4wICsgZHksIHMxID0gczA7XG4gICAgICAgICAgICBlbHNlIGlmIChzaWduWSA+IDApIGR5ID0gbWF4KE4gLSBzMCwgbWluKFMgLSBzMCwgZHkpKSwgbjEgPSBuMCwgczEgPSBzMCArIGR5O1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIE1PREVfQ0VOVEVSOiB7XG4gICAgICAgICAgaWYgKHNpZ25YKSB3MSA9IG1heChXLCBtaW4oRSwgdzAgLSBkeCAqIHNpZ25YKSksIGUxID0gbWF4KFcsIG1pbihFLCBlMCArIGR4ICogc2lnblgpKTtcbiAgICAgICAgICBpZiAoc2lnblkpIG4xID0gbWF4KE4sIG1pbihTLCBuMCAtIGR5ICogc2lnblkpKSwgczEgPSBtYXgoTiwgbWluKFMsIHMwICsgZHkgKiBzaWduWSkpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChlMSA8IHcxKSB7XG4gICAgICAgIHNpZ25YICo9IC0xO1xuICAgICAgICB0ID0gdzAsIHcwID0gZTAsIGUwID0gdDtcbiAgICAgICAgdCA9IHcxLCB3MSA9IGUxLCBlMSA9IHQ7XG4gICAgICAgIGlmICh0eXBlIGluIGZsaXBYKSBvdmVybGF5LmF0dHIoXCJjdXJzb3JcIiwgY3Vyc29yc1t0eXBlID0gZmxpcFhbdHlwZV1dKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHMxIDwgbjEpIHtcbiAgICAgICAgc2lnblkgKj0gLTE7XG4gICAgICAgIHQgPSBuMCwgbjAgPSBzMCwgczAgPSB0O1xuICAgICAgICB0ID0gbjEsIG4xID0gczEsIHMxID0gdDtcbiAgICAgICAgaWYgKHR5cGUgaW4gZmxpcFkpIG92ZXJsYXkuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzW3R5cGUgPSBmbGlwWVt0eXBlXV0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUuc2VsZWN0aW9uKSBzZWxlY3Rpb24gPSBzdGF0ZS5zZWxlY3Rpb247IC8vIE1heSBiZSBzZXQgYnkgYnJ1c2gubW92ZSFcbiAgICAgIGlmIChsb2NrWCkgdzEgPSBzZWxlY3Rpb25bMF1bMF0sIGUxID0gc2VsZWN0aW9uWzFdWzBdO1xuICAgICAgaWYgKGxvY2tZKSBuMSA9IHNlbGVjdGlvblswXVsxXSwgczEgPSBzZWxlY3Rpb25bMV1bMV07XG5cbiAgICAgIGlmIChzZWxlY3Rpb25bMF1bMF0gIT09IHcxXG4gICAgICAgICAgfHwgc2VsZWN0aW9uWzBdWzFdICE9PSBuMVxuICAgICAgICAgIHx8IHNlbGVjdGlvblsxXVswXSAhPT0gZTFcbiAgICAgICAgICB8fCBzZWxlY3Rpb25bMV1bMV0gIT09IHMxKSB7XG4gICAgICAgIHN0YXRlLnNlbGVjdGlvbiA9IFtbdzEsIG4xXSwgW2UxLCBzMV1dO1xuICAgICAgICByZWRyYXcuY2FsbCh0aGF0KTtcbiAgICAgICAgZW1pdC5icnVzaChldmVudCwgbW9kZS5uYW1lKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBlbmRlZChldmVudCkge1xuICAgICAgbm9wcm9wYWdhdGlvbihldmVudCk7XG4gICAgICBpZiAoZXZlbnQudG91Y2hlcykge1xuICAgICAgICBpZiAoZXZlbnQudG91Y2hlcy5sZW5ndGgpIHJldHVybjtcbiAgICAgICAgaWYgKHRvdWNoZW5kaW5nKSBjbGVhclRpbWVvdXQodG91Y2hlbmRpbmcpO1xuICAgICAgICB0b3VjaGVuZGluZyA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IHRvdWNoZW5kaW5nID0gbnVsbDsgfSwgNTAwKTsgLy8gR2hvc3QgY2xpY2tzIGFyZSBkZWxheWVkIVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZHJhZ0VuYWJsZShldmVudC52aWV3LCBtb3ZpbmcpO1xuICAgICAgICB2aWV3Lm9uKFwia2V5ZG93bi5icnVzaCBrZXl1cC5icnVzaCBtb3VzZW1vdmUuYnJ1c2ggbW91c2V1cC5icnVzaFwiLCBudWxsKTtcbiAgICAgIH1cbiAgICAgIGdyb3VwLmF0dHIoXCJwb2ludGVyLWV2ZW50c1wiLCBcImFsbFwiKTtcbiAgICAgIG92ZXJsYXkuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzLm92ZXJsYXkpO1xuICAgICAgaWYgKHN0YXRlLnNlbGVjdGlvbikgc2VsZWN0aW9uID0gc3RhdGUuc2VsZWN0aW9uOyAvLyBNYXkgYmUgc2V0IGJ5IGJydXNoLm1vdmUgKG9uIHN0YXJ0KSFcbiAgICAgIGlmIChlbXB0eShzZWxlY3Rpb24pKSBzdGF0ZS5zZWxlY3Rpb24gPSBudWxsLCByZWRyYXcuY2FsbCh0aGF0KTtcbiAgICAgIGVtaXQuZW5kKGV2ZW50LCBtb2RlLm5hbWUpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGtleWRvd25lZChldmVudCkge1xuICAgICAgc3dpdGNoIChldmVudC5rZXlDb2RlKSB7XG4gICAgICAgIGNhc2UgMTY6IHsgLy8gU0hJRlRcbiAgICAgICAgICBzaGlmdGluZyA9IHNpZ25YICYmIHNpZ25ZO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgMTg6IHsgLy8gQUxUXG4gICAgICAgICAgaWYgKG1vZGUgPT09IE1PREVfSEFORExFKSB7XG4gICAgICAgICAgICBpZiAoc2lnblgpIGUwID0gZTEgLSBkeCAqIHNpZ25YLCB3MCA9IHcxICsgZHggKiBzaWduWDtcbiAgICAgICAgICAgIGlmIChzaWduWSkgczAgPSBzMSAtIGR5ICogc2lnblksIG4wID0gbjEgKyBkeSAqIHNpZ25ZO1xuICAgICAgICAgICAgbW9kZSA9IE1PREVfQ0VOVEVSO1xuICAgICAgICAgICAgbW92ZShldmVudCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgMzI6IHsgLy8gU1BBQ0U7IHRha2VzIHByaW9yaXR5IG92ZXIgQUxUXG4gICAgICAgICAgaWYgKG1vZGUgPT09IE1PREVfSEFORExFIHx8IG1vZGUgPT09IE1PREVfQ0VOVEVSKSB7XG4gICAgICAgICAgICBpZiAoc2lnblggPCAwKSBlMCA9IGUxIC0gZHg7IGVsc2UgaWYgKHNpZ25YID4gMCkgdzAgPSB3MSAtIGR4O1xuICAgICAgICAgICAgaWYgKHNpZ25ZIDwgMCkgczAgPSBzMSAtIGR5OyBlbHNlIGlmIChzaWduWSA+IDApIG4wID0gbjEgLSBkeTtcbiAgICAgICAgICAgIG1vZGUgPSBNT0RFX1NQQUNFO1xuICAgICAgICAgICAgb3ZlcmxheS5hdHRyKFwiY3Vyc29yXCIsIGN1cnNvcnMuc2VsZWN0aW9uKTtcbiAgICAgICAgICAgIG1vdmUoZXZlbnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OiByZXR1cm47XG4gICAgICB9XG4gICAgICBub2V2ZW50KGV2ZW50KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBrZXl1cHBlZChldmVudCkge1xuICAgICAgc3dpdGNoIChldmVudC5rZXlDb2RlKSB7XG4gICAgICAgIGNhc2UgMTY6IHsgLy8gU0hJRlRcbiAgICAgICAgICBpZiAoc2hpZnRpbmcpIHtcbiAgICAgICAgICAgIGxvY2tYID0gbG9ja1kgPSBzaGlmdGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgbW92ZShldmVudCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgMTg6IHsgLy8gQUxUXG4gICAgICAgICAgaWYgKG1vZGUgPT09IE1PREVfQ0VOVEVSKSB7XG4gICAgICAgICAgICBpZiAoc2lnblggPCAwKSBlMCA9IGUxOyBlbHNlIGlmIChzaWduWCA+IDApIHcwID0gdzE7XG4gICAgICAgICAgICBpZiAoc2lnblkgPCAwKSBzMCA9IHMxOyBlbHNlIGlmIChzaWduWSA+IDApIG4wID0gbjE7XG4gICAgICAgICAgICBtb2RlID0gTU9ERV9IQU5ETEU7XG4gICAgICAgICAgICBtb3ZlKGV2ZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAzMjogeyAvLyBTUEFDRVxuICAgICAgICAgIGlmIChtb2RlID09PSBNT0RFX1NQQUNFKSB7XG4gICAgICAgICAgICBpZiAoZXZlbnQuYWx0S2V5KSB7XG4gICAgICAgICAgICAgIGlmIChzaWduWCkgZTAgPSBlMSAtIGR4ICogc2lnblgsIHcwID0gdzEgKyBkeCAqIHNpZ25YO1xuICAgICAgICAgICAgICBpZiAoc2lnblkpIHMwID0gczEgLSBkeSAqIHNpZ25ZLCBuMCA9IG4xICsgZHkgKiBzaWduWTtcbiAgICAgICAgICAgICAgbW9kZSA9IE1PREVfQ0VOVEVSO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaWYgKHNpZ25YIDwgMCkgZTAgPSBlMTsgZWxzZSBpZiAoc2lnblggPiAwKSB3MCA9IHcxO1xuICAgICAgICAgICAgICBpZiAoc2lnblkgPCAwKSBzMCA9IHMxOyBlbHNlIGlmIChzaWduWSA+IDApIG4wID0gbjE7XG4gICAgICAgICAgICAgIG1vZGUgPSBNT0RFX0hBTkRMRTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG92ZXJsYXkuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzW3R5cGVdKTtcbiAgICAgICAgICAgIG1vdmUoZXZlbnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OiByZXR1cm47XG4gICAgICB9XG4gICAgICBub2V2ZW50KGV2ZW50KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB0b3VjaG1vdmVkKGV2ZW50KSB7XG4gICAgZW1pdHRlcih0aGlzLCBhcmd1bWVudHMpLm1vdmVkKGV2ZW50KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRvdWNoZW5kZWQoZXZlbnQpIHtcbiAgICBlbWl0dGVyKHRoaXMsIGFyZ3VtZW50cykuZW5kZWQoZXZlbnQpO1xuICB9XG5cbiAgZnVuY3Rpb24gaW5pdGlhbGl6ZSgpIHtcbiAgICB2YXIgc3RhdGUgPSB0aGlzLl9fYnJ1c2ggfHwge3NlbGVjdGlvbjogbnVsbH07XG4gICAgc3RhdGUuZXh0ZW50ID0gbnVtYmVyMihleHRlbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gICAgc3RhdGUuZGltID0gZGltO1xuICAgIHJldHVybiBzdGF0ZTtcbiAgfVxuXG4gIGJydXNoLmV4dGVudCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChleHRlbnQgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KG51bWJlcjIoXykpLCBicnVzaCkgOiBleHRlbnQ7XG4gIH07XG5cbiAgYnJ1c2guZmlsdGVyID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGZpbHRlciA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoISFfKSwgYnJ1c2gpIDogZmlsdGVyO1xuICB9O1xuXG4gIGJydXNoLnRvdWNoYWJsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0b3VjaGFibGUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCEhXyksIGJydXNoKSA6IHRvdWNoYWJsZTtcbiAgfTtcblxuICBicnVzaC5oYW5kbGVTaXplID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGhhbmRsZVNpemUgPSArXywgYnJ1c2gpIDogaGFuZGxlU2l6ZTtcbiAgfTtcblxuICBicnVzaC5rZXlNb2RpZmllcnMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoa2V5cyA9ICEhXywgYnJ1c2gpIDoga2V5cztcbiAgfTtcblxuICBicnVzaC5vbiA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZSA9IGxpc3RlbmVycy5vbi5hcHBseShsaXN0ZW5lcnMsIGFyZ3VtZW50cyk7XG4gICAgcmV0dXJuIHZhbHVlID09PSBsaXN0ZW5lcnMgPyBicnVzaCA6IHZhbHVlO1xuICB9O1xuXG4gIHJldHVybiBicnVzaDtcbn1cbiIsICJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4LCB5KSB7XG4gIHZhciBub2Rlcywgc3RyZW5ndGggPSAxO1xuXG4gIGlmICh4ID09IG51bGwpIHggPSAwO1xuICBpZiAoeSA9PSBudWxsKSB5ID0gMDtcblxuICBmdW5jdGlvbiBmb3JjZSgpIHtcbiAgICB2YXIgaSxcbiAgICAgICAgbiA9IG5vZGVzLmxlbmd0aCxcbiAgICAgICAgbm9kZSxcbiAgICAgICAgc3ggPSAwLFxuICAgICAgICBzeSA9IDA7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBub2RlID0gbm9kZXNbaV0sIHN4ICs9IG5vZGUueCwgc3kgKz0gbm9kZS55O1xuICAgIH1cblxuICAgIGZvciAoc3ggPSAoc3ggLyBuIC0geCkgKiBzdHJlbmd0aCwgc3kgPSAoc3kgLyBuIC0geSkgKiBzdHJlbmd0aCwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIG5vZGUgPSBub2Rlc1tpXSwgbm9kZS54IC09IHN4LCBub2RlLnkgLT0gc3k7XG4gICAgfVxuICB9XG5cbiAgZm9yY2UuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICBub2RlcyA9IF87XG4gIH07XG5cbiAgZm9yY2UueCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4ID0gK18sIGZvcmNlKSA6IHg7XG4gIH07XG5cbiAgZm9yY2UueSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh5ID0gK18sIGZvcmNlKSA6IHk7XG4gIH07XG5cbiAgZm9yY2Uuc3RyZW5ndGggPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc3RyZW5ndGggPSArXywgZm9yY2UpIDogc3RyZW5ndGg7XG4gIH07XG5cbiAgcmV0dXJuIGZvcmNlO1xufVxuIiwgImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGQpIHtcbiAgY29uc3QgeCA9ICt0aGlzLl94LmNhbGwobnVsbCwgZCksXG4gICAgICB5ID0gK3RoaXMuX3kuY2FsbChudWxsLCBkKTtcbiAgcmV0dXJuIGFkZCh0aGlzLmNvdmVyKHgsIHkpLCB4LCB5LCBkKTtcbn1cblxuZnVuY3Rpb24gYWRkKHRyZWUsIHgsIHksIGQpIHtcbiAgaWYgKGlzTmFOKHgpIHx8IGlzTmFOKHkpKSByZXR1cm4gdHJlZTsgLy8gaWdub3JlIGludmFsaWQgcG9pbnRzXG5cbiAgdmFyIHBhcmVudCxcbiAgICAgIG5vZGUgPSB0cmVlLl9yb290LFxuICAgICAgbGVhZiA9IHtkYXRhOiBkfSxcbiAgICAgIHgwID0gdHJlZS5feDAsXG4gICAgICB5MCA9IHRyZWUuX3kwLFxuICAgICAgeDEgPSB0cmVlLl94MSxcbiAgICAgIHkxID0gdHJlZS5feTEsXG4gICAgICB4bSxcbiAgICAgIHltLFxuICAgICAgeHAsXG4gICAgICB5cCxcbiAgICAgIHJpZ2h0LFxuICAgICAgYm90dG9tLFxuICAgICAgaSxcbiAgICAgIGo7XG5cbiAgLy8gSWYgdGhlIHRyZWUgaXMgZW1wdHksIGluaXRpYWxpemUgdGhlIHJvb3QgYXMgYSBsZWFmLlxuICBpZiAoIW5vZGUpIHJldHVybiB0cmVlLl9yb290ID0gbGVhZiwgdHJlZTtcblxuICAvLyBGaW5kIHRoZSBleGlzdGluZyBsZWFmIGZvciB0aGUgbmV3IHBvaW50LCBvciBhZGQgaXQuXG4gIHdoaWxlIChub2RlLmxlbmd0aCkge1xuICAgIGlmIChyaWdodCA9IHggPj0gKHhtID0gKHgwICsgeDEpIC8gMikpIHgwID0geG07IGVsc2UgeDEgPSB4bTtcbiAgICBpZiAoYm90dG9tID0geSA+PSAoeW0gPSAoeTAgKyB5MSkgLyAyKSkgeTAgPSB5bTsgZWxzZSB5MSA9IHltO1xuICAgIGlmIChwYXJlbnQgPSBub2RlLCAhKG5vZGUgPSBub2RlW2kgPSBib3R0b20gPDwgMSB8IHJpZ2h0XSkpIHJldHVybiBwYXJlbnRbaV0gPSBsZWFmLCB0cmVlO1xuICB9XG5cbiAgLy8gSXMgdGhlIG5ldyBwb2ludCBpcyBleGFjdGx5IGNvaW5jaWRlbnQgd2l0aCB0aGUgZXhpc3RpbmcgcG9pbnQ/XG4gIHhwID0gK3RyZWUuX3guY2FsbChudWxsLCBub2RlLmRhdGEpO1xuICB5cCA9ICt0cmVlLl95LmNhbGwobnVsbCwgbm9kZS5kYXRhKTtcbiAgaWYgKHggPT09IHhwICYmIHkgPT09IHlwKSByZXR1cm4gbGVhZi5uZXh0ID0gbm9kZSwgcGFyZW50ID8gcGFyZW50W2ldID0gbGVhZiA6IHRyZWUuX3Jvb3QgPSBsZWFmLCB0cmVlO1xuXG4gIC8vIE90aGVyd2lzZSwgc3BsaXQgdGhlIGxlYWYgbm9kZSB1bnRpbCB0aGUgb2xkIGFuZCBuZXcgcG9pbnQgYXJlIHNlcGFyYXRlZC5cbiAgZG8ge1xuICAgIHBhcmVudCA9IHBhcmVudCA/IHBhcmVudFtpXSA9IG5ldyBBcnJheSg0KSA6IHRyZWUuX3Jvb3QgPSBuZXcgQXJyYXkoNCk7XG4gICAgaWYgKHJpZ2h0ID0geCA+PSAoeG0gPSAoeDAgKyB4MSkgLyAyKSkgeDAgPSB4bTsgZWxzZSB4MSA9IHhtO1xuICAgIGlmIChib3R0b20gPSB5ID49ICh5bSA9ICh5MCArIHkxKSAvIDIpKSB5MCA9IHltOyBlbHNlIHkxID0geW07XG4gIH0gd2hpbGUgKChpID0gYm90dG9tIDw8IDEgfCByaWdodCkgPT09IChqID0gKHlwID49IHltKSA8PCAxIHwgKHhwID49IHhtKSkpO1xuICByZXR1cm4gcGFyZW50W2pdID0gbm9kZSwgcGFyZW50W2ldID0gbGVhZiwgdHJlZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFkZEFsbChkYXRhKSB7XG4gIHZhciBkLCBpLCBuID0gZGF0YS5sZW5ndGgsXG4gICAgICB4LFxuICAgICAgeSxcbiAgICAgIHh6ID0gbmV3IEFycmF5KG4pLFxuICAgICAgeXogPSBuZXcgQXJyYXkobiksXG4gICAgICB4MCA9IEluZmluaXR5LFxuICAgICAgeTAgPSBJbmZpbml0eSxcbiAgICAgIHgxID0gLUluZmluaXR5LFxuICAgICAgeTEgPSAtSW5maW5pdHk7XG5cbiAgLy8gQ29tcHV0ZSB0aGUgcG9pbnRzIGFuZCB0aGVpciBleHRlbnQuXG4gIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICBpZiAoaXNOYU4oeCA9ICt0aGlzLl94LmNhbGwobnVsbCwgZCA9IGRhdGFbaV0pKSB8fCBpc05hTih5ID0gK3RoaXMuX3kuY2FsbChudWxsLCBkKSkpIGNvbnRpbnVlO1xuICAgIHh6W2ldID0geDtcbiAgICB5eltpXSA9IHk7XG4gICAgaWYgKHggPCB4MCkgeDAgPSB4O1xuICAgIGlmICh4ID4geDEpIHgxID0geDtcbiAgICBpZiAoeSA8IHkwKSB5MCA9IHk7XG4gICAgaWYgKHkgPiB5MSkgeTEgPSB5O1xuICB9XG5cbiAgLy8gSWYgdGhlcmUgd2VyZSBubyAodmFsaWQpIHBvaW50cywgYWJvcnQuXG4gIGlmICh4MCA+IHgxIHx8IHkwID4geTEpIHJldHVybiB0aGlzO1xuXG4gIC8vIEV4cGFuZCB0aGUgdHJlZSB0byBjb3ZlciB0aGUgbmV3IHBvaW50cy5cbiAgdGhpcy5jb3Zlcih4MCwgeTApLmNvdmVyKHgxLCB5MSk7XG5cbiAgLy8gQWRkIHRoZSBuZXcgcG9pbnRzLlxuICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgYWRkKHRoaXMsIHh6W2ldLCB5eltpXSwgZGF0YVtpXSk7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cbiIsICJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4LCB5KSB7XG4gIGlmIChpc05hTih4ID0gK3gpIHx8IGlzTmFOKHkgPSAreSkpIHJldHVybiB0aGlzOyAvLyBpZ25vcmUgaW52YWxpZCBwb2ludHNcblxuICB2YXIgeDAgPSB0aGlzLl94MCxcbiAgICAgIHkwID0gdGhpcy5feTAsXG4gICAgICB4MSA9IHRoaXMuX3gxLFxuICAgICAgeTEgPSB0aGlzLl95MTtcblxuICAvLyBJZiB0aGUgcXVhZHRyZWUgaGFzIG5vIGV4dGVudCwgaW5pdGlhbGl6ZSB0aGVtLlxuICAvLyBJbnRlZ2VyIGV4dGVudCBhcmUgbmVjZXNzYXJ5IHNvIHRoYXQgaWYgd2UgbGF0ZXIgZG91YmxlIHRoZSBleHRlbnQsXG4gIC8vIHRoZSBleGlzdGluZyBxdWFkcmFudCBib3VuZGFyaWVzIGRvblx1MjAxOXQgY2hhbmdlIGR1ZSB0byBmbG9hdGluZyBwb2ludCBlcnJvciFcbiAgaWYgKGlzTmFOKHgwKSkge1xuICAgIHgxID0gKHgwID0gTWF0aC5mbG9vcih4KSkgKyAxO1xuICAgIHkxID0gKHkwID0gTWF0aC5mbG9vcih5KSkgKyAxO1xuICB9XG5cbiAgLy8gT3RoZXJ3aXNlLCBkb3VibGUgcmVwZWF0ZWRseSB0byBjb3Zlci5cbiAgZWxzZSB7XG4gICAgdmFyIHogPSB4MSAtIHgwIHx8IDEsXG4gICAgICAgIG5vZGUgPSB0aGlzLl9yb290LFxuICAgICAgICBwYXJlbnQsXG4gICAgICAgIGk7XG5cbiAgICB3aGlsZSAoeDAgPiB4IHx8IHggPj0geDEgfHwgeTAgPiB5IHx8IHkgPj0geTEpIHtcbiAgICAgIGkgPSAoeSA8IHkwKSA8PCAxIHwgKHggPCB4MCk7XG4gICAgICBwYXJlbnQgPSBuZXcgQXJyYXkoNCksIHBhcmVudFtpXSA9IG5vZGUsIG5vZGUgPSBwYXJlbnQsIHogKj0gMjtcbiAgICAgIHN3aXRjaCAoaSkge1xuICAgICAgICBjYXNlIDA6IHgxID0geDAgKyB6LCB5MSA9IHkwICsgejsgYnJlYWs7XG4gICAgICAgIGNhc2UgMTogeDAgPSB4MSAtIHosIHkxID0geTAgKyB6OyBicmVhaztcbiAgICAgICAgY2FzZSAyOiB4MSA9IHgwICsgeiwgeTAgPSB5MSAtIHo7IGJyZWFrO1xuICAgICAgICBjYXNlIDM6IHgwID0geDEgLSB6LCB5MCA9IHkxIC0gejsgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX3Jvb3QgJiYgdGhpcy5fcm9vdC5sZW5ndGgpIHRoaXMuX3Jvb3QgPSBub2RlO1xuICB9XG5cbiAgdGhpcy5feDAgPSB4MDtcbiAgdGhpcy5feTAgPSB5MDtcbiAgdGhpcy5feDEgPSB4MTtcbiAgdGhpcy5feTEgPSB5MTtcbiAgcmV0dXJuIHRoaXM7XG59XG4iLCAiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBkYXRhID0gW107XG4gIHRoaXMudmlzaXQoZnVuY3Rpb24obm9kZSkge1xuICAgIGlmICghbm9kZS5sZW5ndGgpIGRvIGRhdGEucHVzaChub2RlLmRhdGEpOyB3aGlsZSAobm9kZSA9IG5vZGUubmV4dClcbiAgfSk7XG4gIHJldHVybiBkYXRhO1xufVxuIiwgImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKF8pIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgID8gdGhpcy5jb3ZlcigrX1swXVswXSwgK19bMF1bMV0pLmNvdmVyKCtfWzFdWzBdLCArX1sxXVsxXSlcbiAgICAgIDogaXNOYU4odGhpcy5feDApID8gdW5kZWZpbmVkIDogW1t0aGlzLl94MCwgdGhpcy5feTBdLCBbdGhpcy5feDEsIHRoaXMuX3kxXV07XG59XG4iLCAiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obm9kZSwgeDAsIHkwLCB4MSwgeTEpIHtcbiAgdGhpcy5ub2RlID0gbm9kZTtcbiAgdGhpcy54MCA9IHgwO1xuICB0aGlzLnkwID0geTA7XG4gIHRoaXMueDEgPSB4MTtcbiAgdGhpcy55MSA9IHkxO1xufVxuIiwgImltcG9ydCBRdWFkIGZyb20gXCIuL3F1YWQuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCwgeSwgcmFkaXVzKSB7XG4gIHZhciBkYXRhLFxuICAgICAgeDAgPSB0aGlzLl94MCxcbiAgICAgIHkwID0gdGhpcy5feTAsXG4gICAgICB4MSxcbiAgICAgIHkxLFxuICAgICAgeDIsXG4gICAgICB5MixcbiAgICAgIHgzID0gdGhpcy5feDEsXG4gICAgICB5MyA9IHRoaXMuX3kxLFxuICAgICAgcXVhZHMgPSBbXSxcbiAgICAgIG5vZGUgPSB0aGlzLl9yb290LFxuICAgICAgcSxcbiAgICAgIGk7XG5cbiAgaWYgKG5vZGUpIHF1YWRzLnB1c2gobmV3IFF1YWQobm9kZSwgeDAsIHkwLCB4MywgeTMpKTtcbiAgaWYgKHJhZGl1cyA9PSBudWxsKSByYWRpdXMgPSBJbmZpbml0eTtcbiAgZWxzZSB7XG4gICAgeDAgPSB4IC0gcmFkaXVzLCB5MCA9IHkgLSByYWRpdXM7XG4gICAgeDMgPSB4ICsgcmFkaXVzLCB5MyA9IHkgKyByYWRpdXM7XG4gICAgcmFkaXVzICo9IHJhZGl1cztcbiAgfVxuXG4gIHdoaWxlIChxID0gcXVhZHMucG9wKCkpIHtcblxuICAgIC8vIFN0b3Agc2VhcmNoaW5nIGlmIHRoaXMgcXVhZHJhbnQgY2FuXHUyMDE5dCBjb250YWluIGEgY2xvc2VyIG5vZGUuXG4gICAgaWYgKCEobm9kZSA9IHEubm9kZSlcbiAgICAgICAgfHwgKHgxID0gcS54MCkgPiB4M1xuICAgICAgICB8fCAoeTEgPSBxLnkwKSA+IHkzXG4gICAgICAgIHx8ICh4MiA9IHEueDEpIDwgeDBcbiAgICAgICAgfHwgKHkyID0gcS55MSkgPCB5MCkgY29udGludWU7XG5cbiAgICAvLyBCaXNlY3QgdGhlIGN1cnJlbnQgcXVhZHJhbnQuXG4gICAgaWYgKG5vZGUubGVuZ3RoKSB7XG4gICAgICB2YXIgeG0gPSAoeDEgKyB4MikgLyAyLFxuICAgICAgICAgIHltID0gKHkxICsgeTIpIC8gMjtcblxuICAgICAgcXVhZHMucHVzaChcbiAgICAgICAgbmV3IFF1YWQobm9kZVszXSwgeG0sIHltLCB4MiwgeTIpLFxuICAgICAgICBuZXcgUXVhZChub2RlWzJdLCB4MSwgeW0sIHhtLCB5MiksXG4gICAgICAgIG5ldyBRdWFkKG5vZGVbMV0sIHhtLCB5MSwgeDIsIHltKSxcbiAgICAgICAgbmV3IFF1YWQobm9kZVswXSwgeDEsIHkxLCB4bSwgeW0pXG4gICAgICApO1xuXG4gICAgICAvLyBWaXNpdCB0aGUgY2xvc2VzdCBxdWFkcmFudCBmaXJzdC5cbiAgICAgIGlmIChpID0gKHkgPj0geW0pIDw8IDEgfCAoeCA+PSB4bSkpIHtcbiAgICAgICAgcSA9IHF1YWRzW3F1YWRzLmxlbmd0aCAtIDFdO1xuICAgICAgICBxdWFkc1txdWFkcy5sZW5ndGggLSAxXSA9IHF1YWRzW3F1YWRzLmxlbmd0aCAtIDEgLSBpXTtcbiAgICAgICAgcXVhZHNbcXVhZHMubGVuZ3RoIC0gMSAtIGldID0gcTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBWaXNpdCB0aGlzIHBvaW50LiAoVmlzaXRpbmcgY29pbmNpZGVudCBwb2ludHMgaXNuXHUyMDE5dCBuZWNlc3NhcnkhKVxuICAgIGVsc2Uge1xuICAgICAgdmFyIGR4ID0geCAtICt0aGlzLl94LmNhbGwobnVsbCwgbm9kZS5kYXRhKSxcbiAgICAgICAgICBkeSA9IHkgLSArdGhpcy5feS5jYWxsKG51bGwsIG5vZGUuZGF0YSksXG4gICAgICAgICAgZDIgPSBkeCAqIGR4ICsgZHkgKiBkeTtcbiAgICAgIGlmIChkMiA8IHJhZGl1cykge1xuICAgICAgICB2YXIgZCA9IE1hdGguc3FydChyYWRpdXMgPSBkMik7XG4gICAgICAgIHgwID0geCAtIGQsIHkwID0geSAtIGQ7XG4gICAgICAgIHgzID0geCArIGQsIHkzID0geSArIGQ7XG4gICAgICAgIGRhdGEgPSBub2RlLmRhdGE7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59XG4iLCAiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZCkge1xuICBpZiAoaXNOYU4oeCA9ICt0aGlzLl94LmNhbGwobnVsbCwgZCkpIHx8IGlzTmFOKHkgPSArdGhpcy5feS5jYWxsKG51bGwsIGQpKSkgcmV0dXJuIHRoaXM7IC8vIGlnbm9yZSBpbnZhbGlkIHBvaW50c1xuXG4gIHZhciBwYXJlbnQsXG4gICAgICBub2RlID0gdGhpcy5fcm9vdCxcbiAgICAgIHJldGFpbmVyLFxuICAgICAgcHJldmlvdXMsXG4gICAgICBuZXh0LFxuICAgICAgeDAgPSB0aGlzLl94MCxcbiAgICAgIHkwID0gdGhpcy5feTAsXG4gICAgICB4MSA9IHRoaXMuX3gxLFxuICAgICAgeTEgPSB0aGlzLl95MSxcbiAgICAgIHgsXG4gICAgICB5LFxuICAgICAgeG0sXG4gICAgICB5bSxcbiAgICAgIHJpZ2h0LFxuICAgICAgYm90dG9tLFxuICAgICAgaSxcbiAgICAgIGo7XG5cbiAgLy8gSWYgdGhlIHRyZWUgaXMgZW1wdHksIGluaXRpYWxpemUgdGhlIHJvb3QgYXMgYSBsZWFmLlxuICBpZiAoIW5vZGUpIHJldHVybiB0aGlzO1xuXG4gIC8vIEZpbmQgdGhlIGxlYWYgbm9kZSBmb3IgdGhlIHBvaW50LlxuICAvLyBXaGlsZSBkZXNjZW5kaW5nLCBhbHNvIHJldGFpbiB0aGUgZGVlcGVzdCBwYXJlbnQgd2l0aCBhIG5vbi1yZW1vdmVkIHNpYmxpbmcuXG4gIGlmIChub2RlLmxlbmd0aCkgd2hpbGUgKHRydWUpIHtcbiAgICBpZiAocmlnaHQgPSB4ID49ICh4bSA9ICh4MCArIHgxKSAvIDIpKSB4MCA9IHhtOyBlbHNlIHgxID0geG07XG4gICAgaWYgKGJvdHRvbSA9IHkgPj0gKHltID0gKHkwICsgeTEpIC8gMikpIHkwID0geW07IGVsc2UgeTEgPSB5bTtcbiAgICBpZiAoIShwYXJlbnQgPSBub2RlLCBub2RlID0gbm9kZVtpID0gYm90dG9tIDw8IDEgfCByaWdodF0pKSByZXR1cm4gdGhpcztcbiAgICBpZiAoIW5vZGUubGVuZ3RoKSBicmVhaztcbiAgICBpZiAocGFyZW50WyhpICsgMSkgJiAzXSB8fCBwYXJlbnRbKGkgKyAyKSAmIDNdIHx8IHBhcmVudFsoaSArIDMpICYgM10pIHJldGFpbmVyID0gcGFyZW50LCBqID0gaTtcbiAgfVxuXG4gIC8vIEZpbmQgdGhlIHBvaW50IHRvIHJlbW92ZS5cbiAgd2hpbGUgKG5vZGUuZGF0YSAhPT0gZCkgaWYgKCEocHJldmlvdXMgPSBub2RlLCBub2RlID0gbm9kZS5uZXh0KSkgcmV0dXJuIHRoaXM7XG4gIGlmIChuZXh0ID0gbm9kZS5uZXh0KSBkZWxldGUgbm9kZS5uZXh0O1xuXG4gIC8vIElmIHRoZXJlIGFyZSBtdWx0aXBsZSBjb2luY2lkZW50IHBvaW50cywgcmVtb3ZlIGp1c3QgdGhlIHBvaW50LlxuICBpZiAocHJldmlvdXMpIHJldHVybiAobmV4dCA/IHByZXZpb3VzLm5leHQgPSBuZXh0IDogZGVsZXRlIHByZXZpb3VzLm5leHQpLCB0aGlzO1xuXG4gIC8vIElmIHRoaXMgaXMgdGhlIHJvb3QgcG9pbnQsIHJlbW92ZSBpdC5cbiAgaWYgKCFwYXJlbnQpIHJldHVybiB0aGlzLl9yb290ID0gbmV4dCwgdGhpcztcblxuICAvLyBSZW1vdmUgdGhpcyBsZWFmLlxuICBuZXh0ID8gcGFyZW50W2ldID0gbmV4dCA6IGRlbGV0ZSBwYXJlbnRbaV07XG5cbiAgLy8gSWYgdGhlIHBhcmVudCBub3cgY29udGFpbnMgZXhhY3RseSBvbmUgbGVhZiwgY29sbGFwc2Ugc3VwZXJmbHVvdXMgcGFyZW50cy5cbiAgaWYgKChub2RlID0gcGFyZW50WzBdIHx8IHBhcmVudFsxXSB8fCBwYXJlbnRbMl0gfHwgcGFyZW50WzNdKVxuICAgICAgJiYgbm9kZSA9PT0gKHBhcmVudFszXSB8fCBwYXJlbnRbMl0gfHwgcGFyZW50WzFdIHx8IHBhcmVudFswXSlcbiAgICAgICYmICFub2RlLmxlbmd0aCkge1xuICAgIGlmIChyZXRhaW5lcikgcmV0YWluZXJbal0gPSBub2RlO1xuICAgIGVsc2UgdGhpcy5fcm9vdCA9IG5vZGU7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZUFsbChkYXRhKSB7XG4gIGZvciAodmFyIGkgPSAwLCBuID0gZGF0YS5sZW5ndGg7IGkgPCBuOyArK2kpIHRoaXMucmVtb3ZlKGRhdGFbaV0pO1xuICByZXR1cm4gdGhpcztcbn1cbiIsICJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuX3Jvb3Q7XG59XG4iLCAiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBzaXplID0gMDtcbiAgdGhpcy52aXNpdChmdW5jdGlvbihub2RlKSB7XG4gICAgaWYgKCFub2RlLmxlbmd0aCkgZG8gKytzaXplOyB3aGlsZSAobm9kZSA9IG5vZGUubmV4dClcbiAgfSk7XG4gIHJldHVybiBzaXplO1xufVxuIiwgImltcG9ydCBRdWFkIGZyb20gXCIuL3F1YWQuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgdmFyIHF1YWRzID0gW10sIHEsIG5vZGUgPSB0aGlzLl9yb290LCBjaGlsZCwgeDAsIHkwLCB4MSwgeTE7XG4gIGlmIChub2RlKSBxdWFkcy5wdXNoKG5ldyBRdWFkKG5vZGUsIHRoaXMuX3gwLCB0aGlzLl95MCwgdGhpcy5feDEsIHRoaXMuX3kxKSk7XG4gIHdoaWxlIChxID0gcXVhZHMucG9wKCkpIHtcbiAgICBpZiAoIWNhbGxiYWNrKG5vZGUgPSBxLm5vZGUsIHgwID0gcS54MCwgeTAgPSBxLnkwLCB4MSA9IHEueDEsIHkxID0gcS55MSkgJiYgbm9kZS5sZW5ndGgpIHtcbiAgICAgIHZhciB4bSA9ICh4MCArIHgxKSAvIDIsIHltID0gKHkwICsgeTEpIC8gMjtcbiAgICAgIGlmIChjaGlsZCA9IG5vZGVbM10pIHF1YWRzLnB1c2gobmV3IFF1YWQoY2hpbGQsIHhtLCB5bSwgeDEsIHkxKSk7XG4gICAgICBpZiAoY2hpbGQgPSBub2RlWzJdKSBxdWFkcy5wdXNoKG5ldyBRdWFkKGNoaWxkLCB4MCwgeW0sIHhtLCB5MSkpO1xuICAgICAgaWYgKGNoaWxkID0gbm9kZVsxXSkgcXVhZHMucHVzaChuZXcgUXVhZChjaGlsZCwgeG0sIHkwLCB4MSwgeW0pKTtcbiAgICAgIGlmIChjaGlsZCA9IG5vZGVbMF0pIHF1YWRzLnB1c2gobmV3IFF1YWQoY2hpbGQsIHgwLCB5MCwgeG0sIHltKSk7XG4gICAgfVxuICB9XG4gIHJldHVybiB0aGlzO1xufVxuIiwgImltcG9ydCBRdWFkIGZyb20gXCIuL3F1YWQuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgdmFyIHF1YWRzID0gW10sIG5leHQgPSBbXSwgcTtcbiAgaWYgKHRoaXMuX3Jvb3QpIHF1YWRzLnB1c2gobmV3IFF1YWQodGhpcy5fcm9vdCwgdGhpcy5feDAsIHRoaXMuX3kwLCB0aGlzLl94MSwgdGhpcy5feTEpKTtcbiAgd2hpbGUgKHEgPSBxdWFkcy5wb3AoKSkge1xuICAgIHZhciBub2RlID0gcS5ub2RlO1xuICAgIGlmIChub2RlLmxlbmd0aCkge1xuICAgICAgdmFyIGNoaWxkLCB4MCA9IHEueDAsIHkwID0gcS55MCwgeDEgPSBxLngxLCB5MSA9IHEueTEsIHhtID0gKHgwICsgeDEpIC8gMiwgeW0gPSAoeTAgKyB5MSkgLyAyO1xuICAgICAgaWYgKGNoaWxkID0gbm9kZVswXSkgcXVhZHMucHVzaChuZXcgUXVhZChjaGlsZCwgeDAsIHkwLCB4bSwgeW0pKTtcbiAgICAgIGlmIChjaGlsZCA9IG5vZGVbMV0pIHF1YWRzLnB1c2gobmV3IFF1YWQoY2hpbGQsIHhtLCB5MCwgeDEsIHltKSk7XG4gICAgICBpZiAoY2hpbGQgPSBub2RlWzJdKSBxdWFkcy5wdXNoKG5ldyBRdWFkKGNoaWxkLCB4MCwgeW0sIHhtLCB5MSkpO1xuICAgICAgaWYgKGNoaWxkID0gbm9kZVszXSkgcXVhZHMucHVzaChuZXcgUXVhZChjaGlsZCwgeG0sIHltLCB4MSwgeTEpKTtcbiAgICB9XG4gICAgbmV4dC5wdXNoKHEpO1xuICB9XG4gIHdoaWxlIChxID0gbmV4dC5wb3AoKSkge1xuICAgIGNhbGxiYWNrKHEubm9kZSwgcS54MCwgcS55MCwgcS54MSwgcS55MSk7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG4iLCAiZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRYKGQpIHtcbiAgcmV0dXJuIGRbMF07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKF8pIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGhpcy5feCA9IF8sIHRoaXMpIDogdGhpcy5feDtcbn1cbiIsICJleHBvcnQgZnVuY3Rpb24gZGVmYXVsdFkoZCkge1xuICByZXR1cm4gZFsxXTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oXykge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aGlzLl95ID0gXywgdGhpcykgOiB0aGlzLl95O1xufVxuIiwgImltcG9ydCB0cmVlX2FkZCwge2FkZEFsbCBhcyB0cmVlX2FkZEFsbH0gZnJvbSBcIi4vYWRkLmpzXCI7XG5pbXBvcnQgdHJlZV9jb3ZlciBmcm9tIFwiLi9jb3Zlci5qc1wiO1xuaW1wb3J0IHRyZWVfZGF0YSBmcm9tIFwiLi9kYXRhLmpzXCI7XG5pbXBvcnQgdHJlZV9leHRlbnQgZnJvbSBcIi4vZXh0ZW50LmpzXCI7XG5pbXBvcnQgdHJlZV9maW5kIGZyb20gXCIuL2ZpbmQuanNcIjtcbmltcG9ydCB0cmVlX3JlbW92ZSwge3JlbW92ZUFsbCBhcyB0cmVlX3JlbW92ZUFsbH0gZnJvbSBcIi4vcmVtb3ZlLmpzXCI7XG5pbXBvcnQgdHJlZV9yb290IGZyb20gXCIuL3Jvb3QuanNcIjtcbmltcG9ydCB0cmVlX3NpemUgZnJvbSBcIi4vc2l6ZS5qc1wiO1xuaW1wb3J0IHRyZWVfdmlzaXQgZnJvbSBcIi4vdmlzaXQuanNcIjtcbmltcG9ydCB0cmVlX3Zpc2l0QWZ0ZXIgZnJvbSBcIi4vdmlzaXRBZnRlci5qc1wiO1xuaW1wb3J0IHRyZWVfeCwge2RlZmF1bHRYfSBmcm9tIFwiLi94LmpzXCI7XG5pbXBvcnQgdHJlZV95LCB7ZGVmYXVsdFl9IGZyb20gXCIuL3kuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcXVhZHRyZWUobm9kZXMsIHgsIHkpIHtcbiAgdmFyIHRyZWUgPSBuZXcgUXVhZHRyZWUoeCA9PSBudWxsID8gZGVmYXVsdFggOiB4LCB5ID09IG51bGwgPyBkZWZhdWx0WSA6IHksIE5hTiwgTmFOLCBOYU4sIE5hTik7XG4gIHJldHVybiBub2RlcyA9PSBudWxsID8gdHJlZSA6IHRyZWUuYWRkQWxsKG5vZGVzKTtcbn1cblxuZnVuY3Rpb24gUXVhZHRyZWUoeCwgeSwgeDAsIHkwLCB4MSwgeTEpIHtcbiAgdGhpcy5feCA9IHg7XG4gIHRoaXMuX3kgPSB5O1xuICB0aGlzLl94MCA9IHgwO1xuICB0aGlzLl95MCA9IHkwO1xuICB0aGlzLl94MSA9IHgxO1xuICB0aGlzLl95MSA9IHkxO1xuICB0aGlzLl9yb290ID0gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBsZWFmX2NvcHkobGVhZikge1xuICB2YXIgY29weSA9IHtkYXRhOiBsZWFmLmRhdGF9LCBuZXh0ID0gY29weTtcbiAgd2hpbGUgKGxlYWYgPSBsZWFmLm5leHQpIG5leHQgPSBuZXh0Lm5leHQgPSB7ZGF0YTogbGVhZi5kYXRhfTtcbiAgcmV0dXJuIGNvcHk7XG59XG5cbnZhciB0cmVlUHJvdG8gPSBxdWFkdHJlZS5wcm90b3R5cGUgPSBRdWFkdHJlZS5wcm90b3R5cGU7XG5cbnRyZWVQcm90by5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gIHZhciBjb3B5ID0gbmV3IFF1YWR0cmVlKHRoaXMuX3gsIHRoaXMuX3ksIHRoaXMuX3gwLCB0aGlzLl95MCwgdGhpcy5feDEsIHRoaXMuX3kxKSxcbiAgICAgIG5vZGUgPSB0aGlzLl9yb290LFxuICAgICAgbm9kZXMsXG4gICAgICBjaGlsZDtcblxuICBpZiAoIW5vZGUpIHJldHVybiBjb3B5O1xuXG4gIGlmICghbm9kZS5sZW5ndGgpIHJldHVybiBjb3B5Ll9yb290ID0gbGVhZl9jb3B5KG5vZGUpLCBjb3B5O1xuXG4gIG5vZGVzID0gW3tzb3VyY2U6IG5vZGUsIHRhcmdldDogY29weS5fcm9vdCA9IG5ldyBBcnJheSg0KX1dO1xuICB3aGlsZSAobm9kZSA9IG5vZGVzLnBvcCgpKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OyArK2kpIHtcbiAgICAgIGlmIChjaGlsZCA9IG5vZGUuc291cmNlW2ldKSB7XG4gICAgICAgIGlmIChjaGlsZC5sZW5ndGgpIG5vZGVzLnB1c2goe3NvdXJjZTogY2hpbGQsIHRhcmdldDogbm9kZS50YXJnZXRbaV0gPSBuZXcgQXJyYXkoNCl9KTtcbiAgICAgICAgZWxzZSBub2RlLnRhcmdldFtpXSA9IGxlYWZfY29weShjaGlsZCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGNvcHk7XG59O1xuXG50cmVlUHJvdG8uYWRkID0gdHJlZV9hZGQ7XG50cmVlUHJvdG8uYWRkQWxsID0gdHJlZV9hZGRBbGw7XG50cmVlUHJvdG8uY292ZXIgPSB0cmVlX2NvdmVyO1xudHJlZVByb3RvLmRhdGEgPSB0cmVlX2RhdGE7XG50cmVlUHJvdG8uZXh0ZW50ID0gdHJlZV9leHRlbnQ7XG50cmVlUHJvdG8uZmluZCA9IHRyZWVfZmluZDtcbnRyZWVQcm90by5yZW1vdmUgPSB0cmVlX3JlbW92ZTtcbnRyZWVQcm90by5yZW1vdmVBbGwgPSB0cmVlX3JlbW92ZUFsbDtcbnRyZWVQcm90by5yb290ID0gdHJlZV9yb290O1xudHJlZVByb3RvLnNpemUgPSB0cmVlX3NpemU7XG50cmVlUHJvdG8udmlzaXQgPSB0cmVlX3Zpc2l0O1xudHJlZVByb3RvLnZpc2l0QWZ0ZXIgPSB0cmVlX3Zpc2l0QWZ0ZXI7XG50cmVlUHJvdG8ueCA9IHRyZWVfeDtcbnRyZWVQcm90by55ID0gdHJlZV95O1xuIiwgImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB4O1xuICB9O1xufVxuIiwgImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHJhbmRvbSkge1xuICByZXR1cm4gKHJhbmRvbSgpIC0gMC41KSAqIDFlLTY7XG59XG4iLCAiaW1wb3J0IHtxdWFkdHJlZX0gZnJvbSBcImQzLXF1YWR0cmVlXCI7XG5pbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnQuanNcIjtcbmltcG9ydCBqaWdnbGUgZnJvbSBcIi4vamlnZ2xlLmpzXCI7XG5cbmZ1bmN0aW9uIHgoZCkge1xuICByZXR1cm4gZC54ICsgZC52eDtcbn1cblxuZnVuY3Rpb24geShkKSB7XG4gIHJldHVybiBkLnkgKyBkLnZ5O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihyYWRpdXMpIHtcbiAgdmFyIG5vZGVzLFxuICAgICAgcmFkaWksXG4gICAgICByYW5kb20sXG4gICAgICBzdHJlbmd0aCA9IDEsXG4gICAgICBpdGVyYXRpb25zID0gMTtcblxuICBpZiAodHlwZW9mIHJhZGl1cyAhPT0gXCJmdW5jdGlvblwiKSByYWRpdXMgPSBjb25zdGFudChyYWRpdXMgPT0gbnVsbCA/IDEgOiArcmFkaXVzKTtcblxuICBmdW5jdGlvbiBmb3JjZSgpIHtcbiAgICB2YXIgaSwgbiA9IG5vZGVzLmxlbmd0aCxcbiAgICAgICAgdHJlZSxcbiAgICAgICAgbm9kZSxcbiAgICAgICAgeGksXG4gICAgICAgIHlpLFxuICAgICAgICByaSxcbiAgICAgICAgcmkyO1xuXG4gICAgZm9yICh2YXIgayA9IDA7IGsgPCBpdGVyYXRpb25zOyArK2spIHtcbiAgICAgIHRyZWUgPSBxdWFkdHJlZShub2RlcywgeCwgeSkudmlzaXRBZnRlcihwcmVwYXJlKTtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgbm9kZSA9IG5vZGVzW2ldO1xuICAgICAgICByaSA9IHJhZGlpW25vZGUuaW5kZXhdLCByaTIgPSByaSAqIHJpO1xuICAgICAgICB4aSA9IG5vZGUueCArIG5vZGUudng7XG4gICAgICAgIHlpID0gbm9kZS55ICsgbm9kZS52eTtcbiAgICAgICAgdHJlZS52aXNpdChhcHBseSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYXBwbHkocXVhZCwgeDAsIHkwLCB4MSwgeTEpIHtcbiAgICAgIHZhciBkYXRhID0gcXVhZC5kYXRhLCByaiA9IHF1YWQuciwgciA9IHJpICsgcmo7XG4gICAgICBpZiAoZGF0YSkge1xuICAgICAgICBpZiAoZGF0YS5pbmRleCA+IG5vZGUuaW5kZXgpIHtcbiAgICAgICAgICB2YXIgeCA9IHhpIC0gZGF0YS54IC0gZGF0YS52eCxcbiAgICAgICAgICAgICAgeSA9IHlpIC0gZGF0YS55IC0gZGF0YS52eSxcbiAgICAgICAgICAgICAgbCA9IHggKiB4ICsgeSAqIHk7XG4gICAgICAgICAgaWYgKGwgPCByICogcikge1xuICAgICAgICAgICAgaWYgKHggPT09IDApIHggPSBqaWdnbGUocmFuZG9tKSwgbCArPSB4ICogeDtcbiAgICAgICAgICAgIGlmICh5ID09PSAwKSB5ID0gamlnZ2xlKHJhbmRvbSksIGwgKz0geSAqIHk7XG4gICAgICAgICAgICBsID0gKHIgLSAobCA9IE1hdGguc3FydChsKSkpIC8gbCAqIHN0cmVuZ3RoO1xuICAgICAgICAgICAgbm9kZS52eCArPSAoeCAqPSBsKSAqIChyID0gKHJqICo9IHJqKSAvIChyaTIgKyByaikpO1xuICAgICAgICAgICAgbm9kZS52eSArPSAoeSAqPSBsKSAqIHI7XG4gICAgICAgICAgICBkYXRhLnZ4IC09IHggKiAociA9IDEgLSByKTtcbiAgICAgICAgICAgIGRhdGEudnkgLT0geSAqIHI7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHJldHVybiB4MCA+IHhpICsgciB8fCB4MSA8IHhpIC0gciB8fCB5MCA+IHlpICsgciB8fCB5MSA8IHlpIC0gcjtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwcmVwYXJlKHF1YWQpIHtcbiAgICBpZiAocXVhZC5kYXRhKSByZXR1cm4gcXVhZC5yID0gcmFkaWlbcXVhZC5kYXRhLmluZGV4XTtcbiAgICBmb3IgKHZhciBpID0gcXVhZC5yID0gMDsgaSA8IDQ7ICsraSkge1xuICAgICAgaWYgKHF1YWRbaV0gJiYgcXVhZFtpXS5yID4gcXVhZC5yKSB7XG4gICAgICAgIHF1YWQuciA9IHF1YWRbaV0ucjtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpbml0aWFsaXplKCkge1xuICAgIGlmICghbm9kZXMpIHJldHVybjtcbiAgICB2YXIgaSwgbiA9IG5vZGVzLmxlbmd0aCwgbm9kZTtcbiAgICByYWRpaSA9IG5ldyBBcnJheShuKTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSBub2RlID0gbm9kZXNbaV0sIHJhZGlpW25vZGUuaW5kZXhdID0gK3JhZGl1cyhub2RlLCBpLCBub2Rlcyk7XG4gIH1cblxuICBmb3JjZS5pbml0aWFsaXplID0gZnVuY3Rpb24oX25vZGVzLCBfcmFuZG9tKSB7XG4gICAgbm9kZXMgPSBfbm9kZXM7XG4gICAgcmFuZG9tID0gX3JhbmRvbTtcbiAgICBpbml0aWFsaXplKCk7XG4gIH07XG5cbiAgZm9yY2UuaXRlcmF0aW9ucyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChpdGVyYXRpb25zID0gK18sIGZvcmNlKSA6IGl0ZXJhdGlvbnM7XG4gIH07XG5cbiAgZm9yY2Uuc3RyZW5ndGggPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc3RyZW5ndGggPSArXywgZm9yY2UpIDogc3RyZW5ndGg7XG4gIH07XG5cbiAgZm9yY2UucmFkaXVzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHJhZGl1cyA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBpbml0aWFsaXplKCksIGZvcmNlKSA6IHJhZGl1cztcbiAgfTtcblxuICByZXR1cm4gZm9yY2U7XG59XG4iLCAiaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50LmpzXCI7XG5pbXBvcnQgamlnZ2xlIGZyb20gXCIuL2ppZ2dsZS5qc1wiO1xuXG5mdW5jdGlvbiBpbmRleChkKSB7XG4gIHJldHVybiBkLmluZGV4O1xufVxuXG5mdW5jdGlvbiBmaW5kKG5vZGVCeUlkLCBub2RlSWQpIHtcbiAgdmFyIG5vZGUgPSBub2RlQnlJZC5nZXQobm9kZUlkKTtcbiAgaWYgKCFub2RlKSB0aHJvdyBuZXcgRXJyb3IoXCJub2RlIG5vdCBmb3VuZDogXCIgKyBub2RlSWQpO1xuICByZXR1cm4gbm9kZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obGlua3MpIHtcbiAgdmFyIGlkID0gaW5kZXgsXG4gICAgICBzdHJlbmd0aCA9IGRlZmF1bHRTdHJlbmd0aCxcbiAgICAgIHN0cmVuZ3RocyxcbiAgICAgIGRpc3RhbmNlID0gY29uc3RhbnQoMzApLFxuICAgICAgZGlzdGFuY2VzLFxuICAgICAgbm9kZXMsXG4gICAgICBjb3VudCxcbiAgICAgIGJpYXMsXG4gICAgICByYW5kb20sXG4gICAgICBpdGVyYXRpb25zID0gMTtcblxuICBpZiAobGlua3MgPT0gbnVsbCkgbGlua3MgPSBbXTtcblxuICBmdW5jdGlvbiBkZWZhdWx0U3RyZW5ndGgobGluaykge1xuICAgIHJldHVybiAxIC8gTWF0aC5taW4oY291bnRbbGluay5zb3VyY2UuaW5kZXhdLCBjb3VudFtsaW5rLnRhcmdldC5pbmRleF0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9yY2UoYWxwaGEpIHtcbiAgICBmb3IgKHZhciBrID0gMCwgbiA9IGxpbmtzLmxlbmd0aDsgayA8IGl0ZXJhdGlvbnM7ICsraykge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGxpbmssIHNvdXJjZSwgdGFyZ2V0LCB4LCB5LCBsLCBiOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGxpbmsgPSBsaW5rc1tpXSwgc291cmNlID0gbGluay5zb3VyY2UsIHRhcmdldCA9IGxpbmsudGFyZ2V0O1xuICAgICAgICB4ID0gdGFyZ2V0LnggKyB0YXJnZXQudnggLSBzb3VyY2UueCAtIHNvdXJjZS52eCB8fCBqaWdnbGUocmFuZG9tKTtcbiAgICAgICAgeSA9IHRhcmdldC55ICsgdGFyZ2V0LnZ5IC0gc291cmNlLnkgLSBzb3VyY2UudnkgfHwgamlnZ2xlKHJhbmRvbSk7XG4gICAgICAgIGwgPSBNYXRoLnNxcnQoeCAqIHggKyB5ICogeSk7XG4gICAgICAgIGwgPSAobCAtIGRpc3RhbmNlc1tpXSkgLyBsICogYWxwaGEgKiBzdHJlbmd0aHNbaV07XG4gICAgICAgIHggKj0gbCwgeSAqPSBsO1xuICAgICAgICB0YXJnZXQudnggLT0geCAqIChiID0gYmlhc1tpXSk7XG4gICAgICAgIHRhcmdldC52eSAtPSB5ICogYjtcbiAgICAgICAgc291cmNlLnZ4ICs9IHggKiAoYiA9IDEgLSBiKTtcbiAgICAgICAgc291cmNlLnZ5ICs9IHkgKiBiO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRpYWxpemUoKSB7XG4gICAgaWYgKCFub2RlcykgcmV0dXJuO1xuXG4gICAgdmFyIGksXG4gICAgICAgIG4gPSBub2Rlcy5sZW5ndGgsXG4gICAgICAgIG0gPSBsaW5rcy5sZW5ndGgsXG4gICAgICAgIG5vZGVCeUlkID0gbmV3IE1hcChub2Rlcy5tYXAoKGQsIGkpID0+IFtpZChkLCBpLCBub2RlcyksIGRdKSksXG4gICAgICAgIGxpbms7XG5cbiAgICBmb3IgKGkgPSAwLCBjb3VudCA9IG5ldyBBcnJheShuKTsgaSA8IG07ICsraSkge1xuICAgICAgbGluayA9IGxpbmtzW2ldLCBsaW5rLmluZGV4ID0gaTtcbiAgICAgIGlmICh0eXBlb2YgbGluay5zb3VyY2UgIT09IFwib2JqZWN0XCIpIGxpbmsuc291cmNlID0gZmluZChub2RlQnlJZCwgbGluay5zb3VyY2UpO1xuICAgICAgaWYgKHR5cGVvZiBsaW5rLnRhcmdldCAhPT0gXCJvYmplY3RcIikgbGluay50YXJnZXQgPSBmaW5kKG5vZGVCeUlkLCBsaW5rLnRhcmdldCk7XG4gICAgICBjb3VudFtsaW5rLnNvdXJjZS5pbmRleF0gPSAoY291bnRbbGluay5zb3VyY2UuaW5kZXhdIHx8IDApICsgMTtcbiAgICAgIGNvdW50W2xpbmsudGFyZ2V0LmluZGV4XSA9IChjb3VudFtsaW5rLnRhcmdldC5pbmRleF0gfHwgMCkgKyAxO1xuICAgIH1cblxuICAgIGZvciAoaSA9IDAsIGJpYXMgPSBuZXcgQXJyYXkobSk7IGkgPCBtOyArK2kpIHtcbiAgICAgIGxpbmsgPSBsaW5rc1tpXSwgYmlhc1tpXSA9IGNvdW50W2xpbmsuc291cmNlLmluZGV4XSAvIChjb3VudFtsaW5rLnNvdXJjZS5pbmRleF0gKyBjb3VudFtsaW5rLnRhcmdldC5pbmRleF0pO1xuICAgIH1cblxuICAgIHN0cmVuZ3RocyA9IG5ldyBBcnJheShtKSwgaW5pdGlhbGl6ZVN0cmVuZ3RoKCk7XG4gICAgZGlzdGFuY2VzID0gbmV3IEFycmF5KG0pLCBpbml0aWFsaXplRGlzdGFuY2UoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRpYWxpemVTdHJlbmd0aCgpIHtcbiAgICBpZiAoIW5vZGVzKSByZXR1cm47XG5cbiAgICBmb3IgKHZhciBpID0gMCwgbiA9IGxpbmtzLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgc3RyZW5ndGhzW2ldID0gK3N0cmVuZ3RoKGxpbmtzW2ldLCBpLCBsaW5rcyk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW5pdGlhbGl6ZURpc3RhbmNlKCkge1xuICAgIGlmICghbm9kZXMpIHJldHVybjtcblxuICAgIGZvciAodmFyIGkgPSAwLCBuID0gbGlua3MubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICBkaXN0YW5jZXNbaV0gPSArZGlzdGFuY2UobGlua3NbaV0sIGksIGxpbmtzKTtcbiAgICB9XG4gIH1cblxuICBmb3JjZS5pbml0aWFsaXplID0gZnVuY3Rpb24oX25vZGVzLCBfcmFuZG9tKSB7XG4gICAgbm9kZXMgPSBfbm9kZXM7XG4gICAgcmFuZG9tID0gX3JhbmRvbTtcbiAgICBpbml0aWFsaXplKCk7XG4gIH07XG5cbiAgZm9yY2UubGlua3MgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAobGlua3MgPSBfLCBpbml0aWFsaXplKCksIGZvcmNlKSA6IGxpbmtzO1xuICB9O1xuXG4gIGZvcmNlLmlkID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGlkID0gXywgZm9yY2UpIDogaWQ7XG4gIH07XG5cbiAgZm9yY2UuaXRlcmF0aW9ucyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChpdGVyYXRpb25zID0gK18sIGZvcmNlKSA6IGl0ZXJhdGlvbnM7XG4gIH07XG5cbiAgZm9yY2Uuc3RyZW5ndGggPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc3RyZW5ndGggPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgaW5pdGlhbGl6ZVN0cmVuZ3RoKCksIGZvcmNlKSA6IHN0cmVuZ3RoO1xuICB9O1xuXG4gIGZvcmNlLmRpc3RhbmNlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGRpc3RhbmNlID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGluaXRpYWxpemVEaXN0YW5jZSgpLCBmb3JjZSkgOiBkaXN0YW5jZTtcbiAgfTtcblxuICByZXR1cm4gZm9yY2U7XG59XG4iLCAiLy8gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGluZWFyX2NvbmdydWVudGlhbF9nZW5lcmF0b3IjUGFyYW1ldGVyc19pbl9jb21tb25fdXNlXG5jb25zdCBhID0gMTY2NDUyNTtcbmNvbnN0IGMgPSAxMDEzOTA0MjIzO1xuY29uc3QgbSA9IDQyOTQ5NjcyOTY7IC8vIDJeMzJcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIGxldCBzID0gMTtcbiAgcmV0dXJuICgpID0+IChzID0gKGEgKiBzICsgYykgJSBtKSAvIG07XG59XG4iLCAiaW1wb3J0IHtkaXNwYXRjaH0gZnJvbSBcImQzLWRpc3BhdGNoXCI7XG5pbXBvcnQge3RpbWVyfSBmcm9tIFwiZDMtdGltZXJcIjtcbmltcG9ydCBsY2cgZnJvbSBcIi4vbGNnLmpzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiB4KGQpIHtcbiAgcmV0dXJuIGQueDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHkoZCkge1xuICByZXR1cm4gZC55O1xufVxuXG52YXIgaW5pdGlhbFJhZGl1cyA9IDEwLFxuICAgIGluaXRpYWxBbmdsZSA9IE1hdGguUEkgKiAoMyAtIE1hdGguc3FydCg1KSk7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5vZGVzKSB7XG4gIHZhciBzaW11bGF0aW9uLFxuICAgICAgYWxwaGEgPSAxLFxuICAgICAgYWxwaGFNaW4gPSAwLjAwMSxcbiAgICAgIGFscGhhRGVjYXkgPSAxIC0gTWF0aC5wb3coYWxwaGFNaW4sIDEgLyAzMDApLFxuICAgICAgYWxwaGFUYXJnZXQgPSAwLFxuICAgICAgdmVsb2NpdHlEZWNheSA9IDAuNixcbiAgICAgIGZvcmNlcyA9IG5ldyBNYXAoKSxcbiAgICAgIHN0ZXBwZXIgPSB0aW1lcihzdGVwKSxcbiAgICAgIGV2ZW50ID0gZGlzcGF0Y2goXCJ0aWNrXCIsIFwiZW5kXCIpLFxuICAgICAgcmFuZG9tID0gbGNnKCk7XG5cbiAgaWYgKG5vZGVzID09IG51bGwpIG5vZGVzID0gW107XG5cbiAgZnVuY3Rpb24gc3RlcCgpIHtcbiAgICB0aWNrKCk7XG4gICAgZXZlbnQuY2FsbChcInRpY2tcIiwgc2ltdWxhdGlvbik7XG4gICAgaWYgKGFscGhhIDwgYWxwaGFNaW4pIHtcbiAgICAgIHN0ZXBwZXIuc3RvcCgpO1xuICAgICAgZXZlbnQuY2FsbChcImVuZFwiLCBzaW11bGF0aW9uKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB0aWNrKGl0ZXJhdGlvbnMpIHtcbiAgICB2YXIgaSwgbiA9IG5vZGVzLmxlbmd0aCwgbm9kZTtcblxuICAgIGlmIChpdGVyYXRpb25zID09PSB1bmRlZmluZWQpIGl0ZXJhdGlvbnMgPSAxO1xuXG4gICAgZm9yICh2YXIgayA9IDA7IGsgPCBpdGVyYXRpb25zOyArK2spIHtcbiAgICAgIGFscGhhICs9IChhbHBoYVRhcmdldCAtIGFscGhhKSAqIGFscGhhRGVjYXk7XG5cbiAgICAgIGZvcmNlcy5mb3JFYWNoKGZ1bmN0aW9uKGZvcmNlKSB7XG4gICAgICAgIGZvcmNlKGFscGhhKTtcbiAgICAgIH0pO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIG5vZGUgPSBub2Rlc1tpXTtcbiAgICAgICAgaWYgKG5vZGUuZnggPT0gbnVsbCkgbm9kZS54ICs9IG5vZGUudnggKj0gdmVsb2NpdHlEZWNheTtcbiAgICAgICAgZWxzZSBub2RlLnggPSBub2RlLmZ4LCBub2RlLnZ4ID0gMDtcbiAgICAgICAgaWYgKG5vZGUuZnkgPT0gbnVsbCkgbm9kZS55ICs9IG5vZGUudnkgKj0gdmVsb2NpdHlEZWNheTtcbiAgICAgICAgZWxzZSBub2RlLnkgPSBub2RlLmZ5LCBub2RlLnZ5ID0gMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc2ltdWxhdGlvbjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRpYWxpemVOb2RlcygpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbiA9IG5vZGVzLmxlbmd0aCwgbm9kZTsgaSA8IG47ICsraSkge1xuICAgICAgbm9kZSA9IG5vZGVzW2ldLCBub2RlLmluZGV4ID0gaTtcbiAgICAgIGlmIChub2RlLmZ4ICE9IG51bGwpIG5vZGUueCA9IG5vZGUuZng7XG4gICAgICBpZiAobm9kZS5meSAhPSBudWxsKSBub2RlLnkgPSBub2RlLmZ5O1xuICAgICAgaWYgKGlzTmFOKG5vZGUueCkgfHwgaXNOYU4obm9kZS55KSkge1xuICAgICAgICB2YXIgcmFkaXVzID0gaW5pdGlhbFJhZGl1cyAqIE1hdGguc3FydCgwLjUgKyBpKSwgYW5nbGUgPSBpICogaW5pdGlhbEFuZ2xlO1xuICAgICAgICBub2RlLnggPSByYWRpdXMgKiBNYXRoLmNvcyhhbmdsZSk7XG4gICAgICAgIG5vZGUueSA9IHJhZGl1cyAqIE1hdGguc2luKGFuZ2xlKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc05hTihub2RlLnZ4KSB8fCBpc05hTihub2RlLnZ5KSkge1xuICAgICAgICBub2RlLnZ4ID0gbm9kZS52eSA9IDA7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW5pdGlhbGl6ZUZvcmNlKGZvcmNlKSB7XG4gICAgaWYgKGZvcmNlLmluaXRpYWxpemUpIGZvcmNlLmluaXRpYWxpemUobm9kZXMsIHJhbmRvbSk7XG4gICAgcmV0dXJuIGZvcmNlO1xuICB9XG5cbiAgaW5pdGlhbGl6ZU5vZGVzKCk7XG5cbiAgcmV0dXJuIHNpbXVsYXRpb24gPSB7XG4gICAgdGljazogdGljayxcblxuICAgIHJlc3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHN0ZXBwZXIucmVzdGFydChzdGVwKSwgc2ltdWxhdGlvbjtcbiAgICB9LFxuXG4gICAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gc3RlcHBlci5zdG9wKCksIHNpbXVsYXRpb247XG4gICAgfSxcblxuICAgIG5vZGVzOiBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChub2RlcyA9IF8sIGluaXRpYWxpemVOb2RlcygpLCBmb3JjZXMuZm9yRWFjaChpbml0aWFsaXplRm9yY2UpLCBzaW11bGF0aW9uKSA6IG5vZGVzO1xuICAgIH0sXG5cbiAgICBhbHBoYTogZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoYWxwaGEgPSArXywgc2ltdWxhdGlvbikgOiBhbHBoYTtcbiAgICB9LFxuXG4gICAgYWxwaGFNaW46IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGFscGhhTWluID0gK18sIHNpbXVsYXRpb24pIDogYWxwaGFNaW47XG4gICAgfSxcblxuICAgIGFscGhhRGVjYXk6IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGFscGhhRGVjYXkgPSArXywgc2ltdWxhdGlvbikgOiArYWxwaGFEZWNheTtcbiAgICB9LFxuXG4gICAgYWxwaGFUYXJnZXQ6IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGFscGhhVGFyZ2V0ID0gK18sIHNpbXVsYXRpb24pIDogYWxwaGFUYXJnZXQ7XG4gICAgfSxcblxuICAgIHZlbG9jaXR5RGVjYXk6IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHZlbG9jaXR5RGVjYXkgPSAxIC0gXywgc2ltdWxhdGlvbikgOiAxIC0gdmVsb2NpdHlEZWNheTtcbiAgICB9LFxuXG4gICAgcmFuZG9tU291cmNlOiBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyYW5kb20gPSBfLCBmb3JjZXMuZm9yRWFjaChpbml0aWFsaXplRm9yY2UpLCBzaW11bGF0aW9uKSA6IHJhbmRvbTtcbiAgICB9LFxuXG4gICAgZm9yY2U6IGZ1bmN0aW9uKG5hbWUsIF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMSA/ICgoXyA9PSBudWxsID8gZm9yY2VzLmRlbGV0ZShuYW1lKSA6IGZvcmNlcy5zZXQobmFtZSwgaW5pdGlhbGl6ZUZvcmNlKF8pKSksIHNpbXVsYXRpb24pIDogZm9yY2VzLmdldChuYW1lKTtcbiAgICB9LFxuXG4gICAgZmluZDogZnVuY3Rpb24oeCwgeSwgcmFkaXVzKSB7XG4gICAgICB2YXIgaSA9IDAsXG4gICAgICAgICAgbiA9IG5vZGVzLmxlbmd0aCxcbiAgICAgICAgICBkeCxcbiAgICAgICAgICBkeSxcbiAgICAgICAgICBkMixcbiAgICAgICAgICBub2RlLFxuICAgICAgICAgIGNsb3Nlc3Q7XG5cbiAgICAgIGlmIChyYWRpdXMgPT0gbnVsbCkgcmFkaXVzID0gSW5maW5pdHk7XG4gICAgICBlbHNlIHJhZGl1cyAqPSByYWRpdXM7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgbm9kZSA9IG5vZGVzW2ldO1xuICAgICAgICBkeCA9IHggLSBub2RlLng7XG4gICAgICAgIGR5ID0geSAtIG5vZGUueTtcbiAgICAgICAgZDIgPSBkeCAqIGR4ICsgZHkgKiBkeTtcbiAgICAgICAgaWYgKGQyIDwgcmFkaXVzKSBjbG9zZXN0ID0gbm9kZSwgcmFkaXVzID0gZDI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjbG9zZXN0O1xuICAgIH0sXG5cbiAgICBvbjogZnVuY3Rpb24obmFtZSwgXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gKGV2ZW50Lm9uKG5hbWUsIF8pLCBzaW11bGF0aW9uKSA6IGV2ZW50Lm9uKG5hbWUpO1xuICAgIH1cbiAgfTtcbn1cbiIsICJpbXBvcnQge3F1YWR0cmVlfSBmcm9tIFwiZDMtcXVhZHRyZWVcIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudC5qc1wiO1xuaW1wb3J0IGppZ2dsZSBmcm9tIFwiLi9qaWdnbGUuanNcIjtcbmltcG9ydCB7eCwgeX0gZnJvbSBcIi4vc2ltdWxhdGlvbi5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIG5vZGVzLFxuICAgICAgbm9kZSxcbiAgICAgIHJhbmRvbSxcbiAgICAgIGFscGhhLFxuICAgICAgc3RyZW5ndGggPSBjb25zdGFudCgtMzApLFxuICAgICAgc3RyZW5ndGhzLFxuICAgICAgZGlzdGFuY2VNaW4yID0gMSxcbiAgICAgIGRpc3RhbmNlTWF4MiA9IEluZmluaXR5LFxuICAgICAgdGhldGEyID0gMC44MTtcblxuICBmdW5jdGlvbiBmb3JjZShfKSB7XG4gICAgdmFyIGksIG4gPSBub2Rlcy5sZW5ndGgsIHRyZWUgPSBxdWFkdHJlZShub2RlcywgeCwgeSkudmlzaXRBZnRlcihhY2N1bXVsYXRlKTtcbiAgICBmb3IgKGFscGhhID0gXywgaSA9IDA7IGkgPCBuOyArK2kpIG5vZGUgPSBub2Rlc1tpXSwgdHJlZS52aXNpdChhcHBseSk7XG4gIH1cblxuICBmdW5jdGlvbiBpbml0aWFsaXplKCkge1xuICAgIGlmICghbm9kZXMpIHJldHVybjtcbiAgICB2YXIgaSwgbiA9IG5vZGVzLmxlbmd0aCwgbm9kZTtcbiAgICBzdHJlbmd0aHMgPSBuZXcgQXJyYXkobik7XG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkgbm9kZSA9IG5vZGVzW2ldLCBzdHJlbmd0aHNbbm9kZS5pbmRleF0gPSArc3RyZW5ndGgobm9kZSwgaSwgbm9kZXMpO1xuICB9XG5cbiAgZnVuY3Rpb24gYWNjdW11bGF0ZShxdWFkKSB7XG4gICAgdmFyIHN0cmVuZ3RoID0gMCwgcSwgYywgd2VpZ2h0ID0gMCwgeCwgeSwgaTtcblxuICAgIC8vIEZvciBpbnRlcm5hbCBub2RlcywgYWNjdW11bGF0ZSBmb3JjZXMgZnJvbSBjaGlsZCBxdWFkcmFudHMuXG4gICAgaWYgKHF1YWQubGVuZ3RoKSB7XG4gICAgICBmb3IgKHggPSB5ID0gaSA9IDA7IGkgPCA0OyArK2kpIHtcbiAgICAgICAgaWYgKChxID0gcXVhZFtpXSkgJiYgKGMgPSBNYXRoLmFicyhxLnZhbHVlKSkpIHtcbiAgICAgICAgICBzdHJlbmd0aCArPSBxLnZhbHVlLCB3ZWlnaHQgKz0gYywgeCArPSBjICogcS54LCB5ICs9IGMgKiBxLnk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHF1YWQueCA9IHggLyB3ZWlnaHQ7XG4gICAgICBxdWFkLnkgPSB5IC8gd2VpZ2h0O1xuICAgIH1cblxuICAgIC8vIEZvciBsZWFmIG5vZGVzLCBhY2N1bXVsYXRlIGZvcmNlcyBmcm9tIGNvaW5jaWRlbnQgcXVhZHJhbnRzLlxuICAgIGVsc2Uge1xuICAgICAgcSA9IHF1YWQ7XG4gICAgICBxLnggPSBxLmRhdGEueDtcbiAgICAgIHEueSA9IHEuZGF0YS55O1xuICAgICAgZG8gc3RyZW5ndGggKz0gc3RyZW5ndGhzW3EuZGF0YS5pbmRleF07XG4gICAgICB3aGlsZSAocSA9IHEubmV4dCk7XG4gICAgfVxuXG4gICAgcXVhZC52YWx1ZSA9IHN0cmVuZ3RoO1xuICB9XG5cbiAgZnVuY3Rpb24gYXBwbHkocXVhZCwgeDEsIF8sIHgyKSB7XG4gICAgaWYgKCFxdWFkLnZhbHVlKSByZXR1cm4gdHJ1ZTtcblxuICAgIHZhciB4ID0gcXVhZC54IC0gbm9kZS54LFxuICAgICAgICB5ID0gcXVhZC55IC0gbm9kZS55LFxuICAgICAgICB3ID0geDIgLSB4MSxcbiAgICAgICAgbCA9IHggKiB4ICsgeSAqIHk7XG5cbiAgICAvLyBBcHBseSB0aGUgQmFybmVzLUh1dCBhcHByb3hpbWF0aW9uIGlmIHBvc3NpYmxlLlxuICAgIC8vIExpbWl0IGZvcmNlcyBmb3IgdmVyeSBjbG9zZSBub2RlczsgcmFuZG9taXplIGRpcmVjdGlvbiBpZiBjb2luY2lkZW50LlxuICAgIGlmICh3ICogdyAvIHRoZXRhMiA8IGwpIHtcbiAgICAgIGlmIChsIDwgZGlzdGFuY2VNYXgyKSB7XG4gICAgICAgIGlmICh4ID09PSAwKSB4ID0gamlnZ2xlKHJhbmRvbSksIGwgKz0geCAqIHg7XG4gICAgICAgIGlmICh5ID09PSAwKSB5ID0gamlnZ2xlKHJhbmRvbSksIGwgKz0geSAqIHk7XG4gICAgICAgIGlmIChsIDwgZGlzdGFuY2VNaW4yKSBsID0gTWF0aC5zcXJ0KGRpc3RhbmNlTWluMiAqIGwpO1xuICAgICAgICBub2RlLnZ4ICs9IHggKiBxdWFkLnZhbHVlICogYWxwaGEgLyBsO1xuICAgICAgICBub2RlLnZ5ICs9IHkgKiBxdWFkLnZhbHVlICogYWxwaGEgLyBsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLy8gT3RoZXJ3aXNlLCBwcm9jZXNzIHBvaW50cyBkaXJlY3RseS5cbiAgICBlbHNlIGlmIChxdWFkLmxlbmd0aCB8fCBsID49IGRpc3RhbmNlTWF4MikgcmV0dXJuO1xuXG4gICAgLy8gTGltaXQgZm9yY2VzIGZvciB2ZXJ5IGNsb3NlIG5vZGVzOyByYW5kb21pemUgZGlyZWN0aW9uIGlmIGNvaW5jaWRlbnQuXG4gICAgaWYgKHF1YWQuZGF0YSAhPT0gbm9kZSB8fCBxdWFkLm5leHQpIHtcbiAgICAgIGlmICh4ID09PSAwKSB4ID0gamlnZ2xlKHJhbmRvbSksIGwgKz0geCAqIHg7XG4gICAgICBpZiAoeSA9PT0gMCkgeSA9IGppZ2dsZShyYW5kb20pLCBsICs9IHkgKiB5O1xuICAgICAgaWYgKGwgPCBkaXN0YW5jZU1pbjIpIGwgPSBNYXRoLnNxcnQoZGlzdGFuY2VNaW4yICogbCk7XG4gICAgfVxuXG4gICAgZG8gaWYgKHF1YWQuZGF0YSAhPT0gbm9kZSkge1xuICAgICAgdyA9IHN0cmVuZ3Roc1txdWFkLmRhdGEuaW5kZXhdICogYWxwaGEgLyBsO1xuICAgICAgbm9kZS52eCArPSB4ICogdztcbiAgICAgIG5vZGUudnkgKz0geSAqIHc7XG4gICAgfSB3aGlsZSAocXVhZCA9IHF1YWQubmV4dCk7XG4gIH1cblxuICBmb3JjZS5pbml0aWFsaXplID0gZnVuY3Rpb24oX25vZGVzLCBfcmFuZG9tKSB7XG4gICAgbm9kZXMgPSBfbm9kZXM7XG4gICAgcmFuZG9tID0gX3JhbmRvbTtcbiAgICBpbml0aWFsaXplKCk7XG4gIH07XG5cbiAgZm9yY2Uuc3RyZW5ndGggPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc3RyZW5ndGggPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgaW5pdGlhbGl6ZSgpLCBmb3JjZSkgOiBzdHJlbmd0aDtcbiAgfTtcblxuICBmb3JjZS5kaXN0YW5jZU1pbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkaXN0YW5jZU1pbjIgPSBfICogXywgZm9yY2UpIDogTWF0aC5zcXJ0KGRpc3RhbmNlTWluMik7XG4gIH07XG5cbiAgZm9yY2UuZGlzdGFuY2VNYXggPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZGlzdGFuY2VNYXgyID0gXyAqIF8sIGZvcmNlKSA6IE1hdGguc3FydChkaXN0YW5jZU1heDIpO1xuICB9O1xuXG4gIGZvcmNlLnRoZXRhID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRoZXRhMiA9IF8gKiBfLCBmb3JjZSkgOiBNYXRoLnNxcnQodGhldGEyKTtcbiAgfTtcblxuICByZXR1cm4gZm9yY2U7XG59XG4iLCAiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4gTWF0aC5hYnMoeCA9IE1hdGgucm91bmQoeCkpID49IDFlMjFcbiAgICAgID8geC50b0xvY2FsZVN0cmluZyhcImVuXCIpLnJlcGxhY2UoLywvZywgXCJcIilcbiAgICAgIDogeC50b1N0cmluZygxMCk7XG59XG5cbi8vIENvbXB1dGVzIHRoZSBkZWNpbWFsIGNvZWZmaWNpZW50IGFuZCBleHBvbmVudCBvZiB0aGUgc3BlY2lmaWVkIG51bWJlciB4IHdpdGhcbi8vIHNpZ25pZmljYW50IGRpZ2l0cyBwLCB3aGVyZSB4IGlzIHBvc2l0aXZlIGFuZCBwIGlzIGluIFsxLCAyMV0gb3IgdW5kZWZpbmVkLlxuLy8gRm9yIGV4YW1wbGUsIGZvcm1hdERlY2ltYWxQYXJ0cygxLjIzKSByZXR1cm5zIFtcIjEyM1wiLCAwXS5cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXREZWNpbWFsUGFydHMoeCwgcCkge1xuICBpZiAoKGkgPSAoeCA9IHAgPyB4LnRvRXhwb25lbnRpYWwocCAtIDEpIDogeC50b0V4cG9uZW50aWFsKCkpLmluZGV4T2YoXCJlXCIpKSA8IDApIHJldHVybiBudWxsOyAvLyBOYU4sIFx1MDBCMUluZmluaXR5XG4gIHZhciBpLCBjb2VmZmljaWVudCA9IHguc2xpY2UoMCwgaSk7XG5cbiAgLy8gVGhlIHN0cmluZyByZXR1cm5lZCBieSB0b0V4cG9uZW50aWFsIGVpdGhlciBoYXMgdGhlIGZvcm0gXFxkXFwuXFxkK2VbLStdXFxkK1xuICAvLyAoZS5nLiwgMS4yZSszKSBvciB0aGUgZm9ybSBcXGRlWy0rXVxcZCsgKGUuZy4sIDFlKzMpLlxuICByZXR1cm4gW1xuICAgIGNvZWZmaWNpZW50Lmxlbmd0aCA+IDEgPyBjb2VmZmljaWVudFswXSArIGNvZWZmaWNpZW50LnNsaWNlKDIpIDogY29lZmZpY2llbnQsXG4gICAgK3guc2xpY2UoaSArIDEpXG4gIF07XG59XG4iLCAiaW1wb3J0IHtmb3JtYXREZWNpbWFsUGFydHN9IGZyb20gXCIuL2Zvcm1hdERlY2ltYWwuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4geCA9IGZvcm1hdERlY2ltYWxQYXJ0cyhNYXRoLmFicyh4KSksIHggPyB4WzFdIDogTmFOO1xufVxuIiwgImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGdyb3VwaW5nLCB0aG91c2FuZHMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlLCB3aWR0aCkge1xuICAgIHZhciBpID0gdmFsdWUubGVuZ3RoLFxuICAgICAgICB0ID0gW10sXG4gICAgICAgIGogPSAwLFxuICAgICAgICBnID0gZ3JvdXBpbmdbMF0sXG4gICAgICAgIGxlbmd0aCA9IDA7XG5cbiAgICB3aGlsZSAoaSA+IDAgJiYgZyA+IDApIHtcbiAgICAgIGlmIChsZW5ndGggKyBnICsgMSA+IHdpZHRoKSBnID0gTWF0aC5tYXgoMSwgd2lkdGggLSBsZW5ndGgpO1xuICAgICAgdC5wdXNoKHZhbHVlLnN1YnN0cmluZyhpIC09IGcsIGkgKyBnKSk7XG4gICAgICBpZiAoKGxlbmd0aCArPSBnICsgMSkgPiB3aWR0aCkgYnJlYWs7XG4gICAgICBnID0gZ3JvdXBpbmdbaiA9IChqICsgMSkgJSBncm91cGluZy5sZW5ndGhdO1xuICAgIH1cblxuICAgIHJldHVybiB0LnJldmVyc2UoKS5qb2luKHRob3VzYW5kcyk7XG4gIH07XG59XG4iLCAiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obnVtZXJhbHMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlLnJlcGxhY2UoL1swLTldL2csIGZ1bmN0aW9uKGkpIHtcbiAgICAgIHJldHVybiBudW1lcmFsc1sraV07XG4gICAgfSk7XG4gIH07XG59XG4iLCAiLy8gW1tmaWxsXWFsaWduXVtzaWduXVtzeW1ib2xdWzBdW3dpZHRoXVssXVsucHJlY2lzaW9uXVt+XVt0eXBlXVxudmFyIHJlID0gL14oPzooLik/KFs8Pj1eXSkpPyhbK1xcLSggXSk/KFskI10pPygwKT8oXFxkKyk/KCwpPyhcXC5cXGQrKT8ofik/KFthLXolXSk/JC9pO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXRTcGVjaWZpZXIoc3BlY2lmaWVyKSB7XG4gIGlmICghKG1hdGNoID0gcmUuZXhlYyhzcGVjaWZpZXIpKSkgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBmb3JtYXQ6IFwiICsgc3BlY2lmaWVyKTtcbiAgdmFyIG1hdGNoO1xuICByZXR1cm4gbmV3IEZvcm1hdFNwZWNpZmllcih7XG4gICAgZmlsbDogbWF0Y2hbMV0sXG4gICAgYWxpZ246IG1hdGNoWzJdLFxuICAgIHNpZ246IG1hdGNoWzNdLFxuICAgIHN5bWJvbDogbWF0Y2hbNF0sXG4gICAgemVybzogbWF0Y2hbNV0sXG4gICAgd2lkdGg6IG1hdGNoWzZdLFxuICAgIGNvbW1hOiBtYXRjaFs3XSxcbiAgICBwcmVjaXNpb246IG1hdGNoWzhdICYmIG1hdGNoWzhdLnNsaWNlKDEpLFxuICAgIHRyaW06IG1hdGNoWzldLFxuICAgIHR5cGU6IG1hdGNoWzEwXVxuICB9KTtcbn1cblxuZm9ybWF0U3BlY2lmaWVyLnByb3RvdHlwZSA9IEZvcm1hdFNwZWNpZmllci5wcm90b3R5cGU7IC8vIGluc3RhbmNlb2ZcblxuZXhwb3J0IGZ1bmN0aW9uIEZvcm1hdFNwZWNpZmllcihzcGVjaWZpZXIpIHtcbiAgdGhpcy5maWxsID0gc3BlY2lmaWVyLmZpbGwgPT09IHVuZGVmaW5lZCA/IFwiIFwiIDogc3BlY2lmaWVyLmZpbGwgKyBcIlwiO1xuICB0aGlzLmFsaWduID0gc3BlY2lmaWVyLmFsaWduID09PSB1bmRlZmluZWQgPyBcIj5cIiA6IHNwZWNpZmllci5hbGlnbiArIFwiXCI7XG4gIHRoaXMuc2lnbiA9IHNwZWNpZmllci5zaWduID09PSB1bmRlZmluZWQgPyBcIi1cIiA6IHNwZWNpZmllci5zaWduICsgXCJcIjtcbiAgdGhpcy5zeW1ib2wgPSBzcGVjaWZpZXIuc3ltYm9sID09PSB1bmRlZmluZWQgPyBcIlwiIDogc3BlY2lmaWVyLnN5bWJvbCArIFwiXCI7XG4gIHRoaXMuemVybyA9ICEhc3BlY2lmaWVyLnplcm87XG4gIHRoaXMud2lkdGggPSBzcGVjaWZpZXIud2lkdGggPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6ICtzcGVjaWZpZXIud2lkdGg7XG4gIHRoaXMuY29tbWEgPSAhIXNwZWNpZmllci5jb21tYTtcbiAgdGhpcy5wcmVjaXNpb24gPSBzcGVjaWZpZXIucHJlY2lzaW9uID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiArc3BlY2lmaWVyLnByZWNpc2lvbjtcbiAgdGhpcy50cmltID0gISFzcGVjaWZpZXIudHJpbTtcbiAgdGhpcy50eXBlID0gc3BlY2lmaWVyLnR5cGUgPT09IHVuZGVmaW5lZCA/IFwiXCIgOiBzcGVjaWZpZXIudHlwZSArIFwiXCI7XG59XG5cbkZvcm1hdFNwZWNpZmllci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuZmlsbFxuICAgICAgKyB0aGlzLmFsaWduXG4gICAgICArIHRoaXMuc2lnblxuICAgICAgKyB0aGlzLnN5bWJvbFxuICAgICAgKyAodGhpcy56ZXJvID8gXCIwXCIgOiBcIlwiKVxuICAgICAgKyAodGhpcy53aWR0aCA9PT0gdW5kZWZpbmVkID8gXCJcIiA6IE1hdGgubWF4KDEsIHRoaXMud2lkdGggfCAwKSlcbiAgICAgICsgKHRoaXMuY29tbWEgPyBcIixcIiA6IFwiXCIpXG4gICAgICArICh0aGlzLnByZWNpc2lvbiA9PT0gdW5kZWZpbmVkID8gXCJcIiA6IFwiLlwiICsgTWF0aC5tYXgoMCwgdGhpcy5wcmVjaXNpb24gfCAwKSlcbiAgICAgICsgKHRoaXMudHJpbSA/IFwiflwiIDogXCJcIilcbiAgICAgICsgdGhpcy50eXBlO1xufTtcbiIsICIvLyBUcmltcyBpbnNpZ25pZmljYW50IHplcm9zLCBlLmcuLCByZXBsYWNlcyAxLjIwMDBrIHdpdGggMS4yay5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHMpIHtcbiAgb3V0OiBmb3IgKHZhciBuID0gcy5sZW5ndGgsIGkgPSAxLCBpMCA9IC0xLCBpMTsgaSA8IG47ICsraSkge1xuICAgIHN3aXRjaCAoc1tpXSkge1xuICAgICAgY2FzZSBcIi5cIjogaTAgPSBpMSA9IGk7IGJyZWFrO1xuICAgICAgY2FzZSBcIjBcIjogaWYgKGkwID09PSAwKSBpMCA9IGk7IGkxID0gaTsgYnJlYWs7XG4gICAgICBkZWZhdWx0OiBpZiAoIStzW2ldKSBicmVhayBvdXQ7IGlmIChpMCA+IDApIGkwID0gMDsgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBpMCA+IDAgPyBzLnNsaWNlKDAsIGkwKSArIHMuc2xpY2UoaTEgKyAxKSA6IHM7XG59XG4iLCAiaW1wb3J0IHtmb3JtYXREZWNpbWFsUGFydHN9IGZyb20gXCIuL2Zvcm1hdERlY2ltYWwuanNcIjtcblxuZXhwb3J0IHZhciBwcmVmaXhFeHBvbmVudDtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCwgcCkge1xuICB2YXIgZCA9IGZvcm1hdERlY2ltYWxQYXJ0cyh4LCBwKTtcbiAgaWYgKCFkKSByZXR1cm4geCArIFwiXCI7XG4gIHZhciBjb2VmZmljaWVudCA9IGRbMF0sXG4gICAgICBleHBvbmVudCA9IGRbMV0sXG4gICAgICBpID0gZXhwb25lbnQgLSAocHJlZml4RXhwb25lbnQgPSBNYXRoLm1heCgtOCwgTWF0aC5taW4oOCwgTWF0aC5mbG9vcihleHBvbmVudCAvIDMpKSkgKiAzKSArIDEsXG4gICAgICBuID0gY29lZmZpY2llbnQubGVuZ3RoO1xuICByZXR1cm4gaSA9PT0gbiA/IGNvZWZmaWNpZW50XG4gICAgICA6IGkgPiBuID8gY29lZmZpY2llbnQgKyBuZXcgQXJyYXkoaSAtIG4gKyAxKS5qb2luKFwiMFwiKVxuICAgICAgOiBpID4gMCA/IGNvZWZmaWNpZW50LnNsaWNlKDAsIGkpICsgXCIuXCIgKyBjb2VmZmljaWVudC5zbGljZShpKVxuICAgICAgOiBcIjAuXCIgKyBuZXcgQXJyYXkoMSAtIGkpLmpvaW4oXCIwXCIpICsgZm9ybWF0RGVjaW1hbFBhcnRzKHgsIE1hdGgubWF4KDAsIHAgKyBpIC0gMSkpWzBdOyAvLyBsZXNzIHRoYW4gMXkhXG59XG4iLCAiaW1wb3J0IHtmb3JtYXREZWNpbWFsUGFydHN9IGZyb20gXCIuL2Zvcm1hdERlY2ltYWwuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCwgcCkge1xuICB2YXIgZCA9IGZvcm1hdERlY2ltYWxQYXJ0cyh4LCBwKTtcbiAgaWYgKCFkKSByZXR1cm4geCArIFwiXCI7XG4gIHZhciBjb2VmZmljaWVudCA9IGRbMF0sXG4gICAgICBleHBvbmVudCA9IGRbMV07XG4gIHJldHVybiBleHBvbmVudCA8IDAgPyBcIjAuXCIgKyBuZXcgQXJyYXkoLWV4cG9uZW50KS5qb2luKFwiMFwiKSArIGNvZWZmaWNpZW50XG4gICAgICA6IGNvZWZmaWNpZW50Lmxlbmd0aCA+IGV4cG9uZW50ICsgMSA/IGNvZWZmaWNpZW50LnNsaWNlKDAsIGV4cG9uZW50ICsgMSkgKyBcIi5cIiArIGNvZWZmaWNpZW50LnNsaWNlKGV4cG9uZW50ICsgMSlcbiAgICAgIDogY29lZmZpY2llbnQgKyBuZXcgQXJyYXkoZXhwb25lbnQgLSBjb2VmZmljaWVudC5sZW5ndGggKyAyKS5qb2luKFwiMFwiKTtcbn1cbiIsICJpbXBvcnQgZm9ybWF0RGVjaW1hbCBmcm9tIFwiLi9mb3JtYXREZWNpbWFsLmpzXCI7XG5pbXBvcnQgZm9ybWF0UHJlZml4QXV0byBmcm9tIFwiLi9mb3JtYXRQcmVmaXhBdXRvLmpzXCI7XG5pbXBvcnQgZm9ybWF0Um91bmRlZCBmcm9tIFwiLi9mb3JtYXRSb3VuZGVkLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgXCIlXCI6ICh4LCBwKSA9PiAoeCAqIDEwMCkudG9GaXhlZChwKSxcbiAgXCJiXCI6ICh4KSA9PiBNYXRoLnJvdW5kKHgpLnRvU3RyaW5nKDIpLFxuICBcImNcIjogKHgpID0+IHggKyBcIlwiLFxuICBcImRcIjogZm9ybWF0RGVjaW1hbCxcbiAgXCJlXCI6ICh4LCBwKSA9PiB4LnRvRXhwb25lbnRpYWwocCksXG4gIFwiZlwiOiAoeCwgcCkgPT4geC50b0ZpeGVkKHApLFxuICBcImdcIjogKHgsIHApID0+IHgudG9QcmVjaXNpb24ocCksXG4gIFwib1wiOiAoeCkgPT4gTWF0aC5yb3VuZCh4KS50b1N0cmluZyg4KSxcbiAgXCJwXCI6ICh4LCBwKSA9PiBmb3JtYXRSb3VuZGVkKHggKiAxMDAsIHApLFxuICBcInJcIjogZm9ybWF0Um91bmRlZCxcbiAgXCJzXCI6IGZvcm1hdFByZWZpeEF1dG8sXG4gIFwiWFwiOiAoeCkgPT4gTWF0aC5yb3VuZCh4KS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKSxcbiAgXCJ4XCI6ICh4KSA9PiBNYXRoLnJvdW5kKHgpLnRvU3RyaW5nKDE2KVxufTtcbiIsICJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiB4O1xufVxuIiwgImltcG9ydCBleHBvbmVudCBmcm9tIFwiLi9leHBvbmVudC5qc1wiO1xuaW1wb3J0IGZvcm1hdEdyb3VwIGZyb20gXCIuL2Zvcm1hdEdyb3VwLmpzXCI7XG5pbXBvcnQgZm9ybWF0TnVtZXJhbHMgZnJvbSBcIi4vZm9ybWF0TnVtZXJhbHMuanNcIjtcbmltcG9ydCBmb3JtYXRTcGVjaWZpZXIgZnJvbSBcIi4vZm9ybWF0U3BlY2lmaWVyLmpzXCI7XG5pbXBvcnQgZm9ybWF0VHJpbSBmcm9tIFwiLi9mb3JtYXRUcmltLmpzXCI7XG5pbXBvcnQgZm9ybWF0VHlwZXMgZnJvbSBcIi4vZm9ybWF0VHlwZXMuanNcIjtcbmltcG9ydCB7cHJlZml4RXhwb25lbnR9IGZyb20gXCIuL2Zvcm1hdFByZWZpeEF1dG8uanNcIjtcbmltcG9ydCBpZGVudGl0eSBmcm9tIFwiLi9pZGVudGl0eS5qc1wiO1xuXG52YXIgbWFwID0gQXJyYXkucHJvdG90eXBlLm1hcCxcbiAgICBwcmVmaXhlcyA9IFtcInlcIixcInpcIixcImFcIixcImZcIixcInBcIixcIm5cIixcIlx1MDBCNVwiLFwibVwiLFwiXCIsXCJrXCIsXCJNXCIsXCJHXCIsXCJUXCIsXCJQXCIsXCJFXCIsXCJaXCIsXCJZXCJdO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihsb2NhbGUpIHtcbiAgdmFyIGdyb3VwID0gbG9jYWxlLmdyb3VwaW5nID09PSB1bmRlZmluZWQgfHwgbG9jYWxlLnRob3VzYW5kcyA9PT0gdW5kZWZpbmVkID8gaWRlbnRpdHkgOiBmb3JtYXRHcm91cChtYXAuY2FsbChsb2NhbGUuZ3JvdXBpbmcsIE51bWJlciksIGxvY2FsZS50aG91c2FuZHMgKyBcIlwiKSxcbiAgICAgIGN1cnJlbmN5UHJlZml4ID0gbG9jYWxlLmN1cnJlbmN5ID09PSB1bmRlZmluZWQgPyBcIlwiIDogbG9jYWxlLmN1cnJlbmN5WzBdICsgXCJcIixcbiAgICAgIGN1cnJlbmN5U3VmZml4ID0gbG9jYWxlLmN1cnJlbmN5ID09PSB1bmRlZmluZWQgPyBcIlwiIDogbG9jYWxlLmN1cnJlbmN5WzFdICsgXCJcIixcbiAgICAgIGRlY2ltYWwgPSBsb2NhbGUuZGVjaW1hbCA9PT0gdW5kZWZpbmVkID8gXCIuXCIgOiBsb2NhbGUuZGVjaW1hbCArIFwiXCIsXG4gICAgICBudW1lcmFscyA9IGxvY2FsZS5udW1lcmFscyA9PT0gdW5kZWZpbmVkID8gaWRlbnRpdHkgOiBmb3JtYXROdW1lcmFscyhtYXAuY2FsbChsb2NhbGUubnVtZXJhbHMsIFN0cmluZykpLFxuICAgICAgcGVyY2VudCA9IGxvY2FsZS5wZXJjZW50ID09PSB1bmRlZmluZWQgPyBcIiVcIiA6IGxvY2FsZS5wZXJjZW50ICsgXCJcIixcbiAgICAgIG1pbnVzID0gbG9jYWxlLm1pbnVzID09PSB1bmRlZmluZWQgPyBcIlx1MjIxMlwiIDogbG9jYWxlLm1pbnVzICsgXCJcIixcbiAgICAgIG5hbiA9IGxvY2FsZS5uYW4gPT09IHVuZGVmaW5lZCA/IFwiTmFOXCIgOiBsb2NhbGUubmFuICsgXCJcIjtcblxuICBmdW5jdGlvbiBuZXdGb3JtYXQoc3BlY2lmaWVyKSB7XG4gICAgc3BlY2lmaWVyID0gZm9ybWF0U3BlY2lmaWVyKHNwZWNpZmllcik7XG5cbiAgICB2YXIgZmlsbCA9IHNwZWNpZmllci5maWxsLFxuICAgICAgICBhbGlnbiA9IHNwZWNpZmllci5hbGlnbixcbiAgICAgICAgc2lnbiA9IHNwZWNpZmllci5zaWduLFxuICAgICAgICBzeW1ib2wgPSBzcGVjaWZpZXIuc3ltYm9sLFxuICAgICAgICB6ZXJvID0gc3BlY2lmaWVyLnplcm8sXG4gICAgICAgIHdpZHRoID0gc3BlY2lmaWVyLndpZHRoLFxuICAgICAgICBjb21tYSA9IHNwZWNpZmllci5jb21tYSxcbiAgICAgICAgcHJlY2lzaW9uID0gc3BlY2lmaWVyLnByZWNpc2lvbixcbiAgICAgICAgdHJpbSA9IHNwZWNpZmllci50cmltLFxuICAgICAgICB0eXBlID0gc3BlY2lmaWVyLnR5cGU7XG5cbiAgICAvLyBUaGUgXCJuXCIgdHlwZSBpcyBhbiBhbGlhcyBmb3IgXCIsZ1wiLlxuICAgIGlmICh0eXBlID09PSBcIm5cIikgY29tbWEgPSB0cnVlLCB0eXBlID0gXCJnXCI7XG5cbiAgICAvLyBUaGUgXCJcIiB0eXBlLCBhbmQgYW55IGludmFsaWQgdHlwZSwgaXMgYW4gYWxpYXMgZm9yIFwiLjEyfmdcIi5cbiAgICBlbHNlIGlmICghZm9ybWF0VHlwZXNbdHlwZV0pIHByZWNpc2lvbiA9PT0gdW5kZWZpbmVkICYmIChwcmVjaXNpb24gPSAxMiksIHRyaW0gPSB0cnVlLCB0eXBlID0gXCJnXCI7XG5cbiAgICAvLyBJZiB6ZXJvIGZpbGwgaXMgc3BlY2lmaWVkLCBwYWRkaW5nIGdvZXMgYWZ0ZXIgc2lnbiBhbmQgYmVmb3JlIGRpZ2l0cy5cbiAgICBpZiAoemVybyB8fCAoZmlsbCA9PT0gXCIwXCIgJiYgYWxpZ24gPT09IFwiPVwiKSkgemVybyA9IHRydWUsIGZpbGwgPSBcIjBcIiwgYWxpZ24gPSBcIj1cIjtcblxuICAgIC8vIENvbXB1dGUgdGhlIHByZWZpeCBhbmQgc3VmZml4LlxuICAgIC8vIEZvciBTSS1wcmVmaXgsIHRoZSBzdWZmaXggaXMgbGF6aWx5IGNvbXB1dGVkLlxuICAgIHZhciBwcmVmaXggPSBzeW1ib2wgPT09IFwiJFwiID8gY3VycmVuY3lQcmVmaXggOiBzeW1ib2wgPT09IFwiI1wiICYmIC9bYm94WF0vLnRlc3QodHlwZSkgPyBcIjBcIiArIHR5cGUudG9Mb3dlckNhc2UoKSA6IFwiXCIsXG4gICAgICAgIHN1ZmZpeCA9IHN5bWJvbCA9PT0gXCIkXCIgPyBjdXJyZW5jeVN1ZmZpeCA6IC9bJXBdLy50ZXN0KHR5cGUpID8gcGVyY2VudCA6IFwiXCI7XG5cbiAgICAvLyBXaGF0IGZvcm1hdCBmdW5jdGlvbiBzaG91bGQgd2UgdXNlP1xuICAgIC8vIElzIHRoaXMgYW4gaW50ZWdlciB0eXBlP1xuICAgIC8vIENhbiB0aGlzIHR5cGUgZ2VuZXJhdGUgZXhwb25lbnRpYWwgbm90YXRpb24/XG4gICAgdmFyIGZvcm1hdFR5cGUgPSBmb3JtYXRUeXBlc1t0eXBlXSxcbiAgICAgICAgbWF5YmVTdWZmaXggPSAvW2RlZmdwcnMlXS8udGVzdCh0eXBlKTtcblxuICAgIC8vIFNldCB0aGUgZGVmYXVsdCBwcmVjaXNpb24gaWYgbm90IHNwZWNpZmllZCxcbiAgICAvLyBvciBjbGFtcCB0aGUgc3BlY2lmaWVkIHByZWNpc2lvbiB0byB0aGUgc3VwcG9ydGVkIHJhbmdlLlxuICAgIC8vIEZvciBzaWduaWZpY2FudCBwcmVjaXNpb24sIGl0IG11c3QgYmUgaW4gWzEsIDIxXS5cbiAgICAvLyBGb3IgZml4ZWQgcHJlY2lzaW9uLCBpdCBtdXN0IGJlIGluIFswLCAyMF0uXG4gICAgcHJlY2lzaW9uID0gcHJlY2lzaW9uID09PSB1bmRlZmluZWQgPyA2XG4gICAgICAgIDogL1tncHJzXS8udGVzdCh0eXBlKSA/IE1hdGgubWF4KDEsIE1hdGgubWluKDIxLCBwcmVjaXNpb24pKVxuICAgICAgICA6IE1hdGgubWF4KDAsIE1hdGgubWluKDIwLCBwcmVjaXNpb24pKTtcblxuICAgIGZ1bmN0aW9uIGZvcm1hdCh2YWx1ZSkge1xuICAgICAgdmFyIHZhbHVlUHJlZml4ID0gcHJlZml4LFxuICAgICAgICAgIHZhbHVlU3VmZml4ID0gc3VmZml4LFxuICAgICAgICAgIGksIG4sIGM7XG5cbiAgICAgIGlmICh0eXBlID09PSBcImNcIikge1xuICAgICAgICB2YWx1ZVN1ZmZpeCA9IGZvcm1hdFR5cGUodmFsdWUpICsgdmFsdWVTdWZmaXg7XG4gICAgICAgIHZhbHVlID0gXCJcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbHVlID0gK3ZhbHVlO1xuXG4gICAgICAgIC8vIERldGVybWluZSB0aGUgc2lnbi4gLTAgaXMgbm90IGxlc3MgdGhhbiAwLCBidXQgMSAvIC0wIGlzIVxuICAgICAgICB2YXIgdmFsdWVOZWdhdGl2ZSA9IHZhbHVlIDwgMCB8fCAxIC8gdmFsdWUgPCAwO1xuXG4gICAgICAgIC8vIFBlcmZvcm0gdGhlIGluaXRpYWwgZm9ybWF0dGluZy5cbiAgICAgICAgdmFsdWUgPSBpc05hTih2YWx1ZSkgPyBuYW4gOiBmb3JtYXRUeXBlKE1hdGguYWJzKHZhbHVlKSwgcHJlY2lzaW9uKTtcblxuICAgICAgICAvLyBUcmltIGluc2lnbmlmaWNhbnQgemVyb3MuXG4gICAgICAgIGlmICh0cmltKSB2YWx1ZSA9IGZvcm1hdFRyaW0odmFsdWUpO1xuXG4gICAgICAgIC8vIElmIGEgbmVnYXRpdmUgdmFsdWUgcm91bmRzIHRvIHplcm8gYWZ0ZXIgZm9ybWF0dGluZywgYW5kIG5vIGV4cGxpY2l0IHBvc2l0aXZlIHNpZ24gaXMgcmVxdWVzdGVkLCBoaWRlIHRoZSBzaWduLlxuICAgICAgICBpZiAodmFsdWVOZWdhdGl2ZSAmJiArdmFsdWUgPT09IDAgJiYgc2lnbiAhPT0gXCIrXCIpIHZhbHVlTmVnYXRpdmUgPSBmYWxzZTtcblxuICAgICAgICAvLyBDb21wdXRlIHRoZSBwcmVmaXggYW5kIHN1ZmZpeC5cbiAgICAgICAgdmFsdWVQcmVmaXggPSAodmFsdWVOZWdhdGl2ZSA/IChzaWduID09PSBcIihcIiA/IHNpZ24gOiBtaW51cykgOiBzaWduID09PSBcIi1cIiB8fCBzaWduID09PSBcIihcIiA/IFwiXCIgOiBzaWduKSArIHZhbHVlUHJlZml4O1xuICAgICAgICB2YWx1ZVN1ZmZpeCA9ICh0eXBlID09PSBcInNcIiA/IHByZWZpeGVzWzggKyBwcmVmaXhFeHBvbmVudCAvIDNdIDogXCJcIikgKyB2YWx1ZVN1ZmZpeCArICh2YWx1ZU5lZ2F0aXZlICYmIHNpZ24gPT09IFwiKFwiID8gXCIpXCIgOiBcIlwiKTtcblxuICAgICAgICAvLyBCcmVhayB0aGUgZm9ybWF0dGVkIHZhbHVlIGludG8gdGhlIGludGVnZXIgXHUyMDFDdmFsdWVcdTIwMUQgcGFydCB0aGF0IGNhbiBiZVxuICAgICAgICAvLyBncm91cGVkLCBhbmQgZnJhY3Rpb25hbCBvciBleHBvbmVudGlhbCBcdTIwMUNzdWZmaXhcdTIwMUQgcGFydCB0aGF0IGlzIG5vdC5cbiAgICAgICAgaWYgKG1heWJlU3VmZml4KSB7XG4gICAgICAgICAgaSA9IC0xLCBuID0gdmFsdWUubGVuZ3RoO1xuICAgICAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgICAgICBpZiAoYyA9IHZhbHVlLmNoYXJDb2RlQXQoaSksIDQ4ID4gYyB8fCBjID4gNTcpIHtcbiAgICAgICAgICAgICAgdmFsdWVTdWZmaXggPSAoYyA9PT0gNDYgPyBkZWNpbWFsICsgdmFsdWUuc2xpY2UoaSArIDEpIDogdmFsdWUuc2xpY2UoaSkpICsgdmFsdWVTdWZmaXg7XG4gICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUuc2xpY2UoMCwgaSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBJZiB0aGUgZmlsbCBjaGFyYWN0ZXIgaXMgbm90IFwiMFwiLCBncm91cGluZyBpcyBhcHBsaWVkIGJlZm9yZSBwYWRkaW5nLlxuICAgICAgaWYgKGNvbW1hICYmICF6ZXJvKSB2YWx1ZSA9IGdyb3VwKHZhbHVlLCBJbmZpbml0eSk7XG5cbiAgICAgIC8vIENvbXB1dGUgdGhlIHBhZGRpbmcuXG4gICAgICB2YXIgbGVuZ3RoID0gdmFsdWVQcmVmaXgubGVuZ3RoICsgdmFsdWUubGVuZ3RoICsgdmFsdWVTdWZmaXgubGVuZ3RoLFxuICAgICAgICAgIHBhZGRpbmcgPSBsZW5ndGggPCB3aWR0aCA/IG5ldyBBcnJheSh3aWR0aCAtIGxlbmd0aCArIDEpLmpvaW4oZmlsbCkgOiBcIlwiO1xuXG4gICAgICAvLyBJZiB0aGUgZmlsbCBjaGFyYWN0ZXIgaXMgXCIwXCIsIGdyb3VwaW5nIGlzIGFwcGxpZWQgYWZ0ZXIgcGFkZGluZy5cbiAgICAgIGlmIChjb21tYSAmJiB6ZXJvKSB2YWx1ZSA9IGdyb3VwKHBhZGRpbmcgKyB2YWx1ZSwgcGFkZGluZy5sZW5ndGggPyB3aWR0aCAtIHZhbHVlU3VmZml4Lmxlbmd0aCA6IEluZmluaXR5KSwgcGFkZGluZyA9IFwiXCI7XG5cbiAgICAgIC8vIFJlY29uc3RydWN0IHRoZSBmaW5hbCBvdXRwdXQgYmFzZWQgb24gdGhlIGRlc2lyZWQgYWxpZ25tZW50LlxuICAgICAgc3dpdGNoIChhbGlnbikge1xuICAgICAgICBjYXNlIFwiPFwiOiB2YWx1ZSA9IHZhbHVlUHJlZml4ICsgdmFsdWUgKyB2YWx1ZVN1ZmZpeCArIHBhZGRpbmc7IGJyZWFrO1xuICAgICAgICBjYXNlIFwiPVwiOiB2YWx1ZSA9IHZhbHVlUHJlZml4ICsgcGFkZGluZyArIHZhbHVlICsgdmFsdWVTdWZmaXg7IGJyZWFrO1xuICAgICAgICBjYXNlIFwiXlwiOiB2YWx1ZSA9IHBhZGRpbmcuc2xpY2UoMCwgbGVuZ3RoID0gcGFkZGluZy5sZW5ndGggPj4gMSkgKyB2YWx1ZVByZWZpeCArIHZhbHVlICsgdmFsdWVTdWZmaXggKyBwYWRkaW5nLnNsaWNlKGxlbmd0aCk7IGJyZWFrO1xuICAgICAgICBkZWZhdWx0OiB2YWx1ZSA9IHBhZGRpbmcgKyB2YWx1ZVByZWZpeCArIHZhbHVlICsgdmFsdWVTdWZmaXg7IGJyZWFrO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbnVtZXJhbHModmFsdWUpO1xuICAgIH1cblxuICAgIGZvcm1hdC50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHNwZWNpZmllciArIFwiXCI7XG4gICAgfTtcblxuICAgIHJldHVybiBmb3JtYXQ7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRQcmVmaXgoc3BlY2lmaWVyLCB2YWx1ZSkge1xuICAgIHZhciBmID0gbmV3Rm9ybWF0KChzcGVjaWZpZXIgPSBmb3JtYXRTcGVjaWZpZXIoc3BlY2lmaWVyKSwgc3BlY2lmaWVyLnR5cGUgPSBcImZcIiwgc3BlY2lmaWVyKSksXG4gICAgICAgIGUgPSBNYXRoLm1heCgtOCwgTWF0aC5taW4oOCwgTWF0aC5mbG9vcihleHBvbmVudCh2YWx1ZSkgLyAzKSkpICogMyxcbiAgICAgICAgayA9IE1hdGgucG93KDEwLCAtZSksXG4gICAgICAgIHByZWZpeCA9IHByZWZpeGVzWzggKyBlIC8gM107XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gZihrICogdmFsdWUpICsgcHJlZml4O1xuICAgIH07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGZvcm1hdDogbmV3Rm9ybWF0LFxuICAgIGZvcm1hdFByZWZpeDogZm9ybWF0UHJlZml4XG4gIH07XG59XG4iLCAiaW1wb3J0IGZvcm1hdExvY2FsZSBmcm9tIFwiLi9sb2NhbGUuanNcIjtcblxudmFyIGxvY2FsZTtcbmV4cG9ydCB2YXIgZm9ybWF0O1xuZXhwb3J0IHZhciBmb3JtYXRQcmVmaXg7XG5cbmRlZmF1bHRMb2NhbGUoe1xuICB0aG91c2FuZHM6IFwiLFwiLFxuICBncm91cGluZzogWzNdLFxuICBjdXJyZW5jeTogW1wiJFwiLCBcIlwiXVxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRlZmF1bHRMb2NhbGUoZGVmaW5pdGlvbikge1xuICBsb2NhbGUgPSBmb3JtYXRMb2NhbGUoZGVmaW5pdGlvbik7XG4gIGZvcm1hdCA9IGxvY2FsZS5mb3JtYXQ7XG4gIGZvcm1hdFByZWZpeCA9IGxvY2FsZS5mb3JtYXRQcmVmaXg7XG4gIHJldHVybiBsb2NhbGU7XG59XG4iLCAiaW1wb3J0IGV4cG9uZW50IGZyb20gXCIuL2V4cG9uZW50LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHN0ZXApIHtcbiAgcmV0dXJuIE1hdGgubWF4KDAsIC1leHBvbmVudChNYXRoLmFicyhzdGVwKSkpO1xufVxuIiwgImltcG9ydCBleHBvbmVudCBmcm9tIFwiLi9leHBvbmVudC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzdGVwLCB2YWx1ZSkge1xuICByZXR1cm4gTWF0aC5tYXgoMCwgTWF0aC5tYXgoLTgsIE1hdGgubWluKDgsIE1hdGguZmxvb3IoZXhwb25lbnQodmFsdWUpIC8gMykpKSAqIDMgLSBleHBvbmVudChNYXRoLmFicyhzdGVwKSkpO1xufVxuIiwgImltcG9ydCBleHBvbmVudCBmcm9tIFwiLi9leHBvbmVudC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzdGVwLCBtYXgpIHtcbiAgc3RlcCA9IE1hdGguYWJzKHN0ZXApLCBtYXggPSBNYXRoLmFicyhtYXgpIC0gc3RlcDtcbiAgcmV0dXJuIE1hdGgubWF4KDAsIGV4cG9uZW50KG1heCkgLSBleHBvbmVudChzdGVwKSkgKyAxO1xufVxuIiwgImV4cG9ydCBmdW5jdGlvbiBpbml0UmFuZ2UoZG9tYWluLCByYW5nZSkge1xuICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICBjYXNlIDA6IGJyZWFrO1xuICAgIGNhc2UgMTogdGhpcy5yYW5nZShkb21haW4pOyBicmVhaztcbiAgICBkZWZhdWx0OiB0aGlzLnJhbmdlKHJhbmdlKS5kb21haW4oZG9tYWluKTsgYnJlYWs7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0SW50ZXJwb2xhdG9yKGRvbWFpbiwgaW50ZXJwb2xhdG9yKSB7XG4gIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgIGNhc2UgMDogYnJlYWs7XG4gICAgY2FzZSAxOiB7XG4gICAgICBpZiAodHlwZW9mIGRvbWFpbiA9PT0gXCJmdW5jdGlvblwiKSB0aGlzLmludGVycG9sYXRvcihkb21haW4pO1xuICAgICAgZWxzZSB0aGlzLnJhbmdlKGRvbWFpbik7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgZGVmYXVsdDoge1xuICAgICAgdGhpcy5kb21haW4oZG9tYWluKTtcbiAgICAgIGlmICh0eXBlb2YgaW50ZXJwb2xhdG9yID09PSBcImZ1bmN0aW9uXCIpIHRoaXMuaW50ZXJwb2xhdG9yKGludGVycG9sYXRvcik7XG4gICAgICBlbHNlIHRoaXMucmFuZ2UoaW50ZXJwb2xhdG9yKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGhpcztcbn1cbiIsICJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb25zdGFudHMoeCkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHg7XG4gIH07XG59XG4iLCAiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbnVtYmVyKHgpIHtcbiAgcmV0dXJuICt4O1xufVxuIiwgImltcG9ydCB7YmlzZWN0fSBmcm9tIFwiZDMtYXJyYXlcIjtcbmltcG9ydCB7aW50ZXJwb2xhdGUgYXMgaW50ZXJwb2xhdGVWYWx1ZSwgaW50ZXJwb2xhdGVOdW1iZXIsIGludGVycG9sYXRlUm91bmR9IGZyb20gXCJkMy1pbnRlcnBvbGF0ZVwiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50LmpzXCI7XG5pbXBvcnQgbnVtYmVyIGZyb20gXCIuL251bWJlci5qc1wiO1xuXG52YXIgdW5pdCA9IFswLCAxXTtcblxuZXhwb3J0IGZ1bmN0aW9uIGlkZW50aXR5KHgpIHtcbiAgcmV0dXJuIHg7XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZShhLCBiKSB7XG4gIHJldHVybiAoYiAtPSAoYSA9ICthKSlcbiAgICAgID8gZnVuY3Rpb24oeCkgeyByZXR1cm4gKHggLSBhKSAvIGI7IH1cbiAgICAgIDogY29uc3RhbnQoaXNOYU4oYikgPyBOYU4gOiAwLjUpO1xufVxuXG5mdW5jdGlvbiBjbGFtcGVyKGEsIGIpIHtcbiAgdmFyIHQ7XG4gIGlmIChhID4gYikgdCA9IGEsIGEgPSBiLCBiID0gdDtcbiAgcmV0dXJuIGZ1bmN0aW9uKHgpIHsgcmV0dXJuIE1hdGgubWF4KGEsIE1hdGgubWluKGIsIHgpKTsgfTtcbn1cblxuLy8gbm9ybWFsaXplKGEsIGIpKHgpIHRha2VzIGEgZG9tYWluIHZhbHVlIHggaW4gW2EsYl0gYW5kIHJldHVybnMgdGhlIGNvcnJlc3BvbmRpbmcgcGFyYW1ldGVyIHQgaW4gWzAsMV0uXG4vLyBpbnRlcnBvbGF0ZShhLCBiKSh0KSB0YWtlcyBhIHBhcmFtZXRlciB0IGluIFswLDFdIGFuZCByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIHJhbmdlIHZhbHVlIHggaW4gW2EsYl0uXG5mdW5jdGlvbiBiaW1hcChkb21haW4sIHJhbmdlLCBpbnRlcnBvbGF0ZSkge1xuICB2YXIgZDAgPSBkb21haW5bMF0sIGQxID0gZG9tYWluWzFdLCByMCA9IHJhbmdlWzBdLCByMSA9IHJhbmdlWzFdO1xuICBpZiAoZDEgPCBkMCkgZDAgPSBub3JtYWxpemUoZDEsIGQwKSwgcjAgPSBpbnRlcnBvbGF0ZShyMSwgcjApO1xuICBlbHNlIGQwID0gbm9ybWFsaXplKGQwLCBkMSksIHIwID0gaW50ZXJwb2xhdGUocjAsIHIxKTtcbiAgcmV0dXJuIGZ1bmN0aW9uKHgpIHsgcmV0dXJuIHIwKGQwKHgpKTsgfTtcbn1cblxuZnVuY3Rpb24gcG9seW1hcChkb21haW4sIHJhbmdlLCBpbnRlcnBvbGF0ZSkge1xuICB2YXIgaiA9IE1hdGgubWluKGRvbWFpbi5sZW5ndGgsIHJhbmdlLmxlbmd0aCkgLSAxLFxuICAgICAgZCA9IG5ldyBBcnJheShqKSxcbiAgICAgIHIgPSBuZXcgQXJyYXkoaiksXG4gICAgICBpID0gLTE7XG5cbiAgLy8gUmV2ZXJzZSBkZXNjZW5kaW5nIGRvbWFpbnMuXG4gIGlmIChkb21haW5bal0gPCBkb21haW5bMF0pIHtcbiAgICBkb21haW4gPSBkb21haW4uc2xpY2UoKS5yZXZlcnNlKCk7XG4gICAgcmFuZ2UgPSByYW5nZS5zbGljZSgpLnJldmVyc2UoKTtcbiAgfVxuXG4gIHdoaWxlICgrK2kgPCBqKSB7XG4gICAgZFtpXSA9IG5vcm1hbGl6ZShkb21haW5baV0sIGRvbWFpbltpICsgMV0pO1xuICAgIHJbaV0gPSBpbnRlcnBvbGF0ZShyYW5nZVtpXSwgcmFuZ2VbaSArIDFdKTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbih4KSB7XG4gICAgdmFyIGkgPSBiaXNlY3QoZG9tYWluLCB4LCAxLCBqKSAtIDE7XG4gICAgcmV0dXJuIHJbaV0oZFtpXSh4KSk7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb3B5KHNvdXJjZSwgdGFyZ2V0KSB7XG4gIHJldHVybiB0YXJnZXRcbiAgICAgIC5kb21haW4oc291cmNlLmRvbWFpbigpKVxuICAgICAgLnJhbmdlKHNvdXJjZS5yYW5nZSgpKVxuICAgICAgLmludGVycG9sYXRlKHNvdXJjZS5pbnRlcnBvbGF0ZSgpKVxuICAgICAgLmNsYW1wKHNvdXJjZS5jbGFtcCgpKVxuICAgICAgLnVua25vd24oc291cmNlLnVua25vd24oKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm1lcigpIHtcbiAgdmFyIGRvbWFpbiA9IHVuaXQsXG4gICAgICByYW5nZSA9IHVuaXQsXG4gICAgICBpbnRlcnBvbGF0ZSA9IGludGVycG9sYXRlVmFsdWUsXG4gICAgICB0cmFuc2Zvcm0sXG4gICAgICB1bnRyYW5zZm9ybSxcbiAgICAgIHVua25vd24sXG4gICAgICBjbGFtcCA9IGlkZW50aXR5LFxuICAgICAgcGllY2V3aXNlLFxuICAgICAgb3V0cHV0LFxuICAgICAgaW5wdXQ7XG5cbiAgZnVuY3Rpb24gcmVzY2FsZSgpIHtcbiAgICB2YXIgbiA9IE1hdGgubWluKGRvbWFpbi5sZW5ndGgsIHJhbmdlLmxlbmd0aCk7XG4gICAgaWYgKGNsYW1wICE9PSBpZGVudGl0eSkgY2xhbXAgPSBjbGFtcGVyKGRvbWFpblswXSwgZG9tYWluW24gLSAxXSk7XG4gICAgcGllY2V3aXNlID0gbiA+IDIgPyBwb2x5bWFwIDogYmltYXA7XG4gICAgb3V0cHV0ID0gaW5wdXQgPSBudWxsO1xuICAgIHJldHVybiBzY2FsZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNjYWxlKHgpIHtcbiAgICByZXR1cm4geCA9PSBudWxsIHx8IGlzTmFOKHggPSAreCkgPyB1bmtub3duIDogKG91dHB1dCB8fCAob3V0cHV0ID0gcGllY2V3aXNlKGRvbWFpbi5tYXAodHJhbnNmb3JtKSwgcmFuZ2UsIGludGVycG9sYXRlKSkpKHRyYW5zZm9ybShjbGFtcCh4KSkpO1xuICB9XG5cbiAgc2NhbGUuaW52ZXJ0ID0gZnVuY3Rpb24oeSkge1xuICAgIHJldHVybiBjbGFtcCh1bnRyYW5zZm9ybSgoaW5wdXQgfHwgKGlucHV0ID0gcGllY2V3aXNlKHJhbmdlLCBkb21haW4ubWFwKHRyYW5zZm9ybSksIGludGVycG9sYXRlTnVtYmVyKSkpKHkpKSk7XG4gIH07XG5cbiAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGRvbWFpbiA9IEFycmF5LmZyb20oXywgbnVtYmVyKSwgcmVzY2FsZSgpKSA6IGRvbWFpbi5zbGljZSgpO1xuICB9O1xuXG4gIHNjYWxlLnJhbmdlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHJhbmdlID0gQXJyYXkuZnJvbShfKSwgcmVzY2FsZSgpKSA6IHJhbmdlLnNsaWNlKCk7XG4gIH07XG5cbiAgc2NhbGUucmFuZ2VSb3VuZCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gcmFuZ2UgPSBBcnJheS5mcm9tKF8pLCBpbnRlcnBvbGF0ZSA9IGludGVycG9sYXRlUm91bmQsIHJlc2NhbGUoKTtcbiAgfTtcblxuICBzY2FsZS5jbGFtcCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjbGFtcCA9IF8gPyB0cnVlIDogaWRlbnRpdHksIHJlc2NhbGUoKSkgOiBjbGFtcCAhPT0gaWRlbnRpdHk7XG4gIH07XG5cbiAgc2NhbGUuaW50ZXJwb2xhdGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoaW50ZXJwb2xhdGUgPSBfLCByZXNjYWxlKCkpIDogaW50ZXJwb2xhdGU7XG4gIH07XG5cbiAgc2NhbGUudW5rbm93biA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh1bmtub3duID0gXywgc2NhbGUpIDogdW5rbm93bjtcbiAgfTtcblxuICByZXR1cm4gZnVuY3Rpb24odCwgdSkge1xuICAgIHRyYW5zZm9ybSA9IHQsIHVudHJhbnNmb3JtID0gdTtcbiAgICByZXR1cm4gcmVzY2FsZSgpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb250aW51b3VzKCkge1xuICByZXR1cm4gdHJhbnNmb3JtZXIoKShpZGVudGl0eSwgaWRlbnRpdHkpO1xufVxuIiwgImltcG9ydCB7dGlja1N0ZXB9IGZyb20gXCJkMy1hcnJheVwiO1xuaW1wb3J0IHtmb3JtYXQsIGZvcm1hdFByZWZpeCwgZm9ybWF0U3BlY2lmaWVyLCBwcmVjaXNpb25GaXhlZCwgcHJlY2lzaW9uUHJlZml4LCBwcmVjaXNpb25Sb3VuZH0gZnJvbSBcImQzLWZvcm1hdFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0aWNrRm9ybWF0KHN0YXJ0LCBzdG9wLCBjb3VudCwgc3BlY2lmaWVyKSB7XG4gIHZhciBzdGVwID0gdGlja1N0ZXAoc3RhcnQsIHN0b3AsIGNvdW50KSxcbiAgICAgIHByZWNpc2lvbjtcbiAgc3BlY2lmaWVyID0gZm9ybWF0U3BlY2lmaWVyKHNwZWNpZmllciA9PSBudWxsID8gXCIsZlwiIDogc3BlY2lmaWVyKTtcbiAgc3dpdGNoIChzcGVjaWZpZXIudHlwZSkge1xuICAgIGNhc2UgXCJzXCI6IHtcbiAgICAgIHZhciB2YWx1ZSA9IE1hdGgubWF4KE1hdGguYWJzKHN0YXJ0KSwgTWF0aC5hYnMoc3RvcCkpO1xuICAgICAgaWYgKHNwZWNpZmllci5wcmVjaXNpb24gPT0gbnVsbCAmJiAhaXNOYU4ocHJlY2lzaW9uID0gcHJlY2lzaW9uUHJlZml4KHN0ZXAsIHZhbHVlKSkpIHNwZWNpZmllci5wcmVjaXNpb24gPSBwcmVjaXNpb247XG4gICAgICByZXR1cm4gZm9ybWF0UHJlZml4KHNwZWNpZmllciwgdmFsdWUpO1xuICAgIH1cbiAgICBjYXNlIFwiXCI6XG4gICAgY2FzZSBcImVcIjpcbiAgICBjYXNlIFwiZ1wiOlxuICAgIGNhc2UgXCJwXCI6XG4gICAgY2FzZSBcInJcIjoge1xuICAgICAgaWYgKHNwZWNpZmllci5wcmVjaXNpb24gPT0gbnVsbCAmJiAhaXNOYU4ocHJlY2lzaW9uID0gcHJlY2lzaW9uUm91bmQoc3RlcCwgTWF0aC5tYXgoTWF0aC5hYnMoc3RhcnQpLCBNYXRoLmFicyhzdG9wKSkpKSkgc3BlY2lmaWVyLnByZWNpc2lvbiA9IHByZWNpc2lvbiAtIChzcGVjaWZpZXIudHlwZSA9PT0gXCJlXCIpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNhc2UgXCJmXCI6XG4gICAgY2FzZSBcIiVcIjoge1xuICAgICAgaWYgKHNwZWNpZmllci5wcmVjaXNpb24gPT0gbnVsbCAmJiAhaXNOYU4ocHJlY2lzaW9uID0gcHJlY2lzaW9uRml4ZWQoc3RlcCkpKSBzcGVjaWZpZXIucHJlY2lzaW9uID0gcHJlY2lzaW9uIC0gKHNwZWNpZmllci50eXBlID09PSBcIiVcIikgKiAyO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBmb3JtYXQoc3BlY2lmaWVyKTtcbn1cbiIsICJpbXBvcnQge3RpY2tzLCB0aWNrSW5jcmVtZW50fSBmcm9tIFwiZDMtYXJyYXlcIjtcbmltcG9ydCBjb250aW51b3VzLCB7Y29weX0gZnJvbSBcIi4vY29udGludW91cy5qc1wiO1xuaW1wb3J0IHtpbml0UmFuZ2V9IGZyb20gXCIuL2luaXQuanNcIjtcbmltcG9ydCB0aWNrRm9ybWF0IGZyb20gXCIuL3RpY2tGb3JtYXQuanNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGxpbmVhcmlzaChzY2FsZSkge1xuICB2YXIgZG9tYWluID0gc2NhbGUuZG9tYWluO1xuXG4gIHNjYWxlLnRpY2tzID0gZnVuY3Rpb24oY291bnQpIHtcbiAgICB2YXIgZCA9IGRvbWFpbigpO1xuICAgIHJldHVybiB0aWNrcyhkWzBdLCBkW2QubGVuZ3RoIC0gMV0sIGNvdW50ID09IG51bGwgPyAxMCA6IGNvdW50KTtcbiAgfTtcblxuICBzY2FsZS50aWNrRm9ybWF0ID0gZnVuY3Rpb24oY291bnQsIHNwZWNpZmllcikge1xuICAgIHZhciBkID0gZG9tYWluKCk7XG4gICAgcmV0dXJuIHRpY2tGb3JtYXQoZFswXSwgZFtkLmxlbmd0aCAtIDFdLCBjb3VudCA9PSBudWxsID8gMTAgOiBjb3VudCwgc3BlY2lmaWVyKTtcbiAgfTtcblxuICBzY2FsZS5uaWNlID0gZnVuY3Rpb24oY291bnQpIHtcbiAgICBpZiAoY291bnQgPT0gbnVsbCkgY291bnQgPSAxMDtcblxuICAgIHZhciBkID0gZG9tYWluKCk7XG4gICAgdmFyIGkwID0gMDtcbiAgICB2YXIgaTEgPSBkLmxlbmd0aCAtIDE7XG4gICAgdmFyIHN0YXJ0ID0gZFtpMF07XG4gICAgdmFyIHN0b3AgPSBkW2kxXTtcbiAgICB2YXIgcHJlc3RlcDtcbiAgICB2YXIgc3RlcDtcbiAgICB2YXIgbWF4SXRlciA9IDEwO1xuXG4gICAgaWYgKHN0b3AgPCBzdGFydCkge1xuICAgICAgc3RlcCA9IHN0YXJ0LCBzdGFydCA9IHN0b3AsIHN0b3AgPSBzdGVwO1xuICAgICAgc3RlcCA9IGkwLCBpMCA9IGkxLCBpMSA9IHN0ZXA7XG4gICAgfVxuICAgIFxuICAgIHdoaWxlIChtYXhJdGVyLS0gPiAwKSB7XG4gICAgICBzdGVwID0gdGlja0luY3JlbWVudChzdGFydCwgc3RvcCwgY291bnQpO1xuICAgICAgaWYgKHN0ZXAgPT09IHByZXN0ZXApIHtcbiAgICAgICAgZFtpMF0gPSBzdGFydFxuICAgICAgICBkW2kxXSA9IHN0b3BcbiAgICAgICAgcmV0dXJuIGRvbWFpbihkKTtcbiAgICAgIH0gZWxzZSBpZiAoc3RlcCA+IDApIHtcbiAgICAgICAgc3RhcnQgPSBNYXRoLmZsb29yKHN0YXJ0IC8gc3RlcCkgKiBzdGVwO1xuICAgICAgICBzdG9wID0gTWF0aC5jZWlsKHN0b3AgLyBzdGVwKSAqIHN0ZXA7XG4gICAgICB9IGVsc2UgaWYgKHN0ZXAgPCAwKSB7XG4gICAgICAgIHN0YXJ0ID0gTWF0aC5jZWlsKHN0YXJ0ICogc3RlcCkgLyBzdGVwO1xuICAgICAgICBzdG9wID0gTWF0aC5mbG9vcihzdG9wICogc3RlcCkgLyBzdGVwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBwcmVzdGVwID0gc3RlcDtcbiAgICB9XG5cbiAgICByZXR1cm4gc2NhbGU7XG4gIH07XG5cbiAgcmV0dXJuIHNjYWxlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBsaW5lYXIoKSB7XG4gIHZhciBzY2FsZSA9IGNvbnRpbnVvdXMoKTtcblxuICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGNvcHkoc2NhbGUsIGxpbmVhcigpKTtcbiAgfTtcblxuICBpbml0UmFuZ2UuYXBwbHkoc2NhbGUsIGFyZ3VtZW50cyk7XG5cbiAgcmV0dXJuIGxpbmVhcmlzaChzY2FsZSk7XG59XG4iLCAiZXhwb3J0IGRlZmF1bHQgeCA9PiAoKSA9PiB4O1xuIiwgImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFpvb21FdmVudCh0eXBlLCB7XG4gIHNvdXJjZUV2ZW50LFxuICB0YXJnZXQsXG4gIHRyYW5zZm9ybSxcbiAgZGlzcGF0Y2hcbn0pIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGhpcywge1xuICAgIHR5cGU6IHt2YWx1ZTogdHlwZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlfSxcbiAgICBzb3VyY2VFdmVudDoge3ZhbHVlOiBzb3VyY2VFdmVudCwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlfSxcbiAgICB0YXJnZXQ6IHt2YWx1ZTogdGFyZ2V0LCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWV9LFxuICAgIHRyYW5zZm9ybToge3ZhbHVlOiB0cmFuc2Zvcm0sIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZX0sXG4gICAgXzoge3ZhbHVlOiBkaXNwYXRjaH1cbiAgfSk7XG59XG4iLCAiZXhwb3J0IGZ1bmN0aW9uIFRyYW5zZm9ybShrLCB4LCB5KSB7XG4gIHRoaXMuayA9IGs7XG4gIHRoaXMueCA9IHg7XG4gIHRoaXMueSA9IHk7XG59XG5cblRyYW5zZm9ybS5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBUcmFuc2Zvcm0sXG4gIHNjYWxlOiBmdW5jdGlvbihrKSB7XG4gICAgcmV0dXJuIGsgPT09IDEgPyB0aGlzIDogbmV3IFRyYW5zZm9ybSh0aGlzLmsgKiBrLCB0aGlzLngsIHRoaXMueSk7XG4gIH0sXG4gIHRyYW5zbGF0ZTogZnVuY3Rpb24oeCwgeSkge1xuICAgIHJldHVybiB4ID09PSAwICYgeSA9PT0gMCA/IHRoaXMgOiBuZXcgVHJhbnNmb3JtKHRoaXMuaywgdGhpcy54ICsgdGhpcy5rICogeCwgdGhpcy55ICsgdGhpcy5rICogeSk7XG4gIH0sXG4gIGFwcGx5OiBmdW5jdGlvbihwb2ludCkge1xuICAgIHJldHVybiBbcG9pbnRbMF0gKiB0aGlzLmsgKyB0aGlzLngsIHBvaW50WzFdICogdGhpcy5rICsgdGhpcy55XTtcbiAgfSxcbiAgYXBwbHlYOiBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIHggKiB0aGlzLmsgKyB0aGlzLng7XG4gIH0sXG4gIGFwcGx5WTogZnVuY3Rpb24oeSkge1xuICAgIHJldHVybiB5ICogdGhpcy5rICsgdGhpcy55O1xuICB9LFxuICBpbnZlcnQ6IGZ1bmN0aW9uKGxvY2F0aW9uKSB7XG4gICAgcmV0dXJuIFsobG9jYXRpb25bMF0gLSB0aGlzLngpIC8gdGhpcy5rLCAobG9jYXRpb25bMV0gLSB0aGlzLnkpIC8gdGhpcy5rXTtcbiAgfSxcbiAgaW52ZXJ0WDogZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiAoeCAtIHRoaXMueCkgLyB0aGlzLms7XG4gIH0sXG4gIGludmVydFk6IGZ1bmN0aW9uKHkpIHtcbiAgICByZXR1cm4gKHkgLSB0aGlzLnkpIC8gdGhpcy5rO1xuICB9LFxuICByZXNjYWxlWDogZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiB4LmNvcHkoKS5kb21haW4oeC5yYW5nZSgpLm1hcCh0aGlzLmludmVydFgsIHRoaXMpLm1hcCh4LmludmVydCwgeCkpO1xuICB9LFxuICByZXNjYWxlWTogZnVuY3Rpb24oeSkge1xuICAgIHJldHVybiB5LmNvcHkoKS5kb21haW4oeS5yYW5nZSgpLm1hcCh0aGlzLmludmVydFksIHRoaXMpLm1hcCh5LmludmVydCwgeSkpO1xuICB9LFxuICB0b1N0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFwidHJhbnNsYXRlKFwiICsgdGhpcy54ICsgXCIsXCIgKyB0aGlzLnkgKyBcIikgc2NhbGUoXCIgKyB0aGlzLmsgKyBcIilcIjtcbiAgfVxufTtcblxuZXhwb3J0IHZhciBpZGVudGl0eSA9IG5ldyBUcmFuc2Zvcm0oMSwgMCwgMCk7XG5cbnRyYW5zZm9ybS5wcm90b3R5cGUgPSBUcmFuc2Zvcm0ucHJvdG90eXBlO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0cmFuc2Zvcm0obm9kZSkge1xuICB3aGlsZSAoIW5vZGUuX196b29tKSBpZiAoIShub2RlID0gbm9kZS5wYXJlbnROb2RlKSkgcmV0dXJuIGlkZW50aXR5O1xuICByZXR1cm4gbm9kZS5fX3pvb207XG59XG4iLCAiZXhwb3J0IGZ1bmN0aW9uIG5vcHJvcGFnYXRpb24oZXZlbnQpIHtcbiAgZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGV2ZW50KSB7XG4gIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xufVxuIiwgImltcG9ydCB7ZGlzcGF0Y2h9IGZyb20gXCJkMy1kaXNwYXRjaFwiO1xuaW1wb3J0IHtkcmFnRGlzYWJsZSwgZHJhZ0VuYWJsZX0gZnJvbSBcImQzLWRyYWdcIjtcbmltcG9ydCB7aW50ZXJwb2xhdGVab29tfSBmcm9tIFwiZDMtaW50ZXJwb2xhdGVcIjtcbmltcG9ydCB7c2VsZWN0LCBwb2ludGVyfSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge2ludGVycnVwdH0gZnJvbSBcImQzLXRyYW5zaXRpb25cIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudC5qc1wiO1xuaW1wb3J0IFpvb21FdmVudCBmcm9tIFwiLi9ldmVudC5qc1wiO1xuaW1wb3J0IHtUcmFuc2Zvcm0sIGlkZW50aXR5fSBmcm9tIFwiLi90cmFuc2Zvcm0uanNcIjtcbmltcG9ydCBub2V2ZW50LCB7bm9wcm9wYWdhdGlvbn0gZnJvbSBcIi4vbm9ldmVudC5qc1wiO1xuXG4vLyBJZ25vcmUgcmlnaHQtY2xpY2ssIHNpbmNlIHRoYXQgc2hvdWxkIG9wZW4gdGhlIGNvbnRleHQgbWVudS5cbi8vIGV4Y2VwdCBmb3IgcGluY2gtdG8tem9vbSwgd2hpY2ggaXMgc2VudCBhcyBhIHdoZWVsK2N0cmxLZXkgZXZlbnRcbmZ1bmN0aW9uIGRlZmF1bHRGaWx0ZXIoZXZlbnQpIHtcbiAgcmV0dXJuICghZXZlbnQuY3RybEtleSB8fCBldmVudC50eXBlID09PSAnd2hlZWwnKSAmJiAhZXZlbnQuYnV0dG9uO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0RXh0ZW50KCkge1xuICB2YXIgZSA9IHRoaXM7XG4gIGlmIChlIGluc3RhbmNlb2YgU1ZHRWxlbWVudCkge1xuICAgIGUgPSBlLm93bmVyU1ZHRWxlbWVudCB8fCBlO1xuICAgIGlmIChlLmhhc0F0dHJpYnV0ZShcInZpZXdCb3hcIikpIHtcbiAgICAgIGUgPSBlLnZpZXdCb3guYmFzZVZhbDtcbiAgICAgIHJldHVybiBbW2UueCwgZS55XSwgW2UueCArIGUud2lkdGgsIGUueSArIGUuaGVpZ2h0XV07XG4gICAgfVxuICAgIHJldHVybiBbWzAsIDBdLCBbZS53aWR0aC5iYXNlVmFsLnZhbHVlLCBlLmhlaWdodC5iYXNlVmFsLnZhbHVlXV07XG4gIH1cbiAgcmV0dXJuIFtbMCwgMF0sIFtlLmNsaWVudFdpZHRoLCBlLmNsaWVudEhlaWdodF1dO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0VHJhbnNmb3JtKCkge1xuICByZXR1cm4gdGhpcy5fX3pvb20gfHwgaWRlbnRpdHk7XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRXaGVlbERlbHRhKGV2ZW50KSB7XG4gIHJldHVybiAtZXZlbnQuZGVsdGFZICogKGV2ZW50LmRlbHRhTW9kZSA9PT0gMSA/IDAuMDUgOiBldmVudC5kZWx0YU1vZGUgPyAxIDogMC4wMDIpICogKGV2ZW50LmN0cmxLZXkgPyAxMCA6IDEpO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0VG91Y2hhYmxlKCkge1xuICByZXR1cm4gbmF2aWdhdG9yLm1heFRvdWNoUG9pbnRzIHx8IChcIm9udG91Y2hzdGFydFwiIGluIHRoaXMpO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0Q29uc3RyYWluKHRyYW5zZm9ybSwgZXh0ZW50LCB0cmFuc2xhdGVFeHRlbnQpIHtcbiAgdmFyIGR4MCA9IHRyYW5zZm9ybS5pbnZlcnRYKGV4dGVudFswXVswXSkgLSB0cmFuc2xhdGVFeHRlbnRbMF1bMF0sXG4gICAgICBkeDEgPSB0cmFuc2Zvcm0uaW52ZXJ0WChleHRlbnRbMV1bMF0pIC0gdHJhbnNsYXRlRXh0ZW50WzFdWzBdLFxuICAgICAgZHkwID0gdHJhbnNmb3JtLmludmVydFkoZXh0ZW50WzBdWzFdKSAtIHRyYW5zbGF0ZUV4dGVudFswXVsxXSxcbiAgICAgIGR5MSA9IHRyYW5zZm9ybS5pbnZlcnRZKGV4dGVudFsxXVsxXSkgLSB0cmFuc2xhdGVFeHRlbnRbMV1bMV07XG4gIHJldHVybiB0cmFuc2Zvcm0udHJhbnNsYXRlKFxuICAgIGR4MSA+IGR4MCA/IChkeDAgKyBkeDEpIC8gMiA6IE1hdGgubWluKDAsIGR4MCkgfHwgTWF0aC5tYXgoMCwgZHgxKSxcbiAgICBkeTEgPiBkeTAgPyAoZHkwICsgZHkxKSAvIDIgOiBNYXRoLm1pbigwLCBkeTApIHx8IE1hdGgubWF4KDAsIGR5MSlcbiAgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBmaWx0ZXIgPSBkZWZhdWx0RmlsdGVyLFxuICAgICAgZXh0ZW50ID0gZGVmYXVsdEV4dGVudCxcbiAgICAgIGNvbnN0cmFpbiA9IGRlZmF1bHRDb25zdHJhaW4sXG4gICAgICB3aGVlbERlbHRhID0gZGVmYXVsdFdoZWVsRGVsdGEsXG4gICAgICB0b3VjaGFibGUgPSBkZWZhdWx0VG91Y2hhYmxlLFxuICAgICAgc2NhbGVFeHRlbnQgPSBbMCwgSW5maW5pdHldLFxuICAgICAgdHJhbnNsYXRlRXh0ZW50ID0gW1stSW5maW5pdHksIC1JbmZpbml0eV0sIFtJbmZpbml0eSwgSW5maW5pdHldXSxcbiAgICAgIGR1cmF0aW9uID0gMjUwLFxuICAgICAgaW50ZXJwb2xhdGUgPSBpbnRlcnBvbGF0ZVpvb20sXG4gICAgICBsaXN0ZW5lcnMgPSBkaXNwYXRjaChcInN0YXJ0XCIsIFwiem9vbVwiLCBcImVuZFwiKSxcbiAgICAgIHRvdWNoc3RhcnRpbmcsXG4gICAgICB0b3VjaGZpcnN0LFxuICAgICAgdG91Y2hlbmRpbmcsXG4gICAgICB0b3VjaERlbGF5ID0gNTAwLFxuICAgICAgd2hlZWxEZWxheSA9IDE1MCxcbiAgICAgIGNsaWNrRGlzdGFuY2UyID0gMCxcbiAgICAgIHRhcERpc3RhbmNlID0gMTA7XG5cbiAgZnVuY3Rpb24gem9vbShzZWxlY3Rpb24pIHtcbiAgICBzZWxlY3Rpb25cbiAgICAgICAgLnByb3BlcnR5KFwiX196b29tXCIsIGRlZmF1bHRUcmFuc2Zvcm0pXG4gICAgICAgIC5vbihcIndoZWVsLnpvb21cIiwgd2hlZWxlZCwge3Bhc3NpdmU6IGZhbHNlfSlcbiAgICAgICAgLm9uKFwibW91c2Vkb3duLnpvb21cIiwgbW91c2Vkb3duZWQpXG4gICAgICAgIC5vbihcImRibGNsaWNrLnpvb21cIiwgZGJsY2xpY2tlZClcbiAgICAgIC5maWx0ZXIodG91Y2hhYmxlKVxuICAgICAgICAub24oXCJ0b3VjaHN0YXJ0Lnpvb21cIiwgdG91Y2hzdGFydGVkKVxuICAgICAgICAub24oXCJ0b3VjaG1vdmUuem9vbVwiLCB0b3VjaG1vdmVkKVxuICAgICAgICAub24oXCJ0b3VjaGVuZC56b29tIHRvdWNoY2FuY2VsLnpvb21cIiwgdG91Y2hlbmRlZClcbiAgICAgICAgLnN0eWxlKFwiLXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yXCIsIFwicmdiYSgwLDAsMCwwKVwiKTtcbiAgfVxuXG4gIHpvb20udHJhbnNmb3JtID0gZnVuY3Rpb24oY29sbGVjdGlvbiwgdHJhbnNmb3JtLCBwb2ludCwgZXZlbnQpIHtcbiAgICB2YXIgc2VsZWN0aW9uID0gY29sbGVjdGlvbi5zZWxlY3Rpb24gPyBjb2xsZWN0aW9uLnNlbGVjdGlvbigpIDogY29sbGVjdGlvbjtcbiAgICBzZWxlY3Rpb24ucHJvcGVydHkoXCJfX3pvb21cIiwgZGVmYXVsdFRyYW5zZm9ybSk7XG4gICAgaWYgKGNvbGxlY3Rpb24gIT09IHNlbGVjdGlvbikge1xuICAgICAgc2NoZWR1bGUoY29sbGVjdGlvbiwgdHJhbnNmb3JtLCBwb2ludCwgZXZlbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZWxlY3Rpb24uaW50ZXJydXB0KCkuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgZ2VzdHVyZSh0aGlzLCBhcmd1bWVudHMpXG4gICAgICAgICAgLmV2ZW50KGV2ZW50KVxuICAgICAgICAgIC5zdGFydCgpXG4gICAgICAgICAgLnpvb20obnVsbCwgdHlwZW9mIHRyYW5zZm9ybSA9PT0gXCJmdW5jdGlvblwiID8gdHJhbnNmb3JtLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgOiB0cmFuc2Zvcm0pXG4gICAgICAgICAgLmVuZCgpO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIHpvb20uc2NhbGVCeSA9IGZ1bmN0aW9uKHNlbGVjdGlvbiwgaywgcCwgZXZlbnQpIHtcbiAgICB6b29tLnNjYWxlVG8oc2VsZWN0aW9uLCBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBrMCA9IHRoaXMuX196b29tLmssXG4gICAgICAgICAgazEgPSB0eXBlb2YgayA9PT0gXCJmdW5jdGlvblwiID8gay5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogaztcbiAgICAgIHJldHVybiBrMCAqIGsxO1xuICAgIH0sIHAsIGV2ZW50KTtcbiAgfTtcblxuICB6b29tLnNjYWxlVG8gPSBmdW5jdGlvbihzZWxlY3Rpb24sIGssIHAsIGV2ZW50KSB7XG4gICAgem9vbS50cmFuc2Zvcm0oc2VsZWN0aW9uLCBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBlID0gZXh0ZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksXG4gICAgICAgICAgdDAgPSB0aGlzLl9fem9vbSxcbiAgICAgICAgICBwMCA9IHAgPT0gbnVsbCA/IGNlbnRyb2lkKGUpIDogdHlwZW9mIHAgPT09IFwiZnVuY3Rpb25cIiA/IHAuYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IHAsXG4gICAgICAgICAgcDEgPSB0MC5pbnZlcnQocDApLFxuICAgICAgICAgIGsxID0gdHlwZW9mIGsgPT09IFwiZnVuY3Rpb25cIiA/IGsuYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IGs7XG4gICAgICByZXR1cm4gY29uc3RyYWluKHRyYW5zbGF0ZShzY2FsZSh0MCwgazEpLCBwMCwgcDEpLCBlLCB0cmFuc2xhdGVFeHRlbnQpO1xuICAgIH0sIHAsIGV2ZW50KTtcbiAgfTtcblxuICB6b29tLnRyYW5zbGF0ZUJ5ID0gZnVuY3Rpb24oc2VsZWN0aW9uLCB4LCB5LCBldmVudCkge1xuICAgIHpvb20udHJhbnNmb3JtKHNlbGVjdGlvbiwgZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gY29uc3RyYWluKHRoaXMuX196b29tLnRyYW5zbGF0ZShcbiAgICAgICAgdHlwZW9mIHggPT09IFwiZnVuY3Rpb25cIiA/IHguYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IHgsXG4gICAgICAgIHR5cGVvZiB5ID09PSBcImZ1bmN0aW9uXCIgPyB5LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgOiB5XG4gICAgICApLCBleHRlbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSwgdHJhbnNsYXRlRXh0ZW50KTtcbiAgICB9LCBudWxsLCBldmVudCk7XG4gIH07XG5cbiAgem9vbS50cmFuc2xhdGVUbyA9IGZ1bmN0aW9uKHNlbGVjdGlvbiwgeCwgeSwgcCwgZXZlbnQpIHtcbiAgICB6b29tLnRyYW5zZm9ybShzZWxlY3Rpb24sIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGUgPSBleHRlbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSxcbiAgICAgICAgICB0ID0gdGhpcy5fX3pvb20sXG4gICAgICAgICAgcDAgPSBwID09IG51bGwgPyBjZW50cm9pZChlKSA6IHR5cGVvZiBwID09PSBcImZ1bmN0aW9uXCIgPyBwLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgOiBwO1xuICAgICAgcmV0dXJuIGNvbnN0cmFpbihpZGVudGl0eS50cmFuc2xhdGUocDBbMF0sIHAwWzFdKS5zY2FsZSh0LmspLnRyYW5zbGF0ZShcbiAgICAgICAgdHlwZW9mIHggPT09IFwiZnVuY3Rpb25cIiA/IC14LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgOiAteCxcbiAgICAgICAgdHlwZW9mIHkgPT09IFwiZnVuY3Rpb25cIiA/IC15LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgOiAteVxuICAgICAgKSwgZSwgdHJhbnNsYXRlRXh0ZW50KTtcbiAgICB9LCBwLCBldmVudCk7XG4gIH07XG5cbiAgZnVuY3Rpb24gc2NhbGUodHJhbnNmb3JtLCBrKSB7XG4gICAgayA9IE1hdGgubWF4KHNjYWxlRXh0ZW50WzBdLCBNYXRoLm1pbihzY2FsZUV4dGVudFsxXSwgaykpO1xuICAgIHJldHVybiBrID09PSB0cmFuc2Zvcm0uayA/IHRyYW5zZm9ybSA6IG5ldyBUcmFuc2Zvcm0oaywgdHJhbnNmb3JtLngsIHRyYW5zZm9ybS55KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYW5zbGF0ZSh0cmFuc2Zvcm0sIHAwLCBwMSkge1xuICAgIHZhciB4ID0gcDBbMF0gLSBwMVswXSAqIHRyYW5zZm9ybS5rLCB5ID0gcDBbMV0gLSBwMVsxXSAqIHRyYW5zZm9ybS5rO1xuICAgIHJldHVybiB4ID09PSB0cmFuc2Zvcm0ueCAmJiB5ID09PSB0cmFuc2Zvcm0ueSA/IHRyYW5zZm9ybSA6IG5ldyBUcmFuc2Zvcm0odHJhbnNmb3JtLmssIHgsIHkpO1xuICB9XG5cbiAgZnVuY3Rpb24gY2VudHJvaWQoZXh0ZW50KSB7XG4gICAgcmV0dXJuIFsoK2V4dGVudFswXVswXSArICtleHRlbnRbMV1bMF0pIC8gMiwgKCtleHRlbnRbMF1bMV0gKyArZXh0ZW50WzFdWzFdKSAvIDJdO1xuICB9XG5cbiAgZnVuY3Rpb24gc2NoZWR1bGUodHJhbnNpdGlvbiwgdHJhbnNmb3JtLCBwb2ludCwgZXZlbnQpIHtcbiAgICB0cmFuc2l0aW9uXG4gICAgICAgIC5vbihcInN0YXJ0Lnpvb21cIiwgZnVuY3Rpb24oKSB7IGdlc3R1cmUodGhpcywgYXJndW1lbnRzKS5ldmVudChldmVudCkuc3RhcnQoKTsgfSlcbiAgICAgICAgLm9uKFwiaW50ZXJydXB0Lnpvb20gZW5kLnpvb21cIiwgZnVuY3Rpb24oKSB7IGdlc3R1cmUodGhpcywgYXJndW1lbnRzKS5ldmVudChldmVudCkuZW5kKCk7IH0pXG4gICAgICAgIC50d2VlbihcInpvb21cIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIHRoYXQgPSB0aGlzLFxuICAgICAgICAgICAgICBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICAgICAgICBnID0gZ2VzdHVyZSh0aGF0LCBhcmdzKS5ldmVudChldmVudCksXG4gICAgICAgICAgICAgIGUgPSBleHRlbnQuYXBwbHkodGhhdCwgYXJncyksXG4gICAgICAgICAgICAgIHAgPSBwb2ludCA9PSBudWxsID8gY2VudHJvaWQoZSkgOiB0eXBlb2YgcG9pbnQgPT09IFwiZnVuY3Rpb25cIiA/IHBvaW50LmFwcGx5KHRoYXQsIGFyZ3MpIDogcG9pbnQsXG4gICAgICAgICAgICAgIHcgPSBNYXRoLm1heChlWzFdWzBdIC0gZVswXVswXSwgZVsxXVsxXSAtIGVbMF1bMV0pLFxuICAgICAgICAgICAgICBhID0gdGhhdC5fX3pvb20sXG4gICAgICAgICAgICAgIGIgPSB0eXBlb2YgdHJhbnNmb3JtID09PSBcImZ1bmN0aW9uXCIgPyB0cmFuc2Zvcm0uYXBwbHkodGhhdCwgYXJncykgOiB0cmFuc2Zvcm0sXG4gICAgICAgICAgICAgIGkgPSBpbnRlcnBvbGF0ZShhLmludmVydChwKS5jb25jYXQodyAvIGEuayksIGIuaW52ZXJ0KHApLmNvbmNhdCh3IC8gYi5rKSk7XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIGlmICh0ID09PSAxKSB0ID0gYjsgLy8gQXZvaWQgcm91bmRpbmcgZXJyb3Igb24gZW5kLlxuICAgICAgICAgICAgZWxzZSB7IHZhciBsID0gaSh0KSwgayA9IHcgLyBsWzJdOyB0ID0gbmV3IFRyYW5zZm9ybShrLCBwWzBdIC0gbFswXSAqIGssIHBbMV0gLSBsWzFdICogayk7IH1cbiAgICAgICAgICAgIGcuem9vbShudWxsLCB0KTtcbiAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdlc3R1cmUodGhhdCwgYXJncywgY2xlYW4pIHtcbiAgICByZXR1cm4gKCFjbGVhbiAmJiB0aGF0Ll9fem9vbWluZykgfHwgbmV3IEdlc3R1cmUodGhhdCwgYXJncyk7XG4gIH1cblxuICBmdW5jdGlvbiBHZXN0dXJlKHRoYXQsIGFyZ3MpIHtcbiAgICB0aGlzLnRoYXQgPSB0aGF0O1xuICAgIHRoaXMuYXJncyA9IGFyZ3M7XG4gICAgdGhpcy5hY3RpdmUgPSAwO1xuICAgIHRoaXMuc291cmNlRXZlbnQgPSBudWxsO1xuICAgIHRoaXMuZXh0ZW50ID0gZXh0ZW50LmFwcGx5KHRoYXQsIGFyZ3MpO1xuICAgIHRoaXMudGFwcyA9IDA7XG4gIH1cblxuICBHZXN0dXJlLnByb3RvdHlwZSA9IHtcbiAgICBldmVudDogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIGlmIChldmVudCkgdGhpcy5zb3VyY2VFdmVudCA9IGV2ZW50O1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBzdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoKyt0aGlzLmFjdGl2ZSA9PT0gMSkge1xuICAgICAgICB0aGlzLnRoYXQuX196b29taW5nID0gdGhpcztcbiAgICAgICAgdGhpcy5lbWl0KFwic3RhcnRcIik7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIHpvb206IGZ1bmN0aW9uKGtleSwgdHJhbnNmb3JtKSB7XG4gICAgICBpZiAodGhpcy5tb3VzZSAmJiBrZXkgIT09IFwibW91c2VcIikgdGhpcy5tb3VzZVsxXSA9IHRyYW5zZm9ybS5pbnZlcnQodGhpcy5tb3VzZVswXSk7XG4gICAgICBpZiAodGhpcy50b3VjaDAgJiYga2V5ICE9PSBcInRvdWNoXCIpIHRoaXMudG91Y2gwWzFdID0gdHJhbnNmb3JtLmludmVydCh0aGlzLnRvdWNoMFswXSk7XG4gICAgICBpZiAodGhpcy50b3VjaDEgJiYga2V5ICE9PSBcInRvdWNoXCIpIHRoaXMudG91Y2gxWzFdID0gdHJhbnNmb3JtLmludmVydCh0aGlzLnRvdWNoMVswXSk7XG4gICAgICB0aGlzLnRoYXQuX196b29tID0gdHJhbnNmb3JtO1xuICAgICAgdGhpcy5lbWl0KFwiem9vbVwiKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgZW5kOiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICgtLXRoaXMuYWN0aXZlID09PSAwKSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzLnRoYXQuX196b29taW5nO1xuICAgICAgICB0aGlzLmVtaXQoXCJlbmRcIik7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIGVtaXQ6IGZ1bmN0aW9uKHR5cGUpIHtcbiAgICAgIHZhciBkID0gc2VsZWN0KHRoaXMudGhhdCkuZGF0dW0oKTtcbiAgICAgIGxpc3RlbmVycy5jYWxsKFxuICAgICAgICB0eXBlLFxuICAgICAgICB0aGlzLnRoYXQsXG4gICAgICAgIG5ldyBab29tRXZlbnQodHlwZSwge1xuICAgICAgICAgIHNvdXJjZUV2ZW50OiB0aGlzLnNvdXJjZUV2ZW50LFxuICAgICAgICAgIHRhcmdldDogem9vbSxcbiAgICAgICAgICB0eXBlLFxuICAgICAgICAgIHRyYW5zZm9ybTogdGhpcy50aGF0Ll9fem9vbSxcbiAgICAgICAgICBkaXNwYXRjaDogbGlzdGVuZXJzXG4gICAgICAgIH0pLFxuICAgICAgICBkXG4gICAgICApO1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiB3aGVlbGVkKGV2ZW50LCAuLi5hcmdzKSB7XG4gICAgaWYgKCFmaWx0ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSkgcmV0dXJuO1xuICAgIHZhciBnID0gZ2VzdHVyZSh0aGlzLCBhcmdzKS5ldmVudChldmVudCksXG4gICAgICAgIHQgPSB0aGlzLl9fem9vbSxcbiAgICAgICAgayA9IE1hdGgubWF4KHNjYWxlRXh0ZW50WzBdLCBNYXRoLm1pbihzY2FsZUV4dGVudFsxXSwgdC5rICogTWF0aC5wb3coMiwgd2hlZWxEZWx0YS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSkpLFxuICAgICAgICBwID0gcG9pbnRlcihldmVudCk7XG5cbiAgICAvLyBJZiB0aGUgbW91c2UgaXMgaW4gdGhlIHNhbWUgbG9jYXRpb24gYXMgYmVmb3JlLCByZXVzZSBpdC5cbiAgICAvLyBJZiB0aGVyZSB3ZXJlIHJlY2VudCB3aGVlbCBldmVudHMsIHJlc2V0IHRoZSB3aGVlbCBpZGxlIHRpbWVvdXQuXG4gICAgaWYgKGcud2hlZWwpIHtcbiAgICAgIGlmIChnLm1vdXNlWzBdWzBdICE9PSBwWzBdIHx8IGcubW91c2VbMF1bMV0gIT09IHBbMV0pIHtcbiAgICAgICAgZy5tb3VzZVsxXSA9IHQuaW52ZXJ0KGcubW91c2VbMF0gPSBwKTtcbiAgICAgIH1cbiAgICAgIGNsZWFyVGltZW91dChnLndoZWVsKTtcbiAgICB9XG5cbiAgICAvLyBJZiB0aGlzIHdoZWVsIGV2ZW50IHdvblx1MjAxOXQgdHJpZ2dlciBhIHRyYW5zZm9ybSBjaGFuZ2UsIGlnbm9yZSBpdC5cbiAgICBlbHNlIGlmICh0LmsgPT09IGspIHJldHVybjtcblxuICAgIC8vIE90aGVyd2lzZSwgY2FwdHVyZSB0aGUgbW91c2UgcG9pbnQgYW5kIGxvY2F0aW9uIGF0IHRoZSBzdGFydC5cbiAgICBlbHNlIHtcbiAgICAgIGcubW91c2UgPSBbcCwgdC5pbnZlcnQocCldO1xuICAgICAgaW50ZXJydXB0KHRoaXMpO1xuICAgICAgZy5zdGFydCgpO1xuICAgIH1cblxuICAgIG5vZXZlbnQoZXZlbnQpO1xuICAgIGcud2hlZWwgPSBzZXRUaW1lb3V0KHdoZWVsaWRsZWQsIHdoZWVsRGVsYXkpO1xuICAgIGcuem9vbShcIm1vdXNlXCIsIGNvbnN0cmFpbih0cmFuc2xhdGUoc2NhbGUodCwgayksIGcubW91c2VbMF0sIGcubW91c2VbMV0pLCBnLmV4dGVudCwgdHJhbnNsYXRlRXh0ZW50KSk7XG5cbiAgICBmdW5jdGlvbiB3aGVlbGlkbGVkKCkge1xuICAgICAgZy53aGVlbCA9IG51bGw7XG4gICAgICBnLmVuZCgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG1vdXNlZG93bmVkKGV2ZW50LCAuLi5hcmdzKSB7XG4gICAgaWYgKHRvdWNoZW5kaW5nIHx8ICFmaWx0ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSkgcmV0dXJuO1xuICAgIHZhciBjdXJyZW50VGFyZ2V0ID0gZXZlbnQuY3VycmVudFRhcmdldCxcbiAgICAgICAgZyA9IGdlc3R1cmUodGhpcywgYXJncywgdHJ1ZSkuZXZlbnQoZXZlbnQpLFxuICAgICAgICB2ID0gc2VsZWN0KGV2ZW50LnZpZXcpLm9uKFwibW91c2Vtb3ZlLnpvb21cIiwgbW91c2Vtb3ZlZCwgdHJ1ZSkub24oXCJtb3VzZXVwLnpvb21cIiwgbW91c2V1cHBlZCwgdHJ1ZSksXG4gICAgICAgIHAgPSBwb2ludGVyKGV2ZW50LCBjdXJyZW50VGFyZ2V0KSxcbiAgICAgICAgeDAgPSBldmVudC5jbGllbnRYLFxuICAgICAgICB5MCA9IGV2ZW50LmNsaWVudFk7XG5cbiAgICBkcmFnRGlzYWJsZShldmVudC52aWV3KTtcbiAgICBub3Byb3BhZ2F0aW9uKGV2ZW50KTtcbiAgICBnLm1vdXNlID0gW3AsIHRoaXMuX196b29tLmludmVydChwKV07XG4gICAgaW50ZXJydXB0KHRoaXMpO1xuICAgIGcuc3RhcnQoKTtcblxuICAgIGZ1bmN0aW9uIG1vdXNlbW92ZWQoZXZlbnQpIHtcbiAgICAgIG5vZXZlbnQoZXZlbnQpO1xuICAgICAgaWYgKCFnLm1vdmVkKSB7XG4gICAgICAgIHZhciBkeCA9IGV2ZW50LmNsaWVudFggLSB4MCwgZHkgPSBldmVudC5jbGllbnRZIC0geTA7XG4gICAgICAgIGcubW92ZWQgPSBkeCAqIGR4ICsgZHkgKiBkeSA+IGNsaWNrRGlzdGFuY2UyO1xuICAgICAgfVxuICAgICAgZy5ldmVudChldmVudClcbiAgICAgICAuem9vbShcIm1vdXNlXCIsIGNvbnN0cmFpbih0cmFuc2xhdGUoZy50aGF0Ll9fem9vbSwgZy5tb3VzZVswXSA9IHBvaW50ZXIoZXZlbnQsIGN1cnJlbnRUYXJnZXQpLCBnLm1vdXNlWzFdKSwgZy5leHRlbnQsIHRyYW5zbGF0ZUV4dGVudCkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1vdXNldXBwZWQoZXZlbnQpIHtcbiAgICAgIHYub24oXCJtb3VzZW1vdmUuem9vbSBtb3VzZXVwLnpvb21cIiwgbnVsbCk7XG4gICAgICBkcmFnRW5hYmxlKGV2ZW50LnZpZXcsIGcubW92ZWQpO1xuICAgICAgbm9ldmVudChldmVudCk7XG4gICAgICBnLmV2ZW50KGV2ZW50KS5lbmQoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBkYmxjbGlja2VkKGV2ZW50LCAuLi5hcmdzKSB7XG4gICAgaWYgKCFmaWx0ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSkgcmV0dXJuO1xuICAgIHZhciB0MCA9IHRoaXMuX196b29tLFxuICAgICAgICBwMCA9IHBvaW50ZXIoZXZlbnQuY2hhbmdlZFRvdWNoZXMgPyBldmVudC5jaGFuZ2VkVG91Y2hlc1swXSA6IGV2ZW50LCB0aGlzKSxcbiAgICAgICAgcDEgPSB0MC5pbnZlcnQocDApLFxuICAgICAgICBrMSA9IHQwLmsgKiAoZXZlbnQuc2hpZnRLZXkgPyAwLjUgOiAyKSxcbiAgICAgICAgdDEgPSBjb25zdHJhaW4odHJhbnNsYXRlKHNjYWxlKHQwLCBrMSksIHAwLCBwMSksIGV4dGVudC5hcHBseSh0aGlzLCBhcmdzKSwgdHJhbnNsYXRlRXh0ZW50KTtcblxuICAgIG5vZXZlbnQoZXZlbnQpO1xuICAgIGlmIChkdXJhdGlvbiA+IDApIHNlbGVjdCh0aGlzKS50cmFuc2l0aW9uKCkuZHVyYXRpb24oZHVyYXRpb24pLmNhbGwoc2NoZWR1bGUsIHQxLCBwMCwgZXZlbnQpO1xuICAgIGVsc2Ugc2VsZWN0KHRoaXMpLmNhbGwoem9vbS50cmFuc2Zvcm0sIHQxLCBwMCwgZXZlbnQpO1xuICB9XG5cbiAgZnVuY3Rpb24gdG91Y2hzdGFydGVkKGV2ZW50LCAuLi5hcmdzKSB7XG4gICAgaWYgKCFmaWx0ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSkgcmV0dXJuO1xuICAgIHZhciB0b3VjaGVzID0gZXZlbnQudG91Y2hlcyxcbiAgICAgICAgbiA9IHRvdWNoZXMubGVuZ3RoLFxuICAgICAgICBnID0gZ2VzdHVyZSh0aGlzLCBhcmdzLCBldmVudC5jaGFuZ2VkVG91Y2hlcy5sZW5ndGggPT09IG4pLmV2ZW50KGV2ZW50KSxcbiAgICAgICAgc3RhcnRlZCwgaSwgdCwgcDtcblxuICAgIG5vcHJvcGFnYXRpb24oZXZlbnQpO1xuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIHQgPSB0b3VjaGVzW2ldLCBwID0gcG9pbnRlcih0LCB0aGlzKTtcbiAgICAgIHAgPSBbcCwgdGhpcy5fX3pvb20uaW52ZXJ0KHApLCB0LmlkZW50aWZpZXJdO1xuICAgICAgaWYgKCFnLnRvdWNoMCkgZy50b3VjaDAgPSBwLCBzdGFydGVkID0gdHJ1ZSwgZy50YXBzID0gMSArICEhdG91Y2hzdGFydGluZztcbiAgICAgIGVsc2UgaWYgKCFnLnRvdWNoMSAmJiBnLnRvdWNoMFsyXSAhPT0gcFsyXSkgZy50b3VjaDEgPSBwLCBnLnRhcHMgPSAwO1xuICAgIH1cblxuICAgIGlmICh0b3VjaHN0YXJ0aW5nKSB0b3VjaHN0YXJ0aW5nID0gY2xlYXJUaW1lb3V0KHRvdWNoc3RhcnRpbmcpO1xuXG4gICAgaWYgKHN0YXJ0ZWQpIHtcbiAgICAgIGlmIChnLnRhcHMgPCAyKSB0b3VjaGZpcnN0ID0gcFswXSwgdG91Y2hzdGFydGluZyA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IHRvdWNoc3RhcnRpbmcgPSBudWxsOyB9LCB0b3VjaERlbGF5KTtcbiAgICAgIGludGVycnVwdCh0aGlzKTtcbiAgICAgIGcuc3RhcnQoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB0b3VjaG1vdmVkKGV2ZW50LCAuLi5hcmdzKSB7XG4gICAgaWYgKCF0aGlzLl9fem9vbWluZykgcmV0dXJuO1xuICAgIHZhciBnID0gZ2VzdHVyZSh0aGlzLCBhcmdzKS5ldmVudChldmVudCksXG4gICAgICAgIHRvdWNoZXMgPSBldmVudC5jaGFuZ2VkVG91Y2hlcyxcbiAgICAgICAgbiA9IHRvdWNoZXMubGVuZ3RoLCBpLCB0LCBwLCBsO1xuXG4gICAgbm9ldmVudChldmVudCk7XG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgdCA9IHRvdWNoZXNbaV0sIHAgPSBwb2ludGVyKHQsIHRoaXMpO1xuICAgICAgaWYgKGcudG91Y2gwICYmIGcudG91Y2gwWzJdID09PSB0LmlkZW50aWZpZXIpIGcudG91Y2gwWzBdID0gcDtcbiAgICAgIGVsc2UgaWYgKGcudG91Y2gxICYmIGcudG91Y2gxWzJdID09PSB0LmlkZW50aWZpZXIpIGcudG91Y2gxWzBdID0gcDtcbiAgICB9XG4gICAgdCA9IGcudGhhdC5fX3pvb207XG4gICAgaWYgKGcudG91Y2gxKSB7XG4gICAgICB2YXIgcDAgPSBnLnRvdWNoMFswXSwgbDAgPSBnLnRvdWNoMFsxXSxcbiAgICAgICAgICBwMSA9IGcudG91Y2gxWzBdLCBsMSA9IGcudG91Y2gxWzFdLFxuICAgICAgICAgIGRwID0gKGRwID0gcDFbMF0gLSBwMFswXSkgKiBkcCArIChkcCA9IHAxWzFdIC0gcDBbMV0pICogZHAsXG4gICAgICAgICAgZGwgPSAoZGwgPSBsMVswXSAtIGwwWzBdKSAqIGRsICsgKGRsID0gbDFbMV0gLSBsMFsxXSkgKiBkbDtcbiAgICAgIHQgPSBzY2FsZSh0LCBNYXRoLnNxcnQoZHAgLyBkbCkpO1xuICAgICAgcCA9IFsocDBbMF0gKyBwMVswXSkgLyAyLCAocDBbMV0gKyBwMVsxXSkgLyAyXTtcbiAgICAgIGwgPSBbKGwwWzBdICsgbDFbMF0pIC8gMiwgKGwwWzFdICsgbDFbMV0pIC8gMl07XG4gICAgfVxuICAgIGVsc2UgaWYgKGcudG91Y2gwKSBwID0gZy50b3VjaDBbMF0sIGwgPSBnLnRvdWNoMFsxXTtcbiAgICBlbHNlIHJldHVybjtcblxuICAgIGcuem9vbShcInRvdWNoXCIsIGNvbnN0cmFpbih0cmFuc2xhdGUodCwgcCwgbCksIGcuZXh0ZW50LCB0cmFuc2xhdGVFeHRlbnQpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRvdWNoZW5kZWQoZXZlbnQsIC4uLmFyZ3MpIHtcbiAgICBpZiAoIXRoaXMuX196b29taW5nKSByZXR1cm47XG4gICAgdmFyIGcgPSBnZXN0dXJlKHRoaXMsIGFyZ3MpLmV2ZW50KGV2ZW50KSxcbiAgICAgICAgdG91Y2hlcyA9IGV2ZW50LmNoYW5nZWRUb3VjaGVzLFxuICAgICAgICBuID0gdG91Y2hlcy5sZW5ndGgsIGksIHQ7XG5cbiAgICBub3Byb3BhZ2F0aW9uKGV2ZW50KTtcbiAgICBpZiAodG91Y2hlbmRpbmcpIGNsZWFyVGltZW91dCh0b3VjaGVuZGluZyk7XG4gICAgdG91Y2hlbmRpbmcgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyB0b3VjaGVuZGluZyA9IG51bGw7IH0sIHRvdWNoRGVsYXkpO1xuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIHQgPSB0b3VjaGVzW2ldO1xuICAgICAgaWYgKGcudG91Y2gwICYmIGcudG91Y2gwWzJdID09PSB0LmlkZW50aWZpZXIpIGRlbGV0ZSBnLnRvdWNoMDtcbiAgICAgIGVsc2UgaWYgKGcudG91Y2gxICYmIGcudG91Y2gxWzJdID09PSB0LmlkZW50aWZpZXIpIGRlbGV0ZSBnLnRvdWNoMTtcbiAgICB9XG4gICAgaWYgKGcudG91Y2gxICYmICFnLnRvdWNoMCkgZy50b3VjaDAgPSBnLnRvdWNoMSwgZGVsZXRlIGcudG91Y2gxO1xuICAgIGlmIChnLnRvdWNoMCkgZy50b3VjaDBbMV0gPSB0aGlzLl9fem9vbS5pbnZlcnQoZy50b3VjaDBbMF0pO1xuICAgIGVsc2Uge1xuICAgICAgZy5lbmQoKTtcbiAgICAgIC8vIElmIHRoaXMgd2FzIGEgZGJsdGFwLCByZXJvdXRlIHRvIHRoZSAob3B0aW9uYWwpIGRibGNsaWNrLnpvb20gaGFuZGxlci5cbiAgICAgIGlmIChnLnRhcHMgPT09IDIpIHtcbiAgICAgICAgdCA9IHBvaW50ZXIodCwgdGhpcyk7XG4gICAgICAgIGlmIChNYXRoLmh5cG90KHRvdWNoZmlyc3RbMF0gLSB0WzBdLCB0b3VjaGZpcnN0WzFdIC0gdFsxXSkgPCB0YXBEaXN0YW5jZSkge1xuICAgICAgICAgIHZhciBwID0gc2VsZWN0KHRoaXMpLm9uKFwiZGJsY2xpY2suem9vbVwiKTtcbiAgICAgICAgICBpZiAocCkgcC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgem9vbS53aGVlbERlbHRhID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHdoZWVsRGVsdGEgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgem9vbSkgOiB3aGVlbERlbHRhO1xuICB9O1xuXG4gIHpvb20uZmlsdGVyID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGZpbHRlciA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoISFfKSwgem9vbSkgOiBmaWx0ZXI7XG4gIH07XG5cbiAgem9vbS50b3VjaGFibGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodG91Y2hhYmxlID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCghIV8pLCB6b29tKSA6IHRvdWNoYWJsZTtcbiAgfTtcblxuICB6b29tLmV4dGVudCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChleHRlbnQgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KFtbK19bMF1bMF0sICtfWzBdWzFdXSwgWytfWzFdWzBdLCArX1sxXVsxXV1dKSwgem9vbSkgOiBleHRlbnQ7XG4gIH07XG5cbiAgem9vbS5zY2FsZUV4dGVudCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzY2FsZUV4dGVudFswXSA9ICtfWzBdLCBzY2FsZUV4dGVudFsxXSA9ICtfWzFdLCB6b29tKSA6IFtzY2FsZUV4dGVudFswXSwgc2NhbGVFeHRlbnRbMV1dO1xuICB9O1xuXG4gIHpvb20udHJhbnNsYXRlRXh0ZW50ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRyYW5zbGF0ZUV4dGVudFswXVswXSA9ICtfWzBdWzBdLCB0cmFuc2xhdGVFeHRlbnRbMV1bMF0gPSArX1sxXVswXSwgdHJhbnNsYXRlRXh0ZW50WzBdWzFdID0gK19bMF1bMV0sIHRyYW5zbGF0ZUV4dGVudFsxXVsxXSA9ICtfWzFdWzFdLCB6b29tKSA6IFtbdHJhbnNsYXRlRXh0ZW50WzBdWzBdLCB0cmFuc2xhdGVFeHRlbnRbMF1bMV1dLCBbdHJhbnNsYXRlRXh0ZW50WzFdWzBdLCB0cmFuc2xhdGVFeHRlbnRbMV1bMV1dXTtcbiAgfTtcblxuICB6b29tLmNvbnN0cmFpbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjb25zdHJhaW4gPSBfLCB6b29tKSA6IGNvbnN0cmFpbjtcbiAgfTtcblxuICB6b29tLmR1cmF0aW9uID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGR1cmF0aW9uID0gK18sIHpvb20pIDogZHVyYXRpb247XG4gIH07XG5cbiAgem9vbS5pbnRlcnBvbGF0ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChpbnRlcnBvbGF0ZSA9IF8sIHpvb20pIDogaW50ZXJwb2xhdGU7XG4gIH07XG5cbiAgem9vbS5vbiA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZSA9IGxpc3RlbmVycy5vbi5hcHBseShsaXN0ZW5lcnMsIGFyZ3VtZW50cyk7XG4gICAgcmV0dXJuIHZhbHVlID09PSBsaXN0ZW5lcnMgPyB6b29tIDogdmFsdWU7XG4gIH07XG5cbiAgem9vbS5jbGlja0Rpc3RhbmNlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGNsaWNrRGlzdGFuY2UyID0gKF8gPSArXykgKiBfLCB6b29tKSA6IE1hdGguc3FydChjbGlja0Rpc3RhbmNlMik7XG4gIH07XG5cbiAgem9vbS50YXBEaXN0YW5jZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0YXBEaXN0YW5jZSA9ICtfLCB6b29tKSA6IHRhcERpc3RhbmNlO1xuICB9O1xuXG4gIHJldHVybiB6b29tO1xufVxuIiwgImltcG9ydCB3aWtpLCB7IHJlbGF0ZWRSZXN1bHQsIHdpa2lTdW1tYXJ5IH0gZnJvbSBcIndpa2lwZWRpYVwiO1xuLy8gVE9ETzogZ2V0IHJpZCBvZiBgd2lraXBlZGlhYCBwa2dcblxuXG4vLyBodHRwczovL2Rldi50by90aW1odWFuZy9hLXNpbXBsZS13YXktdG8tZGV0ZWN0LWlmLWJyb3dzZXItaXMtb24tYS1tb2JpbGUtZGV2aWNlLXdpdGgtamF2YXNjcmlwdC00NGozXG5leHBvcnQgbGV0IGlzTW9iaWxlID0gZmFsc2U7XG5pZiAoXG4gIC9BbmRyb2lkfHdlYk9TfGlQaG9uZXxpUGFkfGlQb2R8QmxhY2tCZXJyeXxJRU1vYmlsZXxPcGVyYSBNaW5pL2kudGVzdChcbiAgICBuYXZpZ2F0b3IudXNlckFnZW50XG4gIClcbikge1xuICBpc01vYmlsZSA9IHRydWU7XG59XG5cbmZ1bmN0aW9uIF9fbWluaW1pemVVcmwodXJsOiBzdHJpbmcpIHtcbiAgcmV0dXJuIHVybD8ucmVwbGFjZSgvXFxuXFxzKi9nLCBcIlwiKTtcbn1cblxubGV0IHJlc3RBcGlMYW5nID0gJ3B0J1xuXG5mdW5jdGlvbiBSZXN0QXBpQmFzZSgpIHtcbiAgcmV0dXJuIGBodHRwczovLyR7cmVzdEFwaUxhbmd9Lndpa2lwZWRpYS5vcmcvYXBpL3Jlc3RfdjFgXG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuLy8gICAgICAgICAgICAgICAgICAgICAgICBBdXRvIGNvbXBsZXRpb24gICAgICAgICAgICAgICAgICAgICAgLy9cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLy9cblxuLyoqIFdyYXBzIGB3aWtpLnNlYXJjaCgpYCBtZXRob2QgKi9cbi8vIGFzeW5jIGZ1bmN0aW9uIHN1Z2dlc3QocXVlcnk6IHN0cmluZykge1xuLy8gICBjb25zdCByZXNTZWFyY2ggPSBhd2FpdCB3aWtpLnNlYXJjaChxdWVyeSwge1xuLy8gICAgIGxpbWl0OiAxMCxcbi8vICAgICBzdWdnZXN0aW9uOiB0cnVlLFxuLy8gICB9KTtcbi8vICAgY29uc29sZS5sb2coXCJyZXNTZWFyY2g6XCIsIHJlc1NlYXJjaCk7XG5cbi8vICAgLy8gY29uc3QgcmVzU3VnZ2VzdCA9IGF3YWl0IHdpa2kuc3VnZ2VzdChxdWVyeSk7XG4vLyAgIC8vIGNvbnNvbGUubG9nKFwicmVzU3VnZ2VzdDpcIiwgcmVzU3VnZ2VzdCk7XG5cbi8vICAgcmV0dXJuIHJlc1NlYXJjaC5yZXN1bHRzO1xuLy8gfVxuXG5jb25zdCBsYW5nID0gJ2VuJztcbmNvbnN0IGdldFVybFN1Z2dlc3QgPSAocXVlcnk6IHN0cmluZykgPT5cbiAgX19taW5pbWl6ZVVybChgXG4gIGh0dHBzOi8vJHtsYW5nfS53aWtpcGVkaWEub3JnL3cvYXBpLnBocFxuICA/YWN0aW9uPW9wZW5zZWFyY2hcbiAgJmZvcm1hdD1qc29uXG4gICZmb3JtYXR2ZXJzaW9uPTJcbiAgJnNlYXJjaD0ke3F1ZXJ5fVxuICAmbmFtZXNwYWNlPTBcbiAgJmxpbWl0PTEwXG4gICZvcmlnaW49KmApO1xuXG4vKipcbiAqIFVzZXMgYExlZ2FjeSBXaWtpcGVkaWEgQVBJIC0gYXBpLnBocGBcbiAqXG4gKiBodHRwczovL3d3dy5tZWRpYXdpa2kub3JnL3dpa2kvQVBJOk1haW5fcGFnZVxuICogKi9cbmFzeW5jIGZ1bmN0aW9uIHN1Z2dlc3RDdXN0b20ocXVlcnk6IHN0cmluZykge1xuICBjb25zdCBhcGlFbmRwb2ludCA9IGdldFVybFN1Z2dlc3QocXVlcnkpO1xuICBjb25zb2xlLmxvZyhcImFwaSBlbmRwb2ludDpcIiwgYXBpRW5kcG9pbnQpO1xuICBjb25zb2xlLmxvZyhcImVuY29kZWQgdXJsOlwiLCBlbmNvZGVVUkkocXVlcnkpKTtcblxuICBjb25zdCBmZXRjaFNlYXJjaCA9IChhd2FpdCAoYXdhaXQgZmV0Y2goYXBpRW5kcG9pbnQpKS5qc29uKCkpIGFzIFtcbiAgICBzdHJpbmcsXG4gICAgc3RyaW5nW10sXG4gICAgc3RyaW5nW10sXG4gICAgc3RyaW5nW11cbiAgXTtcbiAgY29uc29sZS5sb2coXCJmZXRjaFNlYXJjaDpcIiwgZmV0Y2hTZWFyY2gpO1xuXG4gIC8vIHJldHVybiBmZXRjaFNlYXJjaCBbcXVlcnksIHN1Z2dlc3RzW10sIFwiXCJbXSwgbGlua3NbXV1cbiAgY29uc3QgWywgdGl0bGVzLCAsIGxpbmtzXSA9IGZldGNoU2VhcmNoO1xuICBcbiAgXG4gIGNvbnN0IHJlczogU3VnZ2VzdGlvbnNDdXN0b20gPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aXRsZXMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBjaHVua3MgPSBsaW5rc1tpXS5zcGxpdChcIi9cIilcbiAgICByZXMucHVzaCh7IHRpdGxlOiB0aXRsZXNbaV0sIG5vcm1hbGl6ZWQ6IGNodW5rc1tjaHVua3MubGVuZ3RoIC0gMV0gfSk7XG4gIH1cblxuICByZXR1cm4gcmVzO1xufVxuXG5leHBvcnQgdHlwZSBTdWdnZXN0aW9uc0N1c3RvbSA9IHsgdGl0bGU6IHN0cmluZzsgbm9ybWFsaXplZDogc3RyaW5nIH1bXTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG4vLyAgICAgICAgICAgICAgICAgICAgICAgTGlua3MgJiBQcmV2aWV3ICAgICAgICAgICAgICAgICAgICAgICAvL1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0vL1xuXG4vKiogTG9hZHMgcGFnZSBsaW5rcyBhbmQgaW50cm8uICovXG5hc3luYyBmdW5jdGlvbiBwYWdlKHF1ZXJ5OiBzdHJpbmcpIHtcbiAgY29uc3QgcmVzUGFnZSA9IGF3YWl0IHdpa2kucGFnZShxdWVyeSwge1xuICAgIGF1dG9TdWdnZXN0OiB0cnVlLFxuICAgIHJlZGlyZWN0OiBmYWxzZSxcbiAgfSk7XG5cbiAgLy8gUkVTVCBBUEkgc3BlY1xuICAvLyBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvYXBpL3Jlc3RfdjEvIy9cblxuICAvLyBjb25zb2xlLmxvZyhcInJlc1BhZ2U6XCIsIHJlc1BhZ2UpO1xuXG4gIC8vIGNvbnNvbGUubG9nKFwicmVzUGFnZS5saW5rczpcIiwgYXdhaXQgcmVzUGFnZS5saW5rcygpKTtcbiAgLy8gY29uc29sZS5sb2coXCJyZXNQYWdlLmludHJvOlwiLCBhd2FpdCByZXNQYWdlLmludHJvKCkpO1xuXG4gIC8vIGNvbnNpZGVyIHNob3dpbmcgdGhlIGluZm9ib3hcbiAgLy8gY29uc29sZS5sb2coXCJyZXNQYWdlLmluZm9ib3g6XCIsIGF3YWl0IHJlc1BhZ2UuaW5mb2JveCh7YXV0b1N1Z2dlc3Q6IHRydWV9KSk7XG5cbiAgLy8gcmVxdWlyZXMgVXNlci1BZ2VudC9BcGktVXNlci1BZ2VudCBoZWFkZXJcbiAgLy8gY29uc29sZS5sb2coXCJyZXNQYWdlLnN1bW1hcnk6XCIsIGF3YWl0IHJlc1BhZ2Uuc3VtbWFyeSgpKTtcblxuICAvLyBkb24ndCBuZWVkIHRoZSB3aG9sZSBjb250ZW50IChmb3IgYSBwcmV2aWV3KVxuICAvLyBjb25zb2xlLmxvZyhcInJlc1BhZ2UuY29udGVudDpcIiwgYXdhaXQgcmVzUGFnZS5jb250ZW50KCkpO1xuXG4gIC8vIHRoZSBcIi9yZWxhdGVkXCIgcm91dGUgaXMgZXhwZXJpbWVudGFsIVxuICAvLyBjb25zdCByZWxhdGVkID0gYXdhaXQgcmVzUGFnZS5yZWxhdGVkKCk7XG4gIC8vIGNvbnNvbGUubG9nKFwicmVzUGFnZS5yZWxhdGVkOlwiLCByZWxhdGVkKTtcblxuICByZXR1cm4gcmVzUGFnZTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0U3VtbWFyeShxdWVyeTogc3RyaW5nKSB7XG4gIC8vIGNvbnNvbGUubG9nKFwiXHVEODNEXHVERTgwIHwgZ2V0U3VtbWFyeSB8IHF1ZXJ5XCIsIHF1ZXJ5KVxuXG4gIGNvbnN0IGVuZHBvaW50ID0gUmVzdEFwaUJhc2UoKSArICcvcGFnZS9zdW1tYXJ5LycgKyBxdWVyeVxuICBjb25zdCBzdW1tYXJ5OiB3aWtpU3VtbWFyeSA9IGF3YWl0IChhd2FpdCBmZXRjaChlbmRwb2ludCkpLmpzb24oKTtcblxuICByZXR1cm4gc3VtbWFyeTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0UmVzcG9uc2UocXVlcnk6IHN0cmluZykge1xuICBjb25zdCBlbmRwb2ludCA9IFJlc3RBcGlCYXNlKCkgKyAnL3BhZ2UvcmVsYXRlZC8nICsgcXVlcnlcbiAgY29uc3QgcmVsYXRlZDogcmVsYXRlZFJlc3VsdCA9IGF3YWl0IChhd2FpdCBmZXRjaChlbmRwb2ludCkpLmpzb24oKTtcblxuICByZXR1cm4gcmVsYXRlZC5wYWdlcztcbn1cblxuZnVuY3Rpb24gZ2V0SXRlbShpdGVtOiByZWxhdGVkUmVzdWx0W1wicGFnZXNcIl1bbnVtYmVyXSkge1xuICAvLyBUT0RPOiByZXBsYWNlIHdpdGggdGl0bGVzLmRpc3BsYXk/XG4gIC8vIHJldHVybiBpdGVtLnRpdGxlcy5ub3JtYWxpemVkO1xuXG4gIGNvbnN0IHtcbiAgICBkZXNjcmlwdGlvbixcbiAgICBwYWdlaWQsXG4gICAgZXh0cmFjdF9odG1sLFxuICAgIG9yaWdpbmFsaW1hZ2UsXG4gICAgdGh1bWJuYWlsLFxuICAgIGNvbnRlbnRfdXJscyxcbiAgfSA9IGl0ZW07XG5cbiAgY29uc3QgcGFnZV91cmwgPSBpc01vYmlsZVxuICAgID8gY29udGVudF91cmxzLm1vYmlsZS5wYWdlXG4gICAgOiBjb250ZW50X3VybHMuZGVza3RvcC5wYWdlO1xuXG4gIGNvbnN0IGRhdGEgPSB7XG4gICAgZGVzY3JpcHRpb24sXG4gICAgcGFnZWlkLFxuICAgIGV4dHJhY3RfaHRtbCxcbiAgICBvcmlnaW5hbGltYWdlLFxuICAgIHRodW1ibmFpbCxcbiAgICBwYWdlX3VybCxcbiAgfTtcblxuICByZXR1cm4geyBpZDogaXRlbS50aXRsZXMubm9ybWFsaXplZCwgZGF0YSB9O1xufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cbi8vICAgICAgICAgICAgICAgICAgICAgICAgICBMYW5ndWFnZXMgICAgICAgICAgICAgICAgICAgICAgICAgIC8vXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS8vXG5cbi8vIGxldCBsYW5ndWFnZXMgPSB3cml0YWJsZTxsYW5ndWFnZVJlc3VsdFtdPihudWxsKTtcblxuLy8gLy8gTm90ZTogaGVyZSBsYW5nPWVuIHNpbmNlIHRoZSByZXNwb25zZSBpcyB0aGUgc2FtZSBmb3IgYW55IGxhbmdcbi8vIGNvbnN0IGxvYWRMYW5nc1VybCA9IF9fbWluaW1pemVVcmwoYFxuLy8gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3cvYXBpLnBocFxuLy8gP21ldGE9c2l0ZWluZm9cbi8vICZzaXByb3A9bGFuZ3VhZ2VzXG4vLyAmZm9ybWF0PWpzb25cbi8vICZyZWRpcmVjdHM9XG4vLyAmYWN0aW9uPXF1ZXJ5XG4vLyAmb3JpZ2luPSpgKTtcblxuLy8gYXN5bmMgZnVuY3Rpb24gbG9hZExhbmdzKCkge1xuLy8gICAvLyBpZiAobGFuZ3VhZ2VzKSByZXR1cm47XG4vLyAgIC8vIGNvbnN0IGxhbmdzID0gYXdhaXQgd2lraS5sYW5ndWFnZXMoKTtcblxuLy8gICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGxvYWRMYW5nc1VybCk7XG5cbi8vICAgaWYgKCFyZXNwb25zZS5vaykgcmV0dXJuO1xuXG4vLyAgIGNvbnN0IGxhbmdzID0gKGF3YWl0IHJlc3BvbnNlLmpzb24oKSkucXVlcnkubGFuZ3VhZ2VzIGFzIGxhbmd1YWdlUmVzdWx0W107XG5cbi8vICAgbGFuZ3VhZ2VzLnNldChsYW5ncyk7XG4vLyB9XG5cbmZ1bmN0aW9uIHNldExhbmcobGFuZ3VhZ2U6IHN0cmluZykge1xuICAvLyB2YWxpZGF0aW9uP1xuXG4gIHJlc3RBcGlMYW5nID0gbGFuZ3VhZ2U7XG59XG5cbmV4cG9ydCBjb25zdCBhcGlDbGllbnQgPSB7XG4gIC8vIHN1Z2dlc3QsXG4gIHBhZ2UsXG5cbiAgc3VnZ2VzdEN1c3RvbSxcbiAgZ2V0U3VtbWFyeSxcblxuICBnZXRSZXNwb25zZSxcbiAgZ2V0SXRlbSxcblxuICAvLyBsYW5ndWFnZXMsXG4gIC8vIGxvYWRMYW5ncyxcbiAgc2V0TGFuZyxcbn07IiwgImltcG9ydCB7SXRlbVZpZXcsIFdvcmtzcGFjZUxlYWZ9IGZyb20gJ29ic2lkaWFuJztcbmltcG9ydCBTZWFyY2hPbkludGVybmV0UGx1Z2luIGZyb20gJy4vbWFpbic7XG5cbmV4cG9ydCBjbGFzcyBTZWFyY2hWaWV3IGV4dGVuZHMgSXRlbVZpZXcge1xuICAgIHVybDogc3RyaW5nO1xuICAgIHRpdGxlOiBzdHJpbmc7XG4gICAgcGx1Z2luOiBTZWFyY2hPbkludGVybmV0UGx1Z2luO1xuXG4gICAgZnJhbWU6IEhUTUxFbGVtZW50O1xuXG4gICAgY29uc3RydWN0b3IocGx1Z2luOiBTZWFyY2hPbkludGVybmV0UGx1Z2luLCBsZWFmOiBXb3Jrc3BhY2VMZWFmLCB1cmw6IHN0cmluZywgdGl0bGU6IHN0cmluZykge1xuICAgICAgc3VwZXIobGVhZik7XG4gICAgICB0aGlzLnBsdWdpbiA9IHBsdWdpbjtcbiAgICAgIHRoaXMudXJsID0gdXJsO1xuICAgICAgdGhpcy50aXRsZSA9IHRpdGxlO1xuICAgIH1cblxuICAgIGFzeW5jIG9uT3BlbigpIHtcbiAgICAgIHRoaXMuZnJhbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpZnJhbWUnKTtcbiAgICAgIHRoaXMuZnJhbWUuYWRkQ2xhc3MoYHNvaS1zaXRlYCk7XG4gICAgICB0aGlzLmZyYW1lLnNldEF0dHIoJ3N0eWxlJywgJ2hlaWdodDogMTAwJTsgd2lkdGg6MTAwJScpO1xuICAgICAgdGhpcy5mcmFtZS5zZXRBdHRyKCdzcmMnLCB0aGlzLnVybCk7XG4gICAgICB0aGlzLmZyYW1lLnNldEF0dHIoJ3RhYmluZGV4JywgJzAnKTtcbiAgICAgIHRoaXMuY29udGFpbmVyRWwuY2hpbGRyZW5bMV0uYXBwZW5kQ2hpbGQodGhpcy5mcmFtZSk7XG4gICAgfVxuXG4gICAgZ2V0RGlzcGxheVRleHQoKTogc3RyaW5nIHtcbiAgICAgIHJldHVybiBgV2lraTogJHt0aGlzLnRpdGxlfWA7XG4gICAgfVxuICAgIFxuICAgIGdldFZpZXdUeXBlKCk6IHN0cmluZyB7XG4gICAgICByZXR1cm4gJ1NlYXJjaCBvbiBJbnRlcm5ldCc7XG4gICAgfVxufSJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFZSxhQUFTLEtBQUssSUFBSSxTQUFTO0FBQ3hDLGFBQU8sU0FBUyxPQUFPO0FBQ3JCLGVBQU8sR0FBRyxNQUFNLFNBQVMsU0FBUztNQUN0QztJQUNBO0FDQUEsUUFBTSxFQUFDLFNBQVEsSUFBSSxPQUFPO0FBQzFCLFFBQU0sRUFBQyxlQUFjLElBQUk7QUFFekIsUUFBTSxVQUFVLFdBQVMsV0FBUztBQUM5QixZQUFNLE1BQU0sU0FBUyxLQUFLLEtBQUs7QUFDL0IsYUFBTyxNQUFNLEdBQUcsTUFBTSxNQUFNLEdBQUcsSUFBSSxJQUFJLE1BQU0sR0FBRyxFQUFFLEVBQUUsWUFBVztJQUNuRSxHQUFHLHVCQUFPLE9BQU8sSUFBSSxDQUFDO0FBRXRCLFFBQU0sYUFBYSxDQUFDQSxVQUFTO0FBQzNCLE1BQUFBLFFBQU9BLE1BQUssWUFBVztBQUN2QixhQUFPLENBQUMsVUFBVSxPQUFPLEtBQUssTUFBTUE7SUFDdEM7QUFFQSxRQUFNLGFBQWEsQ0FBQUEsVUFBUSxXQUFTLE9BQU8sVUFBVUE7QUFTckQsUUFBTSxFQUFDLFFBQU8sSUFBSTtBQVNsQixRQUFNLGNBQWMsV0FBVyxXQUFXO0FBUzFDLGFBQVMsU0FBUyxLQUFLO0FBQ3JCLGFBQU8sUUFBUSxRQUFR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QUEsT0FBQUEsZUFBQUEsR0FBQUEsR0FBQUEsRUFBQUEsT0FBQUEsR0FBQUEsWUFBQUEsTUFBQUEsY0FBQUEsTUFBQUEsVUFBQUEsS0FBQUEsQ0FBQUEsSUFBQUEsRUFBQUEsQ0FBQUEsSUFBQUEsR0FBQUE7SUFBQUE7QUFBQUEsUUFBQUEsZ0JBQUFBLFdBQUFBO0FBQUFBLGVBQUFBLEVBQUFBLElBQUFBLEdBQUFBO0FBQUFBLFlBQUFBLElBQUFBLENBQUFBLEdBQUFBLEtBQUFBLE1BQUFBLElBQUFBLE9BQUFBLElBQUFBO0FBQUFBLFlBQUFBO0FBQUFBLG1CQUFBQSxHQUFBQSxJQUFBQSxHQUFBQSxPQUFBQSxRQUFBQSxFQUFBQSxHQUFBQSxFQUFBQSxNQUFBQSxJQUFBQSxFQUFBQSxLQUFBQSxHQUFBQSxVQUFBQSxFQUFBQSxLQUFBQSxFQUFBQSxLQUFBQSxHQUFBQSxDQUFBQSxLQUFBQSxFQUFBQSxXQUFBQSxJQUFBQSxLQUFBQTtBQUFBQTtRQUFBQSxTQUFBQSxJQUFBQTtBQUFBQSxjQUFBQSxNQUFBQSxJQUFBQTtRQUFBQSxVQUFBQTtBQUFBQSxjQUFBQTtBQUFBQSxhQUFBQSxNQUFBQSxFQUFBQSxVQUFBQSxFQUFBQSxPQUFBQTtVQUFBQSxVQUFBQTtBQUFBQSxnQkFBQUE7QUFBQUEsb0JBQUFBO1VBQUFBO1FBQUFBO0FBQUFBLGVBQUFBO01BQUFBO0FBQUFBLGFBQUFBLFNBQUFBLEdBQUFBLEdBQUFBO0FBQUFBLFlBQUFBLE1BQUFBLFFBQUFBLENBQUFBO0FBQUFBLGlCQUFBQTtBQUFBQSxZQUFBQSxPQUFBQSxZQUFBQSxPQUFBQSxDQUFBQTtBQUFBQSxpQkFBQUEsRUFBQUEsR0FBQUEsQ0FBQUE7QUFBQUEsY0FBQUEsSUFBQUEsVUFBQUEsc0RBQUFBO01BQUFBO0lBQUFBLEVBQUFBO0FBQUFBLFFBQUFBLG9CQUFBQSxTQUFBQSxHQUFBQTtBQUFBQSxVQUFBQSxNQUFBQSxRQUFBQSxDQUFBQSxHQUFBQTtBQUFBQSxpQkFBQUEsSUFBQUEsR0FBQUEsSUFBQUEsTUFBQUEsRUFBQUEsTUFBQUEs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LEVBQ2IsZ0JBQWdCO0FBQUEsRUFDaEIsWUFBWTtBQUFBLEVBQ1osWUFBWTtBQUFBLEVBQ1osU0FBUztBQUFBLEVBQ1QsWUFBWTtBQUFBLEVBQ1osY0FBYztBQUFBLEVBQ2QsZUFBZTtBQUFBLEVBQ2YsZUFBZTtBQUFBLEVBQ2YsZUFBZTtBQUFBLEVBQ2YsZUFBZTtBQUFBLEVBQ2YsWUFBWTtBQUFBLEVBQ1osVUFBVTtBQUFBLEVBQ1YsYUFBYTtBQUFBLEVBQ2IsU0FBUztBQUFBLEVBQ1QsU0FBUztBQUFBLEVBQ1QsWUFBWTtBQUFBLEVBQ1osV0FBVztBQUFBLEVBQ1gsYUFBYTtBQUFBLEVBQ2IsYUFBYTtBQUFBLEVBQ2IsU0FBUztBQUFBLEVBQ1QsV0FBVztBQUFBLEVBQ1gsWUFBWTtBQUFBLEVBQ1osTUFBTTtBQUFBLEVBQ04sV0FBVztBQUFBLEVBQ1gsTUFBTTtBQUFBLEVBQ04sT0FBTztBQUFBLEVBQ1AsYUFBYTtBQUFBLEVBQ2IsTUFBTTtBQUFBLEVBQ04sVUFBVTtBQUFBLEVBQ1YsU0FBUztBQUFBLEVBQ1QsV0FBVztBQUFBLEVBQ1gsUUFBUTtBQUFBLEVBQ1IsT0FBTztBQUFBLEVBQ1AsT0FBTztBQUFBLEVBQ1AsVUFBVTtBQUFBLEVBQ1YsZUFBZTtBQUFBLEVBQ2YsV0FBVztBQUFBLEVBQ1gsY0FBYztBQUFBLEVBQ2QsV0FBVztBQUFBLEVBQ1gsWUFBWTtBQUFBLEVBQ1osV0FBVztBQUFBLEVBQ1gsc0JBQXNCO0FBQUEsRUFDdEIsV0FBVztBQUFBLEVBQ1gsWUFBWTtBQUFBLEVBQ1osV0FBVztBQUFBLEVBQ1gsV0FBVztBQUFBLEVBQ1gsYUFBYTtBQUFBLEVBQ2IsZUFBZTtBQUFBLEVBQ2YsY0FBYztBQUFBLEVBQ2QsZ0JBQWdCO0FBQUEsRUFDaEIsZ0JBQWdCO0FBQUEsRUFDaEIsZ0JBQWdCO0FBQUEsRUFDaEIsYUFBYTtBQUFBLEVBQ2IsTUFBTTtBQUFBLEVBQ04sV0FBVztBQUFBLEVBQ1gsT0FBTztBQUFBLEVBQ1AsU0FBUztBQUFBLEVBQ1QsUUFBUTtBQUFBLEVBQ1Isa0JBQWtCO0FBQUEsRUFDbEIsWUFBWTtBQUFBLEVBQ1osY0FBYztBQUFBLEVBQ2QsY0FBYztBQUFBLEVBQ2QsZ0JBQWdCO0FBQUEsRUFDaEIsaUJBQWlCO0FBQUEsRUFDakIsbUJBQW1CO0FBQUEsRUFDbkIsaUJBQWlCO0FBQUEsRUFDakIsaUJBQWlCO0FBQUEsRUFDakIsY0FBYztBQUFBLEVBQ2QsV0FBVztBQUFBLEVBQ1gsV0FBVztBQUFBLEVBQ1gsVUFBVTtBQUFBLEVBQ1YsYUFBYTtBQUFBLEVBQ2IsTUFBTTtBQUFBLEVBQ04sU0FBUztBQUFBLEVBQ1QsT0FBTztBQUFBLEVBQ1AsV0FBVztBQUFBLEVBQ1gsUUFBUTtBQUFBLEVBQ1IsV0FBVztBQUFBLEVBQ1gsUUFBUTtBQUFBLEVBQ1IsZUFBZTtBQUFBLEVBQ2YsV0FBVztBQUFBLEVBQ1gsZUFBZTtBQUFBLEVBQ2YsZUFBZTtBQUFBLEVBQ2YsWUFBWTtBQUFBLEVBQ1osV0FBVztBQUFBLEVBQ1gsTUFBTTtBQUFBLEVBQ04sTUFBTTtBQUFBLEVBQ04sTUFBTTtBQUFBLEVBQ04sWUFBWTtBQUFBLEVBQ1osUUFBUTtBQUFBLEVBQ1IsZUFBZTtBQUFBLEVBQ2YsS0FBSztBQUFBLEVBQ0wsV0FBVztBQUFBLEVBQ1gsV0FBVztBQUFBLEVBQ1gsYUFBYTtBQUFBLEVBQ2IsUUFBUTtBQUFBLEVBQ1IsWUFBWTtBQUFBLEVBQ1osVUFBVTtBQUFBLEVBQ1YsVUFBVTtBQUFBLEVBQ1YsUUFBUTtBQUFBLEVBQ1IsUUFBUTtBQUFBLEVBQ1IsU0FBUztBQUFBLEVBQ1QsV0FBVztBQUFBLEVBQ1gsV0FBVztBQUFBLEVBQ1gsV0FBVztBQUFBLEVBQ1gsTUFBTTtBQUFBLEVBQ04sYUFBYTtBQUFBLEVBQ2IsV0FBVztBQUFBLEVBQ1gsS0FBSztBQUFBLEVBQ0wsTUFBTTtBQUFBLEVBQ04sU0FBUztBQUFBLEVBQ1QsUUFBUTtBQUFBLEVBQ1IsV0FBVztBQUFBLEVBQ1gsUUFBUTtBQUFBLEVBQ1IsT0FBTztBQUFBLEVBQ1AsT0FBTztBQUFBLEVBQ1AsWUFBWTtBQUFBLEVBQ1osUUFBUTtBQUFBLEVBQ1IsYUFBYTtBQUNmO0FBRUEsZUFBTyxPQUFPLE9BQU87QUFBQSxFQUNuQixLQUFLLFVBQVU7QUFDYixXQUFPLE9BQU8sT0FBTyxJQUFJLEtBQUssZUFBYSxNQUFNLFFBQVE7QUFBQSxFQUMzRDtBQUFBLEVBQ0EsY0FBYztBQUNaLFdBQU8sS0FBSyxJQUFJLEVBQUUsWUFBWTtBQUFBLEVBQ2hDO0FBQUEsRUFDQSxLQUFLO0FBQUE7QUFBQSxFQUNMLFdBQVc7QUFBQSxFQUNYLFlBQVk7QUFBQSxFQUNaLFdBQVc7QUFBQSxFQUNYLFdBQVc7QUFBQSxFQUNYLFVBQVU7QUFDWixDQUFDO0FBRUQsU0FBUyxrQkFBa0I7QUFDekIsU0FBTyxLQUFLLElBQUksRUFBRSxVQUFVO0FBQzlCO0FBRUEsU0FBUyxtQkFBbUI7QUFDMUIsU0FBTyxLQUFLLElBQUksRUFBRSxXQUFXO0FBQy9CO0FBRUEsU0FBUyxrQkFBa0I7QUFDekIsU0FBTyxXQUFXLElBQUksRUFBRSxVQUFVO0FBQ3BDO0FBRUEsU0FBUyxrQkFBa0I7QUFDekIsU0FBTyxLQUFLLElBQUksRUFBRSxVQUFVO0FBQzlCO0FBRWUsU0FBUixNQUF1QkMsU0FBUTtBQUNwQyxNQUFJQyxJQUFHO0FBQ1AsRUFBQUQsV0FBVUEsVUFBUyxJQUFJLEtBQUssRUFBRSxZQUFZO0FBQzFDLFVBQVFDLEtBQUksTUFBTSxLQUFLRCxPQUFNLE1BQU0sSUFBSUMsR0FBRSxDQUFDLEVBQUUsUUFBUUEsS0FBSSxTQUFTQSxHQUFFLENBQUMsR0FBRyxFQUFFLEdBQUcsTUFBTSxJQUFJLEtBQUtBLEVBQUMsSUFDdEYsTUFBTSxJQUFJLElBQUksSUFBS0EsTUFBSyxJQUFJLEtBQVFBLE1BQUssSUFBSSxLQUFRQSxNQUFLLElBQUksS0FBUUEsS0FBSSxNQUFTQSxLQUFJLE9BQVEsSUFBTUEsS0FBSSxJQUFNLENBQUMsSUFDaEgsTUFBTSxJQUFJLEtBQUtBLE1BQUssS0FBSyxLQUFNQSxNQUFLLEtBQUssS0FBTUEsTUFBSyxJQUFJLE1BQU9BLEtBQUksT0FBUSxHQUFJLElBQy9FLE1BQU0sSUFBSSxLQUFNQSxNQUFLLEtBQUssS0FBUUEsTUFBSyxJQUFJLEtBQVFBLE1BQUssSUFBSSxLQUFRQSxNQUFLLElBQUksS0FBUUEsTUFBSyxJQUFJLEtBQVFBLEtBQUksT0FBVUEsS0FBSSxPQUFRLElBQU1BLEtBQUksTUFBUSxHQUFJLElBQ3RKLFNBQ0NBLEtBQUksYUFBYSxLQUFLRCxPQUFNLEtBQUssSUFBSSxJQUFJQyxHQUFFLENBQUMsR0FBR0EsR0FBRSxDQUFDLEdBQUdBLEdBQUUsQ0FBQyxHQUFHLENBQUMsS0FDNURBLEtBQUksYUFBYSxLQUFLRCxPQUFNLEtBQUssSUFBSSxJQUFJQyxHQUFFLENBQUMsSUFBSSxNQUFNLEtBQUtBLEdBQUUsQ0FBQyxJQUFJLE1BQU0sS0FBS0EsR0FBRSxDQUFDLElBQUksTUFBTSxLQUFLLENBQUMsS0FDaEdBLEtBQUksY0FBYyxLQUFLRCxPQUFNLEtBQUssS0FBS0MsR0FBRSxDQUFDLEdBQUdBLEdBQUUsQ0FBQyxHQUFHQSxHQUFFLENBQUMsR0FBR0EsR0FBRSxDQUFDLENBQUMsS0FDN0RBLEtBQUksY0FBYyxLQUFLRCxPQUFNLEtBQUssS0FBS0MsR0FBRSxDQUFDLElBQUksTUFBTSxLQUFLQSxHQUFFLENBQUMsSUFBSSxNQUFNLEtBQUtBLEdBQUUsQ0FBQyxJQUFJLE1BQU0sS0FBS0EsR0FBRSxDQUFDLENBQUMsS0FDakdBLEtBQUksYUFBYSxLQUFLRCxPQUFNLEtBQUssS0FBS0MsR0FBRSxDQUFDLEdBQUdBLEdBQUUsQ0FBQyxJQUFJLEtBQUtBLEdBQUUsQ0FBQyxJQUFJLEtBQUssQ0FBQyxLQUNyRUEsS0FBSSxjQUFjLEtBQUtELE9BQU0sS0FBSyxLQUFLQyxHQUFFLENBQUMsR0FBR0EsR0FBRSxDQUFDLElBQUksS0FBS0EsR0FBRSxDQUFDLElBQUksS0FBS0EsR0FBRSxDQUFDLENBQUMsSUFDMUUsTUFBTSxlQUFlRCxPQUFNLElBQUksS0FBSyxNQUFNQSxPQUFNLENBQUMsSUFDakRBLFlBQVcsZ0JBQWdCLElBQUksSUFBSSxLQUFLLEtB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QUFHbEIsU0FBSyxhQUFhLGdDQUFnQyxDQUFDLFNBQXdCLElBQUksZ0JBQWdCLE1BQU0sSUFBSSxDQUFDO0FBR2hILFNBQUssd0JBQXdCLGdDQUFnQztBQUFBLE1BQzVELFNBQVM7QUFBQSxNQUNULFlBQVk7QUFBQSxJQUNiLENBQUM7QUFHSyxTQUFLLGNBQWMsWUFBWSxxQ0FBcUMsQ0FBQyxRQUFvQjtBQUU5RixZQUFNLGVBQWUsS0FBSyxJQUFJLFVBQVUsZ0JBQWdCLDhCQUE4QixFQUFFLENBQUM7QUFDekYsVUFBSSxjQUFjO0FBRWpCLGFBQUssSUFBSSxVQUFVLGNBQWMsWUFBWTtBQUFBLE1BQzlDLE9BQU87QUFFTixZQUFJLE9BQU8sS0FBSyxJQUFJLFVBQVUsUUFBUSxJQUFJO0FBRTFDLGFBQUssYUFBYTtBQUFBLFVBQ2pCLE1BQU07QUFBQSxVQUNOLFFBQVE7QUFBQSxRQUNULENBQUM7QUFBQSxNQUNGO0FBQUEsSUFDSyxDQUFDO0FBQUEsRUFHTDtBQUFBLEVBRUgsTUFBTSxlQUFlO0FBQ2QsU0FBSyxXQUFXLE9BQU8sT0FBTyxDQUFDLEdBQUcsMEJBQTBCLE1BQU0sS0FBSyxTQUFTLENBQUM7QUFBQSxFQUNyRjtBQUFBLEVBRUgsTUFBTSxlQUFlO0FBQ2QsVUFBTSxLQUFLLFNBQVMsS0FBSyxRQUFRO0FBQUEsRUFDckM7QUFBQSxFQUVBLFdBQVc7QUFBQSxFQUVkO0FBRUQ7IiwKICAibmFtZXMiOiBbInR5cGUiLCAicmVzdWx0IiwgInByb3RvdHlwZSIsICJleHRlbmQiLCAiYSIsICJjb250ZW50IiwgImRlc2NyaXB0b3JzIiwgImZpbHRlciIsICJtIiwgImhhc093blByb3BlcnR5IiwgIm5vb3AiLCAidXRpbHMiLCAiaW5kZXgiLCAiZW5jb2RlIiwgInRvU3RyaW5nIiwgImlkIiwgIlVSTFNlYXJjaFBhcmFtcyIsICJGb3JtRGF0YSIsICJCbG9iIiwgInBsYXRmb3JtIiwgImlzRm9ybURhdGEiLCAiaXNGaWxlTGlzdCIsICJzZWxmIiwgImZvcm1hdCIsICJkZWZhdWx0cyIsICJBeGlvc0hlYWRlcnMiLCAidHJhbnNmb3JtIiwgIm1pbiIsICJub3ciLCAidGltZXIiLCAib3JpZ2luIiwgIm1lcmdlIiwgInRpbWVvdXQiLCAic2lnbmFsIiwgImRvbmUiLCAicmVzIiwgImNvbXBvc2VTaWduYWxzIiwgImFkYXB0ZXJzIiwgInZhbGlkYXRvcnMiLCAidmFsaWRhdG9yIiwgIkludGVyY2VwdG9yTWFuYWdlciIsICJjIiwgIkF4aW9zIiwgImNyZWF0ZSIsICJDYW5jZWxUb2tlbiIsICJIdHRwU3RhdHVzQ29kZSIsICJleHBvcnRzIiwgImV4cG9ydHMiLCAiZXJyb3JzXzEiLCAiZXhwb3J0cyIsICJleHBvcnRzIiwgImVycm9yc18xIiwgIm1lc3NhZ2VzXzEiLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiYyIsICJ4IiwgIm0iLCAidHJpbVdyYXBwZXJzIiwgInN0ciIsICJyZXBsYWNlIiwgInRyaW0iLCAidHJpbU9yIiwgIm9yUG9zaXRpb24iLCAiaW5kZXhPZiIsICJzdWJzdHJpbmciLCAiZ2V0VmFsdWUiLCAicmF3IiwgImtleSIsICJjbGVhbnNlZCIsICJleHRyYVByb3BlcnR5UGF0dGVybiIsICJlbmRpbmdQYXR0ZXJuIiwgImxpbmtzIiwgIm1hdGNoIiwgImxpbmtzUGF0dGVybiIsICJzcGxpdCIsICJsaW5rU2VwYXJhdG9yUGF0dGVybiIsICJmaWx0ZXIiLCAiZSIsICJ0ZXh0IiwgImRhdGFUeXBlIiwgImdsb2JhbFBhdHRlcm4iLCAicGFyc2VQYXR0ZXJuIiwgInBhcnNlIiwgInZhcmlhYmxlIiwgIm5hbWUiLCAic291cmNlIiwgIm1hdGNoZXMiLCAiaW5zdGFuY2VzIiwgIm1hcCIsICJzb3VyY2VBZnRlciIsICJyZWR1Y2UiLCAibWVtbyIsICJpbmRleCIsICJET19OT1RfUkVQTEFDRSIsICJieURhdGFIYW5kbGVyIiwgImhhbmRsZXIiLCAiY29udGV4dCIsICJkYXRhIiwgIk9iamVjdCIsICJhc3NpZ24iLCAiZXh0cmFjdERhdGEiLCAiZGF0YVR5cGVzIiwgInR5cGUiLCAiZmluZFByb3BlcnR5TGlzdCIsICJrZXlWYWx1ZVBhaXJzIiwgImtleVZhbHVlR2xvYmFsUGF0dGVybiIsICJyZXN1bHQiLCAia2V5VmFsdWVQYXR0ZXJuIiwgImV4ZWMiLCAicmF3S2V5IiwgInJhd1ZhbHVlIiwgImNhbWVsQ2FzZSIsICJpdGVtIiwgImZpbGxWYXJpYWJsZSIsICJ2YWx1ZSIsICJzaW1wbGlmeURhdGFWYWx1ZXMiLCAibG9nIiwgIkpTT04iLCAic3RyaW5naWZ5IiwgImZpbmQiLCAicGF0dGVybiIsICJtYXRjaGVkIiwgImRhdGFWYWx1ZSIsICJwYXJzZUludCIsICJmaWxsVmFyaWFibGVzIiwgIm9wdGlvbnMiLCAiRGF0ZSIsICJBcnJheSIsICJpc0FycmF5IiwgImtleXMiLCAiZmlsbGVkIiwgImhhbmRsZVNtYWxsRGF0YSIsICJzbWFsbERhdGFUeXBlIiwgInByaW1hcnkiLCAic2Vjb25kYXJ5IiwgImdldFZhcmlhYmxlVmFsdWUiLCAic21hbGxEYXRhIiwgInJlZHVjZVZhcmlhYmxlIiwgImZsb2F0IiwgIm51bWJlclBhcnNlIiwgInBhcnNlRmxvYXQiLCAiaXNOYU4iLCAiZGF0ZVZhbHVlIiwgInZhcmlhYmxlVmFsdWUiLCAiYnlWYXJpYWJsZVJlZHVjdGlvbiIsICJyZWR1Y2VkIiwgImV4dHJhY3RQcm9wZXJ0aWVzIiwgInRyYW5zZm9ybVByb3BlcnRpZXMiLCAicHJvcGVydGllcyIsICJ0cmFuc2Zvcm1lZCIsICJibGFua05hbWVQYXR0ZXJuIiwgImlkIiwgImJsYW5rTmFtZSIsICJibGFua0luZm8iLCAiYmxhbmtJbmZvUGF0dGVybiIsICJmaW5kT3V0ZXJJbmRleCIsICJsYXN0T3BlbiIsICJpIiwgImxlbmd0aCIsICJuZXh0VHdvIiwgInN1YnN0ciIsICJwb3AiLCAicHVzaCIsICJzdGFydE1hdGNoIiwgImluZm9Cb3hTdGFydFBhdHRlcm4iLCAic291cmNlTGVmdCIsICJzdGFydEluZGV4IiwgIndpdGhTdGFydCIsICJvdXRlckluZGV4IiwgImV4dHJhY3RJbmZvYm94ZXMiLCAicGFyc2VkIiwgImluZm9ib3hlcyIsICJjbGVhblNvdXJjZSIsICJyZW1vdmVTbWFsbCIsICJyZW1vdmVSZWZlcmVuY2VzIiwgInRyYW5zZm9ybVJvd1NwYW4iLCAicm93cyIsICJ0cmFuc2Zvcm1DZWxscyIsICJtZXJnZWQiLCAiY2VsbHMiLCAiayIsICJvIiwgImpvaW4iLCAiY2xlYW4iLCAibGlua1BhdHRlcm4iLCAibSIsICJ4IiwgInBhcnNlUm93IiwgImNvdW50TWF0Y2giLCAiY291bnQiLCAiaWNvbnMiLCAiZ2V0TWF0Y2hlcyIsICJwYXJzZVRhYmxlRGF0YSIsICJyb3dQYXR0ZXJuIiwgInQiLCAiZWwiLCAicm93UGF0dGVyblNpbmdsZSIsICJzbGljZSIsICJnZXRUYWJsZXMiLCAidGFibGVTdGFydHMiLCAidGFibGVTdGFydFBhdHRlcm4iLCAidGFibGVFbmRzIiwgInRhYmxlRW5kUGF0dGVybiIsICJ0YWJsZVN0YXJ0IiwgInRhYmxlRW5kIiwgIkVycm9yIiwgImVuZCIsICJzdGFydCIsICJsYXN0IiwgImxpc3QiLCAidW5kZWZpbmVkIiwgInBhcnNlSW5mb2JveCIsICJpbmZvYm94IiwgInJlcyIsICJzaGlmdCIsICJmb3JFYWNoIiwgIm5leHQiLCAiZ2VuZXJhbCIsICJ0YWJsZXMiLCAicGFyc2VUYWJsZXMiLCAiYnNUYWJsZXMiLCAicGFyc2VCc1RhYmxlcyIsICJsaXN0cyIsICJwYXJzZUxpc3RzIiwgInNtYWxsR2xvYmFsUGF0dGVybiIsICJzbWFsbFBhdHRlcm4iLCAicmVzdWx0cyIsICJmbGFnR2xvYmFsUGF0dGVybiIsICJmbGFnUGF0dGVybiIsICJjb29yZHNHbG9iYWxQYXR0ZXJuIiwgImNvb3Jkc1BhdHRlcm4iLCAibGlzdEl0ZW1QcmVmaXhQYXR0ZXJuIiwgInVuYnVsbGV0ZWRMaXN0R2xvYmFsUGF0dGVybiIsICJ1bmJ1bGxldGVkTGlzdEl0ZW1QYXR0ZXJuIiwgImxpc3RJdGVtcyIsICJwbGFpbkxpc3RHbG9iYWxQYXR0ZXJuIiwgInBsYWluTGlzdEl0ZW1QYXR0ZXJuIiwgIm1hcnJpYWdlR2xvYmFsUGF0dGVybiIsICJtYXJyaWFnZVBhdHRlcm4iLCAibmJheUdsb2JhbFBhdHRlcm4iLCAibmJheVBhdHRlcm4iLCAieWVhciIsICJvdGhlckdsb2JhbFBhdHRlcm4iLCAib3RoZXJQYXR0ZXJuIiwgImxhYmVsIiwgImhsaXN0R2xvYmFsUGF0dGVybiIsICJobGlzdFBhdHRlcm4iLCAiYmlydGhEYXRlR2xvYmFsUGF0dGVybiIsICJiaXJ0aERhdGVQYXR0ZXJuIiwgIm1pbGxpc0luWWVhciIsICJtb250aCIsICJkYXkiLCAiZGF0ZSIsICJNYXRoIiwgImZsb29yIiwgIm5vdyIsICJTeW1ib2wiLCAibGFiZWxlZERhdGVHbG9iYWxQYXR0ZXJuIiwgImxhYmVsZWREYXRlUGF0dGVybiIsICJmaXJzdFBpcGVJbmRleCIsICJwb3RlbnRpYWxEYXRlIiwgImdldFRpbWUiLCAiZGVhdGhEYXRlR2xvYmFsUGF0dGVybiIsICJkZWF0aERhdGVQYXR0ZXJuIiwgImRlYXRoWWVhciIsICJkZWF0aE1vbnRoIiwgImRlYXRoRGF5IiwgImJpcnRoWWVhciIsICJiaXJ0aE1vbnRoIiwgImJpcnRoRGF5IiwgImRlYXRoRGF0ZSIsICJiaXJ0aERhdGUiLCAiTnVtYmVyIiwgIlVSTEdsb2JhbFBhdHRlcm4iLCAiVVJMUGF0dGVybiIsICJ3ZWJzaXRlR2xvYmFsUGF0dGVybiIsICJ3ZWJzaXRlUGF0dGVybiIsICJwcm90b2NvbCIsICJob3N0bmFtZSIsICJwYXRoIiwgInByb3BQYXR0ZXJuIiwgIm9iaiIsICJjb252ZXJ0R2xvYmFsUGF0dGVybiIsICJjb252ZXJ0UGF0dGVybiIsICJmaWxtRGF0ZXNQYXR0ZXJuIiwgImZpbG1EYXRlUGF0dGVybkdsb2JhbCIsICJmaWxtRGF0ZVBhdHRlcm4iLCAibG9jYXRpb24iLCAicmVmIiwgImF0dHJpYnV0ZUdsb2JhbFBhdHRlcm4iLCAiYXR0cmlidXRlUGF0dGVybiIsICJhdHRyaWJ1dGVzU291cmNlIiwgImNvbnRlbnRzIiwgImF0dHJpYnV0ZXMiLCAiYXR0ciIsICJyIiwgInJlZjEiLCAicmVmMiIsICJzbWFsbCIsICJmb3JtYXROdW0iLCAiZmxhZyIsICJjb29yZHMiLCAibWFycmlhZ2VzIiwgImJpcnRoRGF0ZXMiLCAibGFiZWxlZERhdGVzIiwgImRlYXRoRGF0ZXMiLCAidW5idWxsZXRlZExpc3RzIiwgIndlYnNpdGUiLCAiaGxpc3QiLCAidXJsIiwgImNvbnZlcnQiLCAibmJheSIsICJmaWxtRGF0ZXMiLCAib3RoZXIiLCAiZXh0cmEiLCAicGxhaW5MaXN0cyIsICJ1bm1hcmtlZExpc3RzIiwgImNyZWF0ZURhdGFUeXBlSGFuZGxlciIsICJSZWdFeHAiLCAibnVtYmVyIiwgInBhcnNlRW5nbGlzaCIsICJwYXJzZVNwYW5pc2giLCAidG9TdHJpbmciLCAiaGVhZGVyc1BhdHRlcm4iLCAiY2VsbFNlcGFyYXRvclBhdHRlcm4iLCAibGlua05hbWVQYXR0ZXJuIiwgImlubGluZUhlYWRlclBhdHRlcm4iLCAiYWN0aW9uUGF0dGVybiIsICJyb3dTcGFuQ291bnRQYXR0ZXJuIiwgInN0cmlwTGlua3MiLCAiY2FwdHVyZSIsICJyZW1vdmVBY3Rpb25zIiwgInRyYW5zZm9ybUNlbGwiLCAicm93IiwgImZpbmRJbmRleCIsICJwIiwgImZpbmRUYWJsZVN0YXJ0IiwgImZpbmRUYWJsZUVuZCIsICJnZXRIZWFkZXJzIiwgImhlYWRlcnMiLCAiZ2V0Um93cyIsICJzcGFuTiIsICJzcGFuQ291bnQiLCAicm93c0luU3BhbiIsICJnZXROZXh0VGFibGUiLCAibGVmdCIsICJhIiwgImNhbWVsY2FzZSIsICJjbGVhbmVkU291cmNlIiwgImttUGF0dGVybiIsICJoZWFkaW5nUGF0dGVybiIsICJzdWJoZWFkaW5nUGF0dGVybiIsICJoZWFkaW5ncyIsICJzdWJoZWFkaW5ncyIsICJoZWFkaW5nc0JlZm9yZSIsICJoZWFkaW5nIiwgInRhYmxlIiwgInN1YmhlYWRpbmdzQmVmb3JlIiwgInN1YmhlYWRpbmciLCAicmVzcG9uc2UiLCAicmVzdWx0IiwgImltYWdlcyIsICJjb29yZGluYXRlcyIsICJmb3JtYXQiLCAiZXhwb3J0cyIsICJleHBvcnRzIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgIm0iLCAicmVxdWVzdF8xIiwgImVycm9yc18xIiwgIm1lc3NhZ2VzXzEiLCAidXRpbHNfMSIsICJ3aWtpIiwgInJlc3VsdCIsICJwYWdlIiwgImxhbmciLCAidHlwZSIsICJmb3JtYXQiLCAiaW1wb3J0X29ic2lkaWFuIiwgImEiLCAiYSIsICJ4IiwgImEiLCAieCIsICJzdGFydCIsICJ0aWNrcyIsICJjb3B5IiwgInR5cGUiLCAiYyIsICJkb2N1bWVudCIsICJtIiwgIngiLCAibSIsICJtIiwgImRhdHVtIiwgIngiLCAibSIsICJzZWxlY3Rpb24iLCAibSIsICJtIiwgImFzY2VuZGluZyIsICJhIiwgIm0iLCAibSIsICJtIiwgImNyZWF0ZSIsICJjcmVhdGUiLCAicGFyc2VUeXBlbmFtZXMiLCAibSIsICJ0eXBlIiwgIndpbmRvdyIsICJkaXNwYXRjaF9kZWZhdWx0IiwgIm0iLCAiZGlzcGF0Y2hfZGVmYXVsdCIsICJzZWxlY3RfZGVmYXVsdCIsICJyb290IiwgInNlbGVjdGlvbiIsICJzZWxlY3RfZGVmYXVsdCIsICJjb25zdGFudF9kZWZhdWx0IiwgIngiLCAidHlwZSIsICJ4IiwgInkiLCAiZGlzcGF0Y2giLCAiZmlsdGVyIiwgInNlbGVjdGlvbiIsICJzZWxlY3RfZGVmYXVsdCIsICJjIiwgImNvbnRhaW5lciIsICJkaXNwYXRjaCIsICJ0eXBlIiwgImV2ZW50IiwgInRvdWNoIiwgImNvbnN0YW50X2RlZmF1bHQiLCAiZm9ybWF0IiwgIm0iLCAiYSIsICJtaW4iLCAibWF4IiwgImNvbnN0YW50X2RlZmF1bHQiLCAieCIsICJhIiwgInkiLCAieSIsICJhIiwgImNvbnN0YW50X2RlZmF1bHQiLCAieSIsICJjb2xvciIsICJyZ2IiLCAic3RhcnQiLCAiYSIsICJjIiwgIngiLCAiYSIsICJ4IiwgImMiLCAiYSIsICJhIiwgImEiLCAiYyIsICJ6ZXJvIiwgImEiLCAiaSIsICJhIiwgImMiLCAiY29uc3RhbnRfZGVmYXVsdCIsICJhIiwgImEiLCAiYyIsICJtIiwgImEiLCAieCIsICJub3ciLCAiaWQiLCAiaW5kZXgiLCAiZ2V0IiwgInNldCIsICJzZWxmIiwgInN0YXJ0IiwgImVtcHR5IiwgImludGVycnVwdF9kZWZhdWx0IiwgImlkIiwgInNldCIsICJnZXQiLCAidHJhbnNpdGlvbiIsICJhIiwgImMiLCAiYXR0clJlbW92ZSIsICJhdHRyUmVtb3ZlTlMiLCAiYXR0ckNvbnN0YW50IiwgImF0dHJDb25zdGFudE5TIiwgImF0dHJGdW5jdGlvbiIsICJhdHRyRnVuY3Rpb25OUyIsICJhdHRyX2RlZmF1bHQiLCAiaWQiLCAiZ2V0IiwgImlkIiwgInNldCIsICJnZXQiLCAiaWQiLCAic2V0IiwgImdldCIsICJpZCIsICJzZXQiLCAiZmlsdGVyX2RlZmF1bHQiLCAibSIsICJtZXJnZV9kZWZhdWx0IiwgInRyYW5zaXRpb24iLCAibSIsICJpZCIsICJzZXQiLCAib25fZGVmYXVsdCIsICJnZXQiLCAiaWQiLCAicmVtb3ZlX2RlZmF1bHQiLCAic2VsZWN0X2RlZmF1bHQiLCAiaWQiLCAibSIsICJnZXQiLCAic2VsZWN0QWxsX2RlZmF1bHQiLCAiaWQiLCAibSIsICJjaGlsZHJlbiIsICJpbmhlcml0IiwgImdldCIsICJTZWxlY3Rpb24iLCAic2VsZWN0aW9uX2RlZmF1bHQiLCAic3R5bGVSZW1vdmUiLCAic3R5bGVDb25zdGFudCIsICJzdHlsZUZ1bmN0aW9uIiwgImlkIiwgInJlbW92ZSIsICJzZXQiLCAic3R5bGVfZGVmYXVsdCIsICJ0ZXh0Q29uc3RhbnQiLCAidGV4dEZ1bmN0aW9uIiwgInRleHRfZGVmYXVsdCIsICJtIiwgImluaGVyaXQiLCAiZ2V0IiwgImlkIiwgInNldCIsICJpZCIsICJzZWxlY3RfZGVmYXVsdCIsICJzZWxlY3RBbGxfZGVmYXVsdCIsICJmaWx0ZXJfZGVmYXVsdCIsICJtZXJnZV9kZWZhdWx0IiwgInNlbGVjdGlvbl9kZWZhdWx0IiwgIm9uX2RlZmF1bHQiLCAiYXR0cl9kZWZhdWx0IiwgInN0eWxlX2RlZmF1bHQiLCAidGV4dF9kZWZhdWx0IiwgInJlbW92ZV9kZWZhdWx0IiwgImlkIiwgInRyYW5zaXRpb25fZGVmYXVsdCIsICJtIiwgImludGVycnVwdF9kZWZhdWx0IiwgInRyYW5zaXRpb25fZGVmYXVsdCIsICJ4IiwgInkiLCAieCIsICJ5IiwgIngiLCAieSIsICJ4IiwgInkiLCAiZGF0YV9kZWZhdWx0IiwgIngiLCAieSIsICJ4MiIsICJ5MiIsICJ4MyIsICJ5MyIsICJyZW1vdmVfZGVmYXVsdCIsICJ4IiwgInkiLCAic2l6ZV9kZWZhdWx0IiwgIngiLCAieSIsICJjb3B5IiwgImRhdGFfZGVmYXVsdCIsICJyZW1vdmVfZGVmYXVsdCIsICJzaXplX2RlZmF1bHQiLCAiY29uc3RhbnRfZGVmYXVsdCIsICJ4IiwgImNvbnN0YW50X2RlZmF1bHQiLCAieCIsICJ5IiwgImZpbmQiLCAibGlua3MiLCAiaWQiLCAiY29uc3RhbnRfZGVmYXVsdCIsICJ4IiwgInkiLCAibSIsICJpIiwgIngiLCAieSIsICJjb25zdGFudF9kZWZhdWx0IiwgIngiLCAieSIsICJub2RlIiwgInN0cmVuZ3RoIiwgImMiLCAieDIiLCAieCIsICJ4IiwgIngiLCAieCIsICJ4IiwgIngiLCAibG9jYWxlIiwgInplcm8iLCAidHlwZSIsICJmb3JtYXQiLCAiYyIsICJmb3JtYXRQcmVmaXgiLCAidmFsdWUiLCAibWF4IiwgIngiLCAibnVtYmVyIiwgIngiLCAiaWRlbnRpdHkiLCAieCIsICJhIiwgImkiLCAidHJhbnNmb3JtIiwgInkiLCAibnVtYmVyIiwgInN0YXJ0IiwgInN0YXJ0IiwgImxpbmVhciIsICJjb25zdGFudF9kZWZhdWx0IiwgIngiLCAidHlwZSIsICJ0cmFuc2Zvcm0iLCAiZGlzcGF0Y2giLCAieCIsICJ5IiwgImlkZW50aXR5IiwgIm5vcHJvcGFnYXRpb24iLCAibm9ldmVudF9kZWZhdWx0IiwgImRlZmF1bHRGaWx0ZXIiLCAiaWRlbnRpdHkiLCAiZGVmYXVsdFRvdWNoYWJsZSIsICJ0cmFuc2Zvcm0iLCAiem9vbV9kZWZhdWx0IiwgImZpbHRlciIsICJzZWxlY3Rpb24iLCAieCIsICJ5IiwgImV4dGVudCIsICJ0cmFuc2l0aW9uIiwgImEiLCAidHlwZSIsICJzZWxlY3RfZGVmYXVsdCIsICJub2V2ZW50X2RlZmF1bHQiLCAibm9wcm9wYWdhdGlvbiIsICJldmVudCIsICJjb25zdGFudF9kZWZhdWx0IiwgImxpbmtzIiwgIndpa2kiLCAic3VtbWFyeSIsICJyZWxhdGVkIiwgInNlbGVjdF9kZWZhdWx0IiwgInpvb21fZGVmYXVsdCIsICJ0eXBlIiwgImluZGV4IiwgImNvbG9yIiwgInF1YWR0cmVlIiwgIngyIiwgInkyIiwgIngiLCAieSIsICJjb250ZW50IiwgImlkIiwgIm5vZGUiLCAiX2EiLCAiX2IiLCAibGlua3MiLCAibGluZWFyIiwgInRyYW5zZm9ybSJdCn0K
