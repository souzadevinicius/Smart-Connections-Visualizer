/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/axios/dist/browser/axios.cjs
var require_axios = __commonJS({
  "node_modules/axios/dist/browser/axios.cjs"(exports2, module2) {
    "use strict";
    function bind(fn, thisArg) {
      return function wrap() {
        return fn.apply(thisArg, arguments);
      };
    }
    var { toString } = Object.prototype;
    var { getPrototypeOf } = Object;
    var kindOf = ((cache) => (thing) => {
      const str = toString.call(thing);
      return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
    })(/* @__PURE__ */ Object.create(null));
    var kindOfTest = (type2) => {
      type2 = type2.toLowerCase();
      return (thing) => kindOf(thing) === type2;
    };
    var typeOfTest = (type2) => (thing) => typeof thing === type2;
    var { isArray } = Array;
    var isUndefined = typeOfTest("undefined");
    function isBuffer(val) {
      return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);
    }
    var isArrayBuffer = kindOfTest("ArrayBuffer");
    function isArrayBufferView(val) {
      let result2;
      if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
        result2 = ArrayBuffer.isView(val);
      } else {
        result2 = val && val.buffer && isArrayBuffer(val.buffer);
      }
      return result2;
    }
    var isString = typeOfTest("string");
    var isFunction = typeOfTest("function");
    var isNumber = typeOfTest("number");
    var isObject = (thing) => thing !== null && typeof thing === "object";
    var isBoolean = (thing) => thing === true || thing === false;
    var isPlainObject = (val) => {
      if (kindOf(val) !== "object") {
        return false;
      }
      const prototype2 = getPrototypeOf(val);
      return (prototype2 === null || prototype2 === Object.prototype || Object.getPrototypeOf(prototype2) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);
    };
    var isDate = kindOfTest("Date");
    var isFile = kindOfTest("File");
    var isBlob = kindOfTest("Blob");
    var isFileList = kindOfTest("FileList");
    var isStream = (val) => isObject(val) && isFunction(val.pipe);
    var isFormData = (thing) => {
      let kind;
      return thing && (typeof FormData === "function" && thing instanceof FormData || isFunction(thing.append) && ((kind = kindOf(thing)) === "formdata" || // detect form-data instance
      kind === "object" && isFunction(thing.toString) && thing.toString() === "[object FormData]"));
    };
    var isURLSearchParams = kindOfTest("URLSearchParams");
    var [isReadableStream, isRequest, isResponse, isHeaders] = ["ReadableStream", "Request", "Response", "Headers"].map(kindOfTest);
    var trim = (str) => str.trim ? str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
    function forEach(obj, fn, { allOwnKeys = false } = {}) {
      if (obj === null || typeof obj === "undefined") {
        return;
      }
      let i;
      let l;
      if (typeof obj !== "object") {
        obj = [obj];
      }
      if (isArray(obj)) {
        for (i = 0, l = obj.length; i < l; i++) {
          fn.call(null, obj[i], i, obj);
        }
      } else {
        const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
        const len = keys.length;
        let key;
        for (i = 0; i < len; i++) {
          key = keys[i];
          fn.call(null, obj[key], key, obj);
        }
      }
    }
    function findKey(obj, key) {
      key = key.toLowerCase();
      const keys = Object.keys(obj);
      let i = keys.length;
      let _key;
      while (i-- > 0) {
        _key = keys[i];
        if (key === _key.toLowerCase()) {
          return _key;
        }
      }
      return null;
    }
    var _global = (() => {
      if (typeof globalThis !== "undefined")
        return globalThis;
      return typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : global;
    })();
    var isContextDefined = (context) => !isUndefined(context) && context !== _global;
    function merge() {
      const { caseless } = isContextDefined(this) && this || {};
      const result2 = {};
      const assignValue = (val, key) => {
        const targetKey = caseless && findKey(result2, key) || key;
        if (isPlainObject(result2[targetKey]) && isPlainObject(val)) {
          result2[targetKey] = merge(result2[targetKey], val);
        } else if (isPlainObject(val)) {
          result2[targetKey] = merge({}, val);
        } else if (isArray(val)) {
          result2[targetKey] = val.slice();
        } else {
          result2[targetKey] = val;
        }
      };
      for (let i = 0, l = arguments.length; i < l; i++) {
        arguments[i] && forEach(arguments[i], assignValue);
      }
      return result2;
    }
    var extend2 = (a2, b, thisArg, { allOwnKeys } = {}) => {
      forEach(b, (val, key) => {
        if (thisArg && isFunction(val)) {
          a2[key] = bind(val, thisArg);
        } else {
          a2[key] = val;
        }
      }, { allOwnKeys });
      return a2;
    };
    var stripBOM = (content2) => {
      if (content2.charCodeAt(0) === 65279) {
        content2 = content2.slice(1);
      }
      return content2;
    };
    var inherits = (constructor, superConstructor, props, descriptors2) => {
      constructor.prototype = Object.create(superConstructor.prototype, descriptors2);
      constructor.prototype.constructor = constructor;
      Object.defineProperty(constructor, "super", {
        value: superConstructor.prototype
      });
      props && Object.assign(constructor.prototype, props);
    };
    var toFlatObject = (sourceObj, destObj, filter2, propFilter) => {
      let props;
      let i;
      let prop;
      const merged = {};
      destObj = destObj || {};
      if (sourceObj == null)
        return destObj;
      do {
        props = Object.getOwnPropertyNames(sourceObj);
        i = props.length;
        while (i-- > 0) {
          prop = props[i];
          if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
            destObj[prop] = sourceObj[prop];
            merged[prop] = true;
          }
        }
        sourceObj = filter2 !== false && getPrototypeOf(sourceObj);
      } while (sourceObj && (!filter2 || filter2(sourceObj, destObj)) && sourceObj !== Object.prototype);
      return destObj;
    };
    var endsWith = (str, searchString, position) => {
      str = String(str);
      if (position === void 0 || position > str.length) {
        position = str.length;
      }
      position -= searchString.length;
      const lastIndex = str.indexOf(searchString, position);
      return lastIndex !== -1 && lastIndex === position;
    };
    var toArray = (thing) => {
      if (!thing)
        return null;
      if (isArray(thing))
        return thing;
      let i = thing.length;
      if (!isNumber(i))
        return null;
      const arr = new Array(i);
      while (i-- > 0) {
        arr[i] = thing[i];
      }
      return arr;
    };
    var isTypedArray = ((TypedArray) => {
      return (thing) => {
        return TypedArray && thing instanceof TypedArray;
      };
    })(typeof Uint8Array !== "undefined" && getPrototypeOf(Uint8Array));
    var forEachEntry = (obj, fn) => {
      const generator = obj && obj[Symbol.iterator];
      const iterator = generator.call(obj);
      let result2;
      while ((result2 = iterator.next()) && !result2.done) {
        const pair = result2.value;
        fn.call(obj, pair[0], pair[1]);
      }
    };
    var matchAll = (regExp, str) => {
      let matches;
      const arr = [];
      while ((matches = regExp.exec(str)) !== null) {
        arr.push(matches);
      }
      return arr;
    };
    var isHTMLForm = kindOfTest("HTMLFormElement");
    var toCamelCase = (str) => {
      return str.toLowerCase().replace(
        /[-_\s]([a-z\d])(\w*)/g,
        function replacer(m2, p1, p2) {
          return p1.toUpperCase() + p2;
        }
      );
    };
    var hasOwnProperty = (({ hasOwnProperty: hasOwnProperty2 }) => (obj, prop) => hasOwnProperty2.call(obj, prop))(Object.prototype);
    var isRegExp = kindOfTest("RegExp");
    var reduceDescriptors = (obj, reducer) => {
      const descriptors2 = Object.getOwnPropertyDescriptors(obj);
      const reducedDescriptors = {};
      forEach(descriptors2, (descriptor, name) => {
        let ret;
        if ((ret = reducer(descriptor, name, obj)) !== false) {
          reducedDescriptors[name] = ret || descriptor;
        }
      });
      Object.defineProperties(obj, reducedDescriptors);
    };
    var freezeMethods = (obj) => {
      reduceDescriptors(obj, (descriptor, name) => {
        if (isFunction(obj) && ["arguments", "caller", "callee"].indexOf(name) !== -1) {
          return false;
        }
        const value = obj[name];
        if (!isFunction(value))
          return;
        descriptor.enumerable = false;
        if ("writable" in descriptor) {
          descriptor.writable = false;
          return;
        }
        if (!descriptor.set) {
          descriptor.set = () => {
            throw Error("Can not rewrite read-only method '" + name + "'");
          };
        }
      });
    };
    var toObjectSet = (arrayOrString, delimiter) => {
      const obj = {};
      const define = (arr) => {
        arr.forEach((value) => {
          obj[value] = true;
        });
      };
      isArray(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));
      return obj;
    };
    var noop2 = () => {
    };
    var toFiniteNumber = (value, defaultValue) => {
      return value != null && Number.isFinite(value = +value) ? value : defaultValue;
    };
    var ALPHA = "abcdefghijklmnopqrstuvwxyz";
    var DIGIT = "0123456789";
    var ALPHABET = {
      DIGIT,
      ALPHA,
      ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT
    };
    var generateString = (size = 16, alphabet = ALPHABET.ALPHA_DIGIT) => {
      let str = "";
      const { length } = alphabet;
      while (size--) {
        str += alphabet[Math.random() * length | 0];
      }
      return str;
    };
    function isSpecCompliantForm(thing) {
      return !!(thing && isFunction(thing.append) && thing[Symbol.toStringTag] === "FormData" && thing[Symbol.iterator]);
    }
    var toJSONObject = (obj) => {
      const stack = new Array(10);
      const visit = (source, i) => {
        if (isObject(source)) {
          if (stack.indexOf(source) >= 0) {
            return;
          }
          if (!("toJSON" in source)) {
            stack[i] = source;
            const target = isArray(source) ? [] : {};
            forEach(source, (value, key) => {
              const reducedValue = visit(value, i + 1);
              !isUndefined(reducedValue) && (target[key] = reducedValue);
            });
            stack[i] = void 0;
            return target;
          }
        }
        return source;
      };
      return visit(obj, 0);
    };
    var isAsyncFn = kindOfTest("AsyncFunction");
    var isThenable = (thing) => thing && (isObject(thing) || isFunction(thing)) && isFunction(thing.then) && isFunction(thing.catch);
    var _setImmediate = ((setImmediateSupported, postMessageSupported) => {
      if (setImmediateSupported) {
        return setImmediate;
      }
      return postMessageSupported ? ((token, callbacks) => {
        _global.addEventListener("message", ({ source, data }) => {
          if (source === _global && data === token) {
            callbacks.length && callbacks.shift()();
          }
        }, false);
        return (cb) => {
          callbacks.push(cb);
          _global.postMessage(token, "*");
        };
      })(`axios@${Math.random()}`, []) : (cb) => setTimeout(cb);
    })(
      typeof setImmediate === "function",
      isFunction(_global.postMessage)
    );
    var asap = typeof queueMicrotask !== "undefined" ? queueMicrotask.bind(_global) : typeof process !== "undefined" && process.nextTick || _setImmediate;
    var utils$1 = {
      isArray,
      isArrayBuffer,
      isBuffer,
      isFormData,
      isArrayBufferView,
      isString,
      isNumber,
      isBoolean,
      isObject,
      isPlainObject,
      isReadableStream,
      isRequest,
      isResponse,
      isHeaders,
      isUndefined,
      isDate,
      isFile,
      isBlob,
      isRegExp,
      isFunction,
      isStream,
      isURLSearchParams,
      isTypedArray,
      isFileList,
      forEach,
      merge,
      extend: extend2,
      trim,
      stripBOM,
      inherits,
      toFlatObject,
      kindOf,
      kindOfTest,
      endsWith,
      toArray,
      forEachEntry,
      matchAll,
      isHTMLForm,
      hasOwnProperty,
      hasOwnProp: hasOwnProperty,
      // an alias to avoid ESLint no-prototype-builtins detection
      reduceDescriptors,
      freezeMethods,
      toObjectSet,
      toCamelCase,
      noop: noop2,
      toFiniteNumber,
      findKey,
      global: _global,
      isContextDefined,
      ALPHABET,
      generateString,
      isSpecCompliantForm,
      toJSONObject,
      isAsyncFn,
      isThenable,
      setImmediate: _setImmediate,
      asap
    };
    function AxiosError(message, code, config, request, response) {
      Error.call(this);
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, this.constructor);
      } else {
        this.stack = new Error().stack;
      }
      this.message = message;
      this.name = "AxiosError";
      code && (this.code = code);
      config && (this.config = config);
      request && (this.request = request);
      if (response) {
        this.response = response;
        this.status = response.status ? response.status : null;
      }
    }
    utils$1.inherits(AxiosError, Error, {
      toJSON: function toJSON() {
        return {
          // Standard
          message: this.message,
          name: this.name,
          // Microsoft
          description: this.description,
          number: this.number,
          // Mozilla
          fileName: this.fileName,
          lineNumber: this.lineNumber,
          columnNumber: this.columnNumber,
          stack: this.stack,
          // Axios
          config: utils$1.toJSONObject(this.config),
          code: this.code,
          status: this.status
        };
      }
    });
    var prototype$1 = AxiosError.prototype;
    var descriptors = {};
    [
      "ERR_BAD_OPTION_VALUE",
      "ERR_BAD_OPTION",
      "ECONNABORTED",
      "ETIMEDOUT",
      "ERR_NETWORK",
      "ERR_FR_TOO_MANY_REDIRECTS",
      "ERR_DEPRECATED",
      "ERR_BAD_RESPONSE",
      "ERR_BAD_REQUEST",
      "ERR_CANCELED",
      "ERR_NOT_SUPPORT",
      "ERR_INVALID_URL"
      // eslint-disable-next-line func-names
    ].forEach((code) => {
      descriptors[code] = { value: code };
    });
    Object.defineProperties(AxiosError, descriptors);
    Object.defineProperty(prototype$1, "isAxiosError", { value: true });
    AxiosError.from = (error, code, config, request, response, customProps) => {
      const axiosError = Object.create(prototype$1);
      utils$1.toFlatObject(error, axiosError, function filter2(obj) {
        return obj !== Error.prototype;
      }, (prop) => {
        return prop !== "isAxiosError";
      });
      AxiosError.call(axiosError, error.message, code, config, request, response);
      axiosError.cause = error;
      axiosError.name = error.name;
      customProps && Object.assign(axiosError, customProps);
      return axiosError;
    };
    var httpAdapter = null;
    function isVisitable(thing) {
      return utils$1.isPlainObject(thing) || utils$1.isArray(thing);
    }
    function removeBrackets(key) {
      return utils$1.endsWith(key, "[]") ? key.slice(0, -2) : key;
    }
    function renderKey(path, key, dots) {
      if (!path)
        return key;
      return path.concat(key).map(function each(token, i) {
        token = removeBrackets(token);
        return !dots && i ? "[" + token + "]" : token;
      }).join(dots ? "." : "");
    }
    function isFlatArray(arr) {
      return utils$1.isArray(arr) && !arr.some(isVisitable);
    }
    var predicates = utils$1.toFlatObject(utils$1, {}, null, function filter2(prop) {
      return /^is[A-Z]/.test(prop);
    });
    function toFormData(obj, formData, options) {
      if (!utils$1.isObject(obj)) {
        throw new TypeError("target must be an object");
      }
      formData = formData || new FormData();
      options = utils$1.toFlatObject(options, {
        metaTokens: true,
        dots: false,
        indexes: false
      }, false, function defined(option, source) {
        return !utils$1.isUndefined(source[option]);
      });
      const metaTokens = options.metaTokens;
      const visitor = options.visitor || defaultVisitor;
      const dots = options.dots;
      const indexes = options.indexes;
      const _Blob = options.Blob || typeof Blob !== "undefined" && Blob;
      const useBlob = _Blob && utils$1.isSpecCompliantForm(formData);
      if (!utils$1.isFunction(visitor)) {
        throw new TypeError("visitor must be a function");
      }
      function convertValue(value) {
        if (value === null)
          return "";
        if (utils$1.isDate(value)) {
          return value.toISOString();
        }
        if (!useBlob && utils$1.isBlob(value)) {
          throw new AxiosError("Blob is not supported. Use a Buffer instead.");
        }
        if (utils$1.isArrayBuffer(value) || utils$1.isTypedArray(value)) {
          return useBlob && typeof Blob === "function" ? new Blob([value]) : Buffer.from(value);
        }
        return value;
      }
      function defaultVisitor(value, key, path) {
        let arr = value;
        if (value && !path && typeof value === "object") {
          if (utils$1.endsWith(key, "{}")) {
            key = metaTokens ? key : key.slice(0, -2);
            value = JSON.stringify(value);
          } else if (utils$1.isArray(value) && isFlatArray(value) || (utils$1.isFileList(value) || utils$1.endsWith(key, "[]")) && (arr = utils$1.toArray(value))) {
            key = removeBrackets(key);
            arr.forEach(function each(el, index2) {
              !(utils$1.isUndefined(el) || el === null) && formData.append(
                // eslint-disable-next-line no-nested-ternary
                indexes === true ? renderKey([key], index2, dots) : indexes === null ? key : key + "[]",
                convertValue(el)
              );
            });
            return false;
          }
        }
        if (isVisitable(value)) {
          return true;
        }
        formData.append(renderKey(path, key, dots), convertValue(value));
        return false;
      }
      const stack = [];
      const exposedHelpers = Object.assign(predicates, {
        defaultVisitor,
        convertValue,
        isVisitable
      });
      function build(value, path) {
        if (utils$1.isUndefined(value))
          return;
        if (stack.indexOf(value) !== -1) {
          throw Error("Circular reference detected in " + path.join("."));
        }
        stack.push(value);
        utils$1.forEach(value, function each(el, key) {
          const result2 = !(utils$1.isUndefined(el) || el === null) && visitor.call(
            formData,
            el,
            utils$1.isString(key) ? key.trim() : key,
            path,
            exposedHelpers
          );
          if (result2 === true) {
            build(el, path ? path.concat(key) : [key]);
          }
        });
        stack.pop();
      }
      if (!utils$1.isObject(obj)) {
        throw new TypeError("data must be an object");
      }
      build(obj);
      return formData;
    }
    function encode$1(str) {
      const charMap = {
        "!": "%21",
        "'": "%27",
        "(": "%28",
        ")": "%29",
        "~": "%7E",
        "%20": "+",
        "%00": "\0"
      };
      return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {
        return charMap[match];
      });
    }
    function AxiosURLSearchParams(params, options) {
      this._pairs = [];
      params && toFormData(params, this, options);
    }
    var prototype = AxiosURLSearchParams.prototype;
    prototype.append = function append(name, value) {
      this._pairs.push([name, value]);
    };
    prototype.toString = function toString2(encoder) {
      const _encode = encoder ? function(value) {
        return encoder.call(this, value, encode$1);
      } : encode$1;
      return this._pairs.map(function each(pair) {
        return _encode(pair[0]) + "=" + _encode(pair[1]);
      }, "").join("&");
    };
    function encode(val) {
      return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
    }
    function buildURL(url, params, options) {
      if (!params) {
        return url;
      }
      const _encode = options && options.encode || encode;
      if (utils$1.isFunction(options)) {
        options = {
          serialize: options
        };
      }
      const serializeFn = options && options.serialize;
      let serializedParams;
      if (serializeFn) {
        serializedParams = serializeFn(params, options);
      } else {
        serializedParams = utils$1.isURLSearchParams(params) ? params.toString() : new AxiosURLSearchParams(params, options).toString(_encode);
      }
      if (serializedParams) {
        const hashmarkIndex = url.indexOf("#");
        if (hashmarkIndex !== -1) {
          url = url.slice(0, hashmarkIndex);
        }
        url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
      }
      return url;
    }
    var InterceptorManager = class {
      constructor() {
        this.handlers = [];
      }
      /**
       * Add a new interceptor to the stack
       *
       * @param {Function} fulfilled The function to handle `then` for a `Promise`
       * @param {Function} rejected The function to handle `reject` for a `Promise`
       *
       * @return {Number} An ID used to remove interceptor later
       */
      use(fulfilled, rejected, options) {
        this.handlers.push({
          fulfilled,
          rejected,
          synchronous: options ? options.synchronous : false,
          runWhen: options ? options.runWhen : null
        });
        return this.handlers.length - 1;
      }
      /**
       * Remove an interceptor from the stack
       *
       * @param {Number} id The ID that was returned by `use`
       *
       * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
       */
      eject(id2) {
        if (this.handlers[id2]) {
          this.handlers[id2] = null;
        }
      }
      /**
       * Clear all interceptors from the stack
       *
       * @returns {void}
       */
      clear() {
        if (this.handlers) {
          this.handlers = [];
        }
      }
      /**
       * Iterate over all the registered interceptors
       *
       * This method is particularly useful for skipping over any
       * interceptors that may have become `null` calling `eject`.
       *
       * @param {Function} fn The function to call for each interceptor
       *
       * @returns {void}
       */
      forEach(fn) {
        utils$1.forEach(this.handlers, function forEachHandler(h) {
          if (h !== null) {
            fn(h);
          }
        });
      }
    };
    var InterceptorManager$1 = InterceptorManager;
    var transitionalDefaults = {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    };
    var URLSearchParams$1 = typeof URLSearchParams !== "undefined" ? URLSearchParams : AxiosURLSearchParams;
    var FormData$1 = typeof FormData !== "undefined" ? FormData : null;
    var Blob$1 = typeof Blob !== "undefined" ? Blob : null;
    var platform$1 = {
      isBrowser: true,
      classes: {
        URLSearchParams: URLSearchParams$1,
        FormData: FormData$1,
        Blob: Blob$1
      },
      protocols: ["http", "https", "file", "blob", "url", "data"]
    };
    var hasBrowserEnv = typeof window !== "undefined" && typeof document !== "undefined";
    var _navigator = typeof navigator === "object" && navigator || void 0;
    var hasStandardBrowserEnv = hasBrowserEnv && (!_navigator || ["ReactNative", "NativeScript", "NS"].indexOf(_navigator.product) < 0);
    var hasStandardBrowserWebWorkerEnv = (() => {
      return typeof WorkerGlobalScope !== "undefined" && // eslint-disable-next-line no-undef
      self instanceof WorkerGlobalScope && typeof self.importScripts === "function";
    })();
    var origin = hasBrowserEnv && window.location.href || "http://localhost";
    var utils = /* @__PURE__ */ Object.freeze({
      __proto__: null,
      hasBrowserEnv,
      hasStandardBrowserWebWorkerEnv,
      hasStandardBrowserEnv,
      navigator: _navigator,
      origin
    });
    var platform = {
      ...utils,
      ...platform$1
    };
    function toURLEncodedForm(data, options) {
      return toFormData(data, new platform.classes.URLSearchParams(), Object.assign({
        visitor: function(value, key, path, helpers) {
          if (platform.isNode && utils$1.isBuffer(value)) {
            this.append(key, value.toString("base64"));
            return false;
          }
          return helpers.defaultVisitor.apply(this, arguments);
        }
      }, options));
    }
    function parsePropPath(name) {
      return utils$1.matchAll(/\w+|\[(\w*)]/g, name).map((match) => {
        return match[0] === "[]" ? "" : match[1] || match[0];
      });
    }
    function arrayToObject(arr) {
      const obj = {};
      const keys = Object.keys(arr);
      let i;
      const len = keys.length;
      let key;
      for (i = 0; i < len; i++) {
        key = keys[i];
        obj[key] = arr[key];
      }
      return obj;
    }
    function formDataToJSON(formData) {
      function buildPath(path, value, target, index2) {
        let name = path[index2++];
        if (name === "__proto__")
          return true;
        const isNumericKey = Number.isFinite(+name);
        const isLast = index2 >= path.length;
        name = !name && utils$1.isArray(target) ? target.length : name;
        if (isLast) {
          if (utils$1.hasOwnProp(target, name)) {
            target[name] = [target[name], value];
          } else {
            target[name] = value;
          }
          return !isNumericKey;
        }
        if (!target[name] || !utils$1.isObject(target[name])) {
          target[name] = [];
        }
        const result2 = buildPath(path, value, target[name], index2);
        if (result2 && utils$1.isArray(target[name])) {
          target[name] = arrayToObject(target[name]);
        }
        return !isNumericKey;
      }
      if (utils$1.isFormData(formData) && utils$1.isFunction(formData.entries)) {
        const obj = {};
        utils$1.forEachEntry(formData, (name, value) => {
          buildPath(parsePropPath(name), value, obj, 0);
        });
        return obj;
      }
      return null;
    }
    function stringifySafely(rawValue, parser, encoder) {
      if (utils$1.isString(rawValue)) {
        try {
          (parser || JSON.parse)(rawValue);
          return utils$1.trim(rawValue);
        } catch (e) {
          if (e.name !== "SyntaxError") {
            throw e;
          }
        }
      }
      return (encoder || JSON.stringify)(rawValue);
    }
    var defaults = {
      transitional: transitionalDefaults,
      adapter: ["xhr", "http", "fetch"],
      transformRequest: [function transformRequest(data, headers) {
        const contentType = headers.getContentType() || "";
        const hasJSONContentType = contentType.indexOf("application/json") > -1;
        const isObjectPayload = utils$1.isObject(data);
        if (isObjectPayload && utils$1.isHTMLForm(data)) {
          data = new FormData(data);
        }
        const isFormData2 = utils$1.isFormData(data);
        if (isFormData2) {
          return hasJSONContentType ? JSON.stringify(formDataToJSON(data)) : data;
        }
        if (utils$1.isArrayBuffer(data) || utils$1.isBuffer(data) || utils$1.isStream(data) || utils$1.isFile(data) || utils$1.isBlob(data) || utils$1.isReadableStream(data)) {
          return data;
        }
        if (utils$1.isArrayBufferView(data)) {
          return data.buffer;
        }
        if (utils$1.isURLSearchParams(data)) {
          headers.setContentType("application/x-www-form-urlencoded;charset=utf-8", false);
          return data.toString();
        }
        let isFileList2;
        if (isObjectPayload) {
          if (contentType.indexOf("application/x-www-form-urlencoded") > -1) {
            return toURLEncodedForm(data, this.formSerializer).toString();
          }
          if ((isFileList2 = utils$1.isFileList(data)) || contentType.indexOf("multipart/form-data") > -1) {
            const _FormData = this.env && this.env.FormData;
            return toFormData(
              isFileList2 ? { "files[]": data } : data,
              _FormData && new _FormData(),
              this.formSerializer
            );
          }
        }
        if (isObjectPayload || hasJSONContentType) {
          headers.setContentType("application/json", false);
          return stringifySafely(data);
        }
        return data;
      }],
      transformResponse: [function transformResponse(data) {
        const transitional = this.transitional || defaults.transitional;
        const forcedJSONParsing = transitional && transitional.forcedJSONParsing;
        const JSONRequested = this.responseType === "json";
        if (utils$1.isResponse(data) || utils$1.isReadableStream(data)) {
          return data;
        }
        if (data && utils$1.isString(data) && (forcedJSONParsing && !this.responseType || JSONRequested)) {
          const silentJSONParsing = transitional && transitional.silentJSONParsing;
          const strictJSONParsing = !silentJSONParsing && JSONRequested;
          try {
            return JSON.parse(data);
          } catch (e) {
            if (strictJSONParsing) {
              if (e.name === "SyntaxError") {
                throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);
              }
              throw e;
            }
          }
        }
        return data;
      }],
      /**
       * A timeout in milliseconds to abort a request. If set to 0 (default) a
       * timeout is not created.
       */
      timeout: 0,
      xsrfCookieName: "XSRF-TOKEN",
      xsrfHeaderName: "X-XSRF-TOKEN",
      maxContentLength: -1,
      maxBodyLength: -1,
      env: {
        FormData: platform.classes.FormData,
        Blob: platform.classes.Blob
      },
      validateStatus: function validateStatus(status) {
        return status >= 200 && status < 300;
      },
      headers: {
        common: {
          "Accept": "application/json, text/plain, */*",
          "Content-Type": void 0
        }
      }
    };
    utils$1.forEach(["delete", "get", "head", "post", "put", "patch"], (method) => {
      defaults.headers[method] = {};
    });
    var defaults$1 = defaults;
    var ignoreDuplicateOf = utils$1.toObjectSet([
      "age",
      "authorization",
      "content-length",
      "content-type",
      "etag",
      "expires",
      "from",
      "host",
      "if-modified-since",
      "if-unmodified-since",
      "last-modified",
      "location",
      "max-forwards",
      "proxy-authorization",
      "referer",
      "retry-after",
      "user-agent"
    ]);
    var parseHeaders = (rawHeaders) => {
      const parsed = {};
      let key;
      let val;
      let i;
      rawHeaders && rawHeaders.split("\n").forEach(function parser(line) {
        i = line.indexOf(":");
        key = line.substring(0, i).trim().toLowerCase();
        val = line.substring(i + 1).trim();
        if (!key || parsed[key] && ignoreDuplicateOf[key]) {
          return;
        }
        if (key === "set-cookie") {
          if (parsed[key]) {
            parsed[key].push(val);
          } else {
            parsed[key] = [val];
          }
        } else {
          parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
        }
      });
      return parsed;
    };
    var $internals = Symbol("internals");
    function normalizeHeader(header) {
      return header && String(header).trim().toLowerCase();
    }
    function normalizeValue(value) {
      if (value === false || value == null) {
        return value;
      }
      return utils$1.isArray(value) ? value.map(normalizeValue) : String(value);
    }
    function parseTokens(str) {
      const tokens = /* @__PURE__ */ Object.create(null);
      const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
      let match;
      while (match = tokensRE.exec(str)) {
        tokens[match[1]] = match[2];
      }
      return tokens;
    }
    var isValidHeaderName = (str) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());
    function matchHeaderValue(context, value, header, filter2, isHeaderNameFilter) {
      if (utils$1.isFunction(filter2)) {
        return filter2.call(this, value, header);
      }
      if (isHeaderNameFilter) {
        value = header;
      }
      if (!utils$1.isString(value))
        return;
      if (utils$1.isString(filter2)) {
        return value.indexOf(filter2) !== -1;
      }
      if (utils$1.isRegExp(filter2)) {
        return filter2.test(value);
      }
    }
    function formatHeader(header) {
      return header.trim().toLowerCase().replace(/([a-z\d])(\w*)/g, (w, char, str) => {
        return char.toUpperCase() + str;
      });
    }
    function buildAccessors(obj, header) {
      const accessorName = utils$1.toCamelCase(" " + header);
      ["get", "set", "has"].forEach((methodName) => {
        Object.defineProperty(obj, methodName + accessorName, {
          value: function(arg1, arg2, arg3) {
            return this[methodName].call(this, header, arg1, arg2, arg3);
          },
          configurable: true
        });
      });
    }
    var AxiosHeaders = class {
      constructor(headers) {
        headers && this.set(headers);
      }
      set(header, valueOrRewrite, rewrite) {
        const self2 = this;
        function setHeader(_value, _header, _rewrite) {
          const lHeader = normalizeHeader(_header);
          if (!lHeader) {
            throw new Error("header name must be a non-empty string");
          }
          const key = utils$1.findKey(self2, lHeader);
          if (!key || self2[key] === void 0 || _rewrite === true || _rewrite === void 0 && self2[key] !== false) {
            self2[key || _header] = normalizeValue(_value);
          }
        }
        const setHeaders = (headers, _rewrite) => utils$1.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));
        if (utils$1.isPlainObject(header) || header instanceof this.constructor) {
          setHeaders(header, valueOrRewrite);
        } else if (utils$1.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {
          setHeaders(parseHeaders(header), valueOrRewrite);
        } else if (utils$1.isHeaders(header)) {
          for (const [key, value] of header.entries()) {
            setHeader(value, key, rewrite);
          }
        } else {
          header != null && setHeader(valueOrRewrite, header, rewrite);
        }
        return this;
      }
      get(header, parser) {
        header = normalizeHeader(header);
        if (header) {
          const key = utils$1.findKey(this, header);
          if (key) {
            const value = this[key];
            if (!parser) {
              return value;
            }
            if (parser === true) {
              return parseTokens(value);
            }
            if (utils$1.isFunction(parser)) {
              return parser.call(this, value, key);
            }
            if (utils$1.isRegExp(parser)) {
              return parser.exec(value);
            }
            throw new TypeError("parser must be boolean|regexp|function");
          }
        }
      }
      has(header, matcher) {
        header = normalizeHeader(header);
        if (header) {
          const key = utils$1.findKey(this, header);
          return !!(key && this[key] !== void 0 && (!matcher || matchHeaderValue(this, this[key], key, matcher)));
        }
        return false;
      }
      delete(header, matcher) {
        const self2 = this;
        let deleted = false;
        function deleteHeader(_header) {
          _header = normalizeHeader(_header);
          if (_header) {
            const key = utils$1.findKey(self2, _header);
            if (key && (!matcher || matchHeaderValue(self2, self2[key], key, matcher))) {
              delete self2[key];
              deleted = true;
            }
          }
        }
        if (utils$1.isArray(header)) {
          header.forEach(deleteHeader);
        } else {
          deleteHeader(header);
        }
        return deleted;
      }
      clear(matcher) {
        const keys = Object.keys(this);
        let i = keys.length;
        let deleted = false;
        while (i--) {
          const key = keys[i];
          if (!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {
            delete this[key];
            deleted = true;
          }
        }
        return deleted;
      }
      normalize(format2) {
        const self2 = this;
        const headers = {};
        utils$1.forEach(this, (value, header) => {
          const key = utils$1.findKey(headers, header);
          if (key) {
            self2[key] = normalizeValue(value);
            delete self2[header];
            return;
          }
          const normalized = format2 ? formatHeader(header) : String(header).trim();
          if (normalized !== header) {
            delete self2[header];
          }
          self2[normalized] = normalizeValue(value);
          headers[normalized] = true;
        });
        return this;
      }
      concat(...targets) {
        return this.constructor.concat(this, ...targets);
      }
      toJSON(asStrings) {
        const obj = /* @__PURE__ */ Object.create(null);
        utils$1.forEach(this, (value, header) => {
          value != null && value !== false && (obj[header] = asStrings && utils$1.isArray(value) ? value.join(", ") : value);
        });
        return obj;
      }
      [Symbol.iterator]() {
        return Object.entries(this.toJSON())[Symbol.iterator]();
      }
      toString() {
        return Object.entries(this.toJSON()).map(([header, value]) => header + ": " + value).join("\n");
      }
      get [Symbol.toStringTag]() {
        return "AxiosHeaders";
      }
      static from(thing) {
        return thing instanceof this ? thing : new this(thing);
      }
      static concat(first, ...targets) {
        const computed = new this(first);
        targets.forEach((target) => computed.set(target));
        return computed;
      }
      static accessor(header) {
        const internals = this[$internals] = this[$internals] = {
          accessors: {}
        };
        const accessors = internals.accessors;
        const prototype2 = this.prototype;
        function defineAccessor(_header) {
          const lHeader = normalizeHeader(_header);
          if (!accessors[lHeader]) {
            buildAccessors(prototype2, _header);
            accessors[lHeader] = true;
          }
        }
        utils$1.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);
        return this;
      }
    };
    AxiosHeaders.accessor(["Content-Type", "Content-Length", "Accept", "Accept-Encoding", "User-Agent", "Authorization"]);
    utils$1.reduceDescriptors(AxiosHeaders.prototype, ({ value }, key) => {
      let mapped = key[0].toUpperCase() + key.slice(1);
      return {
        get: () => value,
        set(headerValue) {
          this[mapped] = headerValue;
        }
      };
    });
    utils$1.freezeMethods(AxiosHeaders);
    var AxiosHeaders$1 = AxiosHeaders;
    function transformData(fns, response) {
      const config = this || defaults$1;
      const context = response || config;
      const headers = AxiosHeaders$1.from(context.headers);
      let data = context.data;
      utils$1.forEach(fns, function transform2(fn) {
        data = fn.call(config, data, headers.normalize(), response ? response.status : void 0);
      });
      headers.normalize();
      return data;
    }
    function isCancel(value) {
      return !!(value && value.__CANCEL__);
    }
    function CanceledError(message, config, request) {
      AxiosError.call(this, message == null ? "canceled" : message, AxiosError.ERR_CANCELED, config, request);
      this.name = "CanceledError";
    }
    utils$1.inherits(CanceledError, AxiosError, {
      __CANCEL__: true
    });
    function settle(resolve, reject, response) {
      const validateStatus = response.config.validateStatus;
      if (!response.status || !validateStatus || validateStatus(response.status)) {
        resolve(response);
      } else {
        reject(new AxiosError(
          "Request failed with status code " + response.status,
          [AxiosError.ERR_BAD_REQUEST, AxiosError.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
          response.config,
          response.request,
          response
        ));
      }
    }
    function parseProtocol(url) {
      const match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
      return match && match[1] || "";
    }
    function speedometer(samplesCount, min2) {
      samplesCount = samplesCount || 10;
      const bytes = new Array(samplesCount);
      const timestamps = new Array(samplesCount);
      let head = 0;
      let tail = 0;
      let firstSampleTS;
      min2 = min2 !== void 0 ? min2 : 1e3;
      return function push(chunkLength) {
        const now2 = Date.now();
        const startedAt = timestamps[tail];
        if (!firstSampleTS) {
          firstSampleTS = now2;
        }
        bytes[head] = chunkLength;
        timestamps[head] = now2;
        let i = tail;
        let bytesCount = 0;
        while (i !== head) {
          bytesCount += bytes[i++];
          i = i % samplesCount;
        }
        head = (head + 1) % samplesCount;
        if (head === tail) {
          tail = (tail + 1) % samplesCount;
        }
        if (now2 - firstSampleTS < min2) {
          return;
        }
        const passed = startedAt && now2 - startedAt;
        return passed ? Math.round(bytesCount * 1e3 / passed) : void 0;
      };
    }
    function throttle(fn, freq) {
      let timestamp = 0;
      let threshold = 1e3 / freq;
      let lastArgs;
      let timer2;
      const invoke = (args, now2 = Date.now()) => {
        timestamp = now2;
        lastArgs = null;
        if (timer2) {
          clearTimeout(timer2);
          timer2 = null;
        }
        fn.apply(null, args);
      };
      const throttled = (...args) => {
        const now2 = Date.now();
        const passed = now2 - timestamp;
        if (passed >= threshold) {
          invoke(args, now2);
        } else {
          lastArgs = args;
          if (!timer2) {
            timer2 = setTimeout(() => {
              timer2 = null;
              invoke(lastArgs);
            }, threshold - passed);
          }
        }
      };
      const flush = () => lastArgs && invoke(lastArgs);
      return [throttled, flush];
    }
    var progressEventReducer = (listener, isDownloadStream, freq = 3) => {
      let bytesNotified = 0;
      const _speedometer = speedometer(50, 250);
      return throttle((e) => {
        const loaded = e.loaded;
        const total = e.lengthComputable ? e.total : void 0;
        const progressBytes = loaded - bytesNotified;
        const rate = _speedometer(progressBytes);
        const inRange = loaded <= total;
        bytesNotified = loaded;
        const data = {
          loaded,
          total,
          progress: total ? loaded / total : void 0,
          bytes: progressBytes,
          rate: rate ? rate : void 0,
          estimated: rate && total && inRange ? (total - loaded) / rate : void 0,
          event: e,
          lengthComputable: total != null,
          [isDownloadStream ? "download" : "upload"]: true
        };
        listener(data);
      }, freq);
    };
    var progressEventDecorator = (total, throttled) => {
      const lengthComputable = total != null;
      return [(loaded) => throttled[0]({
        lengthComputable,
        total,
        loaded
      }), throttled[1]];
    };
    var asyncDecorator = (fn) => (...args) => utils$1.asap(() => fn(...args));
    var isURLSameOrigin = platform.hasStandardBrowserEnv ? ((origin2, isMSIE) => (url) => {
      url = new URL(url, platform.origin);
      return origin2.protocol === url.protocol && origin2.host === url.host && (isMSIE || origin2.port === url.port);
    })(
      new URL(platform.origin),
      platform.navigator && /(msie|trident)/i.test(platform.navigator.userAgent)
    ) : () => true;
    var cookies = platform.hasStandardBrowserEnv ? (
      // Standard browser envs support document.cookie
      {
        write(name, value, expires, path, domain, secure) {
          const cookie = [name + "=" + encodeURIComponent(value)];
          utils$1.isNumber(expires) && cookie.push("expires=" + new Date(expires).toGMTString());
          utils$1.isString(path) && cookie.push("path=" + path);
          utils$1.isString(domain) && cookie.push("domain=" + domain);
          secure === true && cookie.push("secure");
          document.cookie = cookie.join("; ");
        },
        read(name) {
          const match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
          return match ? decodeURIComponent(match[3]) : null;
        },
        remove(name) {
          this.write(name, "", Date.now() - 864e5);
        }
      }
    ) : (
      // Non-standard browser env (web workers, react-native) lack needed support.
      {
        write() {
        },
        read() {
          return null;
        },
        remove() {
        }
      }
    );
    function isAbsoluteURL(url) {
      return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
    }
    function combineURLs(baseURL, relativeURL) {
      return relativeURL ? baseURL.replace(/\/?\/$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
    }
    function buildFullPath(baseURL, requestedURL) {
      if (baseURL && !isAbsoluteURL(requestedURL)) {
        return combineURLs(baseURL, requestedURL);
      }
      return requestedURL;
    }
    var headersToObject = (thing) => thing instanceof AxiosHeaders$1 ? { ...thing } : thing;
    function mergeConfig(config1, config2) {
      config2 = config2 || {};
      const config = {};
      function getMergedValue(target, source, prop, caseless) {
        if (utils$1.isPlainObject(target) && utils$1.isPlainObject(source)) {
          return utils$1.merge.call({ caseless }, target, source);
        } else if (utils$1.isPlainObject(source)) {
          return utils$1.merge({}, source);
        } else if (utils$1.isArray(source)) {
          return source.slice();
        }
        return source;
      }
      function mergeDeepProperties(a2, b, prop, caseless) {
        if (!utils$1.isUndefined(b)) {
          return getMergedValue(a2, b, prop, caseless);
        } else if (!utils$1.isUndefined(a2)) {
          return getMergedValue(void 0, a2, prop, caseless);
        }
      }
      function valueFromConfig2(a2, b) {
        if (!utils$1.isUndefined(b)) {
          return getMergedValue(void 0, b);
        }
      }
      function defaultToConfig2(a2, b) {
        if (!utils$1.isUndefined(b)) {
          return getMergedValue(void 0, b);
        } else if (!utils$1.isUndefined(a2)) {
          return getMergedValue(void 0, a2);
        }
      }
      function mergeDirectKeys(a2, b, prop) {
        if (prop in config2) {
          return getMergedValue(a2, b);
        } else if (prop in config1) {
          return getMergedValue(void 0, a2);
        }
      }
      const mergeMap = {
        url: valueFromConfig2,
        method: valueFromConfig2,
        data: valueFromConfig2,
        baseURL: defaultToConfig2,
        transformRequest: defaultToConfig2,
        transformResponse: defaultToConfig2,
        paramsSerializer: defaultToConfig2,
        timeout: defaultToConfig2,
        timeoutMessage: defaultToConfig2,
        withCredentials: defaultToConfig2,
        withXSRFToken: defaultToConfig2,
        adapter: defaultToConfig2,
        responseType: defaultToConfig2,
        xsrfCookieName: defaultToConfig2,
        xsrfHeaderName: defaultToConfig2,
        onUploadProgress: defaultToConfig2,
        onDownloadProgress: defaultToConfig2,
        decompress: defaultToConfig2,
        maxContentLength: defaultToConfig2,
        maxBodyLength: defaultToConfig2,
        beforeRedirect: defaultToConfig2,
        transport: defaultToConfig2,
        httpAgent: defaultToConfig2,
        httpsAgent: defaultToConfig2,
        cancelToken: defaultToConfig2,
        socketPath: defaultToConfig2,
        responseEncoding: defaultToConfig2,
        validateStatus: mergeDirectKeys,
        headers: (a2, b, prop) => mergeDeepProperties(headersToObject(a2), headersToObject(b), prop, true)
      };
      utils$1.forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {
        const merge2 = mergeMap[prop] || mergeDeepProperties;
        const configValue = merge2(config1[prop], config2[prop], prop);
        utils$1.isUndefined(configValue) && merge2 !== mergeDirectKeys || (config[prop] = configValue);
      });
      return config;
    }
    var resolveConfig = (config) => {
      const newConfig = mergeConfig({}, config);
      let { data, withXSRFToken, xsrfHeaderName, xsrfCookieName, headers, auth } = newConfig;
      newConfig.headers = headers = AxiosHeaders$1.from(headers);
      newConfig.url = buildURL(buildFullPath(newConfig.baseURL, newConfig.url), config.params, config.paramsSerializer);
      if (auth) {
        headers.set(
          "Authorization",
          "Basic " + btoa((auth.username || "") + ":" + (auth.password ? unescape(encodeURIComponent(auth.password)) : ""))
        );
      }
      let contentType;
      if (utils$1.isFormData(data)) {
        if (platform.hasStandardBrowserEnv || platform.hasStandardBrowserWebWorkerEnv) {
          headers.setContentType(void 0);
        } else if ((contentType = headers.getContentType()) !== false) {
          const [type2, ...tokens] = contentType ? contentType.split(";").map((token) => token.trim()).filter(Boolean) : [];
          headers.setContentType([type2 || "multipart/form-data", ...tokens].join("; "));
        }
      }
      if (platform.hasStandardBrowserEnv) {
        withXSRFToken && utils$1.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(newConfig));
        if (withXSRFToken || withXSRFToken !== false && isURLSameOrigin(newConfig.url)) {
          const xsrfValue = xsrfHeaderName && xsrfCookieName && cookies.read(xsrfCookieName);
          if (xsrfValue) {
            headers.set(xsrfHeaderName, xsrfValue);
          }
        }
      }
      return newConfig;
    };
    var isXHRAdapterSupported = typeof XMLHttpRequest !== "undefined";
    var xhrAdapter = isXHRAdapterSupported && function(config) {
      return new Promise(function dispatchXhrRequest(resolve, reject) {
        const _config = resolveConfig(config);
        let requestData = _config.data;
        const requestHeaders = AxiosHeaders$1.from(_config.headers).normalize();
        let { responseType, onUploadProgress, onDownloadProgress } = _config;
        let onCanceled;
        let uploadThrottled, downloadThrottled;
        let flushUpload, flushDownload;
        function done() {
          flushUpload && flushUpload();
          flushDownload && flushDownload();
          _config.cancelToken && _config.cancelToken.unsubscribe(onCanceled);
          _config.signal && _config.signal.removeEventListener("abort", onCanceled);
        }
        let request = new XMLHttpRequest();
        request.open(_config.method.toUpperCase(), _config.url, true);
        request.timeout = _config.timeout;
        function onloadend() {
          if (!request) {
            return;
          }
          const responseHeaders = AxiosHeaders$1.from(
            "getAllResponseHeaders" in request && request.getAllResponseHeaders()
          );
          const responseData = !responseType || responseType === "text" || responseType === "json" ? request.responseText : request.response;
          const response = {
            data: responseData,
            status: request.status,
            statusText: request.statusText,
            headers: responseHeaders,
            config,
            request
          };
          settle(function _resolve(value) {
            resolve(value);
            done();
          }, function _reject(err) {
            reject(err);
            done();
          }, response);
          request = null;
        }
        if ("onloadend" in request) {
          request.onloadend = onloadend;
        } else {
          request.onreadystatechange = function handleLoad() {
            if (!request || request.readyState !== 4) {
              return;
            }
            if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) {
              return;
            }
            setTimeout(onloadend);
          };
        }
        request.onabort = function handleAbort() {
          if (!request) {
            return;
          }
          reject(new AxiosError("Request aborted", AxiosError.ECONNABORTED, config, request));
          request = null;
        };
        request.onerror = function handleError() {
          reject(new AxiosError("Network Error", AxiosError.ERR_NETWORK, config, request));
          request = null;
        };
        request.ontimeout = function handleTimeout() {
          let timeoutErrorMessage = _config.timeout ? "timeout of " + _config.timeout + "ms exceeded" : "timeout exceeded";
          const transitional = _config.transitional || transitionalDefaults;
          if (_config.timeoutErrorMessage) {
            timeoutErrorMessage = _config.timeoutErrorMessage;
          }
          reject(new AxiosError(
            timeoutErrorMessage,
            transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED,
            config,
            request
          ));
          request = null;
        };
        requestData === void 0 && requestHeaders.setContentType(null);
        if ("setRequestHeader" in request) {
          utils$1.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
            request.setRequestHeader(key, val);
          });
        }
        if (!utils$1.isUndefined(_config.withCredentials)) {
          request.withCredentials = !!_config.withCredentials;
        }
        if (responseType && responseType !== "json") {
          request.responseType = _config.responseType;
        }
        if (onDownloadProgress) {
          [downloadThrottled, flushDownload] = progressEventReducer(onDownloadProgress, true);
          request.addEventListener("progress", downloadThrottled);
        }
        if (onUploadProgress && request.upload) {
          [uploadThrottled, flushUpload] = progressEventReducer(onUploadProgress);
          request.upload.addEventListener("progress", uploadThrottled);
          request.upload.addEventListener("loadend", flushUpload);
        }
        if (_config.cancelToken || _config.signal) {
          onCanceled = (cancel) => {
            if (!request) {
              return;
            }
            reject(!cancel || cancel.type ? new CanceledError(null, config, request) : cancel);
            request.abort();
            request = null;
          };
          _config.cancelToken && _config.cancelToken.subscribe(onCanceled);
          if (_config.signal) {
            _config.signal.aborted ? onCanceled() : _config.signal.addEventListener("abort", onCanceled);
          }
        }
        const protocol = parseProtocol(_config.url);
        if (protocol && platform.protocols.indexOf(protocol) === -1) {
          reject(new AxiosError("Unsupported protocol " + protocol + ":", AxiosError.ERR_BAD_REQUEST, config));
          return;
        }
        request.send(requestData || null);
      });
    };
    var composeSignals = (signals, timeout2) => {
      const { length } = signals = signals ? signals.filter(Boolean) : [];
      if (timeout2 || length) {
        let controller = new AbortController();
        let aborted;
        const onabort = function(reason) {
          if (!aborted) {
            aborted = true;
            unsubscribe();
            const err = reason instanceof Error ? reason : this.reason;
            controller.abort(err instanceof AxiosError ? err : new CanceledError(err instanceof Error ? err.message : err));
          }
        };
        let timer2 = timeout2 && setTimeout(() => {
          timer2 = null;
          onabort(new AxiosError(`timeout ${timeout2} of ms exceeded`, AxiosError.ETIMEDOUT));
        }, timeout2);
        const unsubscribe = () => {
          if (signals) {
            timer2 && clearTimeout(timer2);
            timer2 = null;
            signals.forEach((signal2) => {
              signal2.unsubscribe ? signal2.unsubscribe(onabort) : signal2.removeEventListener("abort", onabort);
            });
            signals = null;
          }
        };
        signals.forEach((signal2) => signal2.addEventListener("abort", onabort));
        const { signal } = controller;
        signal.unsubscribe = () => utils$1.asap(unsubscribe);
        return signal;
      }
    };
    var composeSignals$1 = composeSignals;
    var streamChunk = function* (chunk, chunkSize) {
      let len = chunk.byteLength;
      if (!chunkSize || len < chunkSize) {
        yield chunk;
        return;
      }
      let pos = 0;
      let end;
      while (pos < len) {
        end = pos + chunkSize;
        yield chunk.slice(pos, end);
        pos = end;
      }
    };
    var readBytes = async function* (iterable, chunkSize) {
      for await (const chunk of readStream(iterable)) {
        yield* streamChunk(chunk, chunkSize);
      }
    };
    var readStream = async function* (stream) {
      if (stream[Symbol.asyncIterator]) {
        yield* stream;
        return;
      }
      const reader = stream.getReader();
      try {
        for (; ; ) {
          const { done, value } = await reader.read();
          if (done) {
            break;
          }
          yield value;
        }
      } finally {
        await reader.cancel();
      }
    };
    var trackStream = (stream, chunkSize, onProgress, onFinish) => {
      const iterator = readBytes(stream, chunkSize);
      let bytes = 0;
      let done;
      let _onFinish = (e) => {
        if (!done) {
          done = true;
          onFinish && onFinish(e);
        }
      };
      return new ReadableStream({
        async pull(controller) {
          try {
            const { done: done2, value } = await iterator.next();
            if (done2) {
              _onFinish();
              controller.close();
              return;
            }
            let len = value.byteLength;
            if (onProgress) {
              let loadedBytes = bytes += len;
              onProgress(loadedBytes);
            }
            controller.enqueue(new Uint8Array(value));
          } catch (err) {
            _onFinish(err);
            throw err;
          }
        },
        cancel(reason) {
          _onFinish(reason);
          return iterator.return();
        }
      }, {
        highWaterMark: 2
      });
    };
    var isFetchSupported = typeof fetch === "function" && typeof Request === "function" && typeof Response === "function";
    var isReadableStreamSupported = isFetchSupported && typeof ReadableStream === "function";
    var encodeText = isFetchSupported && (typeof TextEncoder === "function" ? ((encoder) => (str) => encoder.encode(str))(new TextEncoder()) : async (str) => new Uint8Array(await new Response(str).arrayBuffer()));
    var test = (fn, ...args) => {
      try {
        return !!fn(...args);
      } catch (e) {
        return false;
      }
    };
    var supportsRequestStream = isReadableStreamSupported && test(() => {
      let duplexAccessed = false;
      const hasContentType = new Request(platform.origin, {
        body: new ReadableStream(),
        method: "POST",
        get duplex() {
          duplexAccessed = true;
          return "half";
        }
      }).headers.has("Content-Type");
      return duplexAccessed && !hasContentType;
    });
    var DEFAULT_CHUNK_SIZE = 64 * 1024;
    var supportsResponseStream = isReadableStreamSupported && test(() => utils$1.isReadableStream(new Response("").body));
    var resolvers = {
      stream: supportsResponseStream && ((res) => res.body)
    };
    isFetchSupported && ((res) => {
      ["text", "arrayBuffer", "blob", "formData", "stream"].forEach((type2) => {
        !resolvers[type2] && (resolvers[type2] = utils$1.isFunction(res[type2]) ? (res2) => res2[type2]() : (_, config) => {
          throw new AxiosError(`Response type '${type2}' is not supported`, AxiosError.ERR_NOT_SUPPORT, config);
        });
      });
    })(new Response());
    var getBodyLength = async (body) => {
      if (body == null) {
        return 0;
      }
      if (utils$1.isBlob(body)) {
        return body.size;
      }
      if (utils$1.isSpecCompliantForm(body)) {
        const _request = new Request(platform.origin, {
          method: "POST",
          body
        });
        return (await _request.arrayBuffer()).byteLength;
      }
      if (utils$1.isArrayBufferView(body) || utils$1.isArrayBuffer(body)) {
        return body.byteLength;
      }
      if (utils$1.isURLSearchParams(body)) {
        body = body + "";
      }
      if (utils$1.isString(body)) {
        return (await encodeText(body)).byteLength;
      }
    };
    var resolveBodyLength = async (headers, body) => {
      const length = utils$1.toFiniteNumber(headers.getContentLength());
      return length == null ? getBodyLength(body) : length;
    };
    var fetchAdapter = isFetchSupported && (async (config) => {
      let {
        url,
        method,
        data,
        signal,
        cancelToken,
        timeout: timeout2,
        onDownloadProgress,
        onUploadProgress,
        responseType,
        headers,
        withCredentials = "same-origin",
        fetchOptions
      } = resolveConfig(config);
      responseType = responseType ? (responseType + "").toLowerCase() : "text";
      let composedSignal = composeSignals$1([signal, cancelToken && cancelToken.toAbortSignal()], timeout2);
      let request;
      const unsubscribe = composedSignal && composedSignal.unsubscribe && (() => {
        composedSignal.unsubscribe();
      });
      let requestContentLength;
      try {
        if (onUploadProgress && supportsRequestStream && method !== "get" && method !== "head" && (requestContentLength = await resolveBodyLength(headers, data)) !== 0) {
          let _request = new Request(url, {
            method: "POST",
            body: data,
            duplex: "half"
          });
          let contentTypeHeader;
          if (utils$1.isFormData(data) && (contentTypeHeader = _request.headers.get("content-type"))) {
            headers.setContentType(contentTypeHeader);
          }
          if (_request.body) {
            const [onProgress, flush] = progressEventDecorator(
              requestContentLength,
              progressEventReducer(asyncDecorator(onUploadProgress))
            );
            data = trackStream(_request.body, DEFAULT_CHUNK_SIZE, onProgress, flush);
          }
        }
        if (!utils$1.isString(withCredentials)) {
          withCredentials = withCredentials ? "include" : "omit";
        }
        const isCredentialsSupported = "credentials" in Request.prototype;
        request = new Request(url, {
          ...fetchOptions,
          signal: composedSignal,
          method: method.toUpperCase(),
          headers: headers.normalize().toJSON(),
          body: data,
          duplex: "half",
          credentials: isCredentialsSupported ? withCredentials : void 0
        });
        let response = await fetch(request);
        const isStreamResponse = supportsResponseStream && (responseType === "stream" || responseType === "response");
        if (supportsResponseStream && (onDownloadProgress || isStreamResponse && unsubscribe)) {
          const options = {};
          ["status", "statusText", "headers"].forEach((prop) => {
            options[prop] = response[prop];
          });
          const responseContentLength = utils$1.toFiniteNumber(response.headers.get("content-length"));
          const [onProgress, flush] = onDownloadProgress && progressEventDecorator(
            responseContentLength,
            progressEventReducer(asyncDecorator(onDownloadProgress), true)
          ) || [];
          response = new Response(
            trackStream(response.body, DEFAULT_CHUNK_SIZE, onProgress, () => {
              flush && flush();
              unsubscribe && unsubscribe();
            }),
            options
          );
        }
        responseType = responseType || "text";
        let responseData = await resolvers[utils$1.findKey(resolvers, responseType) || "text"](response, config);
        !isStreamResponse && unsubscribe && unsubscribe();
        return await new Promise((resolve, reject) => {
          settle(resolve, reject, {
            data: responseData,
            headers: AxiosHeaders$1.from(response.headers),
            status: response.status,
            statusText: response.statusText,
            config,
            request
          });
        });
      } catch (err) {
        unsubscribe && unsubscribe();
        if (err && err.name === "TypeError" && /fetch/i.test(err.message)) {
          throw Object.assign(
            new AxiosError("Network Error", AxiosError.ERR_NETWORK, config, request),
            {
              cause: err.cause || err
            }
          );
        }
        throw AxiosError.from(err, err && err.code, config, request);
      }
    });
    var knownAdapters = {
      http: httpAdapter,
      xhr: xhrAdapter,
      fetch: fetchAdapter
    };
    utils$1.forEach(knownAdapters, (fn, value) => {
      if (fn) {
        try {
          Object.defineProperty(fn, "name", { value });
        } catch (e) {
        }
        Object.defineProperty(fn, "adapterName", { value });
      }
    });
    var renderReason = (reason) => `- ${reason}`;
    var isResolvedHandle = (adapter) => utils$1.isFunction(adapter) || adapter === null || adapter === false;
    var adapters = {
      getAdapter: (adapters2) => {
        adapters2 = utils$1.isArray(adapters2) ? adapters2 : [adapters2];
        const { length } = adapters2;
        let nameOrAdapter;
        let adapter;
        const rejectedReasons = {};
        for (let i = 0; i < length; i++) {
          nameOrAdapter = adapters2[i];
          let id2;
          adapter = nameOrAdapter;
          if (!isResolvedHandle(nameOrAdapter)) {
            adapter = knownAdapters[(id2 = String(nameOrAdapter)).toLowerCase()];
            if (adapter === void 0) {
              throw new AxiosError(`Unknown adapter '${id2}'`);
            }
          }
          if (adapter) {
            break;
          }
          rejectedReasons[id2 || "#" + i] = adapter;
        }
        if (!adapter) {
          const reasons = Object.entries(rejectedReasons).map(
            ([id2, state]) => `adapter ${id2} ` + (state === false ? "is not supported by the environment" : "is not available in the build")
          );
          let s = length ? reasons.length > 1 ? "since :\n" + reasons.map(renderReason).join("\n") : " " + renderReason(reasons[0]) : "as no adapter specified";
          throw new AxiosError(
            `There is no suitable adapter to dispatch the request ` + s,
            "ERR_NOT_SUPPORT"
          );
        }
        return adapter;
      },
      adapters: knownAdapters
    };
    function throwIfCancellationRequested(config) {
      if (config.cancelToken) {
        config.cancelToken.throwIfRequested();
      }
      if (config.signal && config.signal.aborted) {
        throw new CanceledError(null, config);
      }
    }
    function dispatchRequest(config) {
      throwIfCancellationRequested(config);
      config.headers = AxiosHeaders$1.from(config.headers);
      config.data = transformData.call(
        config,
        config.transformRequest
      );
      if (["post", "put", "patch"].indexOf(config.method) !== -1) {
        config.headers.setContentType("application/x-www-form-urlencoded", false);
      }
      const adapter = adapters.getAdapter(config.adapter || defaults$1.adapter);
      return adapter(config).then(function onAdapterResolution(response) {
        throwIfCancellationRequested(config);
        response.data = transformData.call(
          config,
          config.transformResponse,
          response
        );
        response.headers = AxiosHeaders$1.from(response.headers);
        return response;
      }, function onAdapterRejection(reason) {
        if (!isCancel(reason)) {
          throwIfCancellationRequested(config);
          if (reason && reason.response) {
            reason.response.data = transformData.call(
              config,
              config.transformResponse,
              reason.response
            );
            reason.response.headers = AxiosHeaders$1.from(reason.response.headers);
          }
        }
        return Promise.reject(reason);
      });
    }
    var VERSION = "1.7.9";
    var validators$1 = {};
    ["object", "boolean", "number", "function", "string", "symbol"].forEach((type2, i) => {
      validators$1[type2] = function validator2(thing) {
        return typeof thing === type2 || "a" + (i < 1 ? "n " : " ") + type2;
      };
    });
    var deprecatedWarnings = {};
    validators$1.transitional = function transitional(validator2, version, message) {
      function formatMessage(opt, desc) {
        return "[Axios v" + VERSION + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
      }
      return (value, opt, opts) => {
        if (validator2 === false) {
          throw new AxiosError(
            formatMessage(opt, " has been removed" + (version ? " in " + version : "")),
            AxiosError.ERR_DEPRECATED
          );
        }
        if (version && !deprecatedWarnings[opt]) {
          deprecatedWarnings[opt] = true;
          console.warn(
            formatMessage(
              opt,
              " has been deprecated since v" + version + " and will be removed in the near future"
            )
          );
        }
        return validator2 ? validator2(value, opt, opts) : true;
      };
    };
    validators$1.spelling = function spelling(correctSpelling) {
      return (value, opt) => {
        console.warn(`${opt} is likely a misspelling of ${correctSpelling}`);
        return true;
      };
    };
    function assertOptions(options, schema, allowUnknown) {
      if (typeof options !== "object") {
        throw new AxiosError("options must be an object", AxiosError.ERR_BAD_OPTION_VALUE);
      }
      const keys = Object.keys(options);
      let i = keys.length;
      while (i-- > 0) {
        const opt = keys[i];
        const validator2 = schema[opt];
        if (validator2) {
          const value = options[opt];
          const result2 = value === void 0 || validator2(value, opt, options);
          if (result2 !== true) {
            throw new AxiosError("option " + opt + " must be " + result2, AxiosError.ERR_BAD_OPTION_VALUE);
          }
          continue;
        }
        if (allowUnknown !== true) {
          throw new AxiosError("Unknown option " + opt, AxiosError.ERR_BAD_OPTION);
        }
      }
    }
    var validator = {
      assertOptions,
      validators: validators$1
    };
    var validators = validator.validators;
    var Axios = class {
      constructor(instanceConfig) {
        this.defaults = instanceConfig;
        this.interceptors = {
          request: new InterceptorManager$1(),
          response: new InterceptorManager$1()
        };
      }
      /**
       * Dispatch a request
       *
       * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
       * @param {?Object} config
       *
       * @returns {Promise} The Promise to be fulfilled
       */
      async request(configOrUrl, config) {
        try {
          return await this._request(configOrUrl, config);
        } catch (err) {
          if (err instanceof Error) {
            let dummy = {};
            Error.captureStackTrace ? Error.captureStackTrace(dummy) : dummy = new Error();
            const stack = dummy.stack ? dummy.stack.replace(/^.+\n/, "") : "";
            try {
              if (!err.stack) {
                err.stack = stack;
              } else if (stack && !String(err.stack).endsWith(stack.replace(/^.+\n.+\n/, ""))) {
                err.stack += "\n" + stack;
              }
            } catch (e) {
            }
          }
          throw err;
        }
      }
      _request(configOrUrl, config) {
        if (typeof configOrUrl === "string") {
          config = config || {};
          config.url = configOrUrl;
        } else {
          config = configOrUrl || {};
        }
        config = mergeConfig(this.defaults, config);
        const { transitional, paramsSerializer, headers } = config;
        if (transitional !== void 0) {
          validator.assertOptions(transitional, {
            silentJSONParsing: validators.transitional(validators.boolean),
            forcedJSONParsing: validators.transitional(validators.boolean),
            clarifyTimeoutError: validators.transitional(validators.boolean)
          }, false);
        }
        if (paramsSerializer != null) {
          if (utils$1.isFunction(paramsSerializer)) {
            config.paramsSerializer = {
              serialize: paramsSerializer
            };
          } else {
            validator.assertOptions(paramsSerializer, {
              encode: validators.function,
              serialize: validators.function
            }, true);
          }
        }
        validator.assertOptions(config, {
          baseUrl: validators.spelling("baseURL"),
          withXsrfToken: validators.spelling("withXSRFToken")
        }, true);
        config.method = (config.method || this.defaults.method || "get").toLowerCase();
        let contextHeaders = headers && utils$1.merge(
          headers.common,
          headers[config.method]
        );
        headers && utils$1.forEach(
          ["delete", "get", "head", "post", "put", "patch", "common"],
          (method) => {
            delete headers[method];
          }
        );
        config.headers = AxiosHeaders$1.concat(contextHeaders, headers);
        const requestInterceptorChain = [];
        let synchronousRequestInterceptors = true;
        this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
          if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config) === false) {
            return;
          }
          synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
          requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
        });
        const responseInterceptorChain = [];
        this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
          responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
        });
        let promise;
        let i = 0;
        let len;
        if (!synchronousRequestInterceptors) {
          const chain = [dispatchRequest.bind(this), void 0];
          chain.unshift.apply(chain, requestInterceptorChain);
          chain.push.apply(chain, responseInterceptorChain);
          len = chain.length;
          promise = Promise.resolve(config);
          while (i < len) {
            promise = promise.then(chain[i++], chain[i++]);
          }
          return promise;
        }
        len = requestInterceptorChain.length;
        let newConfig = config;
        i = 0;
        while (i < len) {
          const onFulfilled = requestInterceptorChain[i++];
          const onRejected = requestInterceptorChain[i++];
          try {
            newConfig = onFulfilled(newConfig);
          } catch (error) {
            onRejected.call(this, error);
            break;
          }
        }
        try {
          promise = dispatchRequest.call(this, newConfig);
        } catch (error) {
          return Promise.reject(error);
        }
        i = 0;
        len = responseInterceptorChain.length;
        while (i < len) {
          promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);
        }
        return promise;
      }
      getUri(config) {
        config = mergeConfig(this.defaults, config);
        const fullPath = buildFullPath(config.baseURL, config.url);
        return buildURL(fullPath, config.params, config.paramsSerializer);
      }
    };
    utils$1.forEach(["delete", "get", "head", "options"], function forEachMethodNoData(method) {
      Axios.prototype[method] = function(url, config) {
        return this.request(mergeConfig(config || {}, {
          method,
          url,
          data: (config || {}).data
        }));
      };
    });
    utils$1.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
      function generateHTTPMethod(isForm) {
        return function httpMethod(url, data, config) {
          return this.request(mergeConfig(config || {}, {
            method,
            headers: isForm ? {
              "Content-Type": "multipart/form-data"
            } : {},
            url,
            data
          }));
        };
      }
      Axios.prototype[method] = generateHTTPMethod();
      Axios.prototype[method + "Form"] = generateHTTPMethod(true);
    });
    var Axios$1 = Axios;
    var CancelToken = class {
      constructor(executor) {
        if (typeof executor !== "function") {
          throw new TypeError("executor must be a function.");
        }
        let resolvePromise;
        this.promise = new Promise(function promiseExecutor(resolve) {
          resolvePromise = resolve;
        });
        const token = this;
        this.promise.then((cancel) => {
          if (!token._listeners)
            return;
          let i = token._listeners.length;
          while (i-- > 0) {
            token._listeners[i](cancel);
          }
          token._listeners = null;
        });
        this.promise.then = (onfulfilled) => {
          let _resolve;
          const promise = new Promise((resolve) => {
            token.subscribe(resolve);
            _resolve = resolve;
          }).then(onfulfilled);
          promise.cancel = function reject() {
            token.unsubscribe(_resolve);
          };
          return promise;
        };
        executor(function cancel(message, config, request) {
          if (token.reason) {
            return;
          }
          token.reason = new CanceledError(message, config, request);
          resolvePromise(token.reason);
        });
      }
      /**
       * Throws a `CanceledError` if cancellation has been requested.
       */
      throwIfRequested() {
        if (this.reason) {
          throw this.reason;
        }
      }
      /**
       * Subscribe to the cancel signal
       */
      subscribe(listener) {
        if (this.reason) {
          listener(this.reason);
          return;
        }
        if (this._listeners) {
          this._listeners.push(listener);
        } else {
          this._listeners = [listener];
        }
      }
      /**
       * Unsubscribe from the cancel signal
       */
      unsubscribe(listener) {
        if (!this._listeners) {
          return;
        }
        const index2 = this._listeners.indexOf(listener);
        if (index2 !== -1) {
          this._listeners.splice(index2, 1);
        }
      }
      toAbortSignal() {
        const controller = new AbortController();
        const abort = (err) => {
          controller.abort(err);
        };
        this.subscribe(abort);
        controller.signal.unsubscribe = () => this.unsubscribe(abort);
        return controller.signal;
      }
      /**
       * Returns an object that contains a new `CancelToken` and a function that, when called,
       * cancels the `CancelToken`.
       */
      static source() {
        let cancel;
        const token = new CancelToken(function executor(c2) {
          cancel = c2;
        });
        return {
          token,
          cancel
        };
      }
    };
    var CancelToken$1 = CancelToken;
    function spread(callback) {
      return function wrap(arr) {
        return callback.apply(null, arr);
      };
    }
    function isAxiosError(payload) {
      return utils$1.isObject(payload) && payload.isAxiosError === true;
    }
    var HttpStatusCode = {
      Continue: 100,
      SwitchingProtocols: 101,
      Processing: 102,
      EarlyHints: 103,
      Ok: 200,
      Created: 201,
      Accepted: 202,
      NonAuthoritativeInformation: 203,
      NoContent: 204,
      ResetContent: 205,
      PartialContent: 206,
      MultiStatus: 207,
      AlreadyReported: 208,
      ImUsed: 226,
      MultipleChoices: 300,
      MovedPermanently: 301,
      Found: 302,
      SeeOther: 303,
      NotModified: 304,
      UseProxy: 305,
      Unused: 306,
      TemporaryRedirect: 307,
      PermanentRedirect: 308,
      BadRequest: 400,
      Unauthorized: 401,
      PaymentRequired: 402,
      Forbidden: 403,
      NotFound: 404,
      MethodNotAllowed: 405,
      NotAcceptable: 406,
      ProxyAuthenticationRequired: 407,
      RequestTimeout: 408,
      Conflict: 409,
      Gone: 410,
      LengthRequired: 411,
      PreconditionFailed: 412,
      PayloadTooLarge: 413,
      UriTooLong: 414,
      UnsupportedMediaType: 415,
      RangeNotSatisfiable: 416,
      ExpectationFailed: 417,
      ImATeapot: 418,
      MisdirectedRequest: 421,
      UnprocessableEntity: 422,
      Locked: 423,
      FailedDependency: 424,
      TooEarly: 425,
      UpgradeRequired: 426,
      PreconditionRequired: 428,
      TooManyRequests: 429,
      RequestHeaderFieldsTooLarge: 431,
      UnavailableForLegalReasons: 451,
      InternalServerError: 500,
      NotImplemented: 501,
      BadGateway: 502,
      ServiceUnavailable: 503,
      GatewayTimeout: 504,
      HttpVersionNotSupported: 505,
      VariantAlsoNegotiates: 506,
      InsufficientStorage: 507,
      LoopDetected: 508,
      NotExtended: 510,
      NetworkAuthenticationRequired: 511
    };
    Object.entries(HttpStatusCode).forEach(([key, value]) => {
      HttpStatusCode[value] = key;
    });
    var HttpStatusCode$1 = HttpStatusCode;
    function createInstance(defaultConfig) {
      const context = new Axios$1(defaultConfig);
      const instance = bind(Axios$1.prototype.request, context);
      utils$1.extend(instance, Axios$1.prototype, context, { allOwnKeys: true });
      utils$1.extend(instance, context, null, { allOwnKeys: true });
      instance.create = function create2(instanceConfig) {
        return createInstance(mergeConfig(defaultConfig, instanceConfig));
      };
      return instance;
    }
    var axios = createInstance(defaults$1);
    axios.Axios = Axios$1;
    axios.CanceledError = CanceledError;
    axios.CancelToken = CancelToken$1;
    axios.isCancel = isCancel;
    axios.VERSION = VERSION;
    axios.toFormData = toFormData;
    axios.AxiosError = AxiosError;
    axios.Cancel = axios.CanceledError;
    axios.all = function all(promises) {
      return Promise.all(promises);
    };
    axios.spread = spread;
    axios.isAxiosError = isAxiosError;
    axios.mergeConfig = mergeConfig;
    axios.AxiosHeaders = AxiosHeaders$1;
    axios.formToJSON = (thing) => formDataToJSON(utils$1.isHTMLForm(thing) ? new FormData(thing) : thing);
    axios.getAdapter = adapters.getAdapter;
    axios.HttpStatusCode = HttpStatusCode$1;
    axios.default = axios;
    module2.exports = axios;
  }
});

// node_modules/wikipedia/dist/errors.js
var require_errors = __commonJS({
  "node_modules/wikipedia/dist/errors.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.citationError = exports2.pdfError = exports2.fcError = exports2.eventsError = exports2.mediaError = exports2.relatedError = exports2.introError = exports2.preloadError = exports2.infoboxError = exports2.coordinatesError = exports2.geoSearchError = exports2.linksError = exports2.categoriesError = exports2.contentError = exports2.htmlError = exports2.imageError = exports2.summaryError = exports2.pageError = exports2.autocompletionsError = exports2.searchError = exports2.wikiError = void 0;
    var wikiError = class extends Error {
      constructor(message, code) {
        super(message);
        this.name = "wikiError";
        this.code = code;
      }
    };
    exports2.wikiError = wikiError;
    var searchError = class extends wikiError {
      constructor(message) {
        super(message);
        this.name = "searchError";
      }
    };
    exports2.searchError = searchError;
    var autocompletionsError = class extends wikiError {
      constructor(message) {
        super(message);
        this.name = "autocompletionsError";
      }
    };
    exports2.autocompletionsError = autocompletionsError;
    var pageError = class extends wikiError {
      constructor(message) {
        super(message);
        this.name = "pageError";
      }
    };
    exports2.pageError = pageError;
    var summaryError = class extends wikiError {
      constructor(message) {
        super(message);
        this.name = "summaryError";
      }
    };
    exports2.summaryError = summaryError;
    var imageError = class extends wikiError {
      constructor(message) {
        super(message);
        this.name = "imageError";
      }
    };
    exports2.imageError = imageError;
    var htmlError = class extends wikiError {
      constructor(message) {
        super(message);
        this.name = "htmlError";
      }
    };
    exports2.htmlError = htmlError;
    var contentError = class extends wikiError {
      constructor(message) {
        super(message);
        this.name = "contentError";
      }
    };
    exports2.contentError = contentError;
    var categoriesError = class extends wikiError {
      constructor(message) {
        super(message);
        this.name = "categoriesError";
      }
    };
    exports2.categoriesError = categoriesError;
    var linksError = class extends wikiError {
      constructor(message) {
        super(message);
        this.name = "linksError";
      }
    };
    exports2.linksError = linksError;
    var geoSearchError = class extends wikiError {
      constructor(message) {
        super(message);
        this.name = "geoSearchError";
      }
    };
    exports2.geoSearchError = geoSearchError;
    var coordinatesError = class extends wikiError {
      constructor(message) {
        super(message);
        this.name = "coordinatesError";
      }
    };
    exports2.coordinatesError = coordinatesError;
    var infoboxError = class extends wikiError {
      constructor(message) {
        super(message);
        this.name = "infoboxError";
      }
    };
    exports2.infoboxError = infoboxError;
    var preloadError = class extends wikiError {
      constructor(message) {
        super(message);
        this.name = "preloadError";
      }
    };
    exports2.preloadError = preloadError;
    var introError = class extends wikiError {
      constructor(message) {
        super(message);
        this.name = "introError";
      }
    };
    exports2.introError = introError;
    var relatedError = class extends wikiError {
      constructor(message) {
        super(message);
        this.name = "relatedError";
      }
    };
    exports2.relatedError = relatedError;
    var mediaError = class extends wikiError {
      constructor(message) {
        super(message);
        this.name = "mediaError";
      }
    };
    exports2.mediaError = mediaError;
    var eventsError = class extends wikiError {
      constructor(message) {
        super(message);
        this.name = "eventsError";
      }
    };
    exports2.eventsError = eventsError;
    var fcError = class extends wikiError {
      constructor(message) {
        super(message);
        this.name = "featuredContentError";
      }
    };
    exports2.fcError = fcError;
    var pdfError = class extends wikiError {
      constructor(message) {
        super(message);
        this.name = "pdfError";
      }
    };
    exports2.pdfError = pdfError;
    var citationError = class extends wikiError {
      constructor(message) {
        super(message);
        this.name = "citationError";
      }
    };
    exports2.citationError = citationError;
  }
});

// node_modules/wikipedia/dist/request.js
var require_request = __commonJS({
  "node_modules/wikipedia/dist/request.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.setUserAgent = exports2.setAPIUrl = exports2.returnRestUrl = exports2.makeRestRequest = void 0;
    var axios_1 = require_axios();
    var errors_12 = require_errors();
    var API_URL = "https://en.wikipedia.org/w/api.php?";
    var REST_API_URL = "https://en.wikipedia.org/api/rest_v1/";
    var USER_AGENT = "wikipedia (https://github.com/dopecodez/Wikipedia/)";
    async function callAPI(url) {
      const options = {
        headers: {
          "Api-User-Agent": USER_AGENT
        }
      };
      try {
        const { data } = await axios_1.default.get(url, options);
        return data;
      } catch (error) {
        throw new errors_12.wikiError(error);
      }
    }
    async function makeRequest(params, redirect = true) {
      const search = { ...params };
      search["format"] = "json";
      if (redirect) {
        search["redirects"] = "";
      }
      if (!params.action) {
        search["action"] = "query";
      }
      search["origin"] = "*";
      let searchParam = "";
      Object.keys(search).forEach((key) => {
        searchParam += `${key}=${search[key]}&`;
      });
      return await callAPI(encodeURI(API_URL + searchParam));
    }
    async function makeRestRequest(path, redirect = true) {
      if (!redirect) {
        path += "?redirect=false";
      }
      return await callAPI(encodeURI(REST_API_URL + path));
    }
    exports2.makeRestRequest = makeRestRequest;
    function returnRestUrl(path) {
      return encodeURI(REST_API_URL + path);
    }
    exports2.returnRestUrl = returnRestUrl;
    function setAPIUrl(prefix) {
      API_URL = "https://" + prefix.toLowerCase() + ".wikipedia.org/w/api.php?";
      REST_API_URL = "https://" + prefix.toLowerCase() + ".wikipedia.org/api/rest_v1/";
      return API_URL;
    }
    exports2.setAPIUrl = setAPIUrl;
    function setUserAgent(userAgent) {
      USER_AGENT = userAgent;
    }
    exports2.setUserAgent = setUserAgent;
    exports2.default = makeRequest;
  }
});

// node_modules/wikipedia/dist/messages.js
var require_messages = __commonJS({
  "node_modules/wikipedia/dist/messages.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.MSGS = void 0;
    exports2.MSGS = {
      PAGE_NOT_SUGGEST: "No page with given title suggested : ",
      PAGE_NOT_EXIST: "No page with given title exists : ",
      INFOBOX_NOT_EXIST: "Info cannot be parsed for given page"
    };
  }
});

// node_modules/wikipedia/dist/utils.js
var require_utils = __commonJS({
  "node_modules/wikipedia/dist/utils.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getCurrentDay = exports2.getCurrentMonth = exports2.getCurrentYear = exports2.setPageId = exports2.setPageIdOrTitleParam = exports2.setTitleForPage = exports2.isString = void 0;
    var _1 = require_dist();
    var errors_12 = require_errors();
    var messages_12 = require_messages();
    function isString(title) {
      return isNaN(title);
    }
    exports2.isString = isString;
    async function setTitleForPage(title) {
      {
        const searchResult = await _1.default.search(title, { limit: 1, suggestion: true });
        if (!searchResult.suggestion && searchResult.results.length == 0) {
          throw new errors_12.pageError(`${messages_12.MSGS.PAGE_NOT_SUGGEST}${title}`);
        }
        title = searchResult.suggestion || title;
        return title;
      }
    }
    exports2.setTitleForPage = setTitleForPage;
    function setPageIdOrTitleParam(params, title) {
      if (isString(title)) {
        params.titles = title;
      } else {
        params.pageids = title;
      }
      return params;
    }
    exports2.setPageIdOrTitleParam = setPageIdOrTitleParam;
    function setPageId(params, results) {
      let pageId;
      if (params.pageIds) {
        pageId = params.pageIds;
      } else {
        pageId = Object.keys(results.query.pages)[0];
      }
      return pageId;
    }
    exports2.setPageId = setPageId;
    function getCurrentYear() {
      const date = new Date();
      const year = date.getFullYear();
      return year;
    }
    exports2.getCurrentYear = getCurrentYear;
    function getCurrentMonth() {
      const date = new Date();
      const month = date.getMonth();
      return month + 1;
    }
    exports2.getCurrentMonth = getCurrentMonth;
    function getCurrentDay() {
      const date = new Date();
      const day = date.getDate();
      return day;
    }
    exports2.getCurrentDay = getCurrentDay;
  }
});

// node_modules/camelcase/index.js
var require_camelcase = __commonJS({
  "node_modules/camelcase/index.js"(exports2, module2) {
    "use strict";
    function preserveCamelCase(str) {
      let isLastCharLower = false;
      let isLastCharUpper = false;
      let isLastLastCharUpper = false;
      for (let i = 0; i < str.length; i++) {
        const c2 = str[i];
        if (isLastCharLower && /[a-zA-Z]/.test(c2) && c2.toUpperCase() === c2) {
          str = str.substr(0, i) + "-" + str.substr(i);
          isLastCharLower = false;
          isLastLastCharUpper = isLastCharUpper;
          isLastCharUpper = true;
          i++;
        } else if (isLastCharUpper && isLastLastCharUpper && /[a-zA-Z]/.test(c2) && c2.toLowerCase() === c2) {
          str = str.substr(0, i - 1) + "-" + str.substr(i - 1);
          isLastLastCharUpper = isLastCharUpper;
          isLastCharUpper = false;
          isLastCharLower = true;
        } else {
          isLastCharLower = c2.toLowerCase() === c2;
          isLastLastCharUpper = isLastCharUpper;
          isLastCharUpper = c2.toUpperCase() === c2;
        }
      }
      return str;
    }
    module2.exports = function(str) {
      if (arguments.length > 1) {
        str = Array.from(arguments).map((x3) => x3.trim()).filter((x3) => x3.length).join("-");
      } else {
        str = str.trim();
      }
      if (str.length === 0) {
        return "";
      }
      if (str.length === 1) {
        return str.toLowerCase();
      }
      if (/^[a-z0-9]+$/.test(str)) {
        return str;
      }
      const hasUpperCase = str !== str.toLowerCase();
      if (hasUpperCase) {
        str = preserveCamelCase(str);
      }
      return str.replace(/^[_.\- ]+/, "").toLowerCase().replace(/[_.\- ]+(\w|$)/g, (m2, p1) => p1.toUpperCase());
    };
  }
});

// node_modules/infobox-parser/build/bundle.min.js
var require_bundle_min = __commonJS({
  "node_modules/infobox-parser/build/bundle.min.js"(exports2, module2) {
    "use strict";
    function _interopDefault(e) {
      return e && "object" == typeof e && "default" in e ? e.default : e;
    }
    function trimWrappers(e) {
      return e.replace(/\[\[/g, "").replace(/\]\]/g, "").replace(/\{\{/g, "").replace(/\}\}/g, "").trim();
    }
    function trimOr(e) {
      var t = e.indexOf("|");
      return -1 !== t ? e.substring(0, t) : e;
    }
    function getValue(e, t) {
      if (!e)
        return null;
      var r = e.trim().replace(/File:/, "").replace(/\{\{\d+\}\}/g, "").replace(extraPropertyPattern, "").replace(endingPattern, "");
      if ("y" === r || "yes" === r)
        return true;
      if ("birthPlace" == t)
        return e.trim();
      var a2 = r.match(linksPattern);
      return a2 ? a2[0].split(linkSeparatorPattern).filter(function(e3) {
        return e3;
      }) : trimOr(trimWrappers(r));
    }
    function dataType(e) {
      var t = e.globalPattern, r = e.parsePattern, a2 = e.parse, n = e.variable, l = e.name;
      return function(e3) {
        var i = e3.match(t);
        if (!i) {
          var s;
          return s = {}, defineProperty(s, l, []), defineProperty(s, "sourceAfter", e3), s;
        }
        var o = i.map(function(e4) {
          return a2(e4.match(r));
        }), u = i.reduce(function(e4, t2, r2) {
          return o[r2] === DO_NOT_REPLACE ? e4 : e4.replace(t2, "$" + n + "_" + r2);
        }, e3);
        return { data: defineProperty({}, l, o), sourceAfter: u };
      };
    }
    function byDataHandler(e, t) {
      var r = e.source, a2 = e.context, n = t(r), l = n.data, i = n.sourceAfter;
      return { context: Object.assign({}, a2, l), source: i };
    }
    function extractData(e) {
      return dataTypes$1.map(function(e3) {
        return e3.handler;
      }).reduce(byDataHandler, { context: {}, source: e });
    }
    function findPropertyList(e) {
      var t = e.match(keyValueGlobalPattern);
      return t ? t.map(function(e3) {
        var t2 = keyValuePattern.exec(e3);
        if (!t2)
          return null;
        var r = slicedToArray(t2, 3), a2 = r[1], n = r[2], l = camelCase(a2.trim());
        return { key: l, value: getValue(n, l) };
      }).filter(function(e3) {
        return e3;
      }) : [];
    }
    function fillVariable(e, t) {
      var r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {}, a2 = r.simplifyDataValues;
      if ("string" != typeof e)
        return console.log("Warning: Something went wrong. Could not fill variables in: (" + (void 0 === e ? "undefined" : _typeof(e)) + ") " + JSON.stringify(e)), {};
      var n = dataTypes$1.find(function(t2) {
        return e.match(t2.pattern);
      });
      if (n) {
        var l = n.pattern.exec(e), i = slicedToArray(l, 2), s = i[0], o = i[1], u = t[n.name][parseInt(o, 10)];
        return a2 || "string" != typeof u ? u : e.replace(s, u);
      }
      return e;
    }
    function fillVariables(e, t, r) {
      if (void 0 === e)
        return e;
      if (e instanceof Date)
        return e;
      if ("number" == typeof e)
        return e;
      if (Array.isArray(e))
        return e.map(function(e3) {
          return fillVariables(e3, t, r);
        });
      if ("object" === (void 0 === e ? "undefined" : _typeof(e)))
        return Object.keys(e).reduce(function(a3, n) {
          return Object.assign(a3, defineProperty({}, n, fillVariables(e[n], t, r)));
        }, {});
      var a2 = fillVariable(e, t, r);
      return a2 === e ? e : fillVariables(a2, t, r);
    }
    function handleSmallData(e, t, r) {
      var a2 = r.simplifyDataValues;
      if ("string" == typeof e && e.match(smallDataType.pattern)) {
        var n = e.replace(smallDataType.pattern, "").replace(/,/, "").trim(), l = smallDataType.pattern.exec(e), i = slicedToArray(l, 2), s = i[1], o = t[smallDataType.name][parseInt(s, 10)], u = { primary: getVariableValue(n, t, { simplifyDataValues: a2 }), secondary: getVariableValue(o, t, { simplifyDataValues: a2 }) };
        return a2 ? u.primary : u;
      }
      return null;
    }
    function getVariableValue(e, t) {
      var r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {}, a2 = r.simplifyDataValues, n = handleSmallData(e, t, { simplifyDataValues: a2 });
      return n || fillVariables(e, t, { simplifyDataValues: a2 });
    }
    function reduceVariable(e, t, r, a2) {
      if (null === t)
        return null;
      if ("boolean" == typeof t)
        return t;
      if (Array.isArray(t))
        return t.map(function(e3) {
          return getVariableValue(e3, r, a2);
        });
      if (e.match(/areaTotal/) || e.match(/population/)) {
        var n = numberParse(t);
        if (false === n && (n = parseFloat(t, 10)), !isNaN(n))
          return n;
      }
      if (e.match(/date/i)) {
        var l = +new Date(t);
        if (!isNaN(l))
          return new Date(t);
      }
      var i = getVariableValue(t, r, a2);
      return Array.isArray(i) ? i.map(function(e3) {
        return getVariableValue(e3, r, a2);
      }) : i;
    }
    function byVariableReduction(e, t) {
      return function(r, a2) {
        var n = a2.key, l = a2.value, i = reduceVariable(n, l, e, t);
        return "" === i || null === i ? r : Object.assign({}, r, defineProperty({}, n, i));
      };
    }
    function extractProperties(e) {
      var t = e.source, r = e.context, a2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, n = a2.simplifyDataValues, l = void 0 === n || n;
      return findPropertyList(t).reduce(byVariableReduction(r, { simplifyDataValues: l }), {});
    }
    function transformProperties(e) {
      return Object.keys(e).reduce(function(t, r) {
        var a2 = e[r], n = r.match(blankNamePattern);
        if (n) {
          var l = n[1] || "", i = e["blank" + l + "NameSec2"], s = e["blank" + l + "InfoSec2"];
          return "string" != typeof i ? t : Object.assign(t, defineProperty({}, camelCase(i), s));
        }
        return r.match(blankInfoPattern) ? t : Object.assign(t, defineProperty({}, r, a2));
      }, {});
    }
    function findOuterIndex(e) {
      for (var t = [], r = 0; r < e.length - 1; r++) {
        var a2 = e.substr(r, 2);
        if ("{{" !== a2) {
          if ("}}" === a2) {
            t.pop();
            if (0 === t.length)
              return r + 2;
            r++;
          }
        } else
          t.push(r), r++;
      }
    }
    function parse(e) {
      var t = e.match(infoBoxStartPattern);
      if (!t)
        return { data: e, sourceLeft: null };
      var r = t.index, a2 = e.substring(r), n = findOuterIndex(a2);
      if (!n)
        return { data: e, sourceLeft: null };
      var l = a2.substring(0, n), i = e.substring(n);
      return { data: l, sourceLeft: !i.match(infoBoxStartPattern) ? null : i };
    }
    function extractInfoboxes(e) {
      for (var t = parse(e), r = [t.data]; t.sourceLeft; )
        t = parse(t.sourceLeft), r.push(t.data);
      return r;
    }
    function cleanSource(e) {
      var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r = t.removeSmall, a2 = void 0 !== r && r, n = t.removeReferences;
      return (void 0 === n || n) && (e = e.replace(/<ref(\s\w+=[^>]+)?>.*<\/ref>/g, "").replace(/<ref(\s\w+=[^>]+)?\s?\/>/g, "")), a2 && (e = e.replace(/<small>.*<\/small>/g, "")), e.replace(/'''?/g, "").replace(/\|display=inline/g, "").replace(/<br\s?\/?>/g, ",").replace(/&minus;/g, "-").replace(/{{Sndash}}/g, "\u2013").replace(/<sup>/g, "^").replace(/\{\{sfn\|([^\}\}]+)\}\}/g, "").replace(/\{\{efn\|([^\}\}]+)\}\}/g, "").replace(/−/g, "-").replace(/<\/sup>/g, "").replace(/\{\{\s*nowrap\s*\|([^\n\}]+)\}\}/gi, "$1").replace(/\{\{\s*Avoid\swrap\s*\|([^\n\}]+)\}\}/gi, "$1").replace(/<!--([\s\S]*?)-->/g, "").replace(/&nbsp;/g, " ").replace("|''See list''", "");
    }
    function transformRowSpan(e) {
      return e.map(transformCells).reduce(function(e3, t, r) {
        for (var a2 = 0 === r ? 0 : 1, n = 0; n < t.length; n++)
          e3[n + a2] || (e3[n + a2] = {}), t[n] && (e3[n + a2][t[n]] = 1);
        return e3;
      }, []).map(function(e3) {
        return Object.keys(e3).join(",");
      }).join(" || ");
    }
    function clean(e) {
      return e.substring(2, e.length - 2).replace(linkPattern$1, function(e3, t) {
        return t.split("|")[0];
      }).replace(/'''?/g, "");
    }
    function parseRow(e) {
      var t = e[0].match(/BS(\d)/), r = e[0].substring(2), a2 = 1, n = [], l = 1;
      for (t && (a2 = t[1], r = e[0].substring(3)); l <= a2; l++)
        n.push(e[l]);
      return { type: r, margin: e[l++], text1: e[l++], text2: e[l++], comment: e[l++], icons: n };
    }
    function getMatches(e, t) {
      for (var r = void 0, a2 = []; null !== (r = t.exec(e)); )
        a2.push({ value: r[1] && r[1].trim(), start: r.index, end: r.index + r[0].length });
      return a2;
    }
    function parseTableData(e) {
      var t = e.match(rowPattern$1);
      return t ? t.map(function(e3) {
        var t2 = e3.match(rowPatternSingle);
        return slicedToArray(t2, 2)[1].trim().split("|").slice(1);
      }) : [];
    }
    function getTables(e) {
      var t = getMatches(e, tableStartPattern$1), r = getMatches(e, tableEndPattern$1);
      return t.map(function(t2, a2) {
        var n = r[a2];
        if (!n)
          throw new Error("[Table Parsing] Failed to pair table");
        return { rows: parseTableData(e.substring(t2.end, n.start).trim().replace(/'''/g, "")), start: t2.start, end: n.end };
      });
    }
    function last(e) {
      return e.length ? e[e.length - 1] : void 0;
    }
    function parseInfobox(e, t) {
      var r = extractInfoboxes(e).map(function(e3) {
        return transformProperties(extractProperties(extractData(cleanSource(e3, t)), t));
      });
      if (!r.length)
        return {};
      var a2 = { general: r.shift() };
      return r.forEach(function(e3) {
        var t2 = e3.type;
        t2 ? a2[camelCase(t2)] = e3 : Object.assign(a2, { general: Object.assign({}, a2.general, e3) });
      }), a2.tables = parseTables(e), a2.bsTables = parseBsTables(e), a2.lists = parseLists(e), a2;
    }
    var camelCase = _interopDefault(require_camelcase());
    var _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
      return typeof e;
    } : function(e) {
      return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
    };
    var defineProperty = function(e, t, r) {
      return t in e ? Object.defineProperty(e, t, { value: r, enumerable: true, configurable: true, writable: true }) : e[t] = r, e;
    };
    var slicedToArray = function() {
      function e(e3, t) {
        var r = [], a2 = true, n = false, l = void 0;
        try {
          for (var i, s = e3[Symbol.iterator](); !(a2 = (i = s.next()).done) && (r.push(i.value), !t || r.length !== t); a2 = true)
            ;
        } catch (e4) {
          n = true, l = e4;
        } finally {
          try {
            !a2 && s.return && s.return();
          } finally {
            if (n)
              throw l;
          }
        }
        return r;
      }
      return function(t, r) {
        if (Array.isArray(t))
          return t;
        if (Symbol.iterator in Object(t))
          return e(t, r);
        throw new TypeError("Invalid attempt to destructure non-iterable instance");
      };
    }();
    var toConsumableArray = function(e) {
      if (Array.isArray(e)) {
        for (var t = 0, r = Array(e.length); t < e.length; t++)
          r[t] = e[t];
        return r;
      }
      return Array.from(e);
    };
    var smallGlobalPattern = /\{\{small\|([^\}\}]+)\}\}/g;
    var smallPattern = /small\|([^\}\}]+)\}\}/;
    var small = { globalPattern: smallGlobalPattern, parsePattern: smallPattern, parse: function(e) {
      return slicedToArray(e, 2)[1];
    }, variable: "SMALL", name: "smalls" };
    var flagGlobalPattern = /\{\{flag\|([^\}\}]+)\}\}/g;
    var flagPattern = /flag\|([^\}\}]+)\}\}/;
    var flag = { globalPattern: flagGlobalPattern, parsePattern: flagPattern, parse: function(e) {
      return slicedToArray(e, 2)[1];
    }, variable: "FLAG", name: "flags" };
    var coordsGlobalPattern = /\{\{coord\|([^\}\}]+)\}\}/g;
    var coordsPattern = /coord\|([^\}\}]+)\}\}/;
    var coords = { globalPattern: coordsGlobalPattern, parsePattern: coordsPattern, parse: function(e) {
      return slicedToArray(e, 2)[1];
    }, variable: "COORD", name: "coords" };
    var globalPattern = /\[\[([^\]\|]+)\|?([^\]]+)?\]\]/g;
    var pattern = /\[\[([^\]\|]+)\|?([^\]]+)?\]\]/;
    var instances = { globalPattern, parsePattern: pattern, parse: function(e) {
      var t = slicedToArray(e, 3), r = t[1], a2 = t[2];
      return r || a2;
    }, variable: "INSTANCE", name: "instances" };
    var extraPropertyPattern = /\n?\s?\|\s?\w+$/;
    var endingPattern = /\n\}\}$/;
    var linksPattern = /((\$\w+_\d+)\s*,?\s*){2,}/g;
    var linkSeparatorPattern = /[,\s?]/g;
    var listItemPrefixPattern = /^\|\s?/;
    var unbulletedListGlobalPattern = /\{\{(?:unbulleted list|ubl|ubt|ublist|unbullet)\s?\|([^\}\}]+)\}\}/gi;
    var unbulletedListItemPattern = /\|\s*([^|}]+)/g;
    var unbulletedLists = { globalPattern: unbulletedListGlobalPattern, parsePattern: unbulletedListItemPattern, parse: function(e) {
      return e ? e.map(function(e3) {
        return e3.replace(listItemPrefixPattern, "").trim();
      }).filter(function(e3) {
        return e3 && e3.length;
      }) : [];
    }, variable: "UNBULLETED_LIST", name: "unbulletedLists" };
    var listItemPrefixPattern$1 = /^\*\s*/;
    var plainListGlobalPattern = /\n(\*\s*[^*|]+)+/g;
    var plainListItemPattern = /\*\s*([^*|]+)/g;
    var unmarkedLists = { globalPattern: plainListGlobalPattern, parsePattern: plainListItemPattern, parse: function(e) {
      return e ? e.map(function(e3) {
        return e3.replace(listItemPrefixPattern$1, "").trim();
      }).filter(function(e3) {
        return e3 && e3.length;
      }) : [];
    }, variable: "UNMARKED_LIST", name: "unmarkedLists" };
    var listItemPrefixPattern$2 = /^\*\s?/;
    var plainListGlobalPattern$1 = /\{\{f?p?P?l?a?i?n?t?\s?list\s?\|([^\}\}]+)\}\}/g;
    var plainListItemPattern$1 = /\*\s*([^*}]+)/g;
    var plainLists = { globalPattern: plainListGlobalPattern$1, parsePattern: plainListItemPattern$1, parse: function(e) {
      return e ? e.map(function(e3) {
        return e3.replace(listItemPrefixPattern$2, "").trim();
      }).filter(function(e3) {
        return e3 && e3.length;
      }) : [];
    }, variable: "PLAIN_LIST", name: "plainLists" };
    var marriageGlobalPattern = /\{\{Marriage\|([^\}\}]+)\}\}/gi;
    var marriagePattern = /Marriage\|([^|]+)\|([^|]*)(.*)\}\}/i;
    var marriages = { globalPattern: marriageGlobalPattern, parsePattern: marriagePattern, parse: function(e) {
      var t = slicedToArray(e, 3);
      return { who: t[1], married: t[2] };
    }, variable: "MARRIAGE", name: "marriages" };
    var nbayGlobalPattern = /\{\{nbay\|([^\}\}]+)\}\}/gi;
    var nbayPattern = /nbay\|([^|]+)\|(.*)\}\}/i;
    var nbay = { globalPattern: nbayGlobalPattern, parsePattern: nbayPattern, parse: function(e) {
      var t = slicedToArray(e, 3), r = t[1];
      t[2];
      return r;
    }, variable: "nbay", name: "nbay" };
    var otherGlobalPattern = /\{\{([^|\n]+)\|([^|\n]+)\|?([^\}\n]+)?\}\}/g;
    var otherPattern = /\{\{([^|\n]+)\|([^|\n]+)\|?([^\}\n]+)?\}\}/;
    var other = { globalPattern: otherGlobalPattern, parsePattern: otherPattern, parse: function(e) {
      var t = slicedToArray(e, 4), r = t[1];
      t[2], t[3];
      return r;
    }, variable: "OTHER", name: "others" };
    var hlistGlobalPattern = /\{\{hlist\|([^\}\}]+)\}\}/gi;
    var hlistPattern = /hlist\|(.*)\n?\}\}/i;
    var hlist = { globalPattern: hlistGlobalPattern, parsePattern: hlistPattern, parse: function(e) {
      return e ? slicedToArray(e, 2)[1].split("|") : [];
    }, variable: "HLIST", name: "hlists" };
    var birthDateGlobalPattern = /\{\{birth\sdate([^\}\}]+)\}\}/gi;
    var birthDatePattern = /(\d+)\|(\d+)\|(\d+)/;
    var millisInYear = 31536e6;
    var birthDates = { globalPattern: birthDateGlobalPattern, parsePattern: birthDatePattern, parse: function(e) {
      var t = slicedToArray(e, 4), r = t[1], a2 = t[2], n = t[3], l = new Date(r, a2 - 1, n);
      return { date: l, age: Math.floor((Date.now() - +l) / millisInYear) };
    }, variable: "BIRTH_DATE", name: "birthDates" };
    var DO_NOT_REPLACE = Symbol("DO NOT REPLACE");
    var labeledDateGlobalPattern = /\{\{([^\n\}\}]+)\}\}/g;
    var labeledDatePattern = /(.*)/;
    var labeledDates = { globalPattern: labeledDateGlobalPattern, parsePattern: labeledDatePattern, parse: function(e) {
      var t = e[0].indexOf("|");
      if (t > -1) {
        var r = e[0].substring(t + 1).slice(0, -2), a2 = new Date(r + " GMT");
        if (!isNaN(a2.getTime()))
          return { date: a2 };
        if (a2 = new Date(r.split("|").join("-") + " GMT"), !isNaN(a2.getTime()))
          return { date: a2 };
      }
      return DO_NOT_REPLACE;
    }, variable: "LABELED_DATE", name: "labeledDates" };
    var deathDateGlobalPattern = /\{\{death\sdate\sand\sage([^\}\}]+)\}\}/gi;
    var deathDatePattern = /(\d+)\|(\d+)\|(\d+)\|(\d+)\|?(\d+)?\|?(\d+)?/;
    var millisInYear$1 = 31536e6;
    var deathDates = { globalPattern: deathDateGlobalPattern, parsePattern: deathDatePattern, parse: function(e) {
      var t = slicedToArray(e, 7), r = t[1], a2 = t[2], n = t[3], l = t[4], i = t[5], s = void 0 === i ? 0 : i, o = t[6], u = void 0 === o ? 0 : o, c2 = new Date(r, a2 - 1, n), f = new Date(l, s - 1, u);
      return { date: c2, age: Math.floor((Number(c2) - Number(f)) / millisInYear$1) };
    }, variable: "DEATH_DATE", name: "deathDates" };
    var URLGlobalPattern = /\{\{URL\|([^\}\}]+)\}\}/g;
    var URLPattern = /URL\|([^\}\}]+)\}\}/;
    var url = { globalPattern: URLGlobalPattern, parsePattern: URLPattern, parse: function(e) {
      return slicedToArray(e, 2)[1];
    }, variable: "URL", name: "urls" };
    var websiteGlobalPattern = /\[(https?):\/\/((?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6})\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)\s+([\w\s]+)\]/g;
    var websitePattern = /\[(https?):\/\/((?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6})\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)\s+([\w\s]+)\]/;
    var website = { globalPattern: websiteGlobalPattern, parsePattern: websitePattern, parse: function(e) {
      var t = slicedToArray(e, 5), r = t[1], a2 = t[2], n = t[3];
      return { protocol: r, hostname: a2, path: n, title: t[4], url: r + "://" + a2 + n };
    }, variable: "WEBSITE", name: "websites" };
    var globalPattern$1 = /\{\{Extra[^}}]+\}\}/gi;
    var parsePattern = /\|\s?(\w+)\s+=\s+(.+)/g;
    var propPattern = /\|\s?(\w+)\s+=\s+(.+)/;
    var extra = { globalPattern: globalPattern$1, parsePattern, parse: function(e) {
      return e.reduce(function(e3, t) {
        var r = t.match(propPattern), a2 = slicedToArray(r, 3), n = a2[1], l = a2[2];
        return e3[n] = l, e3;
      }, {});
    }, variable: "EXTRA", name: "extra" };
    var convertGlobalPattern = /\{\{convert\|([\d\.]+)\|(\w+)/g;
    var convertPattern = /\{\{convert\|([\d\.]+)\|(\w+)/;
    var convert = { globalPattern: convertGlobalPattern, parsePattern: convertPattern, parse: function(e) {
      var t = slicedToArray(e, 3);
      return t[1] + " " + t[2];
    }, variable: "CONVERT", name: "converts" };
    var filmDatesPattern = /\{\{film\sdate([^\}\}]+)\}\}/gi;
    var filmDatePatternGlobal = /(\d+)\|?(\d+)\|?(\d+)\|?([^\|\}]*)\|?(ref\d+=([^\|\}]*))?/g;
    var filmDatePattern = /(\d+)\|?(\d+)\|?(\d+)\|?([^\|\}]*)\|?(ref\d+=([^\|\}]*))?/;
    var filmDates = { globalPattern: filmDatesPattern, parsePattern: filmDatePatternGlobal, parse: function(e) {
      return e.map(function(e3) {
        var t = e3.match(filmDatePattern), r = slicedToArray(t, 7), a2 = (r[0], r[1]), n = r[2], l = r[3], i = r[4], s = (r[5], r[6]);
        return { date: new Date(a2, n && n - 1, l), location: i, ref: s };
      });
    }, variable: "FILM_DATES", name: "filmDates" };
    var otherGlobalPattern$1 = /<ref(\s\w+=[^>]+)?>(.*)<\/ref>/g;
    var otherPattern$1 = /<ref(\s\w+=[^>]+)?>(.*)<\/ref>/;
    var attributeGlobalPattern = /(\w+)=(["\w]+)/g;
    var attributePattern = /(\w+)=(["\w]+)/;
    var ref1 = { globalPattern: otherGlobalPattern$1, parsePattern: otherPattern$1, parse: function(e) {
      var t = slicedToArray(e, 3), r = (t[0], t[1]), a2 = t[2];
      return { attributes: ((r || "").match(attributeGlobalPattern) || []).reduce(function(e3, t2) {
        if (t2) {
          var r2 = t2.match(attributePattern), a3 = slicedToArray(r2, 3), n = (a3[0], a3[1]), l = a3[2];
          e3[n] = l.replace(/"/g, "");
        }
        return e3;
      }, {}), contents: a2 };
    }, variable: "REF", name: "refs" };
    var otherGlobalPattern$2 = /<ref(\s\w+=[^>]+)?\/>/g;
    var otherPattern$2 = /<ref(\s\w+=[^>]+)?\/>/;
    var attributeGlobalPattern$1 = /(\w+)=(["\w]+)/g;
    var attributePattern$1 = /(\w+)=(["\w]+)/;
    var ref2 = { globalPattern: otherGlobalPattern$2, parsePattern: otherPattern$2, parse: function(e) {
      return { attributes: e[1].match(attributeGlobalPattern$1).reduce(function(e3, t) {
        var r = t.match(attributePattern$1), a2 = slicedToArray(r, 3), n = (a2[0], a2[1]), l = a2[2];
        return e3[n] = l.replace(/"/g, ""), e3;
      }, {}) };
    }, variable: "REF", name: "refs" };
    var globalPattern$2 = /\{\{formatnum:\d+\}\}/gi;
    var parsePattern$1 = /\{\{formatnum:(\d+)\}\}/;
    var formatNum = { globalPattern: globalPattern$2, parsePattern: parsePattern$1, parse: function(e) {
      var t = slicedToArray(e, 2), r = t[1];
      return parseFloat(r);
    }, variable: "FORMAT_NUM", name: "formatNum" };
    var dataTypes = [instances, ref1, ref2, small, formatNum, flag, coords, marriages, birthDates, labeledDates, deathDates, unbulletedLists, website, hlist, url, convert, nbay, filmDates, other, extra, plainLists, unmarkedLists];
    var dataTypes$1 = dataTypes.map(function(e) {
      return { handler: dataType(e), name: e.name, pattern: new RegExp("\\$" + e.variable + "_(\\d+)") };
    });
    var keyValueGlobalPattern = /\|\s*([-'\u0400-\u04FF\w\s]+)\s*=\s*([^|]+)?/g;
    var keyValuePattern = /\|\s*([-'\u0400-\u04FF\w\s]+)\s*=\s*([^|]+)?/;
    var numberParse = function(e) {
      return "string" == typeof e && (e = e.trim().replace(/ /g, ""), e.match(/,/) && e.match(/\./) ? e.indexOf(",") < e.indexOf(".") ? parseEnglish(e) : parseSpanish(e) : e.match(/,/) && !e.match(/\./) ? e.match(/,/g).length > 1 ? parseEnglish(e) : e.match(/,[0-9]{3}($|^[0-9])/) ? parseEnglish(e) : parseSpanish(e) : !e.match(/,/) && e.match(/\./) ? e.match(/\./g).length > 1 ? parseSpanish(e) : e.match(/\.[0-9]{3}($|^[0-9])/) ? parseSpanish(e) : parseEnglish(e) : (+e).toString() === e && +e);
    };
    var parseEnglish = function(e) {
      return +e.replace(/,/g, "");
    };
    var parseSpanish = function(e) {
      return +e.replace(/\./g, "").replace(/,/g, ".");
    };
    var smallDataType = dataTypes$1.find(function(e) {
      return "smalls" === e.name;
    });
    var blankNamePattern = /blank(\d+)?NameSec2/;
    var blankInfoPattern = /blank(\d+)?InfoSec2/;
    var infoBoxStartPattern = /{{\w*box/;
    var tableStartPattern = /{\|(.*)\n?/;
    var tableEndPattern = /\n\|}/;
    var headersPattern = /!\s?(.*)/g;
    var rowPattern = /\|-/;
    var cellSeparatorPattern = /(?:\n\|)|(?:\|\|)/;
    var linkPattern = /\[\[([^\]]+)\]\]/g;
    var linkNamePattern = /^.*\|/;
    var inlineHeaderPattern = "!!";
    var actionPattern = /{{anchor\|(.*)}}/g;
    var rowSpanCountPattern = /rowspan="(\d+)"/;
    var stripLinks = function(e) {
      return e.replace(linkPattern, function(e3, t) {
        return t.replace(linkNamePattern, "").trim() || t;
      });
    };
    var removeActions = function(e) {
      return e.replace(actionPattern, "");
    };
    var transformCell = function(e) {
      return stripLinks(removeActions(e || "")).replace(rowSpanCountPattern, "").replace(linkNamePattern, "").trim();
    };
    var transformCells = function(e) {
      return e.split(cellSeparatorPattern).map(transformCell);
    };
    var findIndex = function(e, t) {
      var r = e.match(t);
      return r ? r.index : -1;
    };
    var findTableStart = function(e) {
      var t = e.match(tableStartPattern);
      return t ? t.index + t[0].length : -1;
    };
    var findTableEnd = function(e) {
      return findIndex(e, tableEndPattern);
    };
    var getHeaders = function(e) {
      for (var t = [], r = void 0; r = headersPattern.exec(e); )
        t.push.apply(t, toConsumableArray(r[1].split(inlineHeaderPattern).map(transformCell)));
      return t;
    };
    var getRows = function(e) {
      var t = e.split(rowPattern).map(function(e3) {
        return e3.replace(/^.*\n+?\|/, "").trim();
      }).filter(function(e3) {
        return e3;
      }), r = [], a2 = 0, n = 0, l = [], i = true, s = false, o = void 0;
      try {
        for (var u, c2 = t[Symbol.iterator](); !(i = (u = c2.next()).done); i = true) {
          var f = u.value, p = f.match(rowSpanCountPattern);
          p && (a2 = 0, n = parseInt(p[1]), l = []), a2 < n ? (l.push(f), ++a2 === n && r.push(transformRowSpan(l))) : r.push(f);
        }
      } catch (e3) {
        s = true, o = e3;
      } finally {
        try {
          !i && c2.return && c2.return();
        } finally {
          if (s)
            throw o;
        }
      }
      return r;
    };
    var getNextTable = function(e, t, r) {
      var a2 = e, n = findTableStart(a2);
      if (-1 === n)
        return null;
      a2 = a2.substring(n);
      var l = findTableEnd(a2);
      if (-1 === l)
        return null;
      a2 = a2.substring(0, l);
      var i = getRows(a2);
      if (!i.length)
        return null;
      var s = getHeaders(i[0]);
      return s.length ? { data: i.slice(1).map(transformCells).map(function(e3) {
        return s.reduce(function(a3, n2, l2) {
          return a3[camelCase(fillVariable(n2, t, r))] = fillVariables(e3[l2], t, r), a3;
        }, {});
      }), end: n + l } : null;
    };
    var parseTables = function(e, t) {
      for (var r = cleanSource(e, t), a2 = extractData(r), n = [], l = a2.source, i = null; i = getNextTable(l, a2.context, t); ) {
        if (!i)
          return n;
        n.push(i.data), l = l.substring(i.end);
      }
      return n;
    };
    var linkPattern$1 = /\[\[([^\]]+)\]\]/g;
    var kmPattern = /{{BSkm\|([\dx]+,[\dx]+)\|([\dx]+,[\dx]+)}}/g;
    var parseBsTables = function(e) {
      var t = e.replace(kmPattern, "$1/$2").match(/{{BS([^}}]+)}}/g);
      return t ? t.map(function(e3) {
        return clean(e3).split("|");
      }).map(parseRow).filter(function(e3) {
        return "-" !== e3.type[0];
      }) : null;
    };
    var headingPattern = /[^=]==\s?([\w\s]+)\s?==/g;
    var subheadingPattern = /===([\w\s]+)===/g;
    var tableStartPattern$1 = /{{list.+start.*}}/gi;
    var tableEndPattern$1 = /{{list.+end.*}}/gi;
    var rowPattern$1 = /{{(.*)}}/g;
    var rowPatternSingle = /{{(.*)}}/;
    var parseLists = function(e) {
      var t = getMatches(e, headingPattern), r = getMatches(e, subheadingPattern), a2 = getTables(e);
      return a2.forEach(function(e3) {
        var a3 = t.filter(function(t2) {
          return t2.end < e3.start;
        }).map(function(e4) {
          return e4.value;
        });
        e3.heading = last(a3);
        var n = r.filter(function(t2) {
          return t2.end < e3.start;
        }).map(function(e4) {
          return e4.value;
        });
        e3.subheading = last(n), delete e3.start, delete e3.end;
      }), a2;
    };
    module2.exports = parseInfobox;
  }
});

// node_modules/wikipedia/dist/page.js
var require_page = __commonJS({
  "node_modules/wikipedia/dist/page.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.citation = exports.pdf = exports.mobileHtml = exports.media = exports.related = exports.summary = exports.rawInfo = exports.tables = exports.infobox = exports.langLinks = exports.coordinates = exports.references = exports.links = exports.categories = exports.content = exports.html = exports.intro = exports.images = exports.Page = void 0;
    var errors_1 = require_errors();
    var request_1 = require_request();
    var utils_1 = require_utils();
    var messages_1 = require_messages();
    var infoboxParser = require_bundle_min();
    var Page = class {
      constructor(response) {
        this.intro = async (pageOptions) => {
          try {
            if (!this._intro) {
              const response2 = await (0, exports.intro)(this.pageid.toString(), pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.redirect);
              this._intro = response2;
            }
            return this._intro;
          } catch (error) {
            throw new errors_1.introError(error);
          }
        };
        this.images = async (listOptions) => {
          try {
            if (!this._images) {
              const result2 = await (0, exports.images)(this.pageid.toString(), listOptions);
              this._images = result2;
            }
            return this._images;
          } catch (error) {
            throw new errors_1.imageError(error);
          }
        };
        this.summary = async (pageOptions) => {
          try {
            if (!this._summary) {
              const result2 = await (0, exports.summary)(this.title, pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.redirect);
              this._summary = result2;
            }
            return this._summary;
          } catch (error) {
            throw new errors_1.summaryError(error);
          }
        };
        this.html = async (pageOptions) => {
          try {
            if (!this._html) {
              const result2 = await (0, exports.html)(this.pageid.toString(), pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.redirect);
              this._html = result2;
            }
            return this._html;
          } catch (error) {
            throw new errors_1.htmlError(error);
          }
        };
        this.content = async (pageOptions) => {
          try {
            if (!this._content) {
              const result2 = await (0, exports.content)(this.pageid.toString(), pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.redirect);
              this.parentid = result2.ids.parentId;
              this.revid = result2.ids.revId;
              this._content = result2.result;
            }
            return this._content;
          } catch (error) {
            throw new errors_1.contentError(error);
          }
        };
        this.categories = async (listOptions) => {
          try {
            if (!this._categories) {
              const result2 = await (0, exports.categories)(this.pageid.toString(), listOptions);
              this._categories = result2;
            }
            return this._categories;
          } catch (error) {
            throw new errors_1.categoriesError(error);
          }
        };
        this.links = async (listOptions) => {
          try {
            if (!this._links) {
              const result2 = await (0, exports.links)(this.pageid.toString(), listOptions);
              this._links = result2;
            }
            return this._links;
          } catch (error) {
            throw new errors_1.linksError(error);
          }
        };
        this.references = async (listOptions) => {
          try {
            if (!this._references) {
              const result2 = await (0, exports.references)(this.pageid.toString(), listOptions);
              this._references = result2;
            }
            return this._references;
          } catch (error) {
            throw new errors_1.linksError(error);
          }
        };
        this.coordinates = async (pageOptions) => {
          try {
            if (!this._coordinates) {
              const result2 = await (0, exports.coordinates)(this.pageid.toString(), pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.redirect);
              this._coordinates = result2;
            }
            return this._coordinates;
          } catch (error) {
            throw new errors_1.coordinatesError(error);
          }
        };
        this.langLinks = async (listOptions) => {
          try {
            if (!this._langLinks) {
              const result2 = await (0, exports.langLinks)(this.pageid.toString(), listOptions);
              this._langLinks = result2;
            }
            return this._langLinks;
          } catch (error) {
            throw new errors_1.linksError(error);
          }
        };
        this.infobox = async (pageOptions) => {
          try {
            if (!this._infobox) {
              const result2 = await (0, exports.infobox)(this.pageid.toString(), pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.redirect);
              this._infobox = result2;
            }
            return this._infobox;
          } catch (error) {
            throw new errors_1.infoboxError(error);
          }
        };
        this.tables = async (pageOptions) => {
          try {
            if (!this._tables) {
              const result2 = await (0, exports.tables)(this.pageid.toString(), pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.redirect);
              this._tables = result2;
            }
            return this._tables;
          } catch (error) {
            throw new errors_1.infoboxError(error);
          }
        };
        this.related = async (pageOptions) => {
          try {
            if (!this._related) {
              const result2 = await (0, exports.related)(this.title, pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.redirect);
              this._related = result2;
            }
            return this._related;
          } catch (error) {
            throw new errors_1.relatedError(error);
          }
        };
        this.media = async (pageOptions) => {
          try {
            if (!this._media) {
              const result2 = await (0, exports.media)(this.title, pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.redirect);
              this._media = result2;
            }
            return this._media;
          } catch (error) {
            throw new errors_1.mediaError(error);
          }
        };
        this.mobileHtml = async (pageOptions) => {
          try {
            if (!this._mobileHtml) {
              const result2 = await (0, exports.mobileHtml)(this.title, pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.redirect);
              this._mobileHtml = result2;
            }
            return this._mobileHtml;
          } catch (error) {
            throw new errors_1.htmlError(error);
          }
        };
        this.pdf = async (pdfOptions) => {
          try {
            const result2 = await (0, exports.pdf)(this.title, pdfOptions);
            return result2;
          } catch (error) {
            throw new errors_1.pdfError(error);
          }
        };
        this.pageid = response.pageid;
        this.ns = response.ns;
        this.title = response.title;
        this.contentmodel = response.contentmodel;
        this.pagelanguage = response.pagelanguage;
        this.pagelanguagedir = response.pagelanguagedir;
        this.touched = response.touched;
        this.lastrevid = response.lastrevid;
        this.length = response.length;
        this.fullurl = response.fullurl;
        this.editurl = response.editurl;
        this.canonicalurl = response.canonicalurl;
      }
      async runMethod(functionName) {
        try {
          const result = await eval(`this.${functionName}()`);
          return result;
        } catch (error) {
          throw new errors_1.preloadError(error);
        }
      }
    };
    exports.Page = Page;
    var images = async (title, listOptions) => {
      try {
        let imageOptions = {
          generator: "images",
          gimlimit: (listOptions === null || listOptions === void 0 ? void 0 : listOptions.limit) || 5,
          prop: "imageinfo",
          iiprop: "url"
        };
        imageOptions = (0, utils_1.setPageIdOrTitleParam)(imageOptions, title);
        const response = await (0, request_1.default)(imageOptions, listOptions === null || listOptions === void 0 ? void 0 : listOptions.redirect);
        const images2 = [];
        const imageKeys = Object.keys(response.query.pages);
        for (const image of imageKeys) {
          const imageInfo = response.query.pages[image];
          imageInfo.url = imageInfo.imageinfo[0].url;
          images2.push(imageInfo);
        }
        return images2;
      } catch (error) {
        throw new errors_1.imageError(error);
      }
    };
    exports.images = images;
    var intro = async (title, redirect = true) => {
      var _a;
      try {
        let introOptions = {
          prop: "extracts",
          explaintext: "",
          exintro: ""
        };
        introOptions = (0, utils_1.setPageIdOrTitleParam)(introOptions, title);
        const response = await (0, request_1.default)(introOptions, redirect);
        const pageId = (0, utils_1.setPageId)(introOptions, response);
        return (_a = response === null || response === void 0 ? void 0 : response.query) === null || _a === void 0 ? void 0 : _a.pages[pageId].extract;
      } catch (error) {
        throw new errors_1.introError(error);
      }
    };
    exports.intro = intro;
    var html = async (title, redirect = true) => {
      try {
        let htmlOptions = {
          "prop": "revisions",
          "rvprop": "content",
          "rvlimit": 1,
          "rvparse": ""
        };
        htmlOptions = (0, utils_1.setPageIdOrTitleParam)(htmlOptions, title);
        const response = await (0, request_1.default)(htmlOptions, redirect);
        const pageId = (0, utils_1.setPageId)(htmlOptions, response);
        return response.query.pages[pageId].revisions[0]["*"];
      } catch (error) {
        throw new errors_1.htmlError(error);
      }
    };
    exports.html = html;
    var content = async (title, redirect = true) => {
      try {
        let contentOptions = {
          "prop": "extracts|revisions",
          "explaintext": "",
          "rvprop": "ids"
        };
        contentOptions = (0, utils_1.setPageIdOrTitleParam)(contentOptions, title);
        const response = await (0, request_1.default)(contentOptions, redirect);
        const pageId = (0, utils_1.setPageId)(contentOptions, response);
        const result2 = response["query"]["pages"][pageId]["extract"];
        const ids = {
          revisionId: response["query"]["pages"][pageId]["revisions"][0]["revid"],
          parentId: response["query"]["pages"][pageId]["revisions"][0]["parentid"]
        };
        return {
          result: result2,
          ids
        };
      } catch (error) {
        throw new errors_1.contentError(error);
      }
    };
    exports.content = content;
    var categories = async (title, listOptions) => {
      try {
        let categoryOptions = {
          prop: "categories",
          pllimit: listOptions === null || listOptions === void 0 ? void 0 : listOptions.limit
        };
        categoryOptions = (0, utils_1.setPageIdOrTitleParam)(categoryOptions, title);
        const response = await (0, request_1.default)(categoryOptions, listOptions === null || listOptions === void 0 ? void 0 : listOptions.redirect);
        const pageId = (0, utils_1.setPageId)(categoryOptions, response);
        return response.query.pages[pageId].categories.map((category) => category.title);
      } catch (error) {
        throw new errors_1.categoriesError(error);
      }
    };
    exports.categories = categories;
    var links = async (title, listOptions) => {
      try {
        let linksOptions = {
          prop: "links",
          plnamespace: 0,
          pllimit: (listOptions === null || listOptions === void 0 ? void 0 : listOptions.limit) || "max"
        };
        linksOptions = (0, utils_1.setPageIdOrTitleParam)(linksOptions, title);
        const response = await (0, request_1.default)(linksOptions, listOptions === null || listOptions === void 0 ? void 0 : listOptions.redirect);
        const pageId = (0, utils_1.setPageId)(linksOptions, response);
        const result2 = response.query.pages[pageId].links.map((link) => link.title);
        return result2;
      } catch (error) {
        throw new errors_1.linksError(error);
      }
    };
    exports.links = links;
    var references = async (title, listOptions) => {
      try {
        let extLinksOptions = {
          prop: "extlinks",
          ellimit: (listOptions === null || listOptions === void 0 ? void 0 : listOptions.limit) || "max"
        };
        extLinksOptions = (0, utils_1.setPageIdOrTitleParam)(extLinksOptions, title);
        const response = await (0, request_1.default)(extLinksOptions, listOptions === null || listOptions === void 0 ? void 0 : listOptions.redirect);
        const pageId = (0, utils_1.setPageId)(extLinksOptions, response);
        const result2 = response.query.pages[pageId].extlinks.map((link) => link["*"]);
        return result2;
      } catch (error) {
        throw new errors_1.linksError(error);
      }
    };
    exports.references = references;
    var coordinates = async (title, redirect = true) => {
      try {
        let coordinatesOptions = {
          prop: "coordinates"
        };
        coordinatesOptions = (0, utils_1.setPageIdOrTitleParam)(coordinatesOptions, title);
        const response = await (0, request_1.default)(coordinatesOptions, redirect);
        const pageId = (0, utils_1.setPageId)(coordinatesOptions, response);
        const coordinates2 = response.query.pages[pageId].coordinates;
        return coordinates2 ? coordinates2[0] : null;
      } catch (error) {
        throw new errors_1.coordinatesError(error);
      }
    };
    exports.coordinates = coordinates;
    var langLinks = async (title, listOptions) => {
      var _a;
      try {
        let languageOptions = {
          prop: "langlinks",
          lllimit: (listOptions === null || listOptions === void 0 ? void 0 : listOptions.limit) || "max",
          llprop: "url"
        };
        languageOptions = (0, utils_1.setPageIdOrTitleParam)(languageOptions, title);
        const response = await (0, request_1.default)(languageOptions, listOptions === null || listOptions === void 0 ? void 0 : listOptions.redirect);
        const pageId = (0, utils_1.setPageId)(languageOptions, response);
        const result2 = ((_a = response.query.pages[pageId].langlinks) !== null && _a !== void 0 ? _a : []).map((link) => {
          return {
            lang: link.lang,
            title: link["*"],
            url: link.url
          };
        });
        return result2;
      } catch (error) {
        throw new errors_1.linksError(error);
      }
    };
    exports.langLinks = langLinks;
    var infobox = async (title, redirect = true) => {
      try {
        const infoboxOptions = {
          prop: "revisions",
          rvprop: "content",
          rvsection: 0
        };
        const fullInfo = await (0, exports.rawInfo)(title, infoboxOptions, redirect);
        const info = infoboxParser(fullInfo).general;
        return info;
      } catch (error) {
        throw new errors_1.infoboxError(error);
      }
    };
    exports.infobox = infobox;
    var tables = async (title, redirect = true) => {
      try {
        const tableOptions = {
          prop: "revisions",
          rvprop: "content"
        };
        const fullInfo = await (0, exports.rawInfo)(title, tableOptions, redirect);
        const info = infoboxParser(fullInfo).tables;
        return info;
      } catch (error) {
        throw new errors_1.infoboxError(error);
      }
    };
    exports.tables = tables;
    var rawInfo = async (title, options, redirect = true) => {
      var _a;
      try {
        options = (0, utils_1.setPageIdOrTitleParam)(options, title);
        const response = await (0, request_1.default)(options, redirect);
        if (!((_a = response.query) === null || _a === void 0 ? void 0 : _a.pages)) {
          throw new errors_1.wikiError(messages_1.MSGS.INFOBOX_NOT_EXIST);
        }
        const pageId = (0, utils_1.setPageId)(options, response);
        const data = response.query.pages[pageId]["revisions"][0];
        return data ? data["*"] : "";
      } catch (error) {
        throw new errors_1.infoboxError(error);
      }
    };
    exports.rawInfo = rawInfo;
    var summary = async (title, redirect = true) => {
      try {
        const path = "page/summary/" + title.replace(" ", "_");
        const response = await (0, request_1.makeRestRequest)(path, redirect);
        return response;
      } catch (error) {
        throw new errors_1.summaryError(error);
      }
    };
    exports.summary = summary;
    var related = async (title, redirect = true) => {
      try {
        const path = "page/related/" + title.replace(" ", "_");
        const response = await (0, request_1.makeRestRequest)(path, redirect);
        return response;
      } catch (error) {
        throw new errors_1.relatedError(error);
      }
    };
    exports.related = related;
    var media = async (title, redirect = true) => {
      try {
        const path = "page/media-list/" + title.replace(" ", "_");
        const response = await (0, request_1.makeRestRequest)(path, redirect);
        return response;
      } catch (error) {
        throw new errors_1.mediaError(error);
      }
    };
    exports.media = media;
    var mobileHtml = async (title, redirect = true) => {
      try {
        const path = `page/mobile-html/${title}`;
        const result2 = await (0, request_1.makeRestRequest)(path, redirect);
        return result2;
      } catch (error) {
        throw new errors_1.htmlError(error);
      }
    };
    exports.mobileHtml = mobileHtml;
    var pdf = async (title, pdfOptions) => {
      try {
        let path = `page/pdf/${title}`;
        (pdfOptions === null || pdfOptions === void 0 ? void 0 : pdfOptions.format) ? path += `/${pdfOptions.format}` : null;
        (pdfOptions === null || pdfOptions === void 0 ? void 0 : pdfOptions.type) ? path += `/${pdfOptions.type}` : null;
        const result2 = (0, request_1.returnRestUrl)(path);
        return result2;
      } catch (error) {
        throw new errors_1.pdfError(error);
      }
    };
    exports.pdf = pdf;
    var citation = async (query, format2, language) => {
      try {
        let path = `data/citation`;
        path += format2 ? `/${format2}` : `/mediawiki`;
        path += `/${query}`;
        language ? path += `/${language}` : null;
        const result2 = await (0, request_1.makeRestRequest)(path);
        return result2;
      } catch (error) {
        throw new errors_1.citationError(error);
      }
    };
    exports.citation = citation;
    exports.default = Page;
  }
});

// node_modules/wikipedia/dist/resultTypes.js
var require_resultTypes = __commonJS({
  "node_modules/wikipedia/dist/resultTypes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/wikipedia/dist/optionTypes.js
var require_optionTypes = __commonJS({
  "node_modules/wikipedia/dist/optionTypes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/wikipedia/dist/index.js
var require_dist = __commonJS({
  "node_modules/wikipedia/dist/index.js"(exports2, module2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m2, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m2, k);
      if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m2[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m2, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m2[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m2, exports3) {
      for (var p in m2)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
          __createBinding(exports3, m2, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    var request_12 = require_request();
    var page_1 = require_page();
    var errors_12 = require_errors();
    var messages_12 = require_messages();
    var utils_12 = require_utils();
    var wiki2 = async (title, pageOptions) => {
      return wiki2.page(title, pageOptions);
    };
    wiki2.search = async (query, searchOptions) => {
      try {
        const searchParams = {
          "list": "search",
          "srprop": "",
          "srlimit": (searchOptions === null || searchOptions === void 0 ? void 0 : searchOptions.limit) || 10,
          "srsearch": query
        };
        (searchOptions === null || searchOptions === void 0 ? void 0 : searchOptions.suggestion) ? searchParams["srinfo"] = "suggestion" : null;
        const response = await (0, request_12.default)(searchParams);
        const result2 = {
          results: response.query.search,
          suggestion: response.query.searchinfo ? response.query.searchinfo.suggestion : null
        };
        return result2;
      } catch (error) {
        throw new errors_12.searchError(error);
      }
    };
    wiki2.page = async (title, pageOptions) => {
      try {
        if (pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.autoSuggest) {
          title = await (0, utils_12.setTitleForPage)(title);
        }
        let pageParams = {
          prop: "info|pageprops",
          inprop: "url",
          ppprop: "disambiguation"
        };
        pageParams = (0, utils_12.setPageIdOrTitleParam)(pageParams, title);
        const response = await (0, request_12.default)(pageParams);
        let pageInfo = response.query.pages;
        const pageId = (0, utils_12.setPageId)(pageParams, response);
        pageInfo = pageInfo[pageId];
        if (pageInfo.missing == "") {
          throw new errors_12.pageError(`${messages_12.MSGS.PAGE_NOT_EXIST}${title}`);
        }
        const page2 = new page_1.default(pageInfo);
        if (pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.preload) {
          if (!(pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.fields)) {
            pageOptions.fields = ["summary", "images"];
          }
          for (const field of pageOptions.fields) {
            await page2.runMethod(field);
          }
        }
        return page2;
      } catch (error) {
        throw new errors_12.pageError(error);
      }
    };
    wiki2.intro = async (title, pageOptions) => {
      try {
        if (pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.autoSuggest) {
          title = await (0, utils_12.setTitleForPage)(title);
        }
        const result2 = await (0, page_1.intro)(title, pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.redirect);
        return result2;
      } catch (error) {
        throw new errors_12.introError(error);
      }
    };
    wiki2.images = async (title, listOptions) => {
      try {
        if (listOptions === null || listOptions === void 0 ? void 0 : listOptions.autoSuggest) {
          title = await (0, utils_12.setTitleForPage)(title);
        }
        const result2 = await (0, page_1.images)(title, listOptions);
        return result2;
      } catch (error) {
        throw new errors_12.imageError(error);
      }
    };
    wiki2.summary = async (title, pageOptions) => {
      try {
        if (pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.autoSuggest) {
          title = await (0, utils_12.setTitleForPage)(title);
        }
        const result2 = await (0, page_1.summary)(title, pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.redirect);
        return result2;
      } catch (error) {
        throw new errors_12.summaryError(error);
      }
    };
    wiki2.html = async (title, pageOptions) => {
      try {
        if (pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.autoSuggest) {
          title = await (0, utils_12.setTitleForPage)(title);
        }
        const result2 = await (0, page_1.html)(title, pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.redirect);
        return result2;
      } catch (error) {
        throw new errors_12.htmlError(error);
      }
    };
    wiki2.content = async (title, pageOptions) => {
      try {
        if (pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.autoSuggest) {
          title = await (0, utils_12.setTitleForPage)(title);
        }
        const response = await (0, page_1.content)(title, pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.redirect);
        return response.result;
      } catch (error) {
        throw new errors_12.contentError(error);
      }
    };
    wiki2.categories = async (title, listOptions) => {
      try {
        if (listOptions === null || listOptions === void 0 ? void 0 : listOptions.autoSuggest) {
          title = await (0, utils_12.setTitleForPage)(title);
        }
        const response = await (0, page_1.categories)(title, listOptions);
        return response;
      } catch (error) {
        throw new errors_12.categoriesError(error);
      }
    };
    wiki2.related = async (title, pageOptions) => {
      try {
        if (pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.autoSuggest) {
          title = await (0, utils_12.setTitleForPage)(title);
        }
        const response = await (0, page_1.related)(title, pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.redirect);
        return response;
      } catch (error) {
        throw new errors_12.relatedError(error);
      }
    };
    wiki2.media = async (title, pageOptions) => {
      try {
        if (pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.autoSuggest) {
          title = await (0, utils_12.setTitleForPage)(title);
        }
        const response = await (0, page_1.media)(title, pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.redirect);
        return response;
      } catch (error) {
        throw new errors_12.mediaError(error);
      }
    };
    wiki2.links = async (title, listOptions) => {
      try {
        if (listOptions === null || listOptions === void 0 ? void 0 : listOptions.autoSuggest) {
          title = await (0, utils_12.setTitleForPage)(title);
        }
        const response = await (0, page_1.links)(title, listOptions);
        return response;
      } catch (error) {
        throw new errors_12.linksError(error);
      }
    };
    wiki2.references = async (title, listOptions) => {
      try {
        if (listOptions === null || listOptions === void 0 ? void 0 : listOptions.autoSuggest) {
          title = await (0, utils_12.setTitleForPage)(title);
        }
        const response = await (0, page_1.references)(title, listOptions);
        return response;
      } catch (error) {
        throw new errors_12.linksError(error);
      }
    };
    wiki2.coordinates = async (title, pageOptions) => {
      try {
        if (pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.autoSuggest) {
          title = await (0, utils_12.setTitleForPage)(title);
        }
        const response = await (0, page_1.coordinates)(title, pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.redirect);
        return response;
      } catch (error) {
        throw new errors_12.coordinatesError(error);
      }
    };
    wiki2.langLinks = async (title, listOptions) => {
      try {
        if (listOptions === null || listOptions === void 0 ? void 0 : listOptions.autoSuggest) {
          title = await (0, utils_12.setTitleForPage)(title);
        }
        const response = await (0, page_1.langLinks)(title, listOptions);
        return response;
      } catch (error) {
        throw new errors_12.linksError(error);
      }
    };
    wiki2.infobox = async (title, pageOptions) => {
      try {
        if (pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.autoSuggest) {
          title = await (0, utils_12.setTitleForPage)(title);
        }
        const response = await (0, page_1.infobox)(title, pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.redirect);
        return response;
      } catch (error) {
        throw new errors_12.infoboxError(error);
      }
    };
    wiki2.tables = async (title, pageOptions) => {
      try {
        if (pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.autoSuggest) {
          title = await (0, utils_12.setTitleForPage)(title);
        }
        const response = await (0, page_1.tables)(title, pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.redirect);
        return response;
      } catch (error) {
        throw new errors_12.infoboxError(error);
      }
    };
    wiki2.languages = async () => {
      try {
        const langParams = {
          "meta": "siteinfo",
          "siprop": "languages"
        };
        const response = await (0, request_12.default)(langParams);
        const languages = [];
        for (const lang2 of response.query.languages) {
          languages.push({ [lang2.code]: lang2["*"] });
        }
        return languages;
      } catch (error) {
        throw new errors_12.wikiError(error);
      }
    };
    wiki2.setLang = (language) => {
      const apiUrl = (0, request_12.setAPIUrl)(language);
      return apiUrl;
    };
    wiki2.geoSearch = async (latitude, longitude, geoOptions) => {
      try {
        const geoSearchParams = {
          "list": "geosearch",
          "gsradius": (geoOptions === null || geoOptions === void 0 ? void 0 : geoOptions.radius) || 1e3,
          "gscoord": `${latitude}|${longitude}`,
          "gslimit": (geoOptions === null || geoOptions === void 0 ? void 0 : geoOptions.limit) || 10,
          "gsprop": "type"
        };
        const results = await (0, request_12.default)(geoSearchParams);
        const searchPages = results.query.geosearch;
        return searchPages;
      } catch (error) {
        throw new errors_12.geoSearchError(error);
      }
    };
    wiki2.suggest = async (query) => {
      var _a, _b, _c, _d;
      try {
        const suggestParams = {
          "list": "search",
          "srinfo": "suggestion",
          "srprop": "",
          "srsearch": query
        };
        const result2 = await (0, request_12.default)(suggestParams);
        return ((_b = (_a = result2.query) === null || _a === void 0 ? void 0 : _a.searchinfo) === null || _b === void 0 ? void 0 : _b.suggestion) ? (_d = (_c = result2.query) === null || _c === void 0 ? void 0 : _c.searchinfo) === null || _d === void 0 ? void 0 : _d.suggestion : null;
      } catch (error) {
        throw new errors_12.searchError(error);
      }
    };
    wiki2.onThisDay = async (eventOptions = {}) => {
      try {
        const type2 = eventOptions.type || "all";
        const mm = (eventOptions.month || (0, utils_12.getCurrentMonth)()).toString().padStart(2, "0");
        const dd = (eventOptions.day || (0, utils_12.getCurrentDay)()).toString().padStart(2, "0");
        const path = `feed/onthisday/${type2}/${mm}/${dd}`;
        const result2 = await (0, request_12.makeRestRequest)(path, true);
        return result2;
      } catch (error) {
        throw new errors_12.eventsError(error);
      }
    };
    wiki2.featuredContent = async (fcOptions = {}) => {
      try {
        const yyyy = (fcOptions.year || (0, utils_12.getCurrentYear)()).toString();
        const mm = (fcOptions.month || (0, utils_12.getCurrentMonth)()).toString().padStart(2, "0");
        const dd = (fcOptions.day || (0, utils_12.getCurrentDay)()).toString().padStart(2, "0");
        const path = `feed/featured/${yyyy}/${mm}/${dd}`;
        const result2 = await (0, request_12.makeRestRequest)(path, true);
        return result2;
      } catch (error) {
        throw new errors_12.fcError(error);
      }
    };
    wiki2.random = async (format2) => {
      try {
        if (!format2) {
          format2 = "summary";
        }
        const path = `page/random/${format2}`;
        const result2 = await (0, request_12.makeRestRequest)(path);
        return result2;
      } catch (error) {
        throw new errors_12.wikiError(error);
      }
    };
    wiki2.mobileHtml = async (title, pageOptions) => {
      try {
        if (pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.autoSuggest) {
          title = await (0, utils_12.setTitleForPage)(title);
        }
        const result2 = await (0, page_1.mobileHtml)(title, pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.redirect);
        return result2;
      } catch (error) {
        throw new errors_12.htmlError(error);
      }
    };
    wiki2.pdf = async (title, pdfOptions) => {
      try {
        if (pdfOptions === null || pdfOptions === void 0 ? void 0 : pdfOptions.autoSuggest) {
          title = await (0, utils_12.setTitleForPage)(title);
        }
        const result2 = await (0, page_1.pdf)(title, pdfOptions);
        return result2;
      } catch (error) {
        throw new errors_12.pdfError(error);
      }
    };
    wiki2.citation = async (query, format2, language) => {
      try {
        const result2 = await (0, page_1.citation)(query, format2, language);
        return result2;
      } catch (error) {
        throw new errors_12.citationError(error);
      }
    };
    wiki2.autocompletions = async (query, autocompletionOptions) => {
      try {
        const autocompletionsParams = {
          list: "search",
          limit: (autocompletionOptions === null || autocompletionOptions === void 0 ? void 0 : autocompletionOptions.limit) || 10,
          search: query,
          action: "opensearch",
          redirect: "return"
        };
        const [, autocompletions] = await (0, request_12.default)(autocompletionsParams, false);
        return autocompletions;
      } catch (error) {
        throw new errors_12.autocompletionsError(error);
      }
    };
    wiki2.setUserAgent = (userAgent) => {
      (0, request_12.setUserAgent)(userAgent);
    };
    exports2.default = wiki2;
    module2.exports = wiki2;
    module2.exports.default = wiki2;
    __exportStar(require_errors(), exports2);
    __exportStar(require_resultTypes(), exports2);
    __exportStar(require_optionTypes(), exports2);
    __exportStar(require_page(), exports2);
  }
});

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ScGraphView
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");

// node_modules/d3-array/src/ascending.js
function ascending(a2, b) {
  return a2 == null || b == null ? NaN : a2 < b ? -1 : a2 > b ? 1 : a2 >= b ? 0 : NaN;
}

// node_modules/d3-array/src/descending.js
function descending(a2, b) {
  return a2 == null || b == null ? NaN : b < a2 ? -1 : b > a2 ? 1 : b >= a2 ? 0 : NaN;
}

// node_modules/d3-array/src/bisector.js
function bisector(f) {
  let compare1, compare2, delta;
  if (f.length !== 2) {
    compare1 = ascending;
    compare2 = (d, x3) => ascending(f(d), x3);
    delta = (d, x3) => f(d) - x3;
  } else {
    compare1 = f === ascending || f === descending ? f : zero;
    compare2 = f;
    delta = f;
  }
  function left(a2, x3, lo = 0, hi = a2.length) {
    if (lo < hi) {
      if (compare1(x3, x3) !== 0)
        return hi;
      do {
        const mid = lo + hi >>> 1;
        if (compare2(a2[mid], x3) < 0)
          lo = mid + 1;
        else
          hi = mid;
      } while (lo < hi);
    }
    return lo;
  }
  function right(a2, x3, lo = 0, hi = a2.length) {
    if (lo < hi) {
      if (compare1(x3, x3) !== 0)
        return hi;
      do {
        const mid = lo + hi >>> 1;
        if (compare2(a2[mid], x3) <= 0)
          lo = mid + 1;
        else
          hi = mid;
      } while (lo < hi);
    }
    return lo;
  }
  function center(a2, x3, lo = 0, hi = a2.length) {
    const i = left(a2, x3, lo, hi - 1);
    return i > lo && delta(a2[i - 1], x3) > -delta(a2[i], x3) ? i - 1 : i;
  }
  return { left, center, right };
}
function zero() {
  return 0;
}

// node_modules/d3-array/src/number.js
function number(x3) {
  return x3 === null ? NaN : +x3;
}

// node_modules/d3-array/src/bisect.js
var ascendingBisect = bisector(ascending);
var bisectRight = ascendingBisect.right;
var bisectLeft = ascendingBisect.left;
var bisectCenter = bisector(number).center;
var bisect_default = bisectRight;

// node_modules/d3-array/src/ticks.js
var e10 = Math.sqrt(50);
var e5 = Math.sqrt(10);
var e2 = Math.sqrt(2);
function tickSpec(start2, stop, count) {
  const step = (stop - start2) / Math.max(0, count), power = Math.floor(Math.log10(step)), error = step / Math.pow(10, power), factor = error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1;
  let i1, i2, inc;
  if (power < 0) {
    inc = Math.pow(10, -power) / factor;
    i1 = Math.round(start2 * inc);
    i2 = Math.round(stop * inc);
    if (i1 / inc < start2)
      ++i1;
    if (i2 / inc > stop)
      --i2;
    inc = -inc;
  } else {
    inc = Math.pow(10, power) * factor;
    i1 = Math.round(start2 / inc);
    i2 = Math.round(stop / inc);
    if (i1 * inc < start2)
      ++i1;
    if (i2 * inc > stop)
      --i2;
  }
  if (i2 < i1 && 0.5 <= count && count < 2)
    return tickSpec(start2, stop, count * 2);
  return [i1, i2, inc];
}
function ticks(start2, stop, count) {
  stop = +stop, start2 = +start2, count = +count;
  if (!(count > 0))
    return [];
  if (start2 === stop)
    return [start2];
  const reverse = stop < start2, [i1, i2, inc] = reverse ? tickSpec(stop, start2, count) : tickSpec(start2, stop, count);
  if (!(i2 >= i1))
    return [];
  const n = i2 - i1 + 1, ticks2 = new Array(n);
  if (reverse) {
    if (inc < 0)
      for (let i = 0; i < n; ++i)
        ticks2[i] = (i2 - i) / -inc;
    else
      for (let i = 0; i < n; ++i)
        ticks2[i] = (i2 - i) * inc;
  } else {
    if (inc < 0)
      for (let i = 0; i < n; ++i)
        ticks2[i] = (i1 + i) / -inc;
    else
      for (let i = 0; i < n; ++i)
        ticks2[i] = (i1 + i) * inc;
  }
  return ticks2;
}
function tickIncrement(start2, stop, count) {
  stop = +stop, start2 = +start2, count = +count;
  return tickSpec(start2, stop, count)[2];
}
function tickStep(start2, stop, count) {
  stop = +stop, start2 = +start2, count = +count;
  const reverse = stop < start2, inc = reverse ? tickIncrement(stop, start2, count) : tickIncrement(start2, stop, count);
  return (reverse ? -1 : 1) * (inc < 0 ? 1 / -inc : inc);
}

// node_modules/d3-dispatch/src/dispatch.js
var noop = { value: () => {
} };
function dispatch() {
  for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {
    if (!(t = arguments[i] + "") || t in _ || /[\s.]/.test(t))
      throw new Error("illegal type: " + t);
    _[t] = [];
  }
  return new Dispatch(_);
}
function Dispatch(_) {
  this._ = _;
}
function parseTypenames(typenames, types) {
  return typenames.trim().split(/^|\s+/).map(function(t) {
    var name = "", i = t.indexOf(".");
    if (i >= 0)
      name = t.slice(i + 1), t = t.slice(0, i);
    if (t && !types.hasOwnProperty(t))
      throw new Error("unknown type: " + t);
    return { type: t, name };
  });
}
Dispatch.prototype = dispatch.prototype = {
  constructor: Dispatch,
  on: function(typename, callback) {
    var _ = this._, T = parseTypenames(typename + "", _), t, i = -1, n = T.length;
    if (arguments.length < 2) {
      while (++i < n)
        if ((t = (typename = T[i]).type) && (t = get(_[t], typename.name)))
          return t;
      return;
    }
    if (callback != null && typeof callback !== "function")
      throw new Error("invalid callback: " + callback);
    while (++i < n) {
      if (t = (typename = T[i]).type)
        _[t] = set(_[t], typename.name, callback);
      else if (callback == null)
        for (t in _)
          _[t] = set(_[t], typename.name, null);
    }
    return this;
  },
  copy: function() {
    var copy2 = {}, _ = this._;
    for (var t in _)
      copy2[t] = _[t].slice();
    return new Dispatch(copy2);
  },
  call: function(type2, that) {
    if ((n = arguments.length - 2) > 0)
      for (var args = new Array(n), i = 0, n, t; i < n; ++i)
        args[i] = arguments[i + 2];
    if (!this._.hasOwnProperty(type2))
      throw new Error("unknown type: " + type2);
    for (t = this._[type2], i = 0, n = t.length; i < n; ++i)
      t[i].value.apply(that, args);
  },
  apply: function(type2, that, args) {
    if (!this._.hasOwnProperty(type2))
      throw new Error("unknown type: " + type2);
    for (var t = this._[type2], i = 0, n = t.length; i < n; ++i)
      t[i].value.apply(that, args);
  }
};
function get(type2, name) {
  for (var i = 0, n = type2.length, c2; i < n; ++i) {
    if ((c2 = type2[i]).name === name) {
      return c2.value;
    }
  }
}
function set(type2, name, callback) {
  for (var i = 0, n = type2.length; i < n; ++i) {
    if (type2[i].name === name) {
      type2[i] = noop, type2 = type2.slice(0, i).concat(type2.slice(i + 1));
      break;
    }
  }
  if (callback != null)
    type2.push({ name, value: callback });
  return type2;
}
var dispatch_default = dispatch;

// node_modules/d3-selection/src/namespaces.js
var xhtml = "http://www.w3.org/1999/xhtml";
var namespaces_default = {
  svg: "http://www.w3.org/2000/svg",
  xhtml,
  xlink: "http://www.w3.org/1999/xlink",
  xml: "http://www.w3.org/XML/1998/namespace",
  xmlns: "http://www.w3.org/2000/xmlns/"
};

// node_modules/d3-selection/src/namespace.js
function namespace_default(name) {
  var prefix = name += "", i = prefix.indexOf(":");
  if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns")
    name = name.slice(i + 1);
  return namespaces_default.hasOwnProperty(prefix) ? { space: namespaces_default[prefix], local: name } : name;
}

// node_modules/d3-selection/src/creator.js
function creatorInherit(name) {
  return function() {
    var document2 = this.ownerDocument, uri = this.namespaceURI;
    return uri === xhtml && document2.documentElement.namespaceURI === xhtml ? document2.createElement(name) : document2.createElementNS(uri, name);
  };
}
function creatorFixed(fullname) {
  return function() {
    return this.ownerDocument.createElementNS(fullname.space, fullname.local);
  };
}
function creator_default(name) {
  var fullname = namespace_default(name);
  return (fullname.local ? creatorFixed : creatorInherit)(fullname);
}

// node_modules/d3-selection/src/selector.js
function none() {
}
function selector_default(selector) {
  return selector == null ? none : function() {
    return this.querySelector(selector);
  };
}

// node_modules/d3-selection/src/selection/select.js
function select_default(select) {
  if (typeof select !== "function")
    select = selector_default(select);
  for (var groups = this._groups, m2 = groups.length, subgroups = new Array(m2), j = 0; j < m2; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
        if ("__data__" in node)
          subnode.__data__ = node.__data__;
        subgroup[i] = subnode;
      }
    }
  }
  return new Selection(subgroups, this._parents);
}

// node_modules/d3-selection/src/array.js
function array(x3) {
  return x3 == null ? [] : Array.isArray(x3) ? x3 : Array.from(x3);
}

// node_modules/d3-selection/src/selectorAll.js
function empty() {
  return [];
}
function selectorAll_default(selector) {
  return selector == null ? empty : function() {
    return this.querySelectorAll(selector);
  };
}

// node_modules/d3-selection/src/selection/selectAll.js
function arrayAll(select) {
  return function() {
    return array(select.apply(this, arguments));
  };
}
function selectAll_default(select) {
  if (typeof select === "function")
    select = arrayAll(select);
  else
    select = selectorAll_default(select);
  for (var groups = this._groups, m2 = groups.length, subgroups = [], parents = [], j = 0; j < m2; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        subgroups.push(select.call(node, node.__data__, i, group));
        parents.push(node);
      }
    }
  }
  return new Selection(subgroups, parents);
}

// node_modules/d3-selection/src/matcher.js
function matcher_default(selector) {
  return function() {
    return this.matches(selector);
  };
}
function childMatcher(selector) {
  return function(node) {
    return node.matches(selector);
  };
}

// node_modules/d3-selection/src/selection/selectChild.js
var find = Array.prototype.find;
function childFind(match) {
  return function() {
    return find.call(this.children, match);
  };
}
function childFirst() {
  return this.firstElementChild;
}
function selectChild_default(match) {
  return this.select(match == null ? childFirst : childFind(typeof match === "function" ? match : childMatcher(match)));
}

// node_modules/d3-selection/src/selection/selectChildren.js
var filter = Array.prototype.filter;
function children() {
  return Array.from(this.children);
}
function childrenFilter(match) {
  return function() {
    return filter.call(this.children, match);
  };
}
function selectChildren_default(match) {
  return this.selectAll(match == null ? children : childrenFilter(typeof match === "function" ? match : childMatcher(match)));
}

// node_modules/d3-selection/src/selection/filter.js
function filter_default(match) {
  if (typeof match !== "function")
    match = matcher_default(match);
  for (var groups = this._groups, m2 = groups.length, subgroups = new Array(m2), j = 0; j < m2; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
        subgroup.push(node);
      }
    }
  }
  return new Selection(subgroups, this._parents);
}

// node_modules/d3-selection/src/selection/sparse.js
function sparse_default(update) {
  return new Array(update.length);
}

// node_modules/d3-selection/src/selection/enter.js
function enter_default() {
  return new Selection(this._enter || this._groups.map(sparse_default), this._parents);
}
function EnterNode(parent, datum2) {
  this.ownerDocument = parent.ownerDocument;
  this.namespaceURI = parent.namespaceURI;
  this._next = null;
  this._parent = parent;
  this.__data__ = datum2;
}
EnterNode.prototype = {
  constructor: EnterNode,
  appendChild: function(child) {
    return this._parent.insertBefore(child, this._next);
  },
  insertBefore: function(child, next) {
    return this._parent.insertBefore(child, next);
  },
  querySelector: function(selector) {
    return this._parent.querySelector(selector);
  },
  querySelectorAll: function(selector) {
    return this._parent.querySelectorAll(selector);
  }
};

// node_modules/d3-selection/src/constant.js
function constant_default(x3) {
  return function() {
    return x3;
  };
}

// node_modules/d3-selection/src/selection/data.js
function bindIndex(parent, group, enter, update, exit, data) {
  var i = 0, node, groupLength = group.length, dataLength = data.length;
  for (; i < dataLength; ++i) {
    if (node = group[i]) {
      node.__data__ = data[i];
      update[i] = node;
    } else {
      enter[i] = new EnterNode(parent, data[i]);
    }
  }
  for (; i < groupLength; ++i) {
    if (node = group[i]) {
      exit[i] = node;
    }
  }
}
function bindKey(parent, group, enter, update, exit, data, key) {
  var i, node, nodeByKeyValue = /* @__PURE__ */ new Map(), groupLength = group.length, dataLength = data.length, keyValues = new Array(groupLength), keyValue;
  for (i = 0; i < groupLength; ++i) {
    if (node = group[i]) {
      keyValues[i] = keyValue = key.call(node, node.__data__, i, group) + "";
      if (nodeByKeyValue.has(keyValue)) {
        exit[i] = node;
      } else {
        nodeByKeyValue.set(keyValue, node);
      }
    }
  }
  for (i = 0; i < dataLength; ++i) {
    keyValue = key.call(parent, data[i], i, data) + "";
    if (node = nodeByKeyValue.get(keyValue)) {
      update[i] = node;
      node.__data__ = data[i];
      nodeByKeyValue.delete(keyValue);
    } else {
      enter[i] = new EnterNode(parent, data[i]);
    }
  }
  for (i = 0; i < groupLength; ++i) {
    if ((node = group[i]) && nodeByKeyValue.get(keyValues[i]) === node) {
      exit[i] = node;
    }
  }
}
function datum(node) {
  return node.__data__;
}
function data_default(value, key) {
  if (!arguments.length)
    return Array.from(this, datum);
  var bind = key ? bindKey : bindIndex, parents = this._parents, groups = this._groups;
  if (typeof value !== "function")
    value = constant_default(value);
  for (var m2 = groups.length, update = new Array(m2), enter = new Array(m2), exit = new Array(m2), j = 0; j < m2; ++j) {
    var parent = parents[j], group = groups[j], groupLength = group.length, data = arraylike(value.call(parent, parent && parent.__data__, j, parents)), dataLength = data.length, enterGroup = enter[j] = new Array(dataLength), updateGroup = update[j] = new Array(dataLength), exitGroup = exit[j] = new Array(groupLength);
    bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);
    for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {
      if (previous = enterGroup[i0]) {
        if (i0 >= i1)
          i1 = i0 + 1;
        while (!(next = updateGroup[i1]) && ++i1 < dataLength)
          ;
        previous._next = next || null;
      }
    }
  }
  update = new Selection(update, parents);
  update._enter = enter;
  update._exit = exit;
  return update;
}
function arraylike(data) {
  return typeof data === "object" && "length" in data ? data : Array.from(data);
}

// node_modules/d3-selection/src/selection/exit.js
function exit_default() {
  return new Selection(this._exit || this._groups.map(sparse_default), this._parents);
}

// node_modules/d3-selection/src/selection/join.js
function join_default(onenter, onupdate, onexit) {
  var enter = this.enter(), update = this, exit = this.exit();
  if (typeof onenter === "function") {
    enter = onenter(enter);
    if (enter)
      enter = enter.selection();
  } else {
    enter = enter.append(onenter + "");
  }
  if (onupdate != null) {
    update = onupdate(update);
    if (update)
      update = update.selection();
  }
  if (onexit == null)
    exit.remove();
  else
    onexit(exit);
  return enter && update ? enter.merge(update).order() : update;
}

// node_modules/d3-selection/src/selection/merge.js
function merge_default(context) {
  var selection2 = context.selection ? context.selection() : context;
  for (var groups0 = this._groups, groups1 = selection2._groups, m0 = groups0.length, m1 = groups1.length, m2 = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m2; ++j) {
    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group0[i] || group1[i]) {
        merge[i] = node;
      }
    }
  }
  for (; j < m0; ++j) {
    merges[j] = groups0[j];
  }
  return new Selection(merges, this._parents);
}

// node_modules/d3-selection/src/selection/order.js
function order_default() {
  for (var groups = this._groups, j = -1, m2 = groups.length; ++j < m2; ) {
    for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0; ) {
      if (node = group[i]) {
        if (next && node.compareDocumentPosition(next) ^ 4)
          next.parentNode.insertBefore(node, next);
        next = node;
      }
    }
  }
  return this;
}

// node_modules/d3-selection/src/selection/sort.js
function sort_default(compare) {
  if (!compare)
    compare = ascending2;
  function compareNode(a2, b) {
    return a2 && b ? compare(a2.__data__, b.__data__) : !a2 - !b;
  }
  for (var groups = this._groups, m2 = groups.length, sortgroups = new Array(m2), j = 0; j < m2; ++j) {
    for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        sortgroup[i] = node;
      }
    }
    sortgroup.sort(compareNode);
  }
  return new Selection(sortgroups, this._parents).order();
}
function ascending2(a2, b) {
  return a2 < b ? -1 : a2 > b ? 1 : a2 >= b ? 0 : NaN;
}

// node_modules/d3-selection/src/selection/call.js
function call_default() {
  var callback = arguments[0];
  arguments[0] = this;
  callback.apply(null, arguments);
  return this;
}

// node_modules/d3-selection/src/selection/nodes.js
function nodes_default() {
  return Array.from(this);
}

// node_modules/d3-selection/src/selection/node.js
function node_default() {
  for (var groups = this._groups, j = 0, m2 = groups.length; j < m2; ++j) {
    for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {
      var node = group[i];
      if (node)
        return node;
    }
  }
  return null;
}

// node_modules/d3-selection/src/selection/size.js
function size_default() {
  let size = 0;
  for (const node of this)
    ++size;
  return size;
}

// node_modules/d3-selection/src/selection/empty.js
function empty_default() {
  return !this.node();
}

// node_modules/d3-selection/src/selection/each.js
function each_default(callback) {
  for (var groups = this._groups, j = 0, m2 = groups.length; j < m2; ++j) {
    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
      if (node = group[i])
        callback.call(node, node.__data__, i, group);
    }
  }
  return this;
}

// node_modules/d3-selection/src/selection/attr.js
function attrRemove(name) {
  return function() {
    this.removeAttribute(name);
  };
}
function attrRemoveNS(fullname) {
  return function() {
    this.removeAttributeNS(fullname.space, fullname.local);
  };
}
function attrConstant(name, value) {
  return function() {
    this.setAttribute(name, value);
  };
}
function attrConstantNS(fullname, value) {
  return function() {
    this.setAttributeNS(fullname.space, fullname.local, value);
  };
}
function attrFunction(name, value) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null)
      this.removeAttribute(name);
    else
      this.setAttribute(name, v);
  };
}
function attrFunctionNS(fullname, value) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null)
      this.removeAttributeNS(fullname.space, fullname.local);
    else
      this.setAttributeNS(fullname.space, fullname.local, v);
  };
}
function attr_default(name, value) {
  var fullname = namespace_default(name);
  if (arguments.length < 2) {
    var node = this.node();
    return fullname.local ? node.getAttributeNS(fullname.space, fullname.local) : node.getAttribute(fullname);
  }
  return this.each((value == null ? fullname.local ? attrRemoveNS : attrRemove : typeof value === "function" ? fullname.local ? attrFunctionNS : attrFunction : fullname.local ? attrConstantNS : attrConstant)(fullname, value));
}

// node_modules/d3-selection/src/window.js
function window_default(node) {
  return node.ownerDocument && node.ownerDocument.defaultView || node.document && node || node.defaultView;
}

// node_modules/d3-selection/src/selection/style.js
function styleRemove(name) {
  return function() {
    this.style.removeProperty(name);
  };
}
function styleConstant(name, value, priority) {
  return function() {
    this.style.setProperty(name, value, priority);
  };
}
function styleFunction(name, value, priority) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null)
      this.style.removeProperty(name);
    else
      this.style.setProperty(name, v, priority);
  };
}
function style_default(name, value, priority) {
  return arguments.length > 1 ? this.each((value == null ? styleRemove : typeof value === "function" ? styleFunction : styleConstant)(name, value, priority == null ? "" : priority)) : styleValue(this.node(), name);
}
function styleValue(node, name) {
  return node.style.getPropertyValue(name) || window_default(node).getComputedStyle(node, null).getPropertyValue(name);
}

// node_modules/d3-selection/src/selection/property.js
function propertyRemove(name) {
  return function() {
    delete this[name];
  };
}
function propertyConstant(name, value) {
  return function() {
    this[name] = value;
  };
}
function propertyFunction(name, value) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null)
      delete this[name];
    else
      this[name] = v;
  };
}
function property_default(name, value) {
  return arguments.length > 1 ? this.each((value == null ? propertyRemove : typeof value === "function" ? propertyFunction : propertyConstant)(name, value)) : this.node()[name];
}

// node_modules/d3-selection/src/selection/classed.js
function classArray(string) {
  return string.trim().split(/^|\s+/);
}
function classList(node) {
  return node.classList || new ClassList(node);
}
function ClassList(node) {
  this._node = node;
  this._names = classArray(node.getAttribute("class") || "");
}
ClassList.prototype = {
  add: function(name) {
    var i = this._names.indexOf(name);
    if (i < 0) {
      this._names.push(name);
      this._node.setAttribute("class", this._names.join(" "));
    }
  },
  remove: function(name) {
    var i = this._names.indexOf(name);
    if (i >= 0) {
      this._names.splice(i, 1);
      this._node.setAttribute("class", this._names.join(" "));
    }
  },
  contains: function(name) {
    return this._names.indexOf(name) >= 0;
  }
};
function classedAdd(node, names) {
  var list = classList(node), i = -1, n = names.length;
  while (++i < n)
    list.add(names[i]);
}
function classedRemove(node, names) {
  var list = classList(node), i = -1, n = names.length;
  while (++i < n)
    list.remove(names[i]);
}
function classedTrue(names) {
  return function() {
    classedAdd(this, names);
  };
}
function classedFalse(names) {
  return function() {
    classedRemove(this, names);
  };
}
function classedFunction(names, value) {
  return function() {
    (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);
  };
}
function classed_default(name, value) {
  var names = classArray(name + "");
  if (arguments.length < 2) {
    var list = classList(this.node()), i = -1, n = names.length;
    while (++i < n)
      if (!list.contains(names[i]))
        return false;
    return true;
  }
  return this.each((typeof value === "function" ? classedFunction : value ? classedTrue : classedFalse)(names, value));
}

// node_modules/d3-selection/src/selection/text.js
function textRemove() {
  this.textContent = "";
}
function textConstant(value) {
  return function() {
    this.textContent = value;
  };
}
function textFunction(value) {
  return function() {
    var v = value.apply(this, arguments);
    this.textContent = v == null ? "" : v;
  };
}
function text_default(value) {
  return arguments.length ? this.each(value == null ? textRemove : (typeof value === "function" ? textFunction : textConstant)(value)) : this.node().textContent;
}

// node_modules/d3-selection/src/selection/html.js
function htmlRemove() {
  this.innerHTML = "";
}
function htmlConstant(value) {
  return function() {
    this.innerHTML = value;
  };
}
function htmlFunction(value) {
  return function() {
    var v = value.apply(this, arguments);
    this.innerHTML = v == null ? "" : v;
  };
}
function html_default(value) {
  return arguments.length ? this.each(value == null ? htmlRemove : (typeof value === "function" ? htmlFunction : htmlConstant)(value)) : this.node().innerHTML;
}

// node_modules/d3-selection/src/selection/raise.js
function raise() {
  if (this.nextSibling)
    this.parentNode.appendChild(this);
}
function raise_default() {
  return this.each(raise);
}

// node_modules/d3-selection/src/selection/lower.js
function lower() {
  if (this.previousSibling)
    this.parentNode.insertBefore(this, this.parentNode.firstChild);
}
function lower_default() {
  return this.each(lower);
}

// node_modules/d3-selection/src/selection/append.js
function append_default(name) {
  var create2 = typeof name === "function" ? name : creator_default(name);
  return this.select(function() {
    return this.appendChild(create2.apply(this, arguments));
  });
}

// node_modules/d3-selection/src/selection/insert.js
function constantNull() {
  return null;
}
function insert_default(name, before) {
  var create2 = typeof name === "function" ? name : creator_default(name), select = before == null ? constantNull : typeof before === "function" ? before : selector_default(before);
  return this.select(function() {
    return this.insertBefore(create2.apply(this, arguments), select.apply(this, arguments) || null);
  });
}

// node_modules/d3-selection/src/selection/remove.js
function remove() {
  var parent = this.parentNode;
  if (parent)
    parent.removeChild(this);
}
function remove_default() {
  return this.each(remove);
}

// node_modules/d3-selection/src/selection/clone.js
function selection_cloneShallow() {
  var clone = this.cloneNode(false), parent = this.parentNode;
  return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
}
function selection_cloneDeep() {
  var clone = this.cloneNode(true), parent = this.parentNode;
  return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
}
function clone_default(deep) {
  return this.select(deep ? selection_cloneDeep : selection_cloneShallow);
}

// node_modules/d3-selection/src/selection/datum.js
function datum_default(value) {
  return arguments.length ? this.property("__data__", value) : this.node().__data__;
}

// node_modules/d3-selection/src/selection/on.js
function contextListener(listener) {
  return function(event) {
    listener.call(this, event, this.__data__);
  };
}
function parseTypenames2(typenames) {
  return typenames.trim().split(/^|\s+/).map(function(t) {
    var name = "", i = t.indexOf(".");
    if (i >= 0)
      name = t.slice(i + 1), t = t.slice(0, i);
    return { type: t, name };
  });
}
function onRemove(typename) {
  return function() {
    var on = this.__on;
    if (!on)
      return;
    for (var j = 0, i = -1, m2 = on.length, o; j < m2; ++j) {
      if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {
        this.removeEventListener(o.type, o.listener, o.options);
      } else {
        on[++i] = o;
      }
    }
    if (++i)
      on.length = i;
    else
      delete this.__on;
  };
}
function onAdd(typename, value, options) {
  return function() {
    var on = this.__on, o, listener = contextListener(value);
    if (on)
      for (var j = 0, m2 = on.length; j < m2; ++j) {
        if ((o = on[j]).type === typename.type && o.name === typename.name) {
          this.removeEventListener(o.type, o.listener, o.options);
          this.addEventListener(o.type, o.listener = listener, o.options = options);
          o.value = value;
          return;
        }
      }
    this.addEventListener(typename.type, listener, options);
    o = { type: typename.type, name: typename.name, value, listener, options };
    if (!on)
      this.__on = [o];
    else
      on.push(o);
  };
}
function on_default(typename, value, options) {
  var typenames = parseTypenames2(typename + ""), i, n = typenames.length, t;
  if (arguments.length < 2) {
    var on = this.node().__on;
    if (on)
      for (var j = 0, m2 = on.length, o; j < m2; ++j) {
        for (i = 0, o = on[j]; i < n; ++i) {
          if ((t = typenames[i]).type === o.type && t.name === o.name) {
            return o.value;
          }
        }
      }
    return;
  }
  on = value ? onAdd : onRemove;
  for (i = 0; i < n; ++i)
    this.each(on(typenames[i], value, options));
  return this;
}

// node_modules/d3-selection/src/selection/dispatch.js
function dispatchEvent(node, type2, params) {
  var window2 = window_default(node), event = window2.CustomEvent;
  if (typeof event === "function") {
    event = new event(type2, params);
  } else {
    event = window2.document.createEvent("Event");
    if (params)
      event.initEvent(type2, params.bubbles, params.cancelable), event.detail = params.detail;
    else
      event.initEvent(type2, false, false);
  }
  node.dispatchEvent(event);
}
function dispatchConstant(type2, params) {
  return function() {
    return dispatchEvent(this, type2, params);
  };
}
function dispatchFunction(type2, params) {
  return function() {
    return dispatchEvent(this, type2, params.apply(this, arguments));
  };
}
function dispatch_default2(type2, params) {
  return this.each((typeof params === "function" ? dispatchFunction : dispatchConstant)(type2, params));
}

// node_modules/d3-selection/src/selection/iterator.js
function* iterator_default() {
  for (var groups = this._groups, j = 0, m2 = groups.length; j < m2; ++j) {
    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
      if (node = group[i])
        yield node;
    }
  }
}

// node_modules/d3-selection/src/selection/index.js
var root = [null];
function Selection(groups, parents) {
  this._groups = groups;
  this._parents = parents;
}
function selection() {
  return new Selection([[document.documentElement]], root);
}
function selection_selection() {
  return this;
}
Selection.prototype = selection.prototype = {
  constructor: Selection,
  select: select_default,
  selectAll: selectAll_default,
  selectChild: selectChild_default,
  selectChildren: selectChildren_default,
  filter: filter_default,
  data: data_default,
  enter: enter_default,
  exit: exit_default,
  join: join_default,
  merge: merge_default,
  selection: selection_selection,
  order: order_default,
  sort: sort_default,
  call: call_default,
  nodes: nodes_default,
  node: node_default,
  size: size_default,
  empty: empty_default,
  each: each_default,
  attr: attr_default,
  style: style_default,
  property: property_default,
  classed: classed_default,
  text: text_default,
  html: html_default,
  raise: raise_default,
  lower: lower_default,
  append: append_default,
  insert: insert_default,
  remove: remove_default,
  clone: clone_default,
  datum: datum_default,
  on: on_default,
  dispatch: dispatch_default2,
  [Symbol.iterator]: iterator_default
};
var selection_default = selection;

// node_modules/d3-selection/src/select.js
function select_default2(selector) {
  return typeof selector === "string" ? new Selection([[document.querySelector(selector)]], [document.documentElement]) : new Selection([[selector]], root);
}

// node_modules/d3-selection/src/sourceEvent.js
function sourceEvent_default(event) {
  let sourceEvent;
  while (sourceEvent = event.sourceEvent)
    event = sourceEvent;
  return event;
}

// node_modules/d3-selection/src/pointer.js
function pointer_default(event, node) {
  event = sourceEvent_default(event);
  if (node === void 0)
    node = event.currentTarget;
  if (node) {
    var svg = node.ownerSVGElement || node;
    if (svg.createSVGPoint) {
      var point = svg.createSVGPoint();
      point.x = event.clientX, point.y = event.clientY;
      point = point.matrixTransform(node.getScreenCTM().inverse());
      return [point.x, point.y];
    }
    if (node.getBoundingClientRect) {
      var rect = node.getBoundingClientRect();
      return [event.clientX - rect.left - node.clientLeft, event.clientY - rect.top - node.clientTop];
    }
  }
  return [event.pageX, event.pageY];
}

// node_modules/d3-drag/src/noevent.js
var nonpassive = { passive: false };
var nonpassivecapture = { capture: true, passive: false };
function nopropagation(event) {
  event.stopImmediatePropagation();
}
function noevent_default(event) {
  event.preventDefault();
  event.stopImmediatePropagation();
}

// node_modules/d3-drag/src/nodrag.js
function nodrag_default(view) {
  var root2 = view.document.documentElement, selection2 = select_default2(view).on("dragstart.drag", noevent_default, nonpassivecapture);
  if ("onselectstart" in root2) {
    selection2.on("selectstart.drag", noevent_default, nonpassivecapture);
  } else {
    root2.__noselect = root2.style.MozUserSelect;
    root2.style.MozUserSelect = "none";
  }
}
function yesdrag(view, noclick) {
  var root2 = view.document.documentElement, selection2 = select_default2(view).on("dragstart.drag", null);
  if (noclick) {
    selection2.on("click.drag", noevent_default, nonpassivecapture);
    setTimeout(function() {
      selection2.on("click.drag", null);
    }, 0);
  }
  if ("onselectstart" in root2) {
    selection2.on("selectstart.drag", null);
  } else {
    root2.style.MozUserSelect = root2.__noselect;
    delete root2.__noselect;
  }
}

// node_modules/d3-drag/src/constant.js
var constant_default2 = (x3) => () => x3;

// node_modules/d3-drag/src/event.js
function DragEvent(type2, {
  sourceEvent,
  subject,
  target,
  identifier,
  active,
  x: x3,
  y: y3,
  dx,
  dy,
  dispatch: dispatch2
}) {
  Object.defineProperties(this, {
    type: { value: type2, enumerable: true, configurable: true },
    sourceEvent: { value: sourceEvent, enumerable: true, configurable: true },
    subject: { value: subject, enumerable: true, configurable: true },
    target: { value: target, enumerable: true, configurable: true },
    identifier: { value: identifier, enumerable: true, configurable: true },
    active: { value: active, enumerable: true, configurable: true },
    x: { value: x3, enumerable: true, configurable: true },
    y: { value: y3, enumerable: true, configurable: true },
    dx: { value: dx, enumerable: true, configurable: true },
    dy: { value: dy, enumerable: true, configurable: true },
    _: { value: dispatch2 }
  });
}
DragEvent.prototype.on = function() {
  var value = this._.on.apply(this._, arguments);
  return value === this._ ? this : value;
};

// node_modules/d3-drag/src/drag.js
function defaultFilter(event) {
  return !event.ctrlKey && !event.button;
}
function defaultContainer() {
  return this.parentNode;
}
function defaultSubject(event, d) {
  return d == null ? { x: event.x, y: event.y } : d;
}
function defaultTouchable() {
  return navigator.maxTouchPoints || "ontouchstart" in this;
}
function drag_default() {
  var filter2 = defaultFilter, container = defaultContainer, subject = defaultSubject, touchable = defaultTouchable, gestures = {}, listeners = dispatch_default("start", "drag", "end"), active = 0, mousedownx, mousedowny, mousemoving, touchending, clickDistance2 = 0;
  function drag(selection2) {
    selection2.on("mousedown.drag", mousedowned).filter(touchable).on("touchstart.drag", touchstarted).on("touchmove.drag", touchmoved, nonpassive).on("touchend.drag touchcancel.drag", touchended).style("touch-action", "none").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
  }
  function mousedowned(event, d) {
    if (touchending || !filter2.call(this, event, d))
      return;
    var gesture = beforestart(this, container.call(this, event, d), event, d, "mouse");
    if (!gesture)
      return;
    select_default2(event.view).on("mousemove.drag", mousemoved, nonpassivecapture).on("mouseup.drag", mouseupped, nonpassivecapture);
    nodrag_default(event.view);
    nopropagation(event);
    mousemoving = false;
    mousedownx = event.clientX;
    mousedowny = event.clientY;
    gesture("start", event);
  }
  function mousemoved(event) {
    noevent_default(event);
    if (!mousemoving) {
      var dx = event.clientX - mousedownx, dy = event.clientY - mousedowny;
      mousemoving = dx * dx + dy * dy > clickDistance2;
    }
    gestures.mouse("drag", event);
  }
  function mouseupped(event) {
    select_default2(event.view).on("mousemove.drag mouseup.drag", null);
    yesdrag(event.view, mousemoving);
    noevent_default(event);
    gestures.mouse("end", event);
  }
  function touchstarted(event, d) {
    if (!filter2.call(this, event, d))
      return;
    var touches = event.changedTouches, c2 = container.call(this, event, d), n = touches.length, i, gesture;
    for (i = 0; i < n; ++i) {
      if (gesture = beforestart(this, c2, event, d, touches[i].identifier, touches[i])) {
        nopropagation(event);
        gesture("start", event, touches[i]);
      }
    }
  }
  function touchmoved(event) {
    var touches = event.changedTouches, n = touches.length, i, gesture;
    for (i = 0; i < n; ++i) {
      if (gesture = gestures[touches[i].identifier]) {
        noevent_default(event);
        gesture("drag", event, touches[i]);
      }
    }
  }
  function touchended(event) {
    var touches = event.changedTouches, n = touches.length, i, gesture;
    if (touchending)
      clearTimeout(touchending);
    touchending = setTimeout(function() {
      touchending = null;
    }, 500);
    for (i = 0; i < n; ++i) {
      if (gesture = gestures[touches[i].identifier]) {
        nopropagation(event);
        gesture("end", event, touches[i]);
      }
    }
  }
  function beforestart(that, container2, event, d, identifier, touch) {
    var dispatch2 = listeners.copy(), p = pointer_default(touch || event, container2), dx, dy, s;
    if ((s = subject.call(that, new DragEvent("beforestart", {
      sourceEvent: event,
      target: drag,
      identifier,
      active,
      x: p[0],
      y: p[1],
      dx: 0,
      dy: 0,
      dispatch: dispatch2
    }), d)) == null)
      return;
    dx = s.x - p[0] || 0;
    dy = s.y - p[1] || 0;
    return function gesture(type2, event2, touch2) {
      var p0 = p, n;
      switch (type2) {
        case "start":
          gestures[identifier] = gesture, n = active++;
          break;
        case "end":
          delete gestures[identifier], --active;
        case "drag":
          p = pointer_default(touch2 || event2, container2), n = active;
          break;
      }
      dispatch2.call(
        type2,
        that,
        new DragEvent(type2, {
          sourceEvent: event2,
          subject: s,
          target: drag,
          identifier,
          active: n,
          x: p[0] + dx,
          y: p[1] + dy,
          dx: p[0] - p0[0],
          dy: p[1] - p0[1],
          dispatch: dispatch2
        }),
        d
      );
    };
  }
  drag.filter = function(_) {
    return arguments.length ? (filter2 = typeof _ === "function" ? _ : constant_default2(!!_), drag) : filter2;
  };
  drag.container = function(_) {
    return arguments.length ? (container = typeof _ === "function" ? _ : constant_default2(_), drag) : container;
  };
  drag.subject = function(_) {
    return arguments.length ? (subject = typeof _ === "function" ? _ : constant_default2(_), drag) : subject;
  };
  drag.touchable = function(_) {
    return arguments.length ? (touchable = typeof _ === "function" ? _ : constant_default2(!!_), drag) : touchable;
  };
  drag.on = function() {
    var value = listeners.on.apply(listeners, arguments);
    return value === listeners ? drag : value;
  };
  drag.clickDistance = function(_) {
    return arguments.length ? (clickDistance2 = (_ = +_) * _, drag) : Math.sqrt(clickDistance2);
  };
  return drag;
}

// node_modules/d3-color/src/define.js
function define_default(constructor, factory, prototype) {
  constructor.prototype = factory.prototype = prototype;
  prototype.constructor = constructor;
}
function extend(parent, definition) {
  var prototype = Object.create(parent.prototype);
  for (var key in definition)
    prototype[key] = definition[key];
  return prototype;
}

// node_modules/d3-color/src/color.js
function Color() {
}
var darker = 0.7;
var brighter = 1 / darker;
var reI = "\\s*([+-]?\\d+)\\s*";
var reN = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*";
var reP = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*";
var reHex = /^#([0-9a-f]{3,8})$/;
var reRgbInteger = new RegExp(`^rgb\\(${reI},${reI},${reI}\\)$`);
var reRgbPercent = new RegExp(`^rgb\\(${reP},${reP},${reP}\\)$`);
var reRgbaInteger = new RegExp(`^rgba\\(${reI},${reI},${reI},${reN}\\)$`);
var reRgbaPercent = new RegExp(`^rgba\\(${reP},${reP},${reP},${reN}\\)$`);
var reHslPercent = new RegExp(`^hsl\\(${reN},${reP},${reP}\\)$`);
var reHslaPercent = new RegExp(`^hsla\\(${reN},${reP},${reP},${reN}\\)$`);
var named = {
  aliceblue: 15792383,
  antiquewhite: 16444375,
  aqua: 65535,
  aquamarine: 8388564,
  azure: 15794175,
  beige: 16119260,
  bisque: 16770244,
  black: 0,
  blanchedalmond: 16772045,
  blue: 255,
  blueviolet: 9055202,
  brown: 10824234,
  burlywood: 14596231,
  cadetblue: 6266528,
  chartreuse: 8388352,
  chocolate: 13789470,
  coral: 16744272,
  cornflowerblue: 6591981,
  cornsilk: 16775388,
  crimson: 14423100,
  cyan: 65535,
  darkblue: 139,
  darkcyan: 35723,
  darkgoldenrod: 12092939,
  darkgray: 11119017,
  darkgreen: 25600,
  darkgrey: 11119017,
  darkkhaki: 12433259,
  darkmagenta: 9109643,
  darkolivegreen: 5597999,
  darkorange: 16747520,
  darkorchid: 10040012,
  darkred: 9109504,
  darksalmon: 15308410,
  darkseagreen: 9419919,
  darkslateblue: 4734347,
  darkslategray: 3100495,
  darkslategrey: 3100495,
  darkturquoise: 52945,
  darkviolet: 9699539,
  deeppink: 16716947,
  deepskyblue: 49151,
  dimgray: 6908265,
  dimgrey: 6908265,
  dodgerblue: 2003199,
  firebrick: 11674146,
  floralwhite: 16775920,
  forestgreen: 2263842,
  fuchsia: 16711935,
  gainsboro: 14474460,
  ghostwhite: 16316671,
  gold: 16766720,
  goldenrod: 14329120,
  gray: 8421504,
  green: 32768,
  greenyellow: 11403055,
  grey: 8421504,
  honeydew: 15794160,
  hotpink: 16738740,
  indianred: 13458524,
  indigo: 4915330,
  ivory: 16777200,
  khaki: 15787660,
  lavender: 15132410,
  lavenderblush: 16773365,
  lawngreen: 8190976,
  lemonchiffon: 16775885,
  lightblue: 11393254,
  lightcoral: 15761536,
  lightcyan: 14745599,
  lightgoldenrodyellow: 16448210,
  lightgray: 13882323,
  lightgreen: 9498256,
  lightgrey: 13882323,
  lightpink: 16758465,
  lightsalmon: 16752762,
  lightseagreen: 2142890,
  lightskyblue: 8900346,
  lightslategray: 7833753,
  lightslategrey: 7833753,
  lightsteelblue: 11584734,
  lightyellow: 16777184,
  lime: 65280,
  limegreen: 3329330,
  linen: 16445670,
  magenta: 16711935,
  maroon: 8388608,
  mediumaquamarine: 6737322,
  mediumblue: 205,
  mediumorchid: 12211667,
  mediumpurple: 9662683,
  mediumseagreen: 3978097,
  mediumslateblue: 8087790,
  mediumspringgreen: 64154,
  mediumturquoise: 4772300,
  mediumvioletred: 13047173,
  midnightblue: 1644912,
  mintcream: 16121850,
  mistyrose: 16770273,
  moccasin: 16770229,
  navajowhite: 16768685,
  navy: 128,
  oldlace: 16643558,
  olive: 8421376,
  olivedrab: 7048739,
  orange: 16753920,
  orangered: 16729344,
  orchid: 14315734,
  palegoldenrod: 15657130,
  palegreen: 10025880,
  paleturquoise: 11529966,
  palevioletred: 14381203,
  papayawhip: 16773077,
  peachpuff: 16767673,
  peru: 13468991,
  pink: 16761035,
  plum: 14524637,
  powderblue: 11591910,
  purple: 8388736,
  rebeccapurple: 6697881,
  red: 16711680,
  rosybrown: 12357519,
  royalblue: 4286945,
  saddlebrown: 9127187,
  salmon: 16416882,
  sandybrown: 16032864,
  seagreen: 3050327,
  seashell: 16774638,
  sienna: 10506797,
  silver: 12632256,
  skyblue: 8900331,
  slateblue: 6970061,
  slategray: 7372944,
  slategrey: 7372944,
  snow: 16775930,
  springgreen: 65407,
  steelblue: 4620980,
  tan: 13808780,
  teal: 32896,
  thistle: 14204888,
  tomato: 16737095,
  turquoise: 4251856,
  violet: 15631086,
  wheat: 16113331,
  white: 16777215,
  whitesmoke: 16119285,
  yellow: 16776960,
  yellowgreen: 10145074
};
define_default(Color, color, {
  copy(channels) {
    return Object.assign(new this.constructor(), this, channels);
  },
  displayable() {
    return this.rgb().displayable();
  },
  hex: color_formatHex,
  // Deprecated! Use color.formatHex.
  formatHex: color_formatHex,
  formatHex8: color_formatHex8,
  formatHsl: color_formatHsl,
  formatRgb: color_formatRgb,
  toString: color_formatRgb
});
function color_formatHex() {
  return this.rgb().formatHex();
}
function color_formatHex8() {
  return this.rgb().formatHex8();
}
function color_formatHsl() {
  return hslConvert(this).formatHsl();
}
function color_formatRgb() {
  return this.rgb().formatRgb();
}
function color(format2) {
  var m2, l;
  format2 = (format2 + "").trim().toLowerCase();
  return (m2 = reHex.exec(format2)) ? (l = m2[1].length, m2 = parseInt(m2[1], 16), l === 6 ? rgbn(m2) : l === 3 ? new Rgb(m2 >> 8 & 15 | m2 >> 4 & 240, m2 >> 4 & 15 | m2 & 240, (m2 & 15) << 4 | m2 & 15, 1) : l === 8 ? rgba(m2 >> 24 & 255, m2 >> 16 & 255, m2 >> 8 & 255, (m2 & 255) / 255) : l === 4 ? rgba(m2 >> 12 & 15 | m2 >> 8 & 240, m2 >> 8 & 15 | m2 >> 4 & 240, m2 >> 4 & 15 | m2 & 240, ((m2 & 15) << 4 | m2 & 15) / 255) : null) : (m2 = reRgbInteger.exec(format2)) ? new Rgb(m2[1], m2[2], m2[3], 1) : (m2 = reRgbPercent.exec(format2)) ? new Rgb(m2[1] * 255 / 100, m2[2] * 255 / 100, m2[3] * 255 / 100, 1) : (m2 = reRgbaInteger.exec(format2)) ? rgba(m2[1], m2[2], m2[3], m2[4]) : (m2 = reRgbaPercent.exec(format2)) ? rgba(m2[1] * 255 / 100, m2[2] * 255 / 100, m2[3] * 255 / 100, m2[4]) : (m2 = reHslPercent.exec(format2)) ? hsla(m2[1], m2[2] / 100, m2[3] / 100, 1) : (m2 = reHslaPercent.exec(format2)) ? hsla(m2[1], m2[2] / 100, m2[3] / 100, m2[4]) : named.hasOwnProperty(format2) ? rgbn(named[format2]) : format2 === "transparent" ? new Rgb(NaN, NaN, NaN, 0) : null;
}
function rgbn(n) {
  return new Rgb(n >> 16 & 255, n >> 8 & 255, n & 255, 1);
}
function rgba(r, g, b, a2) {
  if (a2 <= 0)
    r = g = b = NaN;
  return new Rgb(r, g, b, a2);
}
function rgbConvert(o) {
  if (!(o instanceof Color))
    o = color(o);
  if (!o)
    return new Rgb();
  o = o.rgb();
  return new Rgb(o.r, o.g, o.b, o.opacity);
}
function rgb(r, g, b, opacity) {
  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
}
function Rgb(r, g, b, opacity) {
  this.r = +r;
  this.g = +g;
  this.b = +b;
  this.opacity = +opacity;
}
define_default(Rgb, rgb, extend(Color, {
  brighter(k) {
    k = k == null ? brighter : Math.pow(brighter, k);
    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
  },
  darker(k) {
    k = k == null ? darker : Math.pow(darker, k);
    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
  },
  rgb() {
    return this;
  },
  clamp() {
    return new Rgb(clampi(this.r), clampi(this.g), clampi(this.b), clampa(this.opacity));
  },
  displayable() {
    return -0.5 <= this.r && this.r < 255.5 && (-0.5 <= this.g && this.g < 255.5) && (-0.5 <= this.b && this.b < 255.5) && (0 <= this.opacity && this.opacity <= 1);
  },
  hex: rgb_formatHex,
  // Deprecated! Use color.formatHex.
  formatHex: rgb_formatHex,
  formatHex8: rgb_formatHex8,
  formatRgb: rgb_formatRgb,
  toString: rgb_formatRgb
}));
function rgb_formatHex() {
  return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}`;
}
function rgb_formatHex8() {
  return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}${hex((isNaN(this.opacity) ? 1 : this.opacity) * 255)}`;
}
function rgb_formatRgb() {
  const a2 = clampa(this.opacity);
  return `${a2 === 1 ? "rgb(" : "rgba("}${clampi(this.r)}, ${clampi(this.g)}, ${clampi(this.b)}${a2 === 1 ? ")" : `, ${a2})`}`;
}
function clampa(opacity) {
  return isNaN(opacity) ? 1 : Math.max(0, Math.min(1, opacity));
}
function clampi(value) {
  return Math.max(0, Math.min(255, Math.round(value) || 0));
}
function hex(value) {
  value = clampi(value);
  return (value < 16 ? "0" : "") + value.toString(16);
}
function hsla(h, s, l, a2) {
  if (a2 <= 0)
    h = s = l = NaN;
  else if (l <= 0 || l >= 1)
    h = s = NaN;
  else if (s <= 0)
    h = NaN;
  return new Hsl(h, s, l, a2);
}
function hslConvert(o) {
  if (o instanceof Hsl)
    return new Hsl(o.h, o.s, o.l, o.opacity);
  if (!(o instanceof Color))
    o = color(o);
  if (!o)
    return new Hsl();
  if (o instanceof Hsl)
    return o;
  o = o.rgb();
  var r = o.r / 255, g = o.g / 255, b = o.b / 255, min2 = Math.min(r, g, b), max2 = Math.max(r, g, b), h = NaN, s = max2 - min2, l = (max2 + min2) / 2;
  if (s) {
    if (r === max2)
      h = (g - b) / s + (g < b) * 6;
    else if (g === max2)
      h = (b - r) / s + 2;
    else
      h = (r - g) / s + 4;
    s /= l < 0.5 ? max2 + min2 : 2 - max2 - min2;
    h *= 60;
  } else {
    s = l > 0 && l < 1 ? 0 : h;
  }
  return new Hsl(h, s, l, o.opacity);
}
function hsl(h, s, l, opacity) {
  return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
}
function Hsl(h, s, l, opacity) {
  this.h = +h;
  this.s = +s;
  this.l = +l;
  this.opacity = +opacity;
}
define_default(Hsl, hsl, extend(Color, {
  brighter(k) {
    k = k == null ? brighter : Math.pow(brighter, k);
    return new Hsl(this.h, this.s, this.l * k, this.opacity);
  },
  darker(k) {
    k = k == null ? darker : Math.pow(darker, k);
    return new Hsl(this.h, this.s, this.l * k, this.opacity);
  },
  rgb() {
    var h = this.h % 360 + (this.h < 0) * 360, s = isNaN(h) || isNaN(this.s) ? 0 : this.s, l = this.l, m2 = l + (l < 0.5 ? l : 1 - l) * s, m1 = 2 * l - m2;
    return new Rgb(
      hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),
      hsl2rgb(h, m1, m2),
      hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),
      this.opacity
    );
  },
  clamp() {
    return new Hsl(clamph(this.h), clampt(this.s), clampt(this.l), clampa(this.opacity));
  },
  displayable() {
    return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && (0 <= this.l && this.l <= 1) && (0 <= this.opacity && this.opacity <= 1);
  },
  formatHsl() {
    const a2 = clampa(this.opacity);
    return `${a2 === 1 ? "hsl(" : "hsla("}${clamph(this.h)}, ${clampt(this.s) * 100}%, ${clampt(this.l) * 100}%${a2 === 1 ? ")" : `, ${a2})`}`;
  }
}));
function clamph(value) {
  value = (value || 0) % 360;
  return value < 0 ? value + 360 : value;
}
function clampt(value) {
  return Math.max(0, Math.min(1, value || 0));
}
function hsl2rgb(h, m1, m2) {
  return (h < 60 ? m1 + (m2 - m1) * h / 60 : h < 180 ? m2 : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60 : m1) * 255;
}

// node_modules/d3-interpolate/src/basis.js
function basis(t1, v0, v1, v2, v3) {
  var t2 = t1 * t1, t3 = t2 * t1;
  return ((1 - 3 * t1 + 3 * t2 - t3) * v0 + (4 - 6 * t2 + 3 * t3) * v1 + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2 + t3 * v3) / 6;
}
function basis_default(values) {
  var n = values.length - 1;
  return function(t) {
    var i = t <= 0 ? t = 0 : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n), v1 = values[i], v2 = values[i + 1], v0 = i > 0 ? values[i - 1] : 2 * v1 - v2, v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;
    return basis((t - i / n) * n, v0, v1, v2, v3);
  };
}

// node_modules/d3-interpolate/src/basisClosed.js
function basisClosed_default(values) {
  var n = values.length;
  return function(t) {
    var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n), v0 = values[(i + n - 1) % n], v1 = values[i % n], v2 = values[(i + 1) % n], v3 = values[(i + 2) % n];
    return basis((t - i / n) * n, v0, v1, v2, v3);
  };
}

// node_modules/d3-interpolate/src/constant.js
var constant_default3 = (x3) => () => x3;

// node_modules/d3-interpolate/src/color.js
function linear(a2, d) {
  return function(t) {
    return a2 + t * d;
  };
}
function exponential(a2, b, y3) {
  return a2 = Math.pow(a2, y3), b = Math.pow(b, y3) - a2, y3 = 1 / y3, function(t) {
    return Math.pow(a2 + t * b, y3);
  };
}
function gamma(y3) {
  return (y3 = +y3) === 1 ? nogamma : function(a2, b) {
    return b - a2 ? exponential(a2, b, y3) : constant_default3(isNaN(a2) ? b : a2);
  };
}
function nogamma(a2, b) {
  var d = b - a2;
  return d ? linear(a2, d) : constant_default3(isNaN(a2) ? b : a2);
}

// node_modules/d3-interpolate/src/rgb.js
var rgb_default = function rgbGamma(y3) {
  var color2 = gamma(y3);
  function rgb2(start2, end) {
    var r = color2((start2 = rgb(start2)).r, (end = rgb(end)).r), g = color2(start2.g, end.g), b = color2(start2.b, end.b), opacity = nogamma(start2.opacity, end.opacity);
    return function(t) {
      start2.r = r(t);
      start2.g = g(t);
      start2.b = b(t);
      start2.opacity = opacity(t);
      return start2 + "";
    };
  }
  rgb2.gamma = rgbGamma;
  return rgb2;
}(1);
function rgbSpline(spline) {
  return function(colors) {
    var n = colors.length, r = new Array(n), g = new Array(n), b = new Array(n), i, color2;
    for (i = 0; i < n; ++i) {
      color2 = rgb(colors[i]);
      r[i] = color2.r || 0;
      g[i] = color2.g || 0;
      b[i] = color2.b || 0;
    }
    r = spline(r);
    g = spline(g);
    b = spline(b);
    color2.opacity = 1;
    return function(t) {
      color2.r = r(t);
      color2.g = g(t);
      color2.b = b(t);
      return color2 + "";
    };
  };
}
var rgbBasis = rgbSpline(basis_default);
var rgbBasisClosed = rgbSpline(basisClosed_default);

// node_modules/d3-interpolate/src/numberArray.js
function numberArray_default(a2, b) {
  if (!b)
    b = [];
  var n = a2 ? Math.min(b.length, a2.length) : 0, c2 = b.slice(), i;
  return function(t) {
    for (i = 0; i < n; ++i)
      c2[i] = a2[i] * (1 - t) + b[i] * t;
    return c2;
  };
}
function isNumberArray(x3) {
  return ArrayBuffer.isView(x3) && !(x3 instanceof DataView);
}

// node_modules/d3-interpolate/src/array.js
function genericArray(a2, b) {
  var nb = b ? b.length : 0, na = a2 ? Math.min(nb, a2.length) : 0, x3 = new Array(na), c2 = new Array(nb), i;
  for (i = 0; i < na; ++i)
    x3[i] = value_default(a2[i], b[i]);
  for (; i < nb; ++i)
    c2[i] = b[i];
  return function(t) {
    for (i = 0; i < na; ++i)
      c2[i] = x3[i](t);
    return c2;
  };
}

// node_modules/d3-interpolate/src/date.js
function date_default(a2, b) {
  var d = new Date();
  return a2 = +a2, b = +b, function(t) {
    return d.setTime(a2 * (1 - t) + b * t), d;
  };
}

// node_modules/d3-interpolate/src/number.js
function number_default(a2, b) {
  return a2 = +a2, b = +b, function(t) {
    return a2 * (1 - t) + b * t;
  };
}

// node_modules/d3-interpolate/src/object.js
function object_default(a2, b) {
  var i = {}, c2 = {}, k;
  if (a2 === null || typeof a2 !== "object")
    a2 = {};
  if (b === null || typeof b !== "object")
    b = {};
  for (k in b) {
    if (k in a2) {
      i[k] = value_default(a2[k], b[k]);
    } else {
      c2[k] = b[k];
    }
  }
  return function(t) {
    for (k in i)
      c2[k] = i[k](t);
    return c2;
  };
}

// node_modules/d3-interpolate/src/string.js
var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g;
var reB = new RegExp(reA.source, "g");
function zero2(b) {
  return function() {
    return b;
  };
}
function one(b) {
  return function(t) {
    return b(t) + "";
  };
}
function string_default(a2, b) {
  var bi = reA.lastIndex = reB.lastIndex = 0, am, bm, bs, i = -1, s = [], q = [];
  a2 = a2 + "", b = b + "";
  while ((am = reA.exec(a2)) && (bm = reB.exec(b))) {
    if ((bs = bm.index) > bi) {
      bs = b.slice(bi, bs);
      if (s[i])
        s[i] += bs;
      else
        s[++i] = bs;
    }
    if ((am = am[0]) === (bm = bm[0])) {
      if (s[i])
        s[i] += bm;
      else
        s[++i] = bm;
    } else {
      s[++i] = null;
      q.push({ i, x: number_default(am, bm) });
    }
    bi = reB.lastIndex;
  }
  if (bi < b.length) {
    bs = b.slice(bi);
    if (s[i])
      s[i] += bs;
    else
      s[++i] = bs;
  }
  return s.length < 2 ? q[0] ? one(q[0].x) : zero2(b) : (b = q.length, function(t) {
    for (var i2 = 0, o; i2 < b; ++i2)
      s[(o = q[i2]).i] = o.x(t);
    return s.join("");
  });
}

// node_modules/d3-interpolate/src/value.js
function value_default(a2, b) {
  var t = typeof b, c2;
  return b == null || t === "boolean" ? constant_default3(b) : (t === "number" ? number_default : t === "string" ? (c2 = color(b)) ? (b = c2, rgb_default) : string_default : b instanceof color ? rgb_default : b instanceof Date ? date_default : isNumberArray(b) ? numberArray_default : Array.isArray(b) ? genericArray : typeof b.valueOf !== "function" && typeof b.toString !== "function" || isNaN(b) ? object_default : number_default)(a2, b);
}

// node_modules/d3-interpolate/src/round.js
function round_default(a2, b) {
  return a2 = +a2, b = +b, function(t) {
    return Math.round(a2 * (1 - t) + b * t);
  };
}

// node_modules/d3-interpolate/src/transform/decompose.js
var degrees = 180 / Math.PI;
var identity = {
  translateX: 0,
  translateY: 0,
  rotate: 0,
  skewX: 0,
  scaleX: 1,
  scaleY: 1
};
function decompose_default(a2, b, c2, d, e, f) {
  var scaleX, scaleY, skewX;
  if (scaleX = Math.sqrt(a2 * a2 + b * b))
    a2 /= scaleX, b /= scaleX;
  if (skewX = a2 * c2 + b * d)
    c2 -= a2 * skewX, d -= b * skewX;
  if (scaleY = Math.sqrt(c2 * c2 + d * d))
    c2 /= scaleY, d /= scaleY, skewX /= scaleY;
  if (a2 * d < b * c2)
    a2 = -a2, b = -b, skewX = -skewX, scaleX = -scaleX;
  return {
    translateX: e,
    translateY: f,
    rotate: Math.atan2(b, a2) * degrees,
    skewX: Math.atan(skewX) * degrees,
    scaleX,
    scaleY
  };
}

// node_modules/d3-interpolate/src/transform/parse.js
var svgNode;
function parseCss(value) {
  const m2 = new (typeof DOMMatrix === "function" ? DOMMatrix : WebKitCSSMatrix)(value + "");
  return m2.isIdentity ? identity : decompose_default(m2.a, m2.b, m2.c, m2.d, m2.e, m2.f);
}
function parseSvg(value) {
  if (value == null)
    return identity;
  if (!svgNode)
    svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
  svgNode.setAttribute("transform", value);
  if (!(value = svgNode.transform.baseVal.consolidate()))
    return identity;
  value = value.matrix;
  return decompose_default(value.a, value.b, value.c, value.d, value.e, value.f);
}

// node_modules/d3-interpolate/src/transform/index.js
function interpolateTransform(parse, pxComma, pxParen, degParen) {
  function pop(s) {
    return s.length ? s.pop() + " " : "";
  }
  function translate(xa, ya, xb, yb, s, q) {
    if (xa !== xb || ya !== yb) {
      var i = s.push("translate(", null, pxComma, null, pxParen);
      q.push({ i: i - 4, x: number_default(xa, xb) }, { i: i - 2, x: number_default(ya, yb) });
    } else if (xb || yb) {
      s.push("translate(" + xb + pxComma + yb + pxParen);
    }
  }
  function rotate(a2, b, s, q) {
    if (a2 !== b) {
      if (a2 - b > 180)
        b += 360;
      else if (b - a2 > 180)
        a2 += 360;
      q.push({ i: s.push(pop(s) + "rotate(", null, degParen) - 2, x: number_default(a2, b) });
    } else if (b) {
      s.push(pop(s) + "rotate(" + b + degParen);
    }
  }
  function skewX(a2, b, s, q) {
    if (a2 !== b) {
      q.push({ i: s.push(pop(s) + "skewX(", null, degParen) - 2, x: number_default(a2, b) });
    } else if (b) {
      s.push(pop(s) + "skewX(" + b + degParen);
    }
  }
  function scale(xa, ya, xb, yb, s, q) {
    if (xa !== xb || ya !== yb) {
      var i = s.push(pop(s) + "scale(", null, ",", null, ")");
      q.push({ i: i - 4, x: number_default(xa, xb) }, { i: i - 2, x: number_default(ya, yb) });
    } else if (xb !== 1 || yb !== 1) {
      s.push(pop(s) + "scale(" + xb + "," + yb + ")");
    }
  }
  return function(a2, b) {
    var s = [], q = [];
    a2 = parse(a2), b = parse(b);
    translate(a2.translateX, a2.translateY, b.translateX, b.translateY, s, q);
    rotate(a2.rotate, b.rotate, s, q);
    skewX(a2.skewX, b.skewX, s, q);
    scale(a2.scaleX, a2.scaleY, b.scaleX, b.scaleY, s, q);
    a2 = b = null;
    return function(t) {
      var i = -1, n = q.length, o;
      while (++i < n)
        s[(o = q[i]).i] = o.x(t);
      return s.join("");
    };
  };
}
var interpolateTransformCss = interpolateTransform(parseCss, "px, ", "px)", "deg)");
var interpolateTransformSvg = interpolateTransform(parseSvg, ", ", ")", ")");

// node_modules/d3-interpolate/src/zoom.js
var epsilon2 = 1e-12;
function cosh(x3) {
  return ((x3 = Math.exp(x3)) + 1 / x3) / 2;
}
function sinh(x3) {
  return ((x3 = Math.exp(x3)) - 1 / x3) / 2;
}
function tanh(x3) {
  return ((x3 = Math.exp(2 * x3)) - 1) / (x3 + 1);
}
var zoom_default = function zoomRho(rho, rho2, rho4) {
  function zoom(p0, p1) {
    var ux0 = p0[0], uy0 = p0[1], w0 = p0[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2], dx = ux1 - ux0, dy = uy1 - uy0, d2 = dx * dx + dy * dy, i, S;
    if (d2 < epsilon2) {
      S = Math.log(w1 / w0) / rho;
      i = function(t) {
        return [
          ux0 + t * dx,
          uy0 + t * dy,
          w0 * Math.exp(rho * t * S)
        ];
      };
    } else {
      var d1 = Math.sqrt(d2), b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1), b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
      S = (r1 - r0) / rho;
      i = function(t) {
        var s = t * S, coshr0 = cosh(r0), u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s + r0) - sinh(r0));
        return [
          ux0 + u * dx,
          uy0 + u * dy,
          w0 * coshr0 / cosh(rho * s + r0)
        ];
      };
    }
    i.duration = S * 1e3 * rho / Math.SQRT2;
    return i;
  }
  zoom.rho = function(_) {
    var _1 = Math.max(1e-3, +_), _2 = _1 * _1, _4 = _2 * _2;
    return zoomRho(_1, _2, _4);
  };
  return zoom;
}(Math.SQRT2, 2, 4);

// node_modules/d3-timer/src/timer.js
var frame = 0;
var timeout = 0;
var interval = 0;
var pokeDelay = 1e3;
var taskHead;
var taskTail;
var clockLast = 0;
var clockNow = 0;
var clockSkew = 0;
var clock = typeof performance === "object" && performance.now ? performance : Date;
var setFrame = typeof window === "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function(f) {
  setTimeout(f, 17);
};
function now() {
  return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);
}
function clearNow() {
  clockNow = 0;
}
function Timer() {
  this._call = this._time = this._next = null;
}
Timer.prototype = timer.prototype = {
  constructor: Timer,
  restart: function(callback, delay, time) {
    if (typeof callback !== "function")
      throw new TypeError("callback is not a function");
    time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);
    if (!this._next && taskTail !== this) {
      if (taskTail)
        taskTail._next = this;
      else
        taskHead = this;
      taskTail = this;
    }
    this._call = callback;
    this._time = time;
    sleep();
  },
  stop: function() {
    if (this._call) {
      this._call = null;
      this._time = Infinity;
      sleep();
    }
  }
};
function timer(callback, delay, time) {
  var t = new Timer();
  t.restart(callback, delay, time);
  return t;
}
function timerFlush() {
  now();
  ++frame;
  var t = taskHead, e;
  while (t) {
    if ((e = clockNow - t._time) >= 0)
      t._call.call(void 0, e);
    t = t._next;
  }
  --frame;
}
function wake() {
  clockNow = (clockLast = clock.now()) + clockSkew;
  frame = timeout = 0;
  try {
    timerFlush();
  } finally {
    frame = 0;
    nap();
    clockNow = 0;
  }
}
function poke() {
  var now2 = clock.now(), delay = now2 - clockLast;
  if (delay > pokeDelay)
    clockSkew -= delay, clockLast = now2;
}
function nap() {
  var t0, t1 = taskHead, t2, time = Infinity;
  while (t1) {
    if (t1._call) {
      if (time > t1._time)
        time = t1._time;
      t0 = t1, t1 = t1._next;
    } else {
      t2 = t1._next, t1._next = null;
      t1 = t0 ? t0._next = t2 : taskHead = t2;
    }
  }
  taskTail = t0;
  sleep(time);
}
function sleep(time) {
  if (frame)
    return;
  if (timeout)
    timeout = clearTimeout(timeout);
  var delay = time - clockNow;
  if (delay > 24) {
    if (time < Infinity)
      timeout = setTimeout(wake, time - clock.now() - clockSkew);
    if (interval)
      interval = clearInterval(interval);
  } else {
    if (!interval)
      clockLast = clock.now(), interval = setInterval(poke, pokeDelay);
    frame = 1, setFrame(wake);
  }
}

// node_modules/d3-timer/src/timeout.js
function timeout_default(callback, delay, time) {
  var t = new Timer();
  delay = delay == null ? 0 : +delay;
  t.restart((elapsed) => {
    t.stop();
    callback(elapsed + delay);
  }, delay, time);
  return t;
}

// node_modules/d3-transition/src/transition/schedule.js
var emptyOn = dispatch_default("start", "end", "cancel", "interrupt");
var emptyTween = [];
var CREATED = 0;
var SCHEDULED = 1;
var STARTING = 2;
var STARTED = 3;
var RUNNING = 4;
var ENDING = 5;
var ENDED = 6;
function schedule_default(node, name, id2, index2, group, timing) {
  var schedules = node.__transition;
  if (!schedules)
    node.__transition = {};
  else if (id2 in schedules)
    return;
  create(node, id2, {
    name,
    index: index2,
    // For context during callback.
    group,
    // For context during callback.
    on: emptyOn,
    tween: emptyTween,
    time: timing.time,
    delay: timing.delay,
    duration: timing.duration,
    ease: timing.ease,
    timer: null,
    state: CREATED
  });
}
function init(node, id2) {
  var schedule = get2(node, id2);
  if (schedule.state > CREATED)
    throw new Error("too late; already scheduled");
  return schedule;
}
function set2(node, id2) {
  var schedule = get2(node, id2);
  if (schedule.state > STARTED)
    throw new Error("too late; already running");
  return schedule;
}
function get2(node, id2) {
  var schedule = node.__transition;
  if (!schedule || !(schedule = schedule[id2]))
    throw new Error("transition not found");
  return schedule;
}
function create(node, id2, self2) {
  var schedules = node.__transition, tween;
  schedules[id2] = self2;
  self2.timer = timer(schedule, 0, self2.time);
  function schedule(elapsed) {
    self2.state = SCHEDULED;
    self2.timer.restart(start2, self2.delay, self2.time);
    if (self2.delay <= elapsed)
      start2(elapsed - self2.delay);
  }
  function start2(elapsed) {
    var i, j, n, o;
    if (self2.state !== SCHEDULED)
      return stop();
    for (i in schedules) {
      o = schedules[i];
      if (o.name !== self2.name)
        continue;
      if (o.state === STARTED)
        return timeout_default(start2);
      if (o.state === RUNNING) {
        o.state = ENDED;
        o.timer.stop();
        o.on.call("interrupt", node, node.__data__, o.index, o.group);
        delete schedules[i];
      } else if (+i < id2) {
        o.state = ENDED;
        o.timer.stop();
        o.on.call("cancel", node, node.__data__, o.index, o.group);
        delete schedules[i];
      }
    }
    timeout_default(function() {
      if (self2.state === STARTED) {
        self2.state = RUNNING;
        self2.timer.restart(tick, self2.delay, self2.time);
        tick(elapsed);
      }
    });
    self2.state = STARTING;
    self2.on.call("start", node, node.__data__, self2.index, self2.group);
    if (self2.state !== STARTING)
      return;
    self2.state = STARTED;
    tween = new Array(n = self2.tween.length);
    for (i = 0, j = -1; i < n; ++i) {
      if (o = self2.tween[i].value.call(node, node.__data__, self2.index, self2.group)) {
        tween[++j] = o;
      }
    }
    tween.length = j + 1;
  }
  function tick(elapsed) {
    var t = elapsed < self2.duration ? self2.ease.call(null, elapsed / self2.duration) : (self2.timer.restart(stop), self2.state = ENDING, 1), i = -1, n = tween.length;
    while (++i < n) {
      tween[i].call(node, t);
    }
    if (self2.state === ENDING) {
      self2.on.call("end", node, node.__data__, self2.index, self2.group);
      stop();
    }
  }
  function stop() {
    self2.state = ENDED;
    self2.timer.stop();
    delete schedules[id2];
    for (var i in schedules)
      return;
    delete node.__transition;
  }
}

// node_modules/d3-transition/src/interrupt.js
function interrupt_default(node, name) {
  var schedules = node.__transition, schedule, active, empty2 = true, i;
  if (!schedules)
    return;
  name = name == null ? null : name + "";
  for (i in schedules) {
    if ((schedule = schedules[i]).name !== name) {
      empty2 = false;
      continue;
    }
    active = schedule.state > STARTING && schedule.state < ENDING;
    schedule.state = ENDED;
    schedule.timer.stop();
    schedule.on.call(active ? "interrupt" : "cancel", node, node.__data__, schedule.index, schedule.group);
    delete schedules[i];
  }
  if (empty2)
    delete node.__transition;
}

// node_modules/d3-transition/src/selection/interrupt.js
function interrupt_default2(name) {
  return this.each(function() {
    interrupt_default(this, name);
  });
}

// node_modules/d3-transition/src/transition/tween.js
function tweenRemove(id2, name) {
  var tween0, tween1;
  return function() {
    var schedule = set2(this, id2), tween = schedule.tween;
    if (tween !== tween0) {
      tween1 = tween0 = tween;
      for (var i = 0, n = tween1.length; i < n; ++i) {
        if (tween1[i].name === name) {
          tween1 = tween1.slice();
          tween1.splice(i, 1);
          break;
        }
      }
    }
    schedule.tween = tween1;
  };
}
function tweenFunction(id2, name, value) {
  var tween0, tween1;
  if (typeof value !== "function")
    throw new Error();
  return function() {
    var schedule = set2(this, id2), tween = schedule.tween;
    if (tween !== tween0) {
      tween1 = (tween0 = tween).slice();
      for (var t = { name, value }, i = 0, n = tween1.length; i < n; ++i) {
        if (tween1[i].name === name) {
          tween1[i] = t;
          break;
        }
      }
      if (i === n)
        tween1.push(t);
    }
    schedule.tween = tween1;
  };
}
function tween_default(name, value) {
  var id2 = this._id;
  name += "";
  if (arguments.length < 2) {
    var tween = get2(this.node(), id2).tween;
    for (var i = 0, n = tween.length, t; i < n; ++i) {
      if ((t = tween[i]).name === name) {
        return t.value;
      }
    }
    return null;
  }
  return this.each((value == null ? tweenRemove : tweenFunction)(id2, name, value));
}
function tweenValue(transition2, name, value) {
  var id2 = transition2._id;
  transition2.each(function() {
    var schedule = set2(this, id2);
    (schedule.value || (schedule.value = {}))[name] = value.apply(this, arguments);
  });
  return function(node) {
    return get2(node, id2).value[name];
  };
}

// node_modules/d3-transition/src/transition/interpolate.js
function interpolate_default(a2, b) {
  var c2;
  return (typeof b === "number" ? number_default : b instanceof color ? rgb_default : (c2 = color(b)) ? (b = c2, rgb_default) : string_default)(a2, b);
}

// node_modules/d3-transition/src/transition/attr.js
function attrRemove2(name) {
  return function() {
    this.removeAttribute(name);
  };
}
function attrRemoveNS2(fullname) {
  return function() {
    this.removeAttributeNS(fullname.space, fullname.local);
  };
}
function attrConstant2(name, interpolate, value1) {
  var string00, string1 = value1 + "", interpolate0;
  return function() {
    var string0 = this.getAttribute(name);
    return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
  };
}
function attrConstantNS2(fullname, interpolate, value1) {
  var string00, string1 = value1 + "", interpolate0;
  return function() {
    var string0 = this.getAttributeNS(fullname.space, fullname.local);
    return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
  };
}
function attrFunction2(name, interpolate, value) {
  var string00, string10, interpolate0;
  return function() {
    var string0, value1 = value(this), string1;
    if (value1 == null)
      return void this.removeAttribute(name);
    string0 = this.getAttribute(name);
    string1 = value1 + "";
    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
  };
}
function attrFunctionNS2(fullname, interpolate, value) {
  var string00, string10, interpolate0;
  return function() {
    var string0, value1 = value(this), string1;
    if (value1 == null)
      return void this.removeAttributeNS(fullname.space, fullname.local);
    string0 = this.getAttributeNS(fullname.space, fullname.local);
    string1 = value1 + "";
    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
  };
}
function attr_default2(name, value) {
  var fullname = namespace_default(name), i = fullname === "transform" ? interpolateTransformSvg : interpolate_default;
  return this.attrTween(name, typeof value === "function" ? (fullname.local ? attrFunctionNS2 : attrFunction2)(fullname, i, tweenValue(this, "attr." + name, value)) : value == null ? (fullname.local ? attrRemoveNS2 : attrRemove2)(fullname) : (fullname.local ? attrConstantNS2 : attrConstant2)(fullname, i, value));
}

// node_modules/d3-transition/src/transition/attrTween.js
function attrInterpolate(name, i) {
  return function(t) {
    this.setAttribute(name, i.call(this, t));
  };
}
function attrInterpolateNS(fullname, i) {
  return function(t) {
    this.setAttributeNS(fullname.space, fullname.local, i.call(this, t));
  };
}
function attrTweenNS(fullname, value) {
  var t0, i0;
  function tween() {
    var i = value.apply(this, arguments);
    if (i !== i0)
      t0 = (i0 = i) && attrInterpolateNS(fullname, i);
    return t0;
  }
  tween._value = value;
  return tween;
}
function attrTween(name, value) {
  var t0, i0;
  function tween() {
    var i = value.apply(this, arguments);
    if (i !== i0)
      t0 = (i0 = i) && attrInterpolate(name, i);
    return t0;
  }
  tween._value = value;
  return tween;
}
function attrTween_default(name, value) {
  var key = "attr." + name;
  if (arguments.length < 2)
    return (key = this.tween(key)) && key._value;
  if (value == null)
    return this.tween(key, null);
  if (typeof value !== "function")
    throw new Error();
  var fullname = namespace_default(name);
  return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value));
}

// node_modules/d3-transition/src/transition/delay.js
function delayFunction(id2, value) {
  return function() {
    init(this, id2).delay = +value.apply(this, arguments);
  };
}
function delayConstant(id2, value) {
  return value = +value, function() {
    init(this, id2).delay = value;
  };
}
function delay_default(value) {
  var id2 = this._id;
  return arguments.length ? this.each((typeof value === "function" ? delayFunction : delayConstant)(id2, value)) : get2(this.node(), id2).delay;
}

// node_modules/d3-transition/src/transition/duration.js
function durationFunction(id2, value) {
  return function() {
    set2(this, id2).duration = +value.apply(this, arguments);
  };
}
function durationConstant(id2, value) {
  return value = +value, function() {
    set2(this, id2).duration = value;
  };
}
function duration_default(value) {
  var id2 = this._id;
  return arguments.length ? this.each((typeof value === "function" ? durationFunction : durationConstant)(id2, value)) : get2(this.node(), id2).duration;
}

// node_modules/d3-transition/src/transition/ease.js
function easeConstant(id2, value) {
  if (typeof value !== "function")
    throw new Error();
  return function() {
    set2(this, id2).ease = value;
  };
}
function ease_default(value) {
  var id2 = this._id;
  return arguments.length ? this.each(easeConstant(id2, value)) : get2(this.node(), id2).ease;
}

// node_modules/d3-transition/src/transition/easeVarying.js
function easeVarying(id2, value) {
  return function() {
    var v = value.apply(this, arguments);
    if (typeof v !== "function")
      throw new Error();
    set2(this, id2).ease = v;
  };
}
function easeVarying_default(value) {
  if (typeof value !== "function")
    throw new Error();
  return this.each(easeVarying(this._id, value));
}

// node_modules/d3-transition/src/transition/filter.js
function filter_default2(match) {
  if (typeof match !== "function")
    match = matcher_default(match);
  for (var groups = this._groups, m2 = groups.length, subgroups = new Array(m2), j = 0; j < m2; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
        subgroup.push(node);
      }
    }
  }
  return new Transition(subgroups, this._parents, this._name, this._id);
}

// node_modules/d3-transition/src/transition/merge.js
function merge_default2(transition2) {
  if (transition2._id !== this._id)
    throw new Error();
  for (var groups0 = this._groups, groups1 = transition2._groups, m0 = groups0.length, m1 = groups1.length, m2 = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m2; ++j) {
    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group0[i] || group1[i]) {
        merge[i] = node;
      }
    }
  }
  for (; j < m0; ++j) {
    merges[j] = groups0[j];
  }
  return new Transition(merges, this._parents, this._name, this._id);
}

// node_modules/d3-transition/src/transition/on.js
function start(name) {
  return (name + "").trim().split(/^|\s+/).every(function(t) {
    var i = t.indexOf(".");
    if (i >= 0)
      t = t.slice(0, i);
    return !t || t === "start";
  });
}
function onFunction(id2, name, listener) {
  var on0, on1, sit = start(name) ? init : set2;
  return function() {
    var schedule = sit(this, id2), on = schedule.on;
    if (on !== on0)
      (on1 = (on0 = on).copy()).on(name, listener);
    schedule.on = on1;
  };
}
function on_default2(name, listener) {
  var id2 = this._id;
  return arguments.length < 2 ? get2(this.node(), id2).on.on(name) : this.each(onFunction(id2, name, listener));
}

// node_modules/d3-transition/src/transition/remove.js
function removeFunction(id2) {
  return function() {
    var parent = this.parentNode;
    for (var i in this.__transition)
      if (+i !== id2)
        return;
    if (parent)
      parent.removeChild(this);
  };
}
function remove_default2() {
  return this.on("end.remove", removeFunction(this._id));
}

// node_modules/d3-transition/src/transition/select.js
function select_default3(select) {
  var name = this._name, id2 = this._id;
  if (typeof select !== "function")
    select = selector_default(select);
  for (var groups = this._groups, m2 = groups.length, subgroups = new Array(m2), j = 0; j < m2; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
        if ("__data__" in node)
          subnode.__data__ = node.__data__;
        subgroup[i] = subnode;
        schedule_default(subgroup[i], name, id2, i, subgroup, get2(node, id2));
      }
    }
  }
  return new Transition(subgroups, this._parents, name, id2);
}

// node_modules/d3-transition/src/transition/selectAll.js
function selectAll_default2(select) {
  var name = this._name, id2 = this._id;
  if (typeof select !== "function")
    select = selectorAll_default(select);
  for (var groups = this._groups, m2 = groups.length, subgroups = [], parents = [], j = 0; j < m2; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        for (var children2 = select.call(node, node.__data__, i, group), child, inherit2 = get2(node, id2), k = 0, l = children2.length; k < l; ++k) {
          if (child = children2[k]) {
            schedule_default(child, name, id2, k, children2, inherit2);
          }
        }
        subgroups.push(children2);
        parents.push(node);
      }
    }
  }
  return new Transition(subgroups, parents, name, id2);
}

// node_modules/d3-transition/src/transition/selection.js
var Selection2 = selection_default.prototype.constructor;
function selection_default2() {
  return new Selection2(this._groups, this._parents);
}

// node_modules/d3-transition/src/transition/style.js
function styleNull(name, interpolate) {
  var string00, string10, interpolate0;
  return function() {
    var string0 = styleValue(this, name), string1 = (this.style.removeProperty(name), styleValue(this, name));
    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : interpolate0 = interpolate(string00 = string0, string10 = string1);
  };
}
function styleRemove2(name) {
  return function() {
    this.style.removeProperty(name);
  };
}
function styleConstant2(name, interpolate, value1) {
  var string00, string1 = value1 + "", interpolate0;
  return function() {
    var string0 = styleValue(this, name);
    return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
  };
}
function styleFunction2(name, interpolate, value) {
  var string00, string10, interpolate0;
  return function() {
    var string0 = styleValue(this, name), value1 = value(this), string1 = value1 + "";
    if (value1 == null)
      string1 = value1 = (this.style.removeProperty(name), styleValue(this, name));
    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
  };
}
function styleMaybeRemove(id2, name) {
  var on0, on1, listener0, key = "style." + name, event = "end." + key, remove2;
  return function() {
    var schedule = set2(this, id2), on = schedule.on, listener = schedule.value[key] == null ? remove2 || (remove2 = styleRemove2(name)) : void 0;
    if (on !== on0 || listener0 !== listener)
      (on1 = (on0 = on).copy()).on(event, listener0 = listener);
    schedule.on = on1;
  };
}
function style_default2(name, value, priority) {
  var i = (name += "") === "transform" ? interpolateTransformCss : interpolate_default;
  return value == null ? this.styleTween(name, styleNull(name, i)).on("end.style." + name, styleRemove2(name)) : typeof value === "function" ? this.styleTween(name, styleFunction2(name, i, tweenValue(this, "style." + name, value))).each(styleMaybeRemove(this._id, name)) : this.styleTween(name, styleConstant2(name, i, value), priority).on("end.style." + name, null);
}

// node_modules/d3-transition/src/transition/styleTween.js
function styleInterpolate(name, i, priority) {
  return function(t) {
    this.style.setProperty(name, i.call(this, t), priority);
  };
}
function styleTween(name, value, priority) {
  var t, i0;
  function tween() {
    var i = value.apply(this, arguments);
    if (i !== i0)
      t = (i0 = i) && styleInterpolate(name, i, priority);
    return t;
  }
  tween._value = value;
  return tween;
}
function styleTween_default(name, value, priority) {
  var key = "style." + (name += "");
  if (arguments.length < 2)
    return (key = this.tween(key)) && key._value;
  if (value == null)
    return this.tween(key, null);
  if (typeof value !== "function")
    throw new Error();
  return this.tween(key, styleTween(name, value, priority == null ? "" : priority));
}

// node_modules/d3-transition/src/transition/text.js
function textConstant2(value) {
  return function() {
    this.textContent = value;
  };
}
function textFunction2(value) {
  return function() {
    var value1 = value(this);
    this.textContent = value1 == null ? "" : value1;
  };
}
function text_default2(value) {
  return this.tween("text", typeof value === "function" ? textFunction2(tweenValue(this, "text", value)) : textConstant2(value == null ? "" : value + ""));
}

// node_modules/d3-transition/src/transition/textTween.js
function textInterpolate(i) {
  return function(t) {
    this.textContent = i.call(this, t);
  };
}
function textTween(value) {
  var t0, i0;
  function tween() {
    var i = value.apply(this, arguments);
    if (i !== i0)
      t0 = (i0 = i) && textInterpolate(i);
    return t0;
  }
  tween._value = value;
  return tween;
}
function textTween_default(value) {
  var key = "text";
  if (arguments.length < 1)
    return (key = this.tween(key)) && key._value;
  if (value == null)
    return this.tween(key, null);
  if (typeof value !== "function")
    throw new Error();
  return this.tween(key, textTween(value));
}

// node_modules/d3-transition/src/transition/transition.js
function transition_default() {
  var name = this._name, id0 = this._id, id1 = newId();
  for (var groups = this._groups, m2 = groups.length, j = 0; j < m2; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        var inherit2 = get2(node, id0);
        schedule_default(node, name, id1, i, group, {
          time: inherit2.time + inherit2.delay + inherit2.duration,
          delay: 0,
          duration: inherit2.duration,
          ease: inherit2.ease
        });
      }
    }
  }
  return new Transition(groups, this._parents, name, id1);
}

// node_modules/d3-transition/src/transition/end.js
function end_default() {
  var on0, on1, that = this, id2 = that._id, size = that.size();
  return new Promise(function(resolve, reject) {
    var cancel = { value: reject }, end = { value: function() {
      if (--size === 0)
        resolve();
    } };
    that.each(function() {
      var schedule = set2(this, id2), on = schedule.on;
      if (on !== on0) {
        on1 = (on0 = on).copy();
        on1._.cancel.push(cancel);
        on1._.interrupt.push(cancel);
        on1._.end.push(end);
      }
      schedule.on = on1;
    });
    if (size === 0)
      resolve();
  });
}

// node_modules/d3-transition/src/transition/index.js
var id = 0;
function Transition(groups, parents, name, id2) {
  this._groups = groups;
  this._parents = parents;
  this._name = name;
  this._id = id2;
}
function transition(name) {
  return selection_default().transition(name);
}
function newId() {
  return ++id;
}
var selection_prototype = selection_default.prototype;
Transition.prototype = transition.prototype = {
  constructor: Transition,
  select: select_default3,
  selectAll: selectAll_default2,
  selectChild: selection_prototype.selectChild,
  selectChildren: selection_prototype.selectChildren,
  filter: filter_default2,
  merge: merge_default2,
  selection: selection_default2,
  transition: transition_default,
  call: selection_prototype.call,
  nodes: selection_prototype.nodes,
  node: selection_prototype.node,
  size: selection_prototype.size,
  empty: selection_prototype.empty,
  each: selection_prototype.each,
  on: on_default2,
  attr: attr_default2,
  attrTween: attrTween_default,
  style: style_default2,
  styleTween: styleTween_default,
  text: text_default2,
  textTween: textTween_default,
  remove: remove_default2,
  tween: tween_default,
  delay: delay_default,
  duration: duration_default,
  ease: ease_default,
  easeVarying: easeVarying_default,
  end: end_default,
  [Symbol.iterator]: selection_prototype[Symbol.iterator]
};

// node_modules/d3-ease/src/cubic.js
function cubicInOut(t) {
  return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;
}

// node_modules/d3-transition/src/selection/transition.js
var defaultTiming = {
  time: null,
  // Set on use.
  delay: 0,
  duration: 250,
  ease: cubicInOut
};
function inherit(node, id2) {
  var timing;
  while (!(timing = node.__transition) || !(timing = timing[id2])) {
    if (!(node = node.parentNode)) {
      throw new Error(`transition ${id2} not found`);
    }
  }
  return timing;
}
function transition_default2(name) {
  var id2, timing;
  if (name instanceof Transition) {
    id2 = name._id, name = name._name;
  } else {
    id2 = newId(), (timing = defaultTiming).time = now(), name = name == null ? null : name + "";
  }
  for (var groups = this._groups, m2 = groups.length, j = 0; j < m2; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        schedule_default(node, name, id2, i, group, timing || inherit(node, id2));
      }
    }
  }
  return new Transition(groups, this._parents, name, id2);
}

// node_modules/d3-transition/src/selection/index.js
selection_default.prototype.interrupt = interrupt_default2;
selection_default.prototype.transition = transition_default2;

// node_modules/d3-brush/src/brush.js
var { abs, max, min } = Math;
function number1(e) {
  return [+e[0], +e[1]];
}
function number2(e) {
  return [number1(e[0]), number1(e[1])];
}
var X = {
  name: "x",
  handles: ["w", "e"].map(type),
  input: function(x3, e) {
    return x3 == null ? null : [[+x3[0], e[0][1]], [+x3[1], e[1][1]]];
  },
  output: function(xy) {
    return xy && [xy[0][0], xy[1][0]];
  }
};
var Y = {
  name: "y",
  handles: ["n", "s"].map(type),
  input: function(y3, e) {
    return y3 == null ? null : [[e[0][0], +y3[0]], [e[1][0], +y3[1]]];
  },
  output: function(xy) {
    return xy && [xy[0][1], xy[1][1]];
  }
};
var XY = {
  name: "xy",
  handles: ["n", "w", "e", "s", "nw", "ne", "sw", "se"].map(type),
  input: function(xy) {
    return xy == null ? null : number2(xy);
  },
  output: function(xy) {
    return xy;
  }
};
function type(t) {
  return { type: t };
}

// node_modules/d3-force/src/center.js
function center_default(x3, y3) {
  var nodes, strength = 1;
  if (x3 == null)
    x3 = 0;
  if (y3 == null)
    y3 = 0;
  function force() {
    var i, n = nodes.length, node, sx = 0, sy = 0;
    for (i = 0; i < n; ++i) {
      node = nodes[i], sx += node.x, sy += node.y;
    }
    for (sx = (sx / n - x3) * strength, sy = (sy / n - y3) * strength, i = 0; i < n; ++i) {
      node = nodes[i], node.x -= sx, node.y -= sy;
    }
  }
  force.initialize = function(_) {
    nodes = _;
  };
  force.x = function(_) {
    return arguments.length ? (x3 = +_, force) : x3;
  };
  force.y = function(_) {
    return arguments.length ? (y3 = +_, force) : y3;
  };
  force.strength = function(_) {
    return arguments.length ? (strength = +_, force) : strength;
  };
  return force;
}

// node_modules/d3-quadtree/src/add.js
function add_default(d) {
  const x3 = +this._x.call(null, d), y3 = +this._y.call(null, d);
  return add(this.cover(x3, y3), x3, y3, d);
}
function add(tree, x3, y3, d) {
  if (isNaN(x3) || isNaN(y3))
    return tree;
  var parent, node = tree._root, leaf = { data: d }, x0 = tree._x0, y0 = tree._y0, x1 = tree._x1, y1 = tree._y1, xm, ym, xp, yp, right, bottom, i, j;
  if (!node)
    return tree._root = leaf, tree;
  while (node.length) {
    if (right = x3 >= (xm = (x0 + x1) / 2))
      x0 = xm;
    else
      x1 = xm;
    if (bottom = y3 >= (ym = (y0 + y1) / 2))
      y0 = ym;
    else
      y1 = ym;
    if (parent = node, !(node = node[i = bottom << 1 | right]))
      return parent[i] = leaf, tree;
  }
  xp = +tree._x.call(null, node.data);
  yp = +tree._y.call(null, node.data);
  if (x3 === xp && y3 === yp)
    return leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree;
  do {
    parent = parent ? parent[i] = new Array(4) : tree._root = new Array(4);
    if (right = x3 >= (xm = (x0 + x1) / 2))
      x0 = xm;
    else
      x1 = xm;
    if (bottom = y3 >= (ym = (y0 + y1) / 2))
      y0 = ym;
    else
      y1 = ym;
  } while ((i = bottom << 1 | right) === (j = (yp >= ym) << 1 | xp >= xm));
  return parent[j] = node, parent[i] = leaf, tree;
}
function addAll(data) {
  var d, i, n = data.length, x3, y3, xz = new Array(n), yz = new Array(n), x0 = Infinity, y0 = Infinity, x1 = -Infinity, y1 = -Infinity;
  for (i = 0; i < n; ++i) {
    if (isNaN(x3 = +this._x.call(null, d = data[i])) || isNaN(y3 = +this._y.call(null, d)))
      continue;
    xz[i] = x3;
    yz[i] = y3;
    if (x3 < x0)
      x0 = x3;
    if (x3 > x1)
      x1 = x3;
    if (y3 < y0)
      y0 = y3;
    if (y3 > y1)
      y1 = y3;
  }
  if (x0 > x1 || y0 > y1)
    return this;
  this.cover(x0, y0).cover(x1, y1);
  for (i = 0; i < n; ++i) {
    add(this, xz[i], yz[i], data[i]);
  }
  return this;
}

// node_modules/d3-quadtree/src/cover.js
function cover_default(x3, y3) {
  if (isNaN(x3 = +x3) || isNaN(y3 = +y3))
    return this;
  var x0 = this._x0, y0 = this._y0, x1 = this._x1, y1 = this._y1;
  if (isNaN(x0)) {
    x1 = (x0 = Math.floor(x3)) + 1;
    y1 = (y0 = Math.floor(y3)) + 1;
  } else {
    var z = x1 - x0 || 1, node = this._root, parent, i;
    while (x0 > x3 || x3 >= x1 || y0 > y3 || y3 >= y1) {
      i = (y3 < y0) << 1 | x3 < x0;
      parent = new Array(4), parent[i] = node, node = parent, z *= 2;
      switch (i) {
        case 0:
          x1 = x0 + z, y1 = y0 + z;
          break;
        case 1:
          x0 = x1 - z, y1 = y0 + z;
          break;
        case 2:
          x1 = x0 + z, y0 = y1 - z;
          break;
        case 3:
          x0 = x1 - z, y0 = y1 - z;
          break;
      }
    }
    if (this._root && this._root.length)
      this._root = node;
  }
  this._x0 = x0;
  this._y0 = y0;
  this._x1 = x1;
  this._y1 = y1;
  return this;
}

// node_modules/d3-quadtree/src/data.js
function data_default2() {
  var data = [];
  this.visit(function(node) {
    if (!node.length)
      do
        data.push(node.data);
      while (node = node.next);
  });
  return data;
}

// node_modules/d3-quadtree/src/extent.js
function extent_default(_) {
  return arguments.length ? this.cover(+_[0][0], +_[0][1]).cover(+_[1][0], +_[1][1]) : isNaN(this._x0) ? void 0 : [[this._x0, this._y0], [this._x1, this._y1]];
}

// node_modules/d3-quadtree/src/quad.js
function quad_default(node, x0, y0, x1, y1) {
  this.node = node;
  this.x0 = x0;
  this.y0 = y0;
  this.x1 = x1;
  this.y1 = y1;
}

// node_modules/d3-quadtree/src/find.js
function find_default(x3, y3, radius) {
  var data, x0 = this._x0, y0 = this._y0, x1, y1, x22, y22, x32 = this._x1, y32 = this._y1, quads = [], node = this._root, q, i;
  if (node)
    quads.push(new quad_default(node, x0, y0, x32, y32));
  if (radius == null)
    radius = Infinity;
  else {
    x0 = x3 - radius, y0 = y3 - radius;
    x32 = x3 + radius, y32 = y3 + radius;
    radius *= radius;
  }
  while (q = quads.pop()) {
    if (!(node = q.node) || (x1 = q.x0) > x32 || (y1 = q.y0) > y32 || (x22 = q.x1) < x0 || (y22 = q.y1) < y0)
      continue;
    if (node.length) {
      var xm = (x1 + x22) / 2, ym = (y1 + y22) / 2;
      quads.push(
        new quad_default(node[3], xm, ym, x22, y22),
        new quad_default(node[2], x1, ym, xm, y22),
        new quad_default(node[1], xm, y1, x22, ym),
        new quad_default(node[0], x1, y1, xm, ym)
      );
      if (i = (y3 >= ym) << 1 | x3 >= xm) {
        q = quads[quads.length - 1];
        quads[quads.length - 1] = quads[quads.length - 1 - i];
        quads[quads.length - 1 - i] = q;
      }
    } else {
      var dx = x3 - +this._x.call(null, node.data), dy = y3 - +this._y.call(null, node.data), d2 = dx * dx + dy * dy;
      if (d2 < radius) {
        var d = Math.sqrt(radius = d2);
        x0 = x3 - d, y0 = y3 - d;
        x32 = x3 + d, y32 = y3 + d;
        data = node.data;
      }
    }
  }
  return data;
}

// node_modules/d3-quadtree/src/remove.js
function remove_default3(d) {
  if (isNaN(x3 = +this._x.call(null, d)) || isNaN(y3 = +this._y.call(null, d)))
    return this;
  var parent, node = this._root, retainer, previous, next, x0 = this._x0, y0 = this._y0, x1 = this._x1, y1 = this._y1, x3, y3, xm, ym, right, bottom, i, j;
  if (!node)
    return this;
  if (node.length)
    while (true) {
      if (right = x3 >= (xm = (x0 + x1) / 2))
        x0 = xm;
      else
        x1 = xm;
      if (bottom = y3 >= (ym = (y0 + y1) / 2))
        y0 = ym;
      else
        y1 = ym;
      if (!(parent = node, node = node[i = bottom << 1 | right]))
        return this;
      if (!node.length)
        break;
      if (parent[i + 1 & 3] || parent[i + 2 & 3] || parent[i + 3 & 3])
        retainer = parent, j = i;
    }
  while (node.data !== d)
    if (!(previous = node, node = node.next))
      return this;
  if (next = node.next)
    delete node.next;
  if (previous)
    return next ? previous.next = next : delete previous.next, this;
  if (!parent)
    return this._root = next, this;
  next ? parent[i] = next : delete parent[i];
  if ((node = parent[0] || parent[1] || parent[2] || parent[3]) && node === (parent[3] || parent[2] || parent[1] || parent[0]) && !node.length) {
    if (retainer)
      retainer[j] = node;
    else
      this._root = node;
  }
  return this;
}
function removeAll(data) {
  for (var i = 0, n = data.length; i < n; ++i)
    this.remove(data[i]);
  return this;
}

// node_modules/d3-quadtree/src/root.js
function root_default() {
  return this._root;
}

// node_modules/d3-quadtree/src/size.js
function size_default2() {
  var size = 0;
  this.visit(function(node) {
    if (!node.length)
      do
        ++size;
      while (node = node.next);
  });
  return size;
}

// node_modules/d3-quadtree/src/visit.js
function visit_default(callback) {
  var quads = [], q, node = this._root, child, x0, y0, x1, y1;
  if (node)
    quads.push(new quad_default(node, this._x0, this._y0, this._x1, this._y1));
  while (q = quads.pop()) {
    if (!callback(node = q.node, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1) && node.length) {
      var xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;
      if (child = node[3])
        quads.push(new quad_default(child, xm, ym, x1, y1));
      if (child = node[2])
        quads.push(new quad_default(child, x0, ym, xm, y1));
      if (child = node[1])
        quads.push(new quad_default(child, xm, y0, x1, ym));
      if (child = node[0])
        quads.push(new quad_default(child, x0, y0, xm, ym));
    }
  }
  return this;
}

// node_modules/d3-quadtree/src/visitAfter.js
function visitAfter_default(callback) {
  var quads = [], next = [], q;
  if (this._root)
    quads.push(new quad_default(this._root, this._x0, this._y0, this._x1, this._y1));
  while (q = quads.pop()) {
    var node = q.node;
    if (node.length) {
      var child, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1, xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;
      if (child = node[0])
        quads.push(new quad_default(child, x0, y0, xm, ym));
      if (child = node[1])
        quads.push(new quad_default(child, xm, y0, x1, ym));
      if (child = node[2])
        quads.push(new quad_default(child, x0, ym, xm, y1));
      if (child = node[3])
        quads.push(new quad_default(child, xm, ym, x1, y1));
    }
    next.push(q);
  }
  while (q = next.pop()) {
    callback(q.node, q.x0, q.y0, q.x1, q.y1);
  }
  return this;
}

// node_modules/d3-quadtree/src/x.js
function defaultX(d) {
  return d[0];
}
function x_default(_) {
  return arguments.length ? (this._x = _, this) : this._x;
}

// node_modules/d3-quadtree/src/y.js
function defaultY(d) {
  return d[1];
}
function y_default(_) {
  return arguments.length ? (this._y = _, this) : this._y;
}

// node_modules/d3-quadtree/src/quadtree.js
function quadtree(nodes, x3, y3) {
  var tree = new Quadtree(x3 == null ? defaultX : x3, y3 == null ? defaultY : y3, NaN, NaN, NaN, NaN);
  return nodes == null ? tree : tree.addAll(nodes);
}
function Quadtree(x3, y3, x0, y0, x1, y1) {
  this._x = x3;
  this._y = y3;
  this._x0 = x0;
  this._y0 = y0;
  this._x1 = x1;
  this._y1 = y1;
  this._root = void 0;
}
function leaf_copy(leaf) {
  var copy2 = { data: leaf.data }, next = copy2;
  while (leaf = leaf.next)
    next = next.next = { data: leaf.data };
  return copy2;
}
var treeProto = quadtree.prototype = Quadtree.prototype;
treeProto.copy = function() {
  var copy2 = new Quadtree(this._x, this._y, this._x0, this._y0, this._x1, this._y1), node = this._root, nodes, child;
  if (!node)
    return copy2;
  if (!node.length)
    return copy2._root = leaf_copy(node), copy2;
  nodes = [{ source: node, target: copy2._root = new Array(4) }];
  while (node = nodes.pop()) {
    for (var i = 0; i < 4; ++i) {
      if (child = node.source[i]) {
        if (child.length)
          nodes.push({ source: child, target: node.target[i] = new Array(4) });
        else
          node.target[i] = leaf_copy(child);
      }
    }
  }
  return copy2;
};
treeProto.add = add_default;
treeProto.addAll = addAll;
treeProto.cover = cover_default;
treeProto.data = data_default2;
treeProto.extent = extent_default;
treeProto.find = find_default;
treeProto.remove = remove_default3;
treeProto.removeAll = removeAll;
treeProto.root = root_default;
treeProto.size = size_default2;
treeProto.visit = visit_default;
treeProto.visitAfter = visitAfter_default;
treeProto.x = x_default;
treeProto.y = y_default;

// node_modules/d3-force/src/constant.js
function constant_default5(x3) {
  return function() {
    return x3;
  };
}

// node_modules/d3-force/src/jiggle.js
function jiggle_default(random) {
  return (random() - 0.5) * 1e-6;
}

// node_modules/d3-force/src/collide.js
function x(d) {
  return d.x + d.vx;
}
function y(d) {
  return d.y + d.vy;
}
function collide_default(radius) {
  var nodes, radii, random, strength = 1, iterations = 1;
  if (typeof radius !== "function")
    radius = constant_default5(radius == null ? 1 : +radius);
  function force() {
    var i, n = nodes.length, tree, node, xi, yi, ri, ri2;
    for (var k = 0; k < iterations; ++k) {
      tree = quadtree(nodes, x, y).visitAfter(prepare);
      for (i = 0; i < n; ++i) {
        node = nodes[i];
        ri = radii[node.index], ri2 = ri * ri;
        xi = node.x + node.vx;
        yi = node.y + node.vy;
        tree.visit(apply);
      }
    }
    function apply(quad, x0, y0, x1, y1) {
      var data = quad.data, rj = quad.r, r = ri + rj;
      if (data) {
        if (data.index > node.index) {
          var x3 = xi - data.x - data.vx, y3 = yi - data.y - data.vy, l = x3 * x3 + y3 * y3;
          if (l < r * r) {
            if (x3 === 0)
              x3 = jiggle_default(random), l += x3 * x3;
            if (y3 === 0)
              y3 = jiggle_default(random), l += y3 * y3;
            l = (r - (l = Math.sqrt(l))) / l * strength;
            node.vx += (x3 *= l) * (r = (rj *= rj) / (ri2 + rj));
            node.vy += (y3 *= l) * r;
            data.vx -= x3 * (r = 1 - r);
            data.vy -= y3 * r;
          }
        }
        return;
      }
      return x0 > xi + r || x1 < xi - r || y0 > yi + r || y1 < yi - r;
    }
  }
  function prepare(quad) {
    if (quad.data)
      return quad.r = radii[quad.data.index];
    for (var i = quad.r = 0; i < 4; ++i) {
      if (quad[i] && quad[i].r > quad.r) {
        quad.r = quad[i].r;
      }
    }
  }
  function initialize() {
    if (!nodes)
      return;
    var i, n = nodes.length, node;
    radii = new Array(n);
    for (i = 0; i < n; ++i)
      node = nodes[i], radii[node.index] = +radius(node, i, nodes);
  }
  force.initialize = function(_nodes, _random) {
    nodes = _nodes;
    random = _random;
    initialize();
  };
  force.iterations = function(_) {
    return arguments.length ? (iterations = +_, force) : iterations;
  };
  force.strength = function(_) {
    return arguments.length ? (strength = +_, force) : strength;
  };
  force.radius = function(_) {
    return arguments.length ? (radius = typeof _ === "function" ? _ : constant_default5(+_), initialize(), force) : radius;
  };
  return force;
}

// node_modules/d3-force/src/link.js
function index(d) {
  return d.index;
}
function find2(nodeById, nodeId) {
  var node = nodeById.get(nodeId);
  if (!node)
    throw new Error("node not found: " + nodeId);
  return node;
}
function link_default(links2) {
  var id2 = index, strength = defaultStrength, strengths, distance = constant_default5(30), distances, nodes, count, bias, random, iterations = 1;
  if (links2 == null)
    links2 = [];
  function defaultStrength(link) {
    return 1 / Math.min(count[link.source.index], count[link.target.index]);
  }
  function force(alpha) {
    for (var k = 0, n = links2.length; k < iterations; ++k) {
      for (var i = 0, link, source, target, x3, y3, l, b; i < n; ++i) {
        link = links2[i], source = link.source, target = link.target;
        x3 = target.x + target.vx - source.x - source.vx || jiggle_default(random);
        y3 = target.y + target.vy - source.y - source.vy || jiggle_default(random);
        l = Math.sqrt(x3 * x3 + y3 * y3);
        l = (l - distances[i]) / l * alpha * strengths[i];
        x3 *= l, y3 *= l;
        target.vx -= x3 * (b = bias[i]);
        target.vy -= y3 * b;
        source.vx += x3 * (b = 1 - b);
        source.vy += y3 * b;
      }
    }
  }
  function initialize() {
    if (!nodes)
      return;
    var i, n = nodes.length, m2 = links2.length, nodeById = new Map(nodes.map((d, i2) => [id2(d, i2, nodes), d])), link;
    for (i = 0, count = new Array(n); i < m2; ++i) {
      link = links2[i], link.index = i;
      if (typeof link.source !== "object")
        link.source = find2(nodeById, link.source);
      if (typeof link.target !== "object")
        link.target = find2(nodeById, link.target);
      count[link.source.index] = (count[link.source.index] || 0) + 1;
      count[link.target.index] = (count[link.target.index] || 0) + 1;
    }
    for (i = 0, bias = new Array(m2); i < m2; ++i) {
      link = links2[i], bias[i] = count[link.source.index] / (count[link.source.index] + count[link.target.index]);
    }
    strengths = new Array(m2), initializeStrength();
    distances = new Array(m2), initializeDistance();
  }
  function initializeStrength() {
    if (!nodes)
      return;
    for (var i = 0, n = links2.length; i < n; ++i) {
      strengths[i] = +strength(links2[i], i, links2);
    }
  }
  function initializeDistance() {
    if (!nodes)
      return;
    for (var i = 0, n = links2.length; i < n; ++i) {
      distances[i] = +distance(links2[i], i, links2);
    }
  }
  force.initialize = function(_nodes, _random) {
    nodes = _nodes;
    random = _random;
    initialize();
  };
  force.links = function(_) {
    return arguments.length ? (links2 = _, initialize(), force) : links2;
  };
  force.id = function(_) {
    return arguments.length ? (id2 = _, force) : id2;
  };
  force.iterations = function(_) {
    return arguments.length ? (iterations = +_, force) : iterations;
  };
  force.strength = function(_) {
    return arguments.length ? (strength = typeof _ === "function" ? _ : constant_default5(+_), initializeStrength(), force) : strength;
  };
  force.distance = function(_) {
    return arguments.length ? (distance = typeof _ === "function" ? _ : constant_default5(+_), initializeDistance(), force) : distance;
  };
  return force;
}

// node_modules/d3-force/src/lcg.js
var a = 1664525;
var c = 1013904223;
var m = 4294967296;
function lcg_default() {
  let s = 1;
  return () => (s = (a * s + c) % m) / m;
}

// node_modules/d3-force/src/simulation.js
function x2(d) {
  return d.x;
}
function y2(d) {
  return d.y;
}
var initialRadius = 10;
var initialAngle = Math.PI * (3 - Math.sqrt(5));
function simulation_default(nodes) {
  var simulation, alpha = 1, alphaMin = 1e-3, alphaDecay = 1 - Math.pow(alphaMin, 1 / 300), alphaTarget = 0, velocityDecay = 0.6, forces = /* @__PURE__ */ new Map(), stepper = timer(step), event = dispatch_default("tick", "end"), random = lcg_default();
  if (nodes == null)
    nodes = [];
  function step() {
    tick();
    event.call("tick", simulation);
    if (alpha < alphaMin) {
      stepper.stop();
      event.call("end", simulation);
    }
  }
  function tick(iterations) {
    var i, n = nodes.length, node;
    if (iterations === void 0)
      iterations = 1;
    for (var k = 0; k < iterations; ++k) {
      alpha += (alphaTarget - alpha) * alphaDecay;
      forces.forEach(function(force) {
        force(alpha);
      });
      for (i = 0; i < n; ++i) {
        node = nodes[i];
        if (node.fx == null)
          node.x += node.vx *= velocityDecay;
        else
          node.x = node.fx, node.vx = 0;
        if (node.fy == null)
          node.y += node.vy *= velocityDecay;
        else
          node.y = node.fy, node.vy = 0;
      }
    }
    return simulation;
  }
  function initializeNodes() {
    for (var i = 0, n = nodes.length, node; i < n; ++i) {
      node = nodes[i], node.index = i;
      if (node.fx != null)
        node.x = node.fx;
      if (node.fy != null)
        node.y = node.fy;
      if (isNaN(node.x) || isNaN(node.y)) {
        var radius = initialRadius * Math.sqrt(0.5 + i), angle = i * initialAngle;
        node.x = radius * Math.cos(angle);
        node.y = radius * Math.sin(angle);
      }
      if (isNaN(node.vx) || isNaN(node.vy)) {
        node.vx = node.vy = 0;
      }
    }
  }
  function initializeForce(force) {
    if (force.initialize)
      force.initialize(nodes, random);
    return force;
  }
  initializeNodes();
  return simulation = {
    tick,
    restart: function() {
      return stepper.restart(step), simulation;
    },
    stop: function() {
      return stepper.stop(), simulation;
    },
    nodes: function(_) {
      return arguments.length ? (nodes = _, initializeNodes(), forces.forEach(initializeForce), simulation) : nodes;
    },
    alpha: function(_) {
      return arguments.length ? (alpha = +_, simulation) : alpha;
    },
    alphaMin: function(_) {
      return arguments.length ? (alphaMin = +_, simulation) : alphaMin;
    },
    alphaDecay: function(_) {
      return arguments.length ? (alphaDecay = +_, simulation) : +alphaDecay;
    },
    alphaTarget: function(_) {
      return arguments.length ? (alphaTarget = +_, simulation) : alphaTarget;
    },
    velocityDecay: function(_) {
      return arguments.length ? (velocityDecay = 1 - _, simulation) : 1 - velocityDecay;
    },
    randomSource: function(_) {
      return arguments.length ? (random = _, forces.forEach(initializeForce), simulation) : random;
    },
    force: function(name, _) {
      return arguments.length > 1 ? (_ == null ? forces.delete(name) : forces.set(name, initializeForce(_)), simulation) : forces.get(name);
    },
    find: function(x3, y3, radius) {
      var i = 0, n = nodes.length, dx, dy, d2, node, closest;
      if (radius == null)
        radius = Infinity;
      else
        radius *= radius;
      for (i = 0; i < n; ++i) {
        node = nodes[i];
        dx = x3 - node.x;
        dy = y3 - node.y;
        d2 = dx * dx + dy * dy;
        if (d2 < radius)
          closest = node, radius = d2;
      }
      return closest;
    },
    on: function(name, _) {
      return arguments.length > 1 ? (event.on(name, _), simulation) : event.on(name);
    }
  };
}

// node_modules/d3-force/src/manyBody.js
function manyBody_default() {
  var nodes, node, random, alpha, strength = constant_default5(-30), strengths, distanceMin2 = 1, distanceMax2 = Infinity, theta2 = 0.81;
  function force(_) {
    var i, n = nodes.length, tree = quadtree(nodes, x2, y2).visitAfter(accumulate);
    for (alpha = _, i = 0; i < n; ++i)
      node = nodes[i], tree.visit(apply);
  }
  function initialize() {
    if (!nodes)
      return;
    var i, n = nodes.length, node2;
    strengths = new Array(n);
    for (i = 0; i < n; ++i)
      node2 = nodes[i], strengths[node2.index] = +strength(node2, i, nodes);
  }
  function accumulate(quad) {
    var strength2 = 0, q, c2, weight = 0, x3, y3, i;
    if (quad.length) {
      for (x3 = y3 = i = 0; i < 4; ++i) {
        if ((q = quad[i]) && (c2 = Math.abs(q.value))) {
          strength2 += q.value, weight += c2, x3 += c2 * q.x, y3 += c2 * q.y;
        }
      }
      quad.x = x3 / weight;
      quad.y = y3 / weight;
    } else {
      q = quad;
      q.x = q.data.x;
      q.y = q.data.y;
      do
        strength2 += strengths[q.data.index];
      while (q = q.next);
    }
    quad.value = strength2;
  }
  function apply(quad, x1, _, x22) {
    if (!quad.value)
      return true;
    var x3 = quad.x - node.x, y3 = quad.y - node.y, w = x22 - x1, l = x3 * x3 + y3 * y3;
    if (w * w / theta2 < l) {
      if (l < distanceMax2) {
        if (x3 === 0)
          x3 = jiggle_default(random), l += x3 * x3;
        if (y3 === 0)
          y3 = jiggle_default(random), l += y3 * y3;
        if (l < distanceMin2)
          l = Math.sqrt(distanceMin2 * l);
        node.vx += x3 * quad.value * alpha / l;
        node.vy += y3 * quad.value * alpha / l;
      }
      return true;
    } else if (quad.length || l >= distanceMax2)
      return;
    if (quad.data !== node || quad.next) {
      if (x3 === 0)
        x3 = jiggle_default(random), l += x3 * x3;
      if (y3 === 0)
        y3 = jiggle_default(random), l += y3 * y3;
      if (l < distanceMin2)
        l = Math.sqrt(distanceMin2 * l);
    }
    do
      if (quad.data !== node) {
        w = strengths[quad.data.index] * alpha / l;
        node.vx += x3 * w;
        node.vy += y3 * w;
      }
    while (quad = quad.next);
  }
  force.initialize = function(_nodes, _random) {
    nodes = _nodes;
    random = _random;
    initialize();
  };
  force.strength = function(_) {
    return arguments.length ? (strength = typeof _ === "function" ? _ : constant_default5(+_), initialize(), force) : strength;
  };
  force.distanceMin = function(_) {
    return arguments.length ? (distanceMin2 = _ * _, force) : Math.sqrt(distanceMin2);
  };
  force.distanceMax = function(_) {
    return arguments.length ? (distanceMax2 = _ * _, force) : Math.sqrt(distanceMax2);
  };
  force.theta = function(_) {
    return arguments.length ? (theta2 = _ * _, force) : Math.sqrt(theta2);
  };
  return force;
}

// node_modules/d3-format/src/formatDecimal.js
function formatDecimal_default(x3) {
  return Math.abs(x3 = Math.round(x3)) >= 1e21 ? x3.toLocaleString("en").replace(/,/g, "") : x3.toString(10);
}
function formatDecimalParts(x3, p) {
  if ((i = (x3 = p ? x3.toExponential(p - 1) : x3.toExponential()).indexOf("e")) < 0)
    return null;
  var i, coefficient = x3.slice(0, i);
  return [
    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
    +x3.slice(i + 1)
  ];
}

// node_modules/d3-format/src/exponent.js
function exponent_default(x3) {
  return x3 = formatDecimalParts(Math.abs(x3)), x3 ? x3[1] : NaN;
}

// node_modules/d3-format/src/formatGroup.js
function formatGroup_default(grouping, thousands) {
  return function(value, width) {
    var i = value.length, t = [], j = 0, g = grouping[0], length = 0;
    while (i > 0 && g > 0) {
      if (length + g + 1 > width)
        g = Math.max(1, width - length);
      t.push(value.substring(i -= g, i + g));
      if ((length += g + 1) > width)
        break;
      g = grouping[j = (j + 1) % grouping.length];
    }
    return t.reverse().join(thousands);
  };
}

// node_modules/d3-format/src/formatNumerals.js
function formatNumerals_default(numerals) {
  return function(value) {
    return value.replace(/[0-9]/g, function(i) {
      return numerals[+i];
    });
  };
}

// node_modules/d3-format/src/formatSpecifier.js
var re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;
function formatSpecifier(specifier) {
  if (!(match = re.exec(specifier)))
    throw new Error("invalid format: " + specifier);
  var match;
  return new FormatSpecifier({
    fill: match[1],
    align: match[2],
    sign: match[3],
    symbol: match[4],
    zero: match[5],
    width: match[6],
    comma: match[7],
    precision: match[8] && match[8].slice(1),
    trim: match[9],
    type: match[10]
  });
}
formatSpecifier.prototype = FormatSpecifier.prototype;
function FormatSpecifier(specifier) {
  this.fill = specifier.fill === void 0 ? " " : specifier.fill + "";
  this.align = specifier.align === void 0 ? ">" : specifier.align + "";
  this.sign = specifier.sign === void 0 ? "-" : specifier.sign + "";
  this.symbol = specifier.symbol === void 0 ? "" : specifier.symbol + "";
  this.zero = !!specifier.zero;
  this.width = specifier.width === void 0 ? void 0 : +specifier.width;
  this.comma = !!specifier.comma;
  this.precision = specifier.precision === void 0 ? void 0 : +specifier.precision;
  this.trim = !!specifier.trim;
  this.type = specifier.type === void 0 ? "" : specifier.type + "";
}
FormatSpecifier.prototype.toString = function() {
  return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (this.width === void 0 ? "" : Math.max(1, this.width | 0)) + (this.comma ? "," : "") + (this.precision === void 0 ? "" : "." + Math.max(0, this.precision | 0)) + (this.trim ? "~" : "") + this.type;
};

// node_modules/d3-format/src/formatTrim.js
function formatTrim_default(s) {
  out:
    for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {
      switch (s[i]) {
        case ".":
          i0 = i1 = i;
          break;
        case "0":
          if (i0 === 0)
            i0 = i;
          i1 = i;
          break;
        default:
          if (!+s[i])
            break out;
          if (i0 > 0)
            i0 = 0;
          break;
      }
    }
  return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;
}

// node_modules/d3-format/src/formatPrefixAuto.js
var prefixExponent;
function formatPrefixAuto_default(x3, p) {
  var d = formatDecimalParts(x3, p);
  if (!d)
    return x3 + "";
  var coefficient = d[0], exponent = d[1], i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1, n = coefficient.length;
  return i === n ? coefficient : i > n ? coefficient + new Array(i - n + 1).join("0") : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i) : "0." + new Array(1 - i).join("0") + formatDecimalParts(x3, Math.max(0, p + i - 1))[0];
}

// node_modules/d3-format/src/formatRounded.js
function formatRounded_default(x3, p) {
  var d = formatDecimalParts(x3, p);
  if (!d)
    return x3 + "";
  var coefficient = d[0], exponent = d[1];
  return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1) : coefficient + new Array(exponent - coefficient.length + 2).join("0");
}

// node_modules/d3-format/src/formatTypes.js
var formatTypes_default = {
  "%": (x3, p) => (x3 * 100).toFixed(p),
  "b": (x3) => Math.round(x3).toString(2),
  "c": (x3) => x3 + "",
  "d": formatDecimal_default,
  "e": (x3, p) => x3.toExponential(p),
  "f": (x3, p) => x3.toFixed(p),
  "g": (x3, p) => x3.toPrecision(p),
  "o": (x3) => Math.round(x3).toString(8),
  "p": (x3, p) => formatRounded_default(x3 * 100, p),
  "r": formatRounded_default,
  "s": formatPrefixAuto_default,
  "X": (x3) => Math.round(x3).toString(16).toUpperCase(),
  "x": (x3) => Math.round(x3).toString(16)
};

// node_modules/d3-format/src/identity.js
function identity_default(x3) {
  return x3;
}

// node_modules/d3-format/src/locale.js
var map = Array.prototype.map;
var prefixes = ["y", "z", "a", "f", "p", "n", "\xB5", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y"];
function locale_default(locale2) {
  var group = locale2.grouping === void 0 || locale2.thousands === void 0 ? identity_default : formatGroup_default(map.call(locale2.grouping, Number), locale2.thousands + ""), currencyPrefix = locale2.currency === void 0 ? "" : locale2.currency[0] + "", currencySuffix = locale2.currency === void 0 ? "" : locale2.currency[1] + "", decimal = locale2.decimal === void 0 ? "." : locale2.decimal + "", numerals = locale2.numerals === void 0 ? identity_default : formatNumerals_default(map.call(locale2.numerals, String)), percent = locale2.percent === void 0 ? "%" : locale2.percent + "", minus = locale2.minus === void 0 ? "\u2212" : locale2.minus + "", nan = locale2.nan === void 0 ? "NaN" : locale2.nan + "";
  function newFormat(specifier) {
    specifier = formatSpecifier(specifier);
    var fill = specifier.fill, align = specifier.align, sign = specifier.sign, symbol = specifier.symbol, zero3 = specifier.zero, width = specifier.width, comma = specifier.comma, precision = specifier.precision, trim = specifier.trim, type2 = specifier.type;
    if (type2 === "n")
      comma = true, type2 = "g";
    else if (!formatTypes_default[type2])
      precision === void 0 && (precision = 12), trim = true, type2 = "g";
    if (zero3 || fill === "0" && align === "=")
      zero3 = true, fill = "0", align = "=";
    var prefix = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type2) ? "0" + type2.toLowerCase() : "", suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type2) ? percent : "";
    var formatType = formatTypes_default[type2], maybeSuffix = /[defgprs%]/.test(type2);
    precision = precision === void 0 ? 6 : /[gprs]/.test(type2) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));
    function format2(value) {
      var valuePrefix = prefix, valueSuffix = suffix, i, n, c2;
      if (type2 === "c") {
        valueSuffix = formatType(value) + valueSuffix;
        value = "";
      } else {
        value = +value;
        var valueNegative = value < 0 || 1 / value < 0;
        value = isNaN(value) ? nan : formatType(Math.abs(value), precision);
        if (trim)
          value = formatTrim_default(value);
        if (valueNegative && +value === 0 && sign !== "+")
          valueNegative = false;
        valuePrefix = (valueNegative ? sign === "(" ? sign : minus : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;
        valueSuffix = (type2 === "s" ? prefixes[8 + prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign === "(" ? ")" : "");
        if (maybeSuffix) {
          i = -1, n = value.length;
          while (++i < n) {
            if (c2 = value.charCodeAt(i), 48 > c2 || c2 > 57) {
              valueSuffix = (c2 === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
              value = value.slice(0, i);
              break;
            }
          }
        }
      }
      if (comma && !zero3)
        value = group(value, Infinity);
      var length = valuePrefix.length + value.length + valueSuffix.length, padding = length < width ? new Array(width - length + 1).join(fill) : "";
      if (comma && zero3)
        value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";
      switch (align) {
        case "<":
          value = valuePrefix + value + valueSuffix + padding;
          break;
        case "=":
          value = valuePrefix + padding + value + valueSuffix;
          break;
        case "^":
          value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);
          break;
        default:
          value = padding + valuePrefix + value + valueSuffix;
          break;
      }
      return numerals(value);
    }
    format2.toString = function() {
      return specifier + "";
    };
    return format2;
  }
  function formatPrefix2(specifier, value) {
    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)), e = Math.max(-8, Math.min(8, Math.floor(exponent_default(value) / 3))) * 3, k = Math.pow(10, -e), prefix = prefixes[8 + e / 3];
    return function(value2) {
      return f(k * value2) + prefix;
    };
  }
  return {
    format: newFormat,
    formatPrefix: formatPrefix2
  };
}

// node_modules/d3-format/src/defaultLocale.js
var locale;
var format;
var formatPrefix;
defaultLocale({
  thousands: ",",
  grouping: [3],
  currency: ["$", ""]
});
function defaultLocale(definition) {
  locale = locale_default(definition);
  format = locale.format;
  formatPrefix = locale.formatPrefix;
  return locale;
}

// node_modules/d3-format/src/precisionFixed.js
function precisionFixed_default(step) {
  return Math.max(0, -exponent_default(Math.abs(step)));
}

// node_modules/d3-format/src/precisionPrefix.js
function precisionPrefix_default(step, value) {
  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent_default(value) / 3))) * 3 - exponent_default(Math.abs(step)));
}

// node_modules/d3-format/src/precisionRound.js
function precisionRound_default(step, max2) {
  step = Math.abs(step), max2 = Math.abs(max2) - step;
  return Math.max(0, exponent_default(max2) - exponent_default(step)) + 1;
}

// node_modules/d3-scale/src/init.js
function initRange(domain, range) {
  switch (arguments.length) {
    case 0:
      break;
    case 1:
      this.range(domain);
      break;
    default:
      this.range(range).domain(domain);
      break;
  }
  return this;
}

// node_modules/d3-scale/src/constant.js
function constants(x3) {
  return function() {
    return x3;
  };
}

// node_modules/d3-scale/src/number.js
function number3(x3) {
  return +x3;
}

// node_modules/d3-scale/src/continuous.js
var unit = [0, 1];
function identity2(x3) {
  return x3;
}
function normalize(a2, b) {
  return (b -= a2 = +a2) ? function(x3) {
    return (x3 - a2) / b;
  } : constants(isNaN(b) ? NaN : 0.5);
}
function clamper(a2, b) {
  var t;
  if (a2 > b)
    t = a2, a2 = b, b = t;
  return function(x3) {
    return Math.max(a2, Math.min(b, x3));
  };
}
function bimap(domain, range, interpolate) {
  var d0 = domain[0], d1 = domain[1], r0 = range[0], r1 = range[1];
  if (d1 < d0)
    d0 = normalize(d1, d0), r0 = interpolate(r1, r0);
  else
    d0 = normalize(d0, d1), r0 = interpolate(r0, r1);
  return function(x3) {
    return r0(d0(x3));
  };
}
function polymap(domain, range, interpolate) {
  var j = Math.min(domain.length, range.length) - 1, d = new Array(j), r = new Array(j), i = -1;
  if (domain[j] < domain[0]) {
    domain = domain.slice().reverse();
    range = range.slice().reverse();
  }
  while (++i < j) {
    d[i] = normalize(domain[i], domain[i + 1]);
    r[i] = interpolate(range[i], range[i + 1]);
  }
  return function(x3) {
    var i2 = bisect_default(domain, x3, 1, j) - 1;
    return r[i2](d[i2](x3));
  };
}
function copy(source, target) {
  return target.domain(source.domain()).range(source.range()).interpolate(source.interpolate()).clamp(source.clamp()).unknown(source.unknown());
}
function transformer() {
  var domain = unit, range = unit, interpolate = value_default, transform2, untransform, unknown, clamp = identity2, piecewise, output, input;
  function rescale() {
    var n = Math.min(domain.length, range.length);
    if (clamp !== identity2)
      clamp = clamper(domain[0], domain[n - 1]);
    piecewise = n > 2 ? polymap : bimap;
    output = input = null;
    return scale;
  }
  function scale(x3) {
    return x3 == null || isNaN(x3 = +x3) ? unknown : (output || (output = piecewise(domain.map(transform2), range, interpolate)))(transform2(clamp(x3)));
  }
  scale.invert = function(y3) {
    return clamp(untransform((input || (input = piecewise(range, domain.map(transform2), number_default)))(y3)));
  };
  scale.domain = function(_) {
    return arguments.length ? (domain = Array.from(_, number3), rescale()) : domain.slice();
  };
  scale.range = function(_) {
    return arguments.length ? (range = Array.from(_), rescale()) : range.slice();
  };
  scale.rangeRound = function(_) {
    return range = Array.from(_), interpolate = round_default, rescale();
  };
  scale.clamp = function(_) {
    return arguments.length ? (clamp = _ ? true : identity2, rescale()) : clamp !== identity2;
  };
  scale.interpolate = function(_) {
    return arguments.length ? (interpolate = _, rescale()) : interpolate;
  };
  scale.unknown = function(_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };
  return function(t, u) {
    transform2 = t, untransform = u;
    return rescale();
  };
}
function continuous() {
  return transformer()(identity2, identity2);
}

// node_modules/d3-scale/src/tickFormat.js
function tickFormat(start2, stop, count, specifier) {
  var step = tickStep(start2, stop, count), precision;
  specifier = formatSpecifier(specifier == null ? ",f" : specifier);
  switch (specifier.type) {
    case "s": {
      var value = Math.max(Math.abs(start2), Math.abs(stop));
      if (specifier.precision == null && !isNaN(precision = precisionPrefix_default(step, value)))
        specifier.precision = precision;
      return formatPrefix(specifier, value);
    }
    case "":
    case "e":
    case "g":
    case "p":
    case "r": {
      if (specifier.precision == null && !isNaN(precision = precisionRound_default(step, Math.max(Math.abs(start2), Math.abs(stop)))))
        specifier.precision = precision - (specifier.type === "e");
      break;
    }
    case "f":
    case "%": {
      if (specifier.precision == null && !isNaN(precision = precisionFixed_default(step)))
        specifier.precision = precision - (specifier.type === "%") * 2;
      break;
    }
  }
  return format(specifier);
}

// node_modules/d3-scale/src/linear.js
function linearish(scale) {
  var domain = scale.domain;
  scale.ticks = function(count) {
    var d = domain();
    return ticks(d[0], d[d.length - 1], count == null ? 10 : count);
  };
  scale.tickFormat = function(count, specifier) {
    var d = domain();
    return tickFormat(d[0], d[d.length - 1], count == null ? 10 : count, specifier);
  };
  scale.nice = function(count) {
    if (count == null)
      count = 10;
    var d = domain();
    var i0 = 0;
    var i1 = d.length - 1;
    var start2 = d[i0];
    var stop = d[i1];
    var prestep;
    var step;
    var maxIter = 10;
    if (stop < start2) {
      step = start2, start2 = stop, stop = step;
      step = i0, i0 = i1, i1 = step;
    }
    while (maxIter-- > 0) {
      step = tickIncrement(start2, stop, count);
      if (step === prestep) {
        d[i0] = start2;
        d[i1] = stop;
        return domain(d);
      } else if (step > 0) {
        start2 = Math.floor(start2 / step) * step;
        stop = Math.ceil(stop / step) * step;
      } else if (step < 0) {
        start2 = Math.ceil(start2 * step) / step;
        stop = Math.floor(stop * step) / step;
      } else {
        break;
      }
      prestep = step;
    }
    return scale;
  };
  return scale;
}
function linear2() {
  var scale = continuous();
  scale.copy = function() {
    return copy(scale, linear2());
  };
  initRange.apply(scale, arguments);
  return linearish(scale);
}

// node_modules/d3-zoom/src/constant.js
var constant_default6 = (x3) => () => x3;

// node_modules/d3-zoom/src/event.js
function ZoomEvent(type2, {
  sourceEvent,
  target,
  transform: transform2,
  dispatch: dispatch2
}) {
  Object.defineProperties(this, {
    type: { value: type2, enumerable: true, configurable: true },
    sourceEvent: { value: sourceEvent, enumerable: true, configurable: true },
    target: { value: target, enumerable: true, configurable: true },
    transform: { value: transform2, enumerable: true, configurable: true },
    _: { value: dispatch2 }
  });
}

// node_modules/d3-zoom/src/transform.js
function Transform(k, x3, y3) {
  this.k = k;
  this.x = x3;
  this.y = y3;
}
Transform.prototype = {
  constructor: Transform,
  scale: function(k) {
    return k === 1 ? this : new Transform(this.k * k, this.x, this.y);
  },
  translate: function(x3, y3) {
    return x3 === 0 & y3 === 0 ? this : new Transform(this.k, this.x + this.k * x3, this.y + this.k * y3);
  },
  apply: function(point) {
    return [point[0] * this.k + this.x, point[1] * this.k + this.y];
  },
  applyX: function(x3) {
    return x3 * this.k + this.x;
  },
  applyY: function(y3) {
    return y3 * this.k + this.y;
  },
  invert: function(location) {
    return [(location[0] - this.x) / this.k, (location[1] - this.y) / this.k];
  },
  invertX: function(x3) {
    return (x3 - this.x) / this.k;
  },
  invertY: function(y3) {
    return (y3 - this.y) / this.k;
  },
  rescaleX: function(x3) {
    return x3.copy().domain(x3.range().map(this.invertX, this).map(x3.invert, x3));
  },
  rescaleY: function(y3) {
    return y3.copy().domain(y3.range().map(this.invertY, this).map(y3.invert, y3));
  },
  toString: function() {
    return "translate(" + this.x + "," + this.y + ") scale(" + this.k + ")";
  }
};
var identity3 = new Transform(1, 0, 0);
transform.prototype = Transform.prototype;
function transform(node) {
  while (!node.__zoom)
    if (!(node = node.parentNode))
      return identity3;
  return node.__zoom;
}

// node_modules/d3-zoom/src/noevent.js
function nopropagation3(event) {
  event.stopImmediatePropagation();
}
function noevent_default3(event) {
  event.preventDefault();
  event.stopImmediatePropagation();
}

// node_modules/d3-zoom/src/zoom.js
function defaultFilter2(event) {
  return (!event.ctrlKey || event.type === "wheel") && !event.button;
}
function defaultExtent() {
  var e = this;
  if (e instanceof SVGElement) {
    e = e.ownerSVGElement || e;
    if (e.hasAttribute("viewBox")) {
      e = e.viewBox.baseVal;
      return [[e.x, e.y], [e.x + e.width, e.y + e.height]];
    }
    return [[0, 0], [e.width.baseVal.value, e.height.baseVal.value]];
  }
  return [[0, 0], [e.clientWidth, e.clientHeight]];
}
function defaultTransform() {
  return this.__zoom || identity3;
}
function defaultWheelDelta(event) {
  return -event.deltaY * (event.deltaMode === 1 ? 0.05 : event.deltaMode ? 1 : 2e-3) * (event.ctrlKey ? 10 : 1);
}
function defaultTouchable2() {
  return navigator.maxTouchPoints || "ontouchstart" in this;
}
function defaultConstrain(transform2, extent, translateExtent) {
  var dx0 = transform2.invertX(extent[0][0]) - translateExtent[0][0], dx1 = transform2.invertX(extent[1][0]) - translateExtent[1][0], dy0 = transform2.invertY(extent[0][1]) - translateExtent[0][1], dy1 = transform2.invertY(extent[1][1]) - translateExtent[1][1];
  return transform2.translate(
    dx1 > dx0 ? (dx0 + dx1) / 2 : Math.min(0, dx0) || Math.max(0, dx1),
    dy1 > dy0 ? (dy0 + dy1) / 2 : Math.min(0, dy0) || Math.max(0, dy1)
  );
}
function zoom_default2() {
  var filter2 = defaultFilter2, extent = defaultExtent, constrain = defaultConstrain, wheelDelta = defaultWheelDelta, touchable = defaultTouchable2, scaleExtent = [0, Infinity], translateExtent = [[-Infinity, -Infinity], [Infinity, Infinity]], duration = 250, interpolate = zoom_default, listeners = dispatch_default("start", "zoom", "end"), touchstarting, touchfirst, touchending, touchDelay = 500, wheelDelay = 150, clickDistance2 = 0, tapDistance = 10;
  function zoom(selection2) {
    selection2.property("__zoom", defaultTransform).on("wheel.zoom", wheeled, { passive: false }).on("mousedown.zoom", mousedowned).on("dblclick.zoom", dblclicked).filter(touchable).on("touchstart.zoom", touchstarted).on("touchmove.zoom", touchmoved).on("touchend.zoom touchcancel.zoom", touchended).style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
  }
  zoom.transform = function(collection, transform2, point, event) {
    var selection2 = collection.selection ? collection.selection() : collection;
    selection2.property("__zoom", defaultTransform);
    if (collection !== selection2) {
      schedule(collection, transform2, point, event);
    } else {
      selection2.interrupt().each(function() {
        gesture(this, arguments).event(event).start().zoom(null, typeof transform2 === "function" ? transform2.apply(this, arguments) : transform2).end();
      });
    }
  };
  zoom.scaleBy = function(selection2, k, p, event) {
    zoom.scaleTo(selection2, function() {
      var k0 = this.__zoom.k, k1 = typeof k === "function" ? k.apply(this, arguments) : k;
      return k0 * k1;
    }, p, event);
  };
  zoom.scaleTo = function(selection2, k, p, event) {
    zoom.transform(selection2, function() {
      var e = extent.apply(this, arguments), t0 = this.__zoom, p0 = p == null ? centroid(e) : typeof p === "function" ? p.apply(this, arguments) : p, p1 = t0.invert(p0), k1 = typeof k === "function" ? k.apply(this, arguments) : k;
      return constrain(translate(scale(t0, k1), p0, p1), e, translateExtent);
    }, p, event);
  };
  zoom.translateBy = function(selection2, x3, y3, event) {
    zoom.transform(selection2, function() {
      return constrain(this.__zoom.translate(
        typeof x3 === "function" ? x3.apply(this, arguments) : x3,
        typeof y3 === "function" ? y3.apply(this, arguments) : y3
      ), extent.apply(this, arguments), translateExtent);
    }, null, event);
  };
  zoom.translateTo = function(selection2, x3, y3, p, event) {
    zoom.transform(selection2, function() {
      var e = extent.apply(this, arguments), t = this.__zoom, p0 = p == null ? centroid(e) : typeof p === "function" ? p.apply(this, arguments) : p;
      return constrain(identity3.translate(p0[0], p0[1]).scale(t.k).translate(
        typeof x3 === "function" ? -x3.apply(this, arguments) : -x3,
        typeof y3 === "function" ? -y3.apply(this, arguments) : -y3
      ), e, translateExtent);
    }, p, event);
  };
  function scale(transform2, k) {
    k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], k));
    return k === transform2.k ? transform2 : new Transform(k, transform2.x, transform2.y);
  }
  function translate(transform2, p0, p1) {
    var x3 = p0[0] - p1[0] * transform2.k, y3 = p0[1] - p1[1] * transform2.k;
    return x3 === transform2.x && y3 === transform2.y ? transform2 : new Transform(transform2.k, x3, y3);
  }
  function centroid(extent2) {
    return [(+extent2[0][0] + +extent2[1][0]) / 2, (+extent2[0][1] + +extent2[1][1]) / 2];
  }
  function schedule(transition2, transform2, point, event) {
    transition2.on("start.zoom", function() {
      gesture(this, arguments).event(event).start();
    }).on("interrupt.zoom end.zoom", function() {
      gesture(this, arguments).event(event).end();
    }).tween("zoom", function() {
      var that = this, args = arguments, g = gesture(that, args).event(event), e = extent.apply(that, args), p = point == null ? centroid(e) : typeof point === "function" ? point.apply(that, args) : point, w = Math.max(e[1][0] - e[0][0], e[1][1] - e[0][1]), a2 = that.__zoom, b = typeof transform2 === "function" ? transform2.apply(that, args) : transform2, i = interpolate(a2.invert(p).concat(w / a2.k), b.invert(p).concat(w / b.k));
      return function(t) {
        if (t === 1)
          t = b;
        else {
          var l = i(t), k = w / l[2];
          t = new Transform(k, p[0] - l[0] * k, p[1] - l[1] * k);
        }
        g.zoom(null, t);
      };
    });
  }
  function gesture(that, args, clean) {
    return !clean && that.__zooming || new Gesture(that, args);
  }
  function Gesture(that, args) {
    this.that = that;
    this.args = args;
    this.active = 0;
    this.sourceEvent = null;
    this.extent = extent.apply(that, args);
    this.taps = 0;
  }
  Gesture.prototype = {
    event: function(event) {
      if (event)
        this.sourceEvent = event;
      return this;
    },
    start: function() {
      if (++this.active === 1) {
        this.that.__zooming = this;
        this.emit("start");
      }
      return this;
    },
    zoom: function(key, transform2) {
      if (this.mouse && key !== "mouse")
        this.mouse[1] = transform2.invert(this.mouse[0]);
      if (this.touch0 && key !== "touch")
        this.touch0[1] = transform2.invert(this.touch0[0]);
      if (this.touch1 && key !== "touch")
        this.touch1[1] = transform2.invert(this.touch1[0]);
      this.that.__zoom = transform2;
      this.emit("zoom");
      return this;
    },
    end: function() {
      if (--this.active === 0) {
        delete this.that.__zooming;
        this.emit("end");
      }
      return this;
    },
    emit: function(type2) {
      var d = select_default2(this.that).datum();
      listeners.call(
        type2,
        this.that,
        new ZoomEvent(type2, {
          sourceEvent: this.sourceEvent,
          target: zoom,
          type: type2,
          transform: this.that.__zoom,
          dispatch: listeners
        }),
        d
      );
    }
  };
  function wheeled(event, ...args) {
    if (!filter2.apply(this, arguments))
      return;
    var g = gesture(this, args).event(event), t = this.__zoom, k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], t.k * Math.pow(2, wheelDelta.apply(this, arguments)))), p = pointer_default(event);
    if (g.wheel) {
      if (g.mouse[0][0] !== p[0] || g.mouse[0][1] !== p[1]) {
        g.mouse[1] = t.invert(g.mouse[0] = p);
      }
      clearTimeout(g.wheel);
    } else if (t.k === k)
      return;
    else {
      g.mouse = [p, t.invert(p)];
      interrupt_default(this);
      g.start();
    }
    noevent_default3(event);
    g.wheel = setTimeout(wheelidled, wheelDelay);
    g.zoom("mouse", constrain(translate(scale(t, k), g.mouse[0], g.mouse[1]), g.extent, translateExtent));
    function wheelidled() {
      g.wheel = null;
      g.end();
    }
  }
  function mousedowned(event, ...args) {
    if (touchending || !filter2.apply(this, arguments))
      return;
    var currentTarget = event.currentTarget, g = gesture(this, args, true).event(event), v = select_default2(event.view).on("mousemove.zoom", mousemoved, true).on("mouseup.zoom", mouseupped, true), p = pointer_default(event, currentTarget), x0 = event.clientX, y0 = event.clientY;
    nodrag_default(event.view);
    nopropagation3(event);
    g.mouse = [p, this.__zoom.invert(p)];
    interrupt_default(this);
    g.start();
    function mousemoved(event2) {
      noevent_default3(event2);
      if (!g.moved) {
        var dx = event2.clientX - x0, dy = event2.clientY - y0;
        g.moved = dx * dx + dy * dy > clickDistance2;
      }
      g.event(event2).zoom("mouse", constrain(translate(g.that.__zoom, g.mouse[0] = pointer_default(event2, currentTarget), g.mouse[1]), g.extent, translateExtent));
    }
    function mouseupped(event2) {
      v.on("mousemove.zoom mouseup.zoom", null);
      yesdrag(event2.view, g.moved);
      noevent_default3(event2);
      g.event(event2).end();
    }
  }
  function dblclicked(event, ...args) {
    if (!filter2.apply(this, arguments))
      return;
    var t0 = this.__zoom, p0 = pointer_default(event.changedTouches ? event.changedTouches[0] : event, this), p1 = t0.invert(p0), k1 = t0.k * (event.shiftKey ? 0.5 : 2), t1 = constrain(translate(scale(t0, k1), p0, p1), extent.apply(this, args), translateExtent);
    noevent_default3(event);
    if (duration > 0)
      select_default2(this).transition().duration(duration).call(schedule, t1, p0, event);
    else
      select_default2(this).call(zoom.transform, t1, p0, event);
  }
  function touchstarted(event, ...args) {
    if (!filter2.apply(this, arguments))
      return;
    var touches = event.touches, n = touches.length, g = gesture(this, args, event.changedTouches.length === n).event(event), started, i, t, p;
    nopropagation3(event);
    for (i = 0; i < n; ++i) {
      t = touches[i], p = pointer_default(t, this);
      p = [p, this.__zoom.invert(p), t.identifier];
      if (!g.touch0)
        g.touch0 = p, started = true, g.taps = 1 + !!touchstarting;
      else if (!g.touch1 && g.touch0[2] !== p[2])
        g.touch1 = p, g.taps = 0;
    }
    if (touchstarting)
      touchstarting = clearTimeout(touchstarting);
    if (started) {
      if (g.taps < 2)
        touchfirst = p[0], touchstarting = setTimeout(function() {
          touchstarting = null;
        }, touchDelay);
      interrupt_default(this);
      g.start();
    }
  }
  function touchmoved(event, ...args) {
    if (!this.__zooming)
      return;
    var g = gesture(this, args).event(event), touches = event.changedTouches, n = touches.length, i, t, p, l;
    noevent_default3(event);
    for (i = 0; i < n; ++i) {
      t = touches[i], p = pointer_default(t, this);
      if (g.touch0 && g.touch0[2] === t.identifier)
        g.touch0[0] = p;
      else if (g.touch1 && g.touch1[2] === t.identifier)
        g.touch1[0] = p;
    }
    t = g.that.__zoom;
    if (g.touch1) {
      var p0 = g.touch0[0], l0 = g.touch0[1], p1 = g.touch1[0], l1 = g.touch1[1], dp = (dp = p1[0] - p0[0]) * dp + (dp = p1[1] - p0[1]) * dp, dl = (dl = l1[0] - l0[0]) * dl + (dl = l1[1] - l0[1]) * dl;
      t = scale(t, Math.sqrt(dp / dl));
      p = [(p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2];
      l = [(l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2];
    } else if (g.touch0)
      p = g.touch0[0], l = g.touch0[1];
    else
      return;
    g.zoom("touch", constrain(translate(t, p, l), g.extent, translateExtent));
  }
  function touchended(event, ...args) {
    if (!this.__zooming)
      return;
    var g = gesture(this, args).event(event), touches = event.changedTouches, n = touches.length, i, t;
    nopropagation3(event);
    if (touchending)
      clearTimeout(touchending);
    touchending = setTimeout(function() {
      touchending = null;
    }, touchDelay);
    for (i = 0; i < n; ++i) {
      t = touches[i];
      if (g.touch0 && g.touch0[2] === t.identifier)
        delete g.touch0;
      else if (g.touch1 && g.touch1[2] === t.identifier)
        delete g.touch1;
    }
    if (g.touch1 && !g.touch0)
      g.touch0 = g.touch1, delete g.touch1;
    if (g.touch0)
      g.touch0[1] = this.__zoom.invert(g.touch0[0]);
    else {
      g.end();
      if (g.taps === 2) {
        t = pointer_default(t, this);
        if (Math.hypot(touchfirst[0] - t[0], touchfirst[1] - t[1]) < tapDistance) {
          var p = select_default2(this).on("dblclick.zoom");
          if (p)
            p.apply(this, arguments);
        }
      }
    }
  }
  zoom.wheelDelta = function(_) {
    return arguments.length ? (wheelDelta = typeof _ === "function" ? _ : constant_default6(+_), zoom) : wheelDelta;
  };
  zoom.filter = function(_) {
    return arguments.length ? (filter2 = typeof _ === "function" ? _ : constant_default6(!!_), zoom) : filter2;
  };
  zoom.touchable = function(_) {
    return arguments.length ? (touchable = typeof _ === "function" ? _ : constant_default6(!!_), zoom) : touchable;
  };
  zoom.extent = function(_) {
    return arguments.length ? (extent = typeof _ === "function" ? _ : constant_default6([[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]]), zoom) : extent;
  };
  zoom.scaleExtent = function(_) {
    return arguments.length ? (scaleExtent[0] = +_[0], scaleExtent[1] = +_[1], zoom) : [scaleExtent[0], scaleExtent[1]];
  };
  zoom.translateExtent = function(_) {
    return arguments.length ? (translateExtent[0][0] = +_[0][0], translateExtent[1][0] = +_[1][0], translateExtent[0][1] = +_[0][1], translateExtent[1][1] = +_[1][1], zoom) : [[translateExtent[0][0], translateExtent[0][1]], [translateExtent[1][0], translateExtent[1][1]]];
  };
  zoom.constrain = function(_) {
    return arguments.length ? (constrain = _, zoom) : constrain;
  };
  zoom.duration = function(_) {
    return arguments.length ? (duration = +_, zoom) : duration;
  };
  zoom.interpolate = function(_) {
    return arguments.length ? (interpolate = _, zoom) : interpolate;
  };
  zoom.on = function() {
    var value = listeners.on.apply(listeners, arguments);
    return value === listeners ? zoom : value;
  };
  zoom.clickDistance = function(_) {
    return arguments.length ? (clickDistance2 = (_ = +_) * _, zoom) : Math.sqrt(clickDistance2);
  };
  zoom.tapDistance = function(_) {
    return arguments.length ? (tapDistance = +_, zoom) : tapDistance;
  };
  return zoom;
}

// apiClient.ts
var import_wikipedia = __toESM(require_dist());
var isMobile = false;
if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(
  navigator.userAgent
)) {
  isMobile = true;
}
function __minimizeUrl(url) {
  return url.replaceAll(/\n\s*/g, "");
}
var restApiLang = "en";
function RestApiBase() {
  return `https://${restApiLang}.wikipedia.org/api/rest_v1`;
}
var lang = "en";
var getUrlSuggest = (query) => __minimizeUrl(`
  https://${lang}.wikipedia.org/w/api.php
  ?action=opensearch
  &format=json
  &formatversion=2
  &search=${query}
  &namespace=0
  &limit=10
  &origin=*`);
async function suggestCustom(query) {
  const apiEndpoint = getUrlSuggest(query);
  console.log("api endpoint:", apiEndpoint);
  console.log("encoded url:", encodeURI(query));
  const fetchSearch = await (await fetch(apiEndpoint)).json();
  console.log("fetchSearch:", fetchSearch);
  const [, titles, , links2] = fetchSearch;
  const res = [];
  for (let i = 0; i < titles.length; i++) {
    const chunks = links2[i].split("/");
    res.push({ title: titles[i], normalized: chunks[chunks.length - 1] });
  }
  return res;
}
async function page(query) {
  const resPage = await import_wikipedia.default.page(query, {
    autoSuggest: true,
    redirect: false
  });
  return resPage;
}
async function getSummary(query) {
  const endpoint = RestApiBase() + "/page/summary/" + query;
  const summary2 = await (await fetch(endpoint)).json();
  return summary2;
}
async function getResponse(query) {
  const endpoint = RestApiBase() + "/page/related/" + query;
  const related2 = await (await fetch(endpoint)).json();
  return related2.pages;
}
function getItem(item) {
  const {
    description,
    pageid,
    extract_html,
    originalimage,
    thumbnail,
    content_urls
  } = item;
  const page_url = isMobile ? content_urls.mobile.page : content_urls.desktop.page;
  const data = {
    description,
    pageid,
    extract_html,
    originalimage,
    thumbnail,
    page_url
  };
  return { id: item.titles.normalized, data };
}
function setLang(language) {
  restApiLang = language;
}
var apiClient = {
  // suggest,
  page,
  suggestCustom,
  getSummary,
  getResponse,
  getItem,
  // languages,
  // loadLangs,
  setLang
};

// main.ts
var DEFAULT_NETWORK_SETTINGS = {
  relevanceScoreThreshold: 0.5,
  nodeSize: 4,
  linkThickness: 0.3,
  repelForce: 400,
  linkForce: 0.4,
  linkDistance: 70,
  centerForce: 0.1,
  textFadeThreshold: 1.1,
  minLinkThickness: 0.3,
  maxLinkThickness: 0.6,
  maxLabelCharacters: 18,
  linkLabelSize: 7,
  nodeLabelSize: 6,
  connectionType: "block",
  noteFillColor: "#7c8594",
  blockFillColor: "#926ec9"
};
var ScGraphItemView = class extends import_obsidian.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    this.connectionType = "block";
    this.relevanceScoreThreshold = 0.5;
    this.nodeSize = 4;
    this.linkThickness = 0.3;
    this.repelForce = 400;
    this.linkForce = 0.4;
    this.linkDistance = 70;
    this.centerForce = 0.3;
    this.textFadeThreshold = 1.1;
    this.minScore = 1;
    this.maxScore = 0;
    this.minNodeSize = 3;
    this.maxNodeSize = 6;
    this.minLinkThickness = 0.3;
    this.maxLinkThickness = 0.6;
    this.isCtrlPressed = false;
    this.isAltPressed = false;
    this.isDragging = false;
    this.isChangingConnectionType = true;
    this.maxLabelCharacters = 18;
    this.linkLabelSize = 7;
    this.nodeLabelSize = 6;
    this.blockFillColor = "#926ec9";
    this.noteFillColor = "#7c8594";
    this.startX = 0;
    this.startY = 0;
    this.nodes = [];
    this.links = [];
    this.connections = [];
    this.centerHighlighted = false;
    this.dragging = false;
    this.highlightedNodeId = "-1";
    this.currentNoteChanging = false;
    this.isFiltering = false;
    this.settingsMade = false;
    this.currentNoteKey = "";
    this.isHovering = false;
    this.plugin = plugin;
    this.relevanceScoreThreshold = this.plugin.settings.relevanceScoreThreshold;
    this.nodeSize = this.plugin.settings.nodeSize;
    this.linkThickness = this.plugin.settings.linkThickness;
    this.repelForce = this.plugin.settings.repelForce;
    this.linkForce = this.plugin.settings.linkForce;
    this.linkDistance = this.plugin.settings.linkDistance;
    this.centerForce = this.plugin.settings.centerForce;
    this.textFadeThreshold = this.plugin.settings.textFadeThreshold;
    this.minLinkThickness = this.plugin.settings.minLinkThickness;
    this.maxLinkThickness = this.plugin.settings.maxLinkThickness;
    this.maxLabelCharacters = this.plugin.settings.maxLabelCharacters;
    this.linkLabelSize = this.plugin.settings.linkLabelSize;
    this.nodeLabelSize = this.plugin.settings.nodeLabelSize;
    this.connectionType = this.plugin.settings.connectionType;
    this.noteFillColor = this.plugin.settings.noteFillColor;
    this.blockFillColor = this.plugin.settings.blockFillColor;
  }
  getViewType() {
    return "wikipedia-connections-visualizer";
  }
  getDisplayText() {
    return "Wikpedia connections visualizer";
  }
  getIcon() {
    return "git-fork";
  }
  updateNodeAppearance() {
    this.nodeSelection.transition().duration(500).attr("fill", (d) => d.fill).attr("stroke", (d) => d.selected ? "blanchedalmond" : d.highlighted ? "#d46ebe" : "transparent").attr("stroke-width", (d) => d.selected ? 1.5 : d.highlighted ? 0.3 : 0).attr("opacity", (d) => this.getNodeOpacity(d));
  }
  // getNodeFill(d: any) {
  // 	if (d.id === this.centralNode.id) return '#7c8594';
  // 	if (d.highlighted && !d.selected) return '#d46ebe';
  // 	return d.group === 'note' ? '#7c8594' : '#926ec9';
  // }
  getNodeOpacity(d) {
    if (d.id === this.centralNode.id)
      return 1;
    if (d.selected)
      return 1;
    if (d.highlighted)
      return 0.8;
    return this.isHovering ? 0.1 : 1;
  }
  toggleNodeSelection(nodeId) {
    const node = this.nodeSelection.data().find((d) => d.id === nodeId);
    if (node) {
      node.selected = !node.selected;
      if (!node.selected) {
        node.highlighted = false;
      }
      this.updateNodeAppearance();
    }
  }
  clearSelections() {
    this.nodeSelection.each((d) => {
      d.selected = false;
      d.highlighted = false;
    });
    this.updateNodeAppearance();
  }
  highlightNode(node) {
    if (node.id === this.centralNode.id) {
      this.centerHighlighted = true;
    }
    this.highlightedNodeId = node.id;
    this.nodeSelection.each((d) => {
      if (d.id !== this.centralNode.id) {
        d.highlighted = d.id === node.id || this.validatedLinks.some((link) => link.source.id === node.id && link.target.id === d.id || link.target.id === node.id && link.source.id === d.id);
      }
    });
    this.updateNodeAppearance();
    this.updateLinkAppearance(node);
    this.updateLabelAppearance(node);
    this.updateLinkLabelAppearance(node);
  }
  updateHighlight(d, node) {
    if (d.id !== this.centralNode.id) {
      d.highlighted = d.id === node.id || this.validatedLinks.some((link) => link.source.id === node.id && link.target.id === d.id || link.target.id === node.id && link.source.id === d.id);
    }
  }
  updateLinkAppearance(node) {
    this.linkSelection.transition().duration(500).attr("opacity", (d) => d.source.id === node.id || d.target.id === node.id ? 1 : 0.1);
  }
  updateLabelAppearance(node) {
    this.labelSelection.transition().duration(500).attr("opacity", (d) => this.getLabelOpacity(d, node)).text((d) => d.id === this.highlightedNodeId ? this.formatLabel(d.name, false) : this.formatLabel(d.name, true));
  }
  getLabelOpacity(d, node) {
    if (!node) {
      return 1;
    }
    return d.id === node.id || this.validatedLinks.some((link) => link.source.id === node.id && link.target.id === d.id) || d.id == this.centralNode.id ? 1 : 0.1;
  }
  updateLinkLabelAppearance(node) {
    this.linkLabelSelection.transition().duration(500).attr("opacity", (d) => {
      return d.source.id === node.id || d.target.id === node.id ? 1 : 0;
    });
  }
  unhighlightNode(node) {
    this.highlightedNodeId = "-1";
    this.nodeSelection.each((d) => {
      if (d.id !== this.centralNode.id)
        d.highlighted = false;
    });
    this.updateNodeAppearance();
    this.resetLinkAppearance();
    this.resetLabelAppearance();
    this.resetLinkLabelAppearance();
    this.updateLabelAppearance(null);
  }
  resetLinkAppearance() {
    this.linkSelection.transition().duration(500).attr("opacity", 1);
  }
  resetLabelAppearance() {
    this.labelSelection.transition().duration(500).attr("opacity", 1).text((d) => this.formatLabel(d.name, true));
  }
  resetLinkLabelAppearance() {
    this.linkLabelSelection.transition().duration(500).attr("opacity", 0);
  }
  formatLabel(path, truncate = true) {
    let label = this.extractLabel(path);
    return truncate ? this.truncateLabel(label) : label;
  }
  extractLabel(path) {
    let label = path;
    if (path && path.includes("#")) {
      const parts = path.split("#");
      let lastPart = parts[parts.length - 1];
      if (lastPart === "" || /^\{\d+\}$/.test(lastPart)) {
        lastPart = parts[parts.length - 2] + "#" + lastPart;
      }
      if (lastPart.includes("/")) {
        lastPart = lastPart.split("/").pop() || lastPart;
      }
      label = lastPart;
    } else if (path) {
      label = path.split("/").pop() || label;
    } else {
      return "";
    }
    label = label.replace(/[\[\]]/g, "").replace(/\.[^/#]+#(?=\{\d+\}$)/, "").replace(/\.[^/.]+$/, "");
    return label;
  }
  truncateLabel(label) {
    return label.length > this.maxLabelCharacters ? label.slice(0, this.maxLabelCharacters) + "..." : label;
  }
  get env() {
    var _a, _b;
    return (_b = (_a = window.SmartSearch) == null ? void 0 : _a.main) == null ? void 0 : _b.env;
  }
  get smartNotes() {
    var _a, _b, _c, _d;
    return (_d = (_c = (_b = (_a = window.SmartSearch) == null ? void 0 : _a.main) == null ? void 0 : _b.env) == null ? void 0 : _c.smart_sources) == null ? void 0 : _d.items;
  }
  async onOpen() {
    this.contentEl.createEl("h2", { text: "Wikipedia Visualizer" });
    this.contentEl.createEl("p", { text: "Waiting for Wikipedia Connections to load..." });
    console.log(this.app);
    console.log("aaa");
    setTimeout(async () => {
      await this.render();
    }, 500);
  }
  async render() {
    var _a;
    while (!((_a = this.env) == null ? void 0 : _a.entities_loaded)) {
      await new Promise((resolve) => setTimeout(resolve, 2e3));
    }
    this.contentEl.empty();
    this.initializeVariables();
    if (Object.keys(this.smartNotes).length === 0) {
      return;
    }
    this.setupSettingsMenu();
    this.setupSVG();
    this.addEventListeners();
    this.watchForNoteChanges();
    const currentNodeChange = this.app.workspace.getActiveFile();
    if (currentNodeChange && !this.currentNoteChanging) {
      this.currentNoteKey = currentNodeChange.path;
      this.currentNoteChanging = true;
      await this.render();
      return;
    }
    await this.updateVisualization();
  }
  async waitForSmartNotes() {
    var _a;
    const maxRetries = 10;
    const delay = 2e3;
    for (let attempt = 0; attempt < maxRetries; attempt++) {
      console.log(this.env);
      if ((_a = this.env) == null ? void 0 : _a.entities_loaded) {
        return;
      }
      await new Promise((resolve) => setTimeout(resolve, delay));
    }
    console.error("Wikipedia connections did not load in time");
    this.contentEl.createEl("p", { text: "Failed to load Wikipedia Connections." });
  }
  initializeVariables() {
    this.minScore = 1;
    this.maxScore = 0;
  }
  setupSVG() {
    const width = this.contentEl.clientWidth;
    const height = this.contentEl.clientHeight;
    const svg = select_default2(this.contentEl).append("svg").attr("width", "100%").attr("height", "98%").attr("viewBox", `0 0 ${width} ${height}`).attr("preserveAspectRatio", "xMidYMid meet").call(zoom_default2().scaleExtent([0.1, 10]).on("zoom", (event) => {
      svgGroup.attr("transform", event.transform);
      this.updateLabelOpacity(event.transform.k);
    }));
    const svgGroup = svg.append("g");
    svgGroup.append("g").attr("class", "smart-connections-visualizer-links");
    svgGroup.append("g").attr("class", "smart-connections-visualizer-node-labels");
    svgGroup.append("g").attr("class", "smart-connections-visualizer-link-labels");
    svgGroup.append("g").attr("class", "smart-connections-visualizer-nodes");
    this.svgGroup = svgGroup;
    this.svg = svg;
  }
  getSVGDimensions() {
    const width = this.contentEl.clientWidth || this.contentEl.getBoundingClientRect().width;
    const height = this.contentEl.clientHeight || this.contentEl.getBoundingClientRect().height;
    return { width, height };
  }
  createSVG(width, height) {
    return select_default2(this.contentEl).append("svg").attr("width", "100%").attr("height", "98%").attr("viewBox", `0 0 ${width} ${height}`).attr("preserveAspectRatio", "xMidYMid meet").style("background", "#2d3039").call(zoom_default2().scaleExtent([0.1, 10]).on("zoom", this.onZoom.bind(this)));
  }
  createSVGGroup(svg) {
    return svg.append("g");
  }
  onZoom(event) {
    select_default2("g").attr("transform", event.transform);
    this.updateLabelOpacity(event.transform.k);
  }
  initializeSimulation(width, height) {
    this.simulation = simulation_default().force("center", center_default(width / 2, height / 2).strength(this.centerForce)).force("charge", manyBody_default().strength(-this.repelForce)).force("link", link_default().id((d) => d.id).distance((d) => this.linkDistanceScale(d.score)).strength(this.linkForce)).force("collide", collide_default().radius(this.nodeSize + 3).strength(0.7)).on("tick", this.simulationTickHandler.bind(this));
    this.simulation.force("labels", this.avoidLabelCollisions.bind(this));
  }
  renderLegend() {
    if (this.validatedLinks.length === 0) {
      return;
    }
    const types = ["block", "note"];
    const counts = types.map((type2) => this.nodes.filter((node) => node.group === type2 && node.id !== this.centralNode.id).length);
    let colors = { "block": DEFAULT_NETWORK_SETTINGS.blockFillColor, "note": DEFAULT_NETWORK_SETTINGS.noteFillColor };
    for (let node of this.nodes) {
      if (colors[node.group]) {
        colors[node.group] = node.fill;
      }
    }
    const tableContainer = this.contentEl.createEl("div", { cls: "smart-connections-visualizer-legend-container" });
    const header = tableContainer.createEl("div", { cls: "smart-connections-visualizer-legend-header" });
    ["Connection Type", "Count", "Color"].forEach((headerTitle) => {
      switch (headerTitle) {
        case "Connection Type":
          header.createEl("div", { text: headerTitle, cls: "smart-connections-visualizer-variable-col" });
          break;
        case "Count":
          header.createEl("div", { text: headerTitle, cls: "smart-connections-visualizer-count-col" });
          break;
        case "Color":
          header.createEl("div", { text: headerTitle, cls: "smart-connections-visualizer-color-col" });
          break;
        default:
          header.createEl("div", { text: headerTitle, cls: "smart-connections-visualizer-variable-col" });
          break;
      }
    });
    types.forEach((type2, index2) => {
      if (counts[index2] > 0) {
        const row = tableContainer.createEl("div", { cls: "smart-connections-visualizer-legend-row" });
        row.createEl("div", { text: this.capitalizeFirstLetter(type2), cls: "smart-connections-visualizer-variable-col" });
        row.createEl("div", { text: `${counts[index2]}`, cls: "smart-connections-visualizer-count-col" });
        const colorCell = row.createEl("div", { cls: "smart-connections-visualizer-color-col" });
        const colorPicker = colorCell.createEl("input", { type: "color", value: colors[type2], cls: "smart-connections-visualizer-legend-color-picker" });
        colorPicker.addEventListener("change", (e) => this.updateNodeColors(type2, e.target.value));
      }
    });
  }
  capitalizeFirstLetter(str) {
    if (!str)
      return str;
    console.log("string: ", str);
    return str.charAt(0).toUpperCase() + str.slice(1);
  }
  updateNodeColors(type2, color2) {
    if (type2 === "note" && color2 !== this.noteFillColor) {
      this.noteFillColor = color2;
      this.plugin.settings.noteFillColor = color2;
      this.plugin.saveSettings();
    }
    if (type2 === "block" && color2 !== this.blockFillColor) {
      this.blockFillColor = color2;
      this.plugin.settings.noteFillColor = color2;
      this.plugin.saveSettings();
    }
    this.nodes.forEach((node) => {
      if (node.group === type2) {
        node.fill = color2;
      }
    });
    this.updateNodeFill();
  }
  updateNodeFill() {
    this.nodeSelection.attr("fill", (d) => d.fill);
  }
  // Ensure node labels dont collide with any elements
  avoidLabelCollisions() {
    const padding = 5;
    return (alpha) => {
      const quadtree2 = quadtree().x((d) => d.x).y((d) => d.y).addAll(this.labelSelection.data());
      this.labelSelection.each((d) => {
        const radius = d.radius + padding;
        const nx1 = d.x - radius, nx2 = d.x + radius, ny1 = d.y - radius, ny2 = d.y + radius;
        quadtree2.visit((quad, x1, y1, x22, y22) => {
          if ("data" in quad && quad.data && quad.data !== d) {
            let x3 = d.x - quad.data.x, y3 = d.y - quad.data.y, l = Math.sqrt(x3 * x3 + y3 * y3), r = radius + quad.data.radius;
            if (l < r) {
              l = (l - r) / l * alpha;
              d.x -= x3 *= l;
              d.y -= y3 *= l;
              quad.data.x += x3;
              quad.data.y += y3;
            }
          }
          return x1 > nx2 || x22 < nx1 || y1 > ny2 || y22 < ny1;
        });
      });
    };
  }
  addEventListeners() {
    this.setupSVGEventListeners();
    this.setupKeyboardEventListeners();
  }
  setupSVGEventListeners() {
    select_default2("svg").on("mousedown", this.onMouseDown.bind(this)).on("mousemove", this.onMouseMove.bind(this)).on("mouseup", this.onMouseUp.bind(this)).on("click", this.onSVGClick.bind(this));
  }
  // TODO: Add back in when ready for multiselect
  onMouseDown(event) {
  }
  onMouseMove(event) {
  }
  onMouseUp() {
  }
  onSVGClick(event) {
    if (!event.defaultPrevented && !event.ctrlKey)
      this.clearSelections();
  }
  setupKeyboardEventListeners() {
    document.addEventListener("keydown", this.onKeyDown.bind(this));
    document.addEventListener("keyup", this.onKeyUp.bind(this));
  }
  // TODO:: Add back when ready for multiselect
  onKeyDown(event) {
  }
  onKeyUp(event) {
  }
  setupSettingsMenu() {
    const existingIcon = this.contentEl.querySelector(".smart-connections-visualizer-settings-icon");
    if (existingIcon) {
      existingIcon.remove();
    }
    const existingDropdownMenu = this.contentEl.querySelector(".sc-visualizer-dropdown-menu");
    if (existingDropdownMenu) {
      existingDropdownMenu.remove();
    }
    this.createSettingsIcon();
    this.createDropdownMenu();
    this.setupAccordionHeaders();
    this.setupSettingsEventListeners();
  }
  createDropdownMenu() {
    const dropdownMenu = this.contentEl.createEl("div", { cls: "sc-visualizer-dropdown-menu" });
    this.buildDropdownMenuContent(dropdownMenu);
  }
  buildDropdownMenuContent(dropdownMenu) {
    const menuHeader = dropdownMenu.createEl("div", { cls: "smart-connections-visualizer-menu-header" });
    const refreshIcon = this.createRefreshIcon();
    refreshIcon.classList.add("smart-connections-visualizer-icon");
    refreshIcon.setAttribute("id", "smart-connections-visualizer-refresh-icon");
    menuHeader.appendChild(refreshIcon);
    const xIcon = this.createNewXIcon();
    xIcon.classList.add("smart-connections-visualizer-icon");
    xIcon.setAttribute("id", "smart-connections-visualizer-close-icon");
    menuHeader.appendChild(xIcon);
    this.addAccordionItem(dropdownMenu, "Filters", this.getFiltersContent.bind(this));
    this.addAccordionItem(dropdownMenu, "Display", this.getDisplayContent.bind(this));
    this.addAccordionItem(dropdownMenu, "Forces", this.getForcesContent.bind(this));
  }
  addAccordionItem(parent, title, buildContent) {
    const accordionItem = parent.createEl("div", { cls: "smart-connections-visualizer-accordion-item" });
    const header = accordionItem.createEl("div", { cls: "smart-connections-visualizer-accordion-header" });
    const arrowIcon = header.createEl("span", { cls: "smart-connections-visualizer-arrow-icon" });
    arrowIcon.appendChild(this.createRightArrow());
    header.createEl("span", { text: title });
    const accordionContent = accordionItem.createEl("div", { cls: "smart-connections-visualizer-accordion-content" });
    buildContent(accordionContent);
  }
  getFiltersContent(parent) {
    const sliderContainer1 = parent.createEl("div", { cls: "smart-connections-visualizer-slider-container" });
    sliderContainer1.createEl("label", {
      text: `Min relevance: ${(this.relevanceScoreThreshold * 100).toFixed(0)}%`,
      attr: { id: "smart-connections-visualizer-scoreThresholdLabel", for: "smart-connections-visualizer-scoreThreshold" }
    });
    const relevanceSlider = sliderContainer1.createEl("input", {
      attr: {
        type: "range",
        id: "smart-connections-visualizer-scoreThreshold",
        class: "smart-connections-visualizer-slider",
        name: "scoreThreshold",
        min: "0",
        max: "0.99",
        step: "0.01"
      }
    });
    relevanceSlider.value = this.relevanceScoreThreshold.toString();
    parent.createEl("label", { text: "Connection type:", cls: "smart-connections-visualizer-settings-item-content-label" });
    const radioContainer = parent.createEl("div", { cls: "smart-connections-visualizer-radio-container" });
    const radioBlockLabel = radioContainer.createEl("label");
    const blockRadio = radioBlockLabel.createEl("input", {
      attr: {
        type: "radio",
        name: "connectionType",
        value: "block"
      }
    });
    blockRadio.checked = this.connectionType === "block";
    radioBlockLabel.appendText(" Block");
    const radioNoteLabel = radioContainer.createEl("label");
    const noteRadio = radioNoteLabel.createEl("input", {
      attr: {
        type: "radio",
        name: "connectionType",
        value: "note"
      }
    });
    noteRadio.checked = this.connectionType === "note";
    radioNoteLabel.appendText(" Note");
    const radioBothLabel = radioContainer.createEl("label");
    const bothRadio = radioBothLabel.createEl("input", {
      attr: {
        type: "radio",
        name: "connectionType",
        value: "both"
      }
    });
    bothRadio.checked = this.connectionType === "both";
    radioBothLabel.appendText(" Both");
  }
  getDisplayContent(parent) {
    const displaySettings = [
      { id: "smart-connections-visualizer-nodeSize", label: "Node size", value: this.nodeSize, min: 1, max: 15, step: 0.01 },
      { id: "smart-connections-visualizer-maxLabelCharacters", label: "Max label characters", value: this.maxLabelCharacters, min: 1, max: 50, step: 1 },
      { id: "smart-connections-visualizer-linkLabelSize", label: "Link label size", value: this.linkLabelSize, min: 1, max: 15, step: 0.01 },
      { id: "smart-connections-visualizer-nodeLabelSize", label: "Node label size", value: this.nodeLabelSize, min: 1, max: 26, step: 1 },
      { id: "smart-connections-visualizer-minLinkThickness", label: "Min link thickness", value: this.minLinkThickness, min: 0.1, max: 10, step: 0.01 },
      { id: "smart-connections-visualizer-maxLinkThickness", label: "Max link thickness", value: this.maxLinkThickness, min: 0.1, max: 10, step: 0.01 },
      { id: "smart-connections-visualizer-fadeThreshold", label: "Text fade threshold", value: this.textFadeThreshold, min: 0.1, max: 10, step: 0.01 }
    ];
    displaySettings.forEach((setting) => {
      const sliderContainer = parent.createEl("div", { cls: "smart-connections-visualizer-slider-container" });
      sliderContainer.createEl("label", { text: `${setting.label}: ${setting.value}`, attr: { id: `${setting.id}Label`, for: setting.id } });
      sliderContainer.createEl("input", { attr: { type: "range", id: setting.id, class: "smart-connections-visualizer-slider", name: setting.id, min: `${setting.min}`, max: `${setting.max}`, value: `${setting.value}`, step: `${setting.step}` } });
    });
  }
  getForcesContent(parent) {
    const forcesSettings = [
      { id: "smart-connections-visualizer-repelForce", label: "Repel force", value: this.repelForce, min: 0, max: 1500, step: 1 },
      { id: "smart-connections-visualizer-linkForce", label: "Link force", value: this.linkForce, min: 0, max: 1, step: 0.01 },
      { id: "smart-connections-visualizer-linkDistance", label: "Link distance", value: this.linkDistance, min: 10, max: 200, step: 1 }
    ];
    forcesSettings.forEach((setting) => {
      const sliderContainer = parent.createEl("div", { cls: "smart-connections-visualizer-slider-container" });
      sliderContainer.createEl("label", { text: `${setting.label}: ${setting.value}`, attr: { id: `${setting.id}Label`, for: setting.id } });
      sliderContainer.createEl("input", { attr: { type: "range", id: setting.id, class: "smart-connections-visualizer-slider", name: setting.id, min: `${setting.min}`, max: `${setting.max}`, value: `${setting.value}`, step: `${setting.step}` } });
    });
  }
  toggleDropdownMenu() {
    const dropdownMenu = document.querySelector(".sc-visualizer-dropdown-menu");
    if (dropdownMenu) {
      dropdownMenu.classList.toggle("visible");
    } else {
      console.error("Dropdown menu element not found");
    }
  }
  setupAccordionHeaders() {
    const accordionHeaders = document.querySelectorAll(".smart-connections-visualizer-accordion-header");
    accordionHeaders.forEach((header) => header.addEventListener("click", this.toggleAccordionContent.bind(this)));
  }
  toggleAccordionContent(event) {
    const content2 = event.currentTarget.nextElementSibling;
    const arrowIcon = event.currentTarget.querySelector(".smart-connections-visualizer-arrow-icon");
    if (content2 && arrowIcon) {
      content2.classList.toggle("show");
      arrowIcon.innerHTML = "";
      arrowIcon.appendChild(content2.classList.contains("show") ? this.createDropdownArrow() : this.createRightArrow());
    }
  }
  createDropdownArrow() {
    const svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
    svg.setAttribute("class", "smart-connections-visualizer-dropdown-indicator");
    svg.setAttribute("viewBox", "0 0 16 16");
    svg.setAttribute("fill", "currentColor");
    const path = document.createElementNS("http://www.w3.org/2000/svg", "path");
    path.setAttribute("fill-rule", "evenodd");
    path.setAttribute("d", "M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z");
    svg.appendChild(path);
    return svg;
  }
  createRightArrow() {
    const svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
    svg.setAttribute("class", "smart-connections-visualizer-dropdown-indicator");
    svg.setAttribute("viewBox", "0 0 16 16");
    svg.setAttribute("fill", "currentColor");
    const path = document.createElementNS("http://www.w3.org/2000/svg", "path");
    path.setAttribute("fill-rule", "evenodd");
    path.setAttribute("d", "M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708z");
    svg.appendChild(path);
    return svg;
  }
  createSettingsIcon() {
    const settingsIcon = this.contentEl.createEl("div", {
      cls: ["smart-connections-visualizer-settings-icon"],
      attr: { "aria-label": "Open graph settings" }
    });
    const svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
    svg.setAttribute("width", "24");
    svg.setAttribute("height", "24");
    svg.setAttribute("viewBox", "0 0 24 24");
    svg.setAttribute("fill", "none");
    svg.setAttribute("stroke", "currentColor");
    svg.setAttribute("stroke-width", "2");
    svg.setAttribute("stroke-linecap", "round");
    svg.setAttribute("stroke-linejoin", "round");
    svg.setAttribute("class", "smart-connections-visualizer-svg-icon smart-connections-visualizer-lucide-settings");
    const path = document.createElementNS("http://www.w3.org/2000/svg", "path");
    path.setAttribute("d", "M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 1 1.72v.51a2 2 0 0 1-1 1.74l-.15.09a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.39a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1-1-1.74v-.5a2 2 0 0 1 1-1.74l.15-.09a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z");
    svg.appendChild(path);
    const circle = document.createElementNS("http://www.w3.org/2000/svg", "circle");
    circle.setAttribute("cx", "12");
    circle.setAttribute("cy", "12");
    circle.setAttribute("r", "3");
    svg.appendChild(circle);
    settingsIcon.appendChild(svg);
    settingsIcon.addEventListener("click", this.toggleDropdownMenu);
  }
  createRefreshIcon() {
    const refreshIcon = this.contentEl.createEl("div", { cls: "smart-connections-visualizer-refresh-icon" });
    const svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
    svg.setAttribute("width", "24");
    svg.setAttribute("height", "24");
    svg.setAttribute("viewBox", "0 0 24 24");
    svg.setAttribute("fill", "none");
    svg.setAttribute("stroke", "currentColor");
    svg.setAttribute("stroke-width", "2");
    svg.setAttribute("stroke-linecap", "round");
    svg.setAttribute("stroke-linejoin", "round");
    svg.setAttribute("class", "smart-connections-visualizer-svg-icon smart-connections-visualizer-lucide-rotate-ccw");
    const path1 = document.createElementNS("http://www.w3.org/2000/svg", "path");
    path1.setAttribute("d", "M3 12a9 9 0 1 0 9-9 9.75 9.75 0 0 0-6.74 2.74L3 8");
    svg.appendChild(path1);
    const path2 = document.createElementNS("http://www.w3.org/2000/svg", "path");
    path2.setAttribute("d", "M3 3v5h5");
    svg.appendChild(path2);
    refreshIcon.appendChild(svg);
    return refreshIcon;
  }
  createNewXIcon() {
    const xIcon = this.contentEl.createEl("div", { cls: "smart-connections-visualizer-x-icon" });
    const svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
    svg.setAttribute("width", "24");
    svg.setAttribute("height", "24");
    svg.setAttribute("viewBox", "0 0 24 24");
    svg.setAttribute("fill", "none");
    svg.setAttribute("stroke", "currentColor");
    svg.setAttribute("stroke-width", "2");
    svg.setAttribute("stroke-linecap", "round");
    svg.setAttribute("stroke-linejoin", "round");
    svg.setAttribute("class", "smart-connections-visualizer-svg-icon smart-connections-visualizer-lucide-x");
    const path1 = document.createElementNS("http://www.w3.org/2000/svg", "path");
    path1.setAttribute("d", "M18 6 6 18");
    svg.appendChild(path1);
    const path2 = document.createElementNS("http://www.w3.org/2000/svg", "path");
    path2.setAttribute("d", "m6 6 12 12");
    svg.appendChild(path2);
    xIcon.appendChild(svg);
    return xIcon;
  }
  setupSettingsEventListeners() {
    this.setupScoreThresholdSlider();
    this.setupNodeSizeSlider();
    this.setupLineThicknessSlider();
    this.setupCenterForceSlider();
    this.setupRepelForceSlider();
    this.setupLinkForceSlider();
    this.setupLinkDistanceSlider();
    this.setupFadeThresholdSlider();
    this.setupMinLinkThicknessSlider();
    this.setupMaxLinkThicknessSlider();
    this.setupConnectionTypeRadios();
    this.setupMaxLabelCharactersSlider();
    this.setupLinkLabelSizeSlider();
    this.setupNodeLabelSizeSlider();
    this.setupCloseIcon();
    this.setupRefreshIcon();
  }
  async setupScoreThresholdSlider() {
    const scoreThresholdSlider = document.getElementById("smart-connections-visualizer-scoreThreshold");
    if (scoreThresholdSlider) {
      scoreThresholdSlider.addEventListener("input", (event) => this.updateScoreThreshold(event));
      const debouncedUpdate = (0, import_obsidian.debounce)(async (event) => {
        await this.updateVisualization(parseFloat(event.target.value));
      }, 500, true);
      scoreThresholdSlider.addEventListener("input", debouncedUpdate);
    }
  }
  updateScoreThreshold(event) {
    const newScoreThreshold = parseFloat(event.target.value);
    const label = document.getElementById("smart-connections-visualizer-scoreThresholdLabel");
    this.plugin.settings.relevanceScoreThreshold = newScoreThreshold;
    this.plugin.saveSettings();
    if (label)
      label.textContent = `Min relevance: ${(newScoreThreshold * 100).toFixed(0)}%`;
  }
  setupNodeSizeSlider() {
    const nodeSizeSlider = document.getElementById("smart-connections-visualizer-nodeSize");
    if (nodeSizeSlider) {
      nodeSizeSlider.addEventListener("input", (event) => this.updateNodeSize(event));
    }
  }
  updateNodeSize(event) {
    const newNodeSize = parseFloat(event.target.value);
    const label = document.getElementById("smart-connections-visualizer-nodeSizeLabel");
    if (label)
      label.textContent = `Node size: ${newNodeSize}`;
    this.plugin.settings.nodeSize = newNodeSize;
    this.plugin.saveSettings();
    this.nodeSize = newNodeSize;
    this.updateNodeSizes();
  }
  setupLineThicknessSlider() {
    const lineThicknessSlider = document.getElementById("smart-connections-visualizer-lineThickness");
    if (lineThicknessSlider) {
      lineThicknessSlider.addEventListener("input", (event) => this.updateLineThickness(event));
    }
  }
  updateLineThickness(event) {
    const newLineThickness = parseFloat(event.target.value);
    const label = document.getElementById("lineThicknessLabel");
    if (label)
      label.textContent = `Line thickness: ${newLineThickness}`;
    this.plugin.settings.linkThickness = newLineThickness;
    this.plugin.saveSettings();
    this.linkThickness = newLineThickness;
    this.updateLinkThickness();
  }
  setupCenterForceSlider() {
    const centerForceSlider = document.getElementById("smart-connections-visualizer-centerForce");
    if (centerForceSlider) {
      centerForceSlider.addEventListener("input", (event) => this.updateCenterForce(event));
    }
  }
  updateCenterForce(event) {
    const newCenterForce = parseFloat(event.target.value);
    const label = document.getElementById("centerForceLabel");
    if (label)
      label.textContent = `Center force: ${newCenterForce}`;
    this.plugin.settings.centerForce = newCenterForce;
    this.plugin.saveSettings();
    this.centerForce = newCenterForce;
    this.updateSimulationForces();
  }
  setupRepelForceSlider() {
    const repelForceSlider = document.getElementById("smart-connections-visualizer-repelForce");
    if (repelForceSlider) {
      repelForceSlider.addEventListener("input", (event) => this.updateRepelForce(event));
    }
  }
  updateRepelForce(event) {
    const newRepelForce = parseFloat(event.target.value);
    const label = document.getElementById("smart-connections-visualizer-repelForceLabel");
    if (label)
      label.textContent = `Repel force: ${newRepelForce}`;
    this.repelForce = newRepelForce;
    this.plugin.settings.repelForce = newRepelForce;
    this.plugin.saveSettings();
    this.updateSimulationForces();
  }
  setupLinkForceSlider() {
    const linkForceSlider = document.getElementById("smart-connections-visualizer-linkForce");
    if (linkForceSlider) {
      linkForceSlider.addEventListener("input", (event) => this.updateLinkForce(event));
    }
  }
  updateLinkForce(event) {
    const newLinkForce = parseFloat(event.target.value);
    const label = document.getElementById("smart-connections-visualizer-linkForceLabel");
    if (label)
      label.textContent = `Link force: ${newLinkForce}`;
    this.linkForce = newLinkForce;
    this.plugin.settings.linkForce = newLinkForce;
    this.plugin.saveSettings();
    this.updateSimulationForces();
  }
  setupLinkDistanceSlider() {
    const linkDistanceSlider = document.getElementById("smart-connections-visualizer-linkDistance");
    if (linkDistanceSlider) {
      linkDistanceSlider.addEventListener("input", (event) => this.updateLinkDistance(event));
    }
  }
  updateLinkDistance(event) {
    const newLinkDistance = parseFloat(event.target.value);
    const label = document.getElementById("smart-connections-visualizer-linkDistanceLabel");
    if (label)
      label.textContent = `Link distance: ${newLinkDistance}`;
    this.linkDistance = newLinkDistance;
    this.plugin.settings.linkDistance = newLinkDistance;
    this.plugin.saveSettings();
    this.updateSimulationForces();
  }
  setupFadeThresholdSlider() {
    const fadeThresholdSlider = document.getElementById("smart-connections-visualizer-fadeThreshold");
    if (fadeThresholdSlider) {
      fadeThresholdSlider.addEventListener("input", (event) => {
        this.updateFadeThreshold(event);
        this.updateLabelOpacity(transform(select_default2("svg").node()).k);
      });
    }
  }
  updateFadeThreshold(event) {
    const newFadeThreshold = parseFloat(event.target.value);
    const label = document.getElementById("smart-connections-visualizer-fadeThresholdLabel");
    if (label)
      label.textContent = `Text fade threshold: ${newFadeThreshold}`;
    this.textFadeThreshold = newFadeThreshold;
    this.plugin.settings.textFadeThreshold = newFadeThreshold;
    this.plugin.saveSettings();
  }
  setupMinLinkThicknessSlider() {
    const minLinkThicknessSlider = document.getElementById("smart-connections-visualizer-minLinkThickness");
    if (minLinkThicknessSlider) {
      minLinkThicknessSlider.addEventListener("input", (event) => this.updateMinLinkThickness(event));
    }
  }
  updateMinLinkThickness(event) {
    const newMinLinkThickness = parseFloat(event.target.value);
    const label = document.getElementById("smart-connections-visualizer-minLinkThicknessLabel");
    if (label)
      label.textContent = `Min link thickness: ${newMinLinkThickness}`;
    this.minLinkThickness = newMinLinkThickness;
    this.plugin.settings.minLinkThickness = newMinLinkThickness;
    this.plugin.saveSettings();
    this.updateLinkThickness();
  }
  setupMaxLinkThicknessSlider() {
    const maxLinkThicknessSlider = document.getElementById("smart-connections-visualizer-maxLinkThickness");
    if (maxLinkThicknessSlider) {
      maxLinkThicknessSlider.addEventListener("input", (event) => this.updateMaxLinkThickness(event));
    }
  }
  updateMaxLinkThickness(event) {
    const newMaxLinkThickness = parseFloat(event.target.value);
    const label = document.getElementById("smart-connections-visualizer-maxLinkThicknessLabel");
    if (label)
      label.textContent = `Max link thickness: ${newMaxLinkThickness}`;
    this.maxLinkThickness = newMaxLinkThickness;
    this.plugin.settings.maxLinkThickness = newMaxLinkThickness;
    this.plugin.saveSettings();
    this.updateLinkThickness();
  }
  setupConnectionTypeRadios() {
    const connectionTypeRadios = document.querySelectorAll('input[name="connectionType"]');
    connectionTypeRadios.forEach((radio) => radio.addEventListener("change", (event) => this.updateConnectionType(event)));
  }
  async updateConnectionType(event) {
    this.connectionType = event.target.value;
    this.isChangingConnectionType = true;
    this.plugin.settings.connectionType = this.connectionType;
    this.plugin.saveSettings();
    await this.updateVisualization();
  }
  setupMaxLabelCharactersSlider() {
    const maxLabelCharactersSlider = document.getElementById("smart-connections-visualizer-maxLabelCharacters");
    if (maxLabelCharactersSlider) {
      maxLabelCharactersSlider.addEventListener("input", (event) => this.updateMaxLabelCharacters(event));
    }
  }
  updateMaxLabelCharacters(event) {
    const newMaxLabelCharacters = parseInt(event.target.value, 10);
    const label = document.getElementById("smart-connections-visualizer-maxLabelCharactersLabel");
    if (label)
      label.textContent = `Max Label Characters: ${newMaxLabelCharacters}`;
    this.maxLabelCharacters = newMaxLabelCharacters;
    this.updateNodeLabels();
  }
  setupLinkLabelSizeSlider() {
    const linkLabelSizeSlider = document.getElementById("smart-connections-visualizer-linkLabelSize");
    if (linkLabelSizeSlider) {
      linkLabelSizeSlider.addEventListener("input", (event) => this.updateLinkLabelSize(event));
    }
  }
  updateLinkLabelSize(event) {
    const newLinkLabelSize = parseFloat(event.target.value);
    const label = document.getElementById("smart-connections-visualizer-linkLabelSizeLabel");
    if (label)
      label.textContent = `Link Label Size: ${newLinkLabelSize}`;
    this.linkLabelSize = newLinkLabelSize;
    this.updateLinkLabelSizes();
  }
  setupNodeLabelSizeSlider() {
    const nodeLabelSizeSlider = document.getElementById("smart-connections-visualizer-nodeLabelSize");
    if (nodeLabelSizeSlider) {
      nodeLabelSizeSlider.addEventListener("input", (event) => this.updateNodeLabelSize(event));
    }
  }
  updateNodeLabelSize(event) {
    console.log("flounddd");
    const newNodeLabelSize = parseFloat(event.target.value);
    const label = document.getElementById("smart-connections-visualizer-nodeLabelSizeLabel");
    if (label)
      label.textContent = `Node Label Size: ${newNodeLabelSize}`;
    this.nodeLabelSize = newNodeLabelSize;
    this.updateNodeLabelSizes();
  }
  // Updated setupCloseIcon method
  setupCloseIcon() {
    const closeIcon = document.getElementById("smart-connections-visualizer-close-icon");
    if (closeIcon)
      closeIcon.addEventListener("click", () => this.toggleDropdownMenu());
  }
  closeDropdownMenu() {
    const dropdownMenu = document.querySelector(".sc-visualizer-dropdown-menu");
    if (dropdownMenu)
      dropdownMenu.classList.remove("open");
  }
  setupRefreshIcon() {
    const refreshIcon = document.getElementById("smart-connections-visualizer-refresh-icon");
    if (refreshIcon)
      refreshIcon.addEventListener("click", () => this.resetToDefault());
  }
  async resetToDefault() {
    this.relevanceScoreThreshold = DEFAULT_NETWORK_SETTINGS.relevanceScoreThreshold;
    this.nodeSize = DEFAULT_NETWORK_SETTINGS.nodeSize;
    this.linkThickness = DEFAULT_NETWORK_SETTINGS.lineThickness;
    this.repelForce = DEFAULT_NETWORK_SETTINGS.repelForce;
    this.linkForce = DEFAULT_NETWORK_SETTINGS.linkForce;
    this.linkDistance = DEFAULT_NETWORK_SETTINGS.linkDistance;
    this.centerForce = DEFAULT_NETWORK_SETTINGS.centerForce;
    this.textFadeThreshold = DEFAULT_NETWORK_SETTINGS.textFadeThreshold;
    this.minLinkThickness = DEFAULT_NETWORK_SETTINGS.minLinkThickness;
    this.maxLinkThickness = DEFAULT_NETWORK_SETTINGS.maxLinkThickness;
    this.maxLabelCharacters = DEFAULT_NETWORK_SETTINGS.maxLabelCharacters;
    this.linkLabelSize = DEFAULT_NETWORK_SETTINGS.linkLabelSize;
    this.nodeLabelSize = DEFAULT_NETWORK_SETTINGS.nodeLabelSize;
    this.connectionType = DEFAULT_NETWORK_SETTINGS.connectionType;
    this.noteFillColor = DEFAULT_NETWORK_SETTINGS.noteFillColor;
    this.blockFillColor = DEFAULT_NETWORK_SETTINGS.blockFillColor;
    this.plugin.settings.relevanceScoreThreshold = DEFAULT_NETWORK_SETTINGS.relevanceScoreThreshold;
    this.plugin.settings.nodeSize = DEFAULT_NETWORK_SETTINGS.nodeSize;
    this.plugin.settings.linkThickness = DEFAULT_NETWORK_SETTINGS.lineThickness;
    this.plugin.settings.repelForce = DEFAULT_NETWORK_SETTINGS.repelForce;
    this.plugin.settings.linkForce = DEFAULT_NETWORK_SETTINGS.linkForce;
    this.plugin.settings.linkDistance = DEFAULT_NETWORK_SETTINGS.linkDistance;
    this.plugin.settings.centerForce = DEFAULT_NETWORK_SETTINGS.centerForce;
    this.plugin.settings.textFadeThreshold = DEFAULT_NETWORK_SETTINGS.textFadeThreshold;
    this.plugin.settings.minLinkThickness = DEFAULT_NETWORK_SETTINGS.minLinkThickness;
    this.plugin.settings.maxLinkThickness = DEFAULT_NETWORK_SETTINGS.maxLinkThickness;
    this.plugin.settings.maxLabelCharacters = DEFAULT_NETWORK_SETTINGS.maxLabelCharacters;
    this.plugin.settings.linkLabelSize = DEFAULT_NETWORK_SETTINGS.linkLabelSize;
    this.plugin.settings.nodeLabelSize = DEFAULT_NETWORK_SETTINGS.nodeLabelSize;
    this.plugin.settings.connectionType = DEFAULT_NETWORK_SETTINGS.connectionType;
    this.plugin.settings.noteFillColor = DEFAULT_NETWORK_SETTINGS.noteFillColor;
    this.plugin.settings.blockFillColor = DEFAULT_NETWORK_SETTINGS.blockFillColor;
    this.plugin.saveSettings();
    this.updateLabelsToDefaults();
    this.updateSliders();
    this.updateNodeSizes();
    this.updateLinkThickness();
    this.updateSimulationForces();
    await this.updateVisualization(this.relevanceScoreThreshold);
  }
  updateLabelsToDefaults() {
    const labels = {
      "smart-connections-visualizer-scoreThresholdLabel": `Min relevance: ${(this.relevanceScoreThreshold * 100).toFixed(0)}%`,
      "smart-connections-visualizer-nodeSizeLabel": `Node size: ${this.nodeSize}`,
      "smart-connections-visualizer-maxLabelCharactersLabel": `Max label characters: ${this.maxLabelCharacters}`,
      "smart-connections-visualizer-linkLabelSizeLabel": `Link label size: ${this.linkLabelSize}`,
      "smart-connections-visualizer-smart-connections-visualizer-nodeLabelSizeLabel": `Node label size: ${this.nodeLabelSize}`,
      "smart-connections-visualizer-minLinkThicknessLabel": `Min link thickness: ${this.minLinkThickness}`,
      "smart-connections-visualizer-maxLinkThicknessLabel": `Max link thickness: ${this.maxLinkThickness}`,
      "smart-connections-visualizer-fadeThresholdLabel": `Text fade threshold: ${this.textFadeThreshold}`,
      "smart-connections-visualizer-repelForceLabel": `Repel force: ${this.repelForce}`,
      "smart-connections-visualizer-linkForceLabel": `Link force: ${this.linkForce}`,
      "smart-connections-visualizer-linkDistanceLabel": `Link distance: ${this.linkDistance}`
    };
    for (const [id2, text] of Object.entries(labels)) {
      const label = document.getElementById(id2);
      if (label) {
        label.textContent = text;
      }
    }
  }
  updateSliders() {
    const scoreThresholdSlider = document.getElementById("smart-connections-visualizer-scoreThreshold");
    const nodeSizeSlider = document.getElementById("smart-connections-visualizer-nodeSize");
    const repelForceSlider = document.getElementById("smart-connections-visualizer-repelForce");
    const linkForceSlider = document.getElementById("smart-connections-visualizer-linkForce");
    const linkDistanceSlider = document.getElementById("smart-connections-visualizer-linkDistance");
    const fadeThresholdSlider = document.getElementById("smart-connections-visualizer-fadeThreshold");
    const minLinkThicknessSlider = document.getElementById("smart-connections-visualizer-minLinkThickness");
    const maxLinkThicknessSlider = document.getElementById("smart-connections-visualizer-maxLinkThickness");
    const maxLabelCharactersSlider = document.getElementById("smart-connections-visualizer-maxLabelCharacters");
    const linkLabelSizeSlider = document.getElementById("smart-connections-visualizer-linkLabelSize");
    const nodeLabelSizeSlider = document.getElementById("smart-connections-visualizer-nodeLabelSize");
    scoreThresholdSlider.value = `${this.relevanceScoreThreshold}`;
    nodeSizeSlider.value = `${this.nodeSize}`;
    repelForceSlider.value = `${this.repelForce}`;
    linkForceSlider.value = `${this.linkForce}`;
    linkDistanceSlider.value = `${this.linkDistance}`;
    fadeThresholdSlider.value = `${this.textFadeThreshold}`;
    minLinkThicknessSlider.value = `${this.minLinkThickness}`;
    maxLinkThicknessSlider.value = `${this.maxLinkThickness}`;
    maxLabelCharactersSlider.value = `${this.maxLabelCharacters}`;
    linkLabelSizeSlider.value = `${this.linkLabelSize}`;
    nodeLabelSizeSlider.value = `${this.nodeLabelSize}`;
  }
  async watchForNoteChanges() {
    this.app.workspace.on("file-open", async (file) => {
      var _a;
      if (file && this.currentNoteKey !== file.path && !this.isHovering && ((_a = this == null ? void 0 : this.containerEl) == null ? void 0 : _a.children[1])) {
        this.currentNoteKey = file.path;
        this.currentNoteChanging = true;
        await this.render();
      }
    });
  }
  async updateVisualization(newScoreThreshold) {
    if (this.updatingVisualization && !this.isChangingConnectionType) {
      this.updatingVisualization = false;
      this.currentNoteChanging = false;
      return;
    }
    this.isChangingConnectionType = false;
    if (newScoreThreshold !== void 0) {
      this.relevanceScoreThreshold = newScoreThreshold;
    }
    await this.updateConnections();
    const filteredConnections = this.connections.filter((connection) => connection.score >= this.relevanceScoreThreshold);
    const visibleNodes = /* @__PURE__ */ new Set();
    filteredConnections.forEach((connection) => {
      visibleNodes.add(connection.source);
      visibleNodes.add(connection.target);
    });
    visibleNodes.add(this.centralNote.key);
    const nodesData = Array.from(visibleNodes).map((id2) => {
      const node = this.nodes.find((node2) => node2.id === id2);
      return node ? node : null;
    }).filter(Boolean);
    if (!nodesData.some((node) => node.id === this.centralNote.key)) {
      const centralNode = this.nodes.find((node) => node.id === this.centralNote.key);
      if (centralNode) {
        nodesData.push(centralNode);
      }
    }
    nodesData.forEach((node) => {
      if (!node.x || !node.y) {
        console.warn(`Node with invalid position: ${node.id}`);
        node.x = Math.random() * 1e3;
        node.y = Math.random() * 1e3;
      }
    });
    this.validatedLinks = filteredConnections.filter((link) => {
      const sourceNode = nodesData.find((node) => node.id === link.source);
      const targetNode = nodesData.find((node) => node.id === link.target);
      if (!sourceNode || !targetNode) {
        console.warn(`Link source or target node not found: ${link.source}, ${link.target}`);
      }
      return sourceNode && targetNode;
    });
    if (nodesData.length === 0 || this.validatedLinks.length === 0) {
      this.updatingVisualization = false;
      console.warn("No nodes or links to display after filtering. Aborting update.");
      new import_obsidian.Notice("No nodes or links to display after filtering. Adjust filter settings");
      this.nodeSelection = this.svgGroup.select("g.smart-connections-visualizer-nodes").selectAll("circle").data([]).exit().remove();
      this.linkSelection = this.svgGroup.select("g.smart-connections-visualizer-links").selectAll("line").data([]).exit().remove();
      this.linkLabelSelection = this.svgGroup.select("g.smart-connections-visualizer-link-labels").selectAll("text").data([]).exit().remove();
      this.labelSelection = this.svgGroup.select("g.smart-connections-visualizer-node-labels").selectAll("text").data([]).exit().remove();
      return;
    }
    this.updateNodeAndLinkSelection(nodesData);
    if (!this.simulation || this.currentNoteChanging || this.isFiltering) {
      const { width, height } = this.getSVGDimensions();
      this.initializeSimulation(width, height);
      this.currentNoteChanging = false;
      this.isFiltering = false;
    }
    this.simulation.nodes(nodesData).on("tick", this.simulationTickHandler.bind(this));
    this.simulation.force("link").links(this.validatedLinks).distance((d) => this.linkDistanceScale(d.score));
    this.simulation.alpha(1).restart();
    setTimeout(() => {
      this.simulation.alphaTarget(0);
    }, 1e3);
    this.updatingVisualization = false;
  }
  simulationTickHandler() {
    this.nodeSelection.attr("cx", (d) => d.x).attr("cy", (d) => d.y).style("cursor", "pointer");
    this.linkSelection.attr("x1", (d) => d.source.x || 0).attr("y1", (d) => d.source.y || 0).style("cursor", "pointer").attr("x2", (d) => d.target.x || 0).attr("y2", (d) => d.target.y || 0);
    this.linkLabelSelection.attr("x", (d) => (d.source.x + d.target.x) / 2).attr("y", (d) => (d.source.y + d.target.y) / 2);
    this.labelSelection.attr("x", (d) => d.x).attr("y", (d) => d.y);
  }
  async updateConnections() {
    this.nodes = [];
    this.links = [];
    this.connections = [];
    this.minScore = 1;
    this.maxScore = 0;
    if (!this.currentNoteKey)
      return;
    this.centralNote = this.smartNotes[this.currentNoteKey];
    const noteConnections = (await apiClient.getResponse(this.currentNoteKey.replace(".md", ""))).map((l) => {
      var _a, _b, _c;
      return {
        item: { title: (_a = l == null ? void 0 : l.titles) == null ? void 0 : _a.normalized, key: (_b = l == null ? void 0 : l.titles) == null ? void 0 : _b.normalized, id: (_c = l == null ? void 0 : l.titles) == null ? void 0 : _c.normalized },
        score: 1
      };
    });
    this.addCentralNode();
    this.addFilteredConnections(noteConnections);
    const isValid = this.validateGraphData(this.nodes, this.links);
    if (!isValid)
      console.error("Graph data validation failed.");
  }
  addCentralNode() {
    if (this.centralNote.key && this.centralNote.key.trim() !== "" && !this.nodes.some((node) => node.id === this.centralNote.key)) {
      const svg = this.svg.node();
      const { width, height } = svg.getBoundingClientRect();
      this.nodes.push({
        id: this.centralNote.key,
        name: this.centralNote.key,
        group: "note",
        x: width / 2,
        y: height / 2,
        fx: null,
        fy: null,
        fill: this.noteFillColor,
        selected: false,
        highlighted: false
      });
      this.centralNode = this.nodes[this.nodes.length - 1];
    } else {
      console.error(`Central node not found or already exists: ${this.centralNote.key}`);
    }
  }
  addFilteredConnections(noteConnections) {
    const filteredConnections = noteConnections;
    filteredConnections.forEach((connection, index2) => {
      if (connection && connection.item && connection.item.key) {
        const connectionId = connection.item.key;
        this.addConnectionNode(connectionId, connection);
        this.addConnectionLink(connectionId, connection);
      } else {
        console.warn(`Skipping invalid connection at index ${index2}:`, connection);
      }
    });
  }
  addConnectionNode(connectionId, connection) {
    if (!this.nodes.some((node) => node.id === connectionId)) {
      this.nodes.push({
        id: connectionId,
        name: connectionId,
        group: connection.item instanceof this.env.item_types.SmartBlock ? "block" : "note",
        x: Math.random() * 1e3,
        y: Math.random() * 1e3,
        fx: null,
        fy: null,
        fill: connection.item instanceof this.env.item_types.SmartBlock ? this.blockFillColor : this.noteFillColor,
        selected: false,
        highlighted: false
      });
    } else {
      console.log("Node already exists for connection ID:", connectionId);
    }
  }
  addConnectionLink(connectionId, connection) {
    const sourceNode = this.nodes.find((node) => node.id === this.centralNote.key);
    const targetNode = this.nodes.find((node) => node.id === connectionId);
    if (!sourceNode) {
      console.error(`Source node not found: ${this.centralNote.key}`);
      return;
    }
    if (!targetNode) {
      console.error(`Target node not found: ${connectionId}`);
      return;
    }
    this.links.push({
      source: this.centralNote.key,
      target: connectionId,
      value: connection.score || 0
    });
    this.connections.push({
      source: this.centralNote.key,
      target: connectionId,
      score: connection.score || 0
    });
    this.updateScoreRange(connection.score);
  }
  updateScoreRange(score) {
    if (score > this.maxScore)
      this.maxScore = score;
    if (score < this.minScore)
      this.minScore = score;
  }
  validateGraphData(nodes, links2) {
    const nodeIds = new Set(nodes.map((node) => node.id));
    let isValid = true;
    links2.forEach((link, index2) => {
      if (!nodeIds.has(link.source)) {
        console.error(`Link at index ${index2} has an invalid source: ${link.source}`);
        isValid = false;
      }
      if (!nodeIds.has(link.target)) {
        console.error(`Link at index ${index2} has an invalid target: ${link.target}`);
        isValid = false;
      }
    });
    nodes.forEach((node, index2) => {
      if (!node.hasOwnProperty("id") || !node.hasOwnProperty("name") || !node.hasOwnProperty("group")) {
        console.error(`Node at index ${index2} is missing required properties: ${JSON.stringify(node)}`);
        isValid = false;
      }
    });
    return isValid;
  }
  updateNodeAndLinkSelection(nodesData) {
    const svgGroup = this.svgGroup;
    this.linkSelection = svgGroup.select("g.smart-connections-visualizer-links").selectAll("line").data(this.validatedLinks, (d) => `${d.source}-${d.target}`).join(
      (enter) => this.enterLink(enter),
      (update) => this.updateLink(update),
      (exit) => exit.remove()
    );
    this.linkLabelSelection = svgGroup.select("g.smart-connections-visualizer-link-labels").selectAll("text").data(this.validatedLinks, (d) => `${d.source.id}-${d.target.id}`).join(
      (enter) => this.enterLinkLabel(enter),
      (update) => this.updateLinkLabel(update),
      (exit) => exit.remove()
    );
    this.labelSelection = svgGroup.select("g.smart-connections-visualizer-node-labels").selectAll("text").data(nodesData, (d) => d.id).join(
      (enter) => this.enterLabel(enter),
      (update) => this.updateLabel(update),
      (exit) => exit.remove()
    ).attr("x", (d) => d.x).attr("y", (d) => d.y);
    this.nodeSelection = svgGroup.select("g.smart-connections-visualizer-nodes").selectAll("circle").data(nodesData, (d) => {
      return d.id;
    }).join(
      (enter) => this.enterNode(enter),
      (update) => this.updateNode(update),
      (exit) => exit.remove()
    );
  }
  enterNode(enter) {
    const that = this;
    return enter.append("circle").attr("class", "smart-connections-visualizer-node").attr("r", (d) => d.id === this.centralNode.id ? this.nodeSize + 2 : this.nodeSize).attr("fill", (d) => d.fill).attr("stroke", (d) => d.selected ? "blanchedalmond" : "transparent").attr("stroke-width", (d) => d.selected ? 1.5 : 0.3).attr("opacity", 1).attr("cursor", "pointer").call(drag_default().on("start", this.onDragStart.bind(this)).on("drag", this.onDrag.bind(this)).on("end", this.onDragEnd.bind(this))).on("click", this.onNodeClick.bind(this)).on("mouseover", this.onNodeMouseOver.bind(this)).on("mouseout", this.onNodeMouseOut.bind(this));
  }
  updateNode(update) {
    return update.attr("r", (d) => d.id === this.centralNode.id ? this.nodeSize + 2 : this.nodeSize).attr("fill", (d) => d.selected ? "#f3ee5d" : d.fill).attr("stroke", (d) => d.selected ? "blanchedalmond" : "transparent").attr("stroke-width", (d) => d.selected ? 1.5 : 0.3);
  }
  onDragStart(event, d) {
    if (!event.active)
      this.simulation.alphaTarget(0.3).restart();
    this.dragging = true;
    d.fx = d.x;
    d.fy = d.y;
  }
  onDrag(event, d) {
    if (this.isHovering)
      this.isHovering = false;
    d.fx = event.x;
    d.fy = event.y;
  }
  onDragEnd(event, d) {
    if (!event.active)
      this.simulation.alphaTarget(0);
    d.fx = null;
    d.fy = null;
    this.dragging = false;
  }
  onNodeClick(event, d) {
    if (d.id === this.centralNode.id)
      return;
    this.env.plugin.open_note(d.id, event);
  }
  onNodeMouseOver(event, d) {
    if (this.dragging)
      return;
    if (d.id === this.centralNode.id)
      return;
    this.isHovering = true;
    this.highlightNode(d);
    this.updateLinkLabelAppearance(d);
    this.app.workspace.trigger("hover-link", {
      event,
      source: "D3",
      hoverParent: event.currentTarget.parentElement,
      targetEl: event.currentTarget,
      linktext: d.id
    });
  }
  onNodeMouseOut(event, d) {
    if (this.dragging)
      return;
    this.isHovering = false;
    this.centerHighlighted = false;
    this.unhighlightNode(d);
    this.updateLinkLabelAppearance({ id: null });
  }
  updateLinkLabelPositions() {
    this.linkLabelSelection.attr("x", (d) => (d.source.x + d.target.x) / 2).attr("y", (d) => (d.source.y + d.target.y) / 2);
  }
  updateLinkSelection(svgGroup) {
    return svgGroup.select("g.links").selectAll("line").data(this.validatedLinks, (d) => `${d.source}-${d.target}`).style("cursor", "pointer").join(
      (enter) => this.enterLink(enter),
      (update) => this.updateLink(update),
      (exit) => exit.remove()
    );
  }
  enterLink(enter) {
    return enter.append("line").attr("class", "smart-connections-visualizer-link").attr("stroke", "#4c7787").attr("stroke-width", (d) => this.getLinkStrokeWidth(d)).attr("stroke-opacity", 1).attr("opacity", 1);
  }
  updateLink(update) {
    return update.attr("stroke", "#4c7787").attr("stroke-width", (d) => this.getLinkStrokeWidth(d));
  }
  getLinkStrokeWidth(d) {
    return linear2().domain([this.minScore, this.maxScore]).range([this.minLinkThickness, this.maxLinkThickness])(d.score);
  }
  updateLinkLabelSelection(svgGroup) {
    return svgGroup.append("g").attr("class", "smart-connections-visualizer-link-labels").selectAll("text").data(this.validatedLinks, (d) => `${d.source.id}-${d.target.id}`).join(
      (enter) => this.enterLinkLabel(enter),
      (update) => this.updateLinkLabel(update),
      (exit) => exit.remove()
    );
  }
  enterLinkLabel(enter) {
    return enter.append("text").attr("class", "smart-connections-visualizer-link-label").attr("font-size", this.linkLabelSize).attr("fill", "#bbb").attr("opacity", 0).attr("x", (d) => d.x).attr("y", (d) => d.y).text((d) => (d.score * 100).toFixed(1) + "%");
  }
  updateLinkLabel(update) {
    return update.text((d) => (d.score * 100).toFixed(1)).attr("x", (d) => d.x).attr("y", (d) => d.y);
  }
  enterLabel(enter) {
    return enter.append("text").attr("class", "smart-connections-visualizer-label").attr("dx", 0).attr("font-size", this.nodeLabelSize).attr("dy", 12).attr("text-anchor", "middle").attr("fill", "#bbb").attr("data-id", (d) => d.id).attr("opacity", 1).attr("x", (d) => d.x).attr("y", (d) => d.y).text((d) => this.formatLabel(d.name));
  }
  updateLabel(update) {
    return update.attr("dx", 0).attr("data-id", (d) => d.id).attr("text-anchor", "middle").text((d) => d.id === this.highlightedNodeId ? this.formatLabel(d.name, false) : this.formatLabel(d.name, true)).attr("fill", "#bbb").attr("font-size", this.nodeLabelSize).attr("x", (d) => d.x).attr("y", (d) => d.y).attr("opacity", 1);
  }
  updateNodeSizes() {
    this.nodeSelection.attr("r", (d) => d.id === this.centralNode.id ? this.nodeSize + 3 : this.nodeSize);
  }
  updateLinkThickness() {
    const linkStrokeScale = linear2().domain([this.minScore, this.maxScore]).range([this.minLinkThickness, this.maxLinkThickness]);
    this.linkSelection.attr("stroke-width", (d) => linkStrokeScale(d.score));
  }
  updateSimulationForces() {
    if (!this.simulation) {
      console.error("Simulation not initialized");
      return;
    }
    this.simulation.force("charge", manyBody_default().strength(-this.repelForce)).force("link", link_default(this.validatedLinks).id((d) => d.id).distance((d) => this.linkDistanceScale(d.score)).strength(this.linkForce));
    this.simulation.alphaTarget(0.3).restart();
    setTimeout(() => {
      this.simulation.alphaTarget(0);
    }, 1e3);
  }
  normalizeScore(score) {
    if (this.minScore === this.maxScore) {
      return 0.5;
    }
    return (score - this.minScore) / (this.maxScore - this.minScore);
  }
  linkDistanceScale(score) {
    return linear2().domain([0, 1]).range([this.linkDistance * 2, this.linkDistance / 2])(this.normalizeScore(score));
  }
  updateLabelOpacity(zoomLevel) {
    const maxOpacity = 1;
    const minOpacity = 0;
    const minZoom = 0.1;
    const maxZoom = this.textFadeThreshold;
    let newOpacity = (zoomLevel - minZoom) / (maxZoom - minZoom);
    if (zoomLevel <= minZoom)
      newOpacity = minOpacity;
    if (zoomLevel >= maxZoom)
      newOpacity = maxOpacity;
    newOpacity = Math.max(minOpacity, Math.min(maxOpacity, newOpacity));
    if (this.labelSelection) {
      this.labelSelection.transition().duration(300).attr("opacity", newOpacity);
    }
  }
  updateNodeLabels() {
    this.labelSelection.attr("font-size", this.nodeLabelSize).text((d) => this.formatLabel(d.name, true));
  }
  updateLinkLabelSizes() {
    if (this.linkLabelSelection) {
      this.linkLabelSelection.attr("font-size", this.linkLabelSize);
    }
  }
  updateNodeLabelSizes() {
    this.labelSelection.attr("font-size", this.nodeLabelSize);
  }
  updateNodeLabelOpacity(zoomLevel) {
    const maxOpacity = 1;
    const minOpacity = 0;
    const minZoom = 0.1;
    const maxZoom = this.textFadeThreshold;
    let newOpacity = (zoomLevel - minZoom) / (maxZoom - minZoom);
    if (zoomLevel <= minZoom)
      newOpacity = minOpacity;
    if (zoomLevel >= maxZoom)
      newOpacity = maxOpacity;
    newOpacity = Math.max(minOpacity, Math.min(maxOpacity, newOpacity));
    this.labelSelection.transition().duration(300).attr("opacity", newOpacity);
  }
  startBoxSelection(event) {
    if (!this.isCtrlPressed)
      return;
    this.isDragging = true;
    const [x3, y3] = pointer_default(event);
    this.selectionBox = select_default2("svg").append("rect").attr("class", "smart-connections-visualizer-selection-box").attr("x", x3).attr("y", y3).attr("width", 0).attr("height", 0).attr("stroke", "#00f").attr("stroke-width", 1).attr("fill", "rgba(0, 0, 255, 0.3)");
    this.startX = x3;
    this.startY = y3;
  }
  updateBoxSelection(event) {
    if (!this.isDragging)
      return;
    const [x3, y3] = pointer_default(event);
    const newWidth = x3 - this.startX;
    const newHeight = y3 - this.startY;
    this.selectionBox.attr("width", Math.abs(newWidth)).attr("height", Math.abs(newHeight)).attr("x", Math.min(x3, this.startX)).attr("y", Math.min(y3, this.startY));
    this.updateNodeSelectionInBox(newWidth, newHeight);
    this.updateNodeAppearance();
  }
  updateNodeSelectionInBox(newWidth, newHeight) {
    const endX = this.startX + newWidth;
    const endY = this.startY + newHeight;
    const transformedStartX = Math.min(this.startX, endX);
    const transformedStartY = Math.min(this.startY, endY);
    const transformedEndX = Math.max(this.startX, endX);
    const transformedEndY = Math.max(this.startY, endY);
    const transform2 = transform(select_default2("svg").node());
    const zoomedStartX = (transformedStartX - transform2.x) / transform2.k;
    const zoomedStartY = (transformedStartY - transform2.y) / transform2.k;
    const zoomedEndX = (transformedEndX - transform2.x) / transform2.k;
    const zoomedEndY = (transformedEndY - transform2.y) / transform2.k;
    this.nodeSelection.each((d) => {
      const nodeX = d.x;
      const nodeY = d.y;
      d.selected = nodeX >= zoomedStartX && nodeX <= zoomedEndX && nodeY >= zoomedStartY && nodeY <= zoomedEndY;
    });
  }
  endBoxSelection() {
    if (!this.isDragging)
      return;
    this.isDragging = false;
    this.selectionBox.remove();
  }
  // TODO:: Add back in when ready for toolti
  // showTooltip(event: any, d: any) {
  // 	const tooltip = d3.select('.tooltip');
  // 	tooltip.text(d.name)
  // 		.style('visibility', 'visible');
  // 	const [x, y] = d3.pointer(event);
  // 	tooltip.style('top', `${y + 10}px`)
  // 		.style('left', `${x + 10}px`);
  // }
  // hideTooltip() {
  // 	const tooltip = d3.select('.tooltip');
  // 	tooltip.style('visibility', 'hidden');
  // }
};
var ScGraphView = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.registerView("wikipedia-connections-visualizer", (leaf) => new ScGraphItemView(leaf, this));
    this.registerHoverLinkSource("wikipedia-connections-visualizer", {
      display: "Wikipedia connections visualizer hover link source",
      defaultMod: true
    });
    this.addRibbonIcon("git-fork", "Open wikipedia connections visualizer", (evt) => {
      const existingLeaf = this.app.workspace.getLeavesOfType("wikipedia-connections-visualizer")[0];
      if (existingLeaf) {
        this.app.workspace.setActiveLeaf(existingLeaf);
      } else {
        let leaf = this.app.workspace.getLeaf(true);
        leaf.setViewState({
          type: "wikipedia-connections-visualizer",
          active: true
        });
      }
    });
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_NETWORK_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  onunload() {
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2JpbmQuanMiLCAibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi91dGlscy5qcyIsICJub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvQXhpb3NFcnJvci5qcyIsICJub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvbnVsbC5qcyIsICJub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvdG9Gb3JtRGF0YS5qcyIsICJub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvQXhpb3NVUkxTZWFyY2hQYXJhbXMuanMiLCAibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2J1aWxkVVJMLmpzIiwgIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9JbnRlcmNlcHRvck1hbmFnZXIuanMiLCAibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9kZWZhdWx0cy90cmFuc2l0aW9uYWwuanMiLCAibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9wbGF0Zm9ybS9icm93c2VyL2NsYXNzZXMvVVJMU2VhcmNoUGFyYW1zLmpzIiwgIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvcGxhdGZvcm0vYnJvd3Nlci9jbGFzc2VzL0Zvcm1EYXRhLmpzIiwgIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvcGxhdGZvcm0vYnJvd3Nlci9jbGFzc2VzL0Jsb2IuanMiLCAibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9wbGF0Zm9ybS9icm93c2VyL2luZGV4LmpzIiwgIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvcGxhdGZvcm0vY29tbW9uL3V0aWxzLmpzIiwgIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvcGxhdGZvcm0vaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3RvVVJMRW5jb2RlZEZvcm0uanMiLCAibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2Zvcm1EYXRhVG9KU09OLmpzIiwgIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvZGVmYXVsdHMvaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3BhcnNlSGVhZGVycy5qcyIsICJub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvQXhpb3NIZWFkZXJzLmpzIiwgIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS90cmFuc2Zvcm1EYXRhLmpzIiwgIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL2lzQ2FuY2VsLmpzIiwgIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL0NhbmNlbGVkRXJyb3IuanMiLCAibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3NldHRsZS5qcyIsICJub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvcGFyc2VQcm90b2NvbC5qcyIsICJub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvc3BlZWRvbWV0ZXIuanMiLCAibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3Rocm90dGxlLmpzIiwgIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9wcm9ncmVzc0V2ZW50UmVkdWNlci5qcyIsICJub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luLmpzIiwgIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb29raWVzLmpzIiwgIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc0Fic29sdXRlVVJMLmpzIiwgIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb21iaW5lVVJMcy5qcyIsICJub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvYnVpbGRGdWxsUGF0aC5qcyIsICJub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvbWVyZ2VDb25maWcuanMiLCAibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3Jlc29sdmVDb25maWcuanMiLCAibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9hZGFwdGVycy94aHIuanMiLCAibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2NvbXBvc2VTaWduYWxzLmpzIiwgIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy90cmFja1N0cmVhbS5qcyIsICJub2RlX21vZHVsZXMvYXhpb3MvbGliL2FkYXB0ZXJzL2ZldGNoLmpzIiwgIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvYWRhcHRlcnMvYWRhcHRlcnMuanMiLCAibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2Rpc3BhdGNoUmVxdWVzdC5qcyIsICJub2RlX21vZHVsZXMvYXhpb3MvbGliL2Vudi9kYXRhLmpzIiwgIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy92YWxpZGF0b3IuanMiLCAibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0F4aW9zLmpzIiwgIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL0NhbmNlbFRva2VuLmpzIiwgIm5vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9zcHJlYWQuanMiLCAibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzQXhpb3NFcnJvci5qcyIsICJub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvSHR0cFN0YXR1c0NvZGUuanMiLCAibm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9heGlvcy5qcyIsICJub2RlX21vZHVsZXMvd2lraXBlZGlhL2Rpc3QvZXJyb3JzLmpzIiwgIm5vZGVfbW9kdWxlcy93aWtpcGVkaWEvZGlzdC9yZXF1ZXN0LmpzIiwgIm5vZGVfbW9kdWxlcy93aWtpcGVkaWEvZGlzdC9tZXNzYWdlcy5qcyIsICJub2RlX21vZHVsZXMvd2lraXBlZGlhL2Rpc3QvdXRpbHMuanMiLCAibm9kZV9tb2R1bGVzL2NhbWVsY2FzZS9pbmRleC5qcyIsICJub2RlX21vZHVsZXMvaW5mb2JveC1wYXJzZXIvdXRpbC9nZXRWYWx1ZS5qcyIsICJub2RlX21vZHVsZXMvaW5mb2JveC1wYXJzZXIvZGF0YS10eXBlcy9kYXRhVHlwZS5qcyIsICJub2RlX21vZHVsZXMvaW5mb2JveC1wYXJzZXIvdXRpbC9leHRyYWN0RGF0YS5qcyIsICJub2RlX21vZHVsZXMvaW5mb2JveC1wYXJzZXIvdXRpbC9wcm9wZXJ0eUxpc3QuanMiLCAibm9kZV9tb2R1bGVzL2luZm9ib3gtcGFyc2VyL3V0aWwvZmlsbFZhcmlhYmxlcy5qcyIsICJub2RlX21vZHVsZXMvaW5mb2JveC1wYXJzZXIvdXRpbC9leHRyYWN0UHJvcGVydGllcy5qcyIsICJub2RlX21vZHVsZXMvaW5mb2JveC1wYXJzZXIvdXRpbC90cmFuc2Zvcm1Qcm9wZXJ0aWVzLmpzIiwgIm5vZGVfbW9kdWxlcy9pbmZvYm94LXBhcnNlci91dGlsL2V4dHJhY3RJbmZvYm94ZXMuanMiLCAibm9kZV9tb2R1bGVzL2luZm9ib3gtcGFyc2VyL3V0aWwvY2xlYW5Tb3VyY2UuanMiLCAibm9kZV9tb2R1bGVzL2luZm9ib3gtcGFyc2VyL3V0aWwvcGFyc2VUYWJsZXMuanMiLCAibm9kZV9tb2R1bGVzL2luZm9ib3gtcGFyc2VyL3V0aWwvcGFyc2VCc1RhYmxlcy5qcyIsICJub2RlX21vZHVsZXMvaW5mb2JveC1wYXJzZXIvdXRpbC9wYXJzZUxpc3RzLmpzIiwgIm5vZGVfbW9kdWxlcy9pbmZvYm94LXBhcnNlci9pbmRleC5qcyIsICJub2RlX21vZHVsZXMvaW5mb2JveC1wYXJzZXIvZGF0YS10eXBlcy9zbWFsbC5qcyIsICJub2RlX21vZHVsZXMvaW5mb2JveC1wYXJzZXIvZGF0YS10eXBlcy9mbGFnLmpzIiwgIm5vZGVfbW9kdWxlcy9pbmZvYm94LXBhcnNlci9kYXRhLXR5cGVzL2Nvb3Jkcy5qcyIsICJub2RlX21vZHVsZXMvaW5mb2JveC1wYXJzZXIvZGF0YS10eXBlcy9pbnN0YW5jZXMuanMiLCAibm9kZV9tb2R1bGVzL2luZm9ib3gtcGFyc2VyL2RhdGEtdHlwZXMvdW5idWxsZXRlZExpc3RzLmpzIiwgIm5vZGVfbW9kdWxlcy9pbmZvYm94LXBhcnNlci9kYXRhLXR5cGVzL3VubWFya2VkTGlzdHMuanMiLCAibm9kZV9tb2R1bGVzL2luZm9ib3gtcGFyc2VyL2RhdGEtdHlwZXMvcGxhaW5MaXN0cy5qcyIsICJub2RlX21vZHVsZXMvaW5mb2JveC1wYXJzZXIvZGF0YS10eXBlcy9tYXJyaWFnZXMuanMiLCAibm9kZV9tb2R1bGVzL2luZm9ib3gtcGFyc2VyL2RhdGEtdHlwZXMvbmJheS5qcyIsICJub2RlX21vZHVsZXMvaW5mb2JveC1wYXJzZXIvZGF0YS10eXBlcy9vdGhlci5qcyIsICJub2RlX21vZHVsZXMvaW5mb2JveC1wYXJzZXIvZGF0YS10eXBlcy9obGlzdC5qcyIsICJub2RlX21vZHVsZXMvaW5mb2JveC1wYXJzZXIvZGF0YS10eXBlcy9iaXJ0aERhdGVzLmpzIiwgIm5vZGVfbW9kdWxlcy9pbmZvYm94LXBhcnNlci9kYXRhLXR5cGVzL2xhYmVsZWREYXRlcy5qcyIsICJub2RlX21vZHVsZXMvaW5mb2JveC1wYXJzZXIvZGF0YS10eXBlcy9kZWF0aERhdGVzLmpzIiwgIm5vZGVfbW9kdWxlcy9pbmZvYm94LXBhcnNlci9kYXRhLXR5cGVzL3VybC5qcyIsICJub2RlX21vZHVsZXMvaW5mb2JveC1wYXJzZXIvZGF0YS10eXBlcy93ZWJzaXRlLmpzIiwgIm5vZGVfbW9kdWxlcy9pbmZvYm94LXBhcnNlci9kYXRhLXR5cGVzL2V4dHJhLmpzIiwgIm5vZGVfbW9kdWxlcy9pbmZvYm94LXBhcnNlci9kYXRhLXR5cGVzL2NvbnZlcnQuanMiLCAibm9kZV9tb2R1bGVzL2luZm9ib3gtcGFyc2VyL2RhdGEtdHlwZXMvZmlsbURhdGVzLmpzIiwgIm5vZGVfbW9kdWxlcy9pbmZvYm94LXBhcnNlci9kYXRhLXR5cGVzL3JlZjEuanMiLCAibm9kZV9tb2R1bGVzL2luZm9ib3gtcGFyc2VyL2RhdGEtdHlwZXMvcmVmMi5qcyIsICJub2RlX21vZHVsZXMvaW5mb2JveC1wYXJzZXIvZGF0YS10eXBlcy9mb3JtYXROdW0uanMiLCAibm9kZV9tb2R1bGVzL2luZm9ib3gtcGFyc2VyL2RhdGEtdHlwZXMvaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL2luZm9ib3gtcGFyc2VyL3V0aWwvbnVtYmVyUGFyc2UuanMiLCAibm9kZV9tb2R1bGVzL3dpa2lwZWRpYS9kaXN0L3BhZ2UuanMiLCAibm9kZV9tb2R1bGVzL3dpa2lwZWRpYS9kaXN0L3Jlc3VsdFR5cGVzLmpzIiwgIm5vZGVfbW9kdWxlcy93aWtpcGVkaWEvZGlzdC9vcHRpb25UeXBlcy5qcyIsICJub2RlX21vZHVsZXMvd2lraXBlZGlhL2Rpc3QvaW5kZXguanMiLCAibWFpbi50cyIsICJub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL2FzY2VuZGluZy5qcyIsICJub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL2Rlc2NlbmRpbmcuanMiLCAibm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9iaXNlY3Rvci5qcyIsICJub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL251bWJlci5qcyIsICJub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL2Jpc2VjdC5qcyIsICJub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL3RpY2tzLmpzIiwgIm5vZGVfbW9kdWxlcy9kMy1kaXNwYXRjaC9zcmMvZGlzcGF0Y2guanMiLCAibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvbmFtZXNwYWNlcy5qcyIsICJub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9uYW1lc3BhY2UuanMiLCAibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvY3JlYXRvci5qcyIsICJub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rvci5qcyIsICJub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vc2VsZWN0LmpzIiwgIm5vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL2FycmF5LmpzIiwgIm5vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdG9yQWxsLmpzIiwgIm5vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9zZWxlY3RBbGwuanMiLCAibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvbWF0Y2hlci5qcyIsICJub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vc2VsZWN0Q2hpbGQuanMiLCAibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3NlbGVjdENoaWxkcmVuLmpzIiwgIm5vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9maWx0ZXIuanMiLCAibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3NwYXJzZS5qcyIsICJub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZW50ZXIuanMiLCAibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvY29uc3RhbnQuanMiLCAibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2RhdGEuanMiLCAibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2V4aXQuanMiLCAibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2pvaW4uanMiLCAibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL21lcmdlLmpzIiwgIm5vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9vcmRlci5qcyIsICJub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vc29ydC5qcyIsICJub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vY2FsbC5qcyIsICJub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vbm9kZXMuanMiLCAibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL25vZGUuanMiLCAibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3NpemUuanMiLCAibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2VtcHR5LmpzIiwgIm5vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9lYWNoLmpzIiwgIm5vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9hdHRyLmpzIiwgIm5vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3dpbmRvdy5qcyIsICJub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vc3R5bGUuanMiLCAibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3Byb3BlcnR5LmpzIiwgIm5vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9jbGFzc2VkLmpzIiwgIm5vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi90ZXh0LmpzIiwgIm5vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9odG1sLmpzIiwgIm5vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9yYWlzZS5qcyIsICJub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vbG93ZXIuanMiLCAibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2FwcGVuZC5qcyIsICJub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vaW5zZXJ0LmpzIiwgIm5vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9yZW1vdmUuanMiLCAibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2Nsb25lLmpzIiwgIm5vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9kYXR1bS5qcyIsICJub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vb24uanMiLCAibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2Rpc3BhdGNoLmpzIiwgIm5vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9pdGVyYXRvci5qcyIsICJub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0LmpzIiwgIm5vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NvdXJjZUV2ZW50LmpzIiwgIm5vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3BvaW50ZXIuanMiLCAibm9kZV9tb2R1bGVzL2QzLWRyYWcvc3JjL25vZXZlbnQuanMiLCAibm9kZV9tb2R1bGVzL2QzLWRyYWcvc3JjL25vZHJhZy5qcyIsICJub2RlX21vZHVsZXMvZDMtZHJhZy9zcmMvY29uc3RhbnQuanMiLCAibm9kZV9tb2R1bGVzL2QzLWRyYWcvc3JjL2V2ZW50LmpzIiwgIm5vZGVfbW9kdWxlcy9kMy1kcmFnL3NyYy9kcmFnLmpzIiwgIm5vZGVfbW9kdWxlcy9kMy1jb2xvci9zcmMvZGVmaW5lLmpzIiwgIm5vZGVfbW9kdWxlcy9kMy1jb2xvci9zcmMvY29sb3IuanMiLCAibm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9iYXNpcy5qcyIsICJub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2Jhc2lzQ2xvc2VkLmpzIiwgIm5vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvY29uc3RhbnQuanMiLCAibm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9jb2xvci5qcyIsICJub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3JnYi5qcyIsICJub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL251bWJlckFycmF5LmpzIiwgIm5vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvYXJyYXkuanMiLCAibm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9kYXRlLmpzIiwgIm5vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvbnVtYmVyLmpzIiwgIm5vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvb2JqZWN0LmpzIiwgIm5vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvc3RyaW5nLmpzIiwgIm5vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvdmFsdWUuanMiLCAibm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9yb3VuZC5qcyIsICJub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3RyYW5zZm9ybS9kZWNvbXBvc2UuanMiLCAibm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy90cmFuc2Zvcm0vcGFyc2UuanMiLCAibm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy90cmFuc2Zvcm0vaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy96b29tLmpzIiwgIm5vZGVfbW9kdWxlcy9kMy10aW1lci9zcmMvdGltZXIuanMiLCAibm9kZV9tb2R1bGVzL2QzLXRpbWVyL3NyYy90aW1lb3V0LmpzIiwgIm5vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3NjaGVkdWxlLmpzIiwgIm5vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy9pbnRlcnJ1cHQuanMiLCAibm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3NlbGVjdGlvbi9pbnRlcnJ1cHQuanMiLCAibm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vdHdlZW4uanMiLCAibm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vaW50ZXJwb2xhdGUuanMiLCAibm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vYXR0ci5qcyIsICJub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9hdHRyVHdlZW4uanMiLCAibm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vZGVsYXkuanMiLCAibm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vZHVyYXRpb24uanMiLCAibm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vZWFzZS5qcyIsICJub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9lYXNlVmFyeWluZy5qcyIsICJub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9maWx0ZXIuanMiLCAibm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vbWVyZ2UuanMiLCAibm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vb24uanMiLCAibm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vcmVtb3ZlLmpzIiwgIm5vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3NlbGVjdC5qcyIsICJub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9zZWxlY3RBbGwuanMiLCAibm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vc2VsZWN0aW9uLmpzIiwgIm5vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3N0eWxlLmpzIiwgIm5vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3N0eWxlVHdlZW4uanMiLCAibm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vdGV4dC5qcyIsICJub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi90ZXh0VHdlZW4uanMiLCAibm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vdHJhbnNpdGlvbi5qcyIsICJub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9lbmQuanMiLCAibm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL2QzLWVhc2Uvc3JjL2N1YmljLmpzIiwgIm5vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy9zZWxlY3Rpb24vdHJhbnNpdGlvbi5qcyIsICJub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvc2VsZWN0aW9uL2luZGV4LmpzIiwgIm5vZGVfbW9kdWxlcy9kMy1icnVzaC9zcmMvYnJ1c2guanMiLCAibm9kZV9tb2R1bGVzL2QzLWZvcmNlL3NyYy9jZW50ZXIuanMiLCAibm9kZV9tb2R1bGVzL2QzLXF1YWR0cmVlL3NyYy9hZGQuanMiLCAibm9kZV9tb2R1bGVzL2QzLXF1YWR0cmVlL3NyYy9jb3Zlci5qcyIsICJub2RlX21vZHVsZXMvZDMtcXVhZHRyZWUvc3JjL2RhdGEuanMiLCAibm9kZV9tb2R1bGVzL2QzLXF1YWR0cmVlL3NyYy9leHRlbnQuanMiLCAibm9kZV9tb2R1bGVzL2QzLXF1YWR0cmVlL3NyYy9xdWFkLmpzIiwgIm5vZGVfbW9kdWxlcy9kMy1xdWFkdHJlZS9zcmMvZmluZC5qcyIsICJub2RlX21vZHVsZXMvZDMtcXVhZHRyZWUvc3JjL3JlbW92ZS5qcyIsICJub2RlX21vZHVsZXMvZDMtcXVhZHRyZWUvc3JjL3Jvb3QuanMiLCAibm9kZV9tb2R1bGVzL2QzLXF1YWR0cmVlL3NyYy9zaXplLmpzIiwgIm5vZGVfbW9kdWxlcy9kMy1xdWFkdHJlZS9zcmMvdmlzaXQuanMiLCAibm9kZV9tb2R1bGVzL2QzLXF1YWR0cmVlL3NyYy92aXNpdEFmdGVyLmpzIiwgIm5vZGVfbW9kdWxlcy9kMy1xdWFkdHJlZS9zcmMveC5qcyIsICJub2RlX21vZHVsZXMvZDMtcXVhZHRyZWUvc3JjL3kuanMiLCAibm9kZV9tb2R1bGVzL2QzLXF1YWR0cmVlL3NyYy9xdWFkdHJlZS5qcyIsICJub2RlX21vZHVsZXMvZDMtZm9yY2Uvc3JjL2NvbnN0YW50LmpzIiwgIm5vZGVfbW9kdWxlcy9kMy1mb3JjZS9zcmMvamlnZ2xlLmpzIiwgIm5vZGVfbW9kdWxlcy9kMy1mb3JjZS9zcmMvY29sbGlkZS5qcyIsICJub2RlX21vZHVsZXMvZDMtZm9yY2Uvc3JjL2xpbmsuanMiLCAibm9kZV9tb2R1bGVzL2QzLWZvcmNlL3NyYy9sY2cuanMiLCAibm9kZV9tb2R1bGVzL2QzLWZvcmNlL3NyYy9zaW11bGF0aW9uLmpzIiwgIm5vZGVfbW9kdWxlcy9kMy1mb3JjZS9zcmMvbWFueUJvZHkuanMiLCAibm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZm9ybWF0RGVjaW1hbC5qcyIsICJub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9leHBvbmVudC5qcyIsICJub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXRHcm91cC5qcyIsICJub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXROdW1lcmFscy5qcyIsICJub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXRTcGVjaWZpZXIuanMiLCAibm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZm9ybWF0VHJpbS5qcyIsICJub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXRQcmVmaXhBdXRvLmpzIiwgIm5vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdFJvdW5kZWQuanMiLCAibm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZm9ybWF0VHlwZXMuanMiLCAibm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvaWRlbnRpdHkuanMiLCAibm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvbG9jYWxlLmpzIiwgIm5vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2RlZmF1bHRMb2NhbGUuanMiLCAibm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvcHJlY2lzaW9uRml4ZWQuanMiLCAibm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvcHJlY2lzaW9uUHJlZml4LmpzIiwgIm5vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL3ByZWNpc2lvblJvdW5kLmpzIiwgIm5vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvaW5pdC5qcyIsICJub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL2NvbnN0YW50LmpzIiwgIm5vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvbnVtYmVyLmpzIiwgIm5vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvY29udGludW91cy5qcyIsICJub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL3RpY2tGb3JtYXQuanMiLCAibm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9saW5lYXIuanMiLCAibm9kZV9tb2R1bGVzL2QzLXpvb20vc3JjL2NvbnN0YW50LmpzIiwgIm5vZGVfbW9kdWxlcy9kMy16b29tL3NyYy9ldmVudC5qcyIsICJub2RlX21vZHVsZXMvZDMtem9vbS9zcmMvdHJhbnNmb3JtLmpzIiwgIm5vZGVfbW9kdWxlcy9kMy16b29tL3NyYy9ub2V2ZW50LmpzIiwgIm5vZGVfbW9kdWxlcy9kMy16b29tL3NyYy96b29tLmpzIiwgImFwaUNsaWVudC50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBiaW5kKGZuLCB0aGlzQXJnKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKCkge1xuICAgIHJldHVybiBmbi5hcHBseSh0aGlzQXJnLCBhcmd1bWVudHMpO1xuICB9O1xufVxuIiwgIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IGJpbmQgZnJvbSAnLi9oZWxwZXJzL2JpbmQuanMnO1xuXG4vLyB1dGlscyBpcyBhIGxpYnJhcnkgb2YgZ2VuZXJpYyBoZWxwZXIgZnVuY3Rpb25zIG5vbi1zcGVjaWZpYyB0byBheGlvc1xuXG5jb25zdCB7dG9TdHJpbmd9ID0gT2JqZWN0LnByb3RvdHlwZTtcbmNvbnN0IHtnZXRQcm90b3R5cGVPZn0gPSBPYmplY3Q7XG5cbmNvbnN0IGtpbmRPZiA9IChjYWNoZSA9PiB0aGluZyA9PiB7XG4gICAgY29uc3Qgc3RyID0gdG9TdHJpbmcuY2FsbCh0aGluZyk7XG4gICAgcmV0dXJuIGNhY2hlW3N0cl0gfHwgKGNhY2hlW3N0cl0gPSBzdHIuc2xpY2UoOCwgLTEpLnRvTG93ZXJDYXNlKCkpO1xufSkoT2JqZWN0LmNyZWF0ZShudWxsKSk7XG5cbmNvbnN0IGtpbmRPZlRlc3QgPSAodHlwZSkgPT4ge1xuICB0eXBlID0gdHlwZS50b0xvd2VyQ2FzZSgpO1xuICByZXR1cm4gKHRoaW5nKSA9PiBraW5kT2YodGhpbmcpID09PSB0eXBlXG59XG5cbmNvbnN0IHR5cGVPZlRlc3QgPSB0eXBlID0+IHRoaW5nID0+IHR5cGVvZiB0aGluZyA9PT0gdHlwZTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IHtpc0FycmF5fSA9IEFycmF5O1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIHVuZGVmaW5lZFxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHZhbHVlIGlzIHVuZGVmaW5lZCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzVW5kZWZpbmVkID0gdHlwZU9mVGVzdCgndW5kZWZpbmVkJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBCdWZmZXJcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNCdWZmZXIodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IG51bGwgJiYgIWlzVW5kZWZpbmVkKHZhbCkgJiYgdmFsLmNvbnN0cnVjdG9yICE9PSBudWxsICYmICFpc1VuZGVmaW5lZCh2YWwuY29uc3RydWN0b3IpXG4gICAgJiYgaXNGdW5jdGlvbih2YWwuY29uc3RydWN0b3IuaXNCdWZmZXIpICYmIHZhbC5jb25zdHJ1Y3Rvci5pc0J1ZmZlcih2YWwpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzQXJyYXlCdWZmZXIgPSBraW5kT2ZUZXN0KCdBcnJheUJ1ZmZlcicpO1xuXG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyVmlldyh2YWwpIHtcbiAgbGV0IHJlc3VsdDtcbiAgaWYgKCh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnKSAmJiAoQXJyYXlCdWZmZXIuaXNWaWV3KSkge1xuICAgIHJlc3VsdCA9IEFycmF5QnVmZmVyLmlzVmlldyh2YWwpO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9ICh2YWwpICYmICh2YWwuYnVmZmVyKSAmJiAoaXNBcnJheUJ1ZmZlcih2YWwuYnVmZmVyKSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmluZ1xuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJpbmcsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc1N0cmluZyA9IHR5cGVPZlRlc3QoJ3N0cmluZycpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGdW5jdGlvbiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzRnVuY3Rpb24gPSB0eXBlT2ZUZXN0KCdmdW5jdGlvbicpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgTnVtYmVyXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIE51bWJlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzTnVtYmVyID0gdHlwZU9mVGVzdCgnbnVtYmVyJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gT2JqZWN0XG4gKlxuICogQHBhcmFtIHsqfSB0aGluZyBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIE9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzT2JqZWN0ID0gKHRoaW5nKSA9PiB0aGluZyAhPT0gbnVsbCAmJiB0eXBlb2YgdGhpbmcgPT09ICdvYmplY3QnO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQm9vbGVhblxuICpcbiAqIEBwYXJhbSB7Kn0gdGhpbmcgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQm9vbGVhbiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzQm9vbGVhbiA9IHRoaW5nID0+IHRoaW5nID09PSB0cnVlIHx8IHRoaW5nID09PSBmYWxzZTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIHBsYWluIE9iamVjdFxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBwbGFpbiBPYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc1BsYWluT2JqZWN0ID0gKHZhbCkgPT4ge1xuICBpZiAoa2luZE9mKHZhbCkgIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgY29uc3QgcHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YodmFsKTtcbiAgcmV0dXJuIChwcm90b3R5cGUgPT09IG51bGwgfHwgcHJvdG90eXBlID09PSBPYmplY3QucHJvdG90eXBlIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90b3R5cGUpID09PSBudWxsKSAmJiAhKFN5bWJvbC50b1N0cmluZ1RhZyBpbiB2YWwpICYmICEoU3ltYm9sLml0ZXJhdG9yIGluIHZhbCk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBEYXRlXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIERhdGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc0RhdGUgPSBraW5kT2ZUZXN0KCdEYXRlJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGaWxlXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZpbGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc0ZpbGUgPSBraW5kT2ZUZXN0KCdGaWxlJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBCbG9iXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJsb2IsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc0Jsb2IgPSBraW5kT2ZUZXN0KCdCbG9iJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGaWxlTGlzdFxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGaWxlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNGaWxlTGlzdCA9IGtpbmRPZlRlc3QoJ0ZpbGVMaXN0Jyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJlYW1cbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyZWFtLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNTdHJlYW0gPSAodmFsKSA9PiBpc09iamVjdCh2YWwpICYmIGlzRnVuY3Rpb24odmFsLnBpcGUpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRm9ybURhdGFcbiAqXG4gKiBAcGFyYW0geyp9IHRoaW5nIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gRm9ybURhdGEsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc0Zvcm1EYXRhID0gKHRoaW5nKSA9PiB7XG4gIGxldCBraW5kO1xuICByZXR1cm4gdGhpbmcgJiYgKFxuICAgICh0eXBlb2YgRm9ybURhdGEgPT09ICdmdW5jdGlvbicgJiYgdGhpbmcgaW5zdGFuY2VvZiBGb3JtRGF0YSkgfHwgKFxuICAgICAgaXNGdW5jdGlvbih0aGluZy5hcHBlbmQpICYmIChcbiAgICAgICAgKGtpbmQgPSBraW5kT2YodGhpbmcpKSA9PT0gJ2Zvcm1kYXRhJyB8fFxuICAgICAgICAvLyBkZXRlY3QgZm9ybS1kYXRhIGluc3RhbmNlXG4gICAgICAgIChraW5kID09PSAnb2JqZWN0JyAmJiBpc0Z1bmN0aW9uKHRoaW5nLnRvU3RyaW5nKSAmJiB0aGluZy50b1N0cmluZygpID09PSAnW29iamVjdCBGb3JtRGF0YV0nKVxuICAgICAgKVxuICAgIClcbiAgKVxufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNVUkxTZWFyY2hQYXJhbXMgPSBraW5kT2ZUZXN0KCdVUkxTZWFyY2hQYXJhbXMnKTtcblxuY29uc3QgW2lzUmVhZGFibGVTdHJlYW0sIGlzUmVxdWVzdCwgaXNSZXNwb25zZSwgaXNIZWFkZXJzXSA9IFsnUmVhZGFibGVTdHJlYW0nLCAnUmVxdWVzdCcsICdSZXNwb25zZScsICdIZWFkZXJzJ10ubWFwKGtpbmRPZlRlc3QpO1xuXG4vKipcbiAqIFRyaW0gZXhjZXNzIHdoaXRlc3BhY2Ugb2ZmIHRoZSBiZWdpbm5pbmcgYW5kIGVuZCBvZiBhIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgVGhlIFN0cmluZyB0byB0cmltXG4gKlxuICogQHJldHVybnMge1N0cmluZ30gVGhlIFN0cmluZyBmcmVlZCBvZiBleGNlc3Mgd2hpdGVzcGFjZVxuICovXG5jb25zdCB0cmltID0gKHN0cikgPT4gc3RyLnRyaW0gP1xuICBzdHIudHJpbSgpIDogc3RyLnJlcGxhY2UoL15bXFxzXFx1RkVGRlxceEEwXSt8W1xcc1xcdUZFRkZcXHhBMF0rJC9nLCAnJyk7XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGFuIEFycmF5IG9yIGFuIE9iamVjdCBpbnZva2luZyBhIGZ1bmN0aW9uIGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgYG9iamAgaXMgYW4gQXJyYXkgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBpbmRleCwgYW5kIGNvbXBsZXRlIGFycmF5IGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgJ29iaicgaXMgYW4gT2JqZWN0IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwga2V5LCBhbmQgY29tcGxldGUgb2JqZWN0IGZvciBlYWNoIHByb3BlcnR5LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fSBvYmogVGhlIG9iamVjdCB0byBpdGVyYXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgY2FsbGJhY2sgdG8gaW52b2tlIGZvciBlYWNoIGl0ZW1cbiAqXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFthbGxPd25LZXlzID0gZmFsc2VdXG4gKiBAcmV0dXJucyB7YW55fVxuICovXG5mdW5jdGlvbiBmb3JFYWNoKG9iaiwgZm4sIHthbGxPd25LZXlzID0gZmFsc2V9ID0ge30pIHtcbiAgLy8gRG9uJ3QgYm90aGVyIGlmIG5vIHZhbHVlIHByb3ZpZGVkXG4gIGlmIChvYmogPT09IG51bGwgfHwgdHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBsZXQgaTtcbiAgbGV0IGw7XG5cbiAgLy8gRm9yY2UgYW4gYXJyYXkgaWYgbm90IGFscmVhZHkgc29tZXRoaW5nIGl0ZXJhYmxlXG4gIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0Jykge1xuICAgIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAgIG9iaiA9IFtvYmpdO1xuICB9XG5cbiAgaWYgKGlzQXJyYXkob2JqKSkge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBhcnJheSB2YWx1ZXNcbiAgICBmb3IgKGkgPSAwLCBsID0gb2JqLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgZm4uY2FsbChudWxsLCBvYmpbaV0sIGksIG9iaik7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBvYmplY3Qga2V5c1xuICAgIGNvbnN0IGtleXMgPSBhbGxPd25LZXlzID8gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMob2JqKSA6IE9iamVjdC5rZXlzKG9iaik7XG4gICAgY29uc3QgbGVuID0ga2V5cy5sZW5ndGg7XG4gICAgbGV0IGtleTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAga2V5ID0ga2V5c1tpXTtcbiAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2tleV0sIGtleSwgb2JqKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZmluZEtleShvYmosIGtleSkge1xuICBrZXkgPSBrZXkudG9Mb3dlckNhc2UoKTtcbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG4gIGxldCBpID0ga2V5cy5sZW5ndGg7XG4gIGxldCBfa2V5O1xuICB3aGlsZSAoaS0tID4gMCkge1xuICAgIF9rZXkgPSBrZXlzW2ldO1xuICAgIGlmIChrZXkgPT09IF9rZXkudG9Mb3dlckNhc2UoKSkge1xuICAgICAgcmV0dXJuIF9rZXk7XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG5jb25zdCBfZ2xvYmFsID0gKCgpID0+IHtcbiAgLyplc2xpbnQgbm8tdW5kZWY6MCovXG4gIGlmICh0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gXCJ1bmRlZmluZWRcIikgcmV0dXJuIGdsb2JhbFRoaXM7XG4gIHJldHVybiB0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiBnbG9iYWwpXG59KSgpO1xuXG5jb25zdCBpc0NvbnRleHREZWZpbmVkID0gKGNvbnRleHQpID0+ICFpc1VuZGVmaW5lZChjb250ZXh0KSAmJiBjb250ZXh0ICE9PSBfZ2xvYmFsO1xuXG4vKipcbiAqIEFjY2VwdHMgdmFyYXJncyBleHBlY3RpbmcgZWFjaCBhcmd1bWVudCB0byBiZSBhbiBvYmplY3QsIHRoZW5cbiAqIGltbXV0YWJseSBtZXJnZXMgdGhlIHByb3BlcnRpZXMgb2YgZWFjaCBvYmplY3QgYW5kIHJldHVybnMgcmVzdWx0LlxuICpcbiAqIFdoZW4gbXVsdGlwbGUgb2JqZWN0cyBjb250YWluIHRoZSBzYW1lIGtleSB0aGUgbGF0ZXIgb2JqZWN0IGluXG4gKiB0aGUgYXJndW1lbnRzIGxpc3Qgd2lsbCB0YWtlIHByZWNlZGVuY2UuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBgYGBqc1xuICogdmFyIHJlc3VsdCA9IG1lcmdlKHtmb286IDEyM30sIHtmb286IDQ1Nn0pO1xuICogY29uc29sZS5sb2cocmVzdWx0LmZvbyk7IC8vIG91dHB1dHMgNDU2XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqMSBPYmplY3QgdG8gbWVyZ2VcbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXN1bHQgb2YgYWxsIG1lcmdlIHByb3BlcnRpZXNcbiAqL1xuZnVuY3Rpb24gbWVyZ2UoLyogb2JqMSwgb2JqMiwgb2JqMywgLi4uICovKSB7XG4gIGNvbnN0IHtjYXNlbGVzc30gPSBpc0NvbnRleHREZWZpbmVkKHRoaXMpICYmIHRoaXMgfHwge307XG4gIGNvbnN0IHJlc3VsdCA9IHt9O1xuICBjb25zdCBhc3NpZ25WYWx1ZSA9ICh2YWwsIGtleSkgPT4ge1xuICAgIGNvbnN0IHRhcmdldEtleSA9IGNhc2VsZXNzICYmIGZpbmRLZXkocmVzdWx0LCBrZXkpIHx8IGtleTtcbiAgICBpZiAoaXNQbGFpbk9iamVjdChyZXN1bHRbdGFyZ2V0S2V5XSkgJiYgaXNQbGFpbk9iamVjdCh2YWwpKSB7XG4gICAgICByZXN1bHRbdGFyZ2V0S2V5XSA9IG1lcmdlKHJlc3VsdFt0YXJnZXRLZXldLCB2YWwpO1xuICAgIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdCh2YWwpKSB7XG4gICAgICByZXN1bHRbdGFyZ2V0S2V5XSA9IG1lcmdlKHt9LCB2YWwpO1xuICAgIH0gZWxzZSBpZiAoaXNBcnJheSh2YWwpKSB7XG4gICAgICByZXN1bHRbdGFyZ2V0S2V5XSA9IHZhbC5zbGljZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHRbdGFyZ2V0S2V5XSA9IHZhbDtcbiAgICB9XG4gIH1cblxuICBmb3IgKGxldCBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBhcmd1bWVudHNbaV0gJiYgZm9yRWFjaChhcmd1bWVudHNbaV0sIGFzc2lnblZhbHVlKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEV4dGVuZHMgb2JqZWN0IGEgYnkgbXV0YWJseSBhZGRpbmcgdG8gaXQgdGhlIHByb3BlcnRpZXMgb2Ygb2JqZWN0IGIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGEgVGhlIG9iamVjdCB0byBiZSBleHRlbmRlZFxuICogQHBhcmFtIHtPYmplY3R9IGIgVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgZnJvbVxuICogQHBhcmFtIHtPYmplY3R9IHRoaXNBcmcgVGhlIG9iamVjdCB0byBiaW5kIGZ1bmN0aW9uIHRvXG4gKlxuICogQHBhcmFtIHtCb29sZWFufSBbYWxsT3duS2V5c11cbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSByZXN1bHRpbmcgdmFsdWUgb2Ygb2JqZWN0IGFcbiAqL1xuY29uc3QgZXh0ZW5kID0gKGEsIGIsIHRoaXNBcmcsIHthbGxPd25LZXlzfT0ge30pID0+IHtcbiAgZm9yRWFjaChiLCAodmFsLCBrZXkpID0+IHtcbiAgICBpZiAodGhpc0FyZyAmJiBpc0Z1bmN0aW9uKHZhbCkpIHtcbiAgICAgIGFba2V5XSA9IGJpbmQodmFsLCB0aGlzQXJnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYVtrZXldID0gdmFsO1xuICAgIH1cbiAgfSwge2FsbE93bktleXN9KTtcbiAgcmV0dXJuIGE7XG59XG5cbi8qKlxuICogUmVtb3ZlIGJ5dGUgb3JkZXIgbWFya2VyLiBUaGlzIGNhdGNoZXMgRUYgQkIgQkYgKHRoZSBVVEYtOCBCT00pXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbnRlbnQgd2l0aCBCT01cbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBjb250ZW50IHZhbHVlIHdpdGhvdXQgQk9NXG4gKi9cbmNvbnN0IHN0cmlwQk9NID0gKGNvbnRlbnQpID0+IHtcbiAgaWYgKGNvbnRlbnQuY2hhckNvZGVBdCgwKSA9PT0gMHhGRUZGKSB7XG4gICAgY29udGVudCA9IGNvbnRlbnQuc2xpY2UoMSk7XG4gIH1cbiAgcmV0dXJuIGNvbnRlbnQ7XG59XG5cbi8qKlxuICogSW5oZXJpdCB0aGUgcHJvdG90eXBlIG1ldGhvZHMgZnJvbSBvbmUgY29uc3RydWN0b3IgaW50byBhbm90aGVyXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtmdW5jdGlvbn0gc3VwZXJDb25zdHJ1Y3RvclxuICogQHBhcmFtIHtvYmplY3R9IFtwcm9wc11cbiAqIEBwYXJhbSB7b2JqZWN0fSBbZGVzY3JpcHRvcnNdXG4gKlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmNvbnN0IGluaGVyaXRzID0gKGNvbnN0cnVjdG9yLCBzdXBlckNvbnN0cnVjdG9yLCBwcm9wcywgZGVzY3JpcHRvcnMpID0+IHtcbiAgY29uc3RydWN0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNvbnN0cnVjdG9yLnByb3RvdHlwZSwgZGVzY3JpcHRvcnMpO1xuICBjb25zdHJ1Y3Rvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjb25zdHJ1Y3RvcjtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvbnN0cnVjdG9yLCAnc3VwZXInLCB7XG4gICAgdmFsdWU6IHN1cGVyQ29uc3RydWN0b3IucHJvdG90eXBlXG4gIH0pO1xuICBwcm9wcyAmJiBPYmplY3QuYXNzaWduKGNvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvcHMpO1xufVxuXG4vKipcbiAqIFJlc29sdmUgb2JqZWN0IHdpdGggZGVlcCBwcm90b3R5cGUgY2hhaW4gdG8gYSBmbGF0IG9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZU9iaiBzb3VyY2Ugb2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gW2Rlc3RPYmpdXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufEJvb2xlYW59IFtmaWx0ZXJdXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJvcEZpbHRlcl1cbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0fVxuICovXG5jb25zdCB0b0ZsYXRPYmplY3QgPSAoc291cmNlT2JqLCBkZXN0T2JqLCBmaWx0ZXIsIHByb3BGaWx0ZXIpID0+IHtcbiAgbGV0IHByb3BzO1xuICBsZXQgaTtcbiAgbGV0IHByb3A7XG4gIGNvbnN0IG1lcmdlZCA9IHt9O1xuXG4gIGRlc3RPYmogPSBkZXN0T2JqIHx8IHt9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZXEtbnVsbCxlcWVxZXFcbiAgaWYgKHNvdXJjZU9iaiA9PSBudWxsKSByZXR1cm4gZGVzdE9iajtcblxuICBkbyB7XG4gICAgcHJvcHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhzb3VyY2VPYmopO1xuICAgIGkgPSBwcm9wcy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSA+IDApIHtcbiAgICAgIHByb3AgPSBwcm9wc1tpXTtcbiAgICAgIGlmICgoIXByb3BGaWx0ZXIgfHwgcHJvcEZpbHRlcihwcm9wLCBzb3VyY2VPYmosIGRlc3RPYmopKSAmJiAhbWVyZ2VkW3Byb3BdKSB7XG4gICAgICAgIGRlc3RPYmpbcHJvcF0gPSBzb3VyY2VPYmpbcHJvcF07XG4gICAgICAgIG1lcmdlZFtwcm9wXSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHNvdXJjZU9iaiA9IGZpbHRlciAhPT0gZmFsc2UgJiYgZ2V0UHJvdG90eXBlT2Yoc291cmNlT2JqKTtcbiAgfSB3aGlsZSAoc291cmNlT2JqICYmICghZmlsdGVyIHx8IGZpbHRlcihzb3VyY2VPYmosIGRlc3RPYmopKSAmJiBzb3VyY2VPYmogIT09IE9iamVjdC5wcm90b3R5cGUpO1xuXG4gIHJldHVybiBkZXN0T2JqO1xufVxuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciBhIHN0cmluZyBlbmRzIHdpdGggdGhlIGNoYXJhY3RlcnMgb2YgYSBzcGVjaWZpZWQgc3RyaW5nXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHBhcmFtIHtTdHJpbmd9IHNlYXJjaFN0cmluZ1xuICogQHBhcmFtIHtOdW1iZXJ9IFtwb3NpdGlvbj0gMF1cbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuY29uc3QgZW5kc1dpdGggPSAoc3RyLCBzZWFyY2hTdHJpbmcsIHBvc2l0aW9uKSA9PiB7XG4gIHN0ciA9IFN0cmluZyhzdHIpO1xuICBpZiAocG9zaXRpb24gPT09IHVuZGVmaW5lZCB8fCBwb3NpdGlvbiA+IHN0ci5sZW5ndGgpIHtcbiAgICBwb3NpdGlvbiA9IHN0ci5sZW5ndGg7XG4gIH1cbiAgcG9zaXRpb24gLT0gc2VhcmNoU3RyaW5nLmxlbmd0aDtcbiAgY29uc3QgbGFzdEluZGV4ID0gc3RyLmluZGV4T2Yoc2VhcmNoU3RyaW5nLCBwb3NpdGlvbik7XG4gIHJldHVybiBsYXN0SW5kZXggIT09IC0xICYmIGxhc3RJbmRleCA9PT0gcG9zaXRpb247XG59XG5cblxuLyoqXG4gKiBSZXR1cm5zIG5ldyBhcnJheSBmcm9tIGFycmF5IGxpa2Ugb2JqZWN0IG9yIG51bGwgaWYgZmFpbGVkXG4gKlxuICogQHBhcmFtIHsqfSBbdGhpbmddXG4gKlxuICogQHJldHVybnMgez9BcnJheX1cbiAqL1xuY29uc3QgdG9BcnJheSA9ICh0aGluZykgPT4ge1xuICBpZiAoIXRoaW5nKSByZXR1cm4gbnVsbDtcbiAgaWYgKGlzQXJyYXkodGhpbmcpKSByZXR1cm4gdGhpbmc7XG4gIGxldCBpID0gdGhpbmcubGVuZ3RoO1xuICBpZiAoIWlzTnVtYmVyKGkpKSByZXR1cm4gbnVsbDtcbiAgY29uc3QgYXJyID0gbmV3IEFycmF5KGkpO1xuICB3aGlsZSAoaS0tID4gMCkge1xuICAgIGFycltpXSA9IHRoaW5nW2ldO1xuICB9XG4gIHJldHVybiBhcnI7XG59XG5cbi8qKlxuICogQ2hlY2tpbmcgaWYgdGhlIFVpbnQ4QXJyYXkgZXhpc3RzIGFuZCBpZiBpdCBkb2VzLCBpdCByZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBjaGVja3MgaWYgdGhlXG4gKiB0aGluZyBwYXNzZWQgaW4gaXMgYW4gaW5zdGFuY2Ugb2YgVWludDhBcnJheVxuICpcbiAqIEBwYXJhbSB7VHlwZWRBcnJheX1cbiAqXG4gKiBAcmV0dXJucyB7QXJyYXl9XG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5jb25zdCBpc1R5cGVkQXJyYXkgPSAoVHlwZWRBcnJheSA9PiB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gIHJldHVybiB0aGluZyA9PiB7XG4gICAgcmV0dXJuIFR5cGVkQXJyYXkgJiYgdGhpbmcgaW5zdGFuY2VvZiBUeXBlZEFycmF5O1xuICB9O1xufSkodHlwZW9mIFVpbnQ4QXJyYXkgIT09ICd1bmRlZmluZWQnICYmIGdldFByb3RvdHlwZU9mKFVpbnQ4QXJyYXkpKTtcblxuLyoqXG4gKiBGb3IgZWFjaCBlbnRyeSBpbiB0aGUgb2JqZWN0LCBjYWxsIHRoZSBmdW5jdGlvbiB3aXRoIHRoZSBrZXkgYW5kIHZhbHVlLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0PGFueSwgYW55Pn0gb2JqIC0gVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiAtIFRoZSBmdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoIGVudHJ5LlxuICpcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5jb25zdCBmb3JFYWNoRW50cnkgPSAob2JqLCBmbikgPT4ge1xuICBjb25zdCBnZW5lcmF0b3IgPSBvYmogJiYgb2JqW1N5bWJvbC5pdGVyYXRvcl07XG5cbiAgY29uc3QgaXRlcmF0b3IgPSBnZW5lcmF0b3IuY2FsbChvYmopO1xuXG4gIGxldCByZXN1bHQ7XG5cbiAgd2hpbGUgKChyZXN1bHQgPSBpdGVyYXRvci5uZXh0KCkpICYmICFyZXN1bHQuZG9uZSkge1xuICAgIGNvbnN0IHBhaXIgPSByZXN1bHQudmFsdWU7XG4gICAgZm4uY2FsbChvYmosIHBhaXJbMF0sIHBhaXJbMV0pO1xuICB9XG59XG5cbi8qKlxuICogSXQgdGFrZXMgYSByZWd1bGFyIGV4cHJlc3Npb24gYW5kIGEgc3RyaW5nLCBhbmQgcmV0dXJucyBhbiBhcnJheSBvZiBhbGwgdGhlIG1hdGNoZXNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVnRXhwIC0gVGhlIHJlZ3VsYXIgZXhwcmVzc2lvbiB0byBtYXRjaCBhZ2FpbnN0LlxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciAtIFRoZSBzdHJpbmcgdG8gc2VhcmNoLlxuICpcbiAqIEByZXR1cm5zIHtBcnJheTxib29sZWFuPn1cbiAqL1xuY29uc3QgbWF0Y2hBbGwgPSAocmVnRXhwLCBzdHIpID0+IHtcbiAgbGV0IG1hdGNoZXM7XG4gIGNvbnN0IGFyciA9IFtdO1xuXG4gIHdoaWxlICgobWF0Y2hlcyA9IHJlZ0V4cC5leGVjKHN0cikpICE9PSBudWxsKSB7XG4gICAgYXJyLnB1c2gobWF0Y2hlcyk7XG4gIH1cblxuICByZXR1cm4gYXJyO1xufVxuXG4vKiBDaGVja2luZyBpZiB0aGUga2luZE9mVGVzdCBmdW5jdGlvbiByZXR1cm5zIHRydWUgd2hlbiBwYXNzZWQgYW4gSFRNTEZvcm1FbGVtZW50LiAqL1xuY29uc3QgaXNIVE1MRm9ybSA9IGtpbmRPZlRlc3QoJ0hUTUxGb3JtRWxlbWVudCcpO1xuXG5jb25zdCB0b0NhbWVsQ2FzZSA9IHN0ciA9PiB7XG4gIHJldHVybiBzdHIudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9bLV9cXHNdKFthLXpcXGRdKShcXHcqKS9nLFxuICAgIGZ1bmN0aW9uIHJlcGxhY2VyKG0sIHAxLCBwMikge1xuICAgICAgcmV0dXJuIHAxLnRvVXBwZXJDYXNlKCkgKyBwMjtcbiAgICB9XG4gICk7XG59O1xuXG4vKiBDcmVhdGluZyBhIGZ1bmN0aW9uIHRoYXQgd2lsbCBjaGVjayBpZiBhbiBvYmplY3QgaGFzIGEgcHJvcGVydHkuICovXG5jb25zdCBoYXNPd25Qcm9wZXJ0eSA9ICgoe2hhc093blByb3BlcnR5fSkgPT4gKG9iaiwgcHJvcCkgPT4gaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKShPYmplY3QucHJvdG90eXBlKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFJlZ0V4cCBvYmplY3RcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgUmVnRXhwIG9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzUmVnRXhwID0ga2luZE9mVGVzdCgnUmVnRXhwJyk7XG5cbmNvbnN0IHJlZHVjZURlc2NyaXB0b3JzID0gKG9iaiwgcmVkdWNlcikgPT4ge1xuICBjb25zdCBkZXNjcmlwdG9ycyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKG9iaik7XG4gIGNvbnN0IHJlZHVjZWREZXNjcmlwdG9ycyA9IHt9O1xuXG4gIGZvckVhY2goZGVzY3JpcHRvcnMsIChkZXNjcmlwdG9yLCBuYW1lKSA9PiB7XG4gICAgbGV0IHJldDtcbiAgICBpZiAoKHJldCA9IHJlZHVjZXIoZGVzY3JpcHRvciwgbmFtZSwgb2JqKSkgIT09IGZhbHNlKSB7XG4gICAgICByZWR1Y2VkRGVzY3JpcHRvcnNbbmFtZV0gPSByZXQgfHwgZGVzY3JpcHRvcjtcbiAgICB9XG4gIH0pO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKG9iaiwgcmVkdWNlZERlc2NyaXB0b3JzKTtcbn1cblxuLyoqXG4gKiBNYWtlcyBhbGwgbWV0aG9kcyByZWFkLW9ubHlcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAqL1xuXG5jb25zdCBmcmVlemVNZXRob2RzID0gKG9iaikgPT4ge1xuICByZWR1Y2VEZXNjcmlwdG9ycyhvYmosIChkZXNjcmlwdG9yLCBuYW1lKSA9PiB7XG4gICAgLy8gc2tpcCByZXN0cmljdGVkIHByb3BzIGluIHN0cmljdCBtb2RlXG4gICAgaWYgKGlzRnVuY3Rpb24ob2JqKSAmJiBbJ2FyZ3VtZW50cycsICdjYWxsZXInLCAnY2FsbGVlJ10uaW5kZXhPZihuYW1lKSAhPT0gLTEpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBjb25zdCB2YWx1ZSA9IG9ialtuYW1lXTtcblxuICAgIGlmICghaXNGdW5jdGlvbih2YWx1ZSkpIHJldHVybjtcblxuICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGZhbHNlO1xuXG4gICAgaWYgKCd3cml0YWJsZScgaW4gZGVzY3JpcHRvcikge1xuICAgICAgZGVzY3JpcHRvci53cml0YWJsZSA9IGZhbHNlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghZGVzY3JpcHRvci5zZXQpIHtcbiAgICAgIGRlc2NyaXB0b3Iuc2V0ID0gKCkgPT4ge1xuICAgICAgICB0aHJvdyBFcnJvcignQ2FuIG5vdCByZXdyaXRlIHJlYWQtb25seSBtZXRob2QgXFwnJyArIG5hbWUgKyAnXFwnJyk7XG4gICAgICB9O1xuICAgIH1cbiAgfSk7XG59XG5cbmNvbnN0IHRvT2JqZWN0U2V0ID0gKGFycmF5T3JTdHJpbmcsIGRlbGltaXRlcikgPT4ge1xuICBjb25zdCBvYmogPSB7fTtcblxuICBjb25zdCBkZWZpbmUgPSAoYXJyKSA9PiB7XG4gICAgYXJyLmZvckVhY2godmFsdWUgPT4ge1xuICAgICAgb2JqW3ZhbHVlXSA9IHRydWU7XG4gICAgfSk7XG4gIH1cblxuICBpc0FycmF5KGFycmF5T3JTdHJpbmcpID8gZGVmaW5lKGFycmF5T3JTdHJpbmcpIDogZGVmaW5lKFN0cmluZyhhcnJheU9yU3RyaW5nKS5zcGxpdChkZWxpbWl0ZXIpKTtcblxuICByZXR1cm4gb2JqO1xufVxuXG5jb25zdCBub29wID0gKCkgPT4ge31cblxuY29uc3QgdG9GaW5pdGVOdW1iZXIgPSAodmFsdWUsIGRlZmF1bHRWYWx1ZSkgPT4ge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiBOdW1iZXIuaXNGaW5pdGUodmFsdWUgPSArdmFsdWUpID8gdmFsdWUgOiBkZWZhdWx0VmFsdWU7XG59XG5cbmNvbnN0IEFMUEhBID0gJ2FiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6J1xuXG5jb25zdCBESUdJVCA9ICcwMTIzNDU2Nzg5JztcblxuY29uc3QgQUxQSEFCRVQgPSB7XG4gIERJR0lULFxuICBBTFBIQSxcbiAgQUxQSEFfRElHSVQ6IEFMUEhBICsgQUxQSEEudG9VcHBlckNhc2UoKSArIERJR0lUXG59XG5cbmNvbnN0IGdlbmVyYXRlU3RyaW5nID0gKHNpemUgPSAxNiwgYWxwaGFiZXQgPSBBTFBIQUJFVC5BTFBIQV9ESUdJVCkgPT4ge1xuICBsZXQgc3RyID0gJyc7XG4gIGNvbnN0IHtsZW5ndGh9ID0gYWxwaGFiZXQ7XG4gIHdoaWxlIChzaXplLS0pIHtcbiAgICBzdHIgKz0gYWxwaGFiZXRbTWF0aC5yYW5kb20oKSAqIGxlbmd0aHwwXVxuICB9XG5cbiAgcmV0dXJuIHN0cjtcbn1cblxuLyoqXG4gKiBJZiB0aGUgdGhpbmcgaXMgYSBGb3JtRGF0YSBvYmplY3QsIHJldHVybiB0cnVlLCBvdGhlcndpc2UgcmV0dXJuIGZhbHNlLlxuICpcbiAqIEBwYXJhbSB7dW5rbm93bn0gdGhpbmcgLSBUaGUgdGhpbmcgdG8gY2hlY2suXG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzU3BlY0NvbXBsaWFudEZvcm0odGhpbmcpIHtcbiAgcmV0dXJuICEhKHRoaW5nICYmIGlzRnVuY3Rpb24odGhpbmcuYXBwZW5kKSAmJiB0aGluZ1tTeW1ib2wudG9TdHJpbmdUYWddID09PSAnRm9ybURhdGEnICYmIHRoaW5nW1N5bWJvbC5pdGVyYXRvcl0pO1xufVxuXG5jb25zdCB0b0pTT05PYmplY3QgPSAob2JqKSA9PiB7XG4gIGNvbnN0IHN0YWNrID0gbmV3IEFycmF5KDEwKTtcblxuICBjb25zdCB2aXNpdCA9IChzb3VyY2UsIGkpID0+IHtcblxuICAgIGlmIChpc09iamVjdChzb3VyY2UpKSB7XG4gICAgICBpZiAoc3RhY2suaW5kZXhPZihzb3VyY2UpID49IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZighKCd0b0pTT04nIGluIHNvdXJjZSkpIHtcbiAgICAgICAgc3RhY2tbaV0gPSBzb3VyY2U7XG4gICAgICAgIGNvbnN0IHRhcmdldCA9IGlzQXJyYXkoc291cmNlKSA/IFtdIDoge307XG5cbiAgICAgICAgZm9yRWFjaChzb3VyY2UsICh2YWx1ZSwga2V5KSA9PiB7XG4gICAgICAgICAgY29uc3QgcmVkdWNlZFZhbHVlID0gdmlzaXQodmFsdWUsIGkgKyAxKTtcbiAgICAgICAgICAhaXNVbmRlZmluZWQocmVkdWNlZFZhbHVlKSAmJiAodGFyZ2V0W2tleV0gPSByZWR1Y2VkVmFsdWUpO1xuICAgICAgICB9KTtcblxuICAgICAgICBzdGFja1tpXSA9IHVuZGVmaW5lZDtcblxuICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzb3VyY2U7XG4gIH1cblxuICByZXR1cm4gdmlzaXQob2JqLCAwKTtcbn1cblxuY29uc3QgaXNBc3luY0ZuID0ga2luZE9mVGVzdCgnQXN5bmNGdW5jdGlvbicpO1xuXG5jb25zdCBpc1RoZW5hYmxlID0gKHRoaW5nKSA9PlxuICB0aGluZyAmJiAoaXNPYmplY3QodGhpbmcpIHx8IGlzRnVuY3Rpb24odGhpbmcpKSAmJiBpc0Z1bmN0aW9uKHRoaW5nLnRoZW4pICYmIGlzRnVuY3Rpb24odGhpbmcuY2F0Y2gpO1xuXG4vLyBvcmlnaW5hbCBjb2RlXG4vLyBodHRwczovL2dpdGh1Yi5jb20vRGlnaXRhbEJyYWluSlMvQXhpb3NQcm9taXNlL2Jsb2IvMTZkZWFiMTM3MTBlYzA5Nzc5OTIyMTMxZjNmYTU5NTQzMjBmODNhYi9saWIvdXRpbHMuanMjTDExLUwzNFxuXG5jb25zdCBfc2V0SW1tZWRpYXRlID0gKChzZXRJbW1lZGlhdGVTdXBwb3J0ZWQsIHBvc3RNZXNzYWdlU3VwcG9ydGVkKSA9PiB7XG4gIGlmIChzZXRJbW1lZGlhdGVTdXBwb3J0ZWQpIHtcbiAgICByZXR1cm4gc2V0SW1tZWRpYXRlO1xuICB9XG5cbiAgcmV0dXJuIHBvc3RNZXNzYWdlU3VwcG9ydGVkID8gKCh0b2tlbiwgY2FsbGJhY2tzKSA9PiB7XG4gICAgX2dsb2JhbC5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCAoe3NvdXJjZSwgZGF0YX0pID0+IHtcbiAgICAgIGlmIChzb3VyY2UgPT09IF9nbG9iYWwgJiYgZGF0YSA9PT0gdG9rZW4pIHtcbiAgICAgICAgY2FsbGJhY2tzLmxlbmd0aCAmJiBjYWxsYmFja3Muc2hpZnQoKSgpO1xuICAgICAgfVxuICAgIH0sIGZhbHNlKTtcblxuICAgIHJldHVybiAoY2IpID0+IHtcbiAgICAgIGNhbGxiYWNrcy5wdXNoKGNiKTtcbiAgICAgIF9nbG9iYWwucG9zdE1lc3NhZ2UodG9rZW4sIFwiKlwiKTtcbiAgICB9XG4gIH0pKGBheGlvc0Ake01hdGgucmFuZG9tKCl9YCwgW10pIDogKGNiKSA9PiBzZXRUaW1lb3V0KGNiKTtcbn0pKFxuICB0eXBlb2Ygc2V0SW1tZWRpYXRlID09PSAnZnVuY3Rpb24nLFxuICBpc0Z1bmN0aW9uKF9nbG9iYWwucG9zdE1lc3NhZ2UpXG4pO1xuXG5jb25zdCBhc2FwID0gdHlwZW9mIHF1ZXVlTWljcm90YXNrICE9PSAndW5kZWZpbmVkJyA/XG4gIHF1ZXVlTWljcm90YXNrLmJpbmQoX2dsb2JhbCkgOiAoIHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiBwcm9jZXNzLm5leHRUaWNrIHx8IF9zZXRJbW1lZGlhdGUpO1xuXG4vLyAqKioqKioqKioqKioqKioqKioqKipcblxuZXhwb3J0IGRlZmF1bHQge1xuICBpc0FycmF5LFxuICBpc0FycmF5QnVmZmVyLFxuICBpc0J1ZmZlcixcbiAgaXNGb3JtRGF0YSxcbiAgaXNBcnJheUJ1ZmZlclZpZXcsXG4gIGlzU3RyaW5nLFxuICBpc051bWJlcixcbiAgaXNCb29sZWFuLFxuICBpc09iamVjdCxcbiAgaXNQbGFpbk9iamVjdCxcbiAgaXNSZWFkYWJsZVN0cmVhbSxcbiAgaXNSZXF1ZXN0LFxuICBpc1Jlc3BvbnNlLFxuICBpc0hlYWRlcnMsXG4gIGlzVW5kZWZpbmVkLFxuICBpc0RhdGUsXG4gIGlzRmlsZSxcbiAgaXNCbG9iLFxuICBpc1JlZ0V4cCxcbiAgaXNGdW5jdGlvbixcbiAgaXNTdHJlYW0sXG4gIGlzVVJMU2VhcmNoUGFyYW1zLFxuICBpc1R5cGVkQXJyYXksXG4gIGlzRmlsZUxpc3QsXG4gIGZvckVhY2gsXG4gIG1lcmdlLFxuICBleHRlbmQsXG4gIHRyaW0sXG4gIHN0cmlwQk9NLFxuICBpbmhlcml0cyxcbiAgdG9GbGF0T2JqZWN0LFxuICBraW5kT2YsXG4gIGtpbmRPZlRlc3QsXG4gIGVuZHNXaXRoLFxuICB0b0FycmF5LFxuICBmb3JFYWNoRW50cnksXG4gIG1hdGNoQWxsLFxuICBpc0hUTUxGb3JtLFxuICBoYXNPd25Qcm9wZXJ0eSxcbiAgaGFzT3duUHJvcDogaGFzT3duUHJvcGVydHksIC8vIGFuIGFsaWFzIHRvIGF2b2lkIEVTTGludCBuby1wcm90b3R5cGUtYnVpbHRpbnMgZGV0ZWN0aW9uXG4gIHJlZHVjZURlc2NyaXB0b3JzLFxuICBmcmVlemVNZXRob2RzLFxuICB0b09iamVjdFNldCxcbiAgdG9DYW1lbENhc2UsXG4gIG5vb3AsXG4gIHRvRmluaXRlTnVtYmVyLFxuICBmaW5kS2V5LFxuICBnbG9iYWw6IF9nbG9iYWwsXG4gIGlzQ29udGV4dERlZmluZWQsXG4gIEFMUEhBQkVULFxuICBnZW5lcmF0ZVN0cmluZyxcbiAgaXNTcGVjQ29tcGxpYW50Rm9ybSxcbiAgdG9KU09OT2JqZWN0LFxuICBpc0FzeW5jRm4sXG4gIGlzVGhlbmFibGUsXG4gIHNldEltbWVkaWF0ZTogX3NldEltbWVkaWF0ZSxcbiAgYXNhcFxufTtcbiIsICIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5cbi8qKlxuICogQ3JlYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBtZXNzYWdlLCBjb25maWcsIGVycm9yIGNvZGUsIHJlcXVlc3QgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIFRoZSBlcnJvciBtZXNzYWdlLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnXSBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVzcG9uc2VdIFRoZSByZXNwb25zZS5cbiAqXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBjcmVhdGVkIGVycm9yLlxuICovXG5mdW5jdGlvbiBBeGlvc0Vycm9yKG1lc3NhZ2UsIGNvZGUsIGNvbmZpZywgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgRXJyb3IuY2FsbCh0aGlzKTtcblxuICBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIHtcbiAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCB0aGlzLmNvbnN0cnVjdG9yKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnN0YWNrID0gKG5ldyBFcnJvcigpKS5zdGFjaztcbiAgfVxuXG4gIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG4gIHRoaXMubmFtZSA9ICdBeGlvc0Vycm9yJztcbiAgY29kZSAmJiAodGhpcy5jb2RlID0gY29kZSk7XG4gIGNvbmZpZyAmJiAodGhpcy5jb25maWcgPSBjb25maWcpO1xuICByZXF1ZXN0ICYmICh0aGlzLnJlcXVlc3QgPSByZXF1ZXN0KTtcbiAgaWYgKHJlc3BvbnNlKSB7XG4gICAgdGhpcy5yZXNwb25zZSA9IHJlc3BvbnNlO1xuICAgIHRoaXMuc3RhdHVzID0gcmVzcG9uc2Uuc3RhdHVzID8gcmVzcG9uc2Uuc3RhdHVzIDogbnVsbDtcbiAgfVxufVxuXG51dGlscy5pbmhlcml0cyhBeGlvc0Vycm9yLCBFcnJvciwge1xuICB0b0pTT046IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLy8gU3RhbmRhcmRcbiAgICAgIG1lc3NhZ2U6IHRoaXMubWVzc2FnZSxcbiAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgIC8vIE1pY3Jvc29mdFxuICAgICAgZGVzY3JpcHRpb246IHRoaXMuZGVzY3JpcHRpb24sXG4gICAgICBudW1iZXI6IHRoaXMubnVtYmVyLFxuICAgICAgLy8gTW96aWxsYVxuICAgICAgZmlsZU5hbWU6IHRoaXMuZmlsZU5hbWUsXG4gICAgICBsaW5lTnVtYmVyOiB0aGlzLmxpbmVOdW1iZXIsXG4gICAgICBjb2x1bW5OdW1iZXI6IHRoaXMuY29sdW1uTnVtYmVyLFxuICAgICAgc3RhY2s6IHRoaXMuc3RhY2ssXG4gICAgICAvLyBBeGlvc1xuICAgICAgY29uZmlnOiB1dGlscy50b0pTT05PYmplY3QodGhpcy5jb25maWcpLFxuICAgICAgY29kZTogdGhpcy5jb2RlLFxuICAgICAgc3RhdHVzOiB0aGlzLnN0YXR1c1xuICAgIH07XG4gIH1cbn0pO1xuXG5jb25zdCBwcm90b3R5cGUgPSBBeGlvc0Vycm9yLnByb3RvdHlwZTtcbmNvbnN0IGRlc2NyaXB0b3JzID0ge307XG5cbltcbiAgJ0VSUl9CQURfT1BUSU9OX1ZBTFVFJyxcbiAgJ0VSUl9CQURfT1BUSU9OJyxcbiAgJ0VDT05OQUJPUlRFRCcsXG4gICdFVElNRURPVVQnLFxuICAnRVJSX05FVFdPUksnLFxuICAnRVJSX0ZSX1RPT19NQU5ZX1JFRElSRUNUUycsXG4gICdFUlJfREVQUkVDQVRFRCcsXG4gICdFUlJfQkFEX1JFU1BPTlNFJyxcbiAgJ0VSUl9CQURfUkVRVUVTVCcsXG4gICdFUlJfQ0FOQ0VMRUQnLFxuICAnRVJSX05PVF9TVVBQT1JUJyxcbiAgJ0VSUl9JTlZBTElEX1VSTCdcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5dLmZvckVhY2goY29kZSA9PiB7XG4gIGRlc2NyaXB0b3JzW2NvZGVdID0ge3ZhbHVlOiBjb2RlfTtcbn0pO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyhBeGlvc0Vycm9yLCBkZXNjcmlwdG9ycyk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkocHJvdG90eXBlLCAnaXNBeGlvc0Vycm9yJywge3ZhbHVlOiB0cnVlfSk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5BeGlvc0Vycm9yLmZyb20gPSAoZXJyb3IsIGNvZGUsIGNvbmZpZywgcmVxdWVzdCwgcmVzcG9uc2UsIGN1c3RvbVByb3BzKSA9PiB7XG4gIGNvbnN0IGF4aW9zRXJyb3IgPSBPYmplY3QuY3JlYXRlKHByb3RvdHlwZSk7XG5cbiAgdXRpbHMudG9GbGF0T2JqZWN0KGVycm9yLCBheGlvc0Vycm9yLCBmdW5jdGlvbiBmaWx0ZXIob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAhPT0gRXJyb3IucHJvdG90eXBlO1xuICB9LCBwcm9wID0+IHtcbiAgICByZXR1cm4gcHJvcCAhPT0gJ2lzQXhpb3NFcnJvcic7XG4gIH0pO1xuXG4gIEF4aW9zRXJyb3IuY2FsbChheGlvc0Vycm9yLCBlcnJvci5tZXNzYWdlLCBjb2RlLCBjb25maWcsIHJlcXVlc3QsIHJlc3BvbnNlKTtcblxuICBheGlvc0Vycm9yLmNhdXNlID0gZXJyb3I7XG5cbiAgYXhpb3NFcnJvci5uYW1lID0gZXJyb3IubmFtZTtcblxuICBjdXN0b21Qcm9wcyAmJiBPYmplY3QuYXNzaWduKGF4aW9zRXJyb3IsIGN1c3RvbVByb3BzKTtcblxuICByZXR1cm4gYXhpb3NFcnJvcjtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEF4aW9zRXJyb3I7XG4iLCAiLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHN0cmljdFxuZXhwb3J0IGRlZmF1bHQgbnVsbDtcbiIsICIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5pbXBvcnQgQXhpb3NFcnJvciBmcm9tICcuLi9jb3JlL0F4aW9zRXJyb3IuanMnO1xuLy8gdGVtcG9yYXJ5IGhvdGZpeCB0byBhdm9pZCBjaXJjdWxhciByZWZlcmVuY2VzIHVudGlsIEF4aW9zVVJMU2VhcmNoUGFyYW1zIGlzIHJlZmFjdG9yZWRcbmltcG9ydCBQbGF0Zm9ybUZvcm1EYXRhIGZyb20gJy4uL3BsYXRmb3JtL25vZGUvY2xhc3Nlcy9Gb3JtRGF0YS5qcyc7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyBpZiB0aGUgZ2l2ZW4gdGhpbmcgaXMgYSBhcnJheSBvciBqcyBvYmplY3QuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHRoaW5nIC0gVGhlIG9iamVjdCBvciBhcnJheSB0byBiZSB2aXNpdGVkLlxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc1Zpc2l0YWJsZSh0aGluZykge1xuICByZXR1cm4gdXRpbHMuaXNQbGFpbk9iamVjdCh0aGluZykgfHwgdXRpbHMuaXNBcnJheSh0aGluZyk7XG59XG5cbi8qKlxuICogSXQgcmVtb3ZlcyB0aGUgYnJhY2tldHMgZnJvbSB0aGUgZW5kIG9mIGEgc3RyaW5nXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSAtIFRoZSBrZXkgb2YgdGhlIHBhcmFtZXRlci5cbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSB0aGUga2V5IHdpdGhvdXQgdGhlIGJyYWNrZXRzLlxuICovXG5mdW5jdGlvbiByZW1vdmVCcmFja2V0cyhrZXkpIHtcbiAgcmV0dXJuIHV0aWxzLmVuZHNXaXRoKGtleSwgJ1tdJykgPyBrZXkuc2xpY2UoMCwgLTIpIDoga2V5O1xufVxuXG4vKipcbiAqIEl0IHRha2VzIGEgcGF0aCwgYSBrZXksIGFuZCBhIGJvb2xlYW4sIGFuZCByZXR1cm5zIGEgc3RyaW5nXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGggLSBUaGUgcGF0aCB0byB0aGUgY3VycmVudCBrZXkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IC0gVGhlIGtleSBvZiB0aGUgY3VycmVudCBvYmplY3QgYmVpbmcgaXRlcmF0ZWQgb3Zlci5cbiAqIEBwYXJhbSB7c3RyaW5nfSBkb3RzIC0gSWYgdHJ1ZSwgdGhlIGtleSB3aWxsIGJlIHJlbmRlcmVkIHdpdGggZG90cyBpbnN0ZWFkIG9mIGJyYWNrZXRzLlxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBwYXRoIHRvIHRoZSBjdXJyZW50IGtleS5cbiAqL1xuZnVuY3Rpb24gcmVuZGVyS2V5KHBhdGgsIGtleSwgZG90cykge1xuICBpZiAoIXBhdGgpIHJldHVybiBrZXk7XG4gIHJldHVybiBwYXRoLmNvbmNhdChrZXkpLm1hcChmdW5jdGlvbiBlYWNoKHRva2VuLCBpKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgdG9rZW4gPSByZW1vdmVCcmFja2V0cyh0b2tlbik7XG4gICAgcmV0dXJuICFkb3RzICYmIGkgPyAnWycgKyB0b2tlbiArICddJyA6IHRva2VuO1xuICB9KS5qb2luKGRvdHMgPyAnLicgOiAnJyk7XG59XG5cbi8qKlxuICogSWYgdGhlIGFycmF5IGlzIGFuIGFycmF5IGFuZCBub25lIG9mIGl0cyBlbGVtZW50cyBhcmUgdmlzaXRhYmxlLCB0aGVuIGl0J3MgYSBmbGF0IGFycmF5LlxuICpcbiAqIEBwYXJhbSB7QXJyYXk8YW55Pn0gYXJyIC0gVGhlIGFycmF5IHRvIGNoZWNrXG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzRmxhdEFycmF5KGFycikge1xuICByZXR1cm4gdXRpbHMuaXNBcnJheShhcnIpICYmICFhcnIuc29tZShpc1Zpc2l0YWJsZSk7XG59XG5cbmNvbnN0IHByZWRpY2F0ZXMgPSB1dGlscy50b0ZsYXRPYmplY3QodXRpbHMsIHt9LCBudWxsLCBmdW5jdGlvbiBmaWx0ZXIocHJvcCkge1xuICByZXR1cm4gL15pc1tBLVpdLy50ZXN0KHByb3ApO1xufSk7XG5cbi8qKlxuICogQ29udmVydCBhIGRhdGEgb2JqZWN0IHRvIEZvcm1EYXRhXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9ialxuICogQHBhcmFtIHs/T2JqZWN0fSBbZm9ybURhdGFdXG4gKiBAcGFyYW0gez9PYmplY3R9IFtvcHRpb25zXVxuICogQHBhcmFtIHtGdW5jdGlvbn0gW29wdGlvbnMudmlzaXRvcl1cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMubWV0YVRva2VucyA9IHRydWVdXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLmRvdHMgPSBmYWxzZV1cbiAqIEBwYXJhbSB7P0Jvb2xlYW59IFtvcHRpb25zLmluZGV4ZXMgPSBmYWxzZV1cbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0fVxuICoqL1xuXG4vKipcbiAqIEl0IGNvbnZlcnRzIGFuIG9iamVjdCBpbnRvIGEgRm9ybURhdGEgb2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3Q8YW55LCBhbnk+fSBvYmogLSBUaGUgb2JqZWN0IHRvIGNvbnZlcnQgdG8gZm9ybSBkYXRhLlxuICogQHBhcmFtIHtzdHJpbmd9IGZvcm1EYXRhIC0gVGhlIEZvcm1EYXRhIG9iamVjdCB0byBhcHBlbmQgdG8uXG4gKiBAcGFyYW0ge09iamVjdDxzdHJpbmcsIGFueT59IG9wdGlvbnNcbiAqXG4gKiBAcmV0dXJuc1xuICovXG5mdW5jdGlvbiB0b0Zvcm1EYXRhKG9iaiwgZm9ybURhdGEsIG9wdGlvbnMpIHtcbiAgaWYgKCF1dGlscy5pc09iamVjdChvYmopKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcigndGFyZ2V0IG11c3QgYmUgYW4gb2JqZWN0Jyk7XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgZm9ybURhdGEgPSBmb3JtRGF0YSB8fCBuZXcgKFBsYXRmb3JtRm9ybURhdGEgfHwgRm9ybURhdGEpKCk7XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gIG9wdGlvbnMgPSB1dGlscy50b0ZsYXRPYmplY3Qob3B0aW9ucywge1xuICAgIG1ldGFUb2tlbnM6IHRydWUsXG4gICAgZG90czogZmFsc2UsXG4gICAgaW5kZXhlczogZmFsc2VcbiAgfSwgZmFsc2UsIGZ1bmN0aW9uIGRlZmluZWQob3B0aW9uLCBzb3VyY2UpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZXEtbnVsbCxlcWVxZXFcbiAgICByZXR1cm4gIXV0aWxzLmlzVW5kZWZpbmVkKHNvdXJjZVtvcHRpb25dKTtcbiAgfSk7XG5cbiAgY29uc3QgbWV0YVRva2VucyA9IG9wdGlvbnMubWV0YVRva2VucztcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVzZS1iZWZvcmUtZGVmaW5lXG4gIGNvbnN0IHZpc2l0b3IgPSBvcHRpb25zLnZpc2l0b3IgfHwgZGVmYXVsdFZpc2l0b3I7XG4gIGNvbnN0IGRvdHMgPSBvcHRpb25zLmRvdHM7XG4gIGNvbnN0IGluZGV4ZXMgPSBvcHRpb25zLmluZGV4ZXM7XG4gIGNvbnN0IF9CbG9iID0gb3B0aW9ucy5CbG9iIHx8IHR5cGVvZiBCbG9iICE9PSAndW5kZWZpbmVkJyAmJiBCbG9iO1xuICBjb25zdCB1c2VCbG9iID0gX0Jsb2IgJiYgdXRpbHMuaXNTcGVjQ29tcGxpYW50Rm9ybShmb3JtRGF0YSk7XG5cbiAgaWYgKCF1dGlscy5pc0Z1bmN0aW9uKHZpc2l0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcigndmlzaXRvciBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbnZlcnRWYWx1ZSh2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkgcmV0dXJuICcnO1xuXG4gICAgaWYgKHV0aWxzLmlzRGF0ZSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiB2YWx1ZS50b0lTT1N0cmluZygpO1xuICAgIH1cblxuICAgIGlmICghdXNlQmxvYiAmJiB1dGlscy5pc0Jsb2IodmFsdWUpKSB7XG4gICAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcignQmxvYiBpcyBub3Qgc3VwcG9ydGVkLiBVc2UgYSBCdWZmZXIgaW5zdGVhZC4nKTtcbiAgICB9XG5cbiAgICBpZiAodXRpbHMuaXNBcnJheUJ1ZmZlcih2YWx1ZSkgfHwgdXRpbHMuaXNUeXBlZEFycmF5KHZhbHVlKSkge1xuICAgICAgcmV0dXJuIHVzZUJsb2IgJiYgdHlwZW9mIEJsb2IgPT09ICdmdW5jdGlvbicgPyBuZXcgQmxvYihbdmFsdWVdKSA6IEJ1ZmZlci5mcm9tKHZhbHVlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogRGVmYXVsdCB2aXNpdG9yLlxuICAgKlxuICAgKiBAcGFyYW0geyp9IHZhbHVlXG4gICAqIEBwYXJhbSB7U3RyaW5nfE51bWJlcn0ga2V5XG4gICAqIEBwYXJhbSB7QXJyYXk8U3RyaW5nfE51bWJlcj59IHBhdGhcbiAgICogQHRoaXMge0Zvcm1EYXRhfVxuICAgKlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gcmV0dXJuIHRydWUgdG8gdmlzaXQgdGhlIGVhY2ggcHJvcCBvZiB0aGUgdmFsdWUgcmVjdXJzaXZlbHlcbiAgICovXG4gIGZ1bmN0aW9uIGRlZmF1bHRWaXNpdG9yKHZhbHVlLCBrZXksIHBhdGgpIHtcbiAgICBsZXQgYXJyID0gdmFsdWU7XG5cbiAgICBpZiAodmFsdWUgJiYgIXBhdGggJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgICAgaWYgKHV0aWxzLmVuZHNXaXRoKGtleSwgJ3t9JykpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICAgIGtleSA9IG1ldGFUb2tlbnMgPyBrZXkgOiBrZXkuc2xpY2UoMCwgLTIpO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgICAgdmFsdWUgPSBKU09OLnN0cmluZ2lmeSh2YWx1ZSk7XG4gICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAodXRpbHMuaXNBcnJheSh2YWx1ZSkgJiYgaXNGbGF0QXJyYXkodmFsdWUpKSB8fFxuICAgICAgICAoKHV0aWxzLmlzRmlsZUxpc3QodmFsdWUpIHx8IHV0aWxzLmVuZHNXaXRoKGtleSwgJ1tdJykpICYmIChhcnIgPSB1dGlscy50b0FycmF5KHZhbHVlKSlcbiAgICAgICAgKSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgICAga2V5ID0gcmVtb3ZlQnJhY2tldHMoa2V5KTtcblxuICAgICAgICBhcnIuZm9yRWFjaChmdW5jdGlvbiBlYWNoKGVsLCBpbmRleCkge1xuICAgICAgICAgICEodXRpbHMuaXNVbmRlZmluZWQoZWwpIHx8IGVsID09PSBudWxsKSAmJiBmb3JtRGF0YS5hcHBlbmQoXG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmVzdGVkLXRlcm5hcnlcbiAgICAgICAgICAgIGluZGV4ZXMgPT09IHRydWUgPyByZW5kZXJLZXkoW2tleV0sIGluZGV4LCBkb3RzKSA6IChpbmRleGVzID09PSBudWxsID8ga2V5IDoga2V5ICsgJ1tdJyksXG4gICAgICAgICAgICBjb252ZXJ0VmFsdWUoZWwpXG4gICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaXNWaXNpdGFibGUodmFsdWUpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBmb3JtRGF0YS5hcHBlbmQocmVuZGVyS2V5KHBhdGgsIGtleSwgZG90cyksIGNvbnZlcnRWYWx1ZSh2YWx1ZSkpO1xuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgY29uc3Qgc3RhY2sgPSBbXTtcblxuICBjb25zdCBleHBvc2VkSGVscGVycyA9IE9iamVjdC5hc3NpZ24ocHJlZGljYXRlcywge1xuICAgIGRlZmF1bHRWaXNpdG9yLFxuICAgIGNvbnZlcnRWYWx1ZSxcbiAgICBpc1Zpc2l0YWJsZVxuICB9KTtcblxuICBmdW5jdGlvbiBidWlsZCh2YWx1ZSwgcGF0aCkge1xuICAgIGlmICh1dGlscy5pc1VuZGVmaW5lZCh2YWx1ZSkpIHJldHVybjtcblxuICAgIGlmIChzdGFjay5pbmRleE9mKHZhbHVlKSAhPT0gLTEpIHtcbiAgICAgIHRocm93IEVycm9yKCdDaXJjdWxhciByZWZlcmVuY2UgZGV0ZWN0ZWQgaW4gJyArIHBhdGguam9pbignLicpKTtcbiAgICB9XG5cbiAgICBzdGFjay5wdXNoKHZhbHVlKTtcblxuICAgIHV0aWxzLmZvckVhY2godmFsdWUsIGZ1bmN0aW9uIGVhY2goZWwsIGtleSkge1xuICAgICAgY29uc3QgcmVzdWx0ID0gISh1dGlscy5pc1VuZGVmaW5lZChlbCkgfHwgZWwgPT09IG51bGwpICYmIHZpc2l0b3IuY2FsbChcbiAgICAgICAgZm9ybURhdGEsIGVsLCB1dGlscy5pc1N0cmluZyhrZXkpID8ga2V5LnRyaW0oKSA6IGtleSwgcGF0aCwgZXhwb3NlZEhlbHBlcnNcbiAgICAgICk7XG5cbiAgICAgIGlmIChyZXN1bHQgPT09IHRydWUpIHtcbiAgICAgICAgYnVpbGQoZWwsIHBhdGggPyBwYXRoLmNvbmNhdChrZXkpIDogW2tleV0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgc3RhY2sucG9wKCk7XG4gIH1cblxuICBpZiAoIXV0aWxzLmlzT2JqZWN0KG9iaikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdkYXRhIG11c3QgYmUgYW4gb2JqZWN0Jyk7XG4gIH1cblxuICBidWlsZChvYmopO1xuXG4gIHJldHVybiBmb3JtRGF0YTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdG9Gb3JtRGF0YTtcbiIsICIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB0b0Zvcm1EYXRhIGZyb20gJy4vdG9Gb3JtRGF0YS5qcyc7XG5cbi8qKlxuICogSXQgZW5jb2RlcyBhIHN0cmluZyBieSByZXBsYWNpbmcgYWxsIGNoYXJhY3RlcnMgdGhhdCBhcmUgbm90IGluIHRoZSB1bnJlc2VydmVkIHNldCB3aXRoXG4gKiB0aGVpciBwZXJjZW50LWVuY29kZWQgZXF1aXZhbGVudHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIC0gVGhlIHN0cmluZyB0byBlbmNvZGUuXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGVuY29kZWQgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBlbmNvZGUoc3RyKSB7XG4gIGNvbnN0IGNoYXJNYXAgPSB7XG4gICAgJyEnOiAnJTIxJyxcbiAgICBcIidcIjogJyUyNycsXG4gICAgJygnOiAnJTI4JyxcbiAgICAnKSc6ICclMjknLFxuICAgICd+JzogJyU3RScsXG4gICAgJyUyMCc6ICcrJyxcbiAgICAnJTAwJzogJ1xceDAwJ1xuICB9O1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHN0cikucmVwbGFjZSgvWyEnKCl+XXwlMjB8JTAwL2csIGZ1bmN0aW9uIHJlcGxhY2VyKG1hdGNoKSB7XG4gICAgcmV0dXJuIGNoYXJNYXBbbWF0Y2hdO1xuICB9KTtcbn1cblxuLyoqXG4gKiBJdCB0YWtlcyBhIHBhcmFtcyBvYmplY3QgYW5kIGNvbnZlcnRzIGl0IHRvIGEgRm9ybURhdGEgb2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3Q8c3RyaW5nLCBhbnk+fSBwYXJhbXMgLSBUaGUgcGFyYW1ldGVycyB0byBiZSBjb252ZXJ0ZWQgdG8gYSBGb3JtRGF0YSBvYmplY3QuXG4gKiBAcGFyYW0ge09iamVjdDxzdHJpbmcsIGFueT59IG9wdGlvbnMgLSBUaGUgb3B0aW9ucyBvYmplY3QgcGFzc2VkIHRvIHRoZSBBeGlvcyBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gQXhpb3NVUkxTZWFyY2hQYXJhbXMocGFyYW1zLCBvcHRpb25zKSB7XG4gIHRoaXMuX3BhaXJzID0gW107XG5cbiAgcGFyYW1zICYmIHRvRm9ybURhdGEocGFyYW1zLCB0aGlzLCBvcHRpb25zKTtcbn1cblxuY29uc3QgcHJvdG90eXBlID0gQXhpb3NVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlO1xuXG5wcm90b3R5cGUuYXBwZW5kID0gZnVuY3Rpb24gYXBwZW5kKG5hbWUsIHZhbHVlKSB7XG4gIHRoaXMuX3BhaXJzLnB1c2goW25hbWUsIHZhbHVlXSk7XG59O1xuXG5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyhlbmNvZGVyKSB7XG4gIGNvbnN0IF9lbmNvZGUgPSBlbmNvZGVyID8gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gZW5jb2Rlci5jYWxsKHRoaXMsIHZhbHVlLCBlbmNvZGUpO1xuICB9IDogZW5jb2RlO1xuXG4gIHJldHVybiB0aGlzLl9wYWlycy5tYXAoZnVuY3Rpb24gZWFjaChwYWlyKSB7XG4gICAgcmV0dXJuIF9lbmNvZGUocGFpclswXSkgKyAnPScgKyBfZW5jb2RlKHBhaXJbMV0pO1xuICB9LCAnJykuam9pbignJicpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgQXhpb3NVUkxTZWFyY2hQYXJhbXM7XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuaW1wb3J0IEF4aW9zVVJMU2VhcmNoUGFyYW1zIGZyb20gJy4uL2hlbHBlcnMvQXhpb3NVUkxTZWFyY2hQYXJhbXMuanMnO1xuXG4vKipcbiAqIEl0IHJlcGxhY2VzIGFsbCBpbnN0YW5jZXMgb2YgdGhlIGNoYXJhY3RlcnMgYDpgLCBgJGAsIGAsYCwgYCtgLCBgW2AsIGFuZCBgXWAgd2l0aCB0aGVpclxuICogVVJJIGVuY29kZWQgY291bnRlcnBhcnRzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbCBUaGUgdmFsdWUgdG8gYmUgZW5jb2RlZC5cbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZW5jb2RlZCB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gZW5jb2RlKHZhbCkge1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHZhbCkuXG4gICAgcmVwbGFjZSgvJTNBL2dpLCAnOicpLlxuICAgIHJlcGxhY2UoLyUyNC9nLCAnJCcpLlxuICAgIHJlcGxhY2UoLyUyQy9naSwgJywnKS5cbiAgICByZXBsYWNlKC8lMjAvZywgJysnKS5cbiAgICByZXBsYWNlKC8lNUIvZ2ksICdbJykuXG4gICAgcmVwbGFjZSgvJTVEL2dpLCAnXScpO1xufVxuXG4vKipcbiAqIEJ1aWxkIGEgVVJMIGJ5IGFwcGVuZGluZyBwYXJhbXMgdG8gdGhlIGVuZFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIGJhc2Ugb2YgdGhlIHVybCAoZS5nLiwgaHR0cDovL3d3dy5nb29nbGUuY29tKVxuICogQHBhcmFtIHtvYmplY3R9IFtwYXJhbXNdIFRoZSBwYXJhbXMgdG8gYmUgYXBwZW5kZWRcbiAqIEBwYXJhbSB7PyhvYmplY3R8RnVuY3Rpb24pfSBvcHRpb25zXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGZvcm1hdHRlZCB1cmxcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGRVUkwodXJsLCBwYXJhbXMsIG9wdGlvbnMpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIGlmICghcGFyYW1zKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuICBcbiAgY29uc3QgX2VuY29kZSA9IG9wdGlvbnMgJiYgb3B0aW9ucy5lbmNvZGUgfHwgZW5jb2RlO1xuXG4gIGlmICh1dGlscy5pc0Z1bmN0aW9uKG9wdGlvbnMpKSB7XG4gICAgb3B0aW9ucyA9IHtcbiAgICAgIHNlcmlhbGl6ZTogb3B0aW9uc1xuICAgIH07XG4gIH0gXG5cbiAgY29uc3Qgc2VyaWFsaXplRm4gPSBvcHRpb25zICYmIG9wdGlvbnMuc2VyaWFsaXplO1xuXG4gIGxldCBzZXJpYWxpemVkUGFyYW1zO1xuXG4gIGlmIChzZXJpYWxpemVGbikge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBzZXJpYWxpemVGbihwYXJhbXMsIG9wdGlvbnMpO1xuICB9IGVsc2Uge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSB1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhwYXJhbXMpID9cbiAgICAgIHBhcmFtcy50b1N0cmluZygpIDpcbiAgICAgIG5ldyBBeGlvc1VSTFNlYXJjaFBhcmFtcyhwYXJhbXMsIG9wdGlvbnMpLnRvU3RyaW5nKF9lbmNvZGUpO1xuICB9XG5cbiAgaWYgKHNlcmlhbGl6ZWRQYXJhbXMpIHtcbiAgICBjb25zdCBoYXNobWFya0luZGV4ID0gdXJsLmluZGV4T2YoXCIjXCIpO1xuXG4gICAgaWYgKGhhc2htYXJrSW5kZXggIT09IC0xKSB7XG4gICAgICB1cmwgPSB1cmwuc2xpY2UoMCwgaGFzaG1hcmtJbmRleCk7XG4gICAgfVxuICAgIHVybCArPSAodXJsLmluZGV4T2YoJz8nKSA9PT0gLTEgPyAnPycgOiAnJicpICsgc2VyaWFsaXplZFBhcmFtcztcbiAgfVxuXG4gIHJldHVybiB1cmw7XG59XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi8uLi91dGlscy5qcyc7XG5cbmNsYXNzIEludGVyY2VwdG9yTWFuYWdlciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuaGFuZGxlcnMgPSBbXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgYSBuZXcgaW50ZXJjZXB0b3IgdG8gdGhlIHN0YWNrXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bGZpbGxlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGB0aGVuYCBmb3IgYSBgUHJvbWlzZWBcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0ZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgcmVqZWN0YCBmb3IgYSBgUHJvbWlzZWBcbiAgICpcbiAgICogQHJldHVybiB7TnVtYmVyfSBBbiBJRCB1c2VkIHRvIHJlbW92ZSBpbnRlcmNlcHRvciBsYXRlclxuICAgKi9cbiAgdXNlKGZ1bGZpbGxlZCwgcmVqZWN0ZWQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLmhhbmRsZXJzLnB1c2goe1xuICAgICAgZnVsZmlsbGVkLFxuICAgICAgcmVqZWN0ZWQsXG4gICAgICBzeW5jaHJvbm91czogb3B0aW9ucyA/IG9wdGlvbnMuc3luY2hyb25vdXMgOiBmYWxzZSxcbiAgICAgIHJ1bldoZW46IG9wdGlvbnMgPyBvcHRpb25zLnJ1bldoZW4gOiBudWxsXG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMuaGFuZGxlcnMubGVuZ3RoIC0gMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmUgYW4gaW50ZXJjZXB0b3IgZnJvbSB0aGUgc3RhY2tcbiAgICpcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGlkIFRoZSBJRCB0aGF0IHdhcyByZXR1cm5lZCBieSBgdXNlYFxuICAgKlxuICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gYHRydWVgIGlmIHRoZSBpbnRlcmNlcHRvciB3YXMgcmVtb3ZlZCwgYGZhbHNlYCBvdGhlcndpc2VcbiAgICovXG4gIGVqZWN0KGlkKSB7XG4gICAgaWYgKHRoaXMuaGFuZGxlcnNbaWRdKSB7XG4gICAgICB0aGlzLmhhbmRsZXJzW2lkXSA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENsZWFyIGFsbCBpbnRlcmNlcHRvcnMgZnJvbSB0aGUgc3RhY2tcbiAgICpcbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICBjbGVhcigpIHtcbiAgICBpZiAodGhpcy5oYW5kbGVycykge1xuICAgICAgdGhpcy5oYW5kbGVycyA9IFtdO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBJdGVyYXRlIG92ZXIgYWxsIHRoZSByZWdpc3RlcmVkIGludGVyY2VwdG9yc1xuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBpcyBwYXJ0aWN1bGFybHkgdXNlZnVsIGZvciBza2lwcGluZyBvdmVyIGFueVxuICAgKiBpbnRlcmNlcHRvcnMgdGhhdCBtYXkgaGF2ZSBiZWNvbWUgYG51bGxgIGNhbGxpbmcgYGVqZWN0YC5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIGNhbGwgZm9yIGVhY2ggaW50ZXJjZXB0b3JcbiAgICpcbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICBmb3JFYWNoKGZuKSB7XG4gICAgdXRpbHMuZm9yRWFjaCh0aGlzLmhhbmRsZXJzLCBmdW5jdGlvbiBmb3JFYWNoSGFuZGxlcihoKSB7XG4gICAgICBpZiAoaCAhPT0gbnVsbCkge1xuICAgICAgICBmbihoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBJbnRlcmNlcHRvck1hbmFnZXI7XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHNpbGVudEpTT05QYXJzaW5nOiB0cnVlLFxuICBmb3JjZWRKU09OUGFyc2luZzogdHJ1ZSxcbiAgY2xhcmlmeVRpbWVvdXRFcnJvcjogZmFsc2Vcbn07XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgQXhpb3NVUkxTZWFyY2hQYXJhbXMgZnJvbSAnLi4vLi4vLi4vaGVscGVycy9BeGlvc1VSTFNlYXJjaFBhcmFtcy5qcyc7XG5leHBvcnQgZGVmYXVsdCB0eXBlb2YgVVJMU2VhcmNoUGFyYW1zICE9PSAndW5kZWZpbmVkJyA/IFVSTFNlYXJjaFBhcmFtcyA6IEF4aW9zVVJMU2VhcmNoUGFyYW1zO1xuIiwgIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0IGRlZmF1bHQgdHlwZW9mIEZvcm1EYXRhICE9PSAndW5kZWZpbmVkJyA/IEZvcm1EYXRhIDogbnVsbDtcbiIsICIndXNlIHN0cmljdCdcblxuZXhwb3J0IGRlZmF1bHQgdHlwZW9mIEJsb2IgIT09ICd1bmRlZmluZWQnID8gQmxvYiA6IG51bGxcbiIsICJpbXBvcnQgVVJMU2VhcmNoUGFyYW1zIGZyb20gJy4vY2xhc3Nlcy9VUkxTZWFyY2hQYXJhbXMuanMnXG5pbXBvcnQgRm9ybURhdGEgZnJvbSAnLi9jbGFzc2VzL0Zvcm1EYXRhLmpzJ1xuaW1wb3J0IEJsb2IgZnJvbSAnLi9jbGFzc2VzL0Jsb2IuanMnXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgaXNCcm93c2VyOiB0cnVlLFxuICBjbGFzc2VzOiB7XG4gICAgVVJMU2VhcmNoUGFyYW1zLFxuICAgIEZvcm1EYXRhLFxuICAgIEJsb2JcbiAgfSxcbiAgcHJvdG9jb2xzOiBbJ2h0dHAnLCAnaHR0cHMnLCAnZmlsZScsICdibG9iJywgJ3VybCcsICdkYXRhJ11cbn07XG4iLCAiY29uc3QgaGFzQnJvd3NlckVudiA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCc7XG5cbmNvbnN0IF9uYXZpZ2F0b3IgPSB0eXBlb2YgbmF2aWdhdG9yID09PSAnb2JqZWN0JyAmJiBuYXZpZ2F0b3IgfHwgdW5kZWZpbmVkO1xuXG4vKipcbiAqIERldGVybWluZSBpZiB3ZSdyZSBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudFxuICpcbiAqIFRoaXMgYWxsb3dzIGF4aW9zIHRvIHJ1biBpbiBhIHdlYiB3b3JrZXIsIGFuZCByZWFjdC1uYXRpdmUuXG4gKiBCb3RoIGVudmlyb25tZW50cyBzdXBwb3J0IFhNTEh0dHBSZXF1ZXN0LCBidXQgbm90IGZ1bGx5IHN0YW5kYXJkIGdsb2JhbHMuXG4gKlxuICogd2ViIHdvcmtlcnM6XG4gKiAgdHlwZW9mIHdpbmRvdyAtPiB1bmRlZmluZWRcbiAqICB0eXBlb2YgZG9jdW1lbnQgLT4gdW5kZWZpbmVkXG4gKlxuICogcmVhY3QtbmF0aXZlOlxuICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdSZWFjdE5hdGl2ZSdcbiAqIG5hdGl2ZXNjcmlwdFxuICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdOYXRpdmVTY3JpcHQnIG9yICdOUydcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuY29uc3QgaGFzU3RhbmRhcmRCcm93c2VyRW52ID0gaGFzQnJvd3NlckVudiAmJlxuICAoIV9uYXZpZ2F0b3IgfHwgWydSZWFjdE5hdGl2ZScsICdOYXRpdmVTY3JpcHQnLCAnTlMnXS5pbmRleE9mKF9uYXZpZ2F0b3IucHJvZHVjdCkgPCAwKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgd2UncmUgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgd2ViV29ya2VyIGVudmlyb25tZW50XG4gKlxuICogQWx0aG91Z2ggdGhlIGBpc1N0YW5kYXJkQnJvd3NlckVudmAgbWV0aG9kIGluZGljYXRlcyB0aGF0XG4gKiBgYWxsb3dzIGF4aW9zIHRvIHJ1biBpbiBhIHdlYiB3b3JrZXJgLCB0aGUgV2ViV29ya2VyIHdpbGwgc3RpbGwgYmVcbiAqIGZpbHRlcmVkIG91dCBkdWUgdG8gaXRzIGp1ZGdtZW50IHN0YW5kYXJkXG4gKiBgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJ2AuXG4gKiBUaGlzIGxlYWRzIHRvIGEgcHJvYmxlbSB3aGVuIGF4aW9zIHBvc3QgYEZvcm1EYXRhYCBpbiB3ZWJXb3JrZXJcbiAqL1xuY29uc3QgaGFzU3RhbmRhcmRCcm93c2VyV2ViV29ya2VyRW52ID0gKCgpID0+IHtcbiAgcmV0dXJuIChcbiAgICB0eXBlb2YgV29ya2VyR2xvYmFsU2NvcGUgIT09ICd1bmRlZmluZWQnICYmXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgc2VsZiBpbnN0YW5jZW9mIFdvcmtlckdsb2JhbFNjb3BlICYmXG4gICAgdHlwZW9mIHNlbGYuaW1wb3J0U2NyaXB0cyA9PT0gJ2Z1bmN0aW9uJ1xuICApO1xufSkoKTtcblxuY29uc3Qgb3JpZ2luID0gaGFzQnJvd3NlckVudiAmJiB3aW5kb3cubG9jYXRpb24uaHJlZiB8fCAnaHR0cDovL2xvY2FsaG9zdCc7XG5cbmV4cG9ydCB7XG4gIGhhc0Jyb3dzZXJFbnYsXG4gIGhhc1N0YW5kYXJkQnJvd3NlcldlYldvcmtlckVudixcbiAgaGFzU3RhbmRhcmRCcm93c2VyRW52LFxuICBfbmF2aWdhdG9yIGFzIG5hdmlnYXRvcixcbiAgb3JpZ2luXG59XG4iLCAiaW1wb3J0IHBsYXRmb3JtIGZyb20gJy4vbm9kZS9pbmRleC5qcyc7XG5pbXBvcnQgKiBhcyB1dGlscyBmcm9tICcuL2NvbW1vbi91dGlscy5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgLi4udXRpbHMsXG4gIC4uLnBsYXRmb3JtXG59XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuaW1wb3J0IHRvRm9ybURhdGEgZnJvbSAnLi90b0Zvcm1EYXRhLmpzJztcbmltcG9ydCBwbGF0Zm9ybSBmcm9tICcuLi9wbGF0Zm9ybS9pbmRleC5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRvVVJMRW5jb2RlZEZvcm0oZGF0YSwgb3B0aW9ucykge1xuICByZXR1cm4gdG9Gb3JtRGF0YShkYXRhLCBuZXcgcGxhdGZvcm0uY2xhc3Nlcy5VUkxTZWFyY2hQYXJhbXMoKSwgT2JqZWN0LmFzc2lnbih7XG4gICAgdmlzaXRvcjogZnVuY3Rpb24odmFsdWUsIGtleSwgcGF0aCwgaGVscGVycykge1xuICAgICAgaWYgKHBsYXRmb3JtLmlzTm9kZSAmJiB1dGlscy5pc0J1ZmZlcih2YWx1ZSkpIHtcbiAgICAgICAgdGhpcy5hcHBlbmQoa2V5LCB2YWx1ZS50b1N0cmluZygnYmFzZTY0JykpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBoZWxwZXJzLmRlZmF1bHRWaXNpdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9LCBvcHRpb25zKSk7XG59XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuXG4vKipcbiAqIEl0IHRha2VzIGEgc3RyaW5nIGxpa2UgYGZvb1t4XVt5XVt6XWAgYW5kIHJldHVybnMgYW4gYXJyYXkgbGlrZSBgWydmb28nLCAneCcsICd5JywgJ3onXVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gVGhlIG5hbWUgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqXG4gKiBAcmV0dXJucyBBbiBhcnJheSBvZiBzdHJpbmdzLlxuICovXG5mdW5jdGlvbiBwYXJzZVByb3BQYXRoKG5hbWUpIHtcbiAgLy8gZm9vW3hdW3ldW3pdXG4gIC8vIGZvby54LnkuelxuICAvLyBmb28teC15LXpcbiAgLy8gZm9vIHggeSB6XG4gIHJldHVybiB1dGlscy5tYXRjaEFsbCgvXFx3K3xcXFsoXFx3KildL2csIG5hbWUpLm1hcChtYXRjaCA9PiB7XG4gICAgcmV0dXJuIG1hdGNoWzBdID09PSAnW10nID8gJycgOiBtYXRjaFsxXSB8fCBtYXRjaFswXTtcbiAgfSk7XG59XG5cbi8qKlxuICogQ29udmVydCBhbiBhcnJheSB0byBhbiBvYmplY3QuXG4gKlxuICogQHBhcmFtIHtBcnJheTxhbnk+fSBhcnIgLSBUaGUgYXJyYXkgdG8gY29udmVydCB0byBhbiBvYmplY3QuXG4gKlxuICogQHJldHVybnMgQW4gb2JqZWN0IHdpdGggdGhlIHNhbWUga2V5cyBhbmQgdmFsdWVzIGFzIHRoZSBhcnJheS5cbiAqL1xuZnVuY3Rpb24gYXJyYXlUb09iamVjdChhcnIpIHtcbiAgY29uc3Qgb2JqID0ge307XG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhhcnIpO1xuICBsZXQgaTtcbiAgY29uc3QgbGVuID0ga2V5cy5sZW5ndGg7XG4gIGxldCBrZXk7XG4gIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIGtleSA9IGtleXNbaV07XG4gICAgb2JqW2tleV0gPSBhcnJba2V5XTtcbiAgfVxuICByZXR1cm4gb2JqO1xufVxuXG4vKipcbiAqIEl0IHRha2VzIGEgRm9ybURhdGEgb2JqZWN0IGFuZCByZXR1cm5zIGEgSmF2YVNjcmlwdCBvYmplY3RcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gZm9ybURhdGEgVGhlIEZvcm1EYXRhIG9iamVjdCB0byBjb252ZXJ0IHRvIEpTT04uXG4gKlxuICogQHJldHVybnMge09iamVjdDxzdHJpbmcsIGFueT4gfCBudWxsfSBUaGUgY29udmVydGVkIG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gZm9ybURhdGFUb0pTT04oZm9ybURhdGEpIHtcbiAgZnVuY3Rpb24gYnVpbGRQYXRoKHBhdGgsIHZhbHVlLCB0YXJnZXQsIGluZGV4KSB7XG4gICAgbGV0IG5hbWUgPSBwYXRoW2luZGV4KytdO1xuXG4gICAgaWYgKG5hbWUgPT09ICdfX3Byb3RvX18nKSByZXR1cm4gdHJ1ZTtcblxuICAgIGNvbnN0IGlzTnVtZXJpY0tleSA9IE51bWJlci5pc0Zpbml0ZSgrbmFtZSk7XG4gICAgY29uc3QgaXNMYXN0ID0gaW5kZXggPj0gcGF0aC5sZW5ndGg7XG4gICAgbmFtZSA9ICFuYW1lICYmIHV0aWxzLmlzQXJyYXkodGFyZ2V0KSA/IHRhcmdldC5sZW5ndGggOiBuYW1lO1xuXG4gICAgaWYgKGlzTGFzdCkge1xuICAgICAgaWYgKHV0aWxzLmhhc093blByb3AodGFyZ2V0LCBuYW1lKSkge1xuICAgICAgICB0YXJnZXRbbmFtZV0gPSBbdGFyZ2V0W25hbWVdLCB2YWx1ZV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0YXJnZXRbbmFtZV0gPSB2YWx1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuICFpc051bWVyaWNLZXk7XG4gICAgfVxuXG4gICAgaWYgKCF0YXJnZXRbbmFtZV0gfHwgIXV0aWxzLmlzT2JqZWN0KHRhcmdldFtuYW1lXSkpIHtcbiAgICAgIHRhcmdldFtuYW1lXSA9IFtdO1xuICAgIH1cblxuICAgIGNvbnN0IHJlc3VsdCA9IGJ1aWxkUGF0aChwYXRoLCB2YWx1ZSwgdGFyZ2V0W25hbWVdLCBpbmRleCk7XG5cbiAgICBpZiAocmVzdWx0ICYmIHV0aWxzLmlzQXJyYXkodGFyZ2V0W25hbWVdKSkge1xuICAgICAgdGFyZ2V0W25hbWVdID0gYXJyYXlUb09iamVjdCh0YXJnZXRbbmFtZV0pO1xuICAgIH1cblxuICAgIHJldHVybiAhaXNOdW1lcmljS2V5O1xuICB9XG5cbiAgaWYgKHV0aWxzLmlzRm9ybURhdGEoZm9ybURhdGEpICYmIHV0aWxzLmlzRnVuY3Rpb24oZm9ybURhdGEuZW50cmllcykpIHtcbiAgICBjb25zdCBvYmogPSB7fTtcblxuICAgIHV0aWxzLmZvckVhY2hFbnRyeShmb3JtRGF0YSwgKG5hbWUsIHZhbHVlKSA9PiB7XG4gICAgICBidWlsZFBhdGgocGFyc2VQcm9wUGF0aChuYW1lKSwgdmFsdWUsIG9iaiwgMCk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gb2JqO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZvcm1EYXRhVG9KU09OO1xuIiwgIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcbmltcG9ydCBBeGlvc0Vycm9yIGZyb20gJy4uL2NvcmUvQXhpb3NFcnJvci5qcyc7XG5pbXBvcnQgdHJhbnNpdGlvbmFsRGVmYXVsdHMgZnJvbSAnLi90cmFuc2l0aW9uYWwuanMnO1xuaW1wb3J0IHRvRm9ybURhdGEgZnJvbSAnLi4vaGVscGVycy90b0Zvcm1EYXRhLmpzJztcbmltcG9ydCB0b1VSTEVuY29kZWRGb3JtIGZyb20gJy4uL2hlbHBlcnMvdG9VUkxFbmNvZGVkRm9ybS5qcyc7XG5pbXBvcnQgcGxhdGZvcm0gZnJvbSAnLi4vcGxhdGZvcm0vaW5kZXguanMnO1xuaW1wb3J0IGZvcm1EYXRhVG9KU09OIGZyb20gJy4uL2hlbHBlcnMvZm9ybURhdGFUb0pTT04uanMnO1xuXG4vKipcbiAqIEl0IHRha2VzIGEgc3RyaW5nLCB0cmllcyB0byBwYXJzZSBpdCwgYW5kIGlmIGl0IGZhaWxzLCBpdCByZXR1cm5zIHRoZSBzdHJpbmdpZmllZCB2ZXJzaW9uXG4gKiBvZiB0aGUgaW5wdXRcbiAqXG4gKiBAcGFyYW0ge2FueX0gcmF3VmFsdWUgLSBUaGUgdmFsdWUgdG8gYmUgc3RyaW5naWZpZWQuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBwYXJzZXIgLSBBIGZ1bmN0aW9uIHRoYXQgcGFyc2VzIGEgc3RyaW5nIGludG8gYSBKYXZhU2NyaXB0IG9iamVjdC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVuY29kZXIgLSBBIGZ1bmN0aW9uIHRoYXQgdGFrZXMgYSB2YWx1ZSBhbmQgcmV0dXJucyBhIHN0cmluZy5cbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIHN0cmluZ2lmaWVkIHZlcnNpb24gb2YgdGhlIHJhd1ZhbHVlLlxuICovXG5mdW5jdGlvbiBzdHJpbmdpZnlTYWZlbHkocmF3VmFsdWUsIHBhcnNlciwgZW5jb2Rlcikge1xuICBpZiAodXRpbHMuaXNTdHJpbmcocmF3VmFsdWUpKSB7XG4gICAgdHJ5IHtcbiAgICAgIChwYXJzZXIgfHwgSlNPTi5wYXJzZSkocmF3VmFsdWUpO1xuICAgICAgcmV0dXJuIHV0aWxzLnRyaW0ocmF3VmFsdWUpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlmIChlLm5hbWUgIT09ICdTeW50YXhFcnJvcicpIHtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gKGVuY29kZXIgfHwgSlNPTi5zdHJpbmdpZnkpKHJhd1ZhbHVlKTtcbn1cblxuY29uc3QgZGVmYXVsdHMgPSB7XG5cbiAgdHJhbnNpdGlvbmFsOiB0cmFuc2l0aW9uYWxEZWZhdWx0cyxcblxuICBhZGFwdGVyOiBbJ3hocicsICdodHRwJywgJ2ZldGNoJ10sXG5cbiAgdHJhbnNmb3JtUmVxdWVzdDogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlcXVlc3QoZGF0YSwgaGVhZGVycykge1xuICAgIGNvbnN0IGNvbnRlbnRUeXBlID0gaGVhZGVycy5nZXRDb250ZW50VHlwZSgpIHx8ICcnO1xuICAgIGNvbnN0IGhhc0pTT05Db250ZW50VHlwZSA9IGNvbnRlbnRUeXBlLmluZGV4T2YoJ2FwcGxpY2F0aW9uL2pzb24nKSA+IC0xO1xuICAgIGNvbnN0IGlzT2JqZWN0UGF5bG9hZCA9IHV0aWxzLmlzT2JqZWN0KGRhdGEpO1xuXG4gICAgaWYgKGlzT2JqZWN0UGF5bG9hZCAmJiB1dGlscy5pc0hUTUxGb3JtKGRhdGEpKSB7XG4gICAgICBkYXRhID0gbmV3IEZvcm1EYXRhKGRhdGEpO1xuICAgIH1cblxuICAgIGNvbnN0IGlzRm9ybURhdGEgPSB1dGlscy5pc0Zvcm1EYXRhKGRhdGEpO1xuXG4gICAgaWYgKGlzRm9ybURhdGEpIHtcbiAgICAgIHJldHVybiBoYXNKU09OQ29udGVudFR5cGUgPyBKU09OLnN0cmluZ2lmeShmb3JtRGF0YVRvSlNPTihkYXRhKSkgOiBkYXRhO1xuICAgIH1cblxuICAgIGlmICh1dGlscy5pc0FycmF5QnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0J1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNTdHJlYW0oZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzRmlsZShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCbG9iKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc1JlYWRhYmxlU3RyZWFtKGRhdGEpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXJWaWV3KGRhdGEpKSB7XG4gICAgICByZXR1cm4gZGF0YS5idWZmZXI7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhkYXRhKSkge1xuICAgICAgaGVhZGVycy5zZXRDb250ZW50VHlwZSgnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9dXRmLTgnLCBmYWxzZSk7XG4gICAgICByZXR1cm4gZGF0YS50b1N0cmluZygpO1xuICAgIH1cblxuICAgIGxldCBpc0ZpbGVMaXN0O1xuXG4gICAgaWYgKGlzT2JqZWN0UGF5bG9hZCkge1xuICAgICAgaWYgKGNvbnRlbnRUeXBlLmluZGV4T2YoJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcpID4gLTEpIHtcbiAgICAgICAgcmV0dXJuIHRvVVJMRW5jb2RlZEZvcm0oZGF0YSwgdGhpcy5mb3JtU2VyaWFsaXplcikudG9TdHJpbmcoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKChpc0ZpbGVMaXN0ID0gdXRpbHMuaXNGaWxlTGlzdChkYXRhKSkgfHwgY29udGVudFR5cGUuaW5kZXhPZignbXVsdGlwYXJ0L2Zvcm0tZGF0YScpID4gLTEpIHtcbiAgICAgICAgY29uc3QgX0Zvcm1EYXRhID0gdGhpcy5lbnYgJiYgdGhpcy5lbnYuRm9ybURhdGE7XG5cbiAgICAgICAgcmV0dXJuIHRvRm9ybURhdGEoXG4gICAgICAgICAgaXNGaWxlTGlzdCA/IHsnZmlsZXNbXSc6IGRhdGF9IDogZGF0YSxcbiAgICAgICAgICBfRm9ybURhdGEgJiYgbmV3IF9Gb3JtRGF0YSgpLFxuICAgICAgICAgIHRoaXMuZm9ybVNlcmlhbGl6ZXJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaXNPYmplY3RQYXlsb2FkIHx8IGhhc0pTT05Db250ZW50VHlwZSApIHtcbiAgICAgIGhlYWRlcnMuc2V0Q29udGVudFR5cGUoJ2FwcGxpY2F0aW9uL2pzb24nLCBmYWxzZSk7XG4gICAgICByZXR1cm4gc3RyaW5naWZ5U2FmZWx5KGRhdGEpO1xuICAgIH1cblxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICB0cmFuc2Zvcm1SZXNwb25zZTogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlc3BvbnNlKGRhdGEpIHtcbiAgICBjb25zdCB0cmFuc2l0aW9uYWwgPSB0aGlzLnRyYW5zaXRpb25hbCB8fCBkZWZhdWx0cy50cmFuc2l0aW9uYWw7XG4gICAgY29uc3QgZm9yY2VkSlNPTlBhcnNpbmcgPSB0cmFuc2l0aW9uYWwgJiYgdHJhbnNpdGlvbmFsLmZvcmNlZEpTT05QYXJzaW5nO1xuICAgIGNvbnN0IEpTT05SZXF1ZXN0ZWQgPSB0aGlzLnJlc3BvbnNlVHlwZSA9PT0gJ2pzb24nO1xuXG4gICAgaWYgKHV0aWxzLmlzUmVzcG9uc2UoZGF0YSkgfHwgdXRpbHMuaXNSZWFkYWJsZVN0cmVhbShkYXRhKSkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuXG4gICAgaWYgKGRhdGEgJiYgdXRpbHMuaXNTdHJpbmcoZGF0YSkgJiYgKChmb3JjZWRKU09OUGFyc2luZyAmJiAhdGhpcy5yZXNwb25zZVR5cGUpIHx8IEpTT05SZXF1ZXN0ZWQpKSB7XG4gICAgICBjb25zdCBzaWxlbnRKU09OUGFyc2luZyA9IHRyYW5zaXRpb25hbCAmJiB0cmFuc2l0aW9uYWwuc2lsZW50SlNPTlBhcnNpbmc7XG4gICAgICBjb25zdCBzdHJpY3RKU09OUGFyc2luZyA9ICFzaWxlbnRKU09OUGFyc2luZyAmJiBKU09OUmVxdWVzdGVkO1xuXG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShkYXRhKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKHN0cmljdEpTT05QYXJzaW5nKSB7XG4gICAgICAgICAgaWYgKGUubmFtZSA9PT0gJ1N5bnRheEVycm9yJykge1xuICAgICAgICAgICAgdGhyb3cgQXhpb3NFcnJvci5mcm9tKGUsIEF4aW9zRXJyb3IuRVJSX0JBRF9SRVNQT05TRSwgdGhpcywgbnVsbCwgdGhpcy5yZXNwb25zZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgLyoqXG4gICAqIEEgdGltZW91dCBpbiBtaWxsaXNlY29uZHMgdG8gYWJvcnQgYSByZXF1ZXN0LiBJZiBzZXQgdG8gMCAoZGVmYXVsdCkgYVxuICAgKiB0aW1lb3V0IGlzIG5vdCBjcmVhdGVkLlxuICAgKi9cbiAgdGltZW91dDogMCxcblxuICB4c3JmQ29va2llTmFtZTogJ1hTUkYtVE9LRU4nLFxuICB4c3JmSGVhZGVyTmFtZTogJ1gtWFNSRi1UT0tFTicsXG5cbiAgbWF4Q29udGVudExlbmd0aDogLTEsXG4gIG1heEJvZHlMZW5ndGg6IC0xLFxuXG4gIGVudjoge1xuICAgIEZvcm1EYXRhOiBwbGF0Zm9ybS5jbGFzc2VzLkZvcm1EYXRhLFxuICAgIEJsb2I6IHBsYXRmb3JtLmNsYXNzZXMuQmxvYlxuICB9LFxuXG4gIHZhbGlkYXRlU3RhdHVzOiBmdW5jdGlvbiB2YWxpZGF0ZVN0YXR1cyhzdGF0dXMpIHtcbiAgICByZXR1cm4gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDA7XG4gIH0sXG5cbiAgaGVhZGVyczoge1xuICAgIGNvbW1vbjoge1xuICAgICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L3BsYWluLCAqLyonLFxuICAgICAgJ0NvbnRlbnQtVHlwZSc6IHVuZGVmaW5lZFxuICAgIH1cbiAgfVxufTtcblxudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdwb3N0JywgJ3B1dCcsICdwYXRjaCddLCAobWV0aG9kKSA9PiB7XG4gIGRlZmF1bHRzLmhlYWRlcnNbbWV0aG9kXSA9IHt9O1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGRlZmF1bHRzO1xuIiwgIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4vLi4vdXRpbHMuanMnO1xuXG4vLyBSYXdBeGlvc0hlYWRlcnMgd2hvc2UgZHVwbGljYXRlcyBhcmUgaWdub3JlZCBieSBub2RlXG4vLyBjLmYuIGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvaHR0cC5odG1sI2h0dHBfbWVzc2FnZV9oZWFkZXJzXG5jb25zdCBpZ25vcmVEdXBsaWNhdGVPZiA9IHV0aWxzLnRvT2JqZWN0U2V0KFtcbiAgJ2FnZScsICdhdXRob3JpemF0aW9uJywgJ2NvbnRlbnQtbGVuZ3RoJywgJ2NvbnRlbnQtdHlwZScsICdldGFnJyxcbiAgJ2V4cGlyZXMnLCAnZnJvbScsICdob3N0JywgJ2lmLW1vZGlmaWVkLXNpbmNlJywgJ2lmLXVubW9kaWZpZWQtc2luY2UnLFxuICAnbGFzdC1tb2RpZmllZCcsICdsb2NhdGlvbicsICdtYXgtZm9yd2FyZHMnLCAncHJveHktYXV0aG9yaXphdGlvbicsXG4gICdyZWZlcmVyJywgJ3JldHJ5LWFmdGVyJywgJ3VzZXItYWdlbnQnXG5dKTtcblxuLyoqXG4gKiBQYXJzZSBoZWFkZXJzIGludG8gYW4gb2JqZWN0XG4gKlxuICogYGBgXG4gKiBEYXRlOiBXZWQsIDI3IEF1ZyAyMDE0IDA4OjU4OjQ5IEdNVFxuICogQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uXG4gKiBDb25uZWN0aW9uOiBrZWVwLWFsaXZlXG4gKiBUcmFuc2Zlci1FbmNvZGluZzogY2h1bmtlZFxuICogYGBgXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHJhd0hlYWRlcnMgSGVhZGVycyBuZWVkaW5nIHRvIGJlIHBhcnNlZFxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9IEhlYWRlcnMgcGFyc2VkIGludG8gYW4gb2JqZWN0XG4gKi9cbmV4cG9ydCBkZWZhdWx0IHJhd0hlYWRlcnMgPT4ge1xuICBjb25zdCBwYXJzZWQgPSB7fTtcbiAgbGV0IGtleTtcbiAgbGV0IHZhbDtcbiAgbGV0IGk7XG5cbiAgcmF3SGVhZGVycyAmJiByYXdIZWFkZXJzLnNwbGl0KCdcXG4nKS5mb3JFYWNoKGZ1bmN0aW9uIHBhcnNlcihsaW5lKSB7XG4gICAgaSA9IGxpbmUuaW5kZXhPZignOicpO1xuICAgIGtleSA9IGxpbmUuc3Vic3RyaW5nKDAsIGkpLnRyaW0oKS50b0xvd2VyQ2FzZSgpO1xuICAgIHZhbCA9IGxpbmUuc3Vic3RyaW5nKGkgKyAxKS50cmltKCk7XG5cbiAgICBpZiAoIWtleSB8fCAocGFyc2VkW2tleV0gJiYgaWdub3JlRHVwbGljYXRlT2Zba2V5XSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoa2V5ID09PSAnc2V0LWNvb2tpZScpIHtcbiAgICAgIGlmIChwYXJzZWRba2V5XSkge1xuICAgICAgICBwYXJzZWRba2V5XS5wdXNoKHZhbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJzZWRba2V5XSA9IFt2YWxdO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwYXJzZWRba2V5XSA9IHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gKyAnLCAnICsgdmFsIDogdmFsO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHBhcnNlZDtcbn07XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuaW1wb3J0IHBhcnNlSGVhZGVycyBmcm9tICcuLi9oZWxwZXJzL3BhcnNlSGVhZGVycy5qcyc7XG5cbmNvbnN0ICRpbnRlcm5hbHMgPSBTeW1ib2woJ2ludGVybmFscycpO1xuXG5mdW5jdGlvbiBub3JtYWxpemVIZWFkZXIoaGVhZGVyKSB7XG4gIHJldHVybiBoZWFkZXIgJiYgU3RyaW5nKGhlYWRlcikudHJpbSgpLnRvTG93ZXJDYXNlKCk7XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVZhbHVlKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PT0gZmFsc2UgfHwgdmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiB1dGlscy5pc0FycmF5KHZhbHVlKSA/IHZhbHVlLm1hcChub3JtYWxpemVWYWx1ZSkgOiBTdHJpbmcodmFsdWUpO1xufVxuXG5mdW5jdGlvbiBwYXJzZVRva2VucyhzdHIpIHtcbiAgY29uc3QgdG9rZW5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgY29uc3QgdG9rZW5zUkUgPSAvKFteXFxzLDs9XSspXFxzKig/Oj1cXHMqKFteLDtdKykpPy9nO1xuICBsZXQgbWF0Y2g7XG5cbiAgd2hpbGUgKChtYXRjaCA9IHRva2Vuc1JFLmV4ZWMoc3RyKSkpIHtcbiAgICB0b2tlbnNbbWF0Y2hbMV1dID0gbWF0Y2hbMl07XG4gIH1cblxuICByZXR1cm4gdG9rZW5zO1xufVxuXG5jb25zdCBpc1ZhbGlkSGVhZGVyTmFtZSA9IChzdHIpID0+IC9eWy1fYS16QS1aMC05XmB8fiwhIyQlJicqKy5dKyQvLnRlc3Qoc3RyLnRyaW0oKSk7XG5cbmZ1bmN0aW9uIG1hdGNoSGVhZGVyVmFsdWUoY29udGV4dCwgdmFsdWUsIGhlYWRlciwgZmlsdGVyLCBpc0hlYWRlck5hbWVGaWx0ZXIpIHtcbiAgaWYgKHV0aWxzLmlzRnVuY3Rpb24oZmlsdGVyKSkge1xuICAgIHJldHVybiBmaWx0ZXIuY2FsbCh0aGlzLCB2YWx1ZSwgaGVhZGVyKTtcbiAgfVxuXG4gIGlmIChpc0hlYWRlck5hbWVGaWx0ZXIpIHtcbiAgICB2YWx1ZSA9IGhlYWRlcjtcbiAgfVxuXG4gIGlmICghdXRpbHMuaXNTdHJpbmcodmFsdWUpKSByZXR1cm47XG5cbiAgaWYgKHV0aWxzLmlzU3RyaW5nKGZpbHRlcikpIHtcbiAgICByZXR1cm4gdmFsdWUuaW5kZXhPZihmaWx0ZXIpICE9PSAtMTtcbiAgfVxuXG4gIGlmICh1dGlscy5pc1JlZ0V4cChmaWx0ZXIpKSB7XG4gICAgcmV0dXJuIGZpbHRlci50ZXN0KHZhbHVlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBmb3JtYXRIZWFkZXIoaGVhZGVyKSB7XG4gIHJldHVybiBoZWFkZXIudHJpbSgpXG4gICAgLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvKFthLXpcXGRdKShcXHcqKS9nLCAodywgY2hhciwgc3RyKSA9PiB7XG4gICAgICByZXR1cm4gY2hhci50b1VwcGVyQ2FzZSgpICsgc3RyO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBidWlsZEFjY2Vzc29ycyhvYmosIGhlYWRlcikge1xuICBjb25zdCBhY2Nlc3Nvck5hbWUgPSB1dGlscy50b0NhbWVsQ2FzZSgnICcgKyBoZWFkZXIpO1xuXG4gIFsnZ2V0JywgJ3NldCcsICdoYXMnXS5mb3JFYWNoKG1ldGhvZE5hbWUgPT4ge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIG1ldGhvZE5hbWUgKyBhY2Nlc3Nvck5hbWUsIHtcbiAgICAgIHZhbHVlOiBmdW5jdGlvbihhcmcxLCBhcmcyLCBhcmczKSB7XG4gICAgICAgIHJldHVybiB0aGlzW21ldGhvZE5hbWVdLmNhbGwodGhpcywgaGVhZGVyLCBhcmcxLCBhcmcyLCBhcmczKTtcbiAgICAgIH0sXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgfSk7XG59XG5cbmNsYXNzIEF4aW9zSGVhZGVycyB7XG4gIGNvbnN0cnVjdG9yKGhlYWRlcnMpIHtcbiAgICBoZWFkZXJzICYmIHRoaXMuc2V0KGhlYWRlcnMpO1xuICB9XG5cbiAgc2V0KGhlYWRlciwgdmFsdWVPclJld3JpdGUsIHJld3JpdGUpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcblxuICAgIGZ1bmN0aW9uIHNldEhlYWRlcihfdmFsdWUsIF9oZWFkZXIsIF9yZXdyaXRlKSB7XG4gICAgICBjb25zdCBsSGVhZGVyID0gbm9ybWFsaXplSGVhZGVyKF9oZWFkZXIpO1xuXG4gICAgICBpZiAoIWxIZWFkZXIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdoZWFkZXIgbmFtZSBtdXN0IGJlIGEgbm9uLWVtcHR5IHN0cmluZycpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBrZXkgPSB1dGlscy5maW5kS2V5KHNlbGYsIGxIZWFkZXIpO1xuXG4gICAgICBpZigha2V5IHx8IHNlbGZba2V5XSA9PT0gdW5kZWZpbmVkIHx8IF9yZXdyaXRlID09PSB0cnVlIHx8IChfcmV3cml0ZSA9PT0gdW5kZWZpbmVkICYmIHNlbGZba2V5XSAhPT0gZmFsc2UpKSB7XG4gICAgICAgIHNlbGZba2V5IHx8IF9oZWFkZXJdID0gbm9ybWFsaXplVmFsdWUoX3ZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBzZXRIZWFkZXJzID0gKGhlYWRlcnMsIF9yZXdyaXRlKSA9PlxuICAgICAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLCAoX3ZhbHVlLCBfaGVhZGVyKSA9PiBzZXRIZWFkZXIoX3ZhbHVlLCBfaGVhZGVyLCBfcmV3cml0ZSkpO1xuXG4gICAgaWYgKHV0aWxzLmlzUGxhaW5PYmplY3QoaGVhZGVyKSB8fCBoZWFkZXIgaW5zdGFuY2VvZiB0aGlzLmNvbnN0cnVjdG9yKSB7XG4gICAgICBzZXRIZWFkZXJzKGhlYWRlciwgdmFsdWVPclJld3JpdGUpXG4gICAgfSBlbHNlIGlmKHV0aWxzLmlzU3RyaW5nKGhlYWRlcikgJiYgKGhlYWRlciA9IGhlYWRlci50cmltKCkpICYmICFpc1ZhbGlkSGVhZGVyTmFtZShoZWFkZXIpKSB7XG4gICAgICBzZXRIZWFkZXJzKHBhcnNlSGVhZGVycyhoZWFkZXIpLCB2YWx1ZU9yUmV3cml0ZSk7XG4gICAgfSBlbHNlIGlmICh1dGlscy5pc0hlYWRlcnMoaGVhZGVyKSkge1xuICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgaGVhZGVyLmVudHJpZXMoKSkge1xuICAgICAgICBzZXRIZWFkZXIodmFsdWUsIGtleSwgcmV3cml0ZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGhlYWRlciAhPSBudWxsICYmIHNldEhlYWRlcih2YWx1ZU9yUmV3cml0ZSwgaGVhZGVyLCByZXdyaXRlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGdldChoZWFkZXIsIHBhcnNlcikge1xuICAgIGhlYWRlciA9IG5vcm1hbGl6ZUhlYWRlcihoZWFkZXIpO1xuXG4gICAgaWYgKGhlYWRlcikge1xuICAgICAgY29uc3Qga2V5ID0gdXRpbHMuZmluZEtleSh0aGlzLCBoZWFkZXIpO1xuXG4gICAgICBpZiAoa2V5KSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdGhpc1trZXldO1xuXG4gICAgICAgIGlmICghcGFyc2VyKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBhcnNlciA9PT0gdHJ1ZSkge1xuICAgICAgICAgIHJldHVybiBwYXJzZVRva2Vucyh2YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodXRpbHMuaXNGdW5jdGlvbihwYXJzZXIpKSB7XG4gICAgICAgICAgcmV0dXJuIHBhcnNlci5jYWxsKHRoaXMsIHZhbHVlLCBrZXkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHV0aWxzLmlzUmVnRXhwKHBhcnNlcikpIHtcbiAgICAgICAgICByZXR1cm4gcGFyc2VyLmV4ZWModmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigncGFyc2VyIG11c3QgYmUgYm9vbGVhbnxyZWdleHB8ZnVuY3Rpb24nKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBoYXMoaGVhZGVyLCBtYXRjaGVyKSB7XG4gICAgaGVhZGVyID0gbm9ybWFsaXplSGVhZGVyKGhlYWRlcik7XG5cbiAgICBpZiAoaGVhZGVyKSB7XG4gICAgICBjb25zdCBrZXkgPSB1dGlscy5maW5kS2V5KHRoaXMsIGhlYWRlcik7XG5cbiAgICAgIHJldHVybiAhIShrZXkgJiYgdGhpc1trZXldICE9PSB1bmRlZmluZWQgJiYgKCFtYXRjaGVyIHx8IG1hdGNoSGVhZGVyVmFsdWUodGhpcywgdGhpc1trZXldLCBrZXksIG1hdGNoZXIpKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZGVsZXRlKGhlYWRlciwgbWF0Y2hlcikge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGxldCBkZWxldGVkID0gZmFsc2U7XG5cbiAgICBmdW5jdGlvbiBkZWxldGVIZWFkZXIoX2hlYWRlcikge1xuICAgICAgX2hlYWRlciA9IG5vcm1hbGl6ZUhlYWRlcihfaGVhZGVyKTtcblxuICAgICAgaWYgKF9oZWFkZXIpIHtcbiAgICAgICAgY29uc3Qga2V5ID0gdXRpbHMuZmluZEtleShzZWxmLCBfaGVhZGVyKTtcblxuICAgICAgICBpZiAoa2V5ICYmICghbWF0Y2hlciB8fCBtYXRjaEhlYWRlclZhbHVlKHNlbGYsIHNlbGZba2V5XSwga2V5LCBtYXRjaGVyKSkpIHtcbiAgICAgICAgICBkZWxldGUgc2VsZltrZXldO1xuXG4gICAgICAgICAgZGVsZXRlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodXRpbHMuaXNBcnJheShoZWFkZXIpKSB7XG4gICAgICBoZWFkZXIuZm9yRWFjaChkZWxldGVIZWFkZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWxldGVIZWFkZXIoaGVhZGVyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGVsZXRlZDtcbiAgfVxuXG4gIGNsZWFyKG1hdGNoZXIpIHtcbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXModGhpcyk7XG4gICAgbGV0IGkgPSBrZXlzLmxlbmd0aDtcbiAgICBsZXQgZGVsZXRlZCA9IGZhbHNlO1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgY29uc3Qga2V5ID0ga2V5c1tpXTtcbiAgICAgIGlmKCFtYXRjaGVyIHx8IG1hdGNoSGVhZGVyVmFsdWUodGhpcywgdGhpc1trZXldLCBrZXksIG1hdGNoZXIsIHRydWUpKSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzW2tleV07XG4gICAgICAgIGRlbGV0ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBkZWxldGVkO1xuICB9XG5cbiAgbm9ybWFsaXplKGZvcm1hdCkge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcblxuICAgIHV0aWxzLmZvckVhY2godGhpcywgKHZhbHVlLCBoZWFkZXIpID0+IHtcbiAgICAgIGNvbnN0IGtleSA9IHV0aWxzLmZpbmRLZXkoaGVhZGVycywgaGVhZGVyKTtcblxuICAgICAgaWYgKGtleSkge1xuICAgICAgICBzZWxmW2tleV0gPSBub3JtYWxpemVWYWx1ZSh2YWx1ZSk7XG4gICAgICAgIGRlbGV0ZSBzZWxmW2hlYWRlcl07XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29uc3Qgbm9ybWFsaXplZCA9IGZvcm1hdCA/IGZvcm1hdEhlYWRlcihoZWFkZXIpIDogU3RyaW5nKGhlYWRlcikudHJpbSgpO1xuXG4gICAgICBpZiAobm9ybWFsaXplZCAhPT0gaGVhZGVyKSB7XG4gICAgICAgIGRlbGV0ZSBzZWxmW2hlYWRlcl07XG4gICAgICB9XG5cbiAgICAgIHNlbGZbbm9ybWFsaXplZF0gPSBub3JtYWxpemVWYWx1ZSh2YWx1ZSk7XG5cbiAgICAgIGhlYWRlcnNbbm9ybWFsaXplZF0gPSB0cnVlO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBjb25jYXQoLi4udGFyZ2V0cykge1xuICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLmNvbmNhdCh0aGlzLCAuLi50YXJnZXRzKTtcbiAgfVxuXG4gIHRvSlNPTihhc1N0cmluZ3MpIHtcbiAgICBjb25zdCBvYmogPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gICAgdXRpbHMuZm9yRWFjaCh0aGlzLCAodmFsdWUsIGhlYWRlcikgPT4ge1xuICAgICAgdmFsdWUgIT0gbnVsbCAmJiB2YWx1ZSAhPT0gZmFsc2UgJiYgKG9ialtoZWFkZXJdID0gYXNTdHJpbmdzICYmIHV0aWxzLmlzQXJyYXkodmFsdWUpID8gdmFsdWUuam9pbignLCAnKSA6IHZhbHVlKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBvYmo7XG4gIH1cblxuICBbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICByZXR1cm4gT2JqZWN0LmVudHJpZXModGhpcy50b0pTT04oKSlbU3ltYm9sLml0ZXJhdG9yXSgpO1xuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKHRoaXMudG9KU09OKCkpLm1hcCgoW2hlYWRlciwgdmFsdWVdKSA9PiBoZWFkZXIgKyAnOiAnICsgdmFsdWUpLmpvaW4oJ1xcbicpO1xuICB9XG5cbiAgZ2V0IFtTeW1ib2wudG9TdHJpbmdUYWddKCkge1xuICAgIHJldHVybiAnQXhpb3NIZWFkZXJzJztcbiAgfVxuXG4gIHN0YXRpYyBmcm9tKHRoaW5nKSB7XG4gICAgcmV0dXJuIHRoaW5nIGluc3RhbmNlb2YgdGhpcyA/IHRoaW5nIDogbmV3IHRoaXModGhpbmcpO1xuICB9XG5cbiAgc3RhdGljIGNvbmNhdChmaXJzdCwgLi4udGFyZ2V0cykge1xuICAgIGNvbnN0IGNvbXB1dGVkID0gbmV3IHRoaXMoZmlyc3QpO1xuXG4gICAgdGFyZ2V0cy5mb3JFYWNoKCh0YXJnZXQpID0+IGNvbXB1dGVkLnNldCh0YXJnZXQpKTtcblxuICAgIHJldHVybiBjb21wdXRlZDtcbiAgfVxuXG4gIHN0YXRpYyBhY2Nlc3NvcihoZWFkZXIpIHtcbiAgICBjb25zdCBpbnRlcm5hbHMgPSB0aGlzWyRpbnRlcm5hbHNdID0gKHRoaXNbJGludGVybmFsc10gPSB7XG4gICAgICBhY2Nlc3NvcnM6IHt9XG4gICAgfSk7XG5cbiAgICBjb25zdCBhY2Nlc3NvcnMgPSBpbnRlcm5hbHMuYWNjZXNzb3JzO1xuICAgIGNvbnN0IHByb3RvdHlwZSA9IHRoaXMucHJvdG90eXBlO1xuXG4gICAgZnVuY3Rpb24gZGVmaW5lQWNjZXNzb3IoX2hlYWRlcikge1xuICAgICAgY29uc3QgbEhlYWRlciA9IG5vcm1hbGl6ZUhlYWRlcihfaGVhZGVyKTtcblxuICAgICAgaWYgKCFhY2Nlc3NvcnNbbEhlYWRlcl0pIHtcbiAgICAgICAgYnVpbGRBY2Nlc3NvcnMocHJvdG90eXBlLCBfaGVhZGVyKTtcbiAgICAgICAgYWNjZXNzb3JzW2xIZWFkZXJdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB1dGlscy5pc0FycmF5KGhlYWRlcikgPyBoZWFkZXIuZm9yRWFjaChkZWZpbmVBY2Nlc3NvcikgOiBkZWZpbmVBY2Nlc3NvcihoZWFkZXIpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn1cblxuQXhpb3NIZWFkZXJzLmFjY2Vzc29yKFsnQ29udGVudC1UeXBlJywgJ0NvbnRlbnQtTGVuZ3RoJywgJ0FjY2VwdCcsICdBY2NlcHQtRW5jb2RpbmcnLCAnVXNlci1BZ2VudCcsICdBdXRob3JpemF0aW9uJ10pO1xuXG4vLyByZXNlcnZlZCBuYW1lcyBob3RmaXhcbnV0aWxzLnJlZHVjZURlc2NyaXB0b3JzKEF4aW9zSGVhZGVycy5wcm90b3R5cGUsICh7dmFsdWV9LCBrZXkpID0+IHtcbiAgbGV0IG1hcHBlZCA9IGtleVswXS50b1VwcGVyQ2FzZSgpICsga2V5LnNsaWNlKDEpOyAvLyBtYXAgYHNldGAgPT4gYFNldGBcbiAgcmV0dXJuIHtcbiAgICBnZXQ6ICgpID0+IHZhbHVlLFxuICAgIHNldChoZWFkZXJWYWx1ZSkge1xuICAgICAgdGhpc1ttYXBwZWRdID0gaGVhZGVyVmFsdWU7XG4gICAgfVxuICB9XG59KTtcblxudXRpbHMuZnJlZXplTWV0aG9kcyhBeGlvc0hlYWRlcnMpO1xuXG5leHBvcnQgZGVmYXVsdCBBeGlvc0hlYWRlcnM7XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi8uLi91dGlscy5qcyc7XG5pbXBvcnQgZGVmYXVsdHMgZnJvbSAnLi4vZGVmYXVsdHMvaW5kZXguanMnO1xuaW1wb3J0IEF4aW9zSGVhZGVycyBmcm9tICcuLi9jb3JlL0F4aW9zSGVhZGVycy5qcyc7XG5cbi8qKlxuICogVHJhbnNmb3JtIHRoZSBkYXRhIGZvciBhIHJlcXVlc3Qgb3IgYSByZXNwb25zZVxuICpcbiAqIEBwYXJhbSB7QXJyYXl8RnVuY3Rpb259IGZucyBBIHNpbmdsZSBmdW5jdGlvbiBvciBBcnJheSBvZiBmdW5jdGlvbnNcbiAqIEBwYXJhbSB7P09iamVjdH0gcmVzcG9uc2UgVGhlIHJlc3BvbnNlIG9iamVjdFxuICpcbiAqIEByZXR1cm5zIHsqfSBUaGUgcmVzdWx0aW5nIHRyYW5zZm9ybWVkIGRhdGFcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdHJhbnNmb3JtRGF0YShmbnMsIHJlc3BvbnNlKSB7XG4gIGNvbnN0IGNvbmZpZyA9IHRoaXMgfHwgZGVmYXVsdHM7XG4gIGNvbnN0IGNvbnRleHQgPSByZXNwb25zZSB8fCBjb25maWc7XG4gIGNvbnN0IGhlYWRlcnMgPSBBeGlvc0hlYWRlcnMuZnJvbShjb250ZXh0LmhlYWRlcnMpO1xuICBsZXQgZGF0YSA9IGNvbnRleHQuZGF0YTtcblxuICB1dGlscy5mb3JFYWNoKGZucywgZnVuY3Rpb24gdHJhbnNmb3JtKGZuKSB7XG4gICAgZGF0YSA9IGZuLmNhbGwoY29uZmlnLCBkYXRhLCBoZWFkZXJzLm5vcm1hbGl6ZSgpLCByZXNwb25zZSA/IHJlc3BvbnNlLnN0YXR1cyA6IHVuZGVmaW5lZCk7XG4gIH0pO1xuXG4gIGhlYWRlcnMubm9ybWFsaXplKCk7XG5cbiAgcmV0dXJuIGRhdGE7XG59XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc0NhbmNlbCh2YWx1ZSkge1xuICByZXR1cm4gISEodmFsdWUgJiYgdmFsdWUuX19DQU5DRUxfXyk7XG59XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgQXhpb3NFcnJvciBmcm9tICcuLi9jb3JlL0F4aW9zRXJyb3IuanMnO1xuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcblxuLyoqXG4gKiBBIGBDYW5jZWxlZEVycm9yYCBpcyBhbiBvYmplY3QgdGhhdCBpcyB0aHJvd24gd2hlbiBhbiBvcGVyYXRpb24gaXMgY2FuY2VsZWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmc9fSBtZXNzYWdlIFRoZSBtZXNzYWdlLlxuICogQHBhcmFtIHtPYmplY3Q9fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7T2JqZWN0PX0gcmVxdWVzdCBUaGUgcmVxdWVzdC5cbiAqXG4gKiBAcmV0dXJucyB7Q2FuY2VsZWRFcnJvcn0gVGhlIGNyZWF0ZWQgZXJyb3IuXG4gKi9cbmZ1bmN0aW9uIENhbmNlbGVkRXJyb3IobWVzc2FnZSwgY29uZmlnLCByZXF1ZXN0KSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lcS1udWxsLGVxZXFlcVxuICBBeGlvc0Vycm9yLmNhbGwodGhpcywgbWVzc2FnZSA9PSBudWxsID8gJ2NhbmNlbGVkJyA6IG1lc3NhZ2UsIEF4aW9zRXJyb3IuRVJSX0NBTkNFTEVELCBjb25maWcsIHJlcXVlc3QpO1xuICB0aGlzLm5hbWUgPSAnQ2FuY2VsZWRFcnJvcic7XG59XG5cbnV0aWxzLmluaGVyaXRzKENhbmNlbGVkRXJyb3IsIEF4aW9zRXJyb3IsIHtcbiAgX19DQU5DRUxfXzogdHJ1ZVxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IENhbmNlbGVkRXJyb3I7XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgQXhpb3NFcnJvciBmcm9tICcuL0F4aW9zRXJyb3IuanMnO1xuXG4vKipcbiAqIFJlc29sdmUgb3IgcmVqZWN0IGEgUHJvbWlzZSBiYXNlZCBvbiByZXNwb25zZSBzdGF0dXMuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVzb2x2ZSBBIGZ1bmN0aW9uIHRoYXQgcmVzb2x2ZXMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3QgQSBmdW5jdGlvbiB0aGF0IHJlamVjdHMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge29iamVjdH0gcmVzcG9uc2UgVGhlIHJlc3BvbnNlLlxuICpcbiAqIEByZXR1cm5zIHtvYmplY3R9IFRoZSByZXNwb25zZS5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgcmVzcG9uc2UpIHtcbiAgY29uc3QgdmFsaWRhdGVTdGF0dXMgPSByZXNwb25zZS5jb25maWcudmFsaWRhdGVTdGF0dXM7XG4gIGlmICghcmVzcG9uc2Uuc3RhdHVzIHx8ICF2YWxpZGF0ZVN0YXR1cyB8fCB2YWxpZGF0ZVN0YXR1cyhyZXNwb25zZS5zdGF0dXMpKSB7XG4gICAgcmVzb2x2ZShyZXNwb25zZSk7XG4gIH0gZWxzZSB7XG4gICAgcmVqZWN0KG5ldyBBeGlvc0Vycm9yKFxuICAgICAgJ1JlcXVlc3QgZmFpbGVkIHdpdGggc3RhdHVzIGNvZGUgJyArIHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgIFtBeGlvc0Vycm9yLkVSUl9CQURfUkVRVUVTVCwgQXhpb3NFcnJvci5FUlJfQkFEX1JFU1BPTlNFXVtNYXRoLmZsb29yKHJlc3BvbnNlLnN0YXR1cyAvIDEwMCkgLSA0XSxcbiAgICAgIHJlc3BvbnNlLmNvbmZpZyxcbiAgICAgIHJlc3BvbnNlLnJlcXVlc3QsXG4gICAgICByZXNwb25zZVxuICAgICkpO1xuICB9XG59XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwYXJzZVByb3RvY29sKHVybCkge1xuICBjb25zdCBtYXRjaCA9IC9eKFstK1xcd117MSwyNX0pKDo/XFwvXFwvfDopLy5leGVjKHVybCk7XG4gIHJldHVybiBtYXRjaCAmJiBtYXRjaFsxXSB8fCAnJztcbn1cbiIsICIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ2FsY3VsYXRlIGRhdGEgbWF4UmF0ZVxuICogQHBhcmFtIHtOdW1iZXJ9IFtzYW1wbGVzQ291bnQ9IDEwXVxuICogQHBhcmFtIHtOdW1iZXJ9IFttaW49IDEwMDBdXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gKi9cbmZ1bmN0aW9uIHNwZWVkb21ldGVyKHNhbXBsZXNDb3VudCwgbWluKSB7XG4gIHNhbXBsZXNDb3VudCA9IHNhbXBsZXNDb3VudCB8fCAxMDtcbiAgY29uc3QgYnl0ZXMgPSBuZXcgQXJyYXkoc2FtcGxlc0NvdW50KTtcbiAgY29uc3QgdGltZXN0YW1wcyA9IG5ldyBBcnJheShzYW1wbGVzQ291bnQpO1xuICBsZXQgaGVhZCA9IDA7XG4gIGxldCB0YWlsID0gMDtcbiAgbGV0IGZpcnN0U2FtcGxlVFM7XG5cbiAgbWluID0gbWluICE9PSB1bmRlZmluZWQgPyBtaW4gOiAxMDAwO1xuXG4gIHJldHVybiBmdW5jdGlvbiBwdXNoKGNodW5rTGVuZ3RoKSB7XG4gICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcblxuICAgIGNvbnN0IHN0YXJ0ZWRBdCA9IHRpbWVzdGFtcHNbdGFpbF07XG5cbiAgICBpZiAoIWZpcnN0U2FtcGxlVFMpIHtcbiAgICAgIGZpcnN0U2FtcGxlVFMgPSBub3c7XG4gICAgfVxuXG4gICAgYnl0ZXNbaGVhZF0gPSBjaHVua0xlbmd0aDtcbiAgICB0aW1lc3RhbXBzW2hlYWRdID0gbm93O1xuXG4gICAgbGV0IGkgPSB0YWlsO1xuICAgIGxldCBieXRlc0NvdW50ID0gMDtcblxuICAgIHdoaWxlIChpICE9PSBoZWFkKSB7XG4gICAgICBieXRlc0NvdW50ICs9IGJ5dGVzW2krK107XG4gICAgICBpID0gaSAlIHNhbXBsZXNDb3VudDtcbiAgICB9XG5cbiAgICBoZWFkID0gKGhlYWQgKyAxKSAlIHNhbXBsZXNDb3VudDtcblxuICAgIGlmIChoZWFkID09PSB0YWlsKSB7XG4gICAgICB0YWlsID0gKHRhaWwgKyAxKSAlIHNhbXBsZXNDb3VudDtcbiAgICB9XG5cbiAgICBpZiAobm93IC0gZmlyc3RTYW1wbGVUUyA8IG1pbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHBhc3NlZCA9IHN0YXJ0ZWRBdCAmJiBub3cgLSBzdGFydGVkQXQ7XG5cbiAgICByZXR1cm4gcGFzc2VkID8gTWF0aC5yb3VuZChieXRlc0NvdW50ICogMTAwMCAvIHBhc3NlZCkgOiB1bmRlZmluZWQ7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IHNwZWVkb21ldGVyO1xuIiwgIi8qKlxuICogVGhyb3R0bGUgZGVjb3JhdG9yXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICogQHBhcmFtIHtOdW1iZXJ9IGZyZXFcbiAqIEByZXR1cm4ge0Z1bmN0aW9ufVxuICovXG5mdW5jdGlvbiB0aHJvdHRsZShmbiwgZnJlcSkge1xuICBsZXQgdGltZXN0YW1wID0gMDtcbiAgbGV0IHRocmVzaG9sZCA9IDEwMDAgLyBmcmVxO1xuICBsZXQgbGFzdEFyZ3M7XG4gIGxldCB0aW1lcjtcblxuICBjb25zdCBpbnZva2UgPSAoYXJncywgbm93ID0gRGF0ZS5ub3coKSkgPT4ge1xuICAgIHRpbWVzdGFtcCA9IG5vdztcbiAgICBsYXN0QXJncyA9IG51bGw7XG4gICAgaWYgKHRpbWVyKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgICAgdGltZXIgPSBudWxsO1xuICAgIH1cbiAgICBmbi5hcHBseShudWxsLCBhcmdzKTtcbiAgfVxuXG4gIGNvbnN0IHRocm90dGxlZCA9ICguLi5hcmdzKSA9PiB7XG4gICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcbiAgICBjb25zdCBwYXNzZWQgPSBub3cgLSB0aW1lc3RhbXA7XG4gICAgaWYgKCBwYXNzZWQgPj0gdGhyZXNob2xkKSB7XG4gICAgICBpbnZva2UoYXJncywgbm93KTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGFzdEFyZ3MgPSBhcmdzO1xuICAgICAgaWYgKCF0aW1lcikge1xuICAgICAgICB0aW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIHRpbWVyID0gbnVsbDtcbiAgICAgICAgICBpbnZva2UobGFzdEFyZ3MpXG4gICAgICAgIH0sIHRocmVzaG9sZCAtIHBhc3NlZCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgY29uc3QgZmx1c2ggPSAoKSA9PiBsYXN0QXJncyAmJiBpbnZva2UobGFzdEFyZ3MpO1xuXG4gIHJldHVybiBbdGhyb3R0bGVkLCBmbHVzaF07XG59XG5cbmV4cG9ydCBkZWZhdWx0IHRocm90dGxlO1xuIiwgImltcG9ydCBzcGVlZG9tZXRlciBmcm9tIFwiLi9zcGVlZG9tZXRlci5qc1wiO1xuaW1wb3J0IHRocm90dGxlIGZyb20gXCIuL3Rocm90dGxlLmpzXCI7XG5pbXBvcnQgdXRpbHMgZnJvbSBcIi4uL3V0aWxzLmpzXCI7XG5cbmV4cG9ydCBjb25zdCBwcm9ncmVzc0V2ZW50UmVkdWNlciA9IChsaXN0ZW5lciwgaXNEb3dubG9hZFN0cmVhbSwgZnJlcSA9IDMpID0+IHtcbiAgbGV0IGJ5dGVzTm90aWZpZWQgPSAwO1xuICBjb25zdCBfc3BlZWRvbWV0ZXIgPSBzcGVlZG9tZXRlcig1MCwgMjUwKTtcblxuICByZXR1cm4gdGhyb3R0bGUoZSA9PiB7XG4gICAgY29uc3QgbG9hZGVkID0gZS5sb2FkZWQ7XG4gICAgY29uc3QgdG90YWwgPSBlLmxlbmd0aENvbXB1dGFibGUgPyBlLnRvdGFsIDogdW5kZWZpbmVkO1xuICAgIGNvbnN0IHByb2dyZXNzQnl0ZXMgPSBsb2FkZWQgLSBieXRlc05vdGlmaWVkO1xuICAgIGNvbnN0IHJhdGUgPSBfc3BlZWRvbWV0ZXIocHJvZ3Jlc3NCeXRlcyk7XG4gICAgY29uc3QgaW5SYW5nZSA9IGxvYWRlZCA8PSB0b3RhbDtcblxuICAgIGJ5dGVzTm90aWZpZWQgPSBsb2FkZWQ7XG5cbiAgICBjb25zdCBkYXRhID0ge1xuICAgICAgbG9hZGVkLFxuICAgICAgdG90YWwsXG4gICAgICBwcm9ncmVzczogdG90YWwgPyAobG9hZGVkIC8gdG90YWwpIDogdW5kZWZpbmVkLFxuICAgICAgYnl0ZXM6IHByb2dyZXNzQnl0ZXMsXG4gICAgICByYXRlOiByYXRlID8gcmF0ZSA6IHVuZGVmaW5lZCxcbiAgICAgIGVzdGltYXRlZDogcmF0ZSAmJiB0b3RhbCAmJiBpblJhbmdlID8gKHRvdGFsIC0gbG9hZGVkKSAvIHJhdGUgOiB1bmRlZmluZWQsXG4gICAgICBldmVudDogZSxcbiAgICAgIGxlbmd0aENvbXB1dGFibGU6IHRvdGFsICE9IG51bGwsXG4gICAgICBbaXNEb3dubG9hZFN0cmVhbSA/ICdkb3dubG9hZCcgOiAndXBsb2FkJ106IHRydWVcbiAgICB9O1xuXG4gICAgbGlzdGVuZXIoZGF0YSk7XG4gIH0sIGZyZXEpO1xufVxuXG5leHBvcnQgY29uc3QgcHJvZ3Jlc3NFdmVudERlY29yYXRvciA9ICh0b3RhbCwgdGhyb3R0bGVkKSA9PiB7XG4gIGNvbnN0IGxlbmd0aENvbXB1dGFibGUgPSB0b3RhbCAhPSBudWxsO1xuXG4gIHJldHVybiBbKGxvYWRlZCkgPT4gdGhyb3R0bGVkWzBdKHtcbiAgICBsZW5ndGhDb21wdXRhYmxlLFxuICAgIHRvdGFsLFxuICAgIGxvYWRlZFxuICB9KSwgdGhyb3R0bGVkWzFdXTtcbn1cblxuZXhwb3J0IGNvbnN0IGFzeW5jRGVjb3JhdG9yID0gKGZuKSA9PiAoLi4uYXJncykgPT4gdXRpbHMuYXNhcCgoKSA9PiBmbiguLi5hcmdzKSk7XG4iLCAiaW1wb3J0IHBsYXRmb3JtIGZyb20gJy4uL3BsYXRmb3JtL2luZGV4LmpzJztcblxuZXhwb3J0IGRlZmF1bHQgcGxhdGZvcm0uaGFzU3RhbmRhcmRCcm93c2VyRW52ID8gKChvcmlnaW4sIGlzTVNJRSkgPT4gKHVybCkgPT4ge1xuICB1cmwgPSBuZXcgVVJMKHVybCwgcGxhdGZvcm0ub3JpZ2luKTtcblxuICByZXR1cm4gKFxuICAgIG9yaWdpbi5wcm90b2NvbCA9PT0gdXJsLnByb3RvY29sICYmXG4gICAgb3JpZ2luLmhvc3QgPT09IHVybC5ob3N0ICYmXG4gICAgKGlzTVNJRSB8fCBvcmlnaW4ucG9ydCA9PT0gdXJsLnBvcnQpXG4gICk7XG59KShcbiAgbmV3IFVSTChwbGF0Zm9ybS5vcmlnaW4pLFxuICBwbGF0Zm9ybS5uYXZpZ2F0b3IgJiYgLyhtc2llfHRyaWRlbnQpL2kudGVzdChwbGF0Zm9ybS5uYXZpZ2F0b3IudXNlckFnZW50KVxuKSA6ICgpID0+IHRydWU7XG4iLCAiaW1wb3J0IHV0aWxzIGZyb20gJy4vLi4vdXRpbHMuanMnO1xuaW1wb3J0IHBsYXRmb3JtIGZyb20gJy4uL3BsYXRmb3JtL2luZGV4LmpzJztcblxuZXhwb3J0IGRlZmF1bHQgcGxhdGZvcm0uaGFzU3RhbmRhcmRCcm93c2VyRW52ID9cblxuICAvLyBTdGFuZGFyZCBicm93c2VyIGVudnMgc3VwcG9ydCBkb2N1bWVudC5jb29raWVcbiAge1xuICAgIHdyaXRlKG5hbWUsIHZhbHVlLCBleHBpcmVzLCBwYXRoLCBkb21haW4sIHNlY3VyZSkge1xuICAgICAgY29uc3QgY29va2llID0gW25hbWUgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpXTtcblxuICAgICAgdXRpbHMuaXNOdW1iZXIoZXhwaXJlcykgJiYgY29va2llLnB1c2goJ2V4cGlyZXM9JyArIG5ldyBEYXRlKGV4cGlyZXMpLnRvR01UU3RyaW5nKCkpO1xuXG4gICAgICB1dGlscy5pc1N0cmluZyhwYXRoKSAmJiBjb29raWUucHVzaCgncGF0aD0nICsgcGF0aCk7XG5cbiAgICAgIHV0aWxzLmlzU3RyaW5nKGRvbWFpbikgJiYgY29va2llLnB1c2goJ2RvbWFpbj0nICsgZG9tYWluKTtcblxuICAgICAgc2VjdXJlID09PSB0cnVlICYmIGNvb2tpZS5wdXNoKCdzZWN1cmUnKTtcblxuICAgICAgZG9jdW1lbnQuY29va2llID0gY29va2llLmpvaW4oJzsgJyk7XG4gICAgfSxcblxuICAgIHJlYWQobmFtZSkge1xuICAgICAgY29uc3QgbWF0Y2ggPSBkb2N1bWVudC5jb29raWUubWF0Y2gobmV3IFJlZ0V4cCgnKF58O1xcXFxzKikoJyArIG5hbWUgKyAnKT0oW147XSopJykpO1xuICAgICAgcmV0dXJuIChtYXRjaCA/IGRlY29kZVVSSUNvbXBvbmVudChtYXRjaFszXSkgOiBudWxsKTtcbiAgICB9LFxuXG4gICAgcmVtb3ZlKG5hbWUpIHtcbiAgICAgIHRoaXMud3JpdGUobmFtZSwgJycsIERhdGUubm93KCkgLSA4NjQwMDAwMCk7XG4gICAgfVxuICB9XG5cbiAgOlxuXG4gIC8vIE5vbi1zdGFuZGFyZCBicm93c2VyIGVudiAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAge1xuICAgIHdyaXRlKCkge30sXG4gICAgcmVhZCgpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0sXG4gICAgcmVtb3ZlKCkge31cbiAgfTtcblxuIiwgIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGVcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBVUkwgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNBYnNvbHV0ZVVSTCh1cmwpIHtcbiAgLy8gQSBVUkwgaXMgY29uc2lkZXJlZCBhYnNvbHV0ZSBpZiBpdCBiZWdpbnMgd2l0aCBcIjxzY2hlbWU+Oi8vXCIgb3IgXCIvL1wiIChwcm90b2NvbC1yZWxhdGl2ZSBVUkwpLlxuICAvLyBSRkMgMzk4NiBkZWZpbmVzIHNjaGVtZSBuYW1lIGFzIGEgc2VxdWVuY2Ugb2YgY2hhcmFjdGVycyBiZWdpbm5pbmcgd2l0aCBhIGxldHRlciBhbmQgZm9sbG93ZWRcbiAgLy8gYnkgYW55IGNvbWJpbmF0aW9uIG9mIGxldHRlcnMsIGRpZ2l0cywgcGx1cywgcGVyaW9kLCBvciBoeXBoZW4uXG4gIHJldHVybiAvXihbYS16XVthLXpcXGQrXFwtLl0qOik/XFwvXFwvL2kudGVzdCh1cmwpO1xufVxuIiwgIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIHNwZWNpZmllZCBVUkxzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkwgVGhlIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVsYXRpdmVVUkwgVGhlIHJlbGF0aXZlIFVSTFxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb21iaW5lZCBVUkxcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29tYmluZVVSTHMoYmFzZVVSTCwgcmVsYXRpdmVVUkwpIHtcbiAgcmV0dXJuIHJlbGF0aXZlVVJMXG4gICAgPyBiYXNlVVJMLnJlcGxhY2UoL1xcLz9cXC8kLywgJycpICsgJy8nICsgcmVsYXRpdmVVUkwucmVwbGFjZSgvXlxcLysvLCAnJylcbiAgICA6IGJhc2VVUkw7XG59XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgaXNBYnNvbHV0ZVVSTCBmcm9tICcuLi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwuanMnO1xuaW1wb3J0IGNvbWJpbmVVUkxzIGZyb20gJy4uL2hlbHBlcnMvY29tYmluZVVSTHMuanMnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVVJMIGJ5IGNvbWJpbmluZyB0aGUgYmFzZVVSTCB3aXRoIHRoZSByZXF1ZXN0ZWRVUkwsXG4gKiBvbmx5IHdoZW4gdGhlIHJlcXVlc3RlZFVSTCBpcyBub3QgYWxyZWFkeSBhbiBhYnNvbHV0ZSBVUkwuXG4gKiBJZiB0aGUgcmVxdWVzdFVSTCBpcyBhYnNvbHV0ZSwgdGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSByZXF1ZXN0ZWRVUkwgdW50b3VjaGVkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJMIFRoZSBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IHJlcXVlc3RlZFVSTCBBYnNvbHV0ZSBvciByZWxhdGl2ZSBVUkwgdG8gY29tYmluZVxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb21iaW5lZCBmdWxsIHBhdGhcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGRGdWxsUGF0aChiYXNlVVJMLCByZXF1ZXN0ZWRVUkwpIHtcbiAgaWYgKGJhc2VVUkwgJiYgIWlzQWJzb2x1dGVVUkwocmVxdWVzdGVkVVJMKSkge1xuICAgIHJldHVybiBjb21iaW5lVVJMcyhiYXNlVVJMLCByZXF1ZXN0ZWRVUkwpO1xuICB9XG4gIHJldHVybiByZXF1ZXN0ZWRVUkw7XG59XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuaW1wb3J0IEF4aW9zSGVhZGVycyBmcm9tIFwiLi9BeGlvc0hlYWRlcnMuanNcIjtcblxuY29uc3QgaGVhZGVyc1RvT2JqZWN0ID0gKHRoaW5nKSA9PiB0aGluZyBpbnN0YW5jZW9mIEF4aW9zSGVhZGVycyA/IHsgLi4udGhpbmcgfSA6IHRoaW5nO1xuXG4vKipcbiAqIENvbmZpZy1zcGVjaWZpYyBtZXJnZS1mdW5jdGlvbiB3aGljaCBjcmVhdGVzIGEgbmV3IGNvbmZpZy1vYmplY3RcbiAqIGJ5IG1lcmdpbmcgdHdvIGNvbmZpZ3VyYXRpb24gb2JqZWN0cyB0b2dldGhlci5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnMVxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZzJcbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBOZXcgb2JqZWN0IHJlc3VsdGluZyBmcm9tIG1lcmdpbmcgY29uZmlnMiB0byBjb25maWcxXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1lcmdlQ29uZmlnKGNvbmZpZzEsIGNvbmZpZzIpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gIGNvbmZpZzIgPSBjb25maWcyIHx8IHt9O1xuICBjb25zdCBjb25maWcgPSB7fTtcblxuICBmdW5jdGlvbiBnZXRNZXJnZWRWYWx1ZSh0YXJnZXQsIHNvdXJjZSwgcHJvcCwgY2FzZWxlc3MpIHtcbiAgICBpZiAodXRpbHMuaXNQbGFpbk9iamVjdCh0YXJnZXQpICYmIHV0aWxzLmlzUGxhaW5PYmplY3Qoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHV0aWxzLm1lcmdlLmNhbGwoe2Nhc2VsZXNzfSwgdGFyZ2V0LCBzb3VyY2UpO1xuICAgIH0gZWxzZSBpZiAodXRpbHMuaXNQbGFpbk9iamVjdChzb3VyY2UpKSB7XG4gICAgICByZXR1cm4gdXRpbHMubWVyZ2Uoe30sIHNvdXJjZSk7XG4gICAgfSBlbHNlIGlmICh1dGlscy5pc0FycmF5KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiBzb3VyY2Uuc2xpY2UoKTtcbiAgICB9XG4gICAgcmV0dXJuIHNvdXJjZTtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICBmdW5jdGlvbiBtZXJnZURlZXBQcm9wZXJ0aWVzKGEsIGIsIHByb3AgLCBjYXNlbGVzcykge1xuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoYikpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZShhLCBiLCBwcm9wICwgY2FzZWxlc3MpO1xuICAgIH0gZWxzZSBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGEpKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBhLCBwcm9wICwgY2FzZWxlc3MpO1xuICAgIH1cbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICBmdW5jdGlvbiB2YWx1ZUZyb21Db25maWcyKGEsIGIpIHtcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGIpKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBiKTtcbiAgICB9XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgZnVuY3Rpb24gZGVmYXVsdFRvQ29uZmlnMihhLCBiKSB7XG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChiKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgYik7XG4gICAgfSBlbHNlIGlmICghdXRpbHMuaXNVbmRlZmluZWQoYSkpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGEpO1xuICAgIH1cbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICBmdW5jdGlvbiBtZXJnZURpcmVjdEtleXMoYSwgYiwgcHJvcCkge1xuICAgIGlmIChwcm9wIGluIGNvbmZpZzIpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZShhLCBiKTtcbiAgICB9IGVsc2UgaWYgKHByb3AgaW4gY29uZmlnMSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgYSk7XG4gICAgfVxuICB9XG5cbiAgY29uc3QgbWVyZ2VNYXAgPSB7XG4gICAgdXJsOiB2YWx1ZUZyb21Db25maWcyLFxuICAgIG1ldGhvZDogdmFsdWVGcm9tQ29uZmlnMixcbiAgICBkYXRhOiB2YWx1ZUZyb21Db25maWcyLFxuICAgIGJhc2VVUkw6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgdHJhbnNmb3JtUmVxdWVzdDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB0cmFuc2Zvcm1SZXNwb25zZTogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBwYXJhbXNTZXJpYWxpemVyOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHRpbWVvdXQ6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgdGltZW91dE1lc3NhZ2U6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgd2l0aENyZWRlbnRpYWxzOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHdpdGhYU1JGVG9rZW46IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgYWRhcHRlcjogZGVmYXVsdFRvQ29uZmlnMixcbiAgICByZXNwb25zZVR5cGU6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgeHNyZkNvb2tpZU5hbWU6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgeHNyZkhlYWRlck5hbWU6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgb25VcGxvYWRQcm9ncmVzczogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBvbkRvd25sb2FkUHJvZ3Jlc3M6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgZGVjb21wcmVzczogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBtYXhDb250ZW50TGVuZ3RoOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIG1heEJvZHlMZW5ndGg6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgYmVmb3JlUmVkaXJlY3Q6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgdHJhbnNwb3J0OiBkZWZhdWx0VG9Db25maWcyLFxuICAgIGh0dHBBZ2VudDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBodHRwc0FnZW50OiBkZWZhdWx0VG9Db25maWcyLFxuICAgIGNhbmNlbFRva2VuOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHNvY2tldFBhdGg6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgcmVzcG9uc2VFbmNvZGluZzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB2YWxpZGF0ZVN0YXR1czogbWVyZ2VEaXJlY3RLZXlzLFxuICAgIGhlYWRlcnM6IChhLCBiICwgcHJvcCkgPT4gbWVyZ2VEZWVwUHJvcGVydGllcyhoZWFkZXJzVG9PYmplY3QoYSksIGhlYWRlcnNUb09iamVjdChiKSxwcm9wLCB0cnVlKVxuICB9O1xuXG4gIHV0aWxzLmZvckVhY2goT2JqZWN0LmtleXMoT2JqZWN0LmFzc2lnbih7fSwgY29uZmlnMSwgY29uZmlnMikpLCBmdW5jdGlvbiBjb21wdXRlQ29uZmlnVmFsdWUocHJvcCkge1xuICAgIGNvbnN0IG1lcmdlID0gbWVyZ2VNYXBbcHJvcF0gfHwgbWVyZ2VEZWVwUHJvcGVydGllcztcbiAgICBjb25zdCBjb25maWdWYWx1ZSA9IG1lcmdlKGNvbmZpZzFbcHJvcF0sIGNvbmZpZzJbcHJvcF0sIHByb3ApO1xuICAgICh1dGlscy5pc1VuZGVmaW5lZChjb25maWdWYWx1ZSkgJiYgbWVyZ2UgIT09IG1lcmdlRGlyZWN0S2V5cykgfHwgKGNvbmZpZ1twcm9wXSA9IGNvbmZpZ1ZhbHVlKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGNvbmZpZztcbn1cbiIsICJpbXBvcnQgcGxhdGZvcm0gZnJvbSBcIi4uL3BsYXRmb3JtL2luZGV4LmpzXCI7XG5pbXBvcnQgdXRpbHMgZnJvbSBcIi4uL3V0aWxzLmpzXCI7XG5pbXBvcnQgaXNVUkxTYW1lT3JpZ2luIGZyb20gXCIuL2lzVVJMU2FtZU9yaWdpbi5qc1wiO1xuaW1wb3J0IGNvb2tpZXMgZnJvbSBcIi4vY29va2llcy5qc1wiO1xuaW1wb3J0IGJ1aWxkRnVsbFBhdGggZnJvbSBcIi4uL2NvcmUvYnVpbGRGdWxsUGF0aC5qc1wiO1xuaW1wb3J0IG1lcmdlQ29uZmlnIGZyb20gXCIuLi9jb3JlL21lcmdlQ29uZmlnLmpzXCI7XG5pbXBvcnQgQXhpb3NIZWFkZXJzIGZyb20gXCIuLi9jb3JlL0F4aW9zSGVhZGVycy5qc1wiO1xuaW1wb3J0IGJ1aWxkVVJMIGZyb20gXCIuL2J1aWxkVVJMLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IChjb25maWcpID0+IHtcbiAgY29uc3QgbmV3Q29uZmlnID0gbWVyZ2VDb25maWcoe30sIGNvbmZpZyk7XG5cbiAgbGV0IHtkYXRhLCB3aXRoWFNSRlRva2VuLCB4c3JmSGVhZGVyTmFtZSwgeHNyZkNvb2tpZU5hbWUsIGhlYWRlcnMsIGF1dGh9ID0gbmV3Q29uZmlnO1xuXG4gIG5ld0NvbmZpZy5oZWFkZXJzID0gaGVhZGVycyA9IEF4aW9zSGVhZGVycy5mcm9tKGhlYWRlcnMpO1xuXG4gIG5ld0NvbmZpZy51cmwgPSBidWlsZFVSTChidWlsZEZ1bGxQYXRoKG5ld0NvbmZpZy5iYXNlVVJMLCBuZXdDb25maWcudXJsKSwgY29uZmlnLnBhcmFtcywgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIpO1xuXG4gIC8vIEhUVFAgYmFzaWMgYXV0aGVudGljYXRpb25cbiAgaWYgKGF1dGgpIHtcbiAgICBoZWFkZXJzLnNldCgnQXV0aG9yaXphdGlvbicsICdCYXNpYyAnICtcbiAgICAgIGJ0b2EoKGF1dGgudXNlcm5hbWUgfHwgJycpICsgJzonICsgKGF1dGgucGFzc3dvcmQgPyB1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoYXV0aC5wYXNzd29yZCkpIDogJycpKVxuICAgICk7XG4gIH1cblxuICBsZXQgY29udGVudFR5cGU7XG5cbiAgaWYgKHV0aWxzLmlzRm9ybURhdGEoZGF0YSkpIHtcbiAgICBpZiAocGxhdGZvcm0uaGFzU3RhbmRhcmRCcm93c2VyRW52IHx8IHBsYXRmb3JtLmhhc1N0YW5kYXJkQnJvd3NlcldlYldvcmtlckVudikge1xuICAgICAgaGVhZGVycy5zZXRDb250ZW50VHlwZSh1bmRlZmluZWQpOyAvLyBMZXQgdGhlIGJyb3dzZXIgc2V0IGl0XG4gICAgfSBlbHNlIGlmICgoY29udGVudFR5cGUgPSBoZWFkZXJzLmdldENvbnRlbnRUeXBlKCkpICE9PSBmYWxzZSkge1xuICAgICAgLy8gZml4IHNlbWljb2xvbiBkdXBsaWNhdGlvbiBpc3N1ZSBmb3IgUmVhY3ROYXRpdmUgRm9ybURhdGEgaW1wbGVtZW50YXRpb25cbiAgICAgIGNvbnN0IFt0eXBlLCAuLi50b2tlbnNdID0gY29udGVudFR5cGUgPyBjb250ZW50VHlwZS5zcGxpdCgnOycpLm1hcCh0b2tlbiA9PiB0b2tlbi50cmltKCkpLmZpbHRlcihCb29sZWFuKSA6IFtdO1xuICAgICAgaGVhZGVycy5zZXRDb250ZW50VHlwZShbdHlwZSB8fCAnbXVsdGlwYXJ0L2Zvcm0tZGF0YScsIC4uLnRva2Vuc10uam9pbignOyAnKSk7XG4gICAgfVxuICB9XG5cbiAgLy8gQWRkIHhzcmYgaGVhZGVyXG4gIC8vIFRoaXMgaXMgb25seSBkb25lIGlmIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50LlxuICAvLyBTcGVjaWZpY2FsbHkgbm90IGlmIHdlJ3JlIGluIGEgd2ViIHdvcmtlciwgb3IgcmVhY3QtbmF0aXZlLlxuXG4gIGlmIChwbGF0Zm9ybS5oYXNTdGFuZGFyZEJyb3dzZXJFbnYpIHtcbiAgICB3aXRoWFNSRlRva2VuICYmIHV0aWxzLmlzRnVuY3Rpb24od2l0aFhTUkZUb2tlbikgJiYgKHdpdGhYU1JGVG9rZW4gPSB3aXRoWFNSRlRva2VuKG5ld0NvbmZpZykpO1xuXG4gICAgaWYgKHdpdGhYU1JGVG9rZW4gfHwgKHdpdGhYU1JGVG9rZW4gIT09IGZhbHNlICYmIGlzVVJMU2FtZU9yaWdpbihuZXdDb25maWcudXJsKSkpIHtcbiAgICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgICAgY29uc3QgeHNyZlZhbHVlID0geHNyZkhlYWRlck5hbWUgJiYgeHNyZkNvb2tpZU5hbWUgJiYgY29va2llcy5yZWFkKHhzcmZDb29raWVOYW1lKTtcblxuICAgICAgaWYgKHhzcmZWYWx1ZSkge1xuICAgICAgICBoZWFkZXJzLnNldCh4c3JmSGVhZGVyTmFtZSwgeHNyZlZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3Q29uZmlnO1xufVxuXG4iLCAiaW1wb3J0IHV0aWxzIGZyb20gJy4vLi4vdXRpbHMuanMnO1xuaW1wb3J0IHNldHRsZSBmcm9tICcuLy4uL2NvcmUvc2V0dGxlLmpzJztcbmltcG9ydCB0cmFuc2l0aW9uYWxEZWZhdWx0cyBmcm9tICcuLi9kZWZhdWx0cy90cmFuc2l0aW9uYWwuanMnO1xuaW1wb3J0IEF4aW9zRXJyb3IgZnJvbSAnLi4vY29yZS9BeGlvc0Vycm9yLmpzJztcbmltcG9ydCBDYW5jZWxlZEVycm9yIGZyb20gJy4uL2NhbmNlbC9DYW5jZWxlZEVycm9yLmpzJztcbmltcG9ydCBwYXJzZVByb3RvY29sIGZyb20gJy4uL2hlbHBlcnMvcGFyc2VQcm90b2NvbC5qcyc7XG5pbXBvcnQgcGxhdGZvcm0gZnJvbSAnLi4vcGxhdGZvcm0vaW5kZXguanMnO1xuaW1wb3J0IEF4aW9zSGVhZGVycyBmcm9tICcuLi9jb3JlL0F4aW9zSGVhZGVycy5qcyc7XG5pbXBvcnQge3Byb2dyZXNzRXZlbnRSZWR1Y2VyfSBmcm9tICcuLi9oZWxwZXJzL3Byb2dyZXNzRXZlbnRSZWR1Y2VyLmpzJztcbmltcG9ydCByZXNvbHZlQ29uZmlnIGZyb20gXCIuLi9oZWxwZXJzL3Jlc29sdmVDb25maWcuanNcIjtcblxuY29uc3QgaXNYSFJBZGFwdGVyU3VwcG9ydGVkID0gdHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICE9PSAndW5kZWZpbmVkJztcblxuZXhwb3J0IGRlZmF1bHQgaXNYSFJBZGFwdGVyU3VwcG9ydGVkICYmIGZ1bmN0aW9uIChjb25maWcpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIGRpc3BhdGNoWGhyUmVxdWVzdChyZXNvbHZlLCByZWplY3QpIHtcbiAgICBjb25zdCBfY29uZmlnID0gcmVzb2x2ZUNvbmZpZyhjb25maWcpO1xuICAgIGxldCByZXF1ZXN0RGF0YSA9IF9jb25maWcuZGF0YTtcbiAgICBjb25zdCByZXF1ZXN0SGVhZGVycyA9IEF4aW9zSGVhZGVycy5mcm9tKF9jb25maWcuaGVhZGVycykubm9ybWFsaXplKCk7XG4gICAgbGV0IHtyZXNwb25zZVR5cGUsIG9uVXBsb2FkUHJvZ3Jlc3MsIG9uRG93bmxvYWRQcm9ncmVzc30gPSBfY29uZmlnO1xuICAgIGxldCBvbkNhbmNlbGVkO1xuICAgIGxldCB1cGxvYWRUaHJvdHRsZWQsIGRvd25sb2FkVGhyb3R0bGVkO1xuICAgIGxldCBmbHVzaFVwbG9hZCwgZmx1c2hEb3dubG9hZDtcblxuICAgIGZ1bmN0aW9uIGRvbmUoKSB7XG4gICAgICBmbHVzaFVwbG9hZCAmJiBmbHVzaFVwbG9hZCgpOyAvLyBmbHVzaCBldmVudHNcbiAgICAgIGZsdXNoRG93bmxvYWQgJiYgZmx1c2hEb3dubG9hZCgpOyAvLyBmbHVzaCBldmVudHNcblxuICAgICAgX2NvbmZpZy5jYW5jZWxUb2tlbiAmJiBfY29uZmlnLmNhbmNlbFRva2VuLnVuc3Vic2NyaWJlKG9uQ2FuY2VsZWQpO1xuXG4gICAgICBfY29uZmlnLnNpZ25hbCAmJiBfY29uZmlnLnNpZ25hbC5yZW1vdmVFdmVudExpc3RlbmVyKCdhYm9ydCcsIG9uQ2FuY2VsZWQpO1xuICAgIH1cblxuICAgIGxldCByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgICByZXF1ZXN0Lm9wZW4oX2NvbmZpZy5tZXRob2QudG9VcHBlckNhc2UoKSwgX2NvbmZpZy51cmwsIHRydWUpO1xuXG4gICAgLy8gU2V0IHRoZSByZXF1ZXN0IHRpbWVvdXQgaW4gTVNcbiAgICByZXF1ZXN0LnRpbWVvdXQgPSBfY29uZmlnLnRpbWVvdXQ7XG5cbiAgICBmdW5jdGlvbiBvbmxvYWRlbmQoKSB7XG4gICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gUHJlcGFyZSB0aGUgcmVzcG9uc2VcbiAgICAgIGNvbnN0IHJlc3BvbnNlSGVhZGVycyA9IEF4aW9zSGVhZGVycy5mcm9tKFxuICAgICAgICAnZ2V0QWxsUmVzcG9uc2VIZWFkZXJzJyBpbiByZXF1ZXN0ICYmIHJlcXVlc3QuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKClcbiAgICAgICk7XG4gICAgICBjb25zdCByZXNwb25zZURhdGEgPSAhcmVzcG9uc2VUeXBlIHx8IHJlc3BvbnNlVHlwZSA9PT0gJ3RleHQnIHx8IHJlc3BvbnNlVHlwZSA9PT0gJ2pzb24nID9cbiAgICAgICAgcmVxdWVzdC5yZXNwb25zZVRleHQgOiByZXF1ZXN0LnJlc3BvbnNlO1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgIGRhdGE6IHJlc3BvbnNlRGF0YSxcbiAgICAgICAgc3RhdHVzOiByZXF1ZXN0LnN0YXR1cyxcbiAgICAgICAgc3RhdHVzVGV4dDogcmVxdWVzdC5zdGF0dXNUZXh0LFxuICAgICAgICBoZWFkZXJzOiByZXNwb25zZUhlYWRlcnMsXG4gICAgICAgIGNvbmZpZyxcbiAgICAgICAgcmVxdWVzdFxuICAgICAgfTtcblxuICAgICAgc2V0dGxlKGZ1bmN0aW9uIF9yZXNvbHZlKHZhbHVlKSB7XG4gICAgICAgIHJlc29sdmUodmFsdWUpO1xuICAgICAgICBkb25lKCk7XG4gICAgICB9LCBmdW5jdGlvbiBfcmVqZWN0KGVycikge1xuICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgZG9uZSgpO1xuICAgICAgfSwgcmVzcG9uc2UpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAoJ29ubG9hZGVuZCcgaW4gcmVxdWVzdCkge1xuICAgICAgLy8gVXNlIG9ubG9hZGVuZCBpZiBhdmFpbGFibGVcbiAgICAgIHJlcXVlc3Qub25sb2FkZW5kID0gb25sb2FkZW5kO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBMaXN0ZW4gZm9yIHJlYWR5IHN0YXRlIHRvIGVtdWxhdGUgb25sb2FkZW5kXG4gICAgICByZXF1ZXN0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUxvYWQoKSB7XG4gICAgICAgIGlmICghcmVxdWVzdCB8fCByZXF1ZXN0LnJlYWR5U3RhdGUgIT09IDQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUaGUgcmVxdWVzdCBlcnJvcmVkIG91dCBhbmQgd2UgZGlkbid0IGdldCBhIHJlc3BvbnNlLCB0aGlzIHdpbGwgYmVcbiAgICAgICAgLy8gaGFuZGxlZCBieSBvbmVycm9yIGluc3RlYWRcbiAgICAgICAgLy8gV2l0aCBvbmUgZXhjZXB0aW9uOiByZXF1ZXN0IHRoYXQgdXNpbmcgZmlsZTogcHJvdG9jb2wsIG1vc3QgYnJvd3NlcnNcbiAgICAgICAgLy8gd2lsbCByZXR1cm4gc3RhdHVzIGFzIDAgZXZlbiB0aG91Z2ggaXQncyBhIHN1Y2Nlc3NmdWwgcmVxdWVzdFxuICAgICAgICBpZiAocmVxdWVzdC5zdGF0dXMgPT09IDAgJiYgIShyZXF1ZXN0LnJlc3BvbnNlVVJMICYmIHJlcXVlc3QucmVzcG9uc2VVUkwuaW5kZXhPZignZmlsZTonKSA9PT0gMCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gcmVhZHlzdGF0ZSBoYW5kbGVyIGlzIGNhbGxpbmcgYmVmb3JlIG9uZXJyb3Igb3Igb250aW1lb3V0IGhhbmRsZXJzLFxuICAgICAgICAvLyBzbyB3ZSBzaG91bGQgY2FsbCBvbmxvYWRlbmQgb24gdGhlIG5leHQgJ3RpY2snXG4gICAgICAgIHNldFRpbWVvdXQob25sb2FkZW5kKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIGJyb3dzZXIgcmVxdWVzdCBjYW5jZWxsYXRpb24gKGFzIG9wcG9zZWQgdG8gYSBtYW51YWwgY2FuY2VsbGF0aW9uKVxuICAgIHJlcXVlc3Qub25hYm9ydCA9IGZ1bmN0aW9uIGhhbmRsZUFib3J0KCkge1xuICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcmVqZWN0KG5ldyBBeGlvc0Vycm9yKCdSZXF1ZXN0IGFib3J0ZWQnLCBBeGlvc0Vycm9yLkVDT05OQUJPUlRFRCwgY29uZmlnLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgbG93IGxldmVsIG5ldHdvcmsgZXJyb3JzXG4gICAgcmVxdWVzdC5vbmVycm9yID0gZnVuY3Rpb24gaGFuZGxlRXJyb3IoKSB7XG4gICAgICAvLyBSZWFsIGVycm9ycyBhcmUgaGlkZGVuIGZyb20gdXMgYnkgdGhlIGJyb3dzZXJcbiAgICAgIC8vIG9uZXJyb3Igc2hvdWxkIG9ubHkgZmlyZSBpZiBpdCdzIGEgbmV0d29yayBlcnJvclxuICAgICAgcmVqZWN0KG5ldyBBeGlvc0Vycm9yKCdOZXR3b3JrIEVycm9yJywgQXhpb3NFcnJvci5FUlJfTkVUV09SSywgY29uZmlnLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgdGltZW91dFxuICAgIHJlcXVlc3Qub250aW1lb3V0ID0gZnVuY3Rpb24gaGFuZGxlVGltZW91dCgpIHtcbiAgICAgIGxldCB0aW1lb3V0RXJyb3JNZXNzYWdlID0gX2NvbmZpZy50aW1lb3V0ID8gJ3RpbWVvdXQgb2YgJyArIF9jb25maWcudGltZW91dCArICdtcyBleGNlZWRlZCcgOiAndGltZW91dCBleGNlZWRlZCc7XG4gICAgICBjb25zdCB0cmFuc2l0aW9uYWwgPSBfY29uZmlnLnRyYW5zaXRpb25hbCB8fCB0cmFuc2l0aW9uYWxEZWZhdWx0cztcbiAgICAgIGlmIChfY29uZmlnLnRpbWVvdXRFcnJvck1lc3NhZ2UpIHtcbiAgICAgICAgdGltZW91dEVycm9yTWVzc2FnZSA9IF9jb25maWcudGltZW91dEVycm9yTWVzc2FnZTtcbiAgICAgIH1cbiAgICAgIHJlamVjdChuZXcgQXhpb3NFcnJvcihcbiAgICAgICAgdGltZW91dEVycm9yTWVzc2FnZSxcbiAgICAgICAgdHJhbnNpdGlvbmFsLmNsYXJpZnlUaW1lb3V0RXJyb3IgPyBBeGlvc0Vycm9yLkVUSU1FRE9VVCA6IEF4aW9zRXJyb3IuRUNPTk5BQk9SVEVELFxuICAgICAgICBjb25maWcsXG4gICAgICAgIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIFJlbW92ZSBDb250ZW50LVR5cGUgaWYgZGF0YSBpcyB1bmRlZmluZWRcbiAgICByZXF1ZXN0RGF0YSA9PT0gdW5kZWZpbmVkICYmIHJlcXVlc3RIZWFkZXJzLnNldENvbnRlbnRUeXBlKG51bGwpO1xuXG4gICAgLy8gQWRkIGhlYWRlcnMgdG8gdGhlIHJlcXVlc3RcbiAgICBpZiAoJ3NldFJlcXVlc3RIZWFkZXInIGluIHJlcXVlc3QpIHtcbiAgICAgIHV0aWxzLmZvckVhY2gocmVxdWVzdEhlYWRlcnMudG9KU09OKCksIGZ1bmN0aW9uIHNldFJlcXVlc3RIZWFkZXIodmFsLCBrZXkpIHtcbiAgICAgICAgcmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKGtleSwgdmFsKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIEFkZCB3aXRoQ3JlZGVudGlhbHMgdG8gcmVxdWVzdCBpZiBuZWVkZWRcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKF9jb25maWcud2l0aENyZWRlbnRpYWxzKSkge1xuICAgICAgcmVxdWVzdC53aXRoQ3JlZGVudGlhbHMgPSAhIV9jb25maWcud2l0aENyZWRlbnRpYWxzO1xuICAgIH1cblxuICAgIC8vIEFkZCByZXNwb25zZVR5cGUgdG8gcmVxdWVzdCBpZiBuZWVkZWRcbiAgICBpZiAocmVzcG9uc2VUeXBlICYmIHJlc3BvbnNlVHlwZSAhPT0gJ2pzb24nKSB7XG4gICAgICByZXF1ZXN0LnJlc3BvbnNlVHlwZSA9IF9jb25maWcucmVzcG9uc2VUeXBlO1xuICAgIH1cblxuICAgIC8vIEhhbmRsZSBwcm9ncmVzcyBpZiBuZWVkZWRcbiAgICBpZiAob25Eb3dubG9hZFByb2dyZXNzKSB7XG4gICAgICAoW2Rvd25sb2FkVGhyb3R0bGVkLCBmbHVzaERvd25sb2FkXSA9IHByb2dyZXNzRXZlbnRSZWR1Y2VyKG9uRG93bmxvYWRQcm9ncmVzcywgdHJ1ZSkpO1xuICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIGRvd25sb2FkVGhyb3R0bGVkKTtcbiAgICB9XG5cbiAgICAvLyBOb3QgYWxsIGJyb3dzZXJzIHN1cHBvcnQgdXBsb2FkIGV2ZW50c1xuICAgIGlmIChvblVwbG9hZFByb2dyZXNzICYmIHJlcXVlc3QudXBsb2FkKSB7XG4gICAgICAoW3VwbG9hZFRocm90dGxlZCwgZmx1c2hVcGxvYWRdID0gcHJvZ3Jlc3NFdmVudFJlZHVjZXIob25VcGxvYWRQcm9ncmVzcykpO1xuXG4gICAgICByZXF1ZXN0LnVwbG9hZC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIHVwbG9hZFRocm90dGxlZCk7XG5cbiAgICAgIHJlcXVlc3QudXBsb2FkLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWRlbmQnLCBmbHVzaFVwbG9hZCk7XG4gICAgfVxuXG4gICAgaWYgKF9jb25maWcuY2FuY2VsVG9rZW4gfHwgX2NvbmZpZy5zaWduYWwpIHtcbiAgICAgIC8vIEhhbmRsZSBjYW5jZWxsYXRpb25cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gICAgICBvbkNhbmNlbGVkID0gY2FuY2VsID0+IHtcbiAgICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHJlamVjdCghY2FuY2VsIHx8IGNhbmNlbC50eXBlID8gbmV3IENhbmNlbGVkRXJyb3IobnVsbCwgY29uZmlnLCByZXF1ZXN0KSA6IGNhbmNlbCk7XG4gICAgICAgIHJlcXVlc3QuYWJvcnQoKTtcbiAgICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgICB9O1xuXG4gICAgICBfY29uZmlnLmNhbmNlbFRva2VuICYmIF9jb25maWcuY2FuY2VsVG9rZW4uc3Vic2NyaWJlKG9uQ2FuY2VsZWQpO1xuICAgICAgaWYgKF9jb25maWcuc2lnbmFsKSB7XG4gICAgICAgIF9jb25maWcuc2lnbmFsLmFib3J0ZWQgPyBvbkNhbmNlbGVkKCkgOiBfY29uZmlnLnNpZ25hbC5hZGRFdmVudExpc3RlbmVyKCdhYm9ydCcsIG9uQ2FuY2VsZWQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHByb3RvY29sID0gcGFyc2VQcm90b2NvbChfY29uZmlnLnVybCk7XG5cbiAgICBpZiAocHJvdG9jb2wgJiYgcGxhdGZvcm0ucHJvdG9jb2xzLmluZGV4T2YocHJvdG9jb2wpID09PSAtMSkge1xuICAgICAgcmVqZWN0KG5ldyBBeGlvc0Vycm9yKCdVbnN1cHBvcnRlZCBwcm90b2NvbCAnICsgcHJvdG9jb2wgKyAnOicsIEF4aW9zRXJyb3IuRVJSX0JBRF9SRVFVRVNULCBjb25maWcpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cblxuICAgIC8vIFNlbmQgdGhlIHJlcXVlc3RcbiAgICByZXF1ZXN0LnNlbmQocmVxdWVzdERhdGEgfHwgbnVsbCk7XG4gIH0pO1xufVxuIiwgImltcG9ydCBDYW5jZWxlZEVycm9yIGZyb20gXCIuLi9jYW5jZWwvQ2FuY2VsZWRFcnJvci5qc1wiO1xuaW1wb3J0IEF4aW9zRXJyb3IgZnJvbSBcIi4uL2NvcmUvQXhpb3NFcnJvci5qc1wiO1xuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcblxuY29uc3QgY29tcG9zZVNpZ25hbHMgPSAoc2lnbmFscywgdGltZW91dCkgPT4ge1xuICBjb25zdCB7bGVuZ3RofSA9IChzaWduYWxzID0gc2lnbmFscyA/IHNpZ25hbHMuZmlsdGVyKEJvb2xlYW4pIDogW10pO1xuXG4gIGlmICh0aW1lb3V0IHx8IGxlbmd0aCkge1xuICAgIGxldCBjb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuXG4gICAgbGV0IGFib3J0ZWQ7XG5cbiAgICBjb25zdCBvbmFib3J0ID0gZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgaWYgKCFhYm9ydGVkKSB7XG4gICAgICAgIGFib3J0ZWQgPSB0cnVlO1xuICAgICAgICB1bnN1YnNjcmliZSgpO1xuICAgICAgICBjb25zdCBlcnIgPSByZWFzb24gaW5zdGFuY2VvZiBFcnJvciA/IHJlYXNvbiA6IHRoaXMucmVhc29uO1xuICAgICAgICBjb250cm9sbGVyLmFib3J0KGVyciBpbnN0YW5jZW9mIEF4aW9zRXJyb3IgPyBlcnIgOiBuZXcgQ2FuY2VsZWRFcnJvcihlcnIgaW5zdGFuY2VvZiBFcnJvciA/IGVyci5tZXNzYWdlIDogZXJyKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGV0IHRpbWVyID0gdGltZW91dCAmJiBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRpbWVyID0gbnVsbDtcbiAgICAgIG9uYWJvcnQobmV3IEF4aW9zRXJyb3IoYHRpbWVvdXQgJHt0aW1lb3V0fSBvZiBtcyBleGNlZWRlZGAsIEF4aW9zRXJyb3IuRVRJTUVET1VUKSlcbiAgICB9LCB0aW1lb3V0KVxuXG4gICAgY29uc3QgdW5zdWJzY3JpYmUgPSAoKSA9PiB7XG4gICAgICBpZiAoc2lnbmFscykge1xuICAgICAgICB0aW1lciAmJiBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgICAgICB0aW1lciA9IG51bGw7XG4gICAgICAgIHNpZ25hbHMuZm9yRWFjaChzaWduYWwgPT4ge1xuICAgICAgICAgIHNpZ25hbC51bnN1YnNjcmliZSA/IHNpZ25hbC51bnN1YnNjcmliZShvbmFib3J0KSA6IHNpZ25hbC5yZW1vdmVFdmVudExpc3RlbmVyKCdhYm9ydCcsIG9uYWJvcnQpO1xuICAgICAgICB9KTtcbiAgICAgICAgc2lnbmFscyA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgc2lnbmFscy5mb3JFYWNoKChzaWduYWwpID0+IHNpZ25hbC5hZGRFdmVudExpc3RlbmVyKCdhYm9ydCcsIG9uYWJvcnQpKTtcblxuICAgIGNvbnN0IHtzaWduYWx9ID0gY29udHJvbGxlcjtcblxuICAgIHNpZ25hbC51bnN1YnNjcmliZSA9ICgpID0+IHV0aWxzLmFzYXAodW5zdWJzY3JpYmUpO1xuXG4gICAgcmV0dXJuIHNpZ25hbDtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBjb21wb3NlU2lnbmFscztcbiIsICJcbmV4cG9ydCBjb25zdCBzdHJlYW1DaHVuayA9IGZ1bmN0aW9uKiAoY2h1bmssIGNodW5rU2l6ZSkge1xuICBsZXQgbGVuID0gY2h1bmsuYnl0ZUxlbmd0aDtcblxuICBpZiAoIWNodW5rU2l6ZSB8fCBsZW4gPCBjaHVua1NpemUpIHtcbiAgICB5aWVsZCBjaHVuaztcbiAgICByZXR1cm47XG4gIH1cblxuICBsZXQgcG9zID0gMDtcbiAgbGV0IGVuZDtcblxuICB3aGlsZSAocG9zIDwgbGVuKSB7XG4gICAgZW5kID0gcG9zICsgY2h1bmtTaXplO1xuICAgIHlpZWxkIGNodW5rLnNsaWNlKHBvcywgZW5kKTtcbiAgICBwb3MgPSBlbmQ7XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IHJlYWRCeXRlcyA9IGFzeW5jIGZ1bmN0aW9uKiAoaXRlcmFibGUsIGNodW5rU2l6ZSkge1xuICBmb3IgYXdhaXQgKGNvbnN0IGNodW5rIG9mIHJlYWRTdHJlYW0oaXRlcmFibGUpKSB7XG4gICAgeWllbGQqIHN0cmVhbUNodW5rKGNodW5rLCBjaHVua1NpemUpO1xuICB9XG59XG5cbmNvbnN0IHJlYWRTdHJlYW0gPSBhc3luYyBmdW5jdGlvbiogKHN0cmVhbSkge1xuICBpZiAoc3RyZWFtW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSkge1xuICAgIHlpZWxkKiBzdHJlYW07XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgcmVhZGVyID0gc3RyZWFtLmdldFJlYWRlcigpO1xuICB0cnkge1xuICAgIGZvciAoOzspIHtcbiAgICAgIGNvbnN0IHtkb25lLCB2YWx1ZX0gPSBhd2FpdCByZWFkZXIucmVhZCgpO1xuICAgICAgaWYgKGRvbmUpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICB5aWVsZCB2YWx1ZTtcbiAgICB9XG4gIH0gZmluYWxseSB7XG4gICAgYXdhaXQgcmVhZGVyLmNhbmNlbCgpO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCB0cmFja1N0cmVhbSA9IChzdHJlYW0sIGNodW5rU2l6ZSwgb25Qcm9ncmVzcywgb25GaW5pc2gpID0+IHtcbiAgY29uc3QgaXRlcmF0b3IgPSByZWFkQnl0ZXMoc3RyZWFtLCBjaHVua1NpemUpO1xuXG4gIGxldCBieXRlcyA9IDA7XG4gIGxldCBkb25lO1xuICBsZXQgX29uRmluaXNoID0gKGUpID0+IHtcbiAgICBpZiAoIWRvbmUpIHtcbiAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgb25GaW5pc2ggJiYgb25GaW5pc2goZSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBSZWFkYWJsZVN0cmVhbSh7XG4gICAgYXN5bmMgcHVsbChjb250cm9sbGVyKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCB7ZG9uZSwgdmFsdWV9ID0gYXdhaXQgaXRlcmF0b3IubmV4dCgpO1xuXG4gICAgICAgIGlmIChkb25lKSB7XG4gICAgICAgICBfb25GaW5pc2goKTtcbiAgICAgICAgICBjb250cm9sbGVyLmNsb3NlKCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGxlbiA9IHZhbHVlLmJ5dGVMZW5ndGg7XG4gICAgICAgIGlmIChvblByb2dyZXNzKSB7XG4gICAgICAgICAgbGV0IGxvYWRlZEJ5dGVzID0gYnl0ZXMgKz0gbGVuO1xuICAgICAgICAgIG9uUHJvZ3Jlc3MobG9hZGVkQnl0ZXMpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZShuZXcgVWludDhBcnJheSh2YWx1ZSkpO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIF9vbkZpbmlzaChlcnIpO1xuICAgICAgICB0aHJvdyBlcnI7XG4gICAgICB9XG4gICAgfSxcbiAgICBjYW5jZWwocmVhc29uKSB7XG4gICAgICBfb25GaW5pc2gocmVhc29uKTtcbiAgICAgIHJldHVybiBpdGVyYXRvci5yZXR1cm4oKTtcbiAgICB9XG4gIH0sIHtcbiAgICBoaWdoV2F0ZXJNYXJrOiAyXG4gIH0pXG59XG4iLCAiaW1wb3J0IHBsYXRmb3JtIGZyb20gXCIuLi9wbGF0Zm9ybS9pbmRleC5qc1wiO1xuaW1wb3J0IHV0aWxzIGZyb20gXCIuLi91dGlscy5qc1wiO1xuaW1wb3J0IEF4aW9zRXJyb3IgZnJvbSBcIi4uL2NvcmUvQXhpb3NFcnJvci5qc1wiO1xuaW1wb3J0IGNvbXBvc2VTaWduYWxzIGZyb20gXCIuLi9oZWxwZXJzL2NvbXBvc2VTaWduYWxzLmpzXCI7XG5pbXBvcnQge3RyYWNrU3RyZWFtfSBmcm9tIFwiLi4vaGVscGVycy90cmFja1N0cmVhbS5qc1wiO1xuaW1wb3J0IEF4aW9zSGVhZGVycyBmcm9tIFwiLi4vY29yZS9BeGlvc0hlYWRlcnMuanNcIjtcbmltcG9ydCB7cHJvZ3Jlc3NFdmVudFJlZHVjZXIsIHByb2dyZXNzRXZlbnREZWNvcmF0b3IsIGFzeW5jRGVjb3JhdG9yfSBmcm9tIFwiLi4vaGVscGVycy9wcm9ncmVzc0V2ZW50UmVkdWNlci5qc1wiO1xuaW1wb3J0IHJlc29sdmVDb25maWcgZnJvbSBcIi4uL2hlbHBlcnMvcmVzb2x2ZUNvbmZpZy5qc1wiO1xuaW1wb3J0IHNldHRsZSBmcm9tIFwiLi4vY29yZS9zZXR0bGUuanNcIjtcblxuY29uc3QgaXNGZXRjaFN1cHBvcnRlZCA9IHR5cGVvZiBmZXRjaCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgUmVxdWVzdCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgUmVzcG9uc2UgPT09ICdmdW5jdGlvbic7XG5jb25zdCBpc1JlYWRhYmxlU3RyZWFtU3VwcG9ydGVkID0gaXNGZXRjaFN1cHBvcnRlZCAmJiB0eXBlb2YgUmVhZGFibGVTdHJlYW0gPT09ICdmdW5jdGlvbic7XG5cbi8vIHVzZWQgb25seSBpbnNpZGUgdGhlIGZldGNoIGFkYXB0ZXJcbmNvbnN0IGVuY29kZVRleHQgPSBpc0ZldGNoU3VwcG9ydGVkICYmICh0eXBlb2YgVGV4dEVuY29kZXIgPT09ICdmdW5jdGlvbicgP1xuICAgICgoZW5jb2RlcikgPT4gKHN0cikgPT4gZW5jb2Rlci5lbmNvZGUoc3RyKSkobmV3IFRleHRFbmNvZGVyKCkpIDpcbiAgICBhc3luYyAoc3RyKSA9PiBuZXcgVWludDhBcnJheShhd2FpdCBuZXcgUmVzcG9uc2Uoc3RyKS5hcnJheUJ1ZmZlcigpKVxuKTtcblxuY29uc3QgdGVzdCA9IChmbiwgLi4uYXJncykgPT4ge1xuICB0cnkge1xuICAgIHJldHVybiAhIWZuKC4uLmFyZ3MpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuY29uc3Qgc3VwcG9ydHNSZXF1ZXN0U3RyZWFtID0gaXNSZWFkYWJsZVN0cmVhbVN1cHBvcnRlZCAmJiB0ZXN0KCgpID0+IHtcbiAgbGV0IGR1cGxleEFjY2Vzc2VkID0gZmFsc2U7XG5cbiAgY29uc3QgaGFzQ29udGVudFR5cGUgPSBuZXcgUmVxdWVzdChwbGF0Zm9ybS5vcmlnaW4sIHtcbiAgICBib2R5OiBuZXcgUmVhZGFibGVTdHJlYW0oKSxcbiAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICBnZXQgZHVwbGV4KCkge1xuICAgICAgZHVwbGV4QWNjZXNzZWQgPSB0cnVlO1xuICAgICAgcmV0dXJuICdoYWxmJztcbiAgICB9LFxuICB9KS5oZWFkZXJzLmhhcygnQ29udGVudC1UeXBlJyk7XG5cbiAgcmV0dXJuIGR1cGxleEFjY2Vzc2VkICYmICFoYXNDb250ZW50VHlwZTtcbn0pO1xuXG5jb25zdCBERUZBVUxUX0NIVU5LX1NJWkUgPSA2NCAqIDEwMjQ7XG5cbmNvbnN0IHN1cHBvcnRzUmVzcG9uc2VTdHJlYW0gPSBpc1JlYWRhYmxlU3RyZWFtU3VwcG9ydGVkICYmXG4gIHRlc3QoKCkgPT4gdXRpbHMuaXNSZWFkYWJsZVN0cmVhbShuZXcgUmVzcG9uc2UoJycpLmJvZHkpKTtcblxuXG5jb25zdCByZXNvbHZlcnMgPSB7XG4gIHN0cmVhbTogc3VwcG9ydHNSZXNwb25zZVN0cmVhbSAmJiAoKHJlcykgPT4gcmVzLmJvZHkpXG59O1xuXG5pc0ZldGNoU3VwcG9ydGVkICYmICgoKHJlcykgPT4ge1xuICBbJ3RleHQnLCAnYXJyYXlCdWZmZXInLCAnYmxvYicsICdmb3JtRGF0YScsICdzdHJlYW0nXS5mb3JFYWNoKHR5cGUgPT4ge1xuICAgICFyZXNvbHZlcnNbdHlwZV0gJiYgKHJlc29sdmVyc1t0eXBlXSA9IHV0aWxzLmlzRnVuY3Rpb24ocmVzW3R5cGVdKSA/IChyZXMpID0+IHJlc1t0eXBlXSgpIDpcbiAgICAgIChfLCBjb25maWcpID0+IHtcbiAgICAgICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoYFJlc3BvbnNlIHR5cGUgJyR7dHlwZX0nIGlzIG5vdCBzdXBwb3J0ZWRgLCBBeGlvc0Vycm9yLkVSUl9OT1RfU1VQUE9SVCwgY29uZmlnKTtcbiAgICAgIH0pXG4gIH0pO1xufSkobmV3IFJlc3BvbnNlKSk7XG5cbmNvbnN0IGdldEJvZHlMZW5ndGggPSBhc3luYyAoYm9keSkgPT4ge1xuICBpZiAoYm9keSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICBpZih1dGlscy5pc0Jsb2IoYm9keSkpIHtcbiAgICByZXR1cm4gYm9keS5zaXplO1xuICB9XG5cbiAgaWYodXRpbHMuaXNTcGVjQ29tcGxpYW50Rm9ybShib2R5KSkge1xuICAgIGNvbnN0IF9yZXF1ZXN0ID0gbmV3IFJlcXVlc3QocGxhdGZvcm0ub3JpZ2luLCB7XG4gICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgIGJvZHksXG4gICAgfSk7XG4gICAgcmV0dXJuIChhd2FpdCBfcmVxdWVzdC5hcnJheUJ1ZmZlcigpKS5ieXRlTGVuZ3RoO1xuICB9XG5cbiAgaWYodXRpbHMuaXNBcnJheUJ1ZmZlclZpZXcoYm9keSkgfHwgdXRpbHMuaXNBcnJheUJ1ZmZlcihib2R5KSkge1xuICAgIHJldHVybiBib2R5LmJ5dGVMZW5ndGg7XG4gIH1cblxuICBpZih1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhib2R5KSkge1xuICAgIGJvZHkgPSBib2R5ICsgJyc7XG4gIH1cblxuICBpZih1dGlscy5pc1N0cmluZyhib2R5KSkge1xuICAgIHJldHVybiAoYXdhaXQgZW5jb2RlVGV4dChib2R5KSkuYnl0ZUxlbmd0aDtcbiAgfVxufVxuXG5jb25zdCByZXNvbHZlQm9keUxlbmd0aCA9IGFzeW5jIChoZWFkZXJzLCBib2R5KSA9PiB7XG4gIGNvbnN0IGxlbmd0aCA9IHV0aWxzLnRvRmluaXRlTnVtYmVyKGhlYWRlcnMuZ2V0Q29udGVudExlbmd0aCgpKTtcblxuICByZXR1cm4gbGVuZ3RoID09IG51bGwgPyBnZXRCb2R5TGVuZ3RoKGJvZHkpIDogbGVuZ3RoO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc0ZldGNoU3VwcG9ydGVkICYmIChhc3luYyAoY29uZmlnKSA9PiB7XG4gIGxldCB7XG4gICAgdXJsLFxuICAgIG1ldGhvZCxcbiAgICBkYXRhLFxuICAgIHNpZ25hbCxcbiAgICBjYW5jZWxUb2tlbixcbiAgICB0aW1lb3V0LFxuICAgIG9uRG93bmxvYWRQcm9ncmVzcyxcbiAgICBvblVwbG9hZFByb2dyZXNzLFxuICAgIHJlc3BvbnNlVHlwZSxcbiAgICBoZWFkZXJzLFxuICAgIHdpdGhDcmVkZW50aWFscyA9ICdzYW1lLW9yaWdpbicsXG4gICAgZmV0Y2hPcHRpb25zXG4gIH0gPSByZXNvbHZlQ29uZmlnKGNvbmZpZyk7XG5cbiAgcmVzcG9uc2VUeXBlID0gcmVzcG9uc2VUeXBlID8gKHJlc3BvbnNlVHlwZSArICcnKS50b0xvd2VyQ2FzZSgpIDogJ3RleHQnO1xuXG4gIGxldCBjb21wb3NlZFNpZ25hbCA9IGNvbXBvc2VTaWduYWxzKFtzaWduYWwsIGNhbmNlbFRva2VuICYmIGNhbmNlbFRva2VuLnRvQWJvcnRTaWduYWwoKV0sIHRpbWVvdXQpO1xuXG4gIGxldCByZXF1ZXN0O1xuXG4gIGNvbnN0IHVuc3Vic2NyaWJlID0gY29tcG9zZWRTaWduYWwgJiYgY29tcG9zZWRTaWduYWwudW5zdWJzY3JpYmUgJiYgKCgpID0+IHtcbiAgICAgIGNvbXBvc2VkU2lnbmFsLnVuc3Vic2NyaWJlKCk7XG4gIH0pO1xuXG4gIGxldCByZXF1ZXN0Q29udGVudExlbmd0aDtcblxuICB0cnkge1xuICAgIGlmIChcbiAgICAgIG9uVXBsb2FkUHJvZ3Jlc3MgJiYgc3VwcG9ydHNSZXF1ZXN0U3RyZWFtICYmIG1ldGhvZCAhPT0gJ2dldCcgJiYgbWV0aG9kICE9PSAnaGVhZCcgJiZcbiAgICAgIChyZXF1ZXN0Q29udGVudExlbmd0aCA9IGF3YWl0IHJlc29sdmVCb2R5TGVuZ3RoKGhlYWRlcnMsIGRhdGEpKSAhPT0gMFxuICAgICkge1xuICAgICAgbGV0IF9yZXF1ZXN0ID0gbmV3IFJlcXVlc3QodXJsLCB7XG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICBib2R5OiBkYXRhLFxuICAgICAgICBkdXBsZXg6IFwiaGFsZlwiXG4gICAgICB9KTtcblxuICAgICAgbGV0IGNvbnRlbnRUeXBlSGVhZGVyO1xuXG4gICAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShkYXRhKSAmJiAoY29udGVudFR5cGVIZWFkZXIgPSBfcmVxdWVzdC5oZWFkZXJzLmdldCgnY29udGVudC10eXBlJykpKSB7XG4gICAgICAgIGhlYWRlcnMuc2V0Q29udGVudFR5cGUoY29udGVudFR5cGVIZWFkZXIpXG4gICAgICB9XG5cbiAgICAgIGlmIChfcmVxdWVzdC5ib2R5KSB7XG4gICAgICAgIGNvbnN0IFtvblByb2dyZXNzLCBmbHVzaF0gPSBwcm9ncmVzc0V2ZW50RGVjb3JhdG9yKFxuICAgICAgICAgIHJlcXVlc3RDb250ZW50TGVuZ3RoLFxuICAgICAgICAgIHByb2dyZXNzRXZlbnRSZWR1Y2VyKGFzeW5jRGVjb3JhdG9yKG9uVXBsb2FkUHJvZ3Jlc3MpKVxuICAgICAgICApO1xuXG4gICAgICAgIGRhdGEgPSB0cmFja1N0cmVhbShfcmVxdWVzdC5ib2R5LCBERUZBVUxUX0NIVU5LX1NJWkUsIG9uUHJvZ3Jlc3MsIGZsdXNoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIXV0aWxzLmlzU3RyaW5nKHdpdGhDcmVkZW50aWFscykpIHtcbiAgICAgIHdpdGhDcmVkZW50aWFscyA9IHdpdGhDcmVkZW50aWFscyA/ICdpbmNsdWRlJyA6ICdvbWl0JztcbiAgICB9XG5cbiAgICAvLyBDbG91ZGZsYXJlIFdvcmtlcnMgdGhyb3dzIHdoZW4gY3JlZGVudGlhbHMgYXJlIGRlZmluZWRcbiAgICAvLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2Nsb3VkZmxhcmUvd29ya2VyZC9pc3N1ZXMvOTAyXG4gICAgY29uc3QgaXNDcmVkZW50aWFsc1N1cHBvcnRlZCA9IFwiY3JlZGVudGlhbHNcIiBpbiBSZXF1ZXN0LnByb3RvdHlwZTtcbiAgICByZXF1ZXN0ID0gbmV3IFJlcXVlc3QodXJsLCB7XG4gICAgICAuLi5mZXRjaE9wdGlvbnMsXG4gICAgICBzaWduYWw6IGNvbXBvc2VkU2lnbmFsLFxuICAgICAgbWV0aG9kOiBtZXRob2QudG9VcHBlckNhc2UoKSxcbiAgICAgIGhlYWRlcnM6IGhlYWRlcnMubm9ybWFsaXplKCkudG9KU09OKCksXG4gICAgICBib2R5OiBkYXRhLFxuICAgICAgZHVwbGV4OiBcImhhbGZcIixcbiAgICAgIGNyZWRlbnRpYWxzOiBpc0NyZWRlbnRpYWxzU3VwcG9ydGVkID8gd2l0aENyZWRlbnRpYWxzIDogdW5kZWZpbmVkXG4gICAgfSk7XG5cbiAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChyZXF1ZXN0KTtcblxuICAgIGNvbnN0IGlzU3RyZWFtUmVzcG9uc2UgPSBzdXBwb3J0c1Jlc3BvbnNlU3RyZWFtICYmIChyZXNwb25zZVR5cGUgPT09ICdzdHJlYW0nIHx8IHJlc3BvbnNlVHlwZSA9PT0gJ3Jlc3BvbnNlJyk7XG5cbiAgICBpZiAoc3VwcG9ydHNSZXNwb25zZVN0cmVhbSAmJiAob25Eb3dubG9hZFByb2dyZXNzIHx8IChpc1N0cmVhbVJlc3BvbnNlICYmIHVuc3Vic2NyaWJlKSkpIHtcbiAgICAgIGNvbnN0IG9wdGlvbnMgPSB7fTtcblxuICAgICAgWydzdGF0dXMnLCAnc3RhdHVzVGV4dCcsICdoZWFkZXJzJ10uZm9yRWFjaChwcm9wID0+IHtcbiAgICAgICAgb3B0aW9uc1twcm9wXSA9IHJlc3BvbnNlW3Byb3BdO1xuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IHJlc3BvbnNlQ29udGVudExlbmd0aCA9IHV0aWxzLnRvRmluaXRlTnVtYmVyKHJlc3BvbnNlLmhlYWRlcnMuZ2V0KCdjb250ZW50LWxlbmd0aCcpKTtcblxuICAgICAgY29uc3QgW29uUHJvZ3Jlc3MsIGZsdXNoXSA9IG9uRG93bmxvYWRQcm9ncmVzcyAmJiBwcm9ncmVzc0V2ZW50RGVjb3JhdG9yKFxuICAgICAgICByZXNwb25zZUNvbnRlbnRMZW5ndGgsXG4gICAgICAgIHByb2dyZXNzRXZlbnRSZWR1Y2VyKGFzeW5jRGVjb3JhdG9yKG9uRG93bmxvYWRQcm9ncmVzcyksIHRydWUpXG4gICAgICApIHx8IFtdO1xuXG4gICAgICByZXNwb25zZSA9IG5ldyBSZXNwb25zZShcbiAgICAgICAgdHJhY2tTdHJlYW0ocmVzcG9uc2UuYm9keSwgREVGQVVMVF9DSFVOS19TSVpFLCBvblByb2dyZXNzLCAoKSA9PiB7XG4gICAgICAgICAgZmx1c2ggJiYgZmx1c2goKTtcbiAgICAgICAgICB1bnN1YnNjcmliZSAmJiB1bnN1YnNjcmliZSgpO1xuICAgICAgICB9KSxcbiAgICAgICAgb3B0aW9uc1xuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXNwb25zZVR5cGUgPSByZXNwb25zZVR5cGUgfHwgJ3RleHQnO1xuXG4gICAgbGV0IHJlc3BvbnNlRGF0YSA9IGF3YWl0IHJlc29sdmVyc1t1dGlscy5maW5kS2V5KHJlc29sdmVycywgcmVzcG9uc2VUeXBlKSB8fCAndGV4dCddKHJlc3BvbnNlLCBjb25maWcpO1xuXG4gICAgIWlzU3RyZWFtUmVzcG9uc2UgJiYgdW5zdWJzY3JpYmUgJiYgdW5zdWJzY3JpYmUoKTtcblxuICAgIHJldHVybiBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCB7XG4gICAgICAgIGRhdGE6IHJlc3BvbnNlRGF0YSxcbiAgICAgICAgaGVhZGVyczogQXhpb3NIZWFkZXJzLmZyb20ocmVzcG9uc2UuaGVhZGVycyksXG4gICAgICAgIHN0YXR1czogcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgICBzdGF0dXNUZXh0OiByZXNwb25zZS5zdGF0dXNUZXh0LFxuICAgICAgICBjb25maWcsXG4gICAgICAgIHJlcXVlc3RcbiAgICAgIH0pXG4gICAgfSlcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgdW5zdWJzY3JpYmUgJiYgdW5zdWJzY3JpYmUoKTtcblxuICAgIGlmIChlcnIgJiYgZXJyLm5hbWUgPT09ICdUeXBlRXJyb3InICYmIC9mZXRjaC9pLnRlc3QoZXJyLm1lc3NhZ2UpKSB7XG4gICAgICB0aHJvdyBPYmplY3QuYXNzaWduKFxuICAgICAgICBuZXcgQXhpb3NFcnJvcignTmV0d29yayBFcnJvcicsIEF4aW9zRXJyb3IuRVJSX05FVFdPUkssIGNvbmZpZywgcmVxdWVzdCksXG4gICAgICAgIHtcbiAgICAgICAgICBjYXVzZTogZXJyLmNhdXNlIHx8IGVyclxuICAgICAgICB9XG4gICAgICApXG4gICAgfVxuXG4gICAgdGhyb3cgQXhpb3NFcnJvci5mcm9tKGVyciwgZXJyICYmIGVyci5jb2RlLCBjb25maWcsIHJlcXVlc3QpO1xuICB9XG59KTtcblxuXG4iLCAiaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcbmltcG9ydCBodHRwQWRhcHRlciBmcm9tICcuL2h0dHAuanMnO1xuaW1wb3J0IHhockFkYXB0ZXIgZnJvbSAnLi94aHIuanMnO1xuaW1wb3J0IGZldGNoQWRhcHRlciBmcm9tICcuL2ZldGNoLmpzJztcbmltcG9ydCBBeGlvc0Vycm9yIGZyb20gXCIuLi9jb3JlL0F4aW9zRXJyb3IuanNcIjtcblxuY29uc3Qga25vd25BZGFwdGVycyA9IHtcbiAgaHR0cDogaHR0cEFkYXB0ZXIsXG4gIHhocjogeGhyQWRhcHRlcixcbiAgZmV0Y2g6IGZldGNoQWRhcHRlclxufVxuXG51dGlscy5mb3JFYWNoKGtub3duQWRhcHRlcnMsIChmbiwgdmFsdWUpID0+IHtcbiAgaWYgKGZuKSB7XG4gICAgdHJ5IHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmbiwgJ25hbWUnLCB7dmFsdWV9KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZW1wdHlcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGZuLCAnYWRhcHRlck5hbWUnLCB7dmFsdWV9KTtcbiAgfVxufSk7XG5cbmNvbnN0IHJlbmRlclJlYXNvbiA9IChyZWFzb24pID0+IGAtICR7cmVhc29ufWA7XG5cbmNvbnN0IGlzUmVzb2x2ZWRIYW5kbGUgPSAoYWRhcHRlcikgPT4gdXRpbHMuaXNGdW5jdGlvbihhZGFwdGVyKSB8fCBhZGFwdGVyID09PSBudWxsIHx8IGFkYXB0ZXIgPT09IGZhbHNlO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGdldEFkYXB0ZXI6IChhZGFwdGVycykgPT4ge1xuICAgIGFkYXB0ZXJzID0gdXRpbHMuaXNBcnJheShhZGFwdGVycykgPyBhZGFwdGVycyA6IFthZGFwdGVyc107XG5cbiAgICBjb25zdCB7bGVuZ3RofSA9IGFkYXB0ZXJzO1xuICAgIGxldCBuYW1lT3JBZGFwdGVyO1xuICAgIGxldCBhZGFwdGVyO1xuXG4gICAgY29uc3QgcmVqZWN0ZWRSZWFzb25zID0ge307XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBuYW1lT3JBZGFwdGVyID0gYWRhcHRlcnNbaV07XG4gICAgICBsZXQgaWQ7XG5cbiAgICAgIGFkYXB0ZXIgPSBuYW1lT3JBZGFwdGVyO1xuXG4gICAgICBpZiAoIWlzUmVzb2x2ZWRIYW5kbGUobmFtZU9yQWRhcHRlcikpIHtcbiAgICAgICAgYWRhcHRlciA9IGtub3duQWRhcHRlcnNbKGlkID0gU3RyaW5nKG5hbWVPckFkYXB0ZXIpKS50b0xvd2VyQ2FzZSgpXTtcblxuICAgICAgICBpZiAoYWRhcHRlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoYFVua25vd24gYWRhcHRlciAnJHtpZH0nYCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGFkYXB0ZXIpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIHJlamVjdGVkUmVhc29uc1tpZCB8fCAnIycgKyBpXSA9IGFkYXB0ZXI7XG4gICAgfVxuXG4gICAgaWYgKCFhZGFwdGVyKSB7XG5cbiAgICAgIGNvbnN0IHJlYXNvbnMgPSBPYmplY3QuZW50cmllcyhyZWplY3RlZFJlYXNvbnMpXG4gICAgICAgIC5tYXAoKFtpZCwgc3RhdGVdKSA9PiBgYWRhcHRlciAke2lkfSBgICtcbiAgICAgICAgICAoc3RhdGUgPT09IGZhbHNlID8gJ2lzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIGVudmlyb25tZW50JyA6ICdpcyBub3QgYXZhaWxhYmxlIGluIHRoZSBidWlsZCcpXG4gICAgICAgICk7XG5cbiAgICAgIGxldCBzID0gbGVuZ3RoID9cbiAgICAgICAgKHJlYXNvbnMubGVuZ3RoID4gMSA/ICdzaW5jZSA6XFxuJyArIHJlYXNvbnMubWFwKHJlbmRlclJlYXNvbikuam9pbignXFxuJykgOiAnICcgKyByZW5kZXJSZWFzb24ocmVhc29uc1swXSkpIDpcbiAgICAgICAgJ2FzIG5vIGFkYXB0ZXIgc3BlY2lmaWVkJztcblxuICAgICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoXG4gICAgICAgIGBUaGVyZSBpcyBubyBzdWl0YWJsZSBhZGFwdGVyIHRvIGRpc3BhdGNoIHRoZSByZXF1ZXN0IGAgKyBzLFxuICAgICAgICAnRVJSX05PVF9TVVBQT1JUJ1xuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWRhcHRlcjtcbiAgfSxcbiAgYWRhcHRlcnM6IGtub3duQWRhcHRlcnNcbn1cbiIsICIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB0cmFuc2Zvcm1EYXRhIGZyb20gJy4vdHJhbnNmb3JtRGF0YS5qcyc7XG5pbXBvcnQgaXNDYW5jZWwgZnJvbSAnLi4vY2FuY2VsL2lzQ2FuY2VsLmpzJztcbmltcG9ydCBkZWZhdWx0cyBmcm9tICcuLi9kZWZhdWx0cy9pbmRleC5qcyc7XG5pbXBvcnQgQ2FuY2VsZWRFcnJvciBmcm9tICcuLi9jYW5jZWwvQ2FuY2VsZWRFcnJvci5qcyc7XG5pbXBvcnQgQXhpb3NIZWFkZXJzIGZyb20gJy4uL2NvcmUvQXhpb3NIZWFkZXJzLmpzJztcbmltcG9ydCBhZGFwdGVycyBmcm9tIFwiLi4vYWRhcHRlcnMvYWRhcHRlcnMuanNcIjtcblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsZWRFcnJvcmAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcgdGhhdCBpcyB0byBiZSB1c2VkIGZvciB0aGUgcmVxdWVzdFxuICpcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5mdW5jdGlvbiB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZykge1xuICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgY29uZmlnLmNhbmNlbFRva2VuLnRocm93SWZSZXF1ZXN0ZWQoKTtcbiAgfVxuXG4gIGlmIChjb25maWcuc2lnbmFsICYmIGNvbmZpZy5zaWduYWwuYWJvcnRlZCkge1xuICAgIHRocm93IG5ldyBDYW5jZWxlZEVycm9yKG51bGwsIGNvbmZpZyk7XG4gIH1cbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3QgdG8gdGhlIHNlcnZlciB1c2luZyB0aGUgY29uZmlndXJlZCBhZGFwdGVyLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyB0aGF0IGlzIHRvIGJlIHVzZWQgZm9yIHRoZSByZXF1ZXN0XG4gKlxuICogQHJldHVybnMge1Byb21pc2V9IFRoZSBQcm9taXNlIHRvIGJlIGZ1bGZpbGxlZFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkaXNwYXRjaFJlcXVlc3QoY29uZmlnKSB7XG4gIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICBjb25maWcuaGVhZGVycyA9IEF4aW9zSGVhZGVycy5mcm9tKGNvbmZpZy5oZWFkZXJzKTtcblxuICAvLyBUcmFuc2Zvcm0gcmVxdWVzdCBkYXRhXG4gIGNvbmZpZy5kYXRhID0gdHJhbnNmb3JtRGF0YS5jYWxsKFxuICAgIGNvbmZpZyxcbiAgICBjb25maWcudHJhbnNmb3JtUmVxdWVzdFxuICApO1xuXG4gIGlmIChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10uaW5kZXhPZihjb25maWcubWV0aG9kKSAhPT0gLTEpIHtcbiAgICBjb25maWcuaGVhZGVycy5zZXRDb250ZW50VHlwZSgnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJywgZmFsc2UpO1xuICB9XG5cbiAgY29uc3QgYWRhcHRlciA9IGFkYXB0ZXJzLmdldEFkYXB0ZXIoY29uZmlnLmFkYXB0ZXIgfHwgZGVmYXVsdHMuYWRhcHRlcik7XG5cbiAgcmV0dXJuIGFkYXB0ZXIoY29uZmlnKS50aGVuKGZ1bmN0aW9uIG9uQWRhcHRlclJlc29sdXRpb24ocmVzcG9uc2UpIHtcbiAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgIHJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhLmNhbGwoXG4gICAgICBjb25maWcsXG4gICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2UsXG4gICAgICByZXNwb25zZVxuICAgICk7XG5cbiAgICByZXNwb25zZS5oZWFkZXJzID0gQXhpb3NIZWFkZXJzLmZyb20ocmVzcG9uc2UuaGVhZGVycyk7XG5cbiAgICByZXR1cm4gcmVzcG9uc2U7XG4gIH0sIGZ1bmN0aW9uIG9uQWRhcHRlclJlamVjdGlvbihyZWFzb24pIHtcbiAgICBpZiAoIWlzQ2FuY2VsKHJlYXNvbikpIHtcbiAgICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICAgIGlmIChyZWFzb24gJiYgcmVhc29uLnJlc3BvbnNlKSB7XG4gICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YS5jYWxsKFxuICAgICAgICAgIGNvbmZpZyxcbiAgICAgICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2UsXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlXG4gICAgICAgICk7XG4gICAgICAgIHJlYXNvbi5yZXNwb25zZS5oZWFkZXJzID0gQXhpb3NIZWFkZXJzLmZyb20ocmVhc29uLnJlc3BvbnNlLmhlYWRlcnMpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChyZWFzb24pO1xuICB9KTtcbn1cbiIsICJleHBvcnQgY29uc3QgVkVSU0lPTiA9IFwiMS43LjlcIjsiLCAiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQge1ZFUlNJT059IGZyb20gJy4uL2Vudi9kYXRhLmpzJztcbmltcG9ydCBBeGlvc0Vycm9yIGZyb20gJy4uL2NvcmUvQXhpb3NFcnJvci5qcyc7XG5cbmNvbnN0IHZhbGlkYXRvcnMgPSB7fTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcblsnb2JqZWN0JywgJ2Jvb2xlYW4nLCAnbnVtYmVyJywgJ2Z1bmN0aW9uJywgJ3N0cmluZycsICdzeW1ib2wnXS5mb3JFYWNoKCh0eXBlLCBpKSA9PiB7XG4gIHZhbGlkYXRvcnNbdHlwZV0gPSBmdW5jdGlvbiB2YWxpZGF0b3IodGhpbmcpIHtcbiAgICByZXR1cm4gdHlwZW9mIHRoaW5nID09PSB0eXBlIHx8ICdhJyArIChpIDwgMSA/ICduICcgOiAnICcpICsgdHlwZTtcbiAgfTtcbn0pO1xuXG5jb25zdCBkZXByZWNhdGVkV2FybmluZ3MgPSB7fTtcblxuLyoqXG4gKiBUcmFuc2l0aW9uYWwgb3B0aW9uIHZhbGlkYXRvclxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb258Ym9vbGVhbj99IHZhbGlkYXRvciAtIHNldCB0byBmYWxzZSBpZiB0aGUgdHJhbnNpdGlvbmFsIG9wdGlvbiBoYXMgYmVlbiByZW1vdmVkXG4gKiBAcGFyYW0ge3N0cmluZz99IHZlcnNpb24gLSBkZXByZWNhdGVkIHZlcnNpb24gLyByZW1vdmVkIHNpbmNlIHZlcnNpb25cbiAqIEBwYXJhbSB7c3RyaW5nP30gbWVzc2FnZSAtIHNvbWUgbWVzc2FnZSB3aXRoIGFkZGl0aW9uYWwgaW5mb1xuICpcbiAqIEByZXR1cm5zIHtmdW5jdGlvbn1cbiAqL1xudmFsaWRhdG9ycy50cmFuc2l0aW9uYWwgPSBmdW5jdGlvbiB0cmFuc2l0aW9uYWwodmFsaWRhdG9yLCB2ZXJzaW9uLCBtZXNzYWdlKSB7XG4gIGZ1bmN0aW9uIGZvcm1hdE1lc3NhZ2Uob3B0LCBkZXNjKSB7XG4gICAgcmV0dXJuICdbQXhpb3MgdicgKyBWRVJTSU9OICsgJ10gVHJhbnNpdGlvbmFsIG9wdGlvbiBcXCcnICsgb3B0ICsgJ1xcJycgKyBkZXNjICsgKG1lc3NhZ2UgPyAnLiAnICsgbWVzc2FnZSA6ICcnKTtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gIHJldHVybiAodmFsdWUsIG9wdCwgb3B0cykgPT4ge1xuICAgIGlmICh2YWxpZGF0b3IgPT09IGZhbHNlKSB7XG4gICAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcihcbiAgICAgICAgZm9ybWF0TWVzc2FnZShvcHQsICcgaGFzIGJlZW4gcmVtb3ZlZCcgKyAodmVyc2lvbiA/ICcgaW4gJyArIHZlcnNpb24gOiAnJykpLFxuICAgICAgICBBeGlvc0Vycm9yLkVSUl9ERVBSRUNBVEVEXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmICh2ZXJzaW9uICYmICFkZXByZWNhdGVkV2FybmluZ3Nbb3B0XSkge1xuICAgICAgZGVwcmVjYXRlZFdhcm5pbmdzW29wdF0gPSB0cnVlO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgZm9ybWF0TWVzc2FnZShcbiAgICAgICAgICBvcHQsXG4gICAgICAgICAgJyBoYXMgYmVlbiBkZXByZWNhdGVkIHNpbmNlIHYnICsgdmVyc2lvbiArICcgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmVhciBmdXR1cmUnXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbGlkYXRvciA/IHZhbGlkYXRvcih2YWx1ZSwgb3B0LCBvcHRzKSA6IHRydWU7XG4gIH07XG59O1xuXG52YWxpZGF0b3JzLnNwZWxsaW5nID0gZnVuY3Rpb24gc3BlbGxpbmcoY29ycmVjdFNwZWxsaW5nKSB7XG4gIHJldHVybiAodmFsdWUsIG9wdCkgPT4ge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgY29uc29sZS53YXJuKGAke29wdH0gaXMgbGlrZWx5IGEgbWlzc3BlbGxpbmcgb2YgJHtjb3JyZWN0U3BlbGxpbmd9YCk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG5cbi8qKlxuICogQXNzZXJ0IG9iamVjdCdzIHByb3BlcnRpZXMgdHlwZVxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zXG4gKiBAcGFyYW0ge29iamVjdH0gc2NoZW1hXG4gKiBAcGFyYW0ge2Jvb2xlYW4/fSBhbGxvd1Vua25vd25cbiAqXG4gKiBAcmV0dXJucyB7b2JqZWN0fVxuICovXG5cbmZ1bmN0aW9uIGFzc2VydE9wdGlvbnMob3B0aW9ucywgc2NoZW1hLCBhbGxvd1Vua25vd24pIHtcbiAgaWYgKHR5cGVvZiBvcHRpb25zICE9PSAnb2JqZWN0Jykge1xuICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKCdvcHRpb25zIG11c3QgYmUgYW4gb2JqZWN0JywgQXhpb3NFcnJvci5FUlJfQkFEX09QVElPTl9WQUxVRSk7XG4gIH1cbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKG9wdGlvbnMpO1xuICBsZXQgaSA9IGtleXMubGVuZ3RoO1xuICB3aGlsZSAoaS0tID4gMCkge1xuICAgIGNvbnN0IG9wdCA9IGtleXNbaV07XG4gICAgY29uc3QgdmFsaWRhdG9yID0gc2NoZW1hW29wdF07XG4gICAgaWYgKHZhbGlkYXRvcikge1xuICAgICAgY29uc3QgdmFsdWUgPSBvcHRpb25zW29wdF07XG4gICAgICBjb25zdCByZXN1bHQgPSB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbGlkYXRvcih2YWx1ZSwgb3B0LCBvcHRpb25zKTtcbiAgICAgIGlmIChyZXN1bHQgIT09IHRydWUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoJ29wdGlvbiAnICsgb3B0ICsgJyBtdXN0IGJlICcgKyByZXN1bHQsIEF4aW9zRXJyb3IuRVJSX0JBRF9PUFRJT05fVkFMVUUpO1xuICAgICAgfVxuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChhbGxvd1Vua25vd24gIT09IHRydWUpIHtcbiAgICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKCdVbmtub3duIG9wdGlvbiAnICsgb3B0LCBBeGlvc0Vycm9yLkVSUl9CQURfT1BUSU9OKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBhc3NlcnRPcHRpb25zLFxuICB2YWxpZGF0b3JzXG59O1xuIiwgIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4vLi4vdXRpbHMuanMnO1xuaW1wb3J0IGJ1aWxkVVJMIGZyb20gJy4uL2hlbHBlcnMvYnVpbGRVUkwuanMnO1xuaW1wb3J0IEludGVyY2VwdG9yTWFuYWdlciBmcm9tICcuL0ludGVyY2VwdG9yTWFuYWdlci5qcyc7XG5pbXBvcnQgZGlzcGF0Y2hSZXF1ZXN0IGZyb20gJy4vZGlzcGF0Y2hSZXF1ZXN0LmpzJztcbmltcG9ydCBtZXJnZUNvbmZpZyBmcm9tICcuL21lcmdlQ29uZmlnLmpzJztcbmltcG9ydCBidWlsZEZ1bGxQYXRoIGZyb20gJy4vYnVpbGRGdWxsUGF0aC5qcyc7XG5pbXBvcnQgdmFsaWRhdG9yIGZyb20gJy4uL2hlbHBlcnMvdmFsaWRhdG9yLmpzJztcbmltcG9ydCBBeGlvc0hlYWRlcnMgZnJvbSAnLi9BeGlvc0hlYWRlcnMuanMnO1xuXG5jb25zdCB2YWxpZGF0b3JzID0gdmFsaWRhdG9yLnZhbGlkYXRvcnM7XG5cbi8qKlxuICogQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGluc3RhbmNlQ29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKlxuICogQHJldHVybiB7QXhpb3N9IEEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKi9cbmNsYXNzIEF4aW9zIHtcbiAgY29uc3RydWN0b3IoaW5zdGFuY2VDb25maWcpIHtcbiAgICB0aGlzLmRlZmF1bHRzID0gaW5zdGFuY2VDb25maWc7XG4gICAgdGhpcy5pbnRlcmNlcHRvcnMgPSB7XG4gICAgICByZXF1ZXN0OiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKCksXG4gICAgICByZXNwb25zZTogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEaXNwYXRjaCBhIHJlcXVlc3RcbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd8T2JqZWN0fSBjb25maWdPclVybCBUaGUgY29uZmlnIHNwZWNpZmljIGZvciB0aGlzIHJlcXVlc3QgKG1lcmdlZCB3aXRoIHRoaXMuZGVmYXVsdHMpXG4gICAqIEBwYXJhbSB7P09iamVjdH0gY29uZmlnXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfSBUaGUgUHJvbWlzZSB0byBiZSBmdWxmaWxsZWRcbiAgICovXG4gIGFzeW5jIHJlcXVlc3QoY29uZmlnT3JVcmwsIGNvbmZpZykge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5fcmVxdWVzdChjb25maWdPclVybCwgY29uZmlnKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGlmIChlcnIgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICBsZXQgZHVtbXkgPSB7fTtcblxuICAgICAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSA/IEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKGR1bW15KSA6IChkdW1teSA9IG5ldyBFcnJvcigpKTtcblxuICAgICAgICAvLyBzbGljZSBvZmYgdGhlIEVycm9yOiAuLi4gbGluZVxuICAgICAgICBjb25zdCBzdGFjayA9IGR1bW15LnN0YWNrID8gZHVtbXkuc3RhY2sucmVwbGFjZSgvXi4rXFxuLywgJycpIDogJyc7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaWYgKCFlcnIuc3RhY2spIHtcbiAgICAgICAgICAgIGVyci5zdGFjayA9IHN0YWNrO1xuICAgICAgICAgICAgLy8gbWF0Y2ggd2l0aG91dCB0aGUgMiB0b3Agc3RhY2sgbGluZXNcbiAgICAgICAgICB9IGVsc2UgaWYgKHN0YWNrICYmICFTdHJpbmcoZXJyLnN0YWNrKS5lbmRzV2l0aChzdGFjay5yZXBsYWNlKC9eLitcXG4uK1xcbi8sICcnKSkpIHtcbiAgICAgICAgICAgIGVyci5zdGFjayArPSAnXFxuJyArIHN0YWNrXG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgLy8gaWdub3JlIHRoZSBjYXNlIHdoZXJlIFwic3RhY2tcIiBpcyBhbiB1bi13cml0YWJsZSBwcm9wZXJ0eVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRocm93IGVycjtcbiAgICB9XG4gIH1cblxuICBfcmVxdWVzdChjb25maWdPclVybCwgY29uZmlnKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgLy8gQWxsb3cgZm9yIGF4aW9zKCdleGFtcGxlL3VybCdbLCBjb25maWddKSBhIGxhIGZldGNoIEFQSVxuICAgIGlmICh0eXBlb2YgY29uZmlnT3JVcmwgPT09ICdzdHJpbmcnKSB7XG4gICAgICBjb25maWcgPSBjb25maWcgfHwge307XG4gICAgICBjb25maWcudXJsID0gY29uZmlnT3JVcmw7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbmZpZyA9IGNvbmZpZ09yVXJsIHx8IHt9O1xuICAgIH1cblxuICAgIGNvbmZpZyA9IG1lcmdlQ29uZmlnKHRoaXMuZGVmYXVsdHMsIGNvbmZpZyk7XG5cbiAgICBjb25zdCB7dHJhbnNpdGlvbmFsLCBwYXJhbXNTZXJpYWxpemVyLCBoZWFkZXJzfSA9IGNvbmZpZztcblxuICAgIGlmICh0cmFuc2l0aW9uYWwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdmFsaWRhdG9yLmFzc2VydE9wdGlvbnModHJhbnNpdGlvbmFsLCB7XG4gICAgICAgIHNpbGVudEpTT05QYXJzaW5nOiB2YWxpZGF0b3JzLnRyYW5zaXRpb25hbCh2YWxpZGF0b3JzLmJvb2xlYW4pLFxuICAgICAgICBmb3JjZWRKU09OUGFyc2luZzogdmFsaWRhdG9ycy50cmFuc2l0aW9uYWwodmFsaWRhdG9ycy5ib29sZWFuKSxcbiAgICAgICAgY2xhcmlmeVRpbWVvdXRFcnJvcjogdmFsaWRhdG9ycy50cmFuc2l0aW9uYWwodmFsaWRhdG9ycy5ib29sZWFuKVxuICAgICAgfSwgZmFsc2UpO1xuICAgIH1cblxuICAgIGlmIChwYXJhbXNTZXJpYWxpemVyICE9IG51bGwpIHtcbiAgICAgIGlmICh1dGlscy5pc0Z1bmN0aW9uKHBhcmFtc1NlcmlhbGl6ZXIpKSB7XG4gICAgICAgIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyID0ge1xuICAgICAgICAgIHNlcmlhbGl6ZTogcGFyYW1zU2VyaWFsaXplclxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWxpZGF0b3IuYXNzZXJ0T3B0aW9ucyhwYXJhbXNTZXJpYWxpemVyLCB7XG4gICAgICAgICAgZW5jb2RlOiB2YWxpZGF0b3JzLmZ1bmN0aW9uLFxuICAgICAgICAgIHNlcmlhbGl6ZTogdmFsaWRhdG9ycy5mdW5jdGlvblxuICAgICAgICB9LCB0cnVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YWxpZGF0b3IuYXNzZXJ0T3B0aW9ucyhjb25maWcsIHtcbiAgICAgIGJhc2VVcmw6IHZhbGlkYXRvcnMuc3BlbGxpbmcoJ2Jhc2VVUkwnKSxcbiAgICAgIHdpdGhYc3JmVG9rZW46IHZhbGlkYXRvcnMuc3BlbGxpbmcoJ3dpdGhYU1JGVG9rZW4nKVxuICAgIH0sIHRydWUpO1xuXG4gICAgLy8gU2V0IGNvbmZpZy5tZXRob2RcbiAgICBjb25maWcubWV0aG9kID0gKGNvbmZpZy5tZXRob2QgfHwgdGhpcy5kZWZhdWx0cy5tZXRob2QgfHwgJ2dldCcpLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAvLyBGbGF0dGVuIGhlYWRlcnNcbiAgICBsZXQgY29udGV4dEhlYWRlcnMgPSBoZWFkZXJzICYmIHV0aWxzLm1lcmdlKFxuICAgICAgaGVhZGVycy5jb21tb24sXG4gICAgICBoZWFkZXJzW2NvbmZpZy5tZXRob2RdXG4gICAgKTtcblxuICAgIGhlYWRlcnMgJiYgdXRpbHMuZm9yRWFjaChcbiAgICAgIFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJywgJ2NvbW1vbiddLFxuICAgICAgKG1ldGhvZCkgPT4ge1xuICAgICAgICBkZWxldGUgaGVhZGVyc1ttZXRob2RdO1xuICAgICAgfVxuICAgICk7XG5cbiAgICBjb25maWcuaGVhZGVycyA9IEF4aW9zSGVhZGVycy5jb25jYXQoY29udGV4dEhlYWRlcnMsIGhlYWRlcnMpO1xuXG4gICAgLy8gZmlsdGVyIG91dCBza2lwcGVkIGludGVyY2VwdG9yc1xuICAgIGNvbnN0IHJlcXVlc3RJbnRlcmNlcHRvckNoYWluID0gW107XG4gICAgbGV0IHN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycyA9IHRydWU7XG4gICAgdGhpcy5pbnRlcmNlcHRvcnMucmVxdWVzdC5mb3JFYWNoKGZ1bmN0aW9uIHVuc2hpZnRSZXF1ZXN0SW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgICBpZiAodHlwZW9mIGludGVyY2VwdG9yLnJ1bldoZW4gPT09ICdmdW5jdGlvbicgJiYgaW50ZXJjZXB0b3IucnVuV2hlbihjb25maWcpID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycyA9IHN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycyAmJiBpbnRlcmNlcHRvci5zeW5jaHJvbm91cztcblxuICAgICAgcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4udW5zaGlmdChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgICB9KTtcblxuICAgIGNvbnN0IHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbiA9IFtdO1xuICAgIHRoaXMuaW50ZXJjZXB0b3JzLnJlc3BvbnNlLmZvckVhY2goZnVuY3Rpb24gcHVzaFJlc3BvbnNlSW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgICByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4ucHVzaChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgICB9KTtcblxuICAgIGxldCBwcm9taXNlO1xuICAgIGxldCBpID0gMDtcbiAgICBsZXQgbGVuO1xuXG4gICAgaWYgKCFzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMpIHtcbiAgICAgIGNvbnN0IGNoYWluID0gW2Rpc3BhdGNoUmVxdWVzdC5iaW5kKHRoaXMpLCB1bmRlZmluZWRdO1xuICAgICAgY2hhaW4udW5zaGlmdC5hcHBseShjaGFpbiwgcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4pO1xuICAgICAgY2hhaW4ucHVzaC5hcHBseShjaGFpbiwgcmVzcG9uc2VJbnRlcmNlcHRvckNoYWluKTtcbiAgICAgIGxlbiA9IGNoYWluLmxlbmd0aDtcblxuICAgICAgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShjb25maWcpO1xuXG4gICAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKGNoYWluW2krK10sIGNoYWluW2krK10pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICB9XG5cbiAgICBsZW4gPSByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbi5sZW5ndGg7XG5cbiAgICBsZXQgbmV3Q29uZmlnID0gY29uZmlnO1xuXG4gICAgaSA9IDA7XG5cbiAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgY29uc3Qgb25GdWxmaWxsZWQgPSByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbltpKytdO1xuICAgICAgY29uc3Qgb25SZWplY3RlZCA9IHJlcXVlc3RJbnRlcmNlcHRvckNoYWluW2krK107XG4gICAgICB0cnkge1xuICAgICAgICBuZXdDb25maWcgPSBvbkZ1bGZpbGxlZChuZXdDb25maWcpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgb25SZWplY3RlZC5jYWxsKHRoaXMsIGVycm9yKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIHByb21pc2UgPSBkaXNwYXRjaFJlcXVlc3QuY2FsbCh0aGlzLCBuZXdDb25maWcpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICAgIH1cblxuICAgIGkgPSAwO1xuICAgIGxlbiA9IHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbi5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgcHJvbWlzZSA9IHByb21pc2UudGhlbihyZXNwb25zZUludGVyY2VwdG9yQ2hhaW5baSsrXSwgcmVzcG9uc2VJbnRlcmNlcHRvckNoYWluW2krK10pO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9taXNlO1xuICB9XG5cbiAgZ2V0VXJpKGNvbmZpZykge1xuICAgIGNvbmZpZyA9IG1lcmdlQ29uZmlnKHRoaXMuZGVmYXVsdHMsIGNvbmZpZyk7XG4gICAgY29uc3QgZnVsbFBhdGggPSBidWlsZEZ1bGxQYXRoKGNvbmZpZy5iYXNlVVJMLCBjb25maWcudXJsKTtcbiAgICByZXR1cm4gYnVpbGRVUkwoZnVsbFBhdGgsIGNvbmZpZy5wYXJhbXMsIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyKTtcbiAgfVxufVxuXG4vLyBQcm92aWRlIGFsaWFzZXMgZm9yIHN1cHBvcnRlZCByZXF1ZXN0IG1ldGhvZHNcbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAnb3B0aW9ucyddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdChtZXJnZUNvbmZpZyhjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZCxcbiAgICAgIHVybCxcbiAgICAgIGRhdGE6IChjb25maWcgfHwge30pLmRhdGFcbiAgICB9KSk7XG4gIH07XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cblxuICBmdW5jdGlvbiBnZW5lcmF0ZUhUVFBNZXRob2QoaXNGb3JtKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGh0dHBNZXRob2QodXJsLCBkYXRhLCBjb25maWcpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlcXVlc3QobWVyZ2VDb25maWcoY29uZmlnIHx8IHt9LCB7XG4gICAgICAgIG1ldGhvZCxcbiAgICAgICAgaGVhZGVyczogaXNGb3JtID8ge1xuICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnbXVsdGlwYXJ0L2Zvcm0tZGF0YSdcbiAgICAgICAgfSA6IHt9LFxuICAgICAgICB1cmwsXG4gICAgICAgIGRhdGFcbiAgICAgIH0pKTtcbiAgICB9O1xuICB9XG5cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBnZW5lcmF0ZUhUVFBNZXRob2QoKTtcblxuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kICsgJ0Zvcm0nXSA9IGdlbmVyYXRlSFRUUE1ldGhvZCh0cnVlKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBBeGlvcztcbiIsICIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBDYW5jZWxlZEVycm9yIGZyb20gJy4vQ2FuY2VsZWRFcnJvci5qcyc7XG5cbi8qKlxuICogQSBgQ2FuY2VsVG9rZW5gIGlzIGFuIG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIHRvIHJlcXVlc3QgY2FuY2VsbGF0aW9uIG9mIGFuIG9wZXJhdGlvbi5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBleGVjdXRvciBUaGUgZXhlY3V0b3IgZnVuY3Rpb24uXG4gKlxuICogQHJldHVybnMge0NhbmNlbFRva2VufVxuICovXG5jbGFzcyBDYW5jZWxUb2tlbiB7XG4gIGNvbnN0cnVjdG9yKGV4ZWN1dG9yKSB7XG4gICAgaWYgKHR5cGVvZiBleGVjdXRvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZXhlY3V0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIH1cblxuICAgIGxldCByZXNvbHZlUHJvbWlzZTtcblxuICAgIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIHByb21pc2VFeGVjdXRvcihyZXNvbHZlKSB7XG4gICAgICByZXNvbHZlUHJvbWlzZSA9IHJlc29sdmU7XG4gICAgfSk7XG5cbiAgICBjb25zdCB0b2tlbiA9IHRoaXM7XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICAgIHRoaXMucHJvbWlzZS50aGVuKGNhbmNlbCA9PiB7XG4gICAgICBpZiAoIXRva2VuLl9saXN0ZW5lcnMpIHJldHVybjtcblxuICAgICAgbGV0IGkgPSB0b2tlbi5fbGlzdGVuZXJzLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKGktLSA+IDApIHtcbiAgICAgICAgdG9rZW4uX2xpc3RlbmVyc1tpXShjYW5jZWwpO1xuICAgICAgfVxuICAgICAgdG9rZW4uX2xpc3RlbmVycyA9IG51bGw7XG4gICAgfSk7XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICAgIHRoaXMucHJvbWlzZS50aGVuID0gb25mdWxmaWxsZWQgPT4ge1xuICAgICAgbGV0IF9yZXNvbHZlO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgICAgIGNvbnN0IHByb21pc2UgPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgdG9rZW4uc3Vic2NyaWJlKHJlc29sdmUpO1xuICAgICAgICBfcmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgICB9KS50aGVuKG9uZnVsZmlsbGVkKTtcblxuICAgICAgcHJvbWlzZS5jYW5jZWwgPSBmdW5jdGlvbiByZWplY3QoKSB7XG4gICAgICAgIHRva2VuLnVuc3Vic2NyaWJlKF9yZXNvbHZlKTtcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH07XG5cbiAgICBleGVjdXRvcihmdW5jdGlvbiBjYW5jZWwobWVzc2FnZSwgY29uZmlnLCByZXF1ZXN0KSB7XG4gICAgICBpZiAodG9rZW4ucmVhc29uKSB7XG4gICAgICAgIC8vIENhbmNlbGxhdGlvbiBoYXMgYWxyZWFkeSBiZWVuIHJlcXVlc3RlZFxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRva2VuLnJlYXNvbiA9IG5ldyBDYW5jZWxlZEVycm9yKG1lc3NhZ2UsIGNvbmZpZywgcmVxdWVzdCk7XG4gICAgICByZXNvbHZlUHJvbWlzZSh0b2tlbi5yZWFzb24pO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFRocm93cyBhIGBDYW5jZWxlZEVycm9yYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICAgKi9cbiAgdGhyb3dJZlJlcXVlc3RlZCgpIHtcbiAgICBpZiAodGhpcy5yZWFzb24pIHtcbiAgICAgIHRocm93IHRoaXMucmVhc29uO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTdWJzY3JpYmUgdG8gdGhlIGNhbmNlbCBzaWduYWxcbiAgICovXG5cbiAgc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gICAgaWYgKHRoaXMucmVhc29uKSB7XG4gICAgICBsaXN0ZW5lcih0aGlzLnJlYXNvbik7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2xpc3RlbmVycykge1xuICAgICAgdGhpcy5fbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9saXN0ZW5lcnMgPSBbbGlzdGVuZXJdO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBVbnN1YnNjcmliZSBmcm9tIHRoZSBjYW5jZWwgc2lnbmFsXG4gICAqL1xuXG4gIHVuc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gICAgaWYgKCF0aGlzLl9saXN0ZW5lcnMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgaW5kZXggPSB0aGlzLl9saXN0ZW5lcnMuaW5kZXhPZihsaXN0ZW5lcik7XG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgdGhpcy5fbGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxuICB9XG5cbiAgdG9BYm9ydFNpZ25hbCgpIHtcbiAgICBjb25zdCBjb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuXG4gICAgY29uc3QgYWJvcnQgPSAoZXJyKSA9PiB7XG4gICAgICBjb250cm9sbGVyLmFib3J0KGVycik7XG4gICAgfTtcblxuICAgIHRoaXMuc3Vic2NyaWJlKGFib3J0KTtcblxuICAgIGNvbnRyb2xsZXIuc2lnbmFsLnVuc3Vic2NyaWJlID0gKCkgPT4gdGhpcy51bnN1YnNjcmliZShhYm9ydCk7XG5cbiAgICByZXR1cm4gY29udHJvbGxlci5zaWduYWw7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhbiBvYmplY3QgdGhhdCBjb250YWlucyBhIG5ldyBgQ2FuY2VsVG9rZW5gIGFuZCBhIGZ1bmN0aW9uIHRoYXQsIHdoZW4gY2FsbGVkLFxuICAgKiBjYW5jZWxzIHRoZSBgQ2FuY2VsVG9rZW5gLlxuICAgKi9cbiAgc3RhdGljIHNvdXJjZSgpIHtcbiAgICBsZXQgY2FuY2VsO1xuICAgIGNvbnN0IHRva2VuID0gbmV3IENhbmNlbFRva2VuKGZ1bmN0aW9uIGV4ZWN1dG9yKGMpIHtcbiAgICAgIGNhbmNlbCA9IGM7XG4gICAgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRva2VuLFxuICAgICAgY2FuY2VsXG4gICAgfTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBDYW5jZWxUb2tlbjtcbiIsICIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogU3ludGFjdGljIHN1Z2FyIGZvciBpbnZva2luZyBhIGZ1bmN0aW9uIGFuZCBleHBhbmRpbmcgYW4gYXJyYXkgZm9yIGFyZ3VtZW50cy5cbiAqXG4gKiBDb21tb24gdXNlIGNhc2Ugd291bGQgYmUgdG8gdXNlIGBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHlgLlxuICpcbiAqICBgYGBqc1xuICogIGZ1bmN0aW9uIGYoeCwgeSwgeikge31cbiAqICB2YXIgYXJncyA9IFsxLCAyLCAzXTtcbiAqICBmLmFwcGx5KG51bGwsIGFyZ3MpO1xuICogIGBgYFxuICpcbiAqIFdpdGggYHNwcmVhZGAgdGhpcyBleGFtcGxlIGNhbiBiZSByZS13cml0dGVuLlxuICpcbiAqICBgYGBqc1xuICogIHNwcmVhZChmdW5jdGlvbih4LCB5LCB6KSB7fSkoWzEsIDIsIDNdKTtcbiAqICBgYGBcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICpcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3ByZWFkKGNhbGxiYWNrKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKGFycikge1xuICAgIHJldHVybiBjYWxsYmFjay5hcHBseShudWxsLCBhcnIpO1xuICB9O1xufVxuIiwgIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4vLi4vdXRpbHMuanMnO1xuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciB0aGUgcGF5bG9hZCBpcyBhbiBlcnJvciB0aHJvd24gYnkgQXhpb3NcbiAqXG4gKiBAcGFyYW0geyp9IHBheWxvYWQgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgcGF5bG9hZCBpcyBhbiBlcnJvciB0aHJvd24gYnkgQXhpb3MsIG90aGVyd2lzZSBmYWxzZVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc0F4aW9zRXJyb3IocGF5bG9hZCkge1xuICByZXR1cm4gdXRpbHMuaXNPYmplY3QocGF5bG9hZCkgJiYgKHBheWxvYWQuaXNBeGlvc0Vycm9yID09PSB0cnVlKTtcbn1cbiIsICJjb25zdCBIdHRwU3RhdHVzQ29kZSA9IHtcbiAgQ29udGludWU6IDEwMCxcbiAgU3dpdGNoaW5nUHJvdG9jb2xzOiAxMDEsXG4gIFByb2Nlc3Npbmc6IDEwMixcbiAgRWFybHlIaW50czogMTAzLFxuICBPazogMjAwLFxuICBDcmVhdGVkOiAyMDEsXG4gIEFjY2VwdGVkOiAyMDIsXG4gIE5vbkF1dGhvcml0YXRpdmVJbmZvcm1hdGlvbjogMjAzLFxuICBOb0NvbnRlbnQ6IDIwNCxcbiAgUmVzZXRDb250ZW50OiAyMDUsXG4gIFBhcnRpYWxDb250ZW50OiAyMDYsXG4gIE11bHRpU3RhdHVzOiAyMDcsXG4gIEFscmVhZHlSZXBvcnRlZDogMjA4LFxuICBJbVVzZWQ6IDIyNixcbiAgTXVsdGlwbGVDaG9pY2VzOiAzMDAsXG4gIE1vdmVkUGVybWFuZW50bHk6IDMwMSxcbiAgRm91bmQ6IDMwMixcbiAgU2VlT3RoZXI6IDMwMyxcbiAgTm90TW9kaWZpZWQ6IDMwNCxcbiAgVXNlUHJveHk6IDMwNSxcbiAgVW51c2VkOiAzMDYsXG4gIFRlbXBvcmFyeVJlZGlyZWN0OiAzMDcsXG4gIFBlcm1hbmVudFJlZGlyZWN0OiAzMDgsXG4gIEJhZFJlcXVlc3Q6IDQwMCxcbiAgVW5hdXRob3JpemVkOiA0MDEsXG4gIFBheW1lbnRSZXF1aXJlZDogNDAyLFxuICBGb3JiaWRkZW46IDQwMyxcbiAgTm90Rm91bmQ6IDQwNCxcbiAgTWV0aG9kTm90QWxsb3dlZDogNDA1LFxuICBOb3RBY2NlcHRhYmxlOiA0MDYsXG4gIFByb3h5QXV0aGVudGljYXRpb25SZXF1aXJlZDogNDA3LFxuICBSZXF1ZXN0VGltZW91dDogNDA4LFxuICBDb25mbGljdDogNDA5LFxuICBHb25lOiA0MTAsXG4gIExlbmd0aFJlcXVpcmVkOiA0MTEsXG4gIFByZWNvbmRpdGlvbkZhaWxlZDogNDEyLFxuICBQYXlsb2FkVG9vTGFyZ2U6IDQxMyxcbiAgVXJpVG9vTG9uZzogNDE0LFxuICBVbnN1cHBvcnRlZE1lZGlhVHlwZTogNDE1LFxuICBSYW5nZU5vdFNhdGlzZmlhYmxlOiA0MTYsXG4gIEV4cGVjdGF0aW9uRmFpbGVkOiA0MTcsXG4gIEltQVRlYXBvdDogNDE4LFxuICBNaXNkaXJlY3RlZFJlcXVlc3Q6IDQyMSxcbiAgVW5wcm9jZXNzYWJsZUVudGl0eTogNDIyLFxuICBMb2NrZWQ6IDQyMyxcbiAgRmFpbGVkRGVwZW5kZW5jeTogNDI0LFxuICBUb29FYXJseTogNDI1LFxuICBVcGdyYWRlUmVxdWlyZWQ6IDQyNixcbiAgUHJlY29uZGl0aW9uUmVxdWlyZWQ6IDQyOCxcbiAgVG9vTWFueVJlcXVlc3RzOiA0MjksXG4gIFJlcXVlc3RIZWFkZXJGaWVsZHNUb29MYXJnZTogNDMxLFxuICBVbmF2YWlsYWJsZUZvckxlZ2FsUmVhc29uczogNDUxLFxuICBJbnRlcm5hbFNlcnZlckVycm9yOiA1MDAsXG4gIE5vdEltcGxlbWVudGVkOiA1MDEsXG4gIEJhZEdhdGV3YXk6IDUwMixcbiAgU2VydmljZVVuYXZhaWxhYmxlOiA1MDMsXG4gIEdhdGV3YXlUaW1lb3V0OiA1MDQsXG4gIEh0dHBWZXJzaW9uTm90U3VwcG9ydGVkOiA1MDUsXG4gIFZhcmlhbnRBbHNvTmVnb3RpYXRlczogNTA2LFxuICBJbnN1ZmZpY2llbnRTdG9yYWdlOiA1MDcsXG4gIExvb3BEZXRlY3RlZDogNTA4LFxuICBOb3RFeHRlbmRlZDogNTEwLFxuICBOZXR3b3JrQXV0aGVudGljYXRpb25SZXF1aXJlZDogNTExLFxufTtcblxuT2JqZWN0LmVudHJpZXMoSHR0cFN0YXR1c0NvZGUpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICBIdHRwU3RhdHVzQ29kZVt2YWx1ZV0gPSBrZXk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgSHR0cFN0YXR1c0NvZGU7XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi91dGlscy5qcyc7XG5pbXBvcnQgYmluZCBmcm9tICcuL2hlbHBlcnMvYmluZC5qcyc7XG5pbXBvcnQgQXhpb3MgZnJvbSAnLi9jb3JlL0F4aW9zLmpzJztcbmltcG9ydCBtZXJnZUNvbmZpZyBmcm9tICcuL2NvcmUvbWVyZ2VDb25maWcuanMnO1xuaW1wb3J0IGRlZmF1bHRzIGZyb20gJy4vZGVmYXVsdHMvaW5kZXguanMnO1xuaW1wb3J0IGZvcm1EYXRhVG9KU09OIGZyb20gJy4vaGVscGVycy9mb3JtRGF0YVRvSlNPTi5qcyc7XG5pbXBvcnQgQ2FuY2VsZWRFcnJvciBmcm9tICcuL2NhbmNlbC9DYW5jZWxlZEVycm9yLmpzJztcbmltcG9ydCBDYW5jZWxUb2tlbiBmcm9tICcuL2NhbmNlbC9DYW5jZWxUb2tlbi5qcyc7XG5pbXBvcnQgaXNDYW5jZWwgZnJvbSAnLi9jYW5jZWwvaXNDYW5jZWwuanMnO1xuaW1wb3J0IHtWRVJTSU9OfSBmcm9tICcuL2Vudi9kYXRhLmpzJztcbmltcG9ydCB0b0Zvcm1EYXRhIGZyb20gJy4vaGVscGVycy90b0Zvcm1EYXRhLmpzJztcbmltcG9ydCBBeGlvc0Vycm9yIGZyb20gJy4vY29yZS9BeGlvc0Vycm9yLmpzJztcbmltcG9ydCBzcHJlYWQgZnJvbSAnLi9oZWxwZXJzL3NwcmVhZC5qcyc7XG5pbXBvcnQgaXNBeGlvc0Vycm9yIGZyb20gJy4vaGVscGVycy9pc0F4aW9zRXJyb3IuanMnO1xuaW1wb3J0IEF4aW9zSGVhZGVycyBmcm9tIFwiLi9jb3JlL0F4aW9zSGVhZGVycy5qc1wiO1xuaW1wb3J0IGFkYXB0ZXJzIGZyb20gJy4vYWRhcHRlcnMvYWRhcHRlcnMuanMnO1xuaW1wb3J0IEh0dHBTdGF0dXNDb2RlIGZyb20gJy4vaGVscGVycy9IdHRwU3RhdHVzQ29kZS5qcyc7XG5cbi8qKlxuICogQ3JlYXRlIGFuIGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGRlZmF1bHRDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqXG4gKiBAcmV0dXJucyB7QXhpb3N9IEEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRDb25maWcpIHtcbiAgY29uc3QgY29udGV4dCA9IG5ldyBBeGlvcyhkZWZhdWx0Q29uZmlnKTtcbiAgY29uc3QgaW5zdGFuY2UgPSBiaW5kKEF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0LCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGF4aW9zLnByb3RvdHlwZSB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIEF4aW9zLnByb3RvdHlwZSwgY29udGV4dCwge2FsbE93bktleXM6IHRydWV9KTtcblxuICAvLyBDb3B5IGNvbnRleHQgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBjb250ZXh0LCBudWxsLCB7YWxsT3duS2V5czogdHJ1ZX0pO1xuXG4gIC8vIEZhY3RvcnkgZm9yIGNyZWF0aW5nIG5ldyBpbnN0YW5jZXNcbiAgaW5zdGFuY2UuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKGluc3RhbmNlQ29uZmlnKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUluc3RhbmNlKG1lcmdlQ29uZmlnKGRlZmF1bHRDb25maWcsIGluc3RhbmNlQ29uZmlnKSk7XG4gIH07XG5cbiAgcmV0dXJuIGluc3RhbmNlO1xufVxuXG4vLyBDcmVhdGUgdGhlIGRlZmF1bHQgaW5zdGFuY2UgdG8gYmUgZXhwb3J0ZWRcbmNvbnN0IGF4aW9zID0gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdHMpO1xuXG4vLyBFeHBvc2UgQXhpb3MgY2xhc3MgdG8gYWxsb3cgY2xhc3MgaW5oZXJpdGFuY2VcbmF4aW9zLkF4aW9zID0gQXhpb3M7XG5cbi8vIEV4cG9zZSBDYW5jZWwgJiBDYW5jZWxUb2tlblxuYXhpb3MuQ2FuY2VsZWRFcnJvciA9IENhbmNlbGVkRXJyb3I7XG5heGlvcy5DYW5jZWxUb2tlbiA9IENhbmNlbFRva2VuO1xuYXhpb3MuaXNDYW5jZWwgPSBpc0NhbmNlbDtcbmF4aW9zLlZFUlNJT04gPSBWRVJTSU9OO1xuYXhpb3MudG9Gb3JtRGF0YSA9IHRvRm9ybURhdGE7XG5cbi8vIEV4cG9zZSBBeGlvc0Vycm9yIGNsYXNzXG5heGlvcy5BeGlvc0Vycm9yID0gQXhpb3NFcnJvcjtcblxuLy8gYWxpYXMgZm9yIENhbmNlbGVkRXJyb3IgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHlcbmF4aW9zLkNhbmNlbCA9IGF4aW9zLkNhbmNlbGVkRXJyb3I7XG5cbi8vIEV4cG9zZSBhbGwvc3ByZWFkXG5heGlvcy5hbGwgPSBmdW5jdGlvbiBhbGwocHJvbWlzZXMpIHtcbiAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKTtcbn07XG5cbmF4aW9zLnNwcmVhZCA9IHNwcmVhZDtcblxuLy8gRXhwb3NlIGlzQXhpb3NFcnJvclxuYXhpb3MuaXNBeGlvc0Vycm9yID0gaXNBeGlvc0Vycm9yO1xuXG4vLyBFeHBvc2UgbWVyZ2VDb25maWdcbmF4aW9zLm1lcmdlQ29uZmlnID0gbWVyZ2VDb25maWc7XG5cbmF4aW9zLkF4aW9zSGVhZGVycyA9IEF4aW9zSGVhZGVycztcblxuYXhpb3MuZm9ybVRvSlNPTiA9IHRoaW5nID0+IGZvcm1EYXRhVG9KU09OKHV0aWxzLmlzSFRNTEZvcm0odGhpbmcpID8gbmV3IEZvcm1EYXRhKHRoaW5nKSA6IHRoaW5nKTtcblxuYXhpb3MuZ2V0QWRhcHRlciA9IGFkYXB0ZXJzLmdldEFkYXB0ZXI7XG5cbmF4aW9zLkh0dHBTdGF0dXNDb2RlID0gSHR0cFN0YXR1c0NvZGU7XG5cbmF4aW9zLmRlZmF1bHQgPSBheGlvcztcblxuLy8gdGhpcyBtb2R1bGUgc2hvdWxkIG9ubHkgaGF2ZSBhIGRlZmF1bHQgZXhwb3J0XG5leHBvcnQgZGVmYXVsdCBheGlvc1xuIiwgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jaXRhdGlvbkVycm9yID0gZXhwb3J0cy5wZGZFcnJvciA9IGV4cG9ydHMuZmNFcnJvciA9IGV4cG9ydHMuZXZlbnRzRXJyb3IgPSBleHBvcnRzLm1lZGlhRXJyb3IgPSBleHBvcnRzLnJlbGF0ZWRFcnJvciA9IGV4cG9ydHMuaW50cm9FcnJvciA9IGV4cG9ydHMucHJlbG9hZEVycm9yID0gZXhwb3J0cy5pbmZvYm94RXJyb3IgPSBleHBvcnRzLmNvb3JkaW5hdGVzRXJyb3IgPSBleHBvcnRzLmdlb1NlYXJjaEVycm9yID0gZXhwb3J0cy5saW5rc0Vycm9yID0gZXhwb3J0cy5jYXRlZ29yaWVzRXJyb3IgPSBleHBvcnRzLmNvbnRlbnRFcnJvciA9IGV4cG9ydHMuaHRtbEVycm9yID0gZXhwb3J0cy5pbWFnZUVycm9yID0gZXhwb3J0cy5zdW1tYXJ5RXJyb3IgPSBleHBvcnRzLnBhZ2VFcnJvciA9IGV4cG9ydHMuYXV0b2NvbXBsZXRpb25zRXJyb3IgPSBleHBvcnRzLnNlYXJjaEVycm9yID0gZXhwb3J0cy53aWtpRXJyb3IgPSB2b2lkIDA7XG5jbGFzcyB3aWtpRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSwgY29kZSkge1xuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAgICAgdGhpcy5uYW1lID0gJ3dpa2lFcnJvcic7XG4gICAgICAgIHRoaXMuY29kZSA9IGNvZGU7XG4gICAgfVxufVxuZXhwb3J0cy53aWtpRXJyb3IgPSB3aWtpRXJyb3I7XG5jbGFzcyBzZWFyY2hFcnJvciBleHRlbmRzIHdpa2lFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSkge1xuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAgICAgdGhpcy5uYW1lID0gJ3NlYXJjaEVycm9yJztcbiAgICB9XG59XG5leHBvcnRzLnNlYXJjaEVycm9yID0gc2VhcmNoRXJyb3I7XG5jbGFzcyBhdXRvY29tcGxldGlvbnNFcnJvciBleHRlbmRzIHdpa2lFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSkge1xuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAgICAgdGhpcy5uYW1lID0gJ2F1dG9jb21wbGV0aW9uc0Vycm9yJztcbiAgICB9XG59XG5leHBvcnRzLmF1dG9jb21wbGV0aW9uc0Vycm9yID0gYXV0b2NvbXBsZXRpb25zRXJyb3I7XG5jbGFzcyBwYWdlRXJyb3IgZXh0ZW5kcyB3aWtpRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XG4gICAgICAgIHRoaXMubmFtZSA9ICdwYWdlRXJyb3InO1xuICAgIH1cbn1cbmV4cG9ydHMucGFnZUVycm9yID0gcGFnZUVycm9yO1xuY2xhc3Mgc3VtbWFyeUVycm9yIGV4dGVuZHMgd2lraUVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLm5hbWUgPSAnc3VtbWFyeUVycm9yJztcbiAgICB9XG59XG5leHBvcnRzLnN1bW1hcnlFcnJvciA9IHN1bW1hcnlFcnJvcjtcbmNsYXNzIGltYWdlRXJyb3IgZXh0ZW5kcyB3aWtpRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XG4gICAgICAgIHRoaXMubmFtZSA9ICdpbWFnZUVycm9yJztcbiAgICB9XG59XG5leHBvcnRzLmltYWdlRXJyb3IgPSBpbWFnZUVycm9yO1xuY2xhc3MgaHRtbEVycm9yIGV4dGVuZHMgd2lraUVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLm5hbWUgPSAnaHRtbEVycm9yJztcbiAgICB9XG59XG5leHBvcnRzLmh0bWxFcnJvciA9IGh0bWxFcnJvcjtcbmNsYXNzIGNvbnRlbnRFcnJvciBleHRlbmRzIHdpa2lFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSkge1xuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAgICAgdGhpcy5uYW1lID0gJ2NvbnRlbnRFcnJvcic7XG4gICAgfVxufVxuZXhwb3J0cy5jb250ZW50RXJyb3IgPSBjb250ZW50RXJyb3I7XG5jbGFzcyBjYXRlZ29yaWVzRXJyb3IgZXh0ZW5kcyB3aWtpRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XG4gICAgICAgIHRoaXMubmFtZSA9ICdjYXRlZ29yaWVzRXJyb3InO1xuICAgIH1cbn1cbmV4cG9ydHMuY2F0ZWdvcmllc0Vycm9yID0gY2F0ZWdvcmllc0Vycm9yO1xuY2xhc3MgbGlua3NFcnJvciBleHRlbmRzIHdpa2lFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSkge1xuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAgICAgdGhpcy5uYW1lID0gJ2xpbmtzRXJyb3InO1xuICAgIH1cbn1cbmV4cG9ydHMubGlua3NFcnJvciA9IGxpbmtzRXJyb3I7XG5jbGFzcyBnZW9TZWFyY2hFcnJvciBleHRlbmRzIHdpa2lFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSkge1xuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAgICAgdGhpcy5uYW1lID0gJ2dlb1NlYXJjaEVycm9yJztcbiAgICB9XG59XG5leHBvcnRzLmdlb1NlYXJjaEVycm9yID0gZ2VvU2VhcmNoRXJyb3I7XG5jbGFzcyBjb29yZGluYXRlc0Vycm9yIGV4dGVuZHMgd2lraUVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLm5hbWUgPSAnY29vcmRpbmF0ZXNFcnJvcic7XG4gICAgfVxufVxuZXhwb3J0cy5jb29yZGluYXRlc0Vycm9yID0gY29vcmRpbmF0ZXNFcnJvcjtcbmNsYXNzIGluZm9ib3hFcnJvciBleHRlbmRzIHdpa2lFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSkge1xuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAgICAgdGhpcy5uYW1lID0gJ2luZm9ib3hFcnJvcic7XG4gICAgfVxufVxuZXhwb3J0cy5pbmZvYm94RXJyb3IgPSBpbmZvYm94RXJyb3I7XG5jbGFzcyBwcmVsb2FkRXJyb3IgZXh0ZW5kcyB3aWtpRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XG4gICAgICAgIHRoaXMubmFtZSA9ICdwcmVsb2FkRXJyb3InO1xuICAgIH1cbn1cbmV4cG9ydHMucHJlbG9hZEVycm9yID0gcHJlbG9hZEVycm9yO1xuY2xhc3MgaW50cm9FcnJvciBleHRlbmRzIHdpa2lFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSkge1xuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAgICAgdGhpcy5uYW1lID0gJ2ludHJvRXJyb3InO1xuICAgIH1cbn1cbmV4cG9ydHMuaW50cm9FcnJvciA9IGludHJvRXJyb3I7XG5jbGFzcyByZWxhdGVkRXJyb3IgZXh0ZW5kcyB3aWtpRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XG4gICAgICAgIHRoaXMubmFtZSA9ICdyZWxhdGVkRXJyb3InO1xuICAgIH1cbn1cbmV4cG9ydHMucmVsYXRlZEVycm9yID0gcmVsYXRlZEVycm9yO1xuY2xhc3MgbWVkaWFFcnJvciBleHRlbmRzIHdpa2lFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSkge1xuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAgICAgdGhpcy5uYW1lID0gJ21lZGlhRXJyb3InO1xuICAgIH1cbn1cbmV4cG9ydHMubWVkaWFFcnJvciA9IG1lZGlhRXJyb3I7XG5jbGFzcyBldmVudHNFcnJvciBleHRlbmRzIHdpa2lFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSkge1xuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAgICAgdGhpcy5uYW1lID0gJ2V2ZW50c0Vycm9yJztcbiAgICB9XG59XG5leHBvcnRzLmV2ZW50c0Vycm9yID0gZXZlbnRzRXJyb3I7XG5jbGFzcyBmY0Vycm9yIGV4dGVuZHMgd2lraUVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLm5hbWUgPSAnZmVhdHVyZWRDb250ZW50RXJyb3InO1xuICAgIH1cbn1cbmV4cG9ydHMuZmNFcnJvciA9IGZjRXJyb3I7XG5jbGFzcyBwZGZFcnJvciBleHRlbmRzIHdpa2lFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSkge1xuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAgICAgdGhpcy5uYW1lID0gJ3BkZkVycm9yJztcbiAgICB9XG59XG5leHBvcnRzLnBkZkVycm9yID0gcGRmRXJyb3I7XG5jbGFzcyBjaXRhdGlvbkVycm9yIGV4dGVuZHMgd2lraUVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLm5hbWUgPSAnY2l0YXRpb25FcnJvcic7XG4gICAgfVxufVxuZXhwb3J0cy5jaXRhdGlvbkVycm9yID0gY2l0YXRpb25FcnJvcjtcbiIsICJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc2V0VXNlckFnZW50ID0gZXhwb3J0cy5zZXRBUElVcmwgPSBleHBvcnRzLnJldHVyblJlc3RVcmwgPSBleHBvcnRzLm1ha2VSZXN0UmVxdWVzdCA9IHZvaWQgMDtcbmNvbnN0IGF4aW9zXzEgPSByZXF1aXJlKFwiYXhpb3NcIik7XG5jb25zdCBlcnJvcnNfMSA9IHJlcXVpcmUoXCIuL2Vycm9yc1wiKTtcbmxldCBBUElfVVJMID0gJ2h0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93L2FwaS5waHA/JywgUkVTVF9BUElfVVJMID0gJ2h0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy9hcGkvcmVzdF92MS8nLCBcbi8vIFJBVEVfTElNSVQgPSBmYWxzZSxcbi8vIFJBVEVfTElNSVRfTUlOX1dBSVQgPSB1bmRlZmluZWQsXG4vLyBSQVRFX0xJTUlUX0xBU1RfQ0FMTCA9IHVuZGVmaW5lZCxcblVTRVJfQUdFTlQgPSAnd2lraXBlZGlhIChodHRwczovL2dpdGh1Yi5jb20vZG9wZWNvZGV6L1dpa2lwZWRpYS8pJztcbmFzeW5jIGZ1bmN0aW9uIGNhbGxBUEkodXJsKSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgXCJBcGktVXNlci1BZ2VudFwiOiBVU0VSX0FHRU5ULFxuICAgICAgICB9LFxuICAgIH07XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgeyBkYXRhIH0gPSBhd2FpdCBheGlvc18xLmRlZmF1bHQuZ2V0KHVybCwgb3B0aW9ucyk7XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLndpa2lFcnJvcihlcnJvcik7XG4gICAgfVxufVxuLy8gTWFrZXMgYSByZXF1ZXN0IHRvIGxlZ2FjeSBwaHAgZW5kcG9pbnRcbmFzeW5jIGZ1bmN0aW9uIG1ha2VSZXF1ZXN0KHBhcmFtcywgcmVkaXJlY3QgPSB0cnVlKSB7XG4gICAgY29uc3Qgc2VhcmNoID0geyAuLi5wYXJhbXMgfTtcbiAgICBzZWFyY2hbJ2Zvcm1hdCddID0gJ2pzb24nO1xuICAgIGlmIChyZWRpcmVjdCkge1xuICAgICAgICBzZWFyY2hbJ3JlZGlyZWN0cyddID0gJyc7XG4gICAgfVxuICAgIGlmICghcGFyYW1zLmFjdGlvbikge1xuICAgICAgICBzZWFyY2hbJ2FjdGlvbiddID0gXCJxdWVyeVwiO1xuICAgIH1cbiAgICBzZWFyY2hbJ29yaWdpbiddID0gJyonO1xuICAgIGxldCBzZWFyY2hQYXJhbSA9ICcnO1xuICAgIE9iamVjdC5rZXlzKHNlYXJjaCkuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICBzZWFyY2hQYXJhbSArPSBgJHtrZXl9PSR7c2VhcmNoW2tleV19JmA7XG4gICAgfSk7XG4gICAgcmV0dXJuIGF3YWl0IGNhbGxBUEkoZW5jb2RlVVJJKEFQSV9VUkwgKyBzZWFyY2hQYXJhbSkpO1xufVxuLy8gTWFrZXMgYSByZXF1ZXN0IHRvIHJlc3QgYXBpIGVuZHBvaW50XG5hc3luYyBmdW5jdGlvbiBtYWtlUmVzdFJlcXVlc3QocGF0aCwgcmVkaXJlY3QgPSB0cnVlKSB7XG4gICAgaWYgKCFyZWRpcmVjdCkge1xuICAgICAgICBwYXRoICs9ICc/cmVkaXJlY3Q9ZmFsc2UnO1xuICAgIH1cbiAgICByZXR1cm4gYXdhaXQgY2FsbEFQSShlbmNvZGVVUkkoUkVTVF9BUElfVVJMICsgcGF0aCkpO1xufVxuZXhwb3J0cy5tYWtlUmVzdFJlcXVlc3QgPSBtYWtlUmVzdFJlcXVlc3Q7XG4vL3JldHVybiByZXN0IHVyaVxuZnVuY3Rpb24gcmV0dXJuUmVzdFVybChwYXRoKSB7XG4gICAgcmV0dXJuIGVuY29kZVVSSShSRVNUX0FQSV9VUkwgKyBwYXRoKTtcbn1cbmV4cG9ydHMucmV0dXJuUmVzdFVybCA9IHJldHVyblJlc3RVcmw7XG4vL2NoYW5nZSBsYW5ndWFnZSBvZiBib3RoIHVybHNcbmZ1bmN0aW9uIHNldEFQSVVybChwcmVmaXgpIHtcbiAgICBBUElfVVJMID0gJ2h0dHBzOi8vJyArIHByZWZpeC50b0xvd2VyQ2FzZSgpICsgJy53aWtpcGVkaWEub3JnL3cvYXBpLnBocD8nO1xuICAgIFJFU1RfQVBJX1VSTCA9ICdodHRwczovLycgKyBwcmVmaXgudG9Mb3dlckNhc2UoKSArICcud2lraXBlZGlhLm9yZy9hcGkvcmVzdF92MS8nO1xuICAgIHJldHVybiBBUElfVVJMO1xufVxuZXhwb3J0cy5zZXRBUElVcmwgPSBzZXRBUElVcmw7XG4vL2NoYW5nZSB1c2VyIGFnZW50XG5mdW5jdGlvbiBzZXRVc2VyQWdlbnQodXNlckFnZW50KSB7XG4gICAgVVNFUl9BR0VOVCA9IHVzZXJBZ2VudDtcbn1cbmV4cG9ydHMuc2V0VXNlckFnZW50ID0gc2V0VXNlckFnZW50O1xuZXhwb3J0cy5kZWZhdWx0ID0gbWFrZVJlcXVlc3Q7XG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk1TR1MgPSB2b2lkIDA7XG5leHBvcnRzLk1TR1MgPSB7XG4gICAgUEFHRV9OT1RfU1VHR0VTVDogJ05vIHBhZ2Ugd2l0aCBnaXZlbiB0aXRsZSBzdWdnZXN0ZWQgOiAnLFxuICAgIFBBR0VfTk9UX0VYSVNUOiAnTm8gcGFnZSB3aXRoIGdpdmVuIHRpdGxlIGV4aXN0cyA6ICcsXG4gICAgSU5GT0JPWF9OT1RfRVhJU1Q6ICdJbmZvIGNhbm5vdCBiZSBwYXJzZWQgZm9yIGdpdmVuIHBhZ2UnXG59O1xuIiwgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZXRDdXJyZW50RGF5ID0gZXhwb3J0cy5nZXRDdXJyZW50TW9udGggPSBleHBvcnRzLmdldEN1cnJlbnRZZWFyID0gZXhwb3J0cy5zZXRQYWdlSWQgPSBleHBvcnRzLnNldFBhZ2VJZE9yVGl0bGVQYXJhbSA9IGV4cG9ydHMuc2V0VGl0bGVGb3JQYWdlID0gZXhwb3J0cy5pc1N0cmluZyA9IHZvaWQgMDtcbmNvbnN0IF8xID0gcmVxdWlyZShcIi5cIik7XG5jb25zdCBlcnJvcnNfMSA9IHJlcXVpcmUoXCIuL2Vycm9yc1wiKTtcbmNvbnN0IG1lc3NhZ2VzXzEgPSByZXF1aXJlKFwiLi9tZXNzYWdlc1wiKTtcbi8vY2hlY2sgaWYgaW5wdXQgaXMgc3RyaW5nXG5mdW5jdGlvbiBpc1N0cmluZyh0aXRsZSkge1xuICAgIHJldHVybiBpc05hTih0aXRsZSk7XG59XG5leHBvcnRzLmlzU3RyaW5nID0gaXNTdHJpbmc7XG4vL3NldCB0aXRsZSBmb3IgcGFnZSBpbiBjYXNlIGF1dG9TdWdnZXN0IGlzIHRydWVcbmFzeW5jIGZ1bmN0aW9uIHNldFRpdGxlRm9yUGFnZSh0aXRsZSkge1xuICAgIHtcbiAgICAgICAgY29uc3Qgc2VhcmNoUmVzdWx0ID0gYXdhaXQgXzEuZGVmYXVsdC5zZWFyY2godGl0bGUsIHsgbGltaXQ6IDEsIHN1Z2dlc3Rpb246IHRydWUgfSk7XG4gICAgICAgIGlmICghc2VhcmNoUmVzdWx0LnN1Z2dlc3Rpb24gJiYgc2VhcmNoUmVzdWx0LnJlc3VsdHMubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfMS5wYWdlRXJyb3IoYCR7bWVzc2FnZXNfMS5NU0dTLlBBR0VfTk9UX1NVR0dFU1R9JHt0aXRsZX1gKTtcbiAgICAgICAgfVxuICAgICAgICB0aXRsZSA9IHNlYXJjaFJlc3VsdC5zdWdnZXN0aW9uIHx8IHRpdGxlO1xuICAgICAgICByZXR1cm4gdGl0bGU7XG4gICAgfVxufVxuZXhwb3J0cy5zZXRUaXRsZUZvclBhZ2UgPSBzZXRUaXRsZUZvclBhZ2U7XG4vL1NldCBwYWdlIGlkIG9yIHRpdGxlIHBhcmFtIGZvciBsZWdhY3kgYXBpIHF1ZXJpZXNcbmZ1bmN0aW9uIHNldFBhZ2VJZE9yVGl0bGVQYXJhbShwYXJhbXMsIHRpdGxlKSB7XG4gICAgaWYgKGlzU3RyaW5nKHRpdGxlKSkge1xuICAgICAgICBwYXJhbXMudGl0bGVzID0gdGl0bGU7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBwYXJhbXMucGFnZWlkcyA9IHRpdGxlO1xuICAgIH1cbiAgICByZXR1cm4gcGFyYW1zO1xufVxuZXhwb3J0cy5zZXRQYWdlSWRPclRpdGxlUGFyYW0gPSBzZXRQYWdlSWRPclRpdGxlUGFyYW07XG4vL0dldCBwYWdlIGlkIGZyb20gcGFyYW1zIG9yIGZyb20gcmVzdWx0c1xuZnVuY3Rpb24gc2V0UGFnZUlkKHBhcmFtcywgcmVzdWx0cykge1xuICAgIGxldCBwYWdlSWQ7XG4gICAgaWYgKHBhcmFtcy5wYWdlSWRzKSB7XG4gICAgICAgIHBhZ2VJZCA9IHBhcmFtcy5wYWdlSWRzO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcGFnZUlkID0gT2JqZWN0LmtleXMocmVzdWx0cy5xdWVyeS5wYWdlcylbMF07XG4gICAgfVxuICAgIHJldHVybiBwYWdlSWQ7XG59XG5leHBvcnRzLnNldFBhZ2VJZCA9IHNldFBhZ2VJZDtcbi8vR2V0IGN1cnJlbnQgeWVhclxuZnVuY3Rpb24gZ2V0Q3VycmVudFllYXIoKSB7XG4gICAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKCk7XG4gICAgY29uc3QgeWVhciA9IGRhdGUuZ2V0RnVsbFllYXIoKTtcbiAgICByZXR1cm4gKHllYXIpO1xufVxuZXhwb3J0cy5nZXRDdXJyZW50WWVhciA9IGdldEN1cnJlbnRZZWFyO1xuLy9HZXQgY3VycmVudCBtb250aFxuZnVuY3Rpb24gZ2V0Q3VycmVudE1vbnRoKCkge1xuICAgIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZSgpO1xuICAgIGNvbnN0IG1vbnRoID0gZGF0ZS5nZXRNb250aCgpO1xuICAgIHJldHVybiAobW9udGggKyAxKTsgLy9qYXZhc2NyaXB0IG1vbnRocyBhcmUgaW5kZXhlZCBhdCB6ZXJvIGZvciBzb21lIHJlYXNvblxufVxuZXhwb3J0cy5nZXRDdXJyZW50TW9udGggPSBnZXRDdXJyZW50TW9udGg7XG4vL0dldCBjdXJyZW50IGRheVxuZnVuY3Rpb24gZ2V0Q3VycmVudERheSgpIHtcbiAgICBjb25zdCBkYXRlID0gbmV3IERhdGUoKTtcbiAgICBjb25zdCBkYXkgPSBkYXRlLmdldERhdGUoKTtcbiAgICByZXR1cm4gZGF5O1xufVxuZXhwb3J0cy5nZXRDdXJyZW50RGF5ID0gZ2V0Q3VycmVudERheTtcbiIsICIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIHByZXNlcnZlQ2FtZWxDYXNlKHN0cikge1xuXHRsZXQgaXNMYXN0Q2hhckxvd2VyID0gZmFsc2U7XG5cdGxldCBpc0xhc3RDaGFyVXBwZXIgPSBmYWxzZTtcblx0bGV0IGlzTGFzdExhc3RDaGFyVXBwZXIgPSBmYWxzZTtcblxuXHRmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuXHRcdGNvbnN0IGMgPSBzdHJbaV07XG5cblx0XHRpZiAoaXNMYXN0Q2hhckxvd2VyICYmIC9bYS16QS1aXS8udGVzdChjKSAmJiBjLnRvVXBwZXJDYXNlKCkgPT09IGMpIHtcblx0XHRcdHN0ciA9IHN0ci5zdWJzdHIoMCwgaSkgKyAnLScgKyBzdHIuc3Vic3RyKGkpO1xuXHRcdFx0aXNMYXN0Q2hhckxvd2VyID0gZmFsc2U7XG5cdFx0XHRpc0xhc3RMYXN0Q2hhclVwcGVyID0gaXNMYXN0Q2hhclVwcGVyO1xuXHRcdFx0aXNMYXN0Q2hhclVwcGVyID0gdHJ1ZTtcblx0XHRcdGkrKztcblx0XHR9IGVsc2UgaWYgKGlzTGFzdENoYXJVcHBlciAmJiBpc0xhc3RMYXN0Q2hhclVwcGVyICYmIC9bYS16QS1aXS8udGVzdChjKSAmJiBjLnRvTG93ZXJDYXNlKCkgPT09IGMpIHtcblx0XHRcdHN0ciA9IHN0ci5zdWJzdHIoMCwgaSAtIDEpICsgJy0nICsgc3RyLnN1YnN0cihpIC0gMSk7XG5cdFx0XHRpc0xhc3RMYXN0Q2hhclVwcGVyID0gaXNMYXN0Q2hhclVwcGVyO1xuXHRcdFx0aXNMYXN0Q2hhclVwcGVyID0gZmFsc2U7XG5cdFx0XHRpc0xhc3RDaGFyTG93ZXIgPSB0cnVlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRpc0xhc3RDaGFyTG93ZXIgPSBjLnRvTG93ZXJDYXNlKCkgPT09IGM7XG5cdFx0XHRpc0xhc3RMYXN0Q2hhclVwcGVyID0gaXNMYXN0Q2hhclVwcGVyO1xuXHRcdFx0aXNMYXN0Q2hhclVwcGVyID0gYy50b1VwcGVyQ2FzZSgpID09PSBjO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBzdHI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHN0cikge1xuXHRpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcblx0XHRzdHIgPSBBcnJheS5mcm9tKGFyZ3VtZW50cylcblx0XHRcdC5tYXAoeCA9PiB4LnRyaW0oKSlcblx0XHRcdC5maWx0ZXIoeCA9PiB4Lmxlbmd0aClcblx0XHRcdC5qb2luKCctJyk7XG5cdH0gZWxzZSB7XG5cdFx0c3RyID0gc3RyLnRyaW0oKTtcblx0fVxuXG5cdGlmIChzdHIubGVuZ3RoID09PSAwKSB7XG5cdFx0cmV0dXJuICcnO1xuXHR9XG5cblx0aWYgKHN0ci5sZW5ndGggPT09IDEpIHtcblx0XHRyZXR1cm4gc3RyLnRvTG93ZXJDYXNlKCk7XG5cdH1cblxuXHRpZiAoL15bYS16MC05XSskLy50ZXN0KHN0cikpIHtcblx0XHRyZXR1cm4gc3RyO1xuXHR9XG5cblx0Y29uc3QgaGFzVXBwZXJDYXNlID0gc3RyICE9PSBzdHIudG9Mb3dlckNhc2UoKTtcblxuXHRpZiAoaGFzVXBwZXJDYXNlKSB7XG5cdFx0c3RyID0gcHJlc2VydmVDYW1lbENhc2Uoc3RyKTtcblx0fVxuXG5cdHJldHVybiBzdHJcblx0XHQucmVwbGFjZSgvXltfLlxcLSBdKy8sICcnKVxuXHRcdC50b0xvd2VyQ2FzZSgpXG5cdFx0LnJlcGxhY2UoL1tfLlxcLSBdKyhcXHd8JCkvZywgKG0sIHAxKSA9PiBwMS50b1VwcGVyQ2FzZSgpKTtcbn07XG4iLCAiY29uc3QgZXh0cmFQcm9wZXJ0eVBhdHRlcm4gPSAvXFxuP1xccz9cXHxcXHM/XFx3KyQvO1xuY29uc3QgZW5kaW5nUGF0dGVybiA9IC9cXG5cXH1cXH0kLztcbmNvbnN0IGxpbmtzUGF0dGVybiA9IC8oKFxcJFxcdytfXFxkKylcXHMqLD9cXHMqKXsyLH0vZztcbmNvbnN0IGxpbmtTZXBhcmF0b3JQYXR0ZXJuID0gL1ssXFxzP10vZztcblxuZnVuY3Rpb24gdHJpbVdyYXBwZXJzKHN0cikge1xuICByZXR1cm4gc3RyXG4gICAgLnJlcGxhY2UoL1xcW1xcWy9nLCAnJylcbiAgICAucmVwbGFjZSgvXFxdXFxdL2csICcnKVxuICAgIC5yZXBsYWNlKC9cXHtcXHsvZywgJycpXG4gICAgLnJlcGxhY2UoL1xcfVxcfS9nLCAnJylcbiAgICAudHJpbSgpO1xufVxuXG5mdW5jdGlvbiB0cmltT3Ioc3RyKSB7XG4gIGNvbnN0IG9yUG9zaXRpb24gPSBzdHIuaW5kZXhPZignfCcpO1xuICBpZiAob3JQb3NpdGlvbiAhPT0gLTEpIHtcbiAgICByZXR1cm4gc3RyLnN1YnN0cmluZygwLCBvclBvc2l0aW9uKTtcbiAgfVxuICByZXR1cm4gc3RyO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRWYWx1ZShyYXcsIGtleSkge1xuICBpZiAoIXJhdykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgY29uc3QgY2xlYW5zZWQgPSByYXdcbiAgICAudHJpbSgpXG4gICAgLnJlcGxhY2UoL0ZpbGU6LywgJycpXG4gICAgLy8gSGF2ZSBub3QgZm91bmQgcmVhc29uIGZvciB0aGlzIGJ1dCBpdCBicmVha3MgcGFyc2luZywgc28gd2UgYXJlIGp1c3RcbiAgICAvLyByZW1vdmluZyBpdCBmb3Igbm93XG4gICAgLnJlcGxhY2UoL1xce1xce1xcZCtcXH1cXH0vZywgJycpXG4gICAgLnJlcGxhY2UoZXh0cmFQcm9wZXJ0eVBhdHRlcm4sICcnKVxuICAgIC5yZXBsYWNlKGVuZGluZ1BhdHRlcm4sICcnKTtcblxuICBpZiAoY2xlYW5zZWQgPT09ICd5JyB8fCBjbGVhbnNlZCA9PT0gJ3llcycpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmIChrZXkgPT0gJ2JpcnRoUGxhY2UnKSB7XG4gICAgcmV0dXJuIHJhdy50cmltKCk7XG4gIH1cblxuICAvLyBJcyBpdCBhIGxpc3Qgb2YgbGlua3M/P1xuICBjb25zdCBsaW5rcyA9IGNsZWFuc2VkLm1hdGNoKGxpbmtzUGF0dGVybik7XG4gIGlmIChsaW5rcykge1xuICAgIHJldHVybiBsaW5rc1swXS5zcGxpdChsaW5rU2VwYXJhdG9yUGF0dGVybikuZmlsdGVyKHRleHQgPT4gdGV4dCk7XG4gIH1cblxuICByZXR1cm4gdHJpbU9yKHRyaW1XcmFwcGVycyhjbGVhbnNlZCkpO1xufVxuIiwgImV4cG9ydCBjb25zdCBET19OT1RfUkVQTEFDRSA9IFN5bWJvbCgnRE8gTk9UIFJFUExBQ0UnKTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGF0YVR5cGUoe1xuICBnbG9iYWxQYXR0ZXJuLFxuICBwYXJzZVBhdHRlcm4sXG4gIHBhcnNlLFxuICB2YXJpYWJsZSxcbiAgbmFtZSxcbn0pIHtcbiAgcmV0dXJuIChzb3VyY2UpID0+IHtcbiAgICBjb25zdCBtYXRjaGVzID0gc291cmNlLm1hdGNoKGdsb2JhbFBhdHRlcm4pO1xuICAgIGlmICghbWF0Y2hlcykge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgW25hbWVdOiBbXSxcbiAgICAgICAgc291cmNlQWZ0ZXI6IHNvdXJjZSxcbiAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0IGluc3RhbmNlcyA9IG1hdGNoZXMubWFwKChtYXRjaCkgPT4gcGFyc2UobWF0Y2gubWF0Y2gocGFyc2VQYXR0ZXJuKSkpO1xuICAgIGNvbnN0IHNvdXJjZUFmdGVyID0gbWF0Y2hlcy5yZWR1Y2UoKG1lbW8sIG1hdGNoLCBpbmRleCkgPT4ge1xuICAgICAgaWYgKGluc3RhbmNlc1tpbmRleF0gPT09IERPX05PVF9SRVBMQUNFKSB7XG4gICAgICAgIHJldHVybiBtZW1vO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1lbW8ucmVwbGFjZShtYXRjaCwgYCQke3ZhcmlhYmxlfV8ke2luZGV4fWApO1xuICAgIH0sIHNvdXJjZSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgW25hbWVdOiBpbnN0YW5jZXMsXG4gICAgICB9LFxuICAgICAgc291cmNlQWZ0ZXIsXG4gICAgfTtcbiAgfTtcbn1cbiIsICJpbXBvcnQgZGF0YVR5cGVzIGZyb20gJy4uL2RhdGEtdHlwZXMvaW5kZXgnO1xuXG5mdW5jdGlvbiBieURhdGFIYW5kbGVyKHsgc291cmNlLCBjb250ZXh0IH0sIGhhbmRsZXIpIHtcbiAgY29uc3QgeyBkYXRhLCBzb3VyY2VBZnRlciB9ID0gaGFuZGxlcihzb3VyY2UpO1xuICByZXR1cm4ge1xuICAgIGNvbnRleHQ6IE9iamVjdC5hc3NpZ24oe30sIGNvbnRleHQsIGRhdGEpLFxuICAgIHNvdXJjZTogc291cmNlQWZ0ZXIsXG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGV4dHJhY3REYXRhKHNvdXJjZSkge1xuICByZXR1cm4gZGF0YVR5cGVzXG4gICAgLm1hcCh0eXBlID0+IHR5cGUuaGFuZGxlcilcbiAgICAucmVkdWNlKGJ5RGF0YUhhbmRsZXIsIHtcbiAgICAgIGNvbnRleHQ6IHt9LFxuICAgICAgc291cmNlLFxuICAgIH0pO1xufVxuIiwgImltcG9ydCBnZXRWYWx1ZSBmcm9tICcuL2dldFZhbHVlJztcbmltcG9ydCBjYW1lbENhc2UgZnJvbSAnY2FtZWxjYXNlJztcblxuY29uc3Qga2V5VmFsdWVHbG9iYWxQYXR0ZXJuID0gL1xcfFxccyooWy0nXFx1MDQwMC1cXHUwNEZGXFx3XFxzXSspXFxzKj1cXHMqKFtefF0rKT8vZztcbmNvbnN0IGtleVZhbHVlUGF0dGVybiA9IC9cXHxcXHMqKFstJ1xcdTA0MDAtXFx1MDRGRlxcd1xcc10rKVxccyo9XFxzKihbXnxdKyk/LztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZmluZFByb3BlcnR5TGlzdChzb3VyY2UpIHtcbiAgY29uc3Qga2V5VmFsdWVQYWlycyA9IHNvdXJjZS5tYXRjaChrZXlWYWx1ZUdsb2JhbFBhdHRlcm4pO1xuICBpZiAoIWtleVZhbHVlUGFpcnMpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgcmV0dXJuIGtleVZhbHVlUGFpcnNcbiAgICAubWFwKG1hdGNoID0+IHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGtleVZhbHVlUGF0dGVybi5leGVjKG1hdGNoKTtcbiAgICAgIGlmICghcmVzdWx0KSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgY29uc3QgWywgcmF3S2V5LCByYXdWYWx1ZV0gPSByZXN1bHQ7XG4gICAgICBjb25zdCBrZXkgPSBjYW1lbENhc2UocmF3S2V5LnRyaW0oKSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBrZXksXG4gICAgICAgIHZhbHVlOiBnZXRWYWx1ZShyYXdWYWx1ZSwga2V5KSxcbiAgICAgIH07XG4gICAgfSlcbiAgICAuZmlsdGVyKGl0ZW0gPT4gaXRlbSk7XG59XG4iLCAiaW1wb3J0IGRhdGFUeXBlcyBmcm9tICcuLi9kYXRhLXR5cGVzL2luZGV4JztcblxuZXhwb3J0IGZ1bmN0aW9uIGZpbGxWYXJpYWJsZSh2YWx1ZSwgY29udGV4dCwgeyBzaW1wbGlmeURhdGFWYWx1ZXMgfSA9IHt9KSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnKSB7XG4gICAgY29uc29sZS5sb2coXG4gICAgICBgV2FybmluZzogU29tZXRoaW5nIHdlbnQgd3JvbmcuIENvdWxkIG5vdCBmaWxsIHZhcmlhYmxlcyBpbjogKCR7dHlwZW9mIHZhbHVlfSkgJHtKU09OLnN0cmluZ2lmeShcbiAgICAgICAgdmFsdWVcbiAgICAgICl9YFxuICAgICk7XG4gICAgcmV0dXJuIHt9O1xuICB9XG4gIGNvbnN0IGRhdGFUeXBlID0gZGF0YVR5cGVzLmZpbmQoKHR5cGUpID0+IHZhbHVlLm1hdGNoKHR5cGUucGF0dGVybikpO1xuICBpZiAoZGF0YVR5cGUpIHtcbiAgICBjb25zdCBbbWF0Y2hlZCwgaW5kZXhdID0gZGF0YVR5cGUucGF0dGVybi5leGVjKHZhbHVlKTtcbiAgICBjb25zdCBkYXRhVmFsdWUgPSBjb250ZXh0W2RhdGFUeXBlLm5hbWVdW3BhcnNlSW50KGluZGV4LCAxMCldO1xuICAgIGlmICghc2ltcGxpZnlEYXRhVmFsdWVzICYmIHR5cGVvZiBkYXRhVmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gdmFsdWUucmVwbGFjZShtYXRjaGVkLCBkYXRhVmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YVZhbHVlO1xuICB9XG4gIHJldHVybiB2YWx1ZTtcbn1cblxuLy8gUmVjdXJzaXZlIHZhcmFpYmxlIGZpbGxpbmcuLi4gZXZlbiBoYW5kbGVzIGFycmF5cyBvZiB2YWx1ZXNcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZpbGxWYXJpYWJsZXModmFsdWUsIGNvbnRleHQsIG9wdGlvbnMpIHtcbiAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgaWYgKHZhbHVlIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWUubWFwKChpdGVtKSA9PiBmaWxsVmFyaWFibGVzKGl0ZW0sIGNvbnRleHQsIG9wdGlvbnMpKTtcbiAgfVxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyh2YWx1ZSkucmVkdWNlKChtZW1vLCBrZXkpID0+IHtcbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKG1lbW8sIHtcbiAgICAgICAgW2tleV06IGZpbGxWYXJpYWJsZXModmFsdWVba2V5XSwgY29udGV4dCwgb3B0aW9ucyksXG4gICAgICB9KTtcbiAgICB9LCB7fSk7XG4gICAgLy8gcmV0dXJuIHZhbHVlLm1hcChpdGVtID0+IGZpbGxWYXJpYWJsZXMoaXRlbSwgY29udGV4dCwgb3B0aW9ucykpO1xuICB9XG4gIGNvbnN0IGZpbGxlZCA9IGZpbGxWYXJpYWJsZSh2YWx1ZSwgY29udGV4dCwgb3B0aW9ucyk7XG4gIGlmIChmaWxsZWQgPT09IHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIHJldHVybiBmaWxsVmFyaWFibGVzKGZpbGxlZCwgY29udGV4dCwgb3B0aW9ucyk7XG59XG4iLCAiaW1wb3J0IGRhdGFUeXBlcyBmcm9tICcuLi9kYXRhLXR5cGVzL2luZGV4JztcbmltcG9ydCBmaW5kUHJvcGVydHlMaXN0IGZyb20gJy4vcHJvcGVydHlMaXN0JztcbmltcG9ydCBudW1iZXJQYXJzZSBmcm9tICcuL251bWJlclBhcnNlJztcbmltcG9ydCBmaWxsVmFyaWFibGVzIGZyb20gJy4vZmlsbFZhcmlhYmxlcyc7XG5cbmNvbnN0IHNtYWxsRGF0YVR5cGUgPSBkYXRhVHlwZXMuZmluZCgodHlwZSkgPT4gdHlwZS5uYW1lID09PSAnc21hbGxzJyk7XG5cbmZ1bmN0aW9uIGhhbmRsZVNtYWxsRGF0YSh2YWx1ZSwgY29udGV4dCwgeyBzaW1wbGlmeURhdGFWYWx1ZXMgfSkge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiB2YWx1ZS5tYXRjaChzbWFsbERhdGFUeXBlLnBhdHRlcm4pKSB7XG4gICAgY29uc3QgcHJpbWFyeSA9IHZhbHVlXG4gICAgICAucmVwbGFjZShzbWFsbERhdGFUeXBlLnBhdHRlcm4sICcnKVxuICAgICAgLy8gQ2xlYW5pbmcgdXAgZnJvbSBpbnNlcnRlZCBjb21tYXNcbiAgICAgIC5yZXBsYWNlKC8sLywgJycpXG4gICAgICAudHJpbSgpO1xuICAgIGNvbnN0IFssIGluZGV4XSA9IHNtYWxsRGF0YVR5cGUucGF0dGVybi5leGVjKHZhbHVlKTtcbiAgICBjb25zdCBzZWNvbmRhcnkgPSBjb250ZXh0W3NtYWxsRGF0YVR5cGUubmFtZV1bcGFyc2VJbnQoaW5kZXgsIDEwKV07XG4gICAgY29uc3QgcmVzdWx0ID0ge1xuICAgICAgcHJpbWFyeTogZ2V0VmFyaWFibGVWYWx1ZShwcmltYXJ5LCBjb250ZXh0LCB7IHNpbXBsaWZ5RGF0YVZhbHVlcyB9KSxcbiAgICAgIHNlY29uZGFyeTogZ2V0VmFyaWFibGVWYWx1ZShzZWNvbmRhcnksIGNvbnRleHQsIHsgc2ltcGxpZnlEYXRhVmFsdWVzIH0pLFxuICAgIH07XG4gICAgcmV0dXJuIHNpbXBsaWZ5RGF0YVZhbHVlcyA/IHJlc3VsdC5wcmltYXJ5IDogcmVzdWx0O1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBnZXRWYXJpYWJsZVZhbHVlKHZhbHVlLCBjb250ZXh0LCB7IHNpbXBsaWZ5RGF0YVZhbHVlcyB9ID0ge30pIHtcbiAgLy8gSGFuZGxpbmcgc21hbGwgZGF0YSBkaWZmZXJlbnRseS4uLiBJIGRvbnQgbGlrZSB0aGlzLi4uXG4gIGNvbnN0IHNtYWxsRGF0YSA9IGhhbmRsZVNtYWxsRGF0YSh2YWx1ZSwgY29udGV4dCwgeyBzaW1wbGlmeURhdGFWYWx1ZXMgfSk7XG4gIGlmIChzbWFsbERhdGEpIHtcbiAgICByZXR1cm4gc21hbGxEYXRhO1xuICB9XG4gIHJldHVybiBmaWxsVmFyaWFibGVzKHZhbHVlLCBjb250ZXh0LCB7IHNpbXBsaWZ5RGF0YVZhbHVlcyB9KTtcbn1cblxuZnVuY3Rpb24gcmVkdWNlVmFyaWFibGUoa2V5LCB2YWx1ZSwgY29udGV4dCwgb3B0aW9ucykge1xuICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbicpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgLy8gRmlyc3QgYXJyYXkgcGFzcy4uLlxuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWUubWFwKChpdGVtKSA9PiBnZXRWYXJpYWJsZVZhbHVlKGl0ZW0sIGNvbnRleHQsIG9wdGlvbnMpKTtcbiAgfVxuICBpZiAoa2V5Lm1hdGNoKC9hcmVhVG90YWwvKSB8fCBrZXkubWF0Y2goL3BvcHVsYXRpb24vKSkge1xuICAgIGxldCBmbG9hdCA9IG51bWJlclBhcnNlKHZhbHVlKTtcbiAgICBpZiAoZmxvYXQgPT09IGZhbHNlKSBmbG9hdCA9IHBhcnNlRmxvYXQodmFsdWUsIDEwKTtcbiAgICBpZiAoIWlzTmFOKGZsb2F0KSkge1xuICAgICAgcmV0dXJuIGZsb2F0O1xuICAgIH1cbiAgfVxuICBpZiAoa2V5Lm1hdGNoKC9kYXRlL2kpKSB7XG4gICAgY29uc3QgZGF0ZVZhbHVlID0gK25ldyBEYXRlKHZhbHVlKTtcbiAgICBpZiAoIWlzTmFOKGRhdGVWYWx1ZSkpIHtcbiAgICAgIHJldHVybiBuZXcgRGF0ZSh2YWx1ZSk7XG4gICAgfVxuICB9XG4gIGNvbnN0IHZhcmlhYmxlVmFsdWUgPSBnZXRWYXJpYWJsZVZhbHVlKHZhbHVlLCBjb250ZXh0LCBvcHRpb25zKTtcblxuICAvLyBTZWNvbmQgYXJyYXkgcGFzcy4gSWYgZmlyc3QgdmFyaWFibGUgd2FzIGFuIGFycmF5IG9mIHZhcmlhYmxlcy5cbiAgaWYgKEFycmF5LmlzQXJyYXkodmFyaWFibGVWYWx1ZSkpIHtcbiAgICByZXR1cm4gdmFyaWFibGVWYWx1ZS5tYXAoKGl0ZW0pID0+XG4gICAgICBnZXRWYXJpYWJsZVZhbHVlKGl0ZW0sIGNvbnRleHQsIG9wdGlvbnMpXG4gICAgKTtcbiAgfVxuICByZXR1cm4gdmFyaWFibGVWYWx1ZTtcbn1cblxuZnVuY3Rpb24gYnlWYXJpYWJsZVJlZHVjdGlvbihjb250ZXh0LCBvcHRpb25zKSB7XG4gIHJldHVybiAobWVtbywgeyBrZXksIHZhbHVlIH0pID0+IHtcbiAgICBjb25zdCByZWR1Y2VkID0gcmVkdWNlVmFyaWFibGUoa2V5LCB2YWx1ZSwgY29udGV4dCwgb3B0aW9ucyk7XG4gICAgaWYgKHJlZHVjZWQgPT09ICcnIHx8IHJlZHVjZWQgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBtZW1vO1xuICAgIH1cbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgbWVtbywge1xuICAgICAgW2tleV06IHJlZHVjZWQsXG4gICAgfSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGV4dHJhY3RQcm9wZXJ0aWVzKFxuICB7IHNvdXJjZSwgY29udGV4dCB9LFxuICB7IHNpbXBsaWZ5RGF0YVZhbHVlcyA9IHRydWUgfSA9IHt9XG4pIHtcbiAgcmV0dXJuIGZpbmRQcm9wZXJ0eUxpc3Qoc291cmNlKS5yZWR1Y2UoXG4gICAgYnlWYXJpYWJsZVJlZHVjdGlvbihjb250ZXh0LCB7IHNpbXBsaWZ5RGF0YVZhbHVlcyB9KSxcbiAgICB7fVxuICApO1xufVxuIiwgIi8vIGltcG9ydCBnZXRWYWx1ZSBmcm9tICcuL2dldFZhbHVlJztcbmltcG9ydCBjYW1lbENhc2UgZnJvbSAnY2FtZWxjYXNlJztcblxuY29uc3QgYmxhbmtOYW1lUGF0dGVybiA9IC9ibGFuayhcXGQrKT9OYW1lU2VjMi87XG5jb25zdCBibGFua0luZm9QYXR0ZXJuID0gL2JsYW5rKFxcZCspP0luZm9TZWMyLztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdHJhbnNmb3JtUHJvcGVydGllcyhwcm9wZXJ0aWVzKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhwcm9wZXJ0aWVzKVxuICAgIC5yZWR1Y2UoKHRyYW5zZm9ybWVkLCBrZXkpID0+IHtcbiAgICAgIGNvbnN0IHZhbHVlID0gcHJvcGVydGllc1trZXldO1xuICAgICAgY29uc3QgbWF0Y2ggPSBrZXkubWF0Y2goYmxhbmtOYW1lUGF0dGVybik7XG4gICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgY29uc3QgaWQgPSBtYXRjaFsxXSB8fCAnJztcbiAgICAgICAgY29uc3QgYmxhbmtOYW1lID0gcHJvcGVydGllc1tgYmxhbmske2lkfU5hbWVTZWMyYF07XG4gICAgICAgIGNvbnN0IGJsYW5rSW5mbyA9IHByb3BlcnRpZXNbYGJsYW5rJHtpZH1JbmZvU2VjMmBdO1xuICAgICAgICBpZiAodHlwZW9mIGJsYW5rTmFtZSAhPT0gJ3N0cmluZycpIHJldHVybiB0cmFuc2Zvcm1lZDtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24odHJhbnNmb3JtZWQsIHtcbiAgICAgICAgICBbY2FtZWxDYXNlKGJsYW5rTmFtZSldOiBibGFua0luZm8sXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKGtleS5tYXRjaChibGFua0luZm9QYXR0ZXJuKSkge1xuICAgICAgICByZXR1cm4gdHJhbnNmb3JtZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih0cmFuc2Zvcm1lZCwge1xuICAgICAgICBba2V5XTogdmFsdWUsXG4gICAgICB9KTtcbiAgICB9LCB7fSk7XG59XG4iLCAiZnVuY3Rpb24gZmluZE91dGVySW5kZXgoc291cmNlKSB7XG5cdGxldCBsYXN0T3BlbiA9IFtdO1xuXHRmb3IgKGxldCBpID0gMDsgaSA8IHNvdXJjZS5sZW5ndGggLSAxOyBpKyspIHtcbiAgICBjb25zdCBuZXh0VHdvID0gc291cmNlLnN1YnN0cihpLCAyKTtcbiAgICBpZiAobmV4dFR3byA9PT0gJ3t7Jykge1xuXHRcdFx0bGFzdE9wZW4ucHVzaChpKTtcblx0XHRcdC8vIE1vdmUgZm9yd2FyZCwgc28gd2UgZG8gbm90IGNvdW50IGNsb3N1cmVzIHJpZ2h0IG5leHQgdG8gZWFjaCBvdGhlclxuXHRcdFx0aSsrO1xuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuICAgIGlmIChuZXh0VHdvID09PSAnfX0nKSB7XG5cdFx0XHRjb25zdCBvcGVuQXQgPSBsYXN0T3Blbi5wb3AoKTtcblx0XHRcdGlmIChsYXN0T3Blbi5sZW5ndGggPT09IDApIHtcblx0XHRcdFx0Ly8gQWRkaW5nIDIgaGVyZSBmb3IgdGhlIGNsb3N1cmVcblx0XHRcdFx0cmV0dXJuIGkgKyAyO1xuXHRcdFx0fVxuXHRcdFx0Ly8gTW92ZSBmb3J3YXJkLCBzbyB3ZSBkbyBub3QgY291bnQgY2xvc3VyZXMgcmlnaHQgbmV4dCB0byBlYWNoIG90aGVyXG5cdFx0XHRpKys7XG5cdFx0fSAgICBcbiAgfVxufVxuXG5jb25zdCBpbmZvQm94U3RhcnRQYXR0ZXJuID0gL3t7XFx3KmJveC87XG5cbmZ1bmN0aW9uIHBhcnNlKHNvdXJjZSkge1xuXHRjb25zdCBzdGFydE1hdGNoID0gc291cmNlLm1hdGNoKGluZm9Cb3hTdGFydFBhdHRlcm4pO1xuXHRpZiAoIXN0YXJ0TWF0Y2gpIHtcblx0XHQvLyBNYXkgbm90IGhhdmUgYSBhIHByb3BlciBpbmZvYm94IHdyYXBwZXIsIGxldCdzIHVzZSB0aGUgZW50aXJlIHNvdXJjZVxuXHRcdC8vIGJ5IGRlZmF1bHRcblx0XHRyZXR1cm4geyBkYXRhOiBzb3VyY2UsIHNvdXJjZUxlZnQ6IG51bGwgfTtcblx0fVxuXHRjb25zdCBzdGFydEluZGV4ID0gc3RhcnRNYXRjaC5pbmRleDtcblx0Y29uc3Qgd2l0aFN0YXJ0ID0gc291cmNlLnN1YnN0cmluZyhzdGFydEluZGV4KTtcblx0Y29uc3Qgb3V0ZXJJbmRleCA9IGZpbmRPdXRlckluZGV4KHdpdGhTdGFydCk7XG5cdGlmICghb3V0ZXJJbmRleCkge1xuXHRcdHJldHVybiB7IGRhdGE6IHNvdXJjZSwgc291cmNlTGVmdDogbnVsbCB9O1xuXHR9XG5cdGNvbnN0IGRhdGEgPSB3aXRoU3RhcnQuc3Vic3RyaW5nKDAsIG91dGVySW5kZXgpO1xuXHRjb25zdCBzb3VyY2VMZWZ0ID0gc291cmNlLnN1YnN0cmluZyhvdXRlckluZGV4KTtcblx0Y29uc3Qgc291cmNlTGVmdEhhc01hdGNoID0gISFzb3VyY2VMZWZ0Lm1hdGNoKGluZm9Cb3hTdGFydFBhdHRlcm4pO1xuXHRyZXR1cm4ge1xuXHRcdGRhdGEsXG5cdFx0c291cmNlTGVmdDogc291cmNlTGVmdEhhc01hdGNoID8gc291cmNlTGVmdCA6IG51bGxcblx0fTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZXh0cmFjdEluZm9ib3hlcyhzb3VyY2UpIHtcbiAgbGV0IHBhcnNlZCA9IHBhcnNlKHNvdXJjZSk7XG4gIGNvbnN0IGluZm9ib3hlcyA9IFtwYXJzZWQuZGF0YV07XG4gIHdoaWxlKHBhcnNlZC5zb3VyY2VMZWZ0KSB7XG4gIFx0cGFyc2VkID0gcGFyc2UocGFyc2VkLnNvdXJjZUxlZnQpO1xuICBcdGluZm9ib3hlcy5wdXNoKHBhcnNlZC5kYXRhKTtcbiAgfVxuICByZXR1cm4gaW5mb2JveGVzO1xufVxuIiwgImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNsZWFuU291cmNlKFxuICBzb3VyY2UsXG4gIHsgcmVtb3ZlU21hbGwgPSBmYWxzZSwgcmVtb3ZlUmVmZXJlbmNlcyA9IHRydWUgfSA9IHt9XG4pIHtcbiAgaWYgKHJlbW92ZVJlZmVyZW5jZXMpIHtcbiAgICBzb3VyY2UgPSBzb3VyY2VcbiAgICAgIC5yZXBsYWNlKC88cmVmKFxcc1xcdys9W14+XSspPz4uKjxcXC9yZWY+L2csICcnKVxuICAgICAgLnJlcGxhY2UoLzxyZWYoXFxzXFx3Kz1bXj5dKyk/XFxzP1xcLz4vZywgJycpO1xuICB9XG5cbiAgaWYgKHJlbW92ZVNtYWxsKSB7XG4gICAgc291cmNlID0gc291cmNlLnJlcGxhY2UoLzxzbWFsbD4uKjxcXC9zbWFsbD4vZywgJycpO1xuICB9XG5cbiAgcmV0dXJuIChcbiAgICBzb3VyY2VcbiAgICAgIC8vIFJlbW92ZSB0aWNrc1xuICAgICAgLnJlcGxhY2UoLycnJz8vZywgJycpXG4gICAgICAucmVwbGFjZSgvXFx8ZGlzcGxheT1pbmxpbmUvZywgJycpXG4gICAgICAvLyBUaGlzIGlzIGEgbGl0dGxlIGlmZnlcbiAgICAgIC5yZXBsYWNlKC88YnJcXHM/XFwvPz4vZywgJywnKVxuICAgICAgLnJlcGxhY2UoLyZtaW51czsvZywgJy0nKVxuICAgICAgLnJlcGxhY2UoL3t7U25kYXNofX0vZywgJ+KAkycpXG4gICAgICAucmVwbGFjZSgvPHN1cD4vZywgJ14nKVxuICAgICAgLy8gUmVtb3ZlIHNob3J0ZW5lZCBmb290bm90ZSB0ZW1wbGF0ZXNcbiAgICAgIC5yZXBsYWNlKC9cXHtcXHtzZm5cXHwoW15cXH1cXH1dKylcXH1cXH0vZywgJycpXG4gICAgICAvLyBSZW1vdmUgZXhwbGFuYXRvcnkgZm9vdG5vdGVzXG4gICAgICAucmVwbGFjZSgvXFx7XFx7ZWZuXFx8KFteXFx9XFx9XSspXFx9XFx9L2csICcnKVxuICAgICAgLnJlcGxhY2UoL+KIki9nLCAnLScpXG4gICAgICAucmVwbGFjZSgvPFxcL3N1cD4vZywgJycpXG4gICAgICAvLyBSZXBsYWNlIHdyYXAgdGVtcGxhdGVzIHdpdGggaXRzIGNvbnRlbnRcbiAgICAgIC5yZXBsYWNlKC9cXHtcXHtcXHMqbm93cmFwXFxzKlxcfChbXlxcblxcfV0rKVxcfVxcfS9naSwgJyQxJylcbiAgICAgIC5yZXBsYWNlKC9cXHtcXHtcXHMqQXZvaWRcXHN3cmFwXFxzKlxcfChbXlxcblxcfV0rKVxcfVxcfS9naSwgJyQxJylcbiAgICAgIC8vIEhUTUwgY29tbWVudHNcbiAgICAgIC5yZXBsYWNlKC88IS0tKFtcXHNcXFNdKj8pLS0+L2csICcnKVxuICAgICAgLnJlcGxhY2UoLyZuYnNwOy9nLCAnICcpXG4gICAgICAucmVwbGFjZShcInwnJ1NlZSBsaXN0JydcIiwgJycpXG4gICk7XG59XG4iLCAiaW1wb3J0IGNhbWVsY2FzZSBmcm9tICdjYW1lbGNhc2UnO1xuaW1wb3J0IGV4dHJhY3REYXRhIGZyb20gJy4vZXh0cmFjdERhdGEnO1xuaW1wb3J0IGNsZWFuU291cmNlIGZyb20gJy4vY2xlYW5Tb3VyY2UnO1xuaW1wb3J0IGZpbGxWYXJpYWJsZXMsIHsgZmlsbFZhcmlhYmxlIH0gZnJvbSAnLi9maWxsVmFyaWFibGVzJztcblxuY29uc3QgdGFibGVTdGFydFBhdHRlcm4gPSAve1xcfCguKilcXG4/LztcbmNvbnN0IHRhYmxlRW5kUGF0dGVybiA9IC9cXG5cXHx9LztcbmNvbnN0IGhlYWRlcnNQYXR0ZXJuID0gLyFcXHM/KC4qKS9nO1xuY29uc3Qgcm93UGF0dGVybiA9IC9cXHwtLztcbmNvbnN0IGNlbGxTZXBhcmF0b3JQYXR0ZXJuID0gLyg/OlxcblxcfCl8KD86XFx8XFx8KS87XG5jb25zdCBsaW5rUGF0dGVybiA9IC9cXFtcXFsoW15cXF1dKylcXF1cXF0vZztcbmNvbnN0IGxpbmtOYW1lUGF0dGVybiA9IC9eLipcXHwvO1xuY29uc3QgaW5saW5lSGVhZGVyUGF0dGVybiA9ICchISc7XG5jb25zdCBhY3Rpb25QYXR0ZXJuID0gL3t7YW5jaG9yXFx8KC4qKX19L2c7XG5jb25zdCByb3dTcGFuQ291bnRQYXR0ZXJuID0gL3Jvd3NwYW49XCIoXFxkKylcIi87XG5cbmNvbnN0IHN0cmlwTGlua3MgPSAoc291cmNlKSA9PlxuICBzb3VyY2UucmVwbGFjZShsaW5rUGF0dGVybiwgKG0sIGNhcHR1cmUpID0+IHtcbiAgICBjb25zdCByZXN1bHQgPSBjYXB0dXJlLnJlcGxhY2UobGlua05hbWVQYXR0ZXJuLCAnJykudHJpbSgpO1xuICAgIHJldHVybiByZXN1bHQgfHwgY2FwdHVyZTtcbiAgfSk7XG5jb25zdCByZW1vdmVBY3Rpb25zID0gKHNvdXJjZSkgPT4gc291cmNlLnJlcGxhY2UoYWN0aW9uUGF0dGVybiwgJycpO1xuY29uc3QgdHJhbnNmb3JtQ2VsbCA9IChzb3VyY2UpID0+XG4gIHN0cmlwTGlua3MocmVtb3ZlQWN0aW9ucyhzb3VyY2UgfHwgJycpKVxuICAgIC5yZXBsYWNlKHJvd1NwYW5Db3VudFBhdHRlcm4sICcnKVxuICAgIC5yZXBsYWNlKGxpbmtOYW1lUGF0dGVybiwgJycpXG4gICAgLnRyaW0oKTtcblxuY29uc3QgdHJhbnNmb3JtQ2VsbHMgPSAocm93KSA9PlxuICByb3cuc3BsaXQoY2VsbFNlcGFyYXRvclBhdHRlcm4pLm1hcCh0cmFuc2Zvcm1DZWxsKTtcblxuY29uc3QgZmluZEluZGV4ID0gKHQsIHApID0+IHtcbiAgY29uc3QgbSA9IHQubWF0Y2gocCk7XG4gIHJldHVybiBtID8gbS5pbmRleCA6IC0xO1xufTtcblxuY29uc3QgZmluZFRhYmxlU3RhcnQgPSAoc291cmNlKSA9PiB7XG4gIGNvbnN0IG0gPSBzb3VyY2UubWF0Y2godGFibGVTdGFydFBhdHRlcm4pO1xuICByZXR1cm4gbSA/IG0uaW5kZXggKyBtWzBdLmxlbmd0aCA6IC0xO1xufTtcbmNvbnN0IGZpbmRUYWJsZUVuZCA9IChzb3VyY2UpID0+IGZpbmRJbmRleChzb3VyY2UsIHRhYmxlRW5kUGF0dGVybik7XG5cbmNvbnN0IGdldEhlYWRlcnMgPSAoc291cmNlKSA9PiB7XG4gIGNvbnN0IGhlYWRlcnMgPSBbXTtcbiAgbGV0IG1hdGNoO1xuICB3aGlsZSAoKG1hdGNoID0gaGVhZGVyc1BhdHRlcm4uZXhlYyhzb3VyY2UpKSkge1xuICAgIGhlYWRlcnMucHVzaCguLi5tYXRjaFsxXS5zcGxpdChpbmxpbmVIZWFkZXJQYXR0ZXJuKS5tYXAodHJhbnNmb3JtQ2VsbCkpO1xuICB9XG4gIHJldHVybiBoZWFkZXJzO1xufTtcblxuZnVuY3Rpb24gdHJhbnNmb3JtUm93U3Bhbihyb3dzKSB7XG4gIHJldHVybiByb3dzXG4gICAgLm1hcCh0cmFuc2Zvcm1DZWxscylcbiAgICAucmVkdWNlKChtZXJnZWQsIGNlbGxzLCBpbmRleCkgPT4ge1xuICAgICAgY29uc3QgayA9IGluZGV4ID09PSAwID8gMCA6IDE7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNlbGxzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmICghbWVyZ2VkW2kgKyBrXSkgbWVyZ2VkW2kgKyBrXSA9IHt9O1xuICAgICAgICBpZiAoY2VsbHNbaV0pIHtcbiAgICAgICAgICBtZXJnZWRbaSArIGtdW2NlbGxzW2ldXSA9IDE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBtZXJnZWQ7XG4gICAgfSwgW10pXG4gICAgLm1hcCgobykgPT4gT2JqZWN0LmtleXMobykuam9pbignLCcpKVxuICAgIC5qb2luKCcgfHwgJyk7XG59XG5cbmNvbnN0IGdldFJvd3MgPSAoc291cmNlKSA9PiB7XG4gIGNvbnN0IHJhdyA9IHNvdXJjZVxuICAgIC5zcGxpdChyb3dQYXR0ZXJuKVxuICAgIC5tYXAoKGUpID0+IGUucmVwbGFjZSgvXi4qXFxuKz9cXHwvLCAnJykudHJpbSgpKVxuICAgIC5maWx0ZXIoKGUpID0+IGUpO1xuXG4gIGNvbnN0IHJvd3MgPSBbXTtcbiAgbGV0IHNwYW5OID0gMDtcbiAgbGV0IHNwYW5Db3VudCA9IDA7XG4gIGxldCByb3dzSW5TcGFuID0gW107XG5cbiAgZm9yIChjb25zdCByb3cgb2YgcmF3KSB7XG4gICAgY29uc3QgbWF0Y2ggPSByb3cubWF0Y2gocm93U3BhbkNvdW50UGF0dGVybik7XG4gICAgaWYgKG1hdGNoKSB7XG4gICAgICBzcGFuTiA9IDA7XG4gICAgICBzcGFuQ291bnQgPSBwYXJzZUludChtYXRjaFsxXSk7XG4gICAgICByb3dzSW5TcGFuID0gW107XG4gICAgfVxuICAgIGlmIChzcGFuTiA8IHNwYW5Db3VudCkge1xuICAgICAgcm93c0luU3Bhbi5wdXNoKHJvdyk7XG4gICAgICBpZiAoKytzcGFuTiA9PT0gc3BhbkNvdW50KSB7XG4gICAgICAgIHJvd3MucHVzaCh0cmFuc2Zvcm1Sb3dTcGFuKHJvd3NJblNwYW4pKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcm93cy5wdXNoKHJvdyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJvd3M7XG59O1xuXG5jb25zdCBnZXROZXh0VGFibGUgPSAoc291cmNlLCBjb250ZXh0LCBvcHRpb25zKSA9PiB7XG4gIGxldCBsZWZ0ID0gc291cmNlO1xuICBjb25zdCBzdGFydCA9IGZpbmRUYWJsZVN0YXJ0KGxlZnQpO1xuXG4gIGlmIChzdGFydCA9PT0gLTEpIHJldHVybiBudWxsO1xuICBsZWZ0ID0gbGVmdC5zdWJzdHJpbmcoc3RhcnQpO1xuXG4gIGNvbnN0IGVuZCA9IGZpbmRUYWJsZUVuZChsZWZ0KTtcblxuICBpZiAoZW5kID09PSAtMSkgcmV0dXJuIG51bGw7XG4gIGxlZnQgPSBsZWZ0LnN1YnN0cmluZygwLCBlbmQpO1xuXG4gIGNvbnN0IHJvd3MgPSBnZXRSb3dzKGxlZnQpO1xuXG4gIGlmICghcm93cy5sZW5ndGgpIHJldHVybiBudWxsO1xuXG4gIGNvbnN0IGhlYWRlcnMgPSBnZXRIZWFkZXJzKHJvd3NbMF0pO1xuXG4gIGlmICghaGVhZGVycy5sZW5ndGgpIHJldHVybiBudWxsO1xuXG4gIGNvbnN0IGRhdGEgPSByb3dzXG4gICAgLnNsaWNlKDEpXG4gICAgLm1hcCh0cmFuc2Zvcm1DZWxscylcbiAgICAubWFwKChyb3cpID0+IHtcbiAgICAgIHJldHVybiBoZWFkZXJzLnJlZHVjZSgob2JqLCBrZXksIGluZGV4KSA9PiB7XG4gICAgICAgIG9ialtjYW1lbGNhc2UoZmlsbFZhcmlhYmxlKGtleSwgY29udGV4dCwgb3B0aW9ucykpXSA9IGZpbGxWYXJpYWJsZXMoXG4gICAgICAgICAgcm93W2luZGV4XSxcbiAgICAgICAgICBjb250ZXh0LFxuICAgICAgICAgIG9wdGlvbnNcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgIH0sIHt9KTtcbiAgICB9KTtcblxuICByZXR1cm4geyBkYXRhLCBlbmQ6IHN0YXJ0ICsgZW5kIH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoc291cmNlLCBvcHRpb25zKSB7XG4gIGNvbnN0IGNsZWFuZWRTb3VyY2UgPSBjbGVhblNvdXJjZShzb3VyY2UsIG9wdGlvbnMpO1xuICBjb25zdCBkYXRhID0gZXh0cmFjdERhdGEoY2xlYW5lZFNvdXJjZSk7XG4gIGNvbnN0IHRhYmxlcyA9IFtdO1xuICBsZXQgbGVmdCA9IGRhdGEuc291cmNlO1xuICBsZXQgcmVzdWx0ID0gbnVsbDtcbiAgd2hpbGUgKChyZXN1bHQgPSBnZXROZXh0VGFibGUobGVmdCwgZGF0YS5jb250ZXh0LCBvcHRpb25zKSkpIHtcbiAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgcmV0dXJuIHRhYmxlcztcbiAgICB9XG4gICAgdGFibGVzLnB1c2gocmVzdWx0LmRhdGEpO1xuICAgIGxlZnQgPSBsZWZ0LnN1YnN0cmluZyhyZXN1bHQuZW5kKTtcbiAgfVxuICByZXR1cm4gdGFibGVzO1xufVxuIiwgImNvbnN0IGxpbmtQYXR0ZXJuID0gL1xcW1xcWyhbXlxcXV0rKVxcXVxcXS9nO1xuY29uc3Qga21QYXR0ZXJuID0gL3t7QlNrbVxcfChbXFxkeF0rLFtcXGR4XSspXFx8KFtcXGR4XSssW1xcZHhdKyl9fS9nO1xuXG5mdW5jdGlvbiBjbGVhbih0ZXh0KSB7XG4gIHJldHVybiB0ZXh0XG4gICAgLnN1YnN0cmluZygyLCB0ZXh0Lmxlbmd0aCAtIDIpXG4gICAgLnJlcGxhY2UobGlua1BhdHRlcm4sIChtLCB4KSA9PiB4LnNwbGl0KCd8JylbMF0pXG4gICAgLnJlcGxhY2UoLycnJz8vZywgJycpO1xufVxuXG4vLyBTb3VyY2U6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1dpa2lwZWRpYTpSb3V0ZV9kaWFncmFtX3RlbXBsYXRlI3t7QlMtbWFwfX1fcm93c193aXRoX2ljb25zX2FuZF90ZXh0XG5mdW5jdGlvbiBwYXJzZVJvdyhyYXcpIHtcbiAgbGV0IGNvdW50TWF0Y2ggPSByYXdbMF0ubWF0Y2goL0JTKFxcZCkvKTtcbiAgbGV0IHR5cGUgPSByYXdbMF0uc3Vic3RyaW5nKDIpO1xuICBsZXQgY291bnQgPSAxO1xuICBsZXQgaWNvbnMgPSBbXTtcbiAgbGV0IGluZGV4ID0gMTtcbiAgaWYgKGNvdW50TWF0Y2gpIHtcbiAgICBjb3VudCA9IGNvdW50TWF0Y2hbMV07XG4gICAgdHlwZSA9IHJhd1swXS5zdWJzdHJpbmcoMyk7XG4gIH1cbiAgZm9yICg7IGluZGV4IDw9IGNvdW50OyBpbmRleCsrKSB7XG4gICAgaWNvbnMucHVzaChyYXdbaW5kZXhdKTtcbiAgfVxuICBjb25zdCBtYXJnaW4gPSByYXdbaW5kZXgrK107XG4gIGNvbnN0IHRleHQxID0gcmF3W2luZGV4KytdO1xuICBjb25zdCB0ZXh0MiA9IHJhd1tpbmRleCsrXTtcbiAgY29uc3QgY29tbWVudCA9IHJhd1tpbmRleCsrXTtcbiAgcmV0dXJuIHtcbiAgICB0eXBlLFxuICAgIG1hcmdpbixcbiAgICB0ZXh0MSxcbiAgICB0ZXh0MixcbiAgICBjb21tZW50LFxuICAgIGljb25zLFxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoc291cmNlKSB7XG4gIGNvbnN0IHJlc3VsdHMgPSBzb3VyY2UucmVwbGFjZShrbVBhdHRlcm4sICckMS8kMicpLm1hdGNoKC97e0JTKFtefX1dKyl9fS9nKTtcbiAgaWYgKHJlc3VsdHMpIHtcbiAgICByZXR1cm4gcmVzdWx0c1xuICAgICAgLm1hcCgocmVzdWx0KSA9PiBjbGVhbihyZXN1bHQpLnNwbGl0KCd8JykpXG4gICAgICAubWFwKHBhcnNlUm93KVxuICAgICAgLmZpbHRlcigoeyB0eXBlIH0pID0+IHR5cGVbMF0gIT09ICctJyk7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG4iLCAiY29uc3QgaGVhZGluZ1BhdHRlcm4gPSAvW149XT09XFxzPyhbXFx3XFxzXSspXFxzPz09L2dcbmNvbnN0IHN1YmhlYWRpbmdQYXR0ZXJuID0gLz09PShbXFx3XFxzXSspPT09L2dcbmNvbnN0IHRhYmxlU3RhcnRQYXR0ZXJuID0gL3t7bGlzdC4rc3RhcnQuKn19L2dpXG5jb25zdCB0YWJsZUVuZFBhdHRlcm4gPSAve3tsaXN0LitlbmQuKn19L2dpXG5jb25zdCByb3dQYXR0ZXJuID0gL3t7KC4qKX19L2dcbmNvbnN0IHJvd1BhdHRlcm5TaW5nbGUgPSAve3soLiopfX0vXG5cbmZ1bmN0aW9uIGdldEhlYWRpbmdzKHRleHQpIHtcblx0bGV0IG1hdGNoO1xuXHRjb25zdCBoZWFkaW5ncyA9IFtdO1xuXHR3aGlsZSAoKG1hdGNoID0gaGVhZGluZ1BhdHRlcm4uZXhlYyh0ZXh0KSkgIT09IG51bGwpIHtcblx0XHRoZWFkaW5ncy5wdXNoKHtcblx0XHRcdGhlYWRpbmc6IG1hdGNoWzFdLnRyaW0oKSxcblx0XHRcdHN0YXJ0OiBtYXRjaC5pbmRleCxcblx0XHRcdGVuZDogbWF0Y2guaW5kZXggKyBtYXRjaFswXS5sZW5ndGhcblx0XHR9KVxuXHR9XG5cdHJldHVybiBoZWFkaW5ncztcbn1cblxuZnVuY3Rpb24gZ2V0U3ViaGVhZGluZ3ModGV4dCkge1xuXHRsZXQgbWF0Y2g7XG5cdGNvbnN0IHN1YmhlYWRpbmdzID0gW107XG5cdHdoaWxlICgobWF0Y2ggPSBzdWJoZWFkaW5nUGF0dGVybi5leGVjKHRleHQpKSAhPT0gbnVsbCkge1xuXHRcdHN1YmhlYWRpbmdzLnB1c2goe1xuXHRcdFx0aGVhZGluZzogbWF0Y2hbMV0udHJpbSgpLFxuXHRcdFx0c3RhcnQ6IG1hdGNoLmluZGV4LFxuXHRcdFx0ZW5kOiBtYXRjaC5pbmRleCArIG1hdGNoWzBdLmxlbmd0aFxuXHRcdH0pXG5cdH1cblx0cmV0dXJuIHN1YmhlYWRpbmdzO1xufVxuXG5mdW5jdGlvbiBnZXRNYXRjaGVzKHRleHQsIHBhdHRlcm4pIHtcblx0bGV0IG1hdGNoO1xuXHRjb25zdCBtYXRjaGVzID0gW107XG5cdHdoaWxlICgobWF0Y2ggPSBwYXR0ZXJuLmV4ZWModGV4dCkpICE9PSBudWxsKSB7XG5cdFx0bWF0Y2hlcy5wdXNoKHtcblx0XHRcdHZhbHVlOiBtYXRjaFsxXSAmJiBtYXRjaFsxXS50cmltKCksXG5cdFx0XHRzdGFydDogbWF0Y2guaW5kZXgsXG5cdFx0XHRlbmQ6IG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoXG5cdFx0fSlcblx0fVxuXHRyZXR1cm4gbWF0Y2hlcztcbn1cblxuZnVuY3Rpb24gcGFyc2VUYWJsZURhdGEocmF3KSB7XG5cdGNvbnN0IG1hdGNoZXMgPSByYXcubWF0Y2gocm93UGF0dGVybik7XG5cdGlmICghbWF0Y2hlcykgcmV0dXJuIFtdO1xuXHRyZXR1cm4gbWF0Y2hlcy5tYXAoZWwgPT4ge1xuXHRcdGNvbnN0IFssdGV4dF0gPSBlbC5tYXRjaChyb3dQYXR0ZXJuU2luZ2xlKTtcblx0XHRjb25zdCBjb2x1bW5zID0gdGV4dC50cmltKCkuc3BsaXQoJ3wnKTtcblx0XHRyZXR1cm4gY29sdW1ucy5zbGljZSgxKTtcblx0fSk7XG59XG5cbmZ1bmN0aW9uIGdldFRhYmxlcyh0ZXh0KSB7XG5cdGNvbnN0IHRhYmxlU3RhcnRzID0gZ2V0TWF0Y2hlcyh0ZXh0LCB0YWJsZVN0YXJ0UGF0dGVybik7XG5cdGNvbnN0IHRhYmxlRW5kcyA9IGdldE1hdGNoZXModGV4dCwgdGFibGVFbmRQYXR0ZXJuKTtcblx0cmV0dXJuIHRhYmxlU3RhcnRzLm1hcCgodGFibGVTdGFydCwgaW5kZXgpID0+IHtcblx0XHRjb25zdCB0YWJsZUVuZCA9IHRhYmxlRW5kc1tpbmRleF07XG5cdFx0aWYgKCF0YWJsZUVuZCkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdbVGFibGUgUGFyc2luZ10gRmFpbGVkIHRvIHBhaXIgdGFibGUnKTtcblx0XHR9XG5cdFx0Y29uc3QgcmF3ID0gdGV4dFxuXHRcdFx0XHQuc3Vic3RyaW5nKHRhYmxlU3RhcnQuZW5kLCB0YWJsZUVuZC5zdGFydClcblx0XHRcdFx0LnRyaW0oKVxuXHRcdFx0XHQucmVwbGFjZSgvJycnL2csICcnKTtcblx0XHRyZXR1cm4ge1xuXHRcdFx0cm93czogcGFyc2VUYWJsZURhdGEocmF3KSxcblx0XHRcdHN0YXJ0OiB0YWJsZVN0YXJ0LnN0YXJ0LFxuXHRcdFx0ZW5kOiB0YWJsZUVuZC5lbmRcblx0XHR9XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBsYXN0KGxpc3QpIHtcblx0cmV0dXJuIGxpc3QubGVuZ3RoID8gbGlzdFtsaXN0Lmxlbmd0aCAtIDFdIDogdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoc291cmNlKSB7XG5cdGNvbnN0IGhlYWRpbmdzID0gZ2V0TWF0Y2hlcyhzb3VyY2UsIGhlYWRpbmdQYXR0ZXJuKTtcblx0Y29uc3Qgc3ViaGVhZGluZ3MgPSBnZXRNYXRjaGVzKHNvdXJjZSwgc3ViaGVhZGluZ1BhdHRlcm4pO1xuXHRjb25zdCB0YWJsZXMgPSBnZXRUYWJsZXMoc291cmNlKTtcblxuXHR0YWJsZXMuZm9yRWFjaCh0YWJsZSA9PiB7XG5cdFx0Y29uc3QgaGVhZGluZ3NCZWZvcmUgPSBoZWFkaW5ncy5maWx0ZXIoaGVhZGluZyA9PiB7XG5cdFx0XHRyZXR1cm4gaGVhZGluZy5lbmQgPCB0YWJsZS5zdGFydDtcblx0XHR9KS5tYXAoZSA9PiBlLnZhbHVlKVxuXHRcdHRhYmxlLmhlYWRpbmcgPSBsYXN0KGhlYWRpbmdzQmVmb3JlKTtcblx0XHRjb25zdCBzdWJoZWFkaW5nc0JlZm9yZSA9IHN1YmhlYWRpbmdzLmZpbHRlcihzdWJoZWFkaW5nID0+IHtcblx0XHRcdHJldHVybiBzdWJoZWFkaW5nLmVuZCA8IHRhYmxlLnN0YXJ0O1xuXHRcdH0pLm1hcChlID0+IGUudmFsdWUpXG5cdFx0dGFibGUuc3ViaGVhZGluZyA9IGxhc3Qoc3ViaGVhZGluZ3NCZWZvcmUpO1xuXHRcdGRlbGV0ZSB0YWJsZS5zdGFydDtcblx0XHRkZWxldGUgdGFibGUuZW5kO1xuXHR9KTtcblxuXHRyZXR1cm4gdGFibGVzO1xufSIsICJpbXBvcnQgY2FtZWxDYXNlIGZyb20gJ2NhbWVsY2FzZSc7XG5pbXBvcnQgZXh0cmFjdERhdGEgZnJvbSAnLi91dGlsL2V4dHJhY3REYXRhJztcbmltcG9ydCBleHRyYWN0UHJvcGVydGllcyBmcm9tICcuL3V0aWwvZXh0cmFjdFByb3BlcnRpZXMnO1xuaW1wb3J0IHRyYW5zZm9ybVByb3BlcnRpZXMgZnJvbSAnLi91dGlsL3RyYW5zZm9ybVByb3BlcnRpZXMnO1xuaW1wb3J0IGV4dHJhY3RJbmZvYm94ZXMgZnJvbSAnLi91dGlsL2V4dHJhY3RJbmZvYm94ZXMnO1xuaW1wb3J0IGNsZWFuU291cmNlIGZyb20gJy4vdXRpbC9jbGVhblNvdXJjZSc7XG5pbXBvcnQgcGFyc2VUYWJsZXMgZnJvbSAnLi91dGlsL3BhcnNlVGFibGVzJztcbmltcG9ydCBwYXJzZUJzVGFibGVzIGZyb20gJy4vdXRpbC9wYXJzZUJzVGFibGVzJztcbmltcG9ydCBwYXJzZUxpc3RzIGZyb20gJy4vdXRpbC9wYXJzZUxpc3RzJztcblxuLyoqXG4gKiBQYXJzZSBXaWtpIEluZm9ib3ggVGV4dFxuICogQHBhcmFtIHtzdHJpbmd9IHNvdXJjZSAtIEluZm9ib3ggc291cmNlIHRleHRcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gUGFyc2luZyBvcHRpb25zXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnNpbXBsaWZ5RGF0YVZhbHVlcz10cnVlXSAtIE9ubHkgdXNlIHByaW1hcnkgZGF0YSB2YWx1ZXNcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMucmVtb3ZlU21hbGw9ZmFsc2VdIC0gUmVtb3ZlIDxzbWFsbD4uLi48L3NtYWxsPiBjaHVua3Mgb2Ygc291cmNlIGRhdGFcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMucmVtb3ZlUmVmZXJlbmNlcz10cnVlXSAtIFJlbW92ZSA8cmVmPi4uLjwvcmVmPiBjaHVua3Mgb2Ygc291cmNlIGRhdGFcbiAqIEByZXR1cm5zIHtPYmplY3R9IFN0cnVjdHVyZWQgaW5mb3JtYXRpb24gZnJvbSBzb3VyY2UgdGV4dFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwYXJzZUluZm9ib3goc291cmNlLCBvcHRpb25zKSB7XG4gIGNvbnN0IGluZm9ib3hlcyA9IGV4dHJhY3RJbmZvYm94ZXMoc291cmNlKS5tYXAoKGluZm9ib3gpID0+IHtcbiAgICBjb25zdCBjbGVhbmVkU291cmNlID0gY2xlYW5Tb3VyY2UoaW5mb2JveCwgb3B0aW9ucyk7XG4gICAgY29uc3QgZGF0YSA9IGV4dHJhY3REYXRhKGNsZWFuZWRTb3VyY2UpO1xuICAgIGNvbnN0IHByb3BzID0gZXh0cmFjdFByb3BlcnRpZXMoZGF0YSwgb3B0aW9ucyk7XG4gICAgcmV0dXJuIHRyYW5zZm9ybVByb3BlcnRpZXMocHJvcHMpO1xuICB9KTtcblxuICBpZiAoIWluZm9ib3hlcy5sZW5ndGgpIHJldHVybiB7fTtcblxuICBjb25zdCByZXMgPSB7XG4gICAgLy8gRmlyc3QgaW5mb2JveCBzaG91bGQgYmUgdGhlIG1haW4gb25lXG4gICAgZ2VuZXJhbDogaW5mb2JveGVzLnNoaWZ0KCksXG4gIH07XG5cbiAgaW5mb2JveGVzLmZvckVhY2goKG5leHQpID0+IHtcbiAgICBjb25zdCB0eXBlID0gbmV4dC50eXBlO1xuICAgIGlmICh0eXBlKSB7XG4gICAgICByZXNbY2FtZWxDYXNlKHR5cGUpXSA9IG5leHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIE9iamVjdC5hc3NpZ24ocmVzLCB7XG4gICAgICAgIGdlbmVyYWw6IE9iamVjdC5hc3NpZ24oe30sIHJlcy5nZW5lcmFsLCBuZXh0KSxcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG5cbiAgcmVzLnRhYmxlcyA9IHBhcnNlVGFibGVzKHNvdXJjZSk7XG4gIHJlcy5ic1RhYmxlcyA9IHBhcnNlQnNUYWJsZXMoc291cmNlKTtcbiAgcmVzLmxpc3RzID0gcGFyc2VMaXN0cyhzb3VyY2UpO1xuXG4gIHJldHVybiByZXM7XG59XG4iLCAiY29uc3Qgc21hbGxHbG9iYWxQYXR0ZXJuID0gL1xce1xce3NtYWxsXFx8KFteXFx9XFx9XSspXFx9XFx9L2c7XG5jb25zdCBzbWFsbFBhdHRlcm4gPSAvc21hbGxcXHwoW15cXH1cXH1dKylcXH1cXH0vO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGdsb2JhbFBhdHRlcm46IHNtYWxsR2xvYmFsUGF0dGVybixcbiAgcGFyc2VQYXR0ZXJuOiBzbWFsbFBhdHRlcm4sXG4gIHBhcnNlOiByZXN1bHRzID0+IHtcbiAgICBjb25zdCBbLCB2YWx1ZV0gPSByZXN1bHRzO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfSxcbiAgdmFyaWFibGU6ICdTTUFMTCcsXG4gIG5hbWU6ICdzbWFsbHMnLFxufTtcbiIsICJjb25zdCBmbGFnR2xvYmFsUGF0dGVybiA9IC9cXHtcXHtmbGFnXFx8KFteXFx9XFx9XSspXFx9XFx9L2c7XG5jb25zdCBmbGFnUGF0dGVybiA9IC9mbGFnXFx8KFteXFx9XFx9XSspXFx9XFx9LztcblxuZXhwb3J0IGRlZmF1bHQge1xuICBnbG9iYWxQYXR0ZXJuOiBmbGFnR2xvYmFsUGF0dGVybixcbiAgcGFyc2VQYXR0ZXJuOiBmbGFnUGF0dGVybixcbiAgcGFyc2U6IHJlc3VsdHMgPT4ge1xuICAgIGNvbnN0IFssIHZhbHVlXSA9IHJlc3VsdHM7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9LFxuICB2YXJpYWJsZTogJ0ZMQUcnLFxuICBuYW1lOiAnZmxhZ3MnLFxufTtcbiIsICJjb25zdCBjb29yZHNHbG9iYWxQYXR0ZXJuID0gL1xce1xce2Nvb3JkXFx8KFteXFx9XFx9XSspXFx9XFx9L2c7XG5jb25zdCBjb29yZHNQYXR0ZXJuID0gL2Nvb3JkXFx8KFteXFx9XFx9XSspXFx9XFx9LztcblxuZXhwb3J0IGRlZmF1bHQge1xuICBnbG9iYWxQYXR0ZXJuOiBjb29yZHNHbG9iYWxQYXR0ZXJuLFxuICBwYXJzZVBhdHRlcm46IGNvb3Jkc1BhdHRlcm4sXG4gIHBhcnNlOiByZXN1bHRzID0+IHtcbiAgICBjb25zdCBbLCB2YWx1ZV0gPSByZXN1bHRzO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfSxcbiAgdmFyaWFibGU6ICdDT09SRCcsXG4gIG5hbWU6ICdjb29yZHMnLFxufTtcbiIsICJjb25zdCBnbG9iYWxQYXR0ZXJuID0gL1xcW1xcWyhbXlxcXVxcfF0rKVxcfD8oW15cXF1dKyk/XFxdXFxdL2c7XG5jb25zdCBwYXR0ZXJuID0gL1xcW1xcWyhbXlxcXVxcfF0rKVxcfD8oW15cXF1dKyk/XFxdXFxdLztcblxuZXhwb3J0IGRlZmF1bHQge1xuICBnbG9iYWxQYXR0ZXJuOiBnbG9iYWxQYXR0ZXJuLFxuICBwYXJzZVBhdHRlcm46IHBhdHRlcm4sXG4gIHBhcnNlOiByZXN1bHRzID0+IHtcbiAgICBjb25zdCBbLCB2YWx1ZSwgdHlwZV0gPSByZXN1bHRzO1xuICAgIHJldHVybiB2YWx1ZSB8fCB0eXBlO1xuICB9LFxuICB2YXJpYWJsZTogJ0lOU1RBTkNFJyxcbiAgbmFtZTogJ2luc3RhbmNlcycsXG59O1xuIiwgImltcG9ydCBnZXRWYWx1ZSBmcm9tICcuLi91dGlsL2dldFZhbHVlJztcblxuY29uc3QgbGlzdEl0ZW1QcmVmaXhQYXR0ZXJuID0gL15cXHxcXHM/LztcbmNvbnN0IHVuYnVsbGV0ZWRMaXN0R2xvYmFsUGF0dGVybiA9IC9cXHtcXHsoPzp1bmJ1bGxldGVkIGxpc3R8dWJsfHVidHx1Ymxpc3R8dW5idWxsZXQpXFxzP1xcfChbXlxcfVxcfV0rKVxcfVxcfS9naTtcbmNvbnN0IHVuYnVsbGV0ZWRMaXN0SXRlbVBhdHRlcm4gPSAvXFx8XFxzKihbXnx9XSspL2c7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZ2xvYmFsUGF0dGVybjogdW5idWxsZXRlZExpc3RHbG9iYWxQYXR0ZXJuLFxuICBwYXJzZVBhdHRlcm46IHVuYnVsbGV0ZWRMaXN0SXRlbVBhdHRlcm4sXG4gIHBhcnNlOiAobGlzdEl0ZW1zKSA9PiB7XG4gICAgaWYgKCFsaXN0SXRlbXMpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgcmV0dXJuIGxpc3RJdGVtc1xuICAgICAgLm1hcCgoaXRlbSkgPT4gaXRlbS5yZXBsYWNlKGxpc3RJdGVtUHJlZml4UGF0dGVybiwgJycpLnRyaW0oKSlcbiAgICAgIC5maWx0ZXIoKHZhbHVlKSA9PiB2YWx1ZSAmJiB2YWx1ZS5sZW5ndGgpO1xuICB9LFxuICB2YXJpYWJsZTogJ1VOQlVMTEVURURfTElTVCcsXG4gIG5hbWU6ICd1bmJ1bGxldGVkTGlzdHMnLFxufTtcbiIsICJjb25zdCBsaXN0SXRlbVByZWZpeFBhdHRlcm4gPSAvXlxcKlxccyovO1xuY29uc3QgcGxhaW5MaXN0R2xvYmFsUGF0dGVybiA9IC9cXG4oXFwqXFxzKlteKnxdKykrL2c7XG5jb25zdCBwbGFpbkxpc3RJdGVtUGF0dGVybiA9IC9cXCpcXHMqKFteKnxdKykvZztcblxuZXhwb3J0IGRlZmF1bHQge1xuICBnbG9iYWxQYXR0ZXJuOiBwbGFpbkxpc3RHbG9iYWxQYXR0ZXJuLFxuICBwYXJzZVBhdHRlcm46IHBsYWluTGlzdEl0ZW1QYXR0ZXJuLFxuICBwYXJzZTogbGlzdEl0ZW1zID0+IHtcbiAgICBpZiAoIWxpc3RJdGVtcykge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICByZXR1cm4gbGlzdEl0ZW1zXG4gICAgICAubWFwKGl0ZW0gPT4gaXRlbS5yZXBsYWNlKGxpc3RJdGVtUHJlZml4UGF0dGVybiwgJycpLnRyaW0oKSlcbiAgICAgIC5maWx0ZXIodmFsdWUgPT4gdmFsdWUgJiYgdmFsdWUubGVuZ3RoKTtcbiAgfSxcbiAgdmFyaWFibGU6ICdVTk1BUktFRF9MSVNUJyxcbiAgbmFtZTogJ3VubWFya2VkTGlzdHMnLFxufTtcbiIsICJpbXBvcnQgZ2V0VmFsdWUgZnJvbSAnLi4vdXRpbC9nZXRWYWx1ZSc7XG5cbmNvbnN0IGxpc3RJdGVtUHJlZml4UGF0dGVybiA9IC9eXFwqXFxzPy87XG5jb25zdCBwbGFpbkxpc3RHbG9iYWxQYXR0ZXJuID0gL1xce1xce2Y/cD9QP2w/YT9pP24/dD9cXHM/bGlzdFxccz9cXHwoW15cXH1cXH1dKylcXH1cXH0vZztcbmNvbnN0IHBsYWluTGlzdEl0ZW1QYXR0ZXJuID0gL1xcKlxccyooW14qfV0rKS9nO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGdsb2JhbFBhdHRlcm46IHBsYWluTGlzdEdsb2JhbFBhdHRlcm4sXG4gIHBhcnNlUGF0dGVybjogcGxhaW5MaXN0SXRlbVBhdHRlcm4sXG4gIHBhcnNlOiAobGlzdEl0ZW1zKSA9PiB7XG4gICAgaWYgKCFsaXN0SXRlbXMpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgIGxpc3RJdGVtc1xuICAgICAgICAubWFwKChpdGVtKSA9PiBpdGVtLnJlcGxhY2UobGlzdEl0ZW1QcmVmaXhQYXR0ZXJuLCAnJykudHJpbSgpKVxuICAgICAgICAvLyAubWFwKGdldFZhbHVlKVxuICAgICAgICAuZmlsdGVyKCh2YWx1ZSkgPT4gdmFsdWUgJiYgdmFsdWUubGVuZ3RoKVxuICAgICk7XG4gIH0sXG4gIHZhcmlhYmxlOiAnUExBSU5fTElTVCcsXG4gIG5hbWU6ICdwbGFpbkxpc3RzJyxcbn07XG4iLCAiY29uc3QgbWFycmlhZ2VHbG9iYWxQYXR0ZXJuID0gL1xce1xce01hcnJpYWdlXFx8KFteXFx9XFx9XSspXFx9XFx9L2dpO1xuY29uc3QgbWFycmlhZ2VQYXR0ZXJuID0gL01hcnJpYWdlXFx8KFtefF0rKVxcfChbXnxdKikoLiopXFx9XFx9L2k7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZ2xvYmFsUGF0dGVybjogbWFycmlhZ2VHbG9iYWxQYXR0ZXJuLFxuICBwYXJzZVBhdHRlcm46IG1hcnJpYWdlUGF0dGVybixcbiAgcGFyc2U6IChyZXN1bHRzKSA9PiB7XG4gICAgY29uc3QgWywgd2hvLCBtYXJyaWVkXSA9IHJlc3VsdHM7XG4gICAgcmV0dXJuIHtcbiAgICAgIHdobyxcbiAgICAgIG1hcnJpZWQsXG4gICAgfTtcbiAgfSxcbiAgdmFyaWFibGU6ICdNQVJSSUFHRScsXG4gIG5hbWU6ICdtYXJyaWFnZXMnLFxufTtcbiIsICJjb25zdCBuYmF5R2xvYmFsUGF0dGVybiA9IC9cXHtcXHtuYmF5XFx8KFteXFx9XFx9XSspXFx9XFx9L2dpO1xuY29uc3QgbmJheVBhdHRlcm4gPSAvbmJheVxcfChbXnxdKylcXHwoLiopXFx9XFx9L2k7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZ2xvYmFsUGF0dGVybjogbmJheUdsb2JhbFBhdHRlcm4sXG4gIHBhcnNlUGF0dGVybjogbmJheVBhdHRlcm4sXG4gIHBhcnNlOiByZXN1bHRzID0+IHtcbiAgICBjb25zdCBbLCB5ZWFyLCB0eXBlXSA9IHJlc3VsdHM7XG4gICAgcmV0dXJuIHllYXI7XG4gIH0sXG4gIHZhcmlhYmxlOiAnbmJheScsXG4gIG5hbWU6ICduYmF5Jyxcbn07XG4iLCAiY29uc3Qgb3RoZXJHbG9iYWxQYXR0ZXJuID0gL1xce1xceyhbXnxcXG5dKylcXHwoW158XFxuXSspXFx8PyhbXlxcfVxcbl0rKT9cXH1cXH0vZztcbmNvbnN0IG90aGVyUGF0dGVybiA9IC9cXHtcXHsoW158XFxuXSspXFx8KFtefFxcbl0rKVxcfD8oW15cXH1cXG5dKyk/XFx9XFx9LztcblxuZXhwb3J0IGRlZmF1bHQge1xuICBnbG9iYWxQYXR0ZXJuOiBvdGhlckdsb2JhbFBhdHRlcm4sXG4gIHBhcnNlUGF0dGVybjogb3RoZXJQYXR0ZXJuLFxuICBwYXJzZTogcmVzdWx0cyA9PiB7XG4gICAgY29uc3QgWywgbGFiZWwsIGRlc2NyaXB0b3IsIGV4dHJhXSA9IHJlc3VsdHM7XG4gICAgcmV0dXJuIGxhYmVsO1xuICB9LFxuICB2YXJpYWJsZTogJ09USEVSJyxcbiAgbmFtZTogJ290aGVycycsXG59O1xuIiwgImNvbnN0IGhsaXN0R2xvYmFsUGF0dGVybiA9IC9cXHtcXHtobGlzdFxcfChbXlxcfVxcfV0rKVxcfVxcfS9naTtcbmNvbnN0IGhsaXN0UGF0dGVybiA9IC9obGlzdFxcfCguKilcXG4/XFx9XFx9L2k7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZ2xvYmFsUGF0dGVybjogaGxpc3RHbG9iYWxQYXR0ZXJuLFxuICBwYXJzZVBhdHRlcm46IGhsaXN0UGF0dGVybixcbiAgcGFyc2U6IChyZXN1bHRzKSA9PiB7XG4gICAgaWYgKCFyZXN1bHRzKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIGxldCBbLCBlbGVtZW50c10gPSByZXN1bHRzO1xuICAgIHJldHVybiBlbGVtZW50cy5zcGxpdCgnfCcpO1xuICB9LFxuICB2YXJpYWJsZTogJ0hMSVNUJyxcbiAgbmFtZTogJ2hsaXN0cycsXG59O1xuIiwgImNvbnN0IGJpcnRoRGF0ZUdsb2JhbFBhdHRlcm4gPSAvXFx7XFx7YmlydGhcXHNkYXRlKFteXFx9XFx9XSspXFx9XFx9L2lnO1xuY29uc3QgYmlydGhEYXRlUGF0dGVybiA9IC8oXFxkKylcXHwoXFxkKylcXHwoXFxkKykvO1xuXG5jb25zdCBtaWxsaXNJblllYXIgPSAxMDAwICogNjAgKiA2MCAqIDI0ICogMzY1O1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGdsb2JhbFBhdHRlcm46IGJpcnRoRGF0ZUdsb2JhbFBhdHRlcm4sXG4gIHBhcnNlUGF0dGVybjogYmlydGhEYXRlUGF0dGVybixcbiAgcGFyc2U6IHJlc3VsdHMgPT4ge1xuICAgIGNvbnN0IFssIHllYXIsIG1vbnRoLCBkYXldID0gcmVzdWx0cztcbiAgICBjb25zdCBkYXRlID0gbmV3IERhdGUoeWVhciwgbW9udGgtMSwgZGF5KTtcbiAgICBjb25zdCBhZ2UgPSBNYXRoLmZsb29yKChEYXRlLm5vdygpIC0gK2RhdGUpIC8gbWlsbGlzSW5ZZWFyKTtcbiAgICByZXR1cm4ge1xuICAgICAgZGF0ZSxcbiAgICAgIGFnZSxcbiAgICB9O1xuICB9LFxuICB2YXJpYWJsZTogJ0JJUlRIX0RBVEUnLFxuICBuYW1lOiAnYmlydGhEYXRlcycsXG59O1xuIiwgImltcG9ydCB7IERPX05PVF9SRVBMQUNFIH0gZnJvbSAnLi9kYXRhVHlwZSdcbmNvbnN0IGxhYmVsZWREYXRlR2xvYmFsUGF0dGVybiA9IC9cXHtcXHsoW15cXG5cXH1cXH1dKylcXH1cXH0vZztcbmNvbnN0IGxhYmVsZWREYXRlUGF0dGVybiA9IC8oLiopLztcblxuZXhwb3J0IGRlZmF1bHQge1xuICBnbG9iYWxQYXR0ZXJuOiBsYWJlbGVkRGF0ZUdsb2JhbFBhdHRlcm4sXG4gIHBhcnNlUGF0dGVybjogbGFiZWxlZERhdGVQYXR0ZXJuLFxuICBwYXJzZTogcmVzdWx0cyA9PiB7XG4gICAgY29uc3QgZmlyc3RQaXBlSW5kZXggPSByZXN1bHRzWzBdLmluZGV4T2YoJ3wnKTtcbiAgICBpZiAoZmlyc3RQaXBlSW5kZXggPiAtMSkge1xuICAgICAgY29uc3Qgc3RyID0gcmVzdWx0c1swXVxuICAgICAgICAuc3Vic3RyaW5nKGZpcnN0UGlwZUluZGV4ICsgMSlcbiAgICAgICAgLnNsaWNlKDAsIC0yKVxuICAgICAgbGV0IHBvdGVudGlhbERhdGUgPSBuZXcgRGF0ZShzdHIgKyAnIEdNVCcpO1xuICAgICAgaWYgKCFpc05hTihwb3RlbnRpYWxEYXRlLmdldFRpbWUoKSkpIHtcbiAgICAgICAgcmV0dXJuIHsgZGF0ZTogcG90ZW50aWFsRGF0ZSB9O1xuICAgICAgfVxuICAgICAgcG90ZW50aWFsRGF0ZSA9IG5ldyBEYXRlKHN0ci5zcGxpdCgnfCcpLmpvaW4oJy0nKSArICcgR01UJylcbiAgICAgIGlmICghaXNOYU4ocG90ZW50aWFsRGF0ZS5nZXRUaW1lKCkpKSB7XG4gICAgICAgIHJldHVybiB7IGRhdGU6IHBvdGVudGlhbERhdGUgfTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIERPX05PVF9SRVBMQUNFO1xuICB9LFxuICB2YXJpYWJsZTogJ0xBQkVMRURfREFURScsXG4gIG5hbWU6ICdsYWJlbGVkRGF0ZXMnLFxufTtcbiIsICJjb25zdCBkZWF0aERhdGVHbG9iYWxQYXR0ZXJuID0gL1xce1xce2RlYXRoXFxzZGF0ZVxcc2FuZFxcc2FnZShbXlxcfVxcfV0rKVxcfVxcfS9pZztcbmNvbnN0IGRlYXRoRGF0ZVBhdHRlcm4gPSAvKFxcZCspXFx8KFxcZCspXFx8KFxcZCspXFx8KFxcZCspXFx8PyhcXGQrKT9cXHw/KFxcZCspPy87XG5cbmNvbnN0IG1pbGxpc0luWWVhciA9IDEwMDAgKiA2MCAqIDYwICogMjQgKiAzNjU7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZ2xvYmFsUGF0dGVybjogZGVhdGhEYXRlR2xvYmFsUGF0dGVybixcbiAgcGFyc2VQYXR0ZXJuOiBkZWF0aERhdGVQYXR0ZXJuLFxuICBwYXJzZTogcmVzdWx0cyA9PiB7XG4gICAgLy8gU29tZSBhcnRpY2xlcyBkbyBub3QgbGlzdCBiaXJ0aCBtb250aC9kYXkgc28gd2UganVzdCBlc3RpbWF0ZSB0aGUgYmlydGggZGF0ZVxuICAgIGNvbnN0IFssIGRlYXRoWWVhciwgZGVhdGhNb250aCwgZGVhdGhEYXksIGJpcnRoWWVhciwgYmlydGhNb250aCA9IDAsIGJpcnRoRGF5ID0gMF0gPSByZXN1bHRzO1xuICAgIGNvbnN0IGRlYXRoRGF0ZSA9IG5ldyBEYXRlKGRlYXRoWWVhciwgZGVhdGhNb250aC0xLCBkZWF0aERheSk7XG4gICAgY29uc3QgYmlydGhEYXRlID0gbmV3IERhdGUoYmlydGhZZWFyLCBiaXJ0aE1vbnRoLTEsIGJpcnRoRGF5KTtcbiAgICBjb25zdCBhZ2UgPSBNYXRoLmZsb29yKChOdW1iZXIoZGVhdGhEYXRlKSAtIE51bWJlcihiaXJ0aERhdGUpKSAvIG1pbGxpc0luWWVhcik7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRhdGU6IGRlYXRoRGF0ZSxcbiAgICAgIGFnZSxcbiAgICB9O1xuICB9LFxuICB2YXJpYWJsZTogJ0RFQVRIX0RBVEUnLFxuICBuYW1lOiAnZGVhdGhEYXRlcycsXG59O1xuIiwgImNvbnN0IFVSTEdsb2JhbFBhdHRlcm4gPSAvXFx7XFx7VVJMXFx8KFteXFx9XFx9XSspXFx9XFx9L2c7XG5jb25zdCBVUkxQYXR0ZXJuID0gL1VSTFxcfChbXlxcfVxcfV0rKVxcfVxcfS87XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZ2xvYmFsUGF0dGVybjogVVJMR2xvYmFsUGF0dGVybixcbiAgcGFyc2VQYXR0ZXJuOiBVUkxQYXR0ZXJuLFxuICBwYXJzZTogcmVzdWx0cyA9PiB7XG4gICAgY29uc3QgWywgdmFsdWVdID0gcmVzdWx0cztcbiAgICByZXR1cm4gdmFsdWU7XG4gIH0sXG4gIHZhcmlhYmxlOiAnVVJMJyxcbiAgbmFtZTogJ3VybHMnLFxufTtcbiIsICJjb25zdCB3ZWJzaXRlR2xvYmFsUGF0dGVybiA9IC9cXFsoaHR0cHM/KTpcXC9cXC8oKD86d3d3XFwuKT9bLWEtekEtWjAtOUA6JS5fXFwrfiM9XXsyLDI1Nn1cXC5bYS16XXsyLDZ9KVxcYihbLWEtekEtWjAtOUA6JV9cXCsufiM/Ji8vPV0qKVxccysoW1xcd1xcc10rKVxcXS9nO1xuY29uc3Qgd2Vic2l0ZVBhdHRlcm4gPSAvXFxbKGh0dHBzPyk6XFwvXFwvKCg/Ond3d1xcLik/Wy1hLXpBLVowLTlAOiUuX1xcK34jPV17MiwyNTZ9XFwuW2Etel17Miw2fSlcXGIoWy1hLXpBLVowLTlAOiVfXFwrLn4jPyYvLz1dKilcXHMrKFtcXHdcXHNdKylcXF0vO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGdsb2JhbFBhdHRlcm46IHdlYnNpdGVHbG9iYWxQYXR0ZXJuLFxuICBwYXJzZVBhdHRlcm46IHdlYnNpdGVQYXR0ZXJuLFxuICBwYXJzZTogcmVzdWx0cyA9PiB7XG4gICAgY29uc3QgWywgcHJvdG9jb2wsIGhvc3RuYW1lLCBwYXRoLCB0aXRsZV0gPSByZXN1bHRzO1xuICAgIHJldHVybiB7XG4gICAgICBwcm90b2NvbCxcbiAgICAgIGhvc3RuYW1lLFxuICAgICAgcGF0aCxcbiAgICAgIHRpdGxlLFxuICAgICAgdXJsOiBgJHtwcm90b2NvbH06Ly8ke2hvc3RuYW1lfSR7cGF0aH1gXG4gICAgfTtcbiAgfSxcbiAgdmFyaWFibGU6ICdXRUJTSVRFJyxcbiAgbmFtZTogJ3dlYnNpdGVzJyxcbn07XG4iLCAiY29uc3QgZ2xvYmFsUGF0dGVybiA9IC9cXHtcXHtFeHRyYVtefX1dK1xcfVxcfS9naTtcbmNvbnN0IHBhcnNlUGF0dGVybiA9IC9cXHxcXHM/KFxcdyspXFxzKz1cXHMrKC4rKS9nO1xuY29uc3QgcHJvcFBhdHRlcm4gPSAvXFx8XFxzPyhcXHcrKVxccys9XFxzKyguKykvO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGdsb2JhbFBhdHRlcm4sXG4gIHBhcnNlUGF0dGVybixcbiAgcGFyc2U6IChvYmopID0+IHtcbiAgICBjb25zdCBlID0gb2JqLnJlZHVjZSgobWVtbywgaSkgPT4ge1xuICAgICAgY29uc3QgWywga2V5LCB2YWx1ZV0gPSBpLm1hdGNoKHByb3BQYXR0ZXJuKTtcbiAgICAgIG1lbW9ba2V5XSA9IHZhbHVlO1xuICAgICAgcmV0dXJuIG1lbW87XG4gICAgfSwge30pO1xuICAgIHJldHVybiBlO1xuICB9LFxuICB2YXJpYWJsZTogJ0VYVFJBJyxcbiAgbmFtZTogJ2V4dHJhJyxcbn07XG4iLCAiY29uc3QgY29udmVydEdsb2JhbFBhdHRlcm4gPSAvXFx7XFx7Y29udmVydFxcfChbXFxkXFwuXSspXFx8KFxcdyspL2c7XG5jb25zdCBjb252ZXJ0UGF0dGVybiA9IC9cXHtcXHtjb252ZXJ0XFx8KFtcXGRcXC5dKylcXHwoXFx3KykvO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGdsb2JhbFBhdHRlcm46IGNvbnZlcnRHbG9iYWxQYXR0ZXJuLFxuICBwYXJzZVBhdHRlcm46IGNvbnZlcnRQYXR0ZXJuLFxuICBwYXJzZTogcmVzdWx0cyA9PiB7XG4gICAgY29uc3QgWywgbnVtLCB1bml0XSA9IHJlc3VsdHM7XG4gICAgcmV0dXJuIGAke251bX0gJHt1bml0fWA7XG4gIH0sXG4gIHZhcmlhYmxlOiAnQ09OVkVSVCcsXG4gIG5hbWU6ICdjb252ZXJ0cycsXG59O1xuIiwgImNvbnN0IGZpbG1EYXRlc1BhdHRlcm4gPSAvXFx7XFx7ZmlsbVxcc2RhdGUoW15cXH1cXH1dKylcXH1cXH0vZ2k7XG5jb25zdCBmaWxtRGF0ZVBhdHRlcm5HbG9iYWwgPSAvKFxcZCspXFx8PyhcXGQrKVxcfD8oXFxkKylcXHw/KFteXFx8XFx9XSopXFx8PyhyZWZcXGQrPShbXlxcfFxcfV0qKSk/L2c7XG5jb25zdCBmaWxtRGF0ZVBhdHRlcm4gPSAvKFxcZCspXFx8PyhcXGQrKVxcfD8oXFxkKylcXHw/KFteXFx8XFx9XSopXFx8PyhyZWZcXGQrPShbXlxcfFxcfV0qKSk/LztcblxuLy8gRm9ybWF0IGRvY3VtZW50ZWQgaGVyZTpcbi8vIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1RlbXBsYXRlOkZpbG1fZGF0ZS9kb2Ncbi8vIFRhcmdldDpcbi8vIFllYXIgcmVxdWlyZWQsIG1vbnRoIGRheSBldGMuIG9wdGlvbmFsLi4uXG4vLyB7e0ZpbG0gZGF0ZXx5ZWFyMXxtb250aDF8ZGF5MXxsb2NhdGlvbjF8cmVmMT08cmVmIG5hbWU9XCJ4eHh4eFwiIC8+fHllYXIyfG1vbnRoMnxkYXkyfGxvY2F0aW9uMnxyZWYyPTxyZWYgbmFtZT1cInl5eXlcIiAvPn19XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZ2xvYmFsUGF0dGVybjogZmlsbURhdGVzUGF0dGVybixcbiAgcGFyc2VQYXR0ZXJuOiBmaWxtRGF0ZVBhdHRlcm5HbG9iYWwsXG4gIHBhcnNlOiAocmVzdWx0cykgPT4ge1xuICAgIHJldHVybiByZXN1bHRzLm1hcCgocmVzdWx0KSA9PiB7XG4gICAgICBjb25zdCBbXywgeWVhciwgbW9udGgsIGRheSwgbG9jYXRpb24sIF9yZWYsIHJlZl0gPSByZXN1bHQubWF0Y2goXG4gICAgICAgIGZpbG1EYXRlUGF0dGVyblxuICAgICAgKTtcbiAgICAgIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZSh5ZWFyLCBtb250aCAmJiBtb250aCAtIDEsIGRheSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBkYXRlLFxuICAgICAgICBsb2NhdGlvbixcbiAgICAgICAgcmVmLFxuICAgICAgfTtcbiAgICB9KTtcbiAgfSxcbiAgdmFyaWFibGU6ICdGSUxNX0RBVEVTJyxcbiAgbmFtZTogJ2ZpbG1EYXRlcycsXG59O1xuIiwgImNvbnN0IG90aGVyR2xvYmFsUGF0dGVybiA9IC88cmVmKFxcc1xcdys9W14+XSspPz4oLiopPFxcL3JlZj4vZztcbmNvbnN0IG90aGVyUGF0dGVybiA9IC88cmVmKFxcc1xcdys9W14+XSspPz4oLiopPFxcL3JlZj4vO1xuXG5jb25zdCBhdHRyaWJ1dGVHbG9iYWxQYXR0ZXJuID0gLyhcXHcrKT0oW1wiXFx3XSspL2c7XG5jb25zdCBhdHRyaWJ1dGVQYXR0ZXJuID0gLyhcXHcrKT0oW1wiXFx3XSspLztcblxuZXhwb3J0IGRlZmF1bHQge1xuICBnbG9iYWxQYXR0ZXJuOiBvdGhlckdsb2JhbFBhdHRlcm4sXG4gIHBhcnNlUGF0dGVybjogb3RoZXJQYXR0ZXJuLFxuICBwYXJzZTogKHJlc3VsdHMpID0+IHtcbiAgICBjb25zdCBbXywgYXR0cmlidXRlc1NvdXJjZSwgY29udGVudHNdID0gcmVzdWx0cztcbiAgICBjb25zdCBhdHRyaWJ1dGVzID0gKFxuICAgICAgKGF0dHJpYnV0ZXNTb3VyY2UgfHwgJycpLm1hdGNoKGF0dHJpYnV0ZUdsb2JhbFBhdHRlcm4pIHx8IFtdXG4gICAgKS5yZWR1Y2UoKG1lbW8sIGF0dHIpID0+IHtcbiAgICAgIGlmIChhdHRyKSB7XG4gICAgICAgIGNvbnN0IFtfLCBrZXksIHZhbHVlXSA9IGF0dHIubWF0Y2goYXR0cmlidXRlUGF0dGVybik7XG4gICAgICAgIG1lbW9ba2V5XSA9IHZhbHVlLnJlcGxhY2UoL1wiL2csICcnKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBtZW1vO1xuICAgIH0sIHt9KTtcbiAgICByZXR1cm4geyBhdHRyaWJ1dGVzLCBjb250ZW50cyB9O1xuICB9LFxuICB2YXJpYWJsZTogJ1JFRicsXG4gIG5hbWU6ICdyZWZzJyxcbn07XG4iLCAiY29uc3Qgb3RoZXJHbG9iYWxQYXR0ZXJuID0gLzxyZWYoXFxzXFx3Kz1bXj5dKyk/XFwvPi9nO1xuY29uc3Qgb3RoZXJQYXR0ZXJuID0gLzxyZWYoXFxzXFx3Kz1bXj5dKyk/XFwvPi87XG5cbmNvbnN0IGF0dHJpYnV0ZUdsb2JhbFBhdHRlcm4gPSAvKFxcdyspPShbXCJcXHddKykvZztcbmNvbnN0IGF0dHJpYnV0ZVBhdHRlcm4gPSAvKFxcdyspPShbXCJcXHddKykvO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGdsb2JhbFBhdHRlcm46IG90aGVyR2xvYmFsUGF0dGVybixcbiAgcGFyc2VQYXR0ZXJuOiBvdGhlclBhdHRlcm4sXG4gIHBhcnNlOiAocmVzdWx0cykgPT4ge1xuICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSByZXN1bHRzWzFdXG4gICAgICAubWF0Y2goYXR0cmlidXRlR2xvYmFsUGF0dGVybilcbiAgICAgIC5yZWR1Y2UoKG1lbW8sIGF0dHIpID0+IHtcbiAgICAgICAgY29uc3QgW18sIGtleSwgdmFsdWVdID0gYXR0ci5tYXRjaChhdHRyaWJ1dGVQYXR0ZXJuKTtcbiAgICAgICAgbWVtb1trZXldID0gdmFsdWUucmVwbGFjZSgvXCIvZywgJycpO1xuICAgICAgICByZXR1cm4gbWVtbztcbiAgICAgIH0sIHt9KTtcbiAgICByZXR1cm4geyBhdHRyaWJ1dGVzIH07XG4gIH0sXG4gIHZhcmlhYmxlOiAnUkVGJyxcbiAgbmFtZTogJ3JlZnMnLFxufTtcbiIsICJjb25zdCBnbG9iYWxQYXR0ZXJuID0gL1xce1xce2Zvcm1hdG51bTpcXGQrXFx9XFx9L2dpO1xuY29uc3QgcGFyc2VQYXR0ZXJuID0gL1xce1xce2Zvcm1hdG51bTooXFxkKylcXH1cXH0vO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGdsb2JhbFBhdHRlcm4sXG4gIHBhcnNlUGF0dGVybixcbiAgcGFyc2U6IChyZXN1bHRzKSA9PiB7XG4gICAgY29uc3QgWywgdmFsdWVdID0gcmVzdWx0cztcbiAgICByZXR1cm4gcGFyc2VGbG9hdCh2YWx1ZSk7XG4gIH0sXG4gIHZhcmlhYmxlOiAnRk9STUFUX05VTScsXG4gIG5hbWU6ICdmb3JtYXROdW0nLFxufTtcbiIsICJpbXBvcnQgc21hbGwgZnJvbSAnLi9zbWFsbCc7XG5pbXBvcnQgZmxhZyBmcm9tICcuL2ZsYWcnO1xuaW1wb3J0IGNvb3JkcyBmcm9tICcuL2Nvb3Jkcyc7XG5pbXBvcnQgaW5zdGFuY2VzIGZyb20gJy4vaW5zdGFuY2VzJztcbmltcG9ydCB1bmJ1bGxldGVkTGlzdHMgZnJvbSAnLi91bmJ1bGxldGVkTGlzdHMnO1xuaW1wb3J0IHVubWFya2VkTGlzdHMgZnJvbSAnLi91bm1hcmtlZExpc3RzJztcbmltcG9ydCBwbGFpbkxpc3RzIGZyb20gJy4vcGxhaW5MaXN0cyc7XG5pbXBvcnQgbWFycmlhZ2VzIGZyb20gJy4vbWFycmlhZ2VzJztcbmltcG9ydCBuYmF5IGZyb20gJy4vbmJheSc7XG5pbXBvcnQgb3RoZXIgZnJvbSAnLi9vdGhlcic7XG5pbXBvcnQgaGxpc3QgZnJvbSAnLi9obGlzdCc7XG5pbXBvcnQgYmlydGhEYXRlcyBmcm9tICcuL2JpcnRoRGF0ZXMnO1xuaW1wb3J0IGxhYmVsZWREYXRlcyBmcm9tICcuL2xhYmVsZWREYXRlcyc7XG5pbXBvcnQgZGVhdGhEYXRlcyBmcm9tICcuL2RlYXRoRGF0ZXMnO1xuaW1wb3J0IHVybCBmcm9tICcuL3VybCc7XG5pbXBvcnQgd2Vic2l0ZSBmcm9tICcuL3dlYnNpdGUnO1xuaW1wb3J0IGV4dHJhIGZyb20gJy4vZXh0cmEnO1xuaW1wb3J0IGNvbnZlcnQgZnJvbSAnLi9jb252ZXJ0JztcbmltcG9ydCBjcmVhdGVEYXRhVHlwZUhhbmRsZXIgZnJvbSAnLi9kYXRhVHlwZSc7XG5pbXBvcnQgZmlsbURhdGVzIGZyb20gJy4vZmlsbURhdGVzJztcbmltcG9ydCByZWYxIGZyb20gJy4vcmVmMSc7XG5pbXBvcnQgcmVmMiBmcm9tICcuL3JlZjInO1xuaW1wb3J0IGZvcm1hdE51bSBmcm9tICcuL2Zvcm1hdE51bSc7XG5cbmNvbnN0IGRhdGFUeXBlcyA9IFtcbiAgLy8gT3JkZXIgaXMgdmVyeSBpbXBvcnRhbnQgaGVyZS4uLlxuICBpbnN0YW5jZXMsXG4gIHJlZjEsXG4gIHJlZjIsXG4gIHNtYWxsLFxuICBmb3JtYXROdW0sXG4gIGZsYWcsXG4gIGNvb3JkcyxcbiAgbWFycmlhZ2VzLFxuICBiaXJ0aERhdGVzLFxuICBsYWJlbGVkRGF0ZXMsXG4gIGRlYXRoRGF0ZXMsXG4gIHVuYnVsbGV0ZWRMaXN0cyxcbiAgd2Vic2l0ZSxcbiAgaGxpc3QsXG4gIHVybCxcbiAgY29udmVydCxcbiAgbmJheSxcbiAgZmlsbURhdGVzLFxuICAvLyBvdGhlciBuZWVkcyB0byBhbHdheXMgYmUgYWZ0ZXIgc3BlY2lmaWMgZGF0YSBkeXBlc1xuICBvdGhlcixcbiAgZXh0cmEsXG4gIC8vIExpc3RzIHNob3VsZCBiZSBsYXN0XG4gIHBsYWluTGlzdHMsXG4gIHVubWFya2VkTGlzdHMsXG5dO1xuXG5leHBvcnQgZGVmYXVsdCBkYXRhVHlwZXMubWFwKCh0eXBlKSA9PiB7XG4gIHJldHVybiB7XG4gICAgaGFuZGxlcjogY3JlYXRlRGF0YVR5cGVIYW5kbGVyKHR5cGUpLFxuICAgIG5hbWU6IHR5cGUubmFtZSxcbiAgICBwYXR0ZXJuOiBuZXcgUmVnRXhwKGBcXFxcJCR7dHlwZS52YXJpYWJsZX1fKFxcXFxkKylgKSxcbiAgfTtcbn0pO1xuIiwgIlxuLyoqXG4gKiBHaXZlbiBhIHN0cmluZyBtZWFudCB0byBjb250YWluIGEgbnVtYmVyLCB0cmllcyB0byBmaW5kIG91dFxuICogdGhlIG51bWJlciBjb25zaWRlcmluZyBjb21tYSBvciBwb2ludCBzZXBhcmF0b3JzXG4gKiBAcGFyYW0gIHtTdHJpbmd9IG51bWJlclxuICogQHJldHVybiB7TnVtYmVyfSB3aXRoIHRoZSBwYXJzZWQgbnVtYmVyLCBmYWxzZSwgaWYgdGhlIHBhcnNpbmcgaXNcbiAqICAgICAgICAgICAgICAgICAgbm90IHBvc3NpYmxlXG4gKi9cbmV4cG9ydCBkZWZhdWx0IChudW1iZXIpID0+IHtcblxuICBpZiAodHlwZW9mIG51bWJlciAhPT0gJ3N0cmluZycpIHJldHVybiBmYWxzZVxuXG4gIG51bWJlciA9IG51bWJlci50cmltKCkucmVwbGFjZSgvIC9nLCAnJylcblxuICAvLyBGaW5kIG91dCBpZiBjb21tYXMgYXJlIHVzZWQgYXMgdGhvdXNhbmQgb3IgZGVjaW1hbCBzZXBhcmF0b3JzLlxuICAvLyBJZiB0aGUgc3RyaW5nIGhhcyBib3RoLCBhbmQgY29tbWFzIGFyZSBmaXJzdCwgdGhlbiBjb21tYXMgYXJlXG4gIC8vIHRob3VzYW5kIHNlcGFyYXRvcnMgKGVuZ2xpc2ggc3R5bGUpXG4gIGlmIChudW1iZXIubWF0Y2goLywvKSAmJiBudW1iZXIubWF0Y2goL1xcLi8pKSB7XG4gICAgaWYgKG51bWJlci5pbmRleE9mKCcsJykgPCBudW1iZXIuaW5kZXhPZignLicpKSB7XG4gICAgICByZXR1cm4gcGFyc2VFbmdsaXNoKG51bWJlcilcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHBhcnNlU3BhbmlzaChudW1iZXIpXG4gICAgfVxuICB9XG5cbiAgaWYgKG51bWJlci5tYXRjaCgvLC8pICYmICFudW1iZXIubWF0Y2goL1xcLi8pKSB7XG4gICAgaWYgKG51bWJlci5tYXRjaCgvLC9nKS5sZW5ndGggPiAxKSB7XG5cbiAgICAgIC8vIElmIHRoZXJlIGlzIG1vcmUgdGhhbiBvbmUsIHRoZW4gaXQncyBhIHRob3VzYW5kIHNlcGFyYXRvclxuICAgICAgcmV0dXJuIHBhcnNlRW5nbGlzaChudW1iZXIpXG4gICAgfSBlbHNlIHtcblxuICAgICAgLy8gSWYgaXQncyBmb2xsd2VkIGJ5IDMgZGlnaXRzLCBpdCdzIHByb2FibHkgYSB0aG91c2FuZCBzZXBhcmF0b3JcbiAgICAgIGlmIChudW1iZXIubWF0Y2goLyxbMC05XXszfSgkfF5bMC05XSkvKSkge1xuICAgICAgICByZXR1cm4gcGFyc2VFbmdsaXNoKG51bWJlcilcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBwYXJzZVNwYW5pc2gobnVtYmVyKVxuICAgICAgfVxuXG4gICAgfVxuICB9XG5cbiAgaWYgKCFudW1iZXIubWF0Y2goLywvKSAmJiBudW1iZXIubWF0Y2goL1xcLi8pKSB7XG4gICAgaWYgKG51bWJlci5tYXRjaCgvXFwuL2cpLmxlbmd0aCA+IDEpIHtcblxuICAgICAgLy8gSWYgdGhlcmUgaXMgbW9yZSB0aGFuIG9uZSwgdGhlbiBpdCdzIGEgdGhvdXNhbmQgc2VwYXJhdG9yXG4gICAgICByZXR1cm4gcGFyc2VTcGFuaXNoKG51bWJlcilcbiAgICB9IGVsc2Uge1xuXG4gICAgICAvLyBJZiBpdCdzIGZvbGx3ZWQgYnkgMyBkaWdpdHMsIGl0J3MgcHJvYWJseSBhIHRob3VzYW5kIHNlcGFyYXRvclxuICAgICAgaWYgKG51bWJlci5tYXRjaCgvXFwuWzAtOV17M30oJHxeWzAtOV0pLykpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlU3BhbmlzaChudW1iZXIpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gcGFyc2VFbmdsaXNoKG51bWJlcilcbiAgICAgIH1cblxuICAgIH1cbiAgfVxuXG4gIC8vIElmIGl0IGxvb2tzIHRoZSBzYW1lIGFzIG51bWJlciBvciBzdHJpbmcsIGp1c3QgY2FzdCBpdFxuICBpZiAoKCtudW1iZXIpLnRvU3RyaW5nKCkgPT09IG51bWJlcikgcmV0dXJuICtudW1iZXJcblxuICByZXR1cm4gZmFsc2Vcbn1cblxuY29uc3QgcGFyc2VFbmdsaXNoID0gKHN0cikgPT4ge1xuICByZXR1cm4gK3N0ci5yZXBsYWNlKC8sL2csICcnKVxufVxuXG5jb25zdCBwYXJzZVNwYW5pc2ggPSAoc3RyKSA9PiB7XG4gIHJldHVybiArc3RyLnJlcGxhY2UoL1xcLi9nLCAnJykucmVwbGFjZSgvLC9nLCAnLicpXG59XG5cbiIsICJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY2l0YXRpb24gPSBleHBvcnRzLnBkZiA9IGV4cG9ydHMubW9iaWxlSHRtbCA9IGV4cG9ydHMubWVkaWEgPSBleHBvcnRzLnJlbGF0ZWQgPSBleHBvcnRzLnN1bW1hcnkgPSBleHBvcnRzLnJhd0luZm8gPSBleHBvcnRzLnRhYmxlcyA9IGV4cG9ydHMuaW5mb2JveCA9IGV4cG9ydHMubGFuZ0xpbmtzID0gZXhwb3J0cy5jb29yZGluYXRlcyA9IGV4cG9ydHMucmVmZXJlbmNlcyA9IGV4cG9ydHMubGlua3MgPSBleHBvcnRzLmNhdGVnb3JpZXMgPSBleHBvcnRzLmNvbnRlbnQgPSBleHBvcnRzLmh0bWwgPSBleHBvcnRzLmludHJvID0gZXhwb3J0cy5pbWFnZXMgPSBleHBvcnRzLlBhZ2UgPSB2b2lkIDA7XG5jb25zdCBlcnJvcnNfMSA9IHJlcXVpcmUoXCIuL2Vycm9yc1wiKTtcbmNvbnN0IHJlcXVlc3RfMSA9IHJlcXVpcmUoXCIuL3JlcXVlc3RcIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG5jb25zdCBtZXNzYWdlc18xID0gcmVxdWlyZShcIi4vbWVzc2FnZXNcIik7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXZhci1yZXF1aXJlc1xuY29uc3QgaW5mb2JveFBhcnNlciA9IHJlcXVpcmUoJ2luZm9ib3gtcGFyc2VyJyk7XG5jbGFzcyBQYWdlIHtcbiAgICBjb25zdHJ1Y3RvcihyZXNwb25zZSkge1xuICAgICAgICAvKipcbiAgICAgICAgICogUmV0dXJucyB0aGUgaW50cm8gcHJlc2VudCBpbiBhIHdpa2kgcGFnZVxuICAgICAgICAgKlxuICAgICAgICAgKiBAcmVtYXJrc1xuICAgICAgICAgKiBUaGlzIG1ldGhvZCBpcyBwYXJ0IG9mIHRoZSB7QGxpbmsgUGFnZSB8IFBhZ2UgfS5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHRpdGxlIC0gVGhlIHRpdGxlIG9yIHBhZ2UgSWQgb2YgdGhlIHBhZ2VcbiAgICAgICAgICogQHBhcmFtIHJlZGlyZWN0IC0gV2hldGhlciB0byByZWRpcmVjdCBpbiBjYXNlIG9mIDMwMlxuICAgICAgICAgKiBAcmV0dXJucyBUaGUgaW50cm8gc3RyaW5nXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmludHJvID0gYXN5bmMgKHBhZ2VPcHRpb25zKSA9PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5faW50cm8pIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCAoMCwgZXhwb3J0cy5pbnRybykodGhpcy5wYWdlaWQudG9TdHJpbmcoKSwgcGFnZU9wdGlvbnMgPT09IG51bGwgfHwgcGFnZU9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBhZ2VPcHRpb25zLnJlZGlyZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faW50cm8gPSByZXNwb25zZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2ludHJvO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLmludHJvRXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogUmV0dXJucyB0aGUgaW1hZ2VzIHByZXNlbnQgaW4gYSB3aWtpIHBhZ2VcbiAgICAgICAgICpcbiAgICAgICAgICogQHJlbWFya3NcbiAgICAgICAgICogVGhpcyBtZXRob2QgaXMgcGFydCBvZiB0aGUge0BsaW5rIFBhZ2UgfCBQYWdlIH0uXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB0aXRsZSAtIFRoZSB0aXRsZSBvciBwYWdlIElkIG9mIHRoZSBwYWdlXG4gICAgICAgICAqIEBwYXJhbSBsaXN0T3B0aW9ucyAtIHtAbGluayBsaXN0T3B0aW9ucyB8IGxpc3RPcHRpb25zIH1cbiAgICAgICAgICogQHJldHVybnMgYW4gYXJyYXkgb2YgaW1hZ2VSZXN1bHQge0BsaW5rIGltYWdlUmVzdWx0IHwgaW1hZ2VSZXN1bHQgfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5pbWFnZXMgPSBhc3luYyAobGlzdE9wdGlvbnMpID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9pbWFnZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgKDAsIGV4cG9ydHMuaW1hZ2VzKSh0aGlzLnBhZ2VpZC50b1N0cmluZygpLCBsaXN0T3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2ltYWdlcyA9IHJlc3VsdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2ltYWdlcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfMS5pbWFnZUVycm9yKGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJldHVybnMgdGhlIHN1bW1hcnkgb2YgdGhlIHBhZ2VcbiAgICAgICAgICpcbiAgICAgICAgICogQHJlbWFya3NcbiAgICAgICAgICogVGhpcyBtZXRob2QgaXMgcGFydCBvZiB0aGUge0BsaW5rIFBhZ2UgfCBQYWdlIH0uXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB0aXRsZSAtIFRoZSB0aXRsZSBvciBwYWdlIElkIG9mIHRoZSBwYWdlXG4gICAgICAgICAqIEBwYXJhbSByZWRpcmVjdCAtIFdoZXRoZXIgdG8gcmVkaXJlY3QgaW4gY2FzZSBvZiAzMDJcbiAgICAgICAgICogQHJldHVybnMgVGhlIHN1bW1hcnkgb2YgdGhlIHBhZ2UgYXMge0BsaW5rIHdpa2lTdW1tYXJ5IHwgd2lraVN1bW1hcnl9XG4gICAgICAgICAqXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnN1bW1hcnkgPSBhc3luYyAocGFnZU9wdGlvbnMpID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9zdW1tYXJ5KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0ICgwLCBleHBvcnRzLnN1bW1hcnkpKHRoaXMudGl0bGUsIHBhZ2VPcHRpb25zID09PSBudWxsIHx8IHBhZ2VPcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwYWdlT3B0aW9ucy5yZWRpcmVjdCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3N1bW1hcnkgPSByZXN1bHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9zdW1tYXJ5O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLnN1bW1hcnlFcnJvcihlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXR1cm5zIHRoZSBodG1sIGNvbnRlbnQgb2YgYSBwYWdlXG4gICAgICAgICAqXG4gICAgICAgICAqIEByZW1hcmtzXG4gICAgICAgICAqIFRoaXMgbWV0aG9kIGlzIHBhcnQgb2YgdGhlIHtAbGluayBQYWdlIHwgUGFnZSB9LlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0gdGl0bGUgLSBUaGUgdGl0bGUgb3IgcGFnZSBJZCBvZiB0aGUgcGFnZVxuICAgICAgICAgKiBAcGFyYW0gcmVkaXJlY3QgLSBXaGV0aGVyIHRvIHJlZGlyZWN0IGluIGNhc2Ugb2YgMzAyXG4gICAgICAgICAqIEByZXR1cm5zIFRoZSBodG1sIGNvbnRlbnQgYXMgc3RyaW5nXG4gICAgICAgICAqXG4gICAgICAgICAqIEBiZXRhXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmh0bWwgPSBhc3luYyAocGFnZU9wdGlvbnMpID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9odG1sKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0ICgwLCBleHBvcnRzLmh0bWwpKHRoaXMucGFnZWlkLnRvU3RyaW5nKCksIHBhZ2VPcHRpb25zID09PSBudWxsIHx8IHBhZ2VPcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwYWdlT3B0aW9ucy5yZWRpcmVjdCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2h0bWwgPSByZXN1bHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9odG1sO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLmh0bWxFcnJvcihlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXR1cm5zIHRoZSBwbGFpbiB0ZXh0IGNvbnRlbnQgb2YgYSBwYWdlIGFuZCBzZXRzIHBhcmVudCBJZCBhbmQgcmV2IElkXG4gICAgICAgICAqXG4gICAgICAgICAqIEByZW1hcmtzXG4gICAgICAgICAqIFRoaXMgbWV0aG9kIGlzIHBhcnQgb2YgdGhlIHtAbGluayBQYWdlIHwgUGFnZSB9LlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0gdGl0bGUgLSBUaGUgdGl0bGUgb3IgcGFnZSBJZCBvZiB0aGUgcGFnZVxuICAgICAgICAgKiBAcGFyYW0gcmVkaXJlY3QgLSBXaGV0aGVyIHRvIHJlZGlyZWN0IGluIGNhc2Ugb2YgMzAyXG4gICAgICAgICAqIEByZXR1cm5zIFRoZSBwbGFpbiB0ZXh0IGFzIHN0cmluZyBhbmQgdGhlIHBhcmVudCBhbmQgcmV2aXNpb24gaWRzXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmNvbnRlbnQgPSBhc3luYyAocGFnZU9wdGlvbnMpID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9jb250ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0ICgwLCBleHBvcnRzLmNvbnRlbnQpKHRoaXMucGFnZWlkLnRvU3RyaW5nKCksIHBhZ2VPcHRpb25zID09PSBudWxsIHx8IHBhZ2VPcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwYWdlT3B0aW9ucy5yZWRpcmVjdCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGFyZW50aWQgPSByZXN1bHQuaWRzLnBhcmVudElkO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJldmlkID0gcmVzdWx0Lmlkcy5yZXZJZDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY29udGVudCA9IHJlc3VsdC5yZXN1bHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9jb250ZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLmNvbnRlbnRFcnJvcihlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXR1cm5zIHRoZSBjZXRlZ29yaWVzIHByZXNlbnQgaW4gcGFnZVxuICAgICAgICAgKlxuICAgICAgICAgKiBAcmVtYXJrc1xuICAgICAgICAgKiBUaGlzIG1ldGhvZCBpcyBwYXJ0IG9mIHRoZSB7QGxpbmsgUGFnZSB8IFBhZ2UgfS5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHRpdGxlIC0gVGhlIHRpdGxlIG9yIHBhZ2UgSWQgb2YgdGhlIHBhZ2VcbiAgICAgICAgICogQHBhcmFtIGxpc3RPcHRpb25zIC0ge0BsaW5rIGxpc3RPcHRpb25zIHwgbGlzdE9wdGlvbnMgfVxuICAgICAgICAgKiBAcmV0dXJucyBUaGUgY2F0ZWdvcmllcyBhcyBhbiBhcnJheSBvZiBzdHJpbmdcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuY2F0ZWdvcmllcyA9IGFzeW5jIChsaXN0T3B0aW9ucykgPT4ge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX2NhdGVnb3JpZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgKDAsIGV4cG9ydHMuY2F0ZWdvcmllcykodGhpcy5wYWdlaWQudG9TdHJpbmcoKSwgbGlzdE9wdGlvbnMpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jYXRlZ29yaWVzID0gcmVzdWx0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fY2F0ZWdvcmllcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfMS5jYXRlZ29yaWVzRXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogUmV0dXJucyB0aGUgbGlua3MgcHJlc2VudCBpbiBwYWdlXG4gICAgICAgICAqXG4gICAgICAgICAqIEByZW1hcmtzXG4gICAgICAgICAqIFRoaXMgbWV0aG9kIGlzIHBhcnQgb2YgdGhlIHtAbGluayBQYWdlIHwgUGFnZSB9LlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0gdGl0bGUgLSBUaGUgdGl0bGUgb3IgcGFnZSBJZCBvZiB0aGUgcGFnZVxuICAgICAgICAgKiBAcGFyYW0gbGlzdE9wdGlvbnMgLSB7QGxpbmsgbGlzdE9wdGlvbnMgfCBsaXN0T3B0aW9ucyB9XG4gICAgICAgICAqIEByZXR1cm5zIFRoZSBsaW5rcyBhcyBhbiBhcnJheSBvZiBzdHJpbmdcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMubGlua3MgPSBhc3luYyAobGlzdE9wdGlvbnMpID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9saW5rcykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCAoMCwgZXhwb3J0cy5saW5rcykodGhpcy5wYWdlaWQudG9TdHJpbmcoKSwgbGlzdE9wdGlvbnMpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9saW5rcyA9IHJlc3VsdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2xpbmtzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLmxpbmtzRXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogUmV0dXJucyB0aGUgcmVmZXJlbmNlcyBvZiBleHRlcm5hbCBsaW5rcyBwcmVzZW50IGluIHBhZ2VcbiAgICAgICAgICpcbiAgICAgICAgICogQHJlbWFya3NcbiAgICAgICAgICogVGhpcyBtZXRob2QgaXMgcGFydCBvZiB0aGUge0BsaW5rIFBhZ2UgfCBQYWdlIH0uXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB0aXRsZSAtIFRoZSB0aXRsZSBvciBwYWdlIElkIG9mIHRoZSBwYWdlXG4gICAgICAgICAqIEBwYXJhbSBsaXN0T3B0aW9ucyAtIHtAbGluayBsaXN0T3B0aW9ucyB8IGxpc3RPcHRpb25zIH1cbiAgICAgICAgICogQHJldHVybnMgVGhlIHJlZmVyZW5jZXMgYXMgYW4gYXJyYXkgb2Ygc3RyaW5nXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnJlZmVyZW5jZXMgPSBhc3luYyAobGlzdE9wdGlvbnMpID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9yZWZlcmVuY2VzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0ICgwLCBleHBvcnRzLnJlZmVyZW5jZXMpKHRoaXMucGFnZWlkLnRvU3RyaW5nKCksIGxpc3RPcHRpb25zKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVmZXJlbmNlcyA9IHJlc3VsdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3JlZmVyZW5jZXM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEubGlua3NFcnJvcihlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXR1cm5zIHRoZSBjb29yZGluYXRlcyBvZiBhIHBhZ2VcbiAgICAgICAgICpcbiAgICAgICAgICogQHJlbWFya3NcbiAgICAgICAgICogVGhpcyBtZXRob2QgaXMgcGFydCBvZiB0aGUge0BsaW5rIFBhZ2UgfCBQYWdlIH0uXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB0aXRsZSAtIFRoZSB0aXRsZSBvciBwYWdlIElkIG9mIHRoZSBwYWdlXG4gICAgICAgICAqIEBwYXJhbSByZWRpcmVjdCAtIFdoZXRoZXIgdG8gcmVkaXJlY3QgaW4gY2FzZSBvZiAzMDJcbiAgICAgICAgICogQHJldHVybnMgVGhlIGNvb3JkaW5hdGVzIGFzIHtAbGluayBjb29yZGluYXRlc1Jlc3VsdCB8IGNvb3JkaW5hdGVzUmVzdWx0fVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5jb29yZGluYXRlcyA9IGFzeW5jIChwYWdlT3B0aW9ucykgPT4ge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX2Nvb3JkaW5hdGVzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0ICgwLCBleHBvcnRzLmNvb3JkaW5hdGVzKSh0aGlzLnBhZ2VpZC50b1N0cmluZygpLCBwYWdlT3B0aW9ucyA9PT0gbnVsbCB8fCBwYWdlT3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGFnZU9wdGlvbnMucmVkaXJlY3QpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jb29yZGluYXRlcyA9IHJlc3VsdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2Nvb3JkaW5hdGVzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLmNvb3JkaW5hdGVzRXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogUmV0dXJucyB0aGUgbGFuZ3VhZ2UgbGlua3MgcHJlc2VudCBpbiB0aGUgcGFnZVxuICAgICAgICAgKlxuICAgICAgICAgKiBAcmVtYXJrc1xuICAgICAgICAgKiBUaGlzIG1ldGhvZCBpcyBwYXJ0IG9mIHRoZSB7QGxpbmsgUGFnZSB8IFBhZ2UgfS5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHRpdGxlIC0gVGhlIHRpdGxlIG9yIHBhZ2UgSWQgb2YgdGhlIHBhZ2VcbiAgICAgICAgICogQHBhcmFtIGxpc3RPcHRpb25zIC0ge0BsaW5rIGxpc3RPcHRpb25zIHwgbGlzdE9wdGlvbnMgfVxuICAgICAgICAgKiBAcmV0dXJucyBUaGUgbGlua3MgYXMgYW4gYXJyYXkgb2Yge0BsaW5rIGxhbmdMaW5rc1Jlc3VsdCB8IGxhbmdMaW5rc1Jlc3VsdCB9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmxhbmdMaW5rcyA9IGFzeW5jIChsaXN0T3B0aW9ucykgPT4ge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX2xhbmdMaW5rcykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCAoMCwgZXhwb3J0cy5sYW5nTGlua3MpKHRoaXMucGFnZWlkLnRvU3RyaW5nKCksIGxpc3RPcHRpb25zKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbGFuZ0xpbmtzID0gcmVzdWx0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fbGFuZ0xpbmtzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLmxpbmtzRXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogUmV0dXJucyB0aGUgaW5mb2JveCBjb250ZW50IG9mIHBhZ2UgaWYgcHJlc2VudFxuICAgICAgICAgKlxuICAgICAgICAgKiBAcmVtYXJrc1xuICAgICAgICAgKiBUaGlzIG1ldGhvZCBpcyBwYXJ0IG9mIHRoZSB7QGxpbmsgUGFnZSB8IFBhZ2UgfS5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHRpdGxlIC0gVGhlIHRpdGxlIG9yIHBhZ2UgSWQgb2YgdGhlIHBhZ2VcbiAgICAgICAgICogQHBhcmFtIHJlZGlyZWN0IC0gV2hldGhlciB0byByZWRpcmVjdCBpbiBjYXNlIG9mIDMwMlxuICAgICAgICAgKiBAcmV0dXJucyBUaGUgaW5mbyBhcyBKU09OIG9iamVjdFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5pbmZvYm94ID0gYXN5bmMgKHBhZ2VPcHRpb25zKSA9PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5faW5mb2JveCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCAoMCwgZXhwb3J0cy5pbmZvYm94KSh0aGlzLnBhZ2VpZC50b1N0cmluZygpLCBwYWdlT3B0aW9ucyA9PT0gbnVsbCB8fCBwYWdlT3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGFnZU9wdGlvbnMucmVkaXJlY3QpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9pbmZvYm94ID0gcmVzdWx0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5faW5mb2JveDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfMS5pbmZvYm94RXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogUmV0dXJucyB0aGUgdGFibGUgY29udGVudCBvZiBwYWdlIGlmIHByZXNlbnRcbiAgICAgICAgICpcbiAgICAgICAgICogQHJlbWFya3NcbiAgICAgICAgICogVGhpcyBtZXRob2QgaXMgcGFydCBvZiB0aGUge0BsaW5rIFBhZ2UgfCBQYWdlIH0uXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB0aXRsZSAtIFRoZSB0aXRsZSBvciBwYWdlIElkIG9mIHRoZSBwYWdlXG4gICAgICAgICAqIEBwYXJhbSByZWRpcmVjdCAtIFdoZXRoZXIgdG8gcmVkaXJlY3QgaW4gY2FzZSBvZiAzMDJcbiAgICAgICAgICogQHJldHVybnMgVGhlIHRhYmxlcyBhcyBhcnJheXMgb2YgSlNPTiBvYmplY3RzXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnRhYmxlcyA9IGFzeW5jIChwYWdlT3B0aW9ucykgPT4ge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX3RhYmxlcykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCAoMCwgZXhwb3J0cy50YWJsZXMpKHRoaXMucGFnZWlkLnRvU3RyaW5nKCksIHBhZ2VPcHRpb25zID09PSBudWxsIHx8IHBhZ2VPcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwYWdlT3B0aW9ucy5yZWRpcmVjdCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3RhYmxlcyA9IHJlc3VsdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3RhYmxlcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfMS5pbmZvYm94RXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogUmV0dXJucyBzdW1tYXJpZXMgZm9yIDIwIHBhZ2VzIHJlbGF0ZWQgdG8gdGhlIGdpdmVuIHBhZ2UuIFN1bW1hcmllcyBpbmNsdWRlIHBhZ2UgdGl0bGUsIG5hbWVzcGFjZVxuICAgICAgICAgKiBhbmQgaWQgYWxvbmcgd2l0aCBzaG9ydCB0ZXh0IGRlc2NyaXB0aW9uIG9mIHRoZSBwYWdlIGFuZCBhIHRodW1ibmFpbC5cbiAgICAgICAgICpcbiAgICAgICAgICogQHJlbWFya3NcbiAgICAgICAgICogVGhpcyBtZXRob2QgaXMgcGFydCBvZiB0aGUge0BsaW5rIFBhZ2UgfCBQYWdlIH0uXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB0aXRsZSAtIFRoZSB0aXRsZSBvciBwYWdlIElkIG9mIHRoZSBwYWdlXG4gICAgICAgICAqIEBwYXJhbSByZWRpcmVjdCAtIFdoZXRoZXIgdG8gcmVkaXJlY3QgaW4gY2FzZSBvZiAzMDJcbiAgICAgICAgICogQHJldHVybnMgVGhlIHJlbGF0ZWQgcGFnZXMgYW5kIHN1bW1hcnkgYXMgYW4gYXJyYXkgb2Yge0BsaW5rIHdpa2lTdW1tYXJ5IHwgd2lraVN1bW1hcnl9XG4gICAgICAgICAqXG4gICAgICAgICAqIEBleHBlcmltZW50YWxcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucmVsYXRlZCA9IGFzeW5jIChwYWdlT3B0aW9ucykgPT4ge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX3JlbGF0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgKDAsIGV4cG9ydHMucmVsYXRlZCkodGhpcy50aXRsZSwgcGFnZU9wdGlvbnMgPT09IG51bGwgfHwgcGFnZU9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBhZ2VPcHRpb25zLnJlZGlyZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVsYXRlZCA9IHJlc3VsdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3JlbGF0ZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEucmVsYXRlZEVycm9yKGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldHMgdGhlIGxpc3Qgb2YgbWVkaWEgaXRlbXMgKGltYWdlcywgYXVkaW8sIGFuZCB2aWRlbykgaW4gdGhlXG4gICAgICAgICAqIG9yZGVyIGluIHdoaWNoIHRoZXkgYXBwZWFyIG9uIGEgZ2l2ZW4gd2lraSBwYWdlLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcmVtYXJrc1xuICAgICAgICAgKiBDYWxsZWQgaW4gcGFnZSBvYmplY3QgYW5kIGFsc28gdGhyb3VnaCBpbmRleFxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0gdGl0bGUgLSBUaGUgdGl0bGUgb3IgcGFnZSBJZCBvZiB0aGUgcGFnZVxuICAgICAgICAgKiBAcGFyYW0gcmVkaXJlY3QgLSBXaGV0aGVyIHRvIHJlZGlyZWN0IGluIGNhc2Ugb2YgMzAyXG4gICAgICAgICAqIEByZXR1cm5zIFRoZSByZWxhdGVkIHBhZ2VzIGFuZCBzdW1tYXJ5IGFzIGFuIGFycmF5IG9mIHtAbGluayB3aWtpTWVkaWFSZXN1bHQgfCB3aWtpTWVkaWFSZXN1bHR9XG4gICAgICAgICAqXG4gICAgICAgICAqIEBleHBlcmltZW50YWxcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMubWVkaWEgPSBhc3luYyAocGFnZU9wdGlvbnMpID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9tZWRpYSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCAoMCwgZXhwb3J0cy5tZWRpYSkodGhpcy50aXRsZSwgcGFnZU9wdGlvbnMgPT09IG51bGwgfHwgcGFnZU9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBhZ2VPcHRpb25zLnJlZGlyZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbWVkaWEgPSByZXN1bHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9tZWRpYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfMS5tZWRpYUVycm9yKGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICogUmV0dXJucyBtb2JpbGUtb3B0aW1pc2VkIEhUTUwgb2YgYSBwYWdlXG4gICAgICAgICpcbiAgICAgICAgKiBAcGFyYW0gdGl0bGUgLSBUaGUgdGl0bGUgb2YgdGhlIHBhZ2UgdG8gcXVlcnlcbiAgICAgICAgKiBAcGFyYW0gcmVkaXJlY3QgLSBXaGV0aGVyIHRvIHJlZGlyZWN0IGluIGNhc2Ugb2YgMzAyXG4gICAgICAgICogQHJldHVybnMgUmV0dXJucyBIVE1MIHN0cmluZ1xuICAgICAgICAqL1xuICAgICAgICB0aGlzLm1vYmlsZUh0bWwgPSBhc3luYyAocGFnZU9wdGlvbnMpID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9tb2JpbGVIdG1sKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0ICgwLCBleHBvcnRzLm1vYmlsZUh0bWwpKHRoaXMudGl0bGUsIHBhZ2VPcHRpb25zID09PSBudWxsIHx8IHBhZ2VPcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwYWdlT3B0aW9ucy5yZWRpcmVjdCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX21vYmlsZUh0bWwgPSByZXN1bHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb2JpbGVIdG1sO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLmh0bWxFcnJvcihlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXR1cm5zIHBkZiBvZiBhIGdpdmVuIHBhZ2VcbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHBkZk9wdGlvbnMgLSB7QGxpbmsgcGRmT3B0aW9ucyB8IHBkZk9wdGlvbnMgfVxuICAgICAgICAgKiBAcmV0dXJucyBSZXR1cm5zIHBhdGggc3RyaW5nXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnBkZiA9IGFzeW5jIChwZGZPcHRpb25zKSA9PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0ICgwLCBleHBvcnRzLnBkZikodGhpcy50aXRsZSwgcGRmT3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfMS5wZGZFcnJvcihlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMucGFnZWlkID0gcmVzcG9uc2UucGFnZWlkO1xuICAgICAgICB0aGlzLm5zID0gcmVzcG9uc2UubnM7XG4gICAgICAgIHRoaXMudGl0bGUgPSByZXNwb25zZS50aXRsZTtcbiAgICAgICAgdGhpcy5jb250ZW50bW9kZWwgPSByZXNwb25zZS5jb250ZW50bW9kZWw7XG4gICAgICAgIHRoaXMucGFnZWxhbmd1YWdlID0gcmVzcG9uc2UucGFnZWxhbmd1YWdlO1xuICAgICAgICB0aGlzLnBhZ2VsYW5ndWFnZWRpciA9IHJlc3BvbnNlLnBhZ2VsYW5ndWFnZWRpcjtcbiAgICAgICAgdGhpcy50b3VjaGVkID0gcmVzcG9uc2UudG91Y2hlZDtcbiAgICAgICAgdGhpcy5sYXN0cmV2aWQgPSByZXNwb25zZS5sYXN0cmV2aWQ7XG4gICAgICAgIHRoaXMubGVuZ3RoID0gcmVzcG9uc2UubGVuZ3RoO1xuICAgICAgICB0aGlzLmZ1bGx1cmwgPSByZXNwb25zZS5mdWxsdXJsO1xuICAgICAgICB0aGlzLmVkaXR1cmwgPSByZXNwb25zZS5lZGl0dXJsO1xuICAgICAgICB0aGlzLmNhbm9uaWNhbHVybCA9IHJlc3BvbnNlLmNhbm9uaWNhbHVybDtcbiAgICB9XG4gICAgYXN5bmMgcnVuTWV0aG9kKGZ1bmN0aW9uTmFtZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZXZhbChgdGhpcy4ke2Z1bmN0aW9uTmFtZX0oKWApO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfMS5wcmVsb2FkRXJyb3IoZXJyb3IpO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5QYWdlID0gUGFnZTtcbi8qKlxuICogUmV0dXJucyB0aGUgaW1hZ2VzIHByZXNlbnQgaW4gYSB3aWtpIHBhZ2VcbiAqXG4gKiBAcmVtYXJrc1xuICogQ2FsbGVkIGluIHBhZ2Ugb2JqZWN0IGFuZCBhbHNvIHRocm91Z2ggd2lraSBkZWZhdWx0IG9iamVjdFxuICpcbiAqIEBwYXJhbSB0aXRsZSAtIFRoZSB0aXRsZSBvciBwYWdlIElkIG9mIHRoZSBwYWdlXG4gKiBAcGFyYW0gbGlzdE9wdGlvbnMgLSB7QGxpbmsgbGlzdE9wdGlvbnMgfCBsaXN0T3B0aW9ucyB9XG4gKiBAcmV0dXJucyBhbiBhcnJheSBvZiBpbWFnZVJlc3VsdCB7QGxpbmsgaW1hZ2VSZXN1bHQgfCBpbWFnZVJlc3VsdCB9XG4gKi9cbmNvbnN0IGltYWdlcyA9IGFzeW5jICh0aXRsZSwgbGlzdE9wdGlvbnMpID0+IHtcbiAgICB0cnkge1xuICAgICAgICBsZXQgaW1hZ2VPcHRpb25zID0ge1xuICAgICAgICAgICAgZ2VuZXJhdG9yOiAnaW1hZ2VzJyxcbiAgICAgICAgICAgIGdpbWxpbWl0OiAobGlzdE9wdGlvbnMgPT09IG51bGwgfHwgbGlzdE9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGxpc3RPcHRpb25zLmxpbWl0KSB8fCA1LFxuICAgICAgICAgICAgcHJvcDogJ2ltYWdlaW5mbycsXG4gICAgICAgICAgICBpaXByb3A6ICd1cmwnXG4gICAgICAgIH07XG4gICAgICAgIGltYWdlT3B0aW9ucyA9ICgwLCB1dGlsc18xLnNldFBhZ2VJZE9yVGl0bGVQYXJhbSkoaW1hZ2VPcHRpb25zLCB0aXRsZSk7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgKDAsIHJlcXVlc3RfMS5kZWZhdWx0KShpbWFnZU9wdGlvbnMsIGxpc3RPcHRpb25zID09PSBudWxsIHx8IGxpc3RPcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBsaXN0T3B0aW9ucy5yZWRpcmVjdCk7XG4gICAgICAgIGNvbnN0IGltYWdlcyA9IFtdO1xuICAgICAgICBjb25zdCBpbWFnZUtleXMgPSBPYmplY3Qua2V5cyhyZXNwb25zZS5xdWVyeS5wYWdlcyk7XG4gICAgICAgIGZvciAoY29uc3QgaW1hZ2Ugb2YgaW1hZ2VLZXlzKSB7XG4gICAgICAgICAgICBjb25zdCBpbWFnZUluZm8gPSByZXNwb25zZS5xdWVyeS5wYWdlc1tpbWFnZV07XG4gICAgICAgICAgICBpbWFnZUluZm8udXJsID0gaW1hZ2VJbmZvLmltYWdlaW5mb1swXS51cmw7XG4gICAgICAgICAgICBpbWFnZXMucHVzaChpbWFnZUluZm8pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpbWFnZXM7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuaW1hZ2VFcnJvcihlcnJvcik7XG4gICAgfVxufTtcbmV4cG9ydHMuaW1hZ2VzID0gaW1hZ2VzO1xuLyoqXG4gKiBSZXR1cm5zIHRoZSBpbnRybyBwcmVzZW50IGluIGEgd2lraSBwYWdlXG4gKlxuICogQHJlbWFya3NcbiAqIENhbGxlZCBpbiBwYWdlIG9iamVjdCBhbmQgYWxzbyB0aHJvdWdoIHdpa2kgZGVmYXVsdCBvYmplY3RcbiAqXG4gKiBAcGFyYW0gdGl0bGUgLSBUaGUgdGl0bGUgb3IgcGFnZSBJZCBvZiB0aGUgcGFnZVxuICogQHBhcmFtIHJlZGlyZWN0IC0gV2hldGhlciB0byByZWRpcmVjdCBpbiBjYXNlIG9mIDMwMlxuICogQHJldHVybnMgVGhlIGludHJvIHN0cmluZ1xuICovXG5jb25zdCBpbnRybyA9IGFzeW5jICh0aXRsZSwgcmVkaXJlY3QgPSB0cnVlKSA9PiB7XG4gICAgdmFyIF9hO1xuICAgIHRyeSB7XG4gICAgICAgIGxldCBpbnRyb09wdGlvbnMgPSB7XG4gICAgICAgICAgICBwcm9wOiAnZXh0cmFjdHMnLFxuICAgICAgICAgICAgZXhwbGFpbnRleHQ6ICcnLFxuICAgICAgICAgICAgZXhpbnRybzogJycsXG4gICAgICAgIH07XG4gICAgICAgIGludHJvT3B0aW9ucyA9ICgwLCB1dGlsc18xLnNldFBhZ2VJZE9yVGl0bGVQYXJhbSkoaW50cm9PcHRpb25zLCB0aXRsZSk7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgKDAsIHJlcXVlc3RfMS5kZWZhdWx0KShpbnRyb09wdGlvbnMsIHJlZGlyZWN0KTtcbiAgICAgICAgY29uc3QgcGFnZUlkID0gKDAsIHV0aWxzXzEuc2V0UGFnZUlkKShpbnRyb09wdGlvbnMsIHJlc3BvbnNlKTtcbiAgICAgICAgcmV0dXJuIChfYSA9IHJlc3BvbnNlID09PSBudWxsIHx8IHJlc3BvbnNlID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXNwb25zZS5xdWVyeSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnBhZ2VzW3BhZ2VJZF0uZXh0cmFjdDtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfMS5pbnRyb0Vycm9yKGVycm9yKTtcbiAgICB9XG59O1xuZXhwb3J0cy5pbnRybyA9IGludHJvO1xuLyoqXG4gKiBSZXR1cm5zIHRoZSBodG1sIGNvbnRlbnQgb2YgYSBwYWdlXG4gKlxuICogQHJlbWFya3NcbiAqIENhbGxlZCBpbiBwYWdlIG9iamVjdCBhbmQgYWxzbyB0aHJvdWdoIHdpa2kgZGVmYXVsdCBvYmplY3RcbiAqXG4gKiBAcGFyYW0gdGl0bGUgLSBUaGUgdGl0bGUgb3IgcGFnZSBJZCBvZiB0aGUgcGFnZVxuICogQHBhcmFtIHJlZGlyZWN0IC0gV2hldGhlciB0byByZWRpcmVjdCBpbiBjYXNlIG9mIDMwMlxuICogQHJldHVybnMgVGhlIGh0bWwgY29udGVudCBhcyBzdHJpbmdcbiAqXG4gKiBAYmV0YVxuICovXG5jb25zdCBodG1sID0gYXN5bmMgKHRpdGxlLCByZWRpcmVjdCA9IHRydWUpID0+IHtcbiAgICB0cnkge1xuICAgICAgICBsZXQgaHRtbE9wdGlvbnMgPSB7XG4gICAgICAgICAgICAncHJvcCc6ICdyZXZpc2lvbnMnLFxuICAgICAgICAgICAgJ3J2cHJvcCc6ICdjb250ZW50JyxcbiAgICAgICAgICAgICdydmxpbWl0JzogMSxcbiAgICAgICAgICAgICdydnBhcnNlJzogJydcbiAgICAgICAgfTtcbiAgICAgICAgaHRtbE9wdGlvbnMgPSAoMCwgdXRpbHNfMS5zZXRQYWdlSWRPclRpdGxlUGFyYW0pKGh0bWxPcHRpb25zLCB0aXRsZSk7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgKDAsIHJlcXVlc3RfMS5kZWZhdWx0KShodG1sT3B0aW9ucywgcmVkaXJlY3QpO1xuICAgICAgICBjb25zdCBwYWdlSWQgPSAoMCwgdXRpbHNfMS5zZXRQYWdlSWQpKGh0bWxPcHRpb25zLCByZXNwb25zZSk7XG4gICAgICAgIHJldHVybiByZXNwb25zZS5xdWVyeS5wYWdlc1twYWdlSWRdLnJldmlzaW9uc1swXVsnKiddO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLmh0bWxFcnJvcihlcnJvcik7XG4gICAgfVxufTtcbmV4cG9ydHMuaHRtbCA9IGh0bWw7XG4vKipcbiAqIFJldHVybnMgdGhlIHBsYWluIHRleHQgY29udGVudCBvZiBhIHBhZ2UgYXMgd2VsbCBhcyBwYXJlbnQgaWQgYW5kIHJldmlzaW9uIGlkXG4gKlxuICogQHJlbWFya3NcbiAqIENhbGxlZCBpbiBwYWdlIG9iamVjdCBhbmQgYWxzbyB0aHJvdWdoIHdpa2kgZGVmYXVsdCBvYmplY3RcbiAqXG4gKiBAcGFyYW0gdGl0bGUgLSBUaGUgdGl0bGUgb3IgcGFnZSBJZCBvZiB0aGUgcGFnZVxuICogQHBhcmFtIHJlZGlyZWN0IC0gV2hldGhlciB0byByZWRpcmVjdCBpbiBjYXNlIG9mIDMwMlxuICogQHJldHVybnMgVGhlIHBsYWluIHRleHQgYXMgc3RyaW5nIGFuZCB0aGUgcGFyZW50IGFuZCByZXZpc2lvbiBpZHNcbiAqL1xuY29uc3QgY29udGVudCA9IGFzeW5jICh0aXRsZSwgcmVkaXJlY3QgPSB0cnVlKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgbGV0IGNvbnRlbnRPcHRpb25zID0ge1xuICAgICAgICAgICAgJ3Byb3AnOiAnZXh0cmFjdHN8cmV2aXNpb25zJyxcbiAgICAgICAgICAgICdleHBsYWludGV4dCc6ICcnLFxuICAgICAgICAgICAgJ3J2cHJvcCc6ICdpZHMnXG4gICAgICAgIH07XG4gICAgICAgIGNvbnRlbnRPcHRpb25zID0gKDAsIHV0aWxzXzEuc2V0UGFnZUlkT3JUaXRsZVBhcmFtKShjb250ZW50T3B0aW9ucywgdGl0bGUpO1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0ICgwLCByZXF1ZXN0XzEuZGVmYXVsdCkoY29udGVudE9wdGlvbnMsIHJlZGlyZWN0KTtcbiAgICAgICAgY29uc3QgcGFnZUlkID0gKDAsIHV0aWxzXzEuc2V0UGFnZUlkKShjb250ZW50T3B0aW9ucywgcmVzcG9uc2UpO1xuICAgICAgICBjb25zdCByZXN1bHQgPSByZXNwb25zZVsncXVlcnknXVsncGFnZXMnXVtwYWdlSWRdWydleHRyYWN0J107XG4gICAgICAgIGNvbnN0IGlkcyA9IHtcbiAgICAgICAgICAgIHJldmlzaW9uSWQ6IHJlc3BvbnNlWydxdWVyeSddWydwYWdlcyddW3BhZ2VJZF1bJ3JldmlzaW9ucyddWzBdWydyZXZpZCddLFxuICAgICAgICAgICAgcGFyZW50SWQ6IHJlc3BvbnNlWydxdWVyeSddWydwYWdlcyddW3BhZ2VJZF1bJ3JldmlzaW9ucyddWzBdWydwYXJlbnRpZCddXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXN1bHQsXG4gICAgICAgICAgICBpZHNcbiAgICAgICAgfTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfMS5jb250ZW50RXJyb3IoZXJyb3IpO1xuICAgIH1cbn07XG5leHBvcnRzLmNvbnRlbnQgPSBjb250ZW50O1xuLyoqXG4gKiBSZXR1cm5zIHRoZSBjZXRlZ29yaWVzIHByZXNlbnQgaW4gcGFnZVxuICpcbiAqIEByZW1hcmtzXG4gKiBDYWxsZWQgaW4gcGFnZSBvYmplY3QgYW5kIGFsc28gdGhyb3VnaCB3aWtpIGRlZmF1bHQgb2JqZWN0XG4gKlxuICogQHBhcmFtIHRpdGxlIC0gVGhlIHRpdGxlIG9yIHBhZ2UgSWQgb2YgdGhlIHBhZ2VcbiAqIEBwYXJhbSBsaXN0T3B0aW9ucyAtIHtAbGluayBsaXN0T3B0aW9ucyB8IGxpc3RPcHRpb25zIH1cbiAqIEByZXR1cm5zIFRoZSBjYXRlZ29yaWVzIGFzIGFuIGFycmF5IG9mIHN0cmluZ1xuICovXG5jb25zdCBjYXRlZ29yaWVzID0gYXN5bmMgKHRpdGxlLCBsaXN0T3B0aW9ucykgPT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGxldCBjYXRlZ29yeU9wdGlvbnMgPSB7XG4gICAgICAgICAgICBwcm9wOiAnY2F0ZWdvcmllcycsXG4gICAgICAgICAgICBwbGxpbWl0OiBsaXN0T3B0aW9ucyA9PT0gbnVsbCB8fCBsaXN0T3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogbGlzdE9wdGlvbnMubGltaXQsXG4gICAgICAgIH07XG4gICAgICAgIGNhdGVnb3J5T3B0aW9ucyA9ICgwLCB1dGlsc18xLnNldFBhZ2VJZE9yVGl0bGVQYXJhbSkoY2F0ZWdvcnlPcHRpb25zLCB0aXRsZSk7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgKDAsIHJlcXVlc3RfMS5kZWZhdWx0KShjYXRlZ29yeU9wdGlvbnMsIGxpc3RPcHRpb25zID09PSBudWxsIHx8IGxpc3RPcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBsaXN0T3B0aW9ucy5yZWRpcmVjdCk7XG4gICAgICAgIGNvbnN0IHBhZ2VJZCA9ICgwLCB1dGlsc18xLnNldFBhZ2VJZCkoY2F0ZWdvcnlPcHRpb25zLCByZXNwb25zZSk7XG4gICAgICAgIHJldHVybiByZXNwb25zZS5xdWVyeS5wYWdlc1twYWdlSWRdLmNhdGVnb3JpZXMubWFwKChjYXRlZ29yeSkgPT4gY2F0ZWdvcnkudGl0bGUpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLmNhdGVnb3JpZXNFcnJvcihlcnJvcik7XG4gICAgfVxufTtcbmV4cG9ydHMuY2F0ZWdvcmllcyA9IGNhdGVnb3JpZXM7XG4vKipcbiAqIFJldHVybnMgdGhlIGxpbmtzIHByZXNlbnQgaW4gcGFnZVxuICpcbiAqIEByZW1hcmtzXG4gKiBDYWxsZWQgaW4gcGFnZSBvYmplY3QgYW5kIGFsc28gdGhyb3VnaCB3aWtpIGRlZmF1bHQgb2JqZWN0XG4gKlxuICogQHBhcmFtIHRpdGxlIC0gVGhlIHRpdGxlIG9yIHBhZ2UgSWQgb2YgdGhlIHBhZ2VcbiAqIEBwYXJhbSBsaXN0T3B0aW9ucyAtIHtAbGluayBsaXN0T3B0aW9ucyB8IGxpc3RPcHRpb25zIH1cbiAqIEByZXR1cm5zIFRoZSBsaW5rcyBhcyBhbiBhcnJheSBvZiBzdHJpbmdcbiAqL1xuY29uc3QgbGlua3MgPSBhc3luYyAodGl0bGUsIGxpc3RPcHRpb25zKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgbGV0IGxpbmtzT3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHByb3A6ICdsaW5rcycsXG4gICAgICAgICAgICBwbG5hbWVzcGFjZTogMCxcbiAgICAgICAgICAgIHBsbGltaXQ6IChsaXN0T3B0aW9ucyA9PT0gbnVsbCB8fCBsaXN0T3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogbGlzdE9wdGlvbnMubGltaXQpIHx8ICdtYXgnLFxuICAgICAgICB9O1xuICAgICAgICBsaW5rc09wdGlvbnMgPSAoMCwgdXRpbHNfMS5zZXRQYWdlSWRPclRpdGxlUGFyYW0pKGxpbmtzT3B0aW9ucywgdGl0bGUpO1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0ICgwLCByZXF1ZXN0XzEuZGVmYXVsdCkobGlua3NPcHRpb25zLCBsaXN0T3B0aW9ucyA9PT0gbnVsbCB8fCBsaXN0T3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogbGlzdE9wdGlvbnMucmVkaXJlY3QpO1xuICAgICAgICBjb25zdCBwYWdlSWQgPSAoMCwgdXRpbHNfMS5zZXRQYWdlSWQpKGxpbmtzT3B0aW9ucywgcmVzcG9uc2UpO1xuICAgICAgICBjb25zdCByZXN1bHQgPSByZXNwb25zZS5xdWVyeS5wYWdlc1twYWdlSWRdLmxpbmtzLm1hcCgobGluaykgPT4gbGluay50aXRsZSk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEubGlua3NFcnJvcihlcnJvcik7XG4gICAgfVxufTtcbmV4cG9ydHMubGlua3MgPSBsaW5rcztcbi8qKlxuICogUmV0dXJucyB0aGUgcmVmZXJlbmNlcyBvZiBleHRlcm5hbCBsaW5rcyBwcmVzZW50IGluIHBhZ2VcbiAqXG4gKiBAcmVtYXJrc1xuICogQ2FsbGVkIGluIHBhZ2Ugb2JqZWN0IGFuZCBhbHNvIHRocm91Z2ggd2lraSBkZWZhdWx0IG9iamVjdFxuICpcbiAqIEBwYXJhbSB0aXRsZSAtIFRoZSB0aXRsZSBvciBwYWdlIElkIG9mIHRoZSBwYWdlXG4gKiBAcGFyYW0gbGlzdE9wdGlvbnMgLSB7QGxpbmsgbGlzdE9wdGlvbnMgfCBsaXN0T3B0aW9ucyB9XG4gKiBAcmV0dXJucyBUaGUgcmVmZXJlbmNlcyBhcyBhbiBhcnJheSBvZiBzdHJpbmdcbiAqL1xuY29uc3QgcmVmZXJlbmNlcyA9IGFzeW5jICh0aXRsZSwgbGlzdE9wdGlvbnMpID0+IHtcbiAgICB0cnkge1xuICAgICAgICBsZXQgZXh0TGlua3NPcHRpb25zID0ge1xuICAgICAgICAgICAgcHJvcDogJ2V4dGxpbmtzJyxcbiAgICAgICAgICAgIGVsbGltaXQ6IChsaXN0T3B0aW9ucyA9PT0gbnVsbCB8fCBsaXN0T3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogbGlzdE9wdGlvbnMubGltaXQpIHx8ICdtYXgnLFxuICAgICAgICB9O1xuICAgICAgICBleHRMaW5rc09wdGlvbnMgPSAoMCwgdXRpbHNfMS5zZXRQYWdlSWRPclRpdGxlUGFyYW0pKGV4dExpbmtzT3B0aW9ucywgdGl0bGUpO1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0ICgwLCByZXF1ZXN0XzEuZGVmYXVsdCkoZXh0TGlua3NPcHRpb25zLCBsaXN0T3B0aW9ucyA9PT0gbnVsbCB8fCBsaXN0T3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogbGlzdE9wdGlvbnMucmVkaXJlY3QpO1xuICAgICAgICBjb25zdCBwYWdlSWQgPSAoMCwgdXRpbHNfMS5zZXRQYWdlSWQpKGV4dExpbmtzT3B0aW9ucywgcmVzcG9uc2UpO1xuICAgICAgICBjb25zdCByZXN1bHQgPSByZXNwb25zZS5xdWVyeS5wYWdlc1twYWdlSWRdLmV4dGxpbmtzLm1hcCgobGluaykgPT4gbGlua1snKiddKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfMS5saW5rc0Vycm9yKGVycm9yKTtcbiAgICB9XG59O1xuZXhwb3J0cy5yZWZlcmVuY2VzID0gcmVmZXJlbmNlcztcbi8qKlxuICogUmV0dXJucyB0aGUgY29vcmRpbmF0ZXMgb2YgYSBwYWdlXG4gKlxuICogQHJlbWFya3NcbiAqIENhbGxlZCBpbiBwYWdlIG9iamVjdCBhbmQgYWxzbyB0aHJvdWdoIHdpa2kgZGVmYXVsdCBvYmplY3RcbiAqXG4gKiBAcGFyYW0gdGl0bGUgLSBUaGUgdGl0bGUgb3IgcGFnZSBJZCBvZiB0aGUgcGFnZVxuICogQHBhcmFtIHJlZGlyZWN0IC0gV2hldGhlciB0byByZWRpcmVjdCBpbiBjYXNlIG9mIDMwMlxuICogQHJldHVybnMgVGhlIGNvb3JkaW5hdGVzIGFzIHtAbGluayBjb29yZGluYXRlc1Jlc3VsdCB8IGNvb3JkaW5hdGVzUmVzdWx0fVxuICovXG5jb25zdCBjb29yZGluYXRlcyA9IGFzeW5jICh0aXRsZSwgcmVkaXJlY3QgPSB0cnVlKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgbGV0IGNvb3JkaW5hdGVzT3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHByb3A6ICdjb29yZGluYXRlcycsXG4gICAgICAgIH07XG4gICAgICAgIGNvb3JkaW5hdGVzT3B0aW9ucyA9ICgwLCB1dGlsc18xLnNldFBhZ2VJZE9yVGl0bGVQYXJhbSkoY29vcmRpbmF0ZXNPcHRpb25zLCB0aXRsZSk7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgKDAsIHJlcXVlc3RfMS5kZWZhdWx0KShjb29yZGluYXRlc09wdGlvbnMsIHJlZGlyZWN0KTtcbiAgICAgICAgY29uc3QgcGFnZUlkID0gKDAsIHV0aWxzXzEuc2V0UGFnZUlkKShjb29yZGluYXRlc09wdGlvbnMsIHJlc3BvbnNlKTtcbiAgICAgICAgY29uc3QgY29vcmRpbmF0ZXMgPSByZXNwb25zZS5xdWVyeS5wYWdlc1twYWdlSWRdLmNvb3JkaW5hdGVzO1xuICAgICAgICByZXR1cm4gY29vcmRpbmF0ZXMgPyBjb29yZGluYXRlc1swXSA6IG51bGw7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuY29vcmRpbmF0ZXNFcnJvcihlcnJvcik7XG4gICAgfVxufTtcbmV4cG9ydHMuY29vcmRpbmF0ZXMgPSBjb29yZGluYXRlcztcbi8qKlxuICogUmV0dXJucyB0aGUgbGFuZ3VhZ2UgbGlua3MgcHJlc2VudCBpbiB0aGUgcGFnZVxuICpcbiAqIEByZW1hcmtzXG4gKiBDYWxsZWQgaW4gcGFnZSBvYmplY3QgYW5kIGFsc28gdGhyb3VnaCB3aWtpIGRlZmF1bHQgb2JqZWN0XG4gKlxuICogQHBhcmFtIHRpdGxlIC0gVGhlIHRpdGxlIG9yIHBhZ2UgSWQgb2YgdGhlIHBhZ2VcbiAqIEBwYXJhbSBsaXN0T3B0aW9ucyAtIHtAbGluayBsaXN0T3B0aW9ucyB8IGxpc3RPcHRpb25zIH1cbiAqIEByZXR1cm5zIFRoZSBsaW5rcyBhcyBhbiBhcnJheSBvZiB7QGxpbmsgbGFuZ0xpbmtzUmVzdWx0IHwgbGFuZ0xpbmtzUmVzdWx0IH1cbiAqL1xuY29uc3QgbGFuZ0xpbmtzID0gYXN5bmMgKHRpdGxlLCBsaXN0T3B0aW9ucykgPT4ge1xuICAgIHZhciBfYTtcbiAgICB0cnkge1xuICAgICAgICBsZXQgbGFuZ3VhZ2VPcHRpb25zID0ge1xuICAgICAgICAgICAgcHJvcDogJ2xhbmdsaW5rcycsXG4gICAgICAgICAgICBsbGxpbWl0OiAobGlzdE9wdGlvbnMgPT09IG51bGwgfHwgbGlzdE9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGxpc3RPcHRpb25zLmxpbWl0KSB8fCAnbWF4JyxcbiAgICAgICAgICAgIGxscHJvcDogJ3VybCdcbiAgICAgICAgfTtcbiAgICAgICAgbGFuZ3VhZ2VPcHRpb25zID0gKDAsIHV0aWxzXzEuc2V0UGFnZUlkT3JUaXRsZVBhcmFtKShsYW5ndWFnZU9wdGlvbnMsIHRpdGxlKTtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCAoMCwgcmVxdWVzdF8xLmRlZmF1bHQpKGxhbmd1YWdlT3B0aW9ucywgbGlzdE9wdGlvbnMgPT09IG51bGwgfHwgbGlzdE9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGxpc3RPcHRpb25zLnJlZGlyZWN0KTtcbiAgICAgICAgY29uc3QgcGFnZUlkID0gKDAsIHV0aWxzXzEuc2V0UGFnZUlkKShsYW5ndWFnZU9wdGlvbnMsIHJlc3BvbnNlKTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gKChfYSA9IHJlc3BvbnNlLnF1ZXJ5LnBhZ2VzW3BhZ2VJZF0ubGFuZ2xpbmtzKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBbXSkubWFwKChsaW5rKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGxhbmc6IGxpbmsubGFuZyxcbiAgICAgICAgICAgICAgICB0aXRsZTogbGlua1snKiddLFxuICAgICAgICAgICAgICAgIHVybDogbGluay51cmxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLmxpbmtzRXJyb3IoZXJyb3IpO1xuICAgIH1cbn07XG5leHBvcnRzLmxhbmdMaW5rcyA9IGxhbmdMaW5rcztcbi8qKlxuICogUmV0dXJucyB0aGUgaW5mb2JveCBjb250ZW50IG9mIHBhZ2UgaWYgcHJlc2VudFxuICpcbiAqIEByZW1hcmtzXG4gKiBDYWxsZWQgaW4gcGFnZSBvYmplY3QgYW5kIGFsc28gdGhyb3VnaCB3aWtpIGRlZmF1bHQgb2JqZWN0XG4gKlxuICogQHBhcmFtIHRpdGxlIC0gVGhlIHRpdGxlIG9yIHBhZ2UgSWQgb2YgdGhlIHBhZ2VcbiAqIEBwYXJhbSByZWRpcmVjdCAtIFdoZXRoZXIgdG8gcmVkaXJlY3QgaW4gY2FzZSBvZiAzMDJcbiAqIEByZXR1cm5zIFRoZSBpbmZvIGFzIEpTT04gb2JqZWN0XG4gKi9cbmNvbnN0IGluZm9ib3ggPSBhc3luYyAodGl0bGUsIHJlZGlyZWN0ID0gdHJ1ZSkgPT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGluZm9ib3hPcHRpb25zID0ge1xuICAgICAgICAgICAgcHJvcDogJ3JldmlzaW9ucycsXG4gICAgICAgICAgICBydnByb3A6ICdjb250ZW50JyxcbiAgICAgICAgICAgIHJ2c2VjdGlvbjogMFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBmdWxsSW5mbyA9IGF3YWl0ICgwLCBleHBvcnRzLnJhd0luZm8pKHRpdGxlLCBpbmZvYm94T3B0aW9ucywgcmVkaXJlY3QpO1xuICAgICAgICBjb25zdCBpbmZvID0gaW5mb2JveFBhcnNlcihmdWxsSW5mbykuZ2VuZXJhbDtcbiAgICAgICAgcmV0dXJuIGluZm87XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuaW5mb2JveEVycm9yKGVycm9yKTtcbiAgICB9XG59O1xuZXhwb3J0cy5pbmZvYm94ID0gaW5mb2JveDtcbi8qKlxuICogUmV0dXJucyB0aGUgdGFibGUgY29udGVudCBvZiBwYWdlIGlmIHByZXNlbnRcbiAqXG4gKiBAcmVtYXJrc1xuICogQ2FsbGVkIGluIHBhZ2Ugb2JqZWN0IGFuZCBhbHNvIHRocm91Z2ggd2lraSBkZWZhdWx0IG9iamVjdFxuICpcbiAqIEBwYXJhbSB0aXRsZSAtIFRoZSB0aXRsZSBvciBwYWdlIElkIG9mIHRoZSBwYWdlXG4gKiBAcGFyYW0gcmVkaXJlY3QgLSBXaGV0aGVyIHRvIHJlZGlyZWN0IGluIGNhc2Ugb2YgMzAyXG4gKiBAcmV0dXJucyBUaGUgdGFibGVzIGFzIGFycmF5cyBvZiBKU09OIG9iamVjdHNcbiAqL1xuY29uc3QgdGFibGVzID0gYXN5bmMgKHRpdGxlLCByZWRpcmVjdCA9IHRydWUpID0+IHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCB0YWJsZU9wdGlvbnMgPSB7XG4gICAgICAgICAgICBwcm9wOiAncmV2aXNpb25zJyxcbiAgICAgICAgICAgIHJ2cHJvcDogJ2NvbnRlbnQnLFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBmdWxsSW5mbyA9IGF3YWl0ICgwLCBleHBvcnRzLnJhd0luZm8pKHRpdGxlLCB0YWJsZU9wdGlvbnMsIHJlZGlyZWN0KTtcbiAgICAgICAgY29uc3QgaW5mbyA9IGluZm9ib3hQYXJzZXIoZnVsbEluZm8pLnRhYmxlcztcbiAgICAgICAgcmV0dXJuIGluZm87XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuaW5mb2JveEVycm9yKGVycm9yKTtcbiAgICB9XG59O1xuZXhwb3J0cy50YWJsZXMgPSB0YWJsZXM7XG4vKipcbiAqIFJldHVybnMgdGhlIHJhdyBpbmZvIG9mIHRoZSBwYWdlXG4gKlxuICogQHJlbWFya3NcbiAqIFRoaXMgaXMgbm90IGV4cG9ydGVkIGFuZCB1c2VkIGludGVybmFsbHlcbiAqXG4gKiBAcGFyYW0gdGl0bGUgLSBUaGUgdGl0bGUgb3IgcGFnZSBJZCBvZiB0aGUgcGFnZVxuICogQHBhcmFtIHJlZGlyZWN0IC0gV2hldGhlciB0byByZWRpcmVjdCBpbiBjYXNlIG9mIDMwMlxuICogQHJldHVybnMgVGhlIHJhd0luZm8gb2YgdGhlIHBhZ2VcbiAqXG4gKi9cbmNvbnN0IHJhd0luZm8gPSBhc3luYyAodGl0bGUsIG9wdGlvbnMsIHJlZGlyZWN0ID0gdHJ1ZSkgPT4ge1xuICAgIHZhciBfYTtcbiAgICB0cnkge1xuICAgICAgICBvcHRpb25zID0gKDAsIHV0aWxzXzEuc2V0UGFnZUlkT3JUaXRsZVBhcmFtKShvcHRpb25zLCB0aXRsZSk7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgKDAsIHJlcXVlc3RfMS5kZWZhdWx0KShvcHRpb25zLCByZWRpcmVjdCk7XG4gICAgICAgIGlmICghKChfYSA9IHJlc3BvbnNlLnF1ZXJ5KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EucGFnZXMpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEud2lraUVycm9yKG1lc3NhZ2VzXzEuTVNHUy5JTkZPQk9YX05PVF9FWElTVCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcGFnZUlkID0gKDAsIHV0aWxzXzEuc2V0UGFnZUlkKShvcHRpb25zLCByZXNwb25zZSk7XG4gICAgICAgIGNvbnN0IGRhdGEgPSByZXNwb25zZS5xdWVyeS5wYWdlc1twYWdlSWRdWydyZXZpc2lvbnMnXVswXTtcbiAgICAgICAgcmV0dXJuIGRhdGEgPyBkYXRhWycqJ10gOiAnJztcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfMS5pbmZvYm94RXJyb3IoZXJyb3IpO1xuICAgIH1cbn07XG5leHBvcnRzLnJhd0luZm8gPSByYXdJbmZvO1xuLy9SRVNULUFQSSBSZXF1ZXN0cyBiYXNlZCBvbiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvYXBpL3Jlc3RfdjEvIy9cbi8vQVBJcyBzZWVtcyB0byBzdXBwb3J0IG9ubHkgdGl0bGUgcGFyYW1ldGVycyB3aGljaCBpcyBhIGRyYXdiYWNrXG4vKipcbiAqIFJldHVybnMgdGhlIHN1bW1hcnkgb2YgdGhlIHBhZ2VcbiAqXG4gKiBAcmVtYXJrc1xuICogQ2FsbGVkIGluIHBhZ2Ugb2JqZWN0IGFuZCBhbHNvIHRocm91Z2ggd2lraSBkZWZhdWx0IG9iamVjdFxuICpcbiAqIEBwYXJhbSB0aXRsZSAtIFRoZSB0aXRsZSBvciBwYWdlIElkIG9mIHRoZSBwYWdlXG4gKiBAcGFyYW0gcmVkaXJlY3QgLSBXaGV0aGVyIHRvIHJlZGlyZWN0IGluIGNhc2Ugb2YgMzAyXG4gKiBAcmV0dXJucyBUaGUgc3VtbWFyeSBvZiB0aGUgcGFnZSBhcyB7QGxpbmsgd2lraVN1bW1hcnkgfCB3aWtpU3VtbWFyeX1cbiAqL1xuY29uc3Qgc3VtbWFyeSA9IGFzeW5jICh0aXRsZSwgcmVkaXJlY3QgPSB0cnVlKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgcGF0aCA9ICdwYWdlL3N1bW1hcnkvJyArIHRpdGxlLnJlcGxhY2UoXCIgXCIsIFwiX1wiKTtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCAoMCwgcmVxdWVzdF8xLm1ha2VSZXN0UmVxdWVzdCkocGF0aCwgcmVkaXJlY3QpO1xuICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuc3VtbWFyeUVycm9yKGVycm9yKTtcbiAgICB9XG59O1xuZXhwb3J0cy5zdW1tYXJ5ID0gc3VtbWFyeTtcbi8qKlxuICogUmV0dXJucyBzdW1tYXJpZXMgZm9yIDIwIHBhZ2VzIHJlbGF0ZWQgdG8gdGhlIGdpdmVuIHBhZ2UuIFN1bW1hcmllcyBpbmNsdWRlIHBhZ2UgdGl0bGUsIG5hbWVzcGFjZVxuICogYW5kIGlkIGFsb25nIHdpdGggc2hvcnQgdGV4dCBkZXNjcmlwdGlvbiBvZiB0aGUgcGFnZSBhbmQgYSB0aHVtYm5haWwuXG4gKlxuICogQHJlbWFya3NcbiAqIENhbGxlZCBpbiBwYWdlIG9iamVjdCBhbmQgYWxzbyB0aHJvdWdoIGluZGV4XG4gKlxuICogQHBhcmFtIHRpdGxlIC0gVGhlIHRpdGxlIG9yIHBhZ2UgSWQgb2YgdGhlIHBhZ2VcbiAqIEBwYXJhbSByZWRpcmVjdCAtIFdoZXRoZXIgdG8gcmVkaXJlY3QgaW4gY2FzZSBvZiAzMDJcbiAqIEByZXR1cm5zIFRoZSByZWxhdGVkIHBhZ2VzIGFuZCBzdW1tYXJ5IGFzIGFuIGFycmF5IG9mIHtAbGluayB3aWtpU3VtbWFyeSB8IHdpa2lTdW1tYXJ5fVxuICpcbiAqIEBleHBlcmltZW50YWxcbiAqL1xuY29uc3QgcmVsYXRlZCA9IGFzeW5jICh0aXRsZSwgcmVkaXJlY3QgPSB0cnVlKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgcGF0aCA9ICdwYWdlL3JlbGF0ZWQvJyArIHRpdGxlLnJlcGxhY2UoXCIgXCIsIFwiX1wiKTtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCAoMCwgcmVxdWVzdF8xLm1ha2VSZXN0UmVxdWVzdCkocGF0aCwgcmVkaXJlY3QpO1xuICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEucmVsYXRlZEVycm9yKGVycm9yKTtcbiAgICB9XG59O1xuZXhwb3J0cy5yZWxhdGVkID0gcmVsYXRlZDtcbi8qKlxuICogR2V0cyB0aGUgbGlzdCBvZiBtZWRpYSBpdGVtcyAoaW1hZ2VzLCBhdWRpbywgYW5kIHZpZGVvKSBpbiB0aGVcbiAqIG9yZGVyIGluIHdoaWNoIHRoZXkgYXBwZWFyIG9uIGEgZ2l2ZW4gd2lraSBwYWdlLlxuICpcbiAqIEByZW1hcmtzXG4gKiBDYWxsZWQgaW4gcGFnZSBvYmplY3QgYW5kIGFsc28gdGhyb3VnaCBpbmRleFxuICpcbiAqIEBwYXJhbSB0aXRsZSAtIFRoZSB0aXRsZSBvciBwYWdlIElkIG9mIHRoZSBwYWdlXG4gKiBAcGFyYW0gcmVkaXJlY3QgLSBXaGV0aGVyIHRvIHJlZGlyZWN0IGluIGNhc2Ugb2YgMzAyXG4gKiBAcmV0dXJucyBUaGUgcmVsYXRlZCBwYWdlcyBhbmQgc3VtbWFyeSBhcyBhbiBhcnJheSBvZiB7QGxpbmsgd2lraU1lZGlhUmVzdWx0IHwgd2lraU1lZGlhUmVzdWx0fVxuICpcbiAqIEBleHBlcmltZW50YWxcbiAqL1xuY29uc3QgbWVkaWEgPSBhc3luYyAodGl0bGUsIHJlZGlyZWN0ID0gdHJ1ZSkgPT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHBhdGggPSAncGFnZS9tZWRpYS1saXN0LycgKyB0aXRsZS5yZXBsYWNlKFwiIFwiLCBcIl9cIik7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgKDAsIHJlcXVlc3RfMS5tYWtlUmVzdFJlcXVlc3QpKHBhdGgsIHJlZGlyZWN0KTtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLm1lZGlhRXJyb3IoZXJyb3IpO1xuICAgIH1cbn07XG5leHBvcnRzLm1lZGlhID0gbWVkaWE7XG4vKipcbiAqIFJldHVybnMgbW9iaWxlLW9wdGltaXNlZCBIVE1MIG9mIGEgcGFnZVxuICpcbiAqIEBwYXJhbSB0aXRsZSAtIFRoZSB0aXRsZSBvZiB0aGUgcGFnZSB0byBxdWVyeVxuICogQHBhcmFtIHJlZGlyZWN0IC0gV2hldGhlciB0byByZWRpcmVjdCBpbiBjYXNlIG9mIDMwMlxuICogQHJldHVybnMgUmV0dXJucyBIVE1MIHN0cmluZ1xuICovXG5jb25zdCBtb2JpbGVIdG1sID0gYXN5bmMgKHRpdGxlLCByZWRpcmVjdCA9IHRydWUpID0+IHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBwYXRoID0gYHBhZ2UvbW9iaWxlLWh0bWwvJHt0aXRsZX1gO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCAoMCwgcmVxdWVzdF8xLm1ha2VSZXN0UmVxdWVzdCkocGF0aCwgcmVkaXJlY3QpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLmh0bWxFcnJvcihlcnJvcik7XG4gICAgfVxufTtcbmV4cG9ydHMubW9iaWxlSHRtbCA9IG1vYmlsZUh0bWw7XG4vKipcbiAqIFJldHVybnMgcGRmIG9mIGEgZ2l2ZW4gcGFnZVxuICpcbiAqIEBwYXJhbSB0aXRsZSAtIFRoZSB0aXRsZSBvZiB0aGUgcGFnZSB0byBxdWVyeVxuICogQHBhcmFtIHBkZk9wdGlvbnMgLSB7QGxpbmsgcGRmT3B0aW9ucyB8IHBkZk9wdGlvbnMgfVxuICogQHJldHVybnMgUmV0dXJucyBwZGYgZm9ybWF0XG4gKi9cbmNvbnN0IHBkZiA9IGFzeW5jICh0aXRsZSwgcGRmT3B0aW9ucykgPT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGxldCBwYXRoID0gYHBhZ2UvcGRmLyR7dGl0bGV9YDtcbiAgICAgICAgKHBkZk9wdGlvbnMgPT09IG51bGwgfHwgcGRmT3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGRmT3B0aW9ucy5mb3JtYXQpID8gcGF0aCArPSBgLyR7cGRmT3B0aW9ucy5mb3JtYXR9YCA6IG51bGw7XG4gICAgICAgIChwZGZPcHRpb25zID09PSBudWxsIHx8IHBkZk9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBkZk9wdGlvbnMudHlwZSkgPyBwYXRoICs9IGAvJHtwZGZPcHRpb25zLnR5cGV9YCA6IG51bGw7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9ICgwLCByZXF1ZXN0XzEucmV0dXJuUmVzdFVybCkocGF0aCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEucGRmRXJyb3IoZXJyb3IpO1xuICAgIH1cbn07XG5leHBvcnRzLnBkZiA9IHBkZjtcbi8qKlxuICogUmV0dXJucyBjaXRhdGlvbiBvZiBhIGdpdmVuIHBhZ2UsIG9yIHF1ZXJ5IHN0cmluZ1xuICpcbiAqIEBwYXJhbSBmb3JtYXQgLSB0aGUgZm9ybWF0IG9mIHRoZSBjaXRhdGlvbiByZXN1bHRcbiAqIEBwYXJhbSBxdWVyeSAtIHVybCBvciBxdWVyeSBzdHJpbmdcbiAqIEBwYXJhbSBsYW5ndWFnZSAtIGlmIHlvdSB3YW50IGxhbnVhZ2UgZW5hYmxlZCByZXN1bHRzXG4gKiBAcmV0dXJucyBSZXR1cm5zIGNpYXRpb24gZGF0YVxuICovXG5jb25zdCBjaXRhdGlvbiA9IGFzeW5jIChxdWVyeSwgZm9ybWF0LCBsYW5ndWFnZSkgPT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGxldCBwYXRoID0gYGRhdGEvY2l0YXRpb25gO1xuICAgICAgICBwYXRoICs9IGZvcm1hdCA/IGAvJHtmb3JtYXR9YCA6IGAvbWVkaWF3aWtpYDtcbiAgICAgICAgcGF0aCArPSBgLyR7cXVlcnl9YDtcbiAgICAgICAgbGFuZ3VhZ2UgPyBwYXRoICs9IGAvJHtsYW5ndWFnZX1gIDogbnVsbDtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgKDAsIHJlcXVlc3RfMS5tYWtlUmVzdFJlcXVlc3QpKHBhdGgpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLmNpdGF0aW9uRXJyb3IoZXJyb3IpO1xuICAgIH1cbn07XG5leHBvcnRzLmNpdGF0aW9uID0gY2l0YXRpb247XG5leHBvcnRzLmRlZmF1bHQgPSBQYWdlO1xuIiwgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuIiwgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuIiwgIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCByZXF1ZXN0XzEgPSByZXF1aXJlKFwiLi9yZXF1ZXN0XCIpO1xuY29uc3QgcGFnZV8xID0gcmVxdWlyZShcIi4vcGFnZVwiKTtcbmNvbnN0IGVycm9yc18xID0gcmVxdWlyZShcIi4vZXJyb3JzXCIpO1xuY29uc3QgbWVzc2FnZXNfMSA9IHJlcXVpcmUoXCIuL21lc3NhZ2VzXCIpO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCIuL3V0aWxzXCIpO1xuLyoqXG4gKiBUaGUgZGVmYXVsdCB3aWtpIGV4cG9ydFxuICpcbiAqIEByZW1hcmtzXG4gKiBJbnRlcm5hbGx5IGNhbGxzIHdpa2kucGFnZVxuICpcbiAqL1xuY29uc3Qgd2lraSA9IGFzeW5jICh0aXRsZSwgcGFnZU9wdGlvbnMpID0+IHtcbiAgICByZXR1cm4gd2lraS5wYWdlKHRpdGxlLCBwYWdlT3B0aW9ucyk7XG59O1xuLyoqXG4gKiBSZXR1cm5zIHRoZSBzZWFyY2ggcmVzdWx0cyBmb3IgYSBnaXZlbiBxdWVyeVxuICpcbiAqIEByZW1hcmtzXG4gKiBMaW1pdHMgcmVzdWx0cyBieSBkZWZhdWx0IHRvIDEwXG4gKlxuICogQHBhcmFtIHF1ZXJ5IC0gVGhlIHN0cmluZyB0byBzZWFyY2ggZm9yXG4gKiBAcGFyYW0gc2VhcmNoT3B0aW9ucyAtIFRoZSBudW1iZXIgb2YgcmVzdWx0cyBhbmQgaWYgc3VnZ2VzdGlvbiBuZWVkZWQge0BsaW5rIHNlYXJjaE9wdGlvbnMgfCBzZWFyY2hPcHRpb25zIH1cbiAqIEByZXR1cm5zIGFuIGFycmF5IG9mIHtAbGluayB3aWtpU2VhcmNoUmVzdWx0IHwgd2lraVNlYXJjaFJlc3VsdCB9XG4gKi9cbndpa2kuc2VhcmNoID0gYXN5bmMgKHF1ZXJ5LCBzZWFyY2hPcHRpb25zKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3Qgc2VhcmNoUGFyYW1zID0ge1xuICAgICAgICAgICAgJ2xpc3QnOiAnc2VhcmNoJyxcbiAgICAgICAgICAgICdzcnByb3AnOiAnJyxcbiAgICAgICAgICAgICdzcmxpbWl0JzogKHNlYXJjaE9wdGlvbnMgPT09IG51bGwgfHwgc2VhcmNoT3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogc2VhcmNoT3B0aW9ucy5saW1pdCkgfHwgMTAsXG4gICAgICAgICAgICAnc3JzZWFyY2gnOiBxdWVyeVxuICAgICAgICB9O1xuICAgICAgICAoc2VhcmNoT3B0aW9ucyA9PT0gbnVsbCB8fCBzZWFyY2hPcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzZWFyY2hPcHRpb25zLnN1Z2dlc3Rpb24pID8gc2VhcmNoUGFyYW1zWydzcmluZm8nXSA9ICdzdWdnZXN0aW9uJyA6IG51bGw7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgKDAsIHJlcXVlc3RfMS5kZWZhdWx0KShzZWFyY2hQYXJhbXMpO1xuICAgICAgICBjb25zdCByZXN1bHQgPSB7XG4gICAgICAgICAgICByZXN1bHRzOiByZXNwb25zZS5xdWVyeS5zZWFyY2gsXG4gICAgICAgICAgICBzdWdnZXN0aW9uOiByZXNwb25zZS5xdWVyeS5zZWFyY2hpbmZvID8gcmVzcG9uc2UucXVlcnkuc2VhcmNoaW5mby5zdWdnZXN0aW9uIDogbnVsbFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLnNlYXJjaEVycm9yKGVycm9yKTtcbiAgICB9XG59O1xuLyoqXG4gKiBSZXR1cm5zIHRoZSBwYWdlIGZvciBhIGdpdmVuIHRpdGxlIG9yIHN0cmluZ1xuICpcbiAqIEByZW1hcmtzXG4gKiBDYWxsIHRoaXMgbWV0aG9kIHRvIGdldCB0aGUgYmFzaWMgaW5mbyBmb3IgcGFnZSBhbmQgYWxzbyB0byBwcmVsb2FkIGFueSBwYXJhbXMgeW91IG1pZ2h0IHVzZSBpbiBmdXR1cmVcbiAqXG4gKiBAcGFyYW0gdGl0bGUgLSBUaGUgdGl0bGUgb3IgcGFnZSBJZCBvZiB0aGUgcGFnZVxuICogQHBhcmFtIHBhZ2VPcHRpb25zIC0gV2hldGhlciB0byByZWRpcmVjdCwgYXV0b1N1Z2dlc3Qgb3IgcHJlbG9hZCBhbnkgZmllbGRzIHtAbGluayBwYWdlT3B0aW9ucyB8IHBhZ2VPcHRpb25zIH1cbiAqIEByZXR1cm5zIFRoZSBpbnRybyBzdHJpbmdcbiAqL1xud2lraS5wYWdlID0gYXN5bmMgKHRpdGxlLCBwYWdlT3B0aW9ucykgPT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGlmIChwYWdlT3B0aW9ucyA9PT0gbnVsbCB8fCBwYWdlT3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGFnZU9wdGlvbnMuYXV0b1N1Z2dlc3QpIHtcbiAgICAgICAgICAgIHRpdGxlID0gYXdhaXQgKDAsIHV0aWxzXzEuc2V0VGl0bGVGb3JQYWdlKSh0aXRsZSk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHBhZ2VQYXJhbXMgPSB7XG4gICAgICAgICAgICBwcm9wOiAnaW5mb3xwYWdlcHJvcHMnLFxuICAgICAgICAgICAgaW5wcm9wOiAndXJsJyxcbiAgICAgICAgICAgIHBwcHJvcDogJ2Rpc2FtYmlndWF0aW9uJyxcbiAgICAgICAgfTtcbiAgICAgICAgcGFnZVBhcmFtcyA9ICgwLCB1dGlsc18xLnNldFBhZ2VJZE9yVGl0bGVQYXJhbSkocGFnZVBhcmFtcywgdGl0bGUpO1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0ICgwLCByZXF1ZXN0XzEuZGVmYXVsdCkocGFnZVBhcmFtcyk7XG4gICAgICAgIGxldCBwYWdlSW5mbyA9IHJlc3BvbnNlLnF1ZXJ5LnBhZ2VzO1xuICAgICAgICBjb25zdCBwYWdlSWQgPSAoMCwgdXRpbHNfMS5zZXRQYWdlSWQpKHBhZ2VQYXJhbXMsIHJlc3BvbnNlKTtcbiAgICAgICAgcGFnZUluZm8gPSBwYWdlSW5mb1twYWdlSWRdO1xuICAgICAgICBpZiAocGFnZUluZm8ubWlzc2luZyA9PSAnJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLnBhZ2VFcnJvcihgJHttZXNzYWdlc18xLk1TR1MuUEFHRV9OT1RfRVhJU1R9JHt0aXRsZX1gKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwYWdlID0gbmV3IHBhZ2VfMS5kZWZhdWx0KHBhZ2VJbmZvKTtcbiAgICAgICAgaWYgKHBhZ2VPcHRpb25zID09PSBudWxsIHx8IHBhZ2VPcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwYWdlT3B0aW9ucy5wcmVsb2FkKSB7XG4gICAgICAgICAgICBpZiAoIShwYWdlT3B0aW9ucyA9PT0gbnVsbCB8fCBwYWdlT3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGFnZU9wdGlvbnMuZmllbGRzKSkge1xuICAgICAgICAgICAgICAgIHBhZ2VPcHRpb25zLmZpZWxkcyA9IFsnc3VtbWFyeScsICdpbWFnZXMnXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAoY29uc3QgZmllbGQgb2YgcGFnZU9wdGlvbnMuZmllbGRzKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgcGFnZS5ydW5NZXRob2QoZmllbGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYWdlO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLnBhZ2VFcnJvcihlcnJvcik7XG4gICAgfVxufTtcbi8qKlxuICogUmV0dXJucyB0aGUgaW50cm8gcHJlc2VudCBpbiBhIHdpa2kgcGFnZVxuICpcbiAqIEByZW1hcmtzXG4gKiBDYWxsZWQgaW4gcGFnZSBvYmplY3QgYW5kIGFsc28gdGhyb3VnaCB3aWtpIGRlZmF1bHQgb2JqZWN0XG4gKlxuICogQHBhcmFtIHRpdGxlIC0gVGhlIHRpdGxlIG9yIHBhZ2UgSWQgb2YgdGhlIHBhZ2VcbiAqIEBwYXJhbSBwYWdlT3B0aW9ucyAtIFdoZXRoZXIgdG8gcmVkaXJlY3QgaW4gY2FzZSBvZiAzMDJcbiAqIEByZXR1cm5zIFRoZSBpbnRybyBzdHJpbmdcbiAqL1xud2lraS5pbnRybyA9IGFzeW5jICh0aXRsZSwgcGFnZU9wdGlvbnMpID0+IHtcbiAgICB0cnkge1xuICAgICAgICBpZiAocGFnZU9wdGlvbnMgPT09IG51bGwgfHwgcGFnZU9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBhZ2VPcHRpb25zLmF1dG9TdWdnZXN0KSB7XG4gICAgICAgICAgICB0aXRsZSA9IGF3YWl0ICgwLCB1dGlsc18xLnNldFRpdGxlRm9yUGFnZSkodGl0bGUpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0ICgwLCBwYWdlXzEuaW50cm8pKHRpdGxlLCBwYWdlT3B0aW9ucyA9PT0gbnVsbCB8fCBwYWdlT3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGFnZU9wdGlvbnMucmVkaXJlY3QpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLmludHJvRXJyb3IoZXJyb3IpO1xuICAgIH1cbn07XG4vKipcbiAqIFJldHVybnMgdGhlIGltYWdlcyBwcmVzZW50IGluIGEgd2lraSBwYWdlXG4gKlxuICogQHJlbWFya3NcbiAqIENhbGxlZCBpbiBwYWdlIG9iamVjdCBhbmQgYWxzbyB0aHJvdWdoIHdpa2kgZGVmYXVsdCBvYmplY3RcbiAqXG4gKiBAcGFyYW0gdGl0bGUgLSBUaGUgdGl0bGUgb3IgcGFnZSBJZCBvZiB0aGUgcGFnZVxuICogQHBhcmFtIGxpc3RPcHRpb25zIC0ge0BsaW5rIGxpc3RPcHRpb25zIHwgbGlzdE9wdGlvbnMgfVxuICogQHJldHVybnMgYW4gYXJyYXkgb2YgaW1hZ2VSZXN1bHQge0BsaW5rIGltYWdlUmVzdWx0IHwgaW1hZ2VSZXN1bHQgfVxuICovXG53aWtpLmltYWdlcyA9IGFzeW5jICh0aXRsZSwgbGlzdE9wdGlvbnMpID0+IHtcbiAgICB0cnkge1xuICAgICAgICBpZiAobGlzdE9wdGlvbnMgPT09IG51bGwgfHwgbGlzdE9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGxpc3RPcHRpb25zLmF1dG9TdWdnZXN0KSB7XG4gICAgICAgICAgICB0aXRsZSA9IGF3YWl0ICgwLCB1dGlsc18xLnNldFRpdGxlRm9yUGFnZSkodGl0bGUpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0ICgwLCBwYWdlXzEuaW1hZ2VzKSh0aXRsZSwgbGlzdE9wdGlvbnMpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLmltYWdlRXJyb3IoZXJyb3IpO1xuICAgIH1cbn07XG4vKipcbiAqIFJldHVybnMgdGhlIHN1bW1hcnkgb2YgdGhlIHBhZ2VcbiAqXG4gKiBAcmVtYXJrc1xuICogQ2FsbGVkIGluIHBhZ2Ugb2JqZWN0IGFuZCBhbHNvIHRocm91Z2ggd2lraSBkZWZhdWx0IG9iamVjdFxuICpcbiAqIEBwYXJhbSB0aXRsZSAtIFRoZSB0aXRsZSBvciBwYWdlIElkIG9mIHRoZSBwYWdlXG4gKiBAcGFyYW0gcGFnZU9wdGlvbnMgLSBXaGV0aGVyIHRvIHJlZGlyZWN0IGluIGNhc2Ugb2YgMzAyXG4gKiBAcmV0dXJucyBUaGUgc3VtbWFyeSBvZiB0aGUgcGFnZSBhcyB7QGxpbmsgd2lraVN1bW1hcnkgfCB3aWtpU3VtbWFyeX1cbiAqL1xud2lraS5zdW1tYXJ5ID0gYXN5bmMgKHRpdGxlLCBwYWdlT3B0aW9ucykgPT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGlmIChwYWdlT3B0aW9ucyA9PT0gbnVsbCB8fCBwYWdlT3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGFnZU9wdGlvbnMuYXV0b1N1Z2dlc3QpIHtcbiAgICAgICAgICAgIHRpdGxlID0gYXdhaXQgKDAsIHV0aWxzXzEuc2V0VGl0bGVGb3JQYWdlKSh0aXRsZSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgKDAsIHBhZ2VfMS5zdW1tYXJ5KSh0aXRsZSwgcGFnZU9wdGlvbnMgPT09IG51bGwgfHwgcGFnZU9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBhZ2VPcHRpb25zLnJlZGlyZWN0KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfMS5zdW1tYXJ5RXJyb3IoZXJyb3IpO1xuICAgIH1cbn07XG4vKipcbiAqIFJldHVybnMgdGhlIGh0bWwgY29udGVudCBvZiBhIHBhZ2VcbiAqXG4gKiBAcmVtYXJrc1xuICogQ2FsbGVkIGluIHBhZ2Ugb2JqZWN0IGFuZCBhbHNvIHRocm91Z2ggd2lraSBkZWZhdWx0IG9iamVjdFxuICpcbiAqIEBwYXJhbSB0aXRsZSAtIFRoZSB0aXRsZSBvciBwYWdlIElkIG9mIHRoZSBwYWdlXG4gKiBAcGFyYW0gcGFnZU9wdGlvbnMgLSBXaGV0aGVyIHRvIHJlZGlyZWN0IGluIGNhc2Ugb2YgMzAyXG4gKiBAcmV0dXJucyBUaGUgaHRtbCBjb250ZW50IGFzIHN0cmluZ1xuICpcbiAqIEBiZXRhXG4gKi9cbndpa2kuaHRtbCA9IGFzeW5jICh0aXRsZSwgcGFnZU9wdGlvbnMpID0+IHtcbiAgICB0cnkge1xuICAgICAgICBpZiAocGFnZU9wdGlvbnMgPT09IG51bGwgfHwgcGFnZU9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBhZ2VPcHRpb25zLmF1dG9TdWdnZXN0KSB7XG4gICAgICAgICAgICB0aXRsZSA9IGF3YWl0ICgwLCB1dGlsc18xLnNldFRpdGxlRm9yUGFnZSkodGl0bGUpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0ICgwLCBwYWdlXzEuaHRtbCkodGl0bGUsIHBhZ2VPcHRpb25zID09PSBudWxsIHx8IHBhZ2VPcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwYWdlT3B0aW9ucy5yZWRpcmVjdCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuaHRtbEVycm9yKGVycm9yKTtcbiAgICB9XG59O1xuLyoqXG4gKiBSZXR1cm5zIHRoZSBwbGFpbiB0ZXh0IGNvbnRlbnQgb2YgYSBwYWdlXG4gKlxuICogQHJlbWFya3NcbiAqIENhbGxlZCBpbiBwYWdlIG9iamVjdCBhbmQgYWxzbyB0aHJvdWdoIHdpa2kgZGVmYXVsdCBvYmplY3RcbiAqXG4gKiBAcGFyYW0gdGl0bGUgLSBUaGUgdGl0bGUgb3IgcGFnZSBJZCBvZiB0aGUgcGFnZVxuICogQHBhcmFtIHBhZ2VPcHRpb25zIC0gV2hldGhlciB0byByZWRpcmVjdCBpbiBjYXNlIG9mIDMwMlxuICogQHJldHVybnMgVGhlIHBsYWluIHRleHQgYXMgc3RyaW5nIGFuZCB0aGUgcGFyZW50IGFuZCByZXZpc2lvbiBpZHNcbiAqL1xud2lraS5jb250ZW50ID0gYXN5bmMgKHRpdGxlLCBwYWdlT3B0aW9ucykgPT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGlmIChwYWdlT3B0aW9ucyA9PT0gbnVsbCB8fCBwYWdlT3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGFnZU9wdGlvbnMuYXV0b1N1Z2dlc3QpIHtcbiAgICAgICAgICAgIHRpdGxlID0gYXdhaXQgKDAsIHV0aWxzXzEuc2V0VGl0bGVGb3JQYWdlKSh0aXRsZSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCAoMCwgcGFnZV8xLmNvbnRlbnQpKHRpdGxlLCBwYWdlT3B0aW9ucyA9PT0gbnVsbCB8fCBwYWdlT3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGFnZU9wdGlvbnMucmVkaXJlY3QpO1xuICAgICAgICByZXR1cm4gcmVzcG9uc2UucmVzdWx0O1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLmNvbnRlbnRFcnJvcihlcnJvcik7XG4gICAgfVxufTtcbi8qKlxuICogUmV0dXJucyB0aGUgY2V0ZWdvcmllcyBwcmVzZW50IGluIHBhZ2VcbiAqXG4gKiBAcmVtYXJrc1xuICogQ2FsbGVkIGluIHBhZ2Ugb2JqZWN0IGFuZCBhbHNvIHRocm91Z2ggd2lraSBkZWZhdWx0IG9iamVjdFxuICpcbiAqIEBwYXJhbSB0aXRsZSAtIFRoZSB0aXRsZSBvciBwYWdlIElkIG9mIHRoZSBwYWdlXG4gKiBAcGFyYW0gbGlzdE9wdGlvbnMgLSB7QGxpbmsgbGlzdE9wdGlvbnMgfCBsaXN0T3B0aW9ucyB9XG4gKiBAcmV0dXJucyBUaGUgY2F0ZWdvcmllcyBhcyBhbiBhcnJheSBvZiBzdHJpbmdcbiAqL1xud2lraS5jYXRlZ29yaWVzID0gYXN5bmMgKHRpdGxlLCBsaXN0T3B0aW9ucykgPT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGlmIChsaXN0T3B0aW9ucyA9PT0gbnVsbCB8fCBsaXN0T3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogbGlzdE9wdGlvbnMuYXV0b1N1Z2dlc3QpIHtcbiAgICAgICAgICAgIHRpdGxlID0gYXdhaXQgKDAsIHV0aWxzXzEuc2V0VGl0bGVGb3JQYWdlKSh0aXRsZSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCAoMCwgcGFnZV8xLmNhdGVnb3JpZXMpKHRpdGxlLCBsaXN0T3B0aW9ucyk7XG4gICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfMS5jYXRlZ29yaWVzRXJyb3IoZXJyb3IpO1xuICAgIH1cbn07XG4vKipcbiAqIFJldHVybnMgc3VtbWFyaWVzIGZvciAyMCBwYWdlcyByZWxhdGVkIHRvIHRoZSBnaXZlbiBwYWdlLiBTdW1tYXJpZXMgaW5jbHVkZSBwYWdlIHRpdGxlLCBuYW1lc3BhY2VcbiAqIGFuZCBpZCBhbG9uZyB3aXRoIHNob3J0IHRleHQgZGVzY3JpcHRpb24gb2YgdGhlIHBhZ2UgYW5kIGEgdGh1bWJuYWlsLlxuICpcbiAqIEByZW1hcmtzXG4gKiBDYWxsZWQgaW4gcGFnZSBvYmplY3QgYW5kIGFsc28gdGhyb3VnaCBpbmRleFxuICpcbiAqIEBwYXJhbSB0aXRsZSAtIFRoZSB0aXRsZSBvciBwYWdlIElkIG9mIHRoZSBwYWdlXG4gKiBAcGFyYW0gcGFnZU9wdGlvbnMgLSBXaGV0aGVyIHRvIHJlZGlyZWN0IGluIGNhc2Ugb2YgMzAyXG4gKiBAcmV0dXJucyBUaGUgcmVsYXRlZCBwYWdlcyBhbmQgc3VtbWFyeSBhcyBhbiBhcnJheSBvZiB7QGxpbmsgd2lraVN1bW1hcnkgfCB3aWtpU3VtbWFyeX1cbiAqXG4gKiBAZXhwZXJpbWVudGFsXG4gKi9cbndpa2kucmVsYXRlZCA9IGFzeW5jICh0aXRsZSwgcGFnZU9wdGlvbnMpID0+IHtcbiAgICB0cnkge1xuICAgICAgICBpZiAocGFnZU9wdGlvbnMgPT09IG51bGwgfHwgcGFnZU9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBhZ2VPcHRpb25zLmF1dG9TdWdnZXN0KSB7XG4gICAgICAgICAgICB0aXRsZSA9IGF3YWl0ICgwLCB1dGlsc18xLnNldFRpdGxlRm9yUGFnZSkodGl0bGUpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgKDAsIHBhZ2VfMS5yZWxhdGVkKSh0aXRsZSwgcGFnZU9wdGlvbnMgPT09IG51bGwgfHwgcGFnZU9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBhZ2VPcHRpb25zLnJlZGlyZWN0KTtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLnJlbGF0ZWRFcnJvcihlcnJvcik7XG4gICAgfVxufTtcbi8qKlxuICogR2V0cyB0aGUgbGlzdCBvZiBtZWRpYSBpdGVtcyAoaW1hZ2VzLCBhdWRpbywgYW5kIHZpZGVvKSBpbiB0aGVcbiAqIG9yZGVyIGluIHdoaWNoIHRoZXkgYXBwZWFyIG9uIGEgZ2l2ZW4gd2lraSBwYWdlLlxuICpcbiAqIEByZW1hcmtzXG4gKiBDYWxsZWQgaW4gcGFnZSBvYmplY3QgYW5kIGFsc28gdGhyb3VnaCBpbmRleFxuICpcbiAqIEBwYXJhbSB0aXRsZSAtIFRoZSB0aXRsZSBvciBwYWdlIElkIG9mIHRoZSBwYWdlXG4gKiBAcGFyYW0gcmVkaXJlY3QgLSBXaGV0aGVyIHRvIHJlZGlyZWN0IGluIGNhc2Ugb2YgMzAyXG4gKiBAcmV0dXJucyBUaGUgcmVsYXRlZCBwYWdlcyBhbmQgc3VtbWFyeSBhcyBhbiBhcnJheSBvZiB7QGxpbmsgd2lraU1lZGlhUmVzdWx0IHwgd2lraU1lZGlhUmVzdWx0fVxuICpcbiAqIEBleHBlcmltZW50YWxcbiAqL1xud2lraS5tZWRpYSA9IGFzeW5jICh0aXRsZSwgcGFnZU9wdGlvbnMpID0+IHtcbiAgICB0cnkge1xuICAgICAgICBpZiAocGFnZU9wdGlvbnMgPT09IG51bGwgfHwgcGFnZU9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBhZ2VPcHRpb25zLmF1dG9TdWdnZXN0KSB7XG4gICAgICAgICAgICB0aXRsZSA9IGF3YWl0ICgwLCB1dGlsc18xLnNldFRpdGxlRm9yUGFnZSkodGl0bGUpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgKDAsIHBhZ2VfMS5tZWRpYSkodGl0bGUsIHBhZ2VPcHRpb25zID09PSBudWxsIHx8IHBhZ2VPcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwYWdlT3B0aW9ucy5yZWRpcmVjdCk7XG4gICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfMS5tZWRpYUVycm9yKGVycm9yKTtcbiAgICB9XG59O1xuLyoqXG4gKiBSZXR1cm5zIHRoZSBsaW5rcyBwcmVzZW50IGluIHBhZ2VcbiAqXG4gKiBAcmVtYXJrc1xuICogQ2FsbGVkIGluIHBhZ2Ugb2JqZWN0IGFuZCBhbHNvIHRocm91Z2ggd2lraSBkZWZhdWx0IG9iamVjdFxuICpcbiAqIEBwYXJhbSB0aXRsZSAtIFRoZSB0aXRsZSBvciBwYWdlIElkIG9mIHRoZSBwYWdlXG4gKiBAcGFyYW0gbGlzdE9wdGlvbnMgLSB7QGxpbmsgbGlzdE9wdGlvbnMgfCBsaXN0T3B0aW9ucyB9XG4gKiBAcmV0dXJucyBUaGUgbGlua3MgYXMgYW4gYXJyYXkgb2Ygc3RyaW5nXG4gKi9cbndpa2kubGlua3MgPSBhc3luYyAodGl0bGUsIGxpc3RPcHRpb25zKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKGxpc3RPcHRpb25zID09PSBudWxsIHx8IGxpc3RPcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBsaXN0T3B0aW9ucy5hdXRvU3VnZ2VzdCkge1xuICAgICAgICAgICAgdGl0bGUgPSBhd2FpdCAoMCwgdXRpbHNfMS5zZXRUaXRsZUZvclBhZ2UpKHRpdGxlKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0ICgwLCBwYWdlXzEubGlua3MpKHRpdGxlLCBsaXN0T3B0aW9ucyk7XG4gICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfMS5saW5rc0Vycm9yKGVycm9yKTtcbiAgICB9XG59O1xuLyoqXG4gKiBSZXR1cm5zIHRoZSByZWZlcmVuY2VzIG9mIGV4dGVybmFsIGxpbmtzIHByZXNlbnQgaW4gcGFnZVxuICpcbiAqIEByZW1hcmtzXG4gKiBDYWxsZWQgaW4gcGFnZSBvYmplY3QgYW5kIGFsc28gdGhyb3VnaCB3aWtpIGRlZmF1bHQgb2JqZWN0XG4gKlxuICogQHBhcmFtIHRpdGxlIC0gVGhlIHRpdGxlIG9yIHBhZ2UgSWQgb2YgdGhlIHBhZ2VcbiAqIEBwYXJhbSBsaXN0T3B0aW9ucyAtIHtAbGluayBsaXN0T3B0aW9ucyB8IGxpc3RPcHRpb25zIH1cbiAqIEByZXR1cm5zIFRoZSByZWZlcmVuY2VzIGFzIGFuIGFycmF5IG9mIHN0cmluZ1xuICovXG53aWtpLnJlZmVyZW5jZXMgPSBhc3luYyAodGl0bGUsIGxpc3RPcHRpb25zKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKGxpc3RPcHRpb25zID09PSBudWxsIHx8IGxpc3RPcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBsaXN0T3B0aW9ucy5hdXRvU3VnZ2VzdCkge1xuICAgICAgICAgICAgdGl0bGUgPSBhd2FpdCAoMCwgdXRpbHNfMS5zZXRUaXRsZUZvclBhZ2UpKHRpdGxlKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0ICgwLCBwYWdlXzEucmVmZXJlbmNlcykodGl0bGUsIGxpc3RPcHRpb25zKTtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLmxpbmtzRXJyb3IoZXJyb3IpO1xuICAgIH1cbn07XG4vKipcbiAqIFJldHVybnMgdGhlIGNvb3JkaW5hdGVzIG9mIGEgcGFnZVxuICpcbiAqIEByZW1hcmtzXG4gKiBDYWxsZWQgaW4gcGFnZSBvYmplY3QgYW5kIGFsc28gdGhyb3VnaCB3aWtpIGRlZmF1bHQgb2JqZWN0XG4gKlxuICogQHBhcmFtIHRpdGxlIC0gVGhlIHRpdGxlIG9yIHBhZ2UgSWQgb2YgdGhlIHBhZ2VcbiAqIEBwYXJhbSBwYWdlT3B0aW9ucyAtIFdoZXRoZXIgdG8gcmVkaXJlY3QgaW4gY2FzZSBvZiAzMDJcbiAqIEByZXR1cm5zIFRoZSBjb29yZGluYXRlcyBhcyB7QGxpbmsgY29vcmRpbmF0ZXNSZXN1bHQgfCBjb29yZGluYXRlc1Jlc3VsdH1cbiAqL1xud2lraS5jb29yZGluYXRlcyA9IGFzeW5jICh0aXRsZSwgcGFnZU9wdGlvbnMpID0+IHtcbiAgICB0cnkge1xuICAgICAgICBpZiAocGFnZU9wdGlvbnMgPT09IG51bGwgfHwgcGFnZU9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBhZ2VPcHRpb25zLmF1dG9TdWdnZXN0KSB7XG4gICAgICAgICAgICB0aXRsZSA9IGF3YWl0ICgwLCB1dGlsc18xLnNldFRpdGxlRm9yUGFnZSkodGl0bGUpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgKDAsIHBhZ2VfMS5jb29yZGluYXRlcykodGl0bGUsIHBhZ2VPcHRpb25zID09PSBudWxsIHx8IHBhZ2VPcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwYWdlT3B0aW9ucy5yZWRpcmVjdCk7XG4gICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfMS5jb29yZGluYXRlc0Vycm9yKGVycm9yKTtcbiAgICB9XG59O1xuLyoqXG4gKiBSZXR1cm5zIHRoZSBsYW5ndWFnZSBsaW5rcyBwcmVzZW50IGluIHRoZSBwYWdlXG4gKlxuICogQHJlbWFya3NcbiAqIENhbGxlZCBpbiBwYWdlIG9iamVjdCBhbmQgYWxzbyB0aHJvdWdoIHdpa2kgZGVmYXVsdCBvYmplY3RcbiAqXG4gKiBAcGFyYW0gdGl0bGUgLSBUaGUgdGl0bGUgb3IgcGFnZSBJZCBvZiB0aGUgcGFnZVxuICogQHBhcmFtIGxpc3RPcHRpb25zIC0ge0BsaW5rIGxpc3RPcHRpb25zIHwgbGlzdE9wdGlvbnMgfVxuICogQHJldHVybnMgVGhlIGxpbmtzIGFzIGFuIGFycmF5IG9mIHtAbGluayBsYW5nTGlua3NSZXN1bHQgfCBsYW5nTGlua3NSZXN1bHQgfVxuICovXG53aWtpLmxhbmdMaW5rcyA9IGFzeW5jICh0aXRsZSwgbGlzdE9wdGlvbnMpID0+IHtcbiAgICB0cnkge1xuICAgICAgICBpZiAobGlzdE9wdGlvbnMgPT09IG51bGwgfHwgbGlzdE9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGxpc3RPcHRpb25zLmF1dG9TdWdnZXN0KSB7XG4gICAgICAgICAgICB0aXRsZSA9IGF3YWl0ICgwLCB1dGlsc18xLnNldFRpdGxlRm9yUGFnZSkodGl0bGUpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgKDAsIHBhZ2VfMS5sYW5nTGlua3MpKHRpdGxlLCBsaXN0T3B0aW9ucyk7XG4gICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfMS5saW5rc0Vycm9yKGVycm9yKTtcbiAgICB9XG59O1xuLyoqXG4gKiBSZXR1cm5zIHRoZSBpbmZvYm94IGNvbnRlbnQgb2YgcGFnZSBpZiBwcmVzZW50XG4gKlxuICogQHJlbWFya3NcbiAqIENhbGxlZCBpbiBwYWdlIG9iamVjdCBhbmQgYWxzbyB0aHJvdWdoIHdpa2kgZGVmYXVsdCBvYmplY3RcbiAqXG4gKiBAcGFyYW0gdGl0bGUgLSBUaGUgdGl0bGUgb3IgcGFnZSBJZCBvZiB0aGUgcGFnZVxuICogQHBhcmFtIHBhZ2VPcHRpb25zIC0gV2hldGhlciB0byByZWRpcmVjdCBpbiBjYXNlIG9mIDMwMlxuICogQHJldHVybnMgVGhlIGluZm8gYXMgSlNPTiBvYmplY3RcbiAqL1xud2lraS5pbmZvYm94ID0gYXN5bmMgKHRpdGxlLCBwYWdlT3B0aW9ucykgPT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGlmIChwYWdlT3B0aW9ucyA9PT0gbnVsbCB8fCBwYWdlT3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGFnZU9wdGlvbnMuYXV0b1N1Z2dlc3QpIHtcbiAgICAgICAgICAgIHRpdGxlID0gYXdhaXQgKDAsIHV0aWxzXzEuc2V0VGl0bGVGb3JQYWdlKSh0aXRsZSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCAoMCwgcGFnZV8xLmluZm9ib3gpKHRpdGxlLCBwYWdlT3B0aW9ucyA9PT0gbnVsbCB8fCBwYWdlT3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGFnZU9wdGlvbnMucmVkaXJlY3QpO1xuICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuaW5mb2JveEVycm9yKGVycm9yKTtcbiAgICB9XG59O1xuLyoqXG4gKiBSZXR1cm5zIHRoZSB0YWJsZSBjb250ZW50IG9mIHBhZ2UgaWYgcHJlc2VudFxuICpcbiAqIEByZW1hcmtzXG4gKiBDYWxsZWQgaW4gcGFnZSBvYmplY3QgYW5kIGFsc28gdGhyb3VnaCB3aWtpIGRlZmF1bHQgb2JqZWN0XG4gKlxuICogQHBhcmFtIHRpdGxlIC0gVGhlIHRpdGxlIG9yIHBhZ2UgSWQgb2YgdGhlIHBhZ2VcbiAqIEBwYXJhbSBwYWdlT3B0aW9ucyAtIFdoZXRoZXIgdG8gcmVkaXJlY3QgaW4gY2FzZSBvZiAzMDJcbiAqIEByZXR1cm5zIFRoZSB0YWJsZXMgYXMgYXJyYXlzIG9mIEpTT04gb2JqZWN0c1xuICovXG53aWtpLnRhYmxlcyA9IGFzeW5jICh0aXRsZSwgcGFnZU9wdGlvbnMpID0+IHtcbiAgICB0cnkge1xuICAgICAgICBpZiAocGFnZU9wdGlvbnMgPT09IG51bGwgfHwgcGFnZU9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBhZ2VPcHRpb25zLmF1dG9TdWdnZXN0KSB7XG4gICAgICAgICAgICB0aXRsZSA9IGF3YWl0ICgwLCB1dGlsc18xLnNldFRpdGxlRm9yUGFnZSkodGl0bGUpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgKDAsIHBhZ2VfMS50YWJsZXMpKHRpdGxlLCBwYWdlT3B0aW9ucyA9PT0gbnVsbCB8fCBwYWdlT3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGFnZU9wdGlvbnMucmVkaXJlY3QpO1xuICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuaW5mb2JveEVycm9yKGVycm9yKTtcbiAgICB9XG59O1xuLyoqXG4gKiBSZXR1cm5zIHRoZSBsYW5ndWFnZXMgYXZhaWxhYmxlIGluIHdpa2lcbiAqXG4gKiBAcmVtYXJrc1xuICogVXNlIHRoaXMgaWYgeW91IHdhbnQgdG8gY2hlY2sgaWYgYSBsYW51YWdlIGV4aXN0cyBiZWZvcmUgYWN0dWFsbHkgc2V0dGluZyBpdFxuICpcbiAqIEByZXR1cm5zIFRoZSBsYW5ndWFnZXMgYW4gYXJyYXkgb2Yge0BsaW5rIGxhbmd1YWdlUmVzdWx0IHwgbGFuZ3VhZ2VSZXN1bHR9XG4gKi9cbndpa2kubGFuZ3VhZ2VzID0gYXN5bmMgKCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGxhbmdQYXJhbXMgPSB7XG4gICAgICAgICAgICAnbWV0YSc6ICdzaXRlaW5mbycsXG4gICAgICAgICAgICAnc2lwcm9wJzogJ2xhbmd1YWdlcydcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCAoMCwgcmVxdWVzdF8xLmRlZmF1bHQpKGxhbmdQYXJhbXMpO1xuICAgICAgICBjb25zdCBsYW5ndWFnZXMgPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCBsYW5nIG9mIHJlc3BvbnNlLnF1ZXJ5Lmxhbmd1YWdlcykge1xuICAgICAgICAgICAgbGFuZ3VhZ2VzLnB1c2goeyBbbGFuZy5jb2RlXTogbGFuZ1snKiddIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsYW5ndWFnZXM7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEud2lraUVycm9yKGVycm9yKTtcbiAgICB9XG59O1xuLyoqXG4gKiBzZXRzIHRoZSBsYW5ndWFnZXMgdG8gZ2l2ZW4gc3RyaW5nIC0gdmVyaWZ5IHlvdXIgaW5wdXQgdXNpbmcgbGFuZ3VhZ2VzIG1ldGhvZFxuICpcbiAqIEByZW1hcmtzXG4gKiBVc2UgdGhpcyB0byBzZXQgeW91ciBsYW5ndWFnZSBmb3IgZnV0dXJlIGFwaSBjYWxsc1xuICpcbiAqIEByZXR1cm5zIFRoZSBuZXcgYXBpIGVuZHBvaW50IGFzIHN0cmluZ1xuICovXG53aWtpLnNldExhbmcgPSAobGFuZ3VhZ2UpID0+IHtcbiAgICBjb25zdCBhcGlVcmwgPSAoMCwgcmVxdWVzdF8xLnNldEFQSVVybCkobGFuZ3VhZ2UpO1xuICAgIHJldHVybiBhcGlVcmw7XG59O1xuLyoqXG4gKiBSZXR1cm5zIHRoZSBwYWdlcyB3aXRoIGNvb3JkaW5hdGVzIG5lYXIgdGhlIGdlbyBzZWFyY2ggY29vcmRpbmF0ZXNcbiAqXG4gKiBAcmVtYXJrc1xuICogTGF0aXR1ZGUgYW5kIGxvbmdpdHVkZSBzaG91bGQgYmUgdmFsaWQgdmFsdWVzXG4gKlxuICogQHBhcmFtIGxhdGl0dWRlIC0gVGhlIGxhdGl0dWRlIHRvIHNlYXJjaFxuICogQHBhcmFtIGxvbmdpdHVkZSAtIFRoZSBsb25naXR1ZGUgdG8gc2VhcmNoXG4gKiBAcGFyYW0gZ2VvT3B0aW9ucyAtIFRoZSBudW1iZXIgb2YgcmVzdWx0cyBhbmQgdGhlIHNlYXJjaCByYWRpdXMge0BsaW5rIGdlb09wdGlvbnMgfCBnZW9PcHRpb25zfVxuICogQHJldHVybnMgVGhlIHJlc3VsdHMgYXMgYW4gYXJyYXkgb2Yge0BsaW5rIGdlb1NlYXJjaFJlc3VsdCB8IGdlb1NlYXJjaFJlc3VsdH1cbiAqL1xud2lraS5nZW9TZWFyY2ggPSBhc3luYyAobGF0aXR1ZGUsIGxvbmdpdHVkZSwgZ2VvT3B0aW9ucykgPT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGdlb1NlYXJjaFBhcmFtcyA9IHtcbiAgICAgICAgICAgICdsaXN0JzogJ2dlb3NlYXJjaCcsXG4gICAgICAgICAgICAnZ3NyYWRpdXMnOiAoZ2VvT3B0aW9ucyA9PT0gbnVsbCB8fCBnZW9PcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBnZW9PcHRpb25zLnJhZGl1cykgfHwgMTAwMCxcbiAgICAgICAgICAgICdnc2Nvb3JkJzogYCR7bGF0aXR1ZGV9fCR7bG9uZ2l0dWRlfWAsXG4gICAgICAgICAgICAnZ3NsaW1pdCc6IChnZW9PcHRpb25zID09PSBudWxsIHx8IGdlb09wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGdlb09wdGlvbnMubGltaXQpIHx8IDEwLFxuICAgICAgICAgICAgJ2dzcHJvcCc6ICd0eXBlJ1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCByZXN1bHRzID0gYXdhaXQgKDAsIHJlcXVlc3RfMS5kZWZhdWx0KShnZW9TZWFyY2hQYXJhbXMpO1xuICAgICAgICBjb25zdCBzZWFyY2hQYWdlcyA9IHJlc3VsdHMucXVlcnkuZ2Vvc2VhcmNoO1xuICAgICAgICByZXR1cm4gc2VhcmNoUGFnZXM7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuZ2VvU2VhcmNoRXJyb3IoZXJyb3IpO1xuICAgIH1cbn07XG4vKipcbiAqIFJldHVybnMgdGhlIHN1Z2dlc3Rpb24gZm9yIGEgZ2l2ZW4gcXVlcnlcbiAqXG4gKiBAcmVtYXJrc1xuICogVXNlIHRoaXMgaWYgeW91IHdhbnQgeW91ciB1c2VyIHRvIGFwcHJvdmUgdGhlIHN1Z2dlc3Rpb24gYmVmb3JlIHVzaW5nIGl0XG4gKlxuICogQHBhcmFtIHF1ZXJ5IC0gVGhlIHN0cmluZyB0byBxdWVyeVxuICogQHJldHVybnMgUmV0dXJucyBhIHN0cmluZyBvciBudWxsIGJhc2VkIG9uIGlmIHN1Z2dlc3Rpb24gaXMgcHJlc2VudCBvciBub3RcbiAqL1xud2lraS5zdWdnZXN0ID0gYXN5bmMgKHF1ZXJ5KSA9PiB7XG4gICAgdmFyIF9hLCBfYiwgX2MsIF9kO1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHN1Z2dlc3RQYXJhbXMgPSB7XG4gICAgICAgICAgICAnbGlzdCc6ICdzZWFyY2gnLFxuICAgICAgICAgICAgJ3NyaW5mbyc6ICdzdWdnZXN0aW9uJyxcbiAgICAgICAgICAgICdzcnByb3AnOiAnJyxcbiAgICAgICAgICAgICdzcnNlYXJjaCc6IHF1ZXJ5XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0ICgwLCByZXF1ZXN0XzEuZGVmYXVsdCkoc3VnZ2VzdFBhcmFtcyk7XG4gICAgICAgIHJldHVybiAoKF9iID0gKF9hID0gcmVzdWx0LnF1ZXJ5KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc2VhcmNoaW5mbykgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLnN1Z2dlc3Rpb24pID8gKF9kID0gKF9jID0gcmVzdWx0LnF1ZXJ5KSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Muc2VhcmNoaW5mbykgPT09IG51bGwgfHwgX2QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kLnN1Z2dlc3Rpb24gOiBudWxsO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLnNlYXJjaEVycm9yKGVycm9yKTtcbiAgICB9XG59O1xuLyoqXG4gKiBSZXR1cm5zIHRoZSBldmVudHMgZm9yIGEgZ2l2ZW4gZGF5XG4gKlxuICogQHJlbWFya3NcbiAqIFRoZSBhcGkgcmV0dXJucyB0aGUgZXZlbnRzIHRoYXQgaGFwcGVuZWQgb24gYSBwYXJ0aWN1bGFyIG1vbnRoIGFuZCBkYXlcbiAqXG4gKiBAcGFyYW0gZXZlbnRPcHRpb25zIC0gdGhlIGV2ZW50IHR5cGVzLCBhbmQgdGhlIG1vbnRoIGFuZCBkYXkge0BsaW5rIGV2ZW50T3B0aW9ucyB8IGV2ZW50T3B0aW9uc31cbiAqIEByZXR1cm5zIFJldHVybnMgdGhlIHJlc3VsdHMgYXMgYXJyYXkgb2Yge0BsaW5rIGV2ZW50UmVzdWx0IHwgZXZlbnRSZXN1bHR9XG4gKi9cbndpa2kub25UaGlzRGF5ID0gYXN5bmMgKGV2ZW50T3B0aW9ucyA9IHt9KSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgdHlwZSA9IGV2ZW50T3B0aW9ucy50eXBlIHx8ICdhbGwnO1xuICAgICAgICBjb25zdCBtbSA9IChldmVudE9wdGlvbnMubW9udGggfHwgKDAsIHV0aWxzXzEuZ2V0Q3VycmVudE1vbnRoKSgpKS50b1N0cmluZygpLnBhZFN0YXJ0KDIsIFwiMFwiKTtcbiAgICAgICAgY29uc3QgZGQgPSAoZXZlbnRPcHRpb25zLmRheSB8fCAoMCwgdXRpbHNfMS5nZXRDdXJyZW50RGF5KSgpKS50b1N0cmluZygpLnBhZFN0YXJ0KDIsIFwiMFwiKTtcbiAgICAgICAgY29uc3QgcGF0aCA9IGBmZWVkL29udGhpc2RheS8ke3R5cGV9LyR7bW19LyR7ZGR9YDtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgKDAsIHJlcXVlc3RfMS5tYWtlUmVzdFJlcXVlc3QpKHBhdGgsIHRydWUpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLmV2ZW50c0Vycm9yKGVycm9yKTtcbiAgICB9XG59O1xuLyoqXG4gKiBSZXR1cm5zIGZlYXR1cmVkIGNvbnRlbnQgZm9yIGEgZ2l2ZW4gZGF5XG4gKlxuICogQHJlbWFya3NcbiAqIFRoZSBhcGkgcmV0dXJucyBjb250ZW50IGZlYXR1cmVkIGF0IGEgcGFydGljdWxhciBkYXRlXG4gKlxuICogQHBhcmFtIGZjT3B0aW9ucyAtIHRoZSB5ZWFyL21vbnRoL2RheSBvZiBmZWF0dXJlZCBjb250ZW50IGJ5IHtAbGluayBmY09wdGlvbnMgfCBldmVudE9wdGlvbnN9XG4gKiBAcmV0dXJucyBSZXR1cm5zIHRoZSByZXN1bHRzIGFzIGFycmF5IG9mIHtAbGluayBmY1Jlc3VsdCB8IGZjUmVzdWx0fVxuICovXG53aWtpLmZlYXR1cmVkQ29udGVudCA9IGFzeW5jIChmY09wdGlvbnMgPSB7fSkgPT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHl5eXkgPSAoZmNPcHRpb25zLnllYXIgfHwgKDAsIHV0aWxzXzEuZ2V0Q3VycmVudFllYXIpKCkpLnRvU3RyaW5nKCk7XG4gICAgICAgIGNvbnN0IG1tID0gKGZjT3B0aW9ucy5tb250aCB8fCAoMCwgdXRpbHNfMS5nZXRDdXJyZW50TW9udGgpKCkpLnRvU3RyaW5nKCkucGFkU3RhcnQoMiwgXCIwXCIpO1xuICAgICAgICBjb25zdCBkZCA9IChmY09wdGlvbnMuZGF5IHx8ICgwLCB1dGlsc18xLmdldEN1cnJlbnREYXkpKCkpLnRvU3RyaW5nKCkucGFkU3RhcnQoMiwgXCIwXCIpO1xuICAgICAgICBjb25zdCBwYXRoID0gYGZlZWQvZmVhdHVyZWQvJHt5eXl5fS8ke21tfS8ke2RkfWA7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0ICgwLCByZXF1ZXN0XzEubWFrZVJlc3RSZXF1ZXN0KShwYXRoLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfMS5mY0Vycm9yKGVycm9yKTtcbiAgICB9XG59O1xuLyoqXG4gKiBSZXR1cm5zIGEgcmFuZG9tIHBhZ2VcbiAqXG4gKiBAcGFyYW0gZm9ybWF0IC0gVGhlIGRlc2lyZWQgcmV0dXJuIGZvcm1hdFxuICogQHJldHVybnMgUmV0dXJucyBjb250ZW50IGZyb20gYSByYW5kb20gcGFnZVxuICovXG53aWtpLnJhbmRvbSA9IGFzeW5jIChmb3JtYXQpID0+IHtcbiAgICB0cnkge1xuICAgICAgICBpZiAoIWZvcm1hdCkge1xuICAgICAgICAgICAgZm9ybWF0ID0gJ3N1bW1hcnknO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBhdGggPSBgcGFnZS9yYW5kb20vJHtmb3JtYXR9YDtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgKDAsIHJlcXVlc3RfMS5tYWtlUmVzdFJlcXVlc3QpKHBhdGgpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLndpa2lFcnJvcihlcnJvcik7XG4gICAgfVxufTtcbi8qKlxuICogUmV0dXJucyBtb2JpbGUtb3B0aW1pc2VkIEhUTUwgb2YgYSBwYWdlXG4gKlxuICogQHBhcmFtIHRpdGxlIC0gVGhlIHRpdGxlIG9mIHRoZSBwYWdlIHRvIHF1ZXJ5XG4gKiBAcGFyYW0gcGFnZU9wdGlvbnMgLSBXaGV0aGVyIHRvIHJlZGlyZWN0IGluIGNhc2Ugb2YgMzAyXG4gKiBAcmV0dXJucyBSZXR1cm5zIEhUTUwgc3RyaW5nXG4gKi9cbndpa2kubW9iaWxlSHRtbCA9IGFzeW5jICh0aXRsZSwgcGFnZU9wdGlvbnMpID0+IHtcbiAgICB0cnkge1xuICAgICAgICBpZiAocGFnZU9wdGlvbnMgPT09IG51bGwgfHwgcGFnZU9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBhZ2VPcHRpb25zLmF1dG9TdWdnZXN0KSB7XG4gICAgICAgICAgICB0aXRsZSA9IGF3YWl0ICgwLCB1dGlsc18xLnNldFRpdGxlRm9yUGFnZSkodGl0bGUpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0ICgwLCBwYWdlXzEubW9iaWxlSHRtbCkodGl0bGUsIHBhZ2VPcHRpb25zID09PSBudWxsIHx8IHBhZ2VPcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwYWdlT3B0aW9ucy5yZWRpcmVjdCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuaHRtbEVycm9yKGVycm9yKTtcbiAgICB9XG59O1xuLyoqXG4gKiBSZXR1cm5zIHBkZiBvZiBhIGdpdmVuIHBhZ2VcbiAqXG4gKiBAcGFyYW0gdGl0bGUgLSBUaGUgdGl0bGUgb2YgdGhlIHBhZ2UgdG8gcXVlcnlcbiAqIEBwYXJhbSBwZGZPcHRpb25zIC0ge0BsaW5rIHBkZk9wdGlvbnMgfCBwZGZPcHRpb25zIH1cbiAqIEByZXR1cm5zIFJldHVybnMgcGRmIGZvcm1hdFxuICovXG53aWtpLnBkZiA9IGFzeW5jICh0aXRsZSwgcGRmT3B0aW9ucykgPT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGlmIChwZGZPcHRpb25zID09PSBudWxsIHx8IHBkZk9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBkZk9wdGlvbnMuYXV0b1N1Z2dlc3QpIHtcbiAgICAgICAgICAgIHRpdGxlID0gYXdhaXQgKDAsIHV0aWxzXzEuc2V0VGl0bGVGb3JQYWdlKSh0aXRsZSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgKDAsIHBhZ2VfMS5wZGYpKHRpdGxlLCBwZGZPcHRpb25zKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfMS5wZGZFcnJvcihlcnJvcik7XG4gICAgfVxufTtcbi8qKlxuICogUmV0dXJucyBjaXRhdGlvbiBvZiBhIGdpdmVuIHBhZ2UsIG9yIHF1ZXJ5IHN0cmluZ1xuICpcbiAqIEBwYXJhbSBmb3JtYXQgLSB0aGUgZm9ybWF0IG9mIHRoZSBjaXRhdGlvbiByZXN1bHRcbiAqIEBwYXJhbSBxdWVyeSAtIHVybCBvciBxdWVyeSBzdHJpbmdcbiAqIEBwYXJhbSBsYW5ndWFnZSAtIGlmIHlvdSB3YW50IGxhbnVhZ2UgZW5hYmxlZCByZXN1bHRzXG4gKiBAcmV0dXJucyBSZXR1cm5zIGNpdGF0aW9uIGRhdGFcbiAqL1xud2lraS5jaXRhdGlvbiA9IGFzeW5jIChxdWVyeSwgZm9ybWF0LCBsYW5ndWFnZSkgPT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0ICgwLCBwYWdlXzEuY2l0YXRpb24pKHF1ZXJ5LCBmb3JtYXQsIGxhbmd1YWdlKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfMS5jaXRhdGlvbkVycm9yKGVycm9yKTtcbiAgICB9XG59O1xuLyoqXG4gKiBSZXR1cm5zIHRoZSBhdXRvY29tcGxldGlvbiByZXN1bHRzIGZvciBhIGdpdmVuIHF1ZXJ5XG4gKlxuICogQHJlbWFya3NcbiAqIExpbWl0cyByZXN1bHRzIGJ5IGRlZmF1bHQgdG8gMTBcbiAqXG4gKiBAcGFyYW0gcXVlcnkgLSBUaGUgc3RyaW5nIHRvIHNlYXJjaCBmb3JcbiAqIEBwYXJhbSBhdXRvY29tcGxldGlvbk9wdGlvbnMgLSBUaGUgbnVtYmVyIG9mIHJlc3VsdHMge0BsaW5rIGF1dG9jb21wbGV0aW9uT3B0aW9ucyB8IGF1dG9jb21wbGV0aW9uT3B0aW9ucyB9XG4gKiBAcmV0dXJucyBhbiBhcnJheSBvZiBzdHJpbmdcbiAqL1xud2lraS5hdXRvY29tcGxldGlvbnMgPSBhc3luYyAocXVlcnksIGF1dG9jb21wbGV0aW9uT3B0aW9ucykgPT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGF1dG9jb21wbGV0aW9uc1BhcmFtcyA9IHtcbiAgICAgICAgICAgIGxpc3Q6IFwic2VhcmNoXCIsXG4gICAgICAgICAgICBsaW1pdDogKGF1dG9jb21wbGV0aW9uT3B0aW9ucyA9PT0gbnVsbCB8fCBhdXRvY29tcGxldGlvbk9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGF1dG9jb21wbGV0aW9uT3B0aW9ucy5saW1pdCkgfHwgMTAsXG4gICAgICAgICAgICBzZWFyY2g6IHF1ZXJ5LFxuICAgICAgICAgICAgYWN0aW9uOiBcIm9wZW5zZWFyY2hcIixcbiAgICAgICAgICAgIHJlZGlyZWN0OiBcInJldHVyblwiXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IFssIGF1dG9jb21wbGV0aW9uc10gPSBhd2FpdCAoMCwgcmVxdWVzdF8xLmRlZmF1bHQpKGF1dG9jb21wbGV0aW9uc1BhcmFtcywgZmFsc2UpO1xuICAgICAgICByZXR1cm4gYXV0b2NvbXBsZXRpb25zO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLmF1dG9jb21wbGV0aW9uc0Vycm9yKGVycm9yKTtcbiAgICB9XG59O1xuLyoqXG4gKiBDaGFuZ2UgdGhlIGRlZmF1bHQgdXNlciBhZ2VudCBmb3Igd2lraXBlZGlhXG4gKlxuICogQHBhcmFtIHVzZXJBZ2VudCAtIFRoZSBuZXcgY3VzdG9tIHVzZXJBZ2VudFxuICovXG53aWtpLnNldFVzZXJBZ2VudCA9ICh1c2VyQWdlbnQpID0+IHtcbiAgICAoMCwgcmVxdWVzdF8xLnNldFVzZXJBZ2VudCkodXNlckFnZW50KTtcbn07XG5leHBvcnRzLmRlZmF1bHQgPSB3aWtpO1xuLy8gRm9yIENvbW1vbkpTIGRlZmF1bHQgZXhwb3J0IHN1cHBvcnRcbm1vZHVsZS5leHBvcnRzID0gd2lraTtcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSB3aWtpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2Vycm9yc1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vcmVzdWx0VHlwZXNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL29wdGlvblR5cGVzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9wYWdlXCIpLCBleHBvcnRzKTtcbiIsICJpbXBvcnQgeyBQbHVnaW4sIEl0ZW1WaWV3LCBXb3Jrc3BhY2VMZWFmLCBkZWJvdW5jZSwgTm90aWNlIH0gZnJvbSAnb2JzaWRpYW4nO1xuaW1wb3J0ICogYXMgZDMgZnJvbSBcImQzXCI7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgYXBpQ2xpZW50IH0gZnJvbSBcIi4vYXBpQ2xpZW50XCI7XG5cbmNvbnN0IERFRkFVTFRfTkVUV09SS19TRVRUSU5HUyA6IGFueSA9IHtcblx0cmVsZXZhbmNlU2NvcmVUaHJlc2hvbGQ6IDAuNSxcblx0bm9kZVNpemU6IDQsXG5cdGxpbmtUaGlja25lc3M6IDAuMyxcblx0cmVwZWxGb3JjZTogNDAwLFxuXHRsaW5rRm9yY2U6IDAuNCxcblx0bGlua0Rpc3RhbmNlOiA3MCxcblx0Y2VudGVyRm9yY2U6IDAuMSxcblx0dGV4dEZhZGVUaHJlc2hvbGQ6IDEuMSxcblx0bWluTGlua1RoaWNrbmVzczogMC4zLFxuXHRtYXhMaW5rVGhpY2tuZXNzOiAwLjYsXG5cdG1heExhYmVsQ2hhcmFjdGVyczogMTgsXG5cdGxpbmtMYWJlbFNpemU6IDcsXG5cdG5vZGVMYWJlbFNpemU6IDYsXG5cdGNvbm5lY3Rpb25UeXBlOiAnYmxvY2snLFxuXHRub3RlRmlsbENvbG9yOiAnIzdjODU5NCcsXG5cdGJsb2NrRmlsbENvbG9yOiAnIzkyNmVjOSdcbn1cblxuXG4vKlxuXHRNYWluIENvbG9yc1xuXHRNZW51IHRleHQ6ICNhM2FlY2Jcblx0SG92ZXJlZE92ZXJOb2RlOiAjZDQ2ZWJlXG5cdE5vcm1hbE5vZGU6ICM5MjZlYzlcblx0Y2VudHJhbE5vZGU6ICM3Yzg1OTRcblx0TGluazogIzRjNzc4N1xuXHRTbGlkZXJLbm9iOiAjZjNlZTVkXG4qL1xuXG5pbnRlcmZhY2UgUGx1Z2luU2V0dGluZ3Mge1xuICAgIHJlbGV2YW5jZVNjb3JlVGhyZXNob2xkOiBudW1iZXI7XG4gICAgbm9kZVNpemU6IG51bWJlcjtcbiAgICBsaW5rVGhpY2tuZXNzOiBudW1iZXI7XG4gICAgcmVwZWxGb3JjZTogbnVtYmVyO1xuICAgIGxpbmtGb3JjZTogbnVtYmVyO1xuICAgIGxpbmtEaXN0YW5jZTogbnVtYmVyO1xuICAgIGNlbnRlckZvcmNlOiBudW1iZXI7XG4gICAgdGV4dEZhZGVUaHJlc2hvbGQ6IG51bWJlcjtcbiAgICBtaW5MaW5rVGhpY2tuZXNzOiBudW1iZXI7XG4gICAgbWF4TGlua1RoaWNrbmVzczogbnVtYmVyO1xuICAgIG1heExhYmVsQ2hhcmFjdGVyczogbnVtYmVyO1xuICAgIGxpbmtMYWJlbFNpemU6IG51bWJlcjtcbiAgICBub2RlTGFiZWxTaXplOiBudW1iZXI7XG5cdGNvbm5lY3Rpb25UeXBlOiBzdHJpbmc7XG5cdG5vdGVGaWxsQ29sb3I6IHN0cmluZztcblx0YmxvY2tGaWxsQ29sb3I6IHN0cmluZztcbn1cblxuZGVjbGFyZSBnbG9iYWwge1xuICAgIGludGVyZmFjZSBXaW5kb3cge1xuICAgICAgICBTbWFydFNlYXJjaDogYW55O1xuICAgIH1cbn1cblxuY2xhc3MgU2NHcmFwaEl0ZW1WaWV3IGV4dGVuZHMgSXRlbVZpZXcge1xuXG5cdHByaXZhdGUgcGx1Z2luOiBTY0dyYXBoVmlldztcblxuXHRjdXJyZW50Tm90ZUtleTogc3RyaW5nOyBcblx0Y2VudHJhbE5vdGU6IGFueTtcblx0Y2VudHJhbE5vZGU6IGFueTtcblx0Y29ubmVjdGlvblR5cGUgPSAnYmxvY2snO1xuICAgIGlzSG92ZXJpbmc6IGJvb2xlYW47IFxuXHRyZWxldmFuY2VTY29yZVRocmVzaG9sZCA9IDAuNTtcblx0bm9kZVNpemUgPSA0O1xuXHRsaW5rVGhpY2tuZXNzID0gMC4zO1xuXHRyZXBlbEZvcmNlID0gNDAwO1xuXHRsaW5rRm9yY2UgPSAwLjQ7XG5cdGxpbmtEaXN0YW5jZSA9IDcwO1xuXHRjZW50ZXJGb3JjZSA9IDAuMztcblx0dGV4dEZhZGVUaHJlc2hvbGQgPSAxLjE7XG5cdG1pblNjb3JlID0gMTtcblx0bWF4U2NvcmUgPSAwO1xuXHRtaW5Ob2RlU2l6ZSA9IDM7XG5cdG1heE5vZGVTaXplID0gNjtcblx0bWluTGlua1RoaWNrbmVzcyA9IDAuMztcblx0bWF4TGlua1RoaWNrbmVzcyA9IDAuNjtcblx0bm9kZVNlbGVjdGlvbjogYW55O1xuXHRsaW5rU2VsZWN0aW9uOiBhbnk7XG5cdGxpbmtMYWJlbFNlbGVjdGlvbjogYW55O1xuXHRsYWJlbFNlbGVjdGlvbjogYW55O1xuXHR1cGRhdGluZ1Zpc3VhbGl6YXRpb246IGJvb2xlYW47XG5cdGlzQ3RybFByZXNzZWQgPSBmYWxzZTtcblx0aXNBbHRQcmVzc2VkID0gZmFsc2U7XG4gICAgaXNEcmFnZ2luZyA9IGZhbHNlO1xuXHRpc0NoYW5naW5nQ29ubmVjdGlvblR5cGUgPSB0cnVlO1xuICAgIHNlbGVjdGlvbkJveDogYW55O1xuXHR2YWxpZGF0ZWRMaW5rczogYW55O1xuXHRtYXhMYWJlbENoYXJhY3RlcnMgPSAxODtcblx0bGlua0xhYmVsU2l6ZSA9IDc7XG5cdG5vZGVMYWJlbFNpemUgPSA2O1xuXHRibG9ja0ZpbGxDb2xvciA9ICcjOTI2ZWM5Jztcblx0bm90ZUZpbGxDb2xvciA9ICcjN2M4NTk0Jztcblx0c3RhcnRYID0gMDtcblx0c3RhcnRZID0gMDtcblx0bm9kZXMgOiBhbnkgPSBbXTtcblx0bGlua3MgOiBhbnkgPSBbXTtcblx0Y29ubmVjdGlvbnMgOiBhbnkgPSBbXTtcblx0c3ZnR3JvdXA6IGQzLlNlbGVjdGlvbjxTVkdHRWxlbWVudCwgdW5rbm93biwgbnVsbCwgdW5kZWZpbmVkPjtcblx0c3ZnOiBkMy5TZWxlY3Rpb248U1ZHU1ZHRWxlbWVudCwgdW5rbm93biwgbnVsbCwgdW5kZWZpbmVkPjtcblx0Y2VudGVySGlnaGxpZ2h0ZWQgPSBmYWxzZTtcblx0c2ltdWxhdGlvbjogYW55O1xuXHRkcmFnZ2luZyA9IGZhbHNlO1xuXHRoaWdobGlnaHRlZE5vZGVJZCA9ICctMSc7XG5cdGN1cnJlbnROb3RlQ2hhbmdpbmcgPSBmYWxzZTtcblx0aXNGaWx0ZXJpbmcgPSBmYWxzZTtcdFxuXHRzZXR0aW5nc01hZGUgPSBmYWxzZTtcblxuICAgIGNvbnN0cnVjdG9yKGxlYWY6IFdvcmtzcGFjZUxlYWYsIHBsdWdpbjogU2NHcmFwaFZpZXcpIHtcbiAgICAgICAgc3VwZXIobGVhZik7XG5cdFx0dGhpcy5jdXJyZW50Tm90ZUtleSA9ICcnO1xuXHRcdHRoaXMuaXNIb3ZlcmluZyA9IGZhbHNlO1xuXHRcdHRoaXMucGx1Z2luID0gcGx1Z2luO1xuXG5cdFx0Ly8gU2V0IHRoZSBpbml0aWFsIHZhbHVlcyBmcm9tIHRoZSBsb2FkZWQgc2V0dGluZ3NcbiAgICAgICAgdGhpcy5yZWxldmFuY2VTY29yZVRocmVzaG9sZCA9IHRoaXMucGx1Z2luLnNldHRpbmdzLnJlbGV2YW5jZVNjb3JlVGhyZXNob2xkO1xuICAgICAgICB0aGlzLm5vZGVTaXplID0gdGhpcy5wbHVnaW4uc2V0dGluZ3Mubm9kZVNpemU7XG4gICAgICAgIHRoaXMubGlua1RoaWNrbmVzcyA9IHRoaXMucGx1Z2luLnNldHRpbmdzLmxpbmtUaGlja25lc3M7XG4gICAgICAgIHRoaXMucmVwZWxGb3JjZSA9IHRoaXMucGx1Z2luLnNldHRpbmdzLnJlcGVsRm9yY2U7XG4gICAgICAgIHRoaXMubGlua0ZvcmNlID0gdGhpcy5wbHVnaW4uc2V0dGluZ3MubGlua0ZvcmNlO1xuICAgICAgICB0aGlzLmxpbmtEaXN0YW5jZSA9IHRoaXMucGx1Z2luLnNldHRpbmdzLmxpbmtEaXN0YW5jZTtcbiAgICAgICAgdGhpcy5jZW50ZXJGb3JjZSA9IHRoaXMucGx1Z2luLnNldHRpbmdzLmNlbnRlckZvcmNlO1xuICAgICAgICB0aGlzLnRleHRGYWRlVGhyZXNob2xkID0gdGhpcy5wbHVnaW4uc2V0dGluZ3MudGV4dEZhZGVUaHJlc2hvbGQ7XG4gICAgICAgIHRoaXMubWluTGlua1RoaWNrbmVzcyA9IHRoaXMucGx1Z2luLnNldHRpbmdzLm1pbkxpbmtUaGlja25lc3M7XG4gICAgICAgIHRoaXMubWF4TGlua1RoaWNrbmVzcyA9IHRoaXMucGx1Z2luLnNldHRpbmdzLm1heExpbmtUaGlja25lc3M7XG4gICAgICAgIHRoaXMubWF4TGFiZWxDaGFyYWN0ZXJzID0gdGhpcy5wbHVnaW4uc2V0dGluZ3MubWF4TGFiZWxDaGFyYWN0ZXJzO1xuICAgICAgICB0aGlzLmxpbmtMYWJlbFNpemUgPSB0aGlzLnBsdWdpbi5zZXR0aW5ncy5saW5rTGFiZWxTaXplO1xuICAgICAgICB0aGlzLm5vZGVMYWJlbFNpemUgPSB0aGlzLnBsdWdpbi5zZXR0aW5ncy5ub2RlTGFiZWxTaXplO1xuICAgICAgICB0aGlzLmNvbm5lY3Rpb25UeXBlID0gdGhpcy5wbHVnaW4uc2V0dGluZ3MuY29ubmVjdGlvblR5cGU7XG5cdFx0dGhpcy5ub3RlRmlsbENvbG9yID0gdGhpcy5wbHVnaW4uc2V0dGluZ3Mubm90ZUZpbGxDb2xvcjtcblx0XHR0aGlzLmJsb2NrRmlsbENvbG9yID0gdGhpcy5wbHVnaW4uc2V0dGluZ3MuYmxvY2tGaWxsQ29sb3I7XG5cbiAgICB9XG5cbiAgICBnZXRWaWV3VHlwZSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gXCJ3aWtpcGVkaWEtY29ubmVjdGlvbnMtdmlzdWFsaXplclwiO1xuICAgIH1cblxuICAgIGdldERpc3BsYXlUZXh0KCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBcIldpa3BlZGlhIGNvbm5lY3Rpb25zIHZpc3VhbGl6ZXJcIjtcbiAgICB9XG5cbiAgICBnZXRJY29uKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBcImdpdC1mb3JrXCI7XG4gICAgfVxuXG5cdHVwZGF0ZU5vZGVBcHBlYXJhbmNlKCkge1xuXHRcdHRoaXMubm9kZVNlbGVjdGlvbi50cmFuc2l0aW9uKCkuZHVyYXRpb24oNTAwKVxuXHRcdFx0LmF0dHIoJ2ZpbGwnLCAoZDogYW55KSA9PiBkLmZpbGwpXG5cdFx0XHQuYXR0cignc3Ryb2tlJywgKGQ6IGFueSkgPT4gZC5zZWxlY3RlZCA/ICdibGFuY2hlZGFsbW9uZCcgOiAoZC5oaWdobGlnaHRlZCA/ICcjZDQ2ZWJlJyA6ICd0cmFuc3BhcmVudCcpKVxuXHRcdFx0LmF0dHIoJ3N0cm9rZS13aWR0aCcsIChkOiBhbnkpID0+IGQuc2VsZWN0ZWQgPyAxLjUgOiAoZC5oaWdobGlnaHRlZCA/IDAuMyA6IDApKVxuXHRcdFx0LmF0dHIoJ29wYWNpdHknLCAoZDogYW55KSA9PiB0aGlzLmdldE5vZGVPcGFjaXR5KGQpKTtcblx0fVxuXHRcblxuXHQvLyBnZXROb2RlRmlsbChkOiBhbnkpIHtcblx0Ly8gXHRpZiAoZC5pZCA9PT0gdGhpcy5jZW50cmFsTm9kZS5pZCkgcmV0dXJuICcjN2M4NTk0Jztcblx0Ly8gXHRpZiAoZC5oaWdobGlnaHRlZCAmJiAhZC5zZWxlY3RlZCkgcmV0dXJuICcjZDQ2ZWJlJztcblx0Ly8gXHRyZXR1cm4gZC5ncm91cCA9PT0gJ25vdGUnID8gJyM3Yzg1OTQnIDogJyM5MjZlYzknO1xuXHQvLyB9XG5cblx0Z2V0Tm9kZU9wYWNpdHkoZDogYW55KSB7XG5cdFx0aWYgKGQuaWQgPT09IHRoaXMuY2VudHJhbE5vZGUuaWQpIHJldHVybiAxO1xuXHRcdGlmIChkLnNlbGVjdGVkKSByZXR1cm4gMTtcblx0XHRpZiAoZC5oaWdobGlnaHRlZCkgcmV0dXJuIDAuODtcblx0XHRyZXR1cm4gdGhpcy5pc0hvdmVyaW5nID8gMC4xIDogMTtcblx0fVxuXG4gICAgdG9nZ2xlTm9kZVNlbGVjdGlvbihub2RlSWQ6IHN0cmluZykge1xuXHRcdGNvbnN0IG5vZGUgPSB0aGlzLm5vZGVTZWxlY3Rpb24uZGF0YSgpLmZpbmQoKGQ6IGFueSkgPT4gZC5pZCA9PT0gbm9kZUlkKTtcblx0XHRpZiAobm9kZSkge1xuXHRcdFx0bm9kZS5zZWxlY3RlZCA9ICFub2RlLnNlbGVjdGVkO1xuXHRcdFx0aWYgKCFub2RlLnNlbGVjdGVkKSB7XG5cdFx0XHRcdG5vZGUuaGlnaGxpZ2h0ZWQgPSBmYWxzZTtcblx0XHRcdH1cblx0XHRcdHRoaXMudXBkYXRlTm9kZUFwcGVhcmFuY2UoKTtcblx0XHR9XG5cdH1cblx0XG5cblx0Y2xlYXJTZWxlY3Rpb25zKCkge1xuXHRcdHRoaXMubm9kZVNlbGVjdGlvbi5lYWNoKChkOiBhbnkpID0+IHtcblx0XHRcdGQuc2VsZWN0ZWQgPSBmYWxzZTtcblx0XHRcdGQuaGlnaGxpZ2h0ZWQgPSBmYWxzZTtcblx0XHR9KTtcblx0XHR0aGlzLnVwZGF0ZU5vZGVBcHBlYXJhbmNlKCk7XG5cdH1cblxuXHRoaWdobGlnaHROb2RlKG5vZGU6IGFueSkge1xuXHRcdFxuICAgICAgICBpZiAobm9kZS5pZCA9PT0gdGhpcy5jZW50cmFsTm9kZS5pZCkge1xuICAgICAgICAgICAgdGhpcy5jZW50ZXJIaWdobGlnaHRlZCA9IHRydWU7XG4gICAgICAgIH1cblxuXHRcdHRoaXMuaGlnaGxpZ2h0ZWROb2RlSWQgPSBub2RlLmlkO1xuXG4gICAgICAgIHRoaXMubm9kZVNlbGVjdGlvbi5lYWNoKChkOiBhbnkpID0+IHtcbiAgICAgICAgICAgIGlmIChkLmlkICE9PSB0aGlzLmNlbnRyYWxOb2RlLmlkKSB7XG4gICAgICAgICAgICAgICAgZC5oaWdobGlnaHRlZCA9IChkLmlkID09PSBub2RlLmlkIHx8IHRoaXMudmFsaWRhdGVkTGlua3Muc29tZSgobGluazogYW55KSA9PlxuICAgICAgICAgICAgICAgICAgICAobGluay5zb3VyY2UuaWQgPT09IG5vZGUuaWQgJiYgbGluay50YXJnZXQuaWQgPT09IGQuaWQpIHx8XG4gICAgICAgICAgICAgICAgICAgIChsaW5rLnRhcmdldC5pZCA9PT0gbm9kZS5pZCAmJiBsaW5rLnNvdXJjZS5pZCA9PT0gZC5pZCkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMudXBkYXRlTm9kZUFwcGVhcmFuY2UoKTtcbiAgICAgICAgdGhpcy51cGRhdGVMaW5rQXBwZWFyYW5jZShub2RlKTtcbiAgICAgICAgdGhpcy51cGRhdGVMYWJlbEFwcGVhcmFuY2Uobm9kZSk7XG4gICAgICAgIHRoaXMudXBkYXRlTGlua0xhYmVsQXBwZWFyYW5jZShub2RlKTtcbiAgICB9XG5cdFxuXHRcblx0dXBkYXRlSGlnaGxpZ2h0KGQ6IGFueSwgbm9kZTogYW55KSB7XG5cdFx0aWYgKGQuaWQgIT09IHRoaXMuY2VudHJhbE5vZGUuaWQpIHtcblx0XHRcdGQuaGlnaGxpZ2h0ZWQgPSAoZC5pZCA9PT0gbm9kZS5pZCB8fCB0aGlzLnZhbGlkYXRlZExpbmtzLnNvbWUoKGxpbms6IGFueSkgPT5cblx0XHRcdFx0KGxpbmsuc291cmNlLmlkID09PSBub2RlLmlkICYmIGxpbmsudGFyZ2V0LmlkID09PSBkLmlkKSB8fFxuXHRcdFx0XHQobGluay50YXJnZXQuaWQgPT09IG5vZGUuaWQgJiYgbGluay5zb3VyY2UuaWQgPT09IGQuaWQpKSk7XG5cdFx0fVxuXHR9XG5cblx0dXBkYXRlTGlua0FwcGVhcmFuY2Uobm9kZTogYW55KSB7XG5cdFx0dGhpcy5saW5rU2VsZWN0aW9uLnRyYW5zaXRpb24oKS5kdXJhdGlvbig1MDApXG5cdFx0XHQuYXR0cignb3BhY2l0eScsIChkOiBhbnkpID0+IChkLnNvdXJjZS5pZCA9PT0gbm9kZS5pZCB8fCBkLnRhcmdldC5pZCA9PT0gbm9kZS5pZCkgPyAxIDogMC4xKTtcblx0fVxuXG5cdHVwZGF0ZUxhYmVsQXBwZWFyYW5jZShub2RlOiBhbnkpIHtcblx0XHR0aGlzLmxhYmVsU2VsZWN0aW9uLnRyYW5zaXRpb24oKS5kdXJhdGlvbig1MDApXG5cdFx0XHQuYXR0cignb3BhY2l0eScsIChkOiBhbnkpID0+IHRoaXMuZ2V0TGFiZWxPcGFjaXR5KGQsIG5vZGUpKVxuXHRcdFx0LnRleHQoKGQ6IGFueSkgPT4gIGQuaWQgPT09IHRoaXMuaGlnaGxpZ2h0ZWROb2RlSWQgPyB0aGlzLmZvcm1hdExhYmVsKGQubmFtZSwgZmFsc2UpIDogdGhpcy5mb3JtYXRMYWJlbChkLm5hbWUsIHRydWUpKTtcblx0fVxuXHRcblx0Z2V0TGFiZWxPcGFjaXR5KGQ6IGFueSwgbm9kZTogYW55KSB7XG5cdFx0aWYgKCFub2RlKSB7XG5cdFx0XHRyZXR1cm4gMTsgLy8gUmVzZXQgdG8gZnVsbCBvcGFjaXR5IGlmIG5vIG5vZGUgaXMgaGlnaGxpZ2h0ZWRcblx0XHR9XG5cdFx0cmV0dXJuIChkLmlkID09PSBub2RlLmlkIHx8IHRoaXMudmFsaWRhdGVkTGlua3Muc29tZSgobGluazogYW55KSA9PlxuXHRcdFx0KGxpbmsuc291cmNlLmlkID09PSBub2RlLmlkICYmIGxpbmsudGFyZ2V0LmlkID09PSBkLmlkKSkgfHwgZC5pZCA9PSB0aGlzLmNlbnRyYWxOb2RlLmlkKSA/IDEgOiAwLjE7XG5cdH1cblx0XG5cdHVwZGF0ZUxpbmtMYWJlbEFwcGVhcmFuY2Uobm9kZTogYW55KSB7XG5cdFx0dGhpcy5saW5rTGFiZWxTZWxlY3Rpb24udHJhbnNpdGlvbigpLmR1cmF0aW9uKDUwMClcblx0XHQuYXR0cignb3BhY2l0eScsIChkOiBhbnkpID0+IHtcblx0XHRcdHJldHVybiAoZC5zb3VyY2UuaWQgPT09IG5vZGUuaWQgfHwgZC50YXJnZXQuaWQgPT09IG5vZGUuaWQpID8gMSA6IDA7XG5cdFx0fSlcblx0fVxuXHRcblxuXHR1bmhpZ2hsaWdodE5vZGUobm9kZSA6IGFueSkge1xuXG5cdFx0Ly8gUmVzZXQgaGlnaGxpZ2h0ZWQgbm9kZWlkXG5cdFx0dGhpcy5oaWdobGlnaHRlZE5vZGVJZCA9ICctMSc7XG5cbiAgICAgICAgdGhpcy5ub2RlU2VsZWN0aW9uLmVhY2goKGQ6IGFueSkgPT4ge1xuICAgICAgICAgICAgaWYgKGQuaWQgIT09IHRoaXMuY2VudHJhbE5vZGUuaWQpIGQuaGlnaGxpZ2h0ZWQgPSBmYWxzZTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy51cGRhdGVOb2RlQXBwZWFyYW5jZSgpO1xuICAgICAgICB0aGlzLnJlc2V0TGlua0FwcGVhcmFuY2UoKTtcbiAgICAgICAgdGhpcy5yZXNldExhYmVsQXBwZWFyYW5jZSgpO1xuICAgICAgICB0aGlzLnJlc2V0TGlua0xhYmVsQXBwZWFyYW5jZSgpO1xuICAgICAgICB0aGlzLnVwZGF0ZUxhYmVsQXBwZWFyYW5jZShudWxsKTsgLy8gUGFzcyBmYWxzZSB0byByZXNldCBsYWJlbCBwb3NpdGlvblxuICAgIH1cblx0XG5cblx0cmVzZXRMaW5rQXBwZWFyYW5jZSgpIHtcblx0XHR0aGlzLmxpbmtTZWxlY3Rpb24udHJhbnNpdGlvbigpLmR1cmF0aW9uKDUwMCkuYXR0cignb3BhY2l0eScsIDEpO1xuXHR9XG5cblx0cmVzZXRMYWJlbEFwcGVhcmFuY2UoKSB7XG5cdFx0dGhpcy5sYWJlbFNlbGVjdGlvbi50cmFuc2l0aW9uKCkuZHVyYXRpb24oNTAwKS5hdHRyKCdvcGFjaXR5JywgMSlcblx0XHRcdC50ZXh0KChkOiBhbnkpID0+IHRoaXMuZm9ybWF0TGFiZWwoZC5uYW1lLCB0cnVlKSk7XG5cdH1cblxuXHRyZXNldExpbmtMYWJlbEFwcGVhcmFuY2UoKSB7XG5cdFx0dGhpcy5saW5rTGFiZWxTZWxlY3Rpb24udHJhbnNpdGlvbigpLmR1cmF0aW9uKDUwMCkuYXR0cignb3BhY2l0eScsIDApO1xuXHR9XG5cblx0Zm9ybWF0TGFiZWwocGF0aDogc3RyaW5nLCB0cnVuY2F0ZTogYm9vbGVhbiA9IHRydWUpIHtcblx0XHRsZXQgbGFiZWwgPSB0aGlzLmV4dHJhY3RMYWJlbChwYXRoKTtcblx0XHRyZXR1cm4gdHJ1bmNhdGUgPyB0aGlzLnRydW5jYXRlTGFiZWwobGFiZWwpIDogbGFiZWw7XG5cdH1cblxuXHRleHRyYWN0TGFiZWwocGF0aDogc3RyaW5nKSB7XG5cdFx0bGV0IGxhYmVsID0gcGF0aDtcblxuXHRcdC8vIFJlbW92ZSB0aGUgYW5jaG9yIHBhcnQgaWYgaXQgZXhpc3RzXG5cdFx0aWYgKHBhdGggJiYgcGF0aC5pbmNsdWRlcygnIycpKSB7XG5cblx0XHRcdGNvbnN0IHBhcnRzID0gcGF0aC5zcGxpdCgnIycpO1xuXG5cdFx0XHRsZXQgbGFzdFBhcnQgPSBwYXJ0c1twYXJ0cy5sZW5ndGggLSAxXTsgLy8gVGFrZSB0aGUgbGFzdCBwYXJ0IGFmdGVyIHNwbGl0dGluZyBieSAnIydcbiAgICBcblx0XHRcdC8vIENoZWNrIGlmIHRoZSBsYXN0IHBhcnQgaXMgZW1wdHkgb3IgbWF0Y2hlcyB0aGUgcGF0dGVybiB7bnVtYmVyfVxuXHRcdFx0aWYgKGxhc3RQYXJ0ID09PSAnJyB8fCAvXlxce1xcZCtcXH0kLy50ZXN0KGxhc3RQYXJ0KSkge1xuXHRcdFx0XHQvLyBDb25jYXRlbmF0ZSB0aGUgbGFzdCB0d28gcGFydHNcblx0XHRcdFx0bGFzdFBhcnQgPSBwYXJ0c1twYXJ0cy5sZW5ndGggLSAyXSArICcjJyArIGxhc3RQYXJ0O1xuXHRcdFx0fVx0XG5cdFx0XHRcblx0XHRcdC8vICAvLyBDaGVjayBpZiBsYXN0UGFydCBjb250YWlucyBhbnkgJy8nIGFuZCBpZiBzbywgdGFrZSB0aGUgbGFzdCBwYXJ0IGFmdGVyIHNwbGl0dGluZyBieSAnLydcblx0XHRcdCBpZiAobGFzdFBhcnQuaW5jbHVkZXMoJy8nKSkge1xuXHRcdFx0XHRsYXN0UGFydCA9IGxhc3RQYXJ0LnNwbGl0KCcvJykucG9wKCkgfHwgbGFzdFBhcnQ7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGxhYmVsID0gbGFzdFBhcnQ7XG5cblx0XHR9IGVsc2UgaWYgKHBhdGgpIHtcblx0XHRcdGxhYmVsID0gcGF0aC5zcGxpdCgnLycpLnBvcCgpIHx8IGxhYmVsOyAvLyBUYWtlIHRoZSBsYXN0IHBhcnQgYWZ0ZXIgc3BsaXR0aW5nIGJ5ICcvJ1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gJyc7XG5cdFx0fVxuXHRcblxuXHRcdGxhYmVsID0gbGFiZWwucmVwbGFjZSgvW1xcW1xcXV0vZywgJycpIC8vIFJlbW92ZSBicmFja2V0cyBpZiB0aGV5IGV4aXN0XG4gICAgICAgICAgICAgLnJlcGxhY2UoL1xcLlteLyNdKyMoPz1cXHtcXGQrXFx9JCkvLCAnJykgLy8gUmVtb3ZlIGhhc2h0YWcgaWYgaXQgZXhpc3RzXG4gICAgICAgICAgICAgLnJlcGxhY2UoL1xcLlteLy5dKyQvLCAnJyk7IC8vIFJlbW92ZSBmaWxlIGV4dGVuc2lvbiBpZiBpdCBleGlzdHNcblxuXHRcblx0XHRyZXR1cm4gbGFiZWw7XG5cdFx0XG5cdH1cblxuXHR0cnVuY2F0ZUxhYmVsKGxhYmVsOiBzdHJpbmcpIHtcblx0XHRyZXR1cm4gbGFiZWwubGVuZ3RoID4gdGhpcy5tYXhMYWJlbENoYXJhY3RlcnMgPyBsYWJlbC5zbGljZSgwLCB0aGlzLm1heExhYmVsQ2hhcmFjdGVycykgKyAnLi4uJyA6IGxhYmVsO1xuXHR9XG5cblx0Z2V0IGVudigpIHsgcmV0dXJuIHdpbmRvdy5TbWFydFNlYXJjaD8ubWFpbj8uZW52OyB9XG5cdGdldCBzbWFydE5vdGVzKCkgeyByZXR1cm4gd2luZG93LlNtYXJ0U2VhcmNoPy5tYWluPy5lbnY/LnNtYXJ0X3NvdXJjZXM/Lml0ZW1zOyB9XG5cdFxuXG5cdGFzeW5jIG9uT3BlbigpIHtcblx0XHR0aGlzLmNvbnRlbnRFbC5jcmVhdGVFbCgnaDInLCB7IHRleHQ6ICdXaWtpcGVkaWEgVmlzdWFsaXplcicgfSk7XG5cdFx0dGhpcy5jb250ZW50RWwuY3JlYXRlRWwoJ3AnLCB7IHRleHQ6ICdXYWl0aW5nIGZvciBXaWtpcGVkaWEgQ29ubmVjdGlvbnMgdG8gbG9hZC4uLicgfSk7XG5cdFx0Y29uc29sZS5sb2codGhpcy5hcHApO1xuXHRcdGNvbnNvbGUubG9nKCdhYWEnKVxuXHRcdCAvLyBJbnRyb2R1Y2UgYSBzbWFsbCBkZWxheSBiZWZvcmUgcmVuZGVyaW5nIHRvIGdpdmUgdmlldyB0aW1lIHRvIGxvYWRcblx0XHQgc2V0VGltZW91dChhc3luYyAoKSA9PiB7XG5cdFx0XHRhd2FpdCB0aGlzLnJlbmRlcigpO1xuXHRcdH0sIDUwMCk7IC8vIEFkanVzdCB0aGUgZGVsYXkgYXMgbmVlZGVkXG5cblx0fVxuXG5cdGFzeW5jIHJlbmRlcigpIHtcblx0XHQvLyB3YWl0IHVudGlsIHRoaXMuc21hcnROb3RlcyBpcyBhdmFpbGFibGVcblx0XHR3aGlsZSAoIXRoaXMuZW52Py5lbnRpdGllc19sb2FkZWQpIHtcblx0XHRcdGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCAyMDAwKSk7XG5cdFx0fVxuXG5cdFx0dGhpcy5jb250ZW50RWwuZW1wdHkoKTtcblx0XHR0aGlzLmluaXRpYWxpemVWYXJpYWJsZXMoKTtcblx0XHRpZiAoT2JqZWN0LmtleXModGhpcy5zbWFydE5vdGVzKS5sZW5ndGggPT09IDApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0dGhpcy5zZXR1cFNldHRpbmdzTWVudSgpO1xuXHRcdHRoaXMuc2V0dXBTVkcoKTtcblx0XHR0aGlzLmFkZEV2ZW50TGlzdGVuZXJzKCk7XHRcdFxuXHRcdHRoaXMud2F0Y2hGb3JOb3RlQ2hhbmdlcygpO1xuXG5cdFx0Ly8gTG9hZCBsYXRlc3QgYWN0aXZlIGZpbGUgaWYgb3BlbmluZyB2aWV3IGZvciBmaXJzdCB0aW1lXG5cdFx0Y29uc3QgY3VycmVudE5vZGVDaGFuZ2UgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlRmlsZSgpO1xuXHRcdGlmIChjdXJyZW50Tm9kZUNoYW5nZSAmJiAhdGhpcy5jdXJyZW50Tm90ZUNoYW5naW5nKSB7XG5cdFx0XHR0aGlzLmN1cnJlbnROb3RlS2V5ID0gY3VycmVudE5vZGVDaGFuZ2UucGF0aDtcblx0XHRcdHRoaXMuY3VycmVudE5vdGVDaGFuZ2luZyA9IHRydWU7XG5cdFx0XHRhd2FpdCB0aGlzLnJlbmRlcigpO1xuXHRcdFx0cmV0dXJuXG5cdFx0fVxuXHRcdFx0XHRcblx0XHRcblx0XHRhd2FpdCB0aGlzLnVwZGF0ZVZpc3VhbGl6YXRpb24oKTtcblx0fVxuXG5cdGFzeW5jIHdhaXRGb3JTbWFydE5vdGVzKCkge1xuXHRcdGNvbnN0IG1heFJldHJpZXMgPSAxMDsgLy8gU2V0IGEgbWF4IG51bWJlciBvZiByZXRyaWVzIHRvIGF2b2lkIGluZmluaXRlIGxvb3Bcblx0XHRjb25zdCBkZWxheSA9IDIwMDA7IC8vIERlbGF5IGluIG1pbGxpc2Vjb25kcyBiZXR3ZWVuIHJldHJpZXNcblx0XG5cdFx0Zm9yIChsZXQgYXR0ZW1wdCA9IDA7IGF0dGVtcHQgPCBtYXhSZXRyaWVzOyBhdHRlbXB0KyspIHtcblx0XHRcdGNvbnNvbGUubG9nKHRoaXMuZW52KTtcblx0XHRcdGlmICh0aGlzLmVudj8uZW50aXRpZXNfbG9hZGVkKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCBkZWxheSkpO1xuXHRcdH1cblx0XG5cdFx0Ly8gSWYgd2UgcmVhY2ggaGVyZSwgaXQgbWVhbnMgdGhlIGVudGl0aWVzIGFyZSBzdGlsbCBub3QgbG9hZGVkXG5cdFx0Y29uc29sZS5lcnJvcignV2lraXBlZGlhIGNvbm5lY3Rpb25zIGRpZCBub3QgbG9hZCBpbiB0aW1lJyk7XG5cdFx0dGhpcy5jb250ZW50RWwuY3JlYXRlRWwoJ3AnLCB7IHRleHQ6ICdGYWlsZWQgdG8gbG9hZCBXaWtpcGVkaWEgQ29ubmVjdGlvbnMuJyB9KTtcblx0fVxuXG5cdGluaXRpYWxpemVWYXJpYWJsZXMoKSB7XG5cdFx0dGhpcy5taW5TY29yZSA9IDE7XG5cdFx0dGhpcy5tYXhTY29yZSA9IDA7XG5cdH1cblxuXHRzZXR1cFNWRygpIHtcblx0XHRjb25zdCB3aWR0aCA9IHRoaXMuY29udGVudEVsLmNsaWVudFdpZHRoO1xuXHRcdGNvbnN0IGhlaWdodCA9IHRoaXMuY29udGVudEVsLmNsaWVudEhlaWdodDtcblx0XG5cdFx0Y29uc3Qgc3ZnID0gZDMuc2VsZWN0KHRoaXMuY29udGVudEVsKVxuXHRcdFx0LmFwcGVuZCgnc3ZnJylcblx0XHRcdC5hdHRyKCd3aWR0aCcsICcxMDAlJylcblx0XHRcdC5hdHRyKCdoZWlnaHQnLCAnOTglJylcblx0XHRcdC5hdHRyKCd2aWV3Qm94JywgYDAgMCAke3dpZHRofSAke2hlaWdodH1gKVxuXHRcdFx0LmF0dHIoJ3ByZXNlcnZlQXNwZWN0UmF0aW8nLCAneE1pZFlNaWQgbWVldCcpXG5cdFx0XHQuY2FsbChkMy56b29tKClcblx0XHRcdFx0LnNjYWxlRXh0ZW50KFswLjEsIDEwXSlcblx0XHRcdFx0Lm9uKCd6b29tJywgKGV2ZW50KSA9PiB7XG5cdFx0XHRcdFx0c3ZnR3JvdXAuYXR0cigndHJhbnNmb3JtJywgZXZlbnQudHJhbnNmb3JtKTtcblx0XHRcdFx0XHR0aGlzLnVwZGF0ZUxhYmVsT3BhY2l0eShldmVudC50cmFuc2Zvcm0uayk7XG5cdFx0XHRcdH0pKTtcblx0XHRcdFx0XG5cdFx0Y29uc3Qgc3ZnR3JvdXAgPSBzdmcuYXBwZW5kKCdnJyk7XG5cdFxuXHRcdHN2Z0dyb3VwLmFwcGVuZCgnZycpLmF0dHIoJ2NsYXNzJywgJ3NtYXJ0LWNvbm5lY3Rpb25zLXZpc3VhbGl6ZXItbGlua3MnKTtcblx0XHRzdmdHcm91cC5hcHBlbmQoJ2cnKS5hdHRyKCdjbGFzcycsICdzbWFydC1jb25uZWN0aW9ucy12aXN1YWxpemVyLW5vZGUtbGFiZWxzJyk7XG5cdFx0c3ZnR3JvdXAuYXBwZW5kKCdnJykuYXR0cignY2xhc3MnLCAnc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1saW5rLWxhYmVscycpO1xuXHRcdHN2Z0dyb3VwLmFwcGVuZCgnZycpLmF0dHIoJ2NsYXNzJywgJ3NtYXJ0LWNvbm5lY3Rpb25zLXZpc3VhbGl6ZXItbm9kZXMnKTtcblx0XG5cdFx0dGhpcy5zdmdHcm91cCA9IHN2Z0dyb3VwO1xuXHRcdHRoaXMuc3ZnID0gc3ZnO1xuXHR9XG5cdFxuXG5cdGdldFNWR0RpbWVuc2lvbnMoKSB7XG5cdFx0Y29uc3Qgd2lkdGggPSB0aGlzLmNvbnRlbnRFbC5jbGllbnRXaWR0aCB8fCB0aGlzLmNvbnRlbnRFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aDtcblx0XHRjb25zdCBoZWlnaHQgPSB0aGlzLmNvbnRlbnRFbC5jbGllbnRIZWlnaHQgfHwgdGhpcy5jb250ZW50RWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0O1xuXHRcdHJldHVybiB7IHdpZHRoLCBoZWlnaHQgfTtcblx0fVxuXHRcblxuXHRjcmVhdGVTVkcod2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIpIHtcblx0XHRyZXR1cm4gZDMuc2VsZWN0KHRoaXMuY29udGVudEVsKVxuXHRcdFx0LmFwcGVuZCgnc3ZnJylcblx0XHRcdC5hdHRyKCd3aWR0aCcsICcxMDAlJylcblx0XHRcdC5hdHRyKCdoZWlnaHQnLCAnOTglJylcblx0XHRcdC5hdHRyKCd2aWV3Qm94JywgYDAgMCAke3dpZHRofSAke2hlaWdodH1gKVxuXHRcdFx0LmF0dHIoJ3ByZXNlcnZlQXNwZWN0UmF0aW8nLCAneE1pZFlNaWQgbWVldCcpXG5cdFx0XHQuc3R5bGUoJ2JhY2tncm91bmQnLCAnIzJkMzAzOScpXG5cdFx0XHQuY2FsbChkMy56b29tKCkuc2NhbGVFeHRlbnQoWzAuMSwgMTBdKS5vbignem9vbScsIHRoaXMub25ab29tLmJpbmQodGhpcykpKTtcblx0fVxuXG5cdGNyZWF0ZVNWR0dyb3VwKHN2ZzogYW55KSB7XG5cdFx0cmV0dXJuIHN2Zy5hcHBlbmQoJ2cnKTtcblx0fVxuXG5cdG9uWm9vbShldmVudDogYW55KSB7XG5cdFx0ZDMuc2VsZWN0KCdnJykuYXR0cigndHJhbnNmb3JtJywgZXZlbnQudHJhbnNmb3JtKTtcblx0XHR0aGlzLnVwZGF0ZUxhYmVsT3BhY2l0eShldmVudC50cmFuc2Zvcm0uayk7XG5cdH1cblxuXHRpbml0aWFsaXplU2ltdWxhdGlvbih3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcikge1xuXHRcdHRoaXMuc2ltdWxhdGlvbiA9IGQzLmZvcmNlU2ltdWxhdGlvbigpXG5cdFx0XHQuZm9yY2UoJ2NlbnRlcicsIGQzLmZvcmNlQ2VudGVyKHdpZHRoIC8gMiwgaGVpZ2h0IC8gMikuc3RyZW5ndGgodGhpcy5jZW50ZXJGb3JjZSkpXG5cdFx0XHQuZm9yY2UoJ2NoYXJnZScsIGQzLmZvcmNlTWFueUJvZHkoKS5zdHJlbmd0aCgtdGhpcy5yZXBlbEZvcmNlKSlcblx0XHRcdC8vIC5mb3JjZSgnbGluaycsIGQzLmZvcmNlTGluaygpLmlkKChkOiBhbnkpID0+IGQuaWQpLmRpc3RhbmNlKHRoaXMubGlua0Rpc3RhbmNlKS5zdHJlbmd0aCh0aGlzLmxpbmtGb3JjZSkpXG5cdFx0XHQuZm9yY2UoJ2xpbmsnLCBkMy5mb3JjZUxpbmsoKVxuICAgICAgICAgICAgICAgIC5pZCgoZDogYW55KSA9PiBkLmlkKVxuICAgICAgICAgICAgICAgIC5kaXN0YW5jZSgoZDogYW55KSA9PiB0aGlzLmxpbmtEaXN0YW5jZVNjYWxlKGQuc2NvcmUpKVxuICAgICAgICAgICAgICAgIC5zdHJlbmd0aCh0aGlzLmxpbmtGb3JjZSkpXG5cdFx0XHQuZm9yY2UoJ2NvbGxpZGUnLCBkMy5mb3JjZUNvbGxpZGUoKS5yYWRpdXModGhpcy5ub2RlU2l6ZSArIDMpLnN0cmVuZ3RoKDAuNykpXG5cdFx0XHQub24oJ3RpY2snLCB0aGlzLnNpbXVsYXRpb25UaWNrSGFuZGxlci5iaW5kKHRoaXMpKTtcblxuXHRcdCAvLyBBZGQgdGhlIGN1c3RvbSBmb3JjZSBmb3IgbGFiZWxzXG5cdFx0ICB0aGlzLnNpbXVsYXRpb24uZm9yY2UoJ2xhYmVscycsIHRoaXMuYXZvaWRMYWJlbENvbGxpc2lvbnMuYmluZCh0aGlzKSk7XG5cblx0XHQvLyBEaXNhYmxlIHRoZSBjZW50ZXJpbmcgZm9yY2UgYWZ0ZXIgdGhlIGluaXRpYWwgcG9zaXRpb25pbmdcblx0XHQvLyB0aGlzLnNpbXVsYXRpb24ub24oJ2VuZCcsICgpID0+IHtcblx0XHQvLyBcdGNvbnNvbGUubG9nKCdTaW11bGF0aW9uIGVuZGVkLCBjZW50ZXIgZm9yY2UgcmVtb3ZlZC4nKTtcblx0XHQvLyBcdHRoaXMuc2ltdWxhdGlvbi5mb3JjZSgnY2VudGVyJywgbnVsbCk7IC8vIFJlbW92ZSB0aGUgY2VudGVyIGZvcmNlIGFmdGVyIGluaXRpYWwgc3RhYmlsaXphdGlvblxuXHRcdC8vIH0pO1xuXG5cdH1cblxuXG5cdHJlbmRlckxlZ2VuZCgpIHtcblx0XHRpZiAodGhpcy52YWxpZGF0ZWRMaW5rcy5sZW5ndGggPT09IDApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRjb25zdCB0eXBlcyA9IFsnYmxvY2snLCAnbm90ZSddOyAvLyBDb25uZWN0aW9uIHR5cGVzXG5cdFx0Y29uc3QgY291bnRzID0gdHlwZXMubWFwKHR5cGUgPT4gdGhpcy5ub2Rlcy5maWx0ZXIoKG5vZGU6IGFueSkgPT4gKG5vZGUuZ3JvdXAgPT09IHR5cGUpICYmIG5vZGUuaWQgIT09IHRoaXMuY2VudHJhbE5vZGUuaWQpLmxlbmd0aCk7XG5cblx0XHQvLyBJbml0aWFsaXplIGNvbG9ycyB3aXRoIGRlZmF1bHQgdmFsdWVzXG4gICAgXHRsZXQgY29sb3JzOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9ID0geyAnYmxvY2snOiBERUZBVUxUX05FVFdPUktfU0VUVElOR1MuYmxvY2tGaWxsQ29sb3IsICdub3RlJzogREVGQVVMVF9ORVRXT1JLX1NFVFRJTkdTLm5vdGVGaWxsQ29sb3IgfTsgXG5cblx0XHQvLyBJdGVyYXRlIG92ZXIgbm9kZXMgdG8gZmluZCB0aGUgY29sb3IgZm9yIGVhY2ggdHlwZVxuXHRcdGZvciAobGV0IG5vZGUgb2YgdGhpcy5ub2Rlcykge1xuXHRcdFx0aWYgKGNvbG9yc1tub2RlLmdyb3VwXSkge1xuXHRcdFx0XHRjb2xvcnNbbm9kZS5ncm91cF0gPSBub2RlLmZpbGw7XG5cdFx0XHR9XG5cdFx0fVx0XG5cblx0XHQvLyBVc2UgY29udGVudEVsIHRvIGNyZWF0ZSBhIHRhYmxlIGNvbnRhaW5lclxuXHRcdGNvbnN0IHRhYmxlQ29udGFpbmVyID0gdGhpcy5jb250ZW50RWwuY3JlYXRlRWwoJ2RpdicsIHsgY2xzOiAnc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1sZWdlbmQtY29udGFpbmVyJyB9KTtcblxuXHRcdC8vIENyZWF0ZSB0YWJsZSBoZWFkZXJcblx0XHRjb25zdCBoZWFkZXIgPSB0YWJsZUNvbnRhaW5lci5jcmVhdGVFbCgnZGl2JywgeyBjbHM6ICdzbWFydC1jb25uZWN0aW9ucy12aXN1YWxpemVyLWxlZ2VuZC1oZWFkZXInIH0pO1xuXHRcdFsnQ29ubmVjdGlvbiBUeXBlJywgJ0NvdW50JywgJ0NvbG9yJ10uZm9yRWFjaChoZWFkZXJUaXRsZSA9PiB7XG5cblx0XHRcdC8vIEFzc2lnbiBhcHByb3BpYXRlIGNsYXNzIGJhc2VkIG9uIGNvbHVtblxuXHRcdFx0c3dpdGNoKGhlYWRlclRpdGxlKSB7XG5cdFx0XHRcdGNhc2UgXCJDb25uZWN0aW9uIFR5cGVcIjpcblx0XHRcdFx0XHRoZWFkZXIuY3JlYXRlRWwoJ2RpdicsIHsgdGV4dDogaGVhZGVyVGl0bGUsIGNsczogJ3NtYXJ0LWNvbm5lY3Rpb25zLXZpc3VhbGl6ZXItdmFyaWFibGUtY29sJyB9KTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcIkNvdW50XCI6XG5cdFx0XHRcdFx0aGVhZGVyLmNyZWF0ZUVsKCdkaXYnLCB7IHRleHQ6IGhlYWRlclRpdGxlLCBjbHM6ICdzbWFydC1jb25uZWN0aW9ucy12aXN1YWxpemVyLWNvdW50LWNvbCcgfSk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgXCJDb2xvclwiOlxuXHRcdFx0XHRcdGhlYWRlci5jcmVhdGVFbCgnZGl2JywgeyB0ZXh0OiBoZWFkZXJUaXRsZSwgY2xzOiAnc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1jb2xvci1jb2wnIH0pO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdGhlYWRlci5jcmVhdGVFbCgnZGl2JywgeyB0ZXh0OiBoZWFkZXJUaXRsZSwgY2xzOiAnc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci12YXJpYWJsZS1jb2wnIH0pO1xuXHRcdFx0XHRcdGJyZWFrXG5cdFx0XHR9XG5cblx0XHR9KTtcblxuXHRcdC8vIENyZWF0ZSByb3dzIGZvciBlYWNoIHR5cGVcblx0XHR0eXBlcy5mb3JFYWNoKCh0eXBlLCBpbmRleCkgPT4ge1xuXHRcdFx0aWYgKGNvdW50c1tpbmRleF0gPiAwKSB7IC8vIENoZWNrIGlmIHRoZSBjb3VudCBpcyBncmVhdGVyIHRoYW4gemVyb1xuXHRcdFx0XHRjb25zdCByb3cgPSB0YWJsZUNvbnRhaW5lci5jcmVhdGVFbCgnZGl2JywgeyBjbHM6ICdzbWFydC1jb25uZWN0aW9ucy12aXN1YWxpemVyLWxlZ2VuZC1yb3cnIH0pO1xuXHRcdFx0XHRcblx0XHRcdFx0cm93LmNyZWF0ZUVsKCdkaXYnLCB7IHRleHQ6IHRoaXMuY2FwaXRhbGl6ZUZpcnN0TGV0dGVyKHR5cGUpLCBjbHM6ICdzbWFydC1jb25uZWN0aW9ucy12aXN1YWxpemVyLXZhcmlhYmxlLWNvbCcgfSk7XG5cdFx0XHRcdHJvdy5jcmVhdGVFbCgnZGl2JywgeyB0ZXh0OiBgJHtjb3VudHNbaW5kZXhdfWAsIGNsczogJ3NtYXJ0LWNvbm5lY3Rpb25zLXZpc3VhbGl6ZXItY291bnQtY29sJyB9KTtcblx0XHRcdFx0XG5cdFx0XHRcdGNvbnN0IGNvbG9yQ2VsbCA9IHJvdy5jcmVhdGVFbCgnZGl2JywgeyBjbHM6ICdzbWFydC1jb25uZWN0aW9ucy12aXN1YWxpemVyLWNvbG9yLWNvbCcgfSk7XG5cdFx0XHRcdGNvbnN0IGNvbG9yUGlja2VyID0gY29sb3JDZWxsLmNyZWF0ZUVsKCdpbnB1dCcsIHsgdHlwZTogJ2NvbG9yJywgdmFsdWU6IGNvbG9yc1t0eXBlIGFzIGtleW9mIHR5cGVvZiBjb2xvcnNdLCBjbHM6ICdzbWFydC1jb25uZWN0aW9ucy12aXN1YWxpemVyLWxlZ2VuZC1jb2xvci1waWNrZXInIH0pO1xuXHRcblx0XHRcdFx0Y29sb3JQaWNrZXIuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKGUpID0+IHRoaXMudXBkYXRlTm9kZUNvbG9ycyh0eXBlLCAoZS50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudCkudmFsdWUpKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXG5cdGNhcGl0YWxpemVGaXJzdExldHRlcihzdHI6IHN0cmluZyk6IHN0cmluZyB7XG5cdFx0aWYgKCFzdHIpIHJldHVybiBzdHI7XG5cdFx0Y29uc29sZS5sb2coJ3N0cmluZzogJywgc3RyKTtcblx0XHRyZXR1cm4gc3RyLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyLnNsaWNlKDEpO1xuXHR9XG5cblx0dXBkYXRlTm9kZUNvbG9ycyh0eXBlOiBzdHJpbmcsIGNvbG9yOiBzdHJpbmcpIHtcblxuXHRcdGlmICh0eXBlID09PSAnbm90ZScgJiYgY29sb3IgIT09IHRoaXMubm90ZUZpbGxDb2xvcikge1xuXHRcdFx0dGhpcy5ub3RlRmlsbENvbG9yID0gY29sb3I7XG5cdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5ub3RlRmlsbENvbG9yID0gY29sb3I7XG5cdFx0XHR0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTsgLy8gU2F2ZSB0aGUgc2V0dGluZ3NcdFx0XG5cdFx0fVxuXG5cdFx0aWYgKHR5cGUgPT09ICdibG9jaycgJiYgY29sb3IgIT09IHRoaXMuYmxvY2tGaWxsQ29sb3IpIHtcblx0XHRcdHRoaXMuYmxvY2tGaWxsQ29sb3IgPSBjb2xvcjtcblx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLm5vdGVGaWxsQ29sb3IgPSBjb2xvcjtcblx0XHRcdHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpOyAvLyBTYXZlIHRoZSBzZXR0aW5nc1x0XHRcblx0XHR9XG5cblxuICAgICAgICB0aGlzLm5vZGVzLmZvckVhY2goKG5vZGUgOiBhbnkpID0+IHtcbiAgICAgICAgICAgIGlmIChub2RlLmdyb3VwID09PSB0eXBlKSB7XG4gICAgICAgICAgICAgICAgbm9kZS5maWxsID0gY29sb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnVwZGF0ZU5vZGVGaWxsKCk7XG4gICAgfVxuXG4gICAgdXBkYXRlTm9kZUZpbGwoKSB7XG4gICAgICAgIC8vIFVwZGF0ZSB0aGUgRDMgdmlzdWFsaXphdGlvbiBoZXJlXG4gICAgICAgIHRoaXMubm9kZVNlbGVjdGlvbi5hdHRyKCdmaWxsJywgKGQ6IGFueSkgPT4gZC5maWxsKTtcbiAgICB9XG5cblx0Ly8gRW5zdXJlIG5vZGUgbGFiZWxzIGRvbnQgY29sbGlkZSB3aXRoIGFueSBlbGVtZW50c1xuXHRhdm9pZExhYmVsQ29sbGlzaW9ucygpIHtcblx0XHRjb25zdCBwYWRkaW5nID0gNTsgLy8gQWRqdXN0IHBhZGRpbmcgYXMgbmVlZGVkXG5cdFx0cmV0dXJuIChhbHBoYTogbnVtYmVyKSA9PiB7XG5cdFx0XHRjb25zdCBxdWFkdHJlZSA9IGQzLnF1YWR0cmVlKClcblx0XHRcdFx0LngoKGQ6IGFueSkgPT4gZC54KVxuXHRcdFx0XHQueSgoZDogYW55KSA9PiBkLnkpXG5cdFx0XHRcdC5hZGRBbGwodGhpcy5sYWJlbFNlbGVjdGlvbi5kYXRhKCkpO1xuXHRcblx0XHRcdHRoaXMubGFiZWxTZWxlY3Rpb24uZWFjaCgoZDogYW55KSA9PiB7XG5cdFx0XHRcdGNvbnN0IHJhZGl1cyA9IGQucmFkaXVzICsgcGFkZGluZzsgLy8gQXNzdW1pbmcgZWFjaCBsYWJlbCBoYXMgYSByYWRpdXMsIGFkanVzdCBhcyBuZWNlc3Nhcnlcblx0XHRcdFx0Y29uc3QgbngxID0gZC54IC0gcmFkaXVzLCBueDIgPSBkLnggKyByYWRpdXMsIG55MSA9IGQueSAtIHJhZGl1cywgbnkyID0gZC55ICsgcmFkaXVzO1xuXHRcblx0XHRcdFx0cXVhZHRyZWUudmlzaXQoKHF1YWQsIHgxLCB5MSwgeDIsIHkyKSA9PiB7XG5cdFx0XHRcdFx0aWYgKCdkYXRhJyBpbiBxdWFkICYmIHF1YWQuZGF0YSAmJiAocXVhZC5kYXRhICE9PSBkKSkge1x0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0bGV0IHggPSBkLnggLSAocXVhZC5kYXRhIGFzIGFueSkueCxcblx0XHRcdFx0XHRcdFx0eSA9IGQueSAtIChxdWFkLmRhdGEgYXMgYW55KS55LFxuXHRcdFx0XHRcdFx0XHRsID0gTWF0aC5zcXJ0KHggKiB4ICsgeSAqIHkpLFxuXHRcdFx0XHRcdFx0XHRyID0gcmFkaXVzICsgKHF1YWQuZGF0YSBhcyBhbnkpLnJhZGl1cztcblx0XHRcdFx0XHRcdGlmIChsIDwgcikge1xuXHRcdFx0XHRcdFx0XHRsID0gKGwgLSByKSAvIGwgKiBhbHBoYTtcblx0XHRcdFx0XHRcdFx0ZC54IC09IHggKj0gbDtcblx0XHRcdFx0XHRcdFx0ZC55IC09IHkgKj0gbDtcblx0XHRcdFx0XHRcdFx0KHF1YWQuZGF0YSBhcyBhbnkpLnggKz0geDtcblx0XHRcdFx0XHRcdFx0KHF1YWQuZGF0YSBhcyBhbnkpLnkgKz0geTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHgxID4gbngyIHx8IHgyIDwgbngxIHx8IHkxID4gbnkyIHx8IHkyIDwgbnkxO1xuXHRcdFx0XHR9KTtcblx0XHRcdH0pO1xuXHRcdH07XG5cdH1cblxuXHRhZGRFdmVudExpc3RlbmVycygpIHtcblx0XHR0aGlzLnNldHVwU1ZHRXZlbnRMaXN0ZW5lcnMoKTtcblx0XHR0aGlzLnNldHVwS2V5Ym9hcmRFdmVudExpc3RlbmVycygpO1xuXHR9XG5cblx0c2V0dXBTVkdFdmVudExpc3RlbmVycygpIHtcblx0XHRkMy5zZWxlY3QoJ3N2ZycpXG5cdFx0XHQub24oJ21vdXNlZG93bicsIHRoaXMub25Nb3VzZURvd24uYmluZCh0aGlzKSlcblx0XHRcdC5vbignbW91c2Vtb3ZlJywgdGhpcy5vbk1vdXNlTW92ZS5iaW5kKHRoaXMpKVxuXHRcdFx0Lm9uKCdtb3VzZXVwJywgdGhpcy5vbk1vdXNlVXAuYmluZCh0aGlzKSlcblx0XHRcdC5vbignY2xpY2snLCB0aGlzLm9uU1ZHQ2xpY2suYmluZCh0aGlzKSk7XG5cdH1cblxuXHQvLyBUT0RPOiBBZGQgYmFjayBpbiB3aGVuIHJlYWR5IGZvciBtdWx0aXNlbGVjdFxuXHRvbk1vdXNlRG93bihldmVudDogYW55KSB7XG5cdFx0Ly8gaWYgKCFldmVudC5jdHJsS2V5KSB0aGlzLmNsZWFyU2VsZWN0aW9ucygpO1xuXHRcdC8vIHRoaXMuc3RhcnRCb3hTZWxlY3Rpb24oZXZlbnQpO1xuXHR9XG5cblx0b25Nb3VzZU1vdmUoZXZlbnQ6IGFueSkge1xuXHRcdC8vIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdC8vIHRoaXMudXBkYXRlQm94U2VsZWN0aW9uKGV2ZW50KTtcblx0fVxuXG5cdG9uTW91c2VVcCgpIHtcblx0XHQvLyB0aGlzLmVuZEJveFNlbGVjdGlvbigpO1xuXHR9XG5cblx0b25TVkdDbGljayhldmVudDogYW55KSB7XG5cdFx0aWYgKCFldmVudC5kZWZhdWx0UHJldmVudGVkICYmICFldmVudC5jdHJsS2V5KSB0aGlzLmNsZWFyU2VsZWN0aW9ucygpO1xuXHR9XG5cblx0c2V0dXBLZXlib2FyZEV2ZW50TGlzdGVuZXJzKCkge1xuXHRcdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLm9uS2V5RG93bi5iaW5kKHRoaXMpKTtcblx0XHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIHRoaXMub25LZXlVcC5iaW5kKHRoaXMpKTtcblx0fVxuXG5cdC8vIFRPRE86OiBBZGQgYmFjayB3aGVuIHJlYWR5IGZvciBtdWx0aXNlbGVjdFxuXHRvbktleURvd24oZXZlbnQ6IGFueSkge1xuXHRcdC8vIGlmIChldmVudC5rZXkgPT09ICdBbHQnIHx8IGV2ZW50LmtleSA9PT0gJ0FsdEdyYXBoJykgdGhpcy5pc0FsdFByZXNzZWQgPSB0cnVlO1xuXHRcdC8vIGlmIChldmVudC5rZXkgPT09ICdDb250cm9sJykge1xuXHRcdC8vIFx0dGhpcy5pc0N0cmxQcmVzc2VkID0gdHJ1ZTtcblx0XHQvLyBcdGQzLnNlbGVjdCgnc3ZnJykuc3R5bGUoJ2N1cnNvcicsICdjcm9zc2hhaXInKTtcblx0XHQvLyB9XG5cdH1cblxuXHRvbktleVVwKGV2ZW50OiBhbnkpIHtcblx0XHQvLyBpZiAoZXZlbnQua2V5ID09PSAnQWx0JyB8fCBldmVudC5rZXkgPT09ICdBbHRHcmFwaCcpIHRoaXMuaXNBbHRQcmVzc2VkID0gZmFsc2U7XG5cdFx0Ly8gaWYgKGV2ZW50LmtleSA9PT0gJ0NvbnRyb2wnKSB7XG5cdFx0Ly8gXHR0aGlzLmlzQ3RybFByZXNzZWQgPSBmYWxzZTtcblx0XHQvLyBcdGQzLnNlbGVjdCgnc3ZnJykuc3R5bGUoJ2N1cnNvcicsICdkZWZhdWx0Jyk7XG5cdFx0Ly8gfVxuXHR9XG5cblx0c2V0dXBTZXR0aW5nc01lbnUoKSB7XG4gICAgICAgIC8vIFJlbW92ZSBhbnkgZXhpc3Rpbmcgc2V0dGluZ3MgaWNvbiBhbmQgZHJvcGRvd24gbWVudVxuICAgICAgICBjb25zdCBleGlzdGluZ0ljb24gPSB0aGlzLmNvbnRlbnRFbC5xdWVyeVNlbGVjdG9yKCcuc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1zZXR0aW5ncy1pY29uJyk7XG4gICAgICAgIGlmIChleGlzdGluZ0ljb24pIHtcbiAgICAgICAgICAgIGV4aXN0aW5nSWNvbi5yZW1vdmUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGV4aXN0aW5nRHJvcGRvd25NZW51ID0gdGhpcy5jb250ZW50RWwucXVlcnlTZWxlY3RvcignLnNjLXZpc3VhbGl6ZXItZHJvcGRvd24tbWVudScpO1xuICAgICAgICBpZiAoZXhpc3RpbmdEcm9wZG93bk1lbnUpIHtcbiAgICAgICAgICAgIGV4aXN0aW5nRHJvcGRvd25NZW51LnJlbW92ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ3JlYXRlIG5ldyBzZXR0aW5ncyBpY29uIGFuZCBkcm9wZG93biBtZW51XG4gICAgICAgIHRoaXMuY3JlYXRlU2V0dGluZ3NJY29uKCk7XG4gICAgICAgIHRoaXMuY3JlYXRlRHJvcGRvd25NZW51KCk7XG4gICAgICAgIHRoaXMuc2V0dXBBY2NvcmRpb25IZWFkZXJzKCk7XG4gICAgICAgIHRoaXMuc2V0dXBTZXR0aW5nc0V2ZW50TGlzdGVuZXJzKCk7XG4gICAgfVxuXG5cdGNyZWF0ZURyb3Bkb3duTWVudSgpIHtcblx0XHRjb25zdCBkcm9wZG93bk1lbnUgPSB0aGlzLmNvbnRlbnRFbC5jcmVhdGVFbCgnZGl2JywgeyBjbHM6ICdzYy12aXN1YWxpemVyLWRyb3Bkb3duLW1lbnUnIH0pO1xuXHRcdHRoaXMuYnVpbGREcm9wZG93bk1lbnVDb250ZW50KGRyb3Bkb3duTWVudSk7XG5cdH1cblxuXHRidWlsZERyb3Bkb3duTWVudUNvbnRlbnQoZHJvcGRvd25NZW51OiBIVE1MRWxlbWVudCkge1xuXHRcdGNvbnN0IG1lbnVIZWFkZXIgPSBkcm9wZG93bk1lbnUuY3JlYXRlRWwoJ2RpdicsIHsgY2xzOiAnc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1tZW51LWhlYWRlcicgfSk7XG5cdFx0XG5cdFx0Ly8gQXBwZW5kIHRoZSByZWZyZXNoIGljb24gY3JlYXRlZCBieSBjcmVhdGVSZWZyZXNoSWNvblxuXHRcdGNvbnN0IHJlZnJlc2hJY29uID0gdGhpcy5jcmVhdGVSZWZyZXNoSWNvbigpO1xuXHRcdHJlZnJlc2hJY29uLmNsYXNzTGlzdC5hZGQoJ3NtYXJ0LWNvbm5lY3Rpb25zLXZpc3VhbGl6ZXItaWNvbicpOyAvLyBFbnN1cmUgaXQgaGFzIHRoZSAnaWNvbicgY2xhc3MgZm9yIHN0eWxpbmdcblx0XHRyZWZyZXNoSWNvbi5zZXRBdHRyaWJ1dGUoJ2lkJywgJ3NtYXJ0LWNvbm5lY3Rpb25zLXZpc3VhbGl6ZXItcmVmcmVzaC1pY29uJyk7IC8vIFNldCB0aGUgSUQgZm9yIHNwZWNpZmljIHN0eWxpbmcgb3Igc2VsZWN0aW9uXG5cdFx0bWVudUhlYWRlci5hcHBlbmRDaGlsZChyZWZyZXNoSWNvbik7XHRcblx0XHRcblx0XHQvLyBBcHBlbmQgdGhlIG5ldyBYIGljb24gY3JlYXRlZCBieSBjcmVhdGVOZXdYSWNvblxuXHRcdGNvbnN0IHhJY29uID0gdGhpcy5jcmVhdGVOZXdYSWNvbigpO1xuXHRcdHhJY29uLmNsYXNzTGlzdC5hZGQoJ3NtYXJ0LWNvbm5lY3Rpb25zLXZpc3VhbGl6ZXItaWNvbicpOyAvLyBFbnN1cmUgaXQgaGFzIHRoZSAnaWNvbicgY2xhc3MgZm9yIHN0eWxpbmdcblx0XHR4SWNvbi5zZXRBdHRyaWJ1dGUoJ2lkJywgJ3NtYXJ0LWNvbm5lY3Rpb25zLXZpc3VhbGl6ZXItY2xvc2UtaWNvbicpOyAvLyBTZXQgdGhlIElEIGZvciBzcGVjaWZpYyBzdHlsaW5nIG9yIHNlbGVjdGlvblxuXHRcdG1lbnVIZWFkZXIuYXBwZW5kQ2hpbGQoeEljb24pO1xuICBcblx0XHR0aGlzLmFkZEFjY29yZGlvbkl0ZW0oZHJvcGRvd25NZW51LCAnRmlsdGVycycsIHRoaXMuZ2V0RmlsdGVyc0NvbnRlbnQuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5hZGRBY2NvcmRpb25JdGVtKGRyb3Bkb3duTWVudSwgJ0Rpc3BsYXknLCB0aGlzLmdldERpc3BsYXlDb250ZW50LmJpbmQodGhpcykpO1xuXHRcdHRoaXMuYWRkQWNjb3JkaW9uSXRlbShkcm9wZG93bk1lbnUsICdGb3JjZXMnLCB0aGlzLmdldEZvcmNlc0NvbnRlbnQuYmluZCh0aGlzKSk7XG5cdH1cblx0XG5cdFxuXHRhZGRBY2NvcmRpb25JdGVtKHBhcmVudDogSFRNTEVsZW1lbnQsIHRpdGxlOiBzdHJpbmcsIGJ1aWxkQ29udGVudDogKHBhcmVudDogSFRNTEVsZW1lbnQpID0+IHZvaWQpIHtcblx0XHRjb25zdCBhY2NvcmRpb25JdGVtID0gcGFyZW50LmNyZWF0ZUVsKCdkaXYnLCB7IGNsczogJ3NtYXJ0LWNvbm5lY3Rpb25zLXZpc3VhbGl6ZXItYWNjb3JkaW9uLWl0ZW0nIH0pO1xuXHRcdGNvbnN0IGhlYWRlciA9IGFjY29yZGlvbkl0ZW0uY3JlYXRlRWwoJ2RpdicsIHsgY2xzOiAnc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1hY2NvcmRpb24taGVhZGVyJyB9KTtcblx0XG5cdFx0Y29uc3QgYXJyb3dJY29uID0gaGVhZGVyLmNyZWF0ZUVsKCdzcGFuJywgeyBjbHM6ICdzbWFydC1jb25uZWN0aW9ucy12aXN1YWxpemVyLWFycm93LWljb24nIH0pO1xuXHRcdGFycm93SWNvbi5hcHBlbmRDaGlsZCh0aGlzLmNyZWF0ZVJpZ2h0QXJyb3coKSk7XG5cdFxuXHRcdGhlYWRlci5jcmVhdGVFbCgnc3BhbicsIHsgdGV4dDogdGl0bGUgfSk7XG5cdFxuXHRcdGNvbnN0IGFjY29yZGlvbkNvbnRlbnQgPSBhY2NvcmRpb25JdGVtLmNyZWF0ZUVsKCdkaXYnLCB7IGNsczogJ3NtYXJ0LWNvbm5lY3Rpb25zLXZpc3VhbGl6ZXItYWNjb3JkaW9uLWNvbnRlbnQnIH0pO1xuXHRcdGJ1aWxkQ29udGVudChhY2NvcmRpb25Db250ZW50KTtcblx0fVxuXHRcblx0Z2V0RmlsdGVyc0NvbnRlbnQocGFyZW50OiBIVE1MRWxlbWVudCkge1xuXHRcdGNvbnN0IHNsaWRlckNvbnRhaW5lcjEgPSBwYXJlbnQuY3JlYXRlRWwoJ2RpdicsIHsgY2xzOiAnc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1zbGlkZXItY29udGFpbmVyJyB9KTtcblx0XHRzbGlkZXJDb250YWluZXIxLmNyZWF0ZUVsKCdsYWJlbCcsIHsgXG5cdFx0XHR0ZXh0OiBgTWluIHJlbGV2YW5jZTogJHsodGhpcy5yZWxldmFuY2VTY29yZVRocmVzaG9sZCAqIDEwMCkudG9GaXhlZCgwKX0lYCwgXG5cdFx0XHRhdHRyOiB7IGlkOiAnc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1zY29yZVRocmVzaG9sZExhYmVsJywgZm9yOiAnc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1zY29yZVRocmVzaG9sZCcgfSBcblx0XHR9KTtcblxuXHRcdGNvbnN0IHJlbGV2YW5jZVNsaWRlciA9IHNsaWRlckNvbnRhaW5lcjEuY3JlYXRlRWwoJ2lucHV0JywgeyBcblx0XHRcdGF0dHI6IHsgXG5cdFx0XHRcdHR5cGU6ICdyYW5nZScsIFxuXHRcdFx0XHRpZDogJ3NtYXJ0LWNvbm5lY3Rpb25zLXZpc3VhbGl6ZXItc2NvcmVUaHJlc2hvbGQnLCBcblx0XHRcdFx0Y2xhc3M6ICdzbWFydC1jb25uZWN0aW9ucy12aXN1YWxpemVyLXNsaWRlcicsIFxuXHRcdFx0XHRuYW1lOiAnc2NvcmVUaHJlc2hvbGQnLCBcblx0XHRcdFx0bWluOiAnMCcsIFxuXHRcdFx0XHRtYXg6ICcwLjk5JywgXG5cdFx0XHRcdHN0ZXA6ICcwLjAxJyBcblx0XHRcdH0gXG5cdFx0fSk7XG5cblx0XHQvLyBFbnN1cmUgdGhlIHNsaWRlcidzIHZhbHVlIGlzIHNldCBhZnRlciBpdCBpcyBhcHBlbmRlZCB0byB0aGUgRE9NXG5cdFx0cmVsZXZhbmNlU2xpZGVyLnZhbHVlID0gdGhpcy5yZWxldmFuY2VTY29yZVRocmVzaG9sZC50b1N0cmluZygpO1xuXHRcblx0XHRwYXJlbnQuY3JlYXRlRWwoJ2xhYmVsJywgeyB0ZXh0OiAnQ29ubmVjdGlvbiB0eXBlOicsIGNsczogJ3NtYXJ0LWNvbm5lY3Rpb25zLXZpc3VhbGl6ZXItc2V0dGluZ3MtaXRlbS1jb250ZW50LWxhYmVsJyB9KTtcblx0XG5cdFx0Y29uc3QgcmFkaW9Db250YWluZXIgPSBwYXJlbnQuY3JlYXRlRWwoJ2RpdicsIHsgY2xzOiAnc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1yYWRpby1jb250YWluZXInIH0pO1xuXG5cdFx0Y29uc3QgcmFkaW9CbG9ja0xhYmVsID0gcmFkaW9Db250YWluZXIuY3JlYXRlRWwoJ2xhYmVsJyk7XG5cdFx0Y29uc3QgYmxvY2tSYWRpbyA9IHJhZGlvQmxvY2tMYWJlbC5jcmVhdGVFbCgnaW5wdXQnLCB7IFxuXHRcdFx0YXR0cjogeyBcblx0XHRcdFx0dHlwZTogJ3JhZGlvJywgXG5cdFx0XHRcdG5hbWU6ICdjb25uZWN0aW9uVHlwZScsIFxuXHRcdFx0XHR2YWx1ZTogJ2Jsb2NrJyBcblx0XHRcdH0gXG5cdFx0fSk7XG5cdFx0YmxvY2tSYWRpby5jaGVja2VkID0gKHRoaXMuY29ubmVjdGlvblR5cGUgPT09ICdibG9jaycpOyAvLyBTZXQgY2hlY2tlZCBiYXNlZCBvbiBjb25uZWN0aW9uVHlwZVxuXHRcdHJhZGlvQmxvY2tMYWJlbC5hcHBlbmRUZXh0KCcgQmxvY2snKTtcblx0XG5cdFx0Y29uc3QgcmFkaW9Ob3RlTGFiZWwgPSByYWRpb0NvbnRhaW5lci5jcmVhdGVFbCgnbGFiZWwnKTtcblx0XHRjb25zdCBub3RlUmFkaW8gPSByYWRpb05vdGVMYWJlbC5jcmVhdGVFbCgnaW5wdXQnLCB7IFxuXHRcdFx0YXR0cjogeyBcblx0XHRcdFx0dHlwZTogJ3JhZGlvJywgXG5cdFx0XHRcdG5hbWU6ICdjb25uZWN0aW9uVHlwZScsIFxuXHRcdFx0XHR2YWx1ZTogJ25vdGUnIFxuXHRcdFx0fSBcblx0XHR9KTtcblx0XHRub3RlUmFkaW8uY2hlY2tlZCA9ICh0aGlzLmNvbm5lY3Rpb25UeXBlID09PSAnbm90ZScpOyAvLyBTZXQgY2hlY2tlZCBiYXNlZCBvbiBjb25uZWN0aW9uVHlwZVxuXHRcdHJhZGlvTm90ZUxhYmVsLmFwcGVuZFRleHQoJyBOb3RlJyk7XG5cblx0XHRjb25zdCByYWRpb0JvdGhMYWJlbCA9IHJhZGlvQ29udGFpbmVyLmNyZWF0ZUVsKCdsYWJlbCcpO1xuXHRcdGNvbnN0IGJvdGhSYWRpbyA9IHJhZGlvQm90aExhYmVsLmNyZWF0ZUVsKCdpbnB1dCcsIHsgXG5cdFx0XHRhdHRyOiB7IFxuXHRcdFx0XHR0eXBlOiAncmFkaW8nLCBcblx0XHRcdFx0bmFtZTogJ2Nvbm5lY3Rpb25UeXBlJywgXG5cdFx0XHRcdHZhbHVlOiAnYm90aCcgXG5cdFx0XHR9IFxuXHRcdH0pO1xuXHRcdGJvdGhSYWRpby5jaGVja2VkID0gKHRoaXMuY29ubmVjdGlvblR5cGUgPT09ICdib3RoJyk7IC8vIFNldCBjaGVja2VkIGJhc2VkIG9uIGNvbm5lY3Rpb25UeXBlXG5cdFx0cmFkaW9Cb3RoTGFiZWwuYXBwZW5kVGV4dCgnIEJvdGgnKTtcblx0fVxuXHRcblxuXHRnZXREaXNwbGF5Q29udGVudChwYXJlbnQ6IEhUTUxFbGVtZW50KSB7XG5cdFx0Y29uc3QgZGlzcGxheVNldHRpbmdzID0gW1xuXHRcdFx0eyBpZDogJ3NtYXJ0LWNvbm5lY3Rpb25zLXZpc3VhbGl6ZXItbm9kZVNpemUnLCBsYWJlbDogJ05vZGUgc2l6ZScsIHZhbHVlOiB0aGlzLm5vZGVTaXplLCBtaW46IDEsIG1heDogMTUsIHN0ZXA6IDAuMDEgfSxcblx0XHRcdHsgaWQ6ICdzbWFydC1jb25uZWN0aW9ucy12aXN1YWxpemVyLW1heExhYmVsQ2hhcmFjdGVycycsIGxhYmVsOiAnTWF4IGxhYmVsIGNoYXJhY3RlcnMnLCB2YWx1ZTogdGhpcy5tYXhMYWJlbENoYXJhY3RlcnMsIG1pbjogMSwgbWF4OiA1MCwgc3RlcDogMSB9LFxuXHRcdFx0eyBpZDogJ3NtYXJ0LWNvbm5lY3Rpb25zLXZpc3VhbGl6ZXItbGlua0xhYmVsU2l6ZScsIGxhYmVsOiAnTGluayBsYWJlbCBzaXplJywgdmFsdWU6IHRoaXMubGlua0xhYmVsU2l6ZSwgbWluOiAxLCBtYXg6IDE1LCBzdGVwOiAwLjAxIH0sXG5cdFx0XHR7IGlkOiAnc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1ub2RlTGFiZWxTaXplJywgbGFiZWw6ICdOb2RlIGxhYmVsIHNpemUnLCB2YWx1ZTogdGhpcy5ub2RlTGFiZWxTaXplLCBtaW46IDEsIG1heDogMjYsIHN0ZXA6IDEgfSxcblx0XHRcdHsgaWQ6ICdzbWFydC1jb25uZWN0aW9ucy12aXN1YWxpemVyLW1pbkxpbmtUaGlja25lc3MnLCBsYWJlbDogJ01pbiBsaW5rIHRoaWNrbmVzcycsIHZhbHVlOiB0aGlzLm1pbkxpbmtUaGlja25lc3MsIG1pbjogMC4xLCBtYXg6IDEwLCBzdGVwOiAwLjAxIH0sXG5cdFx0XHR7IGlkOiAnc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1tYXhMaW5rVGhpY2tuZXNzJywgbGFiZWw6ICdNYXggbGluayB0aGlja25lc3MnLCB2YWx1ZTogdGhpcy5tYXhMaW5rVGhpY2tuZXNzLCBtaW46IDAuMSwgbWF4OiAxMCwgc3RlcDogMC4wMSB9LFxuXHRcdFx0eyBpZDogJ3NtYXJ0LWNvbm5lY3Rpb25zLXZpc3VhbGl6ZXItZmFkZVRocmVzaG9sZCcsIGxhYmVsOiAnVGV4dCBmYWRlIHRocmVzaG9sZCcsIHZhbHVlOiB0aGlzLnRleHRGYWRlVGhyZXNob2xkLCBtaW46IDAuMSwgbWF4OiAxMCwgc3RlcDogMC4wMSB9XG5cdFx0XTtcblx0XG5cdFx0ZGlzcGxheVNldHRpbmdzLmZvckVhY2goc2V0dGluZyA9PiB7XG5cdFx0XHRjb25zdCBzbGlkZXJDb250YWluZXIgPSBwYXJlbnQuY3JlYXRlRWwoJ2RpdicsIHsgY2xzOiAnc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1zbGlkZXItY29udGFpbmVyJyB9KTtcblx0XHRcdHNsaWRlckNvbnRhaW5lci5jcmVhdGVFbCgnbGFiZWwnLCB7IHRleHQ6IGAke3NldHRpbmcubGFiZWx9OiAke3NldHRpbmcudmFsdWV9YCwgYXR0cjogeyBpZDogYCR7c2V0dGluZy5pZH1MYWJlbGAsIGZvcjogc2V0dGluZy5pZCB9IH0pO1xuXHRcdFx0c2xpZGVyQ29udGFpbmVyLmNyZWF0ZUVsKCdpbnB1dCcsIHsgYXR0cjogeyB0eXBlOiAncmFuZ2UnLCBpZDogc2V0dGluZy5pZCwgY2xhc3M6ICdzbWFydC1jb25uZWN0aW9ucy12aXN1YWxpemVyLXNsaWRlcicsIG5hbWU6IHNldHRpbmcuaWQsIG1pbjogYCR7c2V0dGluZy5taW59YCwgbWF4OiBgJHtzZXR0aW5nLm1heH1gLCB2YWx1ZTogYCR7c2V0dGluZy52YWx1ZX1gLCBzdGVwOiBgJHtzZXR0aW5nLnN0ZXB9YCB9IH0pO1xuXHRcdH0pO1xuXHR9XG5cdFxuXG5cdGdldEZvcmNlc0NvbnRlbnQocGFyZW50OiBIVE1MRWxlbWVudCkge1xuXHRcdGNvbnN0IGZvcmNlc1NldHRpbmdzID0gW1xuXHRcdFx0eyBpZDogJ3NtYXJ0LWNvbm5lY3Rpb25zLXZpc3VhbGl6ZXItcmVwZWxGb3JjZScsIGxhYmVsOiAnUmVwZWwgZm9yY2UnLCB2YWx1ZTogdGhpcy5yZXBlbEZvcmNlLCBtaW46IDAsIG1heDogMTUwMCwgc3RlcDogMSB9LFxuXHRcdFx0eyBpZDogJ3NtYXJ0LWNvbm5lY3Rpb25zLXZpc3VhbGl6ZXItbGlua0ZvcmNlJywgbGFiZWw6ICdMaW5rIGZvcmNlJywgdmFsdWU6IHRoaXMubGlua0ZvcmNlLCBtaW46IDAsIG1heDogMSwgc3RlcDogMC4wMSB9LFxuXHRcdFx0eyBpZDogJ3NtYXJ0LWNvbm5lY3Rpb25zLXZpc3VhbGl6ZXItbGlua0Rpc3RhbmNlJywgbGFiZWw6ICdMaW5rIGRpc3RhbmNlJywgdmFsdWU6IHRoaXMubGlua0Rpc3RhbmNlLCBtaW46IDEwLCBtYXg6IDIwMCwgc3RlcDogMSB9XG5cdFx0XTtcblx0XG5cdFx0Zm9yY2VzU2V0dGluZ3MuZm9yRWFjaChzZXR0aW5nID0+IHtcblx0XHRcdGNvbnN0IHNsaWRlckNvbnRhaW5lciA9IHBhcmVudC5jcmVhdGVFbCgnZGl2JywgeyBjbHM6ICdzbWFydC1jb25uZWN0aW9ucy12aXN1YWxpemVyLXNsaWRlci1jb250YWluZXInIH0pO1xuXHRcdFx0c2xpZGVyQ29udGFpbmVyLmNyZWF0ZUVsKCdsYWJlbCcsIHsgdGV4dDogYCR7c2V0dGluZy5sYWJlbH06ICR7c2V0dGluZy52YWx1ZX1gLCBhdHRyOiB7IGlkOiBgJHtzZXR0aW5nLmlkfUxhYmVsYCwgZm9yOiBzZXR0aW5nLmlkIH0gfSk7XG5cdFx0XHRzbGlkZXJDb250YWluZXIuY3JlYXRlRWwoJ2lucHV0JywgeyBhdHRyOiB7IHR5cGU6ICdyYW5nZScsIGlkOiBzZXR0aW5nLmlkLCBjbGFzczogJ3NtYXJ0LWNvbm5lY3Rpb25zLXZpc3VhbGl6ZXItc2xpZGVyJywgbmFtZTogc2V0dGluZy5pZCwgbWluOiBgJHtzZXR0aW5nLm1pbn1gLCBtYXg6IGAke3NldHRpbmcubWF4fWAsIHZhbHVlOiBgJHtzZXR0aW5nLnZhbHVlfWAsIHN0ZXA6IGAke3NldHRpbmcuc3RlcH1gIH0gfSk7XG5cdFx0fSk7XG5cdH1cblx0XG5cdHRvZ2dsZURyb3Bkb3duTWVudSgpIHtcblx0XHRjb25zdCBkcm9wZG93bk1lbnUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2MtdmlzdWFsaXplci1kcm9wZG93bi1tZW51JykgYXMgSFRNTEVsZW1lbnQ7XG5cdFxuXHRcdGlmIChkcm9wZG93bk1lbnUpIHtcblx0XHRcdGRyb3Bkb3duTWVudS5jbGFzc0xpc3QudG9nZ2xlKCd2aXNpYmxlJyk7XG5cdFxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb25zb2xlLmVycm9yKCdEcm9wZG93biBtZW51IGVsZW1lbnQgbm90IGZvdW5kJyk7XG5cdFx0fVxuXHR9XG5cdFxuXG5cdHNldHVwQWNjb3JkaW9uSGVhZGVycygpIHtcblx0XHRjb25zdCBhY2NvcmRpb25IZWFkZXJzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnNtYXJ0LWNvbm5lY3Rpb25zLXZpc3VhbGl6ZXItYWNjb3JkaW9uLWhlYWRlcicpO1xuXHRcdGFjY29yZGlvbkhlYWRlcnMuZm9yRWFjaChoZWFkZXIgPT4gaGVhZGVyLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy50b2dnbGVBY2NvcmRpb25Db250ZW50LmJpbmQodGhpcykpKTtcblx0fVxuXG5cdHRvZ2dsZUFjY29yZGlvbkNvbnRlbnQoZXZlbnQ6IGFueSkge1xuXHRcdGNvbnN0IGNvbnRlbnQgPSBldmVudC5jdXJyZW50VGFyZ2V0Lm5leHRFbGVtZW50U2libGluZztcblx0XHRjb25zdCBhcnJvd0ljb24gPSBldmVudC5jdXJyZW50VGFyZ2V0LnF1ZXJ5U2VsZWN0b3IoJy5zbWFydC1jb25uZWN0aW9ucy12aXN1YWxpemVyLWFycm93LWljb24nKTtcblx0XHRpZiAoY29udGVudCAmJiBhcnJvd0ljb24pIHtcblx0XHRcdGNvbnRlbnQuY2xhc3NMaXN0LnRvZ2dsZSgnc2hvdycpO1xuXHRcdFx0YXJyb3dJY29uLmlubmVySFRNTCA9ICcnOyAvLyBDbGVhciBjdXJyZW50IGNvbnRlbnRcblx0XHRcdGFycm93SWNvbi5hcHBlbmRDaGlsZChjb250ZW50LmNsYXNzTGlzdC5jb250YWlucygnc2hvdycpID8gdGhpcy5jcmVhdGVEcm9wZG93bkFycm93KCkgOiB0aGlzLmNyZWF0ZVJpZ2h0QXJyb3coKSk7XG5cdFx0fVxuXHR9XG5cdFxuXHRjcmVhdGVEcm9wZG93bkFycm93KCkge1xuXHRcdGNvbnN0IHN2ZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsIFwic3ZnXCIpO1xuXHRcdHN2Zy5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcInNtYXJ0LWNvbm5lY3Rpb25zLXZpc3VhbGl6ZXItZHJvcGRvd24taW5kaWNhdG9yXCIpO1xuXHRcdHN2Zy5zZXRBdHRyaWJ1dGUoXCJ2aWV3Qm94XCIsIFwiMCAwIDE2IDE2XCIpO1xuXHRcdHN2Zy5zZXRBdHRyaWJ1dGUoXCJmaWxsXCIsIFwiY3VycmVudENvbG9yXCIpO1xuXHRcblx0XHRjb25zdCBwYXRoID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiwgXCJwYXRoXCIpO1xuXHRcdHBhdGguc2V0QXR0cmlidXRlKFwiZmlsbC1ydWxlXCIsIFwiZXZlbm9kZFwiKTtcblx0XHRwYXRoLnNldEF0dHJpYnV0ZShcImRcIiwgXCJNMS42NDYgNC42NDZhLjUuNSAwIDAgMSAuNzA4IDBMOCAxMC4yOTNsNS42NDYtNS42NDdhLjUuNSAwIDAgMSAuNzA4LjcwOGwtNiA2YS41LjUgMCAwIDEtLjcwOCAwbC02LTZhLjUuNSAwIDAgMSAwLS43MDh6XCIpO1xuXHRcblx0XHRzdmcuYXBwZW5kQ2hpbGQocGF0aCk7XG5cdFx0cmV0dXJuIHN2Zztcblx0fVxuXHRcblx0Y3JlYXRlUmlnaHRBcnJvdygpIHtcblx0XHRjb25zdCBzdmcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLCBcInN2Z1wiKTtcblx0XHRzdmcuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgXCJzbWFydC1jb25uZWN0aW9ucy12aXN1YWxpemVyLWRyb3Bkb3duLWluZGljYXRvclwiKTtcblx0XHRzdmcuc2V0QXR0cmlidXRlKFwidmlld0JveFwiLCBcIjAgMCAxNiAxNlwiKTtcblx0XHRzdmcuc2V0QXR0cmlidXRlKFwiZmlsbFwiLCBcImN1cnJlbnRDb2xvclwiKTtcblx0XG5cdFx0Y29uc3QgcGF0aCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsIFwicGF0aFwiKTtcblx0XHRwYXRoLnNldEF0dHJpYnV0ZShcImZpbGwtcnVsZVwiLCBcImV2ZW5vZGRcIik7XG5cdFx0cGF0aC5zZXRBdHRyaWJ1dGUoXCJkXCIsIFwiTTQuNjQ2IDEuNjQ2YS41LjUgMCAwIDEgLjcwOCAwbDYgNmEuNS41IDAgMCAxIDAgLjcwOGwtNiA2YS41LjUgMCAwIDEtLjcwOC0uNzA4TDEwLjI5MyA4IDQuNjQ2IDIuMzU0YS41LjUgMCAwIDEgMC0uNzA4elwiKTtcblx0XG5cdFx0c3ZnLmFwcGVuZENoaWxkKHBhdGgpO1xuXHRcdHJldHVybiBzdmc7XG5cdH1cblxuXHRjcmVhdGVTZXR0aW5nc0ljb24oKSB7XG5cdFx0Ly8gQ3JlYXRlIHRoZSBjb250YWluZXIgZGl2IGZvciB0aGUgc2V0dGluZ3MgaWNvblxuXHRcdGNvbnN0IHNldHRpbmdzSWNvbiA9IHRoaXMuY29udGVudEVsLmNyZWF0ZUVsKCdkaXYnLCB7XG5cdFx0XHRjbHM6IFsnc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1zZXR0aW5ncy1pY29uJywgXSxcblx0XHRcdGF0dHI6IHsgJ2FyaWEtbGFiZWwnOiAnT3BlbiBncmFwaCBzZXR0aW5ncycgfVxuXHRcdH0pO1xuXHRcblx0XHQvLyBDcmVhdGUgU1ZHIGVsZW1lbnQgZm9yIHNldHRpbmdzIGljb25cblx0XHRjb25zdCBzdmcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLCBcInN2Z1wiKTtcblx0XHRzdmcuc2V0QXR0cmlidXRlKFwid2lkdGhcIiwgXCIyNFwiKTtcblx0XHRzdmcuc2V0QXR0cmlidXRlKFwiaGVpZ2h0XCIsIFwiMjRcIik7XG5cdFx0c3ZnLnNldEF0dHJpYnV0ZShcInZpZXdCb3hcIiwgXCIwIDAgMjQgMjRcIik7XG5cdFx0c3ZnLnNldEF0dHJpYnV0ZShcImZpbGxcIiwgXCJub25lXCIpO1xuXHRcdHN2Zy5zZXRBdHRyaWJ1dGUoXCJzdHJva2VcIiwgXCJjdXJyZW50Q29sb3JcIik7XG5cdFx0c3ZnLnNldEF0dHJpYnV0ZShcInN0cm9rZS13aWR0aFwiLCBcIjJcIik7XG5cdFx0c3ZnLnNldEF0dHJpYnV0ZShcInN0cm9rZS1saW5lY2FwXCIsIFwicm91bmRcIik7XG5cdFx0c3ZnLnNldEF0dHJpYnV0ZShcInN0cm9rZS1saW5lam9pblwiLCBcInJvdW5kXCIpO1xuXHRcdHN2Zy5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcInNtYXJ0LWNvbm5lY3Rpb25zLXZpc3VhbGl6ZXItc3ZnLWljb24gc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1sdWNpZGUtc2V0dGluZ3NcIik7XG5cdFxuXHRcdC8vIENyZWF0ZSBwYXRoIGVsZW1lbnQgZm9yIHNldHRpbmdzIGljb25cblx0XHRjb25zdCBwYXRoID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiwgXCJwYXRoXCIpO1xuXHRcdHBhdGguc2V0QXR0cmlidXRlKFwiZFwiLCBcIk0xMi4yMiAyaC0uNDRhMiAyIDAgMCAwLTIgMnYuMThhMiAyIDAgMCAxLTEgMS43M2wtLjQzLjI1YTIgMiAwIDAgMS0yIDBsLS4xNS0uMDhhMiAyIDAgMCAwLTIuNzMuNzNsLS4yMi4zOGEyIDIgMCAwIDAgLjczIDIuNzNsLjE1LjFhMiAyIDAgMCAxIDEgMS43MnYuNTFhMiAyIDAgMCAxLTEgMS43NGwtLjE1LjA5YTIgMiAwIDAgMC0uNzMgMi43M2wuMjIuMzhhMiAyIDAgMCAwIDIuNzMuNzNsLjE1LS4wOGEyIDIgMCAwIDEgMiAwbC40My4yNWEyIDIgMCAwIDEgMSAxLjczVjIwYTIgMiAwIDAgMCAyIDJoLjQ0YTIgMiAwIDAgMCAyLTJ2LS4xOGEyIDIgMCAwIDEgMS0xLjczbC40My0uMjVhMiAyIDAgMCAxIDIgMGwuMTUuMDhhMiAyIDAgMCAwIDIuNzMtLjczbC4yMi0uMzlhMiAyIDAgMCAwLS43My0yLjczbC0uMTUtLjA4YTIgMiAwIDAgMS0xLTEuNzR2LS41YTIgMiAwIDAgMSAxLTEuNzRsLjE1LS4wOWEyIDIgMCAwIDAgLjczLTIuNzNsLS4yMi0uMzhhMiAyIDAgMCAwLTIuNzMtLjczbC0uMTUuMDhhMiAyIDAgMCAxLTIgMGwtLjQzLS4yNWEyIDIgMCAwIDEtMS0xLjczVjRhMiAyIDAgMCAwLTItMnpcIik7XG5cdFx0c3ZnLmFwcGVuZENoaWxkKHBhdGgpO1xuXHRcblx0XHQvLyBDcmVhdGUgY2lyY2xlIGVsZW1lbnQgZm9yIHNldHRpbmdzIGljb25cblx0XHRjb25zdCBjaXJjbGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLCBcImNpcmNsZVwiKTtcblx0XHRjaXJjbGUuc2V0QXR0cmlidXRlKFwiY3hcIiwgXCIxMlwiKTtcblx0XHRjaXJjbGUuc2V0QXR0cmlidXRlKFwiY3lcIiwgXCIxMlwiKTtcblx0XHRjaXJjbGUuc2V0QXR0cmlidXRlKFwiclwiLCBcIjNcIik7XG5cdFx0c3ZnLmFwcGVuZENoaWxkKGNpcmNsZSk7XG5cdFxuXHRcdC8vIEFwcGVuZCBTVkcgdG8gc2V0dGluZ3MgaWNvbiBjb250YWluZXJcblx0XHRzZXR0aW5nc0ljb24uYXBwZW5kQ2hpbGQoc3ZnKTtcblx0XG5cdFx0c2V0dGluZ3NJY29uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy50b2dnbGVEcm9wZG93bk1lbnUpO1xuXHR9XG5cblx0Y3JlYXRlUmVmcmVzaEljb24oKSB7XG5cdFx0Y29uc3QgcmVmcmVzaEljb24gPSB0aGlzLmNvbnRlbnRFbC5jcmVhdGVFbCgnZGl2JywgeyBjbHM6ICdzbWFydC1jb25uZWN0aW9ucy12aXN1YWxpemVyLXJlZnJlc2gtaWNvbicgfSk7XG5cdFxuXHRcdGNvbnN0IHN2ZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsIFwic3ZnXCIpO1xuXHRcdHN2Zy5zZXRBdHRyaWJ1dGUoXCJ3aWR0aFwiLCBcIjI0XCIpO1xuXHRcdHN2Zy5zZXRBdHRyaWJ1dGUoXCJoZWlnaHRcIiwgXCIyNFwiKTtcblx0XHRzdmcuc2V0QXR0cmlidXRlKFwidmlld0JveFwiLCBcIjAgMCAyNCAyNFwiKTtcblx0XHRzdmcuc2V0QXR0cmlidXRlKFwiZmlsbFwiLCBcIm5vbmVcIik7XG5cdFx0c3ZnLnNldEF0dHJpYnV0ZShcInN0cm9rZVwiLCBcImN1cnJlbnRDb2xvclwiKTtcblx0XHRzdmcuc2V0QXR0cmlidXRlKFwic3Ryb2tlLXdpZHRoXCIsIFwiMlwiKTtcblx0XHRzdmcuc2V0QXR0cmlidXRlKFwic3Ryb2tlLWxpbmVjYXBcIiwgXCJyb3VuZFwiKTtcblx0XHRzdmcuc2V0QXR0cmlidXRlKFwic3Ryb2tlLWxpbmVqb2luXCIsIFwicm91bmRcIik7XG5cdFx0c3ZnLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwic21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1zdmctaWNvbiBzbWFydC1jb25uZWN0aW9ucy12aXN1YWxpemVyLWx1Y2lkZS1yb3RhdGUtY2N3XCIpO1xuXHRcblx0XHRjb25zdCBwYXRoMSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsIFwicGF0aFwiKTtcblx0XHRwYXRoMS5zZXRBdHRyaWJ1dGUoXCJkXCIsIFwiTTMgMTJhOSA5IDAgMSAwIDktOSA5Ljc1IDkuNzUgMCAwIDAtNi43NCAyLjc0TDMgOFwiKTtcblx0XHRzdmcuYXBwZW5kQ2hpbGQocGF0aDEpO1xuXHRcblx0XHRjb25zdCBwYXRoMiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsIFwicGF0aFwiKTtcblx0XHRwYXRoMi5zZXRBdHRyaWJ1dGUoXCJkXCIsIFwiTTMgM3Y1aDVcIik7XG5cdFx0c3ZnLmFwcGVuZENoaWxkKHBhdGgyKTtcblx0XG5cdFx0cmVmcmVzaEljb24uYXBwZW5kQ2hpbGQoc3ZnKTtcblx0XG5cdFx0cmV0dXJuIHJlZnJlc2hJY29uOyAvLyBSZXR1cm4gdGhlIGNvbXBsZXRlIGljb24gZWxlbWVudFxuXHR9XG5cblx0Y3JlYXRlTmV3WEljb24oKSB7XG5cdFx0Y29uc3QgeEljb24gPSB0aGlzLmNvbnRlbnRFbC5jcmVhdGVFbCgnZGl2JywgeyBjbHM6ICdzbWFydC1jb25uZWN0aW9ucy12aXN1YWxpemVyLXgtaWNvbicgfSk7XG5cdFxuXHRcdGNvbnN0IHN2ZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsIFwic3ZnXCIpO1xuXHRcdHN2Zy5zZXRBdHRyaWJ1dGUoXCJ3aWR0aFwiLCBcIjI0XCIpO1xuXHRcdHN2Zy5zZXRBdHRyaWJ1dGUoXCJoZWlnaHRcIiwgXCIyNFwiKTtcblx0XHRzdmcuc2V0QXR0cmlidXRlKFwidmlld0JveFwiLCBcIjAgMCAyNCAyNFwiKTtcblx0XHRzdmcuc2V0QXR0cmlidXRlKFwiZmlsbFwiLCBcIm5vbmVcIik7XG5cdFx0c3ZnLnNldEF0dHJpYnV0ZShcInN0cm9rZVwiLCBcImN1cnJlbnRDb2xvclwiKTtcblx0XHRzdmcuc2V0QXR0cmlidXRlKFwic3Ryb2tlLXdpZHRoXCIsIFwiMlwiKTtcblx0XHRzdmcuc2V0QXR0cmlidXRlKFwic3Ryb2tlLWxpbmVjYXBcIiwgXCJyb3VuZFwiKTtcblx0XHRzdmcuc2V0QXR0cmlidXRlKFwic3Ryb2tlLWxpbmVqb2luXCIsIFwicm91bmRcIik7XG5cdFx0c3ZnLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwic21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1zdmctaWNvbiBzbWFydC1jb25uZWN0aW9ucy12aXN1YWxpemVyLWx1Y2lkZS14XCIpO1xuXHRcblx0XHRjb25zdCBwYXRoMSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsIFwicGF0aFwiKTtcblx0XHRwYXRoMS5zZXRBdHRyaWJ1dGUoXCJkXCIsIFwiTTE4IDYgNiAxOFwiKTtcblx0XHRzdmcuYXBwZW5kQ2hpbGQocGF0aDEpO1xuXHRcblx0XHRjb25zdCBwYXRoMiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsIFwicGF0aFwiKTtcblx0XHRwYXRoMi5zZXRBdHRyaWJ1dGUoXCJkXCIsIFwibTYgNiAxMiAxMlwiKTtcblx0XHRzdmcuYXBwZW5kQ2hpbGQocGF0aDIpO1xuXHRcblx0XHR4SWNvbi5hcHBlbmRDaGlsZChzdmcpO1xuXHRcblx0XHRyZXR1cm4geEljb247IC8vIFJldHVybiB0aGUgY29tcGxldGUgaWNvbiBlbGVtZW50XG5cdH1cblxuXHRzZXR1cFNldHRpbmdzRXZlbnRMaXN0ZW5lcnMoKSB7XG5cdFx0dGhpcy5zZXR1cFNjb3JlVGhyZXNob2xkU2xpZGVyKCk7XG5cdFx0dGhpcy5zZXR1cE5vZGVTaXplU2xpZGVyKCk7XG5cdFx0dGhpcy5zZXR1cExpbmVUaGlja25lc3NTbGlkZXIoKTtcblx0XHR0aGlzLnNldHVwQ2VudGVyRm9yY2VTbGlkZXIoKTtcblx0XHR0aGlzLnNldHVwUmVwZWxGb3JjZVNsaWRlcigpO1xuXHRcdHRoaXMuc2V0dXBMaW5rRm9yY2VTbGlkZXIoKTtcblx0XHR0aGlzLnNldHVwTGlua0Rpc3RhbmNlU2xpZGVyKCk7XG5cdFx0dGhpcy5zZXR1cEZhZGVUaHJlc2hvbGRTbGlkZXIoKTtcblx0XHR0aGlzLnNldHVwTWluTGlua1RoaWNrbmVzc1NsaWRlcigpO1xuXHRcdHRoaXMuc2V0dXBNYXhMaW5rVGhpY2tuZXNzU2xpZGVyKCk7XG5cdFx0dGhpcy5zZXR1cENvbm5lY3Rpb25UeXBlUmFkaW9zKCk7XG5cdFx0dGhpcy5zZXR1cE1heExhYmVsQ2hhcmFjdGVyc1NsaWRlcigpO1xuXHRcdHRoaXMuc2V0dXBMaW5rTGFiZWxTaXplU2xpZGVyKCk7XG5cdFx0dGhpcy5zZXR1cE5vZGVMYWJlbFNpemVTbGlkZXIoKTtcblx0XHR0aGlzLnNldHVwQ2xvc2VJY29uKCk7XG5cdFx0dGhpcy5zZXR1cFJlZnJlc2hJY29uKCk7XG5cdH1cblxuXHRhc3luYyBzZXR1cFNjb3JlVGhyZXNob2xkU2xpZGVyKCkge1xuXHRcdGNvbnN0IHNjb3JlVGhyZXNob2xkU2xpZGVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NtYXJ0LWNvbm5lY3Rpb25zLXZpc3VhbGl6ZXItc2NvcmVUaHJlc2hvbGQnKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xuXHRcdGlmIChzY29yZVRocmVzaG9sZFNsaWRlcikge1xuXHRcdFx0c2NvcmVUaHJlc2hvbGRTbGlkZXIuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCAoZXZlbnQpID0+IHRoaXMudXBkYXRlU2NvcmVUaHJlc2hvbGQoZXZlbnQpKTtcblx0XHRcdGNvbnN0IGRlYm91bmNlZFVwZGF0ZSA9IGRlYm91bmNlKGFzeW5jKGV2ZW50OiBFdmVudCkgPT4ge1xuXHRcdFx0XHRhd2FpdCB0aGlzLnVwZGF0ZVZpc3VhbGl6YXRpb24ocGFyc2VGbG9hdCgoZXZlbnQudGFyZ2V0IGFzIEhUTUxJbnB1dEVsZW1lbnQpLnZhbHVlKSk7XG5cdFx0XHR9LCA1MDAsIHRydWUpO1x0XHRcdFxuXHRcdFx0c2NvcmVUaHJlc2hvbGRTbGlkZXIuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBkZWJvdW5jZWRVcGRhdGUpO1xuXHRcdH1cblx0fVxuXG5cdHVwZGF0ZVNjb3JlVGhyZXNob2xkKGV2ZW50OiBhbnkpIHtcblx0XHRjb25zdCBuZXdTY29yZVRocmVzaG9sZCA9IHBhcnNlRmxvYXQoZXZlbnQudGFyZ2V0LnZhbHVlKTtcblx0XHRjb25zdCBsYWJlbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzbWFydC1jb25uZWN0aW9ucy12aXN1YWxpemVyLXNjb3JlVGhyZXNob2xkTGFiZWwnKTtcblx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5yZWxldmFuY2VTY29yZVRocmVzaG9sZCA9IG5ld1Njb3JlVGhyZXNob2xkOyAvLyBVcGRhdGUgdGhlIHNldHRpbmdzXG4gICAgICAgIHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpOyAvLyBTYXZlIHRoZSBzZXR0aW5nc1xuXHRcdGlmIChsYWJlbCkgbGFiZWwudGV4dENvbnRlbnQgPSBgTWluIHJlbGV2YW5jZTogJHsobmV3U2NvcmVUaHJlc2hvbGQgKiAxMDApLnRvRml4ZWQoMCl9JWA7XG5cdH1cblxuXHRzZXR1cE5vZGVTaXplU2xpZGVyKCkge1xuXHRcdGNvbnN0IG5vZGVTaXplU2xpZGVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NtYXJ0LWNvbm5lY3Rpb25zLXZpc3VhbGl6ZXItbm9kZVNpemUnKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xuXHRcdGlmIChub2RlU2l6ZVNsaWRlcikge1xuXHRcdFx0bm9kZVNpemVTbGlkZXIuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCAoZXZlbnQpID0+IHRoaXMudXBkYXRlTm9kZVNpemUoZXZlbnQpKTtcblx0XHR9XG5cdH1cblxuXHR1cGRhdGVOb2RlU2l6ZShldmVudDogYW55KSB7XG5cdFx0Y29uc3QgbmV3Tm9kZVNpemUgPSBwYXJzZUZsb2F0KGV2ZW50LnRhcmdldC52YWx1ZSk7XG5cdFx0Y29uc3QgbGFiZWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1ub2RlU2l6ZUxhYmVsJyk7XG5cdFx0aWYgKGxhYmVsKSBsYWJlbC50ZXh0Q29udGVudCA9IGBOb2RlIHNpemU6ICR7bmV3Tm9kZVNpemV9YDtcblx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5ub2RlU2l6ZSA9IG5ld05vZGVTaXplOyAvLyBVcGRhdGUgdGhlIHNldHRpbmdzXG4gICAgICAgIHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpOyAvLyBTYXZlIHRoZSBzZXR0aW5nc1xuXHRcdHRoaXMubm9kZVNpemUgPSBuZXdOb2RlU2l6ZTtcblx0XHR0aGlzLnVwZGF0ZU5vZGVTaXplcygpO1xuXHR9XG5cblx0c2V0dXBMaW5lVGhpY2tuZXNzU2xpZGVyKCkge1xuXHRcdGNvbnN0IGxpbmVUaGlja25lc3NTbGlkZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1saW5lVGhpY2tuZXNzJykgYXMgSFRNTElucHV0RWxlbWVudDtcblx0XHRpZiAobGluZVRoaWNrbmVzc1NsaWRlcikge1xuXHRcdFx0bGluZVRoaWNrbmVzc1NsaWRlci5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIChldmVudCkgPT4gdGhpcy51cGRhdGVMaW5lVGhpY2tuZXNzKGV2ZW50KSk7XG5cdFx0fVxuXHR9XG5cblx0dXBkYXRlTGluZVRoaWNrbmVzcyhldmVudDogYW55KSB7XG5cdFx0Y29uc3QgbmV3TGluZVRoaWNrbmVzcyA9IHBhcnNlRmxvYXQoZXZlbnQudGFyZ2V0LnZhbHVlKTtcblx0XHRjb25zdCBsYWJlbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdsaW5lVGhpY2tuZXNzTGFiZWwnKTtcblx0XHRpZiAobGFiZWwpIGxhYmVsLnRleHRDb250ZW50ID0gYExpbmUgdGhpY2tuZXNzOiAke25ld0xpbmVUaGlja25lc3N9YDtcblx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5saW5rVGhpY2tuZXNzID0gbmV3TGluZVRoaWNrbmVzczsgLy8gVXBkYXRlIHRoZSBzZXR0aW5nc1xuICAgICAgICB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTsgLy8gU2F2ZSB0aGUgc2V0dGluZ3Ncblx0XHR0aGlzLmxpbmtUaGlja25lc3MgPSBuZXdMaW5lVGhpY2tuZXNzO1xuXHRcdHRoaXMudXBkYXRlTGlua1RoaWNrbmVzcygpO1xuXHR9XG5cblx0c2V0dXBDZW50ZXJGb3JjZVNsaWRlcigpIHtcblx0XHRjb25zdCBjZW50ZXJGb3JjZVNsaWRlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzbWFydC1jb25uZWN0aW9ucy12aXN1YWxpemVyLWNlbnRlckZvcmNlJykgYXMgSFRNTElucHV0RWxlbWVudDtcblx0XHRpZiAoY2VudGVyRm9yY2VTbGlkZXIpIHtcblx0XHRcdGNlbnRlckZvcmNlU2xpZGVyLmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgKGV2ZW50KSA9PiB0aGlzLnVwZGF0ZUNlbnRlckZvcmNlKGV2ZW50KSk7XG5cdFx0fVxuXHR9XG5cblx0dXBkYXRlQ2VudGVyRm9yY2UoZXZlbnQ6IGFueSkge1xuXHRcdGNvbnN0IG5ld0NlbnRlckZvcmNlID0gcGFyc2VGbG9hdChldmVudC50YXJnZXQudmFsdWUpO1xuXHRcdGNvbnN0IGxhYmVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NlbnRlckZvcmNlTGFiZWwnKTtcblx0XHRpZiAobGFiZWwpIGxhYmVsLnRleHRDb250ZW50ID0gYENlbnRlciBmb3JjZTogJHtuZXdDZW50ZXJGb3JjZX1gO1xuXHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLmNlbnRlckZvcmNlID0gbmV3Q2VudGVyRm9yY2U7IC8vIFVwZGF0ZSB0aGUgc2V0dGluZ3NcbiAgICAgICAgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7IC8vIFNhdmUgdGhlIHNldHRpbmdzXG5cdFx0dGhpcy5jZW50ZXJGb3JjZSA9IG5ld0NlbnRlckZvcmNlO1xuXHRcdHRoaXMudXBkYXRlU2ltdWxhdGlvbkZvcmNlcygpO1xuXHR9XG5cblx0c2V0dXBSZXBlbEZvcmNlU2xpZGVyKCkge1xuXHRcdGNvbnN0IHJlcGVsRm9yY2VTbGlkZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1yZXBlbEZvcmNlJykgYXMgSFRNTElucHV0RWxlbWVudDtcblx0XHRpZiAocmVwZWxGb3JjZVNsaWRlcikge1xuXHRcdFx0cmVwZWxGb3JjZVNsaWRlci5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIChldmVudCkgPT4gdGhpcy51cGRhdGVSZXBlbEZvcmNlKGV2ZW50KSk7XG5cdFx0fVxuXHR9XG5cblx0dXBkYXRlUmVwZWxGb3JjZShldmVudDogYW55KSB7XG5cdFx0Y29uc3QgbmV3UmVwZWxGb3JjZSA9IHBhcnNlRmxvYXQoZXZlbnQudGFyZ2V0LnZhbHVlKTtcblx0XHRjb25zdCBsYWJlbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzbWFydC1jb25uZWN0aW9ucy12aXN1YWxpemVyLXJlcGVsRm9yY2VMYWJlbCcpO1xuXHRcdGlmIChsYWJlbCkgbGFiZWwudGV4dENvbnRlbnQgPSBgUmVwZWwgZm9yY2U6ICR7bmV3UmVwZWxGb3JjZX1gO1xuXHRcdHRoaXMucmVwZWxGb3JjZSA9IG5ld1JlcGVsRm9yY2U7XG5cdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MucmVwZWxGb3JjZSA9IG5ld1JlcGVsRm9yY2U7IC8vIFVwZGF0ZSB0aGUgc2V0dGluZ3NcbiAgICAgICAgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7IC8vIFNhdmUgdGhlIHNldHRpbmdzXG5cdFx0dGhpcy51cGRhdGVTaW11bGF0aW9uRm9yY2VzKCk7XG5cdH1cblxuXHRzZXR1cExpbmtGb3JjZVNsaWRlcigpIHtcblx0XHRjb25zdCBsaW5rRm9yY2VTbGlkZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1saW5rRm9yY2UnKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xuXHRcdGlmIChsaW5rRm9yY2VTbGlkZXIpIHtcblx0XHRcdGxpbmtGb3JjZVNsaWRlci5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIChldmVudCkgPT4gdGhpcy51cGRhdGVMaW5rRm9yY2UoZXZlbnQpKTtcblx0XHR9XG5cdH1cblxuXHR1cGRhdGVMaW5rRm9yY2UoZXZlbnQ6IGFueSkge1xuXHRcdGNvbnN0IG5ld0xpbmtGb3JjZSA9IHBhcnNlRmxvYXQoZXZlbnQudGFyZ2V0LnZhbHVlKTtcblx0XHRjb25zdCBsYWJlbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzbWFydC1jb25uZWN0aW9ucy12aXN1YWxpemVyLWxpbmtGb3JjZUxhYmVsJyk7XG5cdFx0aWYgKGxhYmVsKSBsYWJlbC50ZXh0Q29udGVudCA9IGBMaW5rIGZvcmNlOiAke25ld0xpbmtGb3JjZX1gO1xuXHRcdHRoaXMubGlua0ZvcmNlID0gbmV3TGlua0ZvcmNlO1xuXHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLmxpbmtGb3JjZSA9IG5ld0xpbmtGb3JjZTsgLy8gVXBkYXRlIHRoZSBzZXR0aW5nc1xuICAgICAgICB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTsgLy8gU2F2ZSB0aGUgc2V0dGluZ3Ncblx0XHR0aGlzLnVwZGF0ZVNpbXVsYXRpb25Gb3JjZXMoKTtcblx0fVxuXG5cdHNldHVwTGlua0Rpc3RhbmNlU2xpZGVyKCkge1xuXHRcdGNvbnN0IGxpbmtEaXN0YW5jZVNsaWRlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzbWFydC1jb25uZWN0aW9ucy12aXN1YWxpemVyLWxpbmtEaXN0YW5jZScpIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG5cdFx0aWYgKGxpbmtEaXN0YW5jZVNsaWRlcikge1xuXHRcdFx0bGlua0Rpc3RhbmNlU2xpZGVyLmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgKGV2ZW50KSA9PiB0aGlzLnVwZGF0ZUxpbmtEaXN0YW5jZShldmVudCkpO1xuXHRcdH1cblx0fVxuXG5cdHVwZGF0ZUxpbmtEaXN0YW5jZShldmVudDogYW55KSB7XG5cdFx0Y29uc3QgbmV3TGlua0Rpc3RhbmNlID0gcGFyc2VGbG9hdChldmVudC50YXJnZXQudmFsdWUpO1xuXHRcdGNvbnN0IGxhYmVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NtYXJ0LWNvbm5lY3Rpb25zLXZpc3VhbGl6ZXItbGlua0Rpc3RhbmNlTGFiZWwnKTtcblx0XHRpZiAobGFiZWwpIGxhYmVsLnRleHRDb250ZW50ID0gYExpbmsgZGlzdGFuY2U6ICR7bmV3TGlua0Rpc3RhbmNlfWA7XG5cdFx0dGhpcy5saW5rRGlzdGFuY2UgPSBuZXdMaW5rRGlzdGFuY2U7XG5cdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MubGlua0Rpc3RhbmNlID0gbmV3TGlua0Rpc3RhbmNlOyAvLyBVcGRhdGUgdGhlIHNldHRpbmdzXG4gICAgICAgIHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpOyAvLyBTYXZlIHRoZSBzZXR0aW5nc1xuXHRcdHRoaXMudXBkYXRlU2ltdWxhdGlvbkZvcmNlcygpO1xuXHR9XG5cblx0c2V0dXBGYWRlVGhyZXNob2xkU2xpZGVyKCkge1xuXHRcdGNvbnN0IGZhZGVUaHJlc2hvbGRTbGlkZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1mYWRlVGhyZXNob2xkJykgYXMgSFRNTElucHV0RWxlbWVudDtcblx0XHRpZiAoZmFkZVRocmVzaG9sZFNsaWRlcikge1xuXHRcdFx0ZmFkZVRocmVzaG9sZFNsaWRlci5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIChldmVudCkgPT4ge1xuXHRcdFx0XHR0aGlzLnVwZGF0ZUZhZGVUaHJlc2hvbGQoZXZlbnQpO1xuXHRcdFx0XHR0aGlzLnVwZGF0ZUxhYmVsT3BhY2l0eShkMy56b29tVHJhbnNmb3JtKGQzLnNlbGVjdCgnc3ZnJykubm9kZSgpIGFzIEVsZW1lbnQpLmspO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHR9XG5cblx0dXBkYXRlRmFkZVRocmVzaG9sZChldmVudDogYW55KSB7XG5cdFx0Y29uc3QgbmV3RmFkZVRocmVzaG9sZCA9IHBhcnNlRmxvYXQoZXZlbnQudGFyZ2V0LnZhbHVlKTtcblx0XHRjb25zdCBsYWJlbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzbWFydC1jb25uZWN0aW9ucy12aXN1YWxpemVyLWZhZGVUaHJlc2hvbGRMYWJlbCcpO1xuXHRcdGlmIChsYWJlbCkgbGFiZWwudGV4dENvbnRlbnQgPSBgVGV4dCBmYWRlIHRocmVzaG9sZDogJHtuZXdGYWRlVGhyZXNob2xkfWA7XG5cdFx0dGhpcy50ZXh0RmFkZVRocmVzaG9sZCA9IG5ld0ZhZGVUaHJlc2hvbGQ7XG5cdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MudGV4dEZhZGVUaHJlc2hvbGQgPSBuZXdGYWRlVGhyZXNob2xkOyAvLyBVcGRhdGUgdGhlIHNldHRpbmdzXG4gICAgICAgIHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpOyAvLyBTYXZlIHRoZSBzZXR0aW5nc1xuXHR9XG5cblx0c2V0dXBNaW5MaW5rVGhpY2tuZXNzU2xpZGVyKCkge1xuXHRcdGNvbnN0IG1pbkxpbmtUaGlja25lc3NTbGlkZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1taW5MaW5rVGhpY2tuZXNzJykgYXMgSFRNTElucHV0RWxlbWVudDtcblx0XHRpZiAobWluTGlua1RoaWNrbmVzc1NsaWRlcikge1xuXHRcdFx0bWluTGlua1RoaWNrbmVzc1NsaWRlci5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIChldmVudCkgPT4gdGhpcy51cGRhdGVNaW5MaW5rVGhpY2tuZXNzKGV2ZW50KSk7XG5cdFx0fVxuXHR9XG5cblx0dXBkYXRlTWluTGlua1RoaWNrbmVzcyhldmVudDogYW55KSB7XG5cdFx0Y29uc3QgbmV3TWluTGlua1RoaWNrbmVzcyA9IHBhcnNlRmxvYXQoZXZlbnQudGFyZ2V0LnZhbHVlKTtcblx0XHRjb25zdCBsYWJlbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzbWFydC1jb25uZWN0aW9ucy12aXN1YWxpemVyLW1pbkxpbmtUaGlja25lc3NMYWJlbCcpO1xuXHRcdGlmIChsYWJlbCkgbGFiZWwudGV4dENvbnRlbnQgPSBgTWluIGxpbmsgdGhpY2tuZXNzOiAke25ld01pbkxpbmtUaGlja25lc3N9YDtcblx0XHR0aGlzLm1pbkxpbmtUaGlja25lc3MgPSBuZXdNaW5MaW5rVGhpY2tuZXNzO1xuXHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLm1pbkxpbmtUaGlja25lc3MgPSBuZXdNaW5MaW5rVGhpY2tuZXNzOyAvLyBVcGRhdGUgdGhlIHNldHRpbmdzXG4gICAgICAgIHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpOyAvLyBTYXZlIHRoZSBzZXR0aW5nc1xuXHRcdHRoaXMudXBkYXRlTGlua1RoaWNrbmVzcygpO1xuXHR9XG5cblx0c2V0dXBNYXhMaW5rVGhpY2tuZXNzU2xpZGVyKCkge1xuXHRcdGNvbnN0IG1heExpbmtUaGlja25lc3NTbGlkZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1tYXhMaW5rVGhpY2tuZXNzJykgYXMgSFRNTElucHV0RWxlbWVudDtcblx0XHRpZiAobWF4TGlua1RoaWNrbmVzc1NsaWRlcikge1xuXHRcdFx0bWF4TGlua1RoaWNrbmVzc1NsaWRlci5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIChldmVudCkgPT4gdGhpcy51cGRhdGVNYXhMaW5rVGhpY2tuZXNzKGV2ZW50KSk7XG5cdFx0fVxuXHR9XG5cblx0dXBkYXRlTWF4TGlua1RoaWNrbmVzcyhldmVudDogYW55KSB7XG5cdFx0Y29uc3QgbmV3TWF4TGlua1RoaWNrbmVzcyA9IHBhcnNlRmxvYXQoZXZlbnQudGFyZ2V0LnZhbHVlKTtcblx0XHRjb25zdCBsYWJlbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzbWFydC1jb25uZWN0aW9ucy12aXN1YWxpemVyLW1heExpbmtUaGlja25lc3NMYWJlbCcpO1xuXHRcdGlmIChsYWJlbCkgbGFiZWwudGV4dENvbnRlbnQgPSBgTWF4IGxpbmsgdGhpY2tuZXNzOiAke25ld01heExpbmtUaGlja25lc3N9YDtcblx0XHR0aGlzLm1heExpbmtUaGlja25lc3MgPSBuZXdNYXhMaW5rVGhpY2tuZXNzO1xuICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5tYXhMaW5rVGhpY2tuZXNzID0gbmV3TWF4TGlua1RoaWNrbmVzczsgLy8gVXBkYXRlIHRoZSBzZXR0aW5nc1xuICAgICAgICB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTsgLy8gU2F2ZSB0aGUgc2V0dGluZ3Ncblx0XHR0aGlzLnVwZGF0ZUxpbmtUaGlja25lc3MoKTtcblx0fVxuXG5cdHNldHVwQ29ubmVjdGlvblR5cGVSYWRpb3MoKSB7XG5cdFx0Y29uc3QgY29ubmVjdGlvblR5cGVSYWRpb3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdpbnB1dFtuYW1lPVwiY29ubmVjdGlvblR5cGVcIl0nKTtcblx0XHRjb25uZWN0aW9uVHlwZVJhZGlvcy5mb3JFYWNoKHJhZGlvID0+IHJhZGlvLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChldmVudCkgPT4gdGhpcy51cGRhdGVDb25uZWN0aW9uVHlwZShldmVudCkpKTtcblx0fVxuXG5cdGFzeW5jIHVwZGF0ZUNvbm5lY3Rpb25UeXBlKGV2ZW50OiBhbnkpIHtcblx0XHR0aGlzLmNvbm5lY3Rpb25UeXBlID0gZXZlbnQudGFyZ2V0LnZhbHVlO1xuXHRcdHRoaXMuaXNDaGFuZ2luZ0Nvbm5lY3Rpb25UeXBlID0gdHJ1ZTtcblx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5jb25uZWN0aW9uVHlwZSA9IHRoaXMuY29ubmVjdGlvblR5cGU7IC8vIFVwZGF0ZSB0aGUgc2V0dGluZ3NcbiAgICAgICAgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7IC8vIFNhdmUgdGhlIHNldHRpbmdzXG5cdFx0YXdhaXQgdGhpcy51cGRhdGVWaXN1YWxpemF0aW9uKCk7XG5cdH1cblxuXHRzZXR1cE1heExhYmVsQ2hhcmFjdGVyc1NsaWRlcigpIHtcblx0XHRjb25zdCBtYXhMYWJlbENoYXJhY3RlcnNTbGlkZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1tYXhMYWJlbENoYXJhY3RlcnMnKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xuXHRcdGlmIChtYXhMYWJlbENoYXJhY3RlcnNTbGlkZXIpIHtcblx0XHRcdG1heExhYmVsQ2hhcmFjdGVyc1NsaWRlci5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIChldmVudCkgPT4gdGhpcy51cGRhdGVNYXhMYWJlbENoYXJhY3RlcnMoZXZlbnQpKTtcblx0XHR9XG5cdH1cblxuXHR1cGRhdGVNYXhMYWJlbENoYXJhY3RlcnMoZXZlbnQ6IGFueSkge1xuXHRcdGNvbnN0IG5ld01heExhYmVsQ2hhcmFjdGVycyA9IHBhcnNlSW50KGV2ZW50LnRhcmdldC52YWx1ZSwgMTApO1xuXHRcdGNvbnN0IGxhYmVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NtYXJ0LWNvbm5lY3Rpb25zLXZpc3VhbGl6ZXItbWF4TGFiZWxDaGFyYWN0ZXJzTGFiZWwnKTtcblx0XHRpZiAobGFiZWwpIGxhYmVsLnRleHRDb250ZW50ID0gYE1heCBMYWJlbCBDaGFyYWN0ZXJzOiAke25ld01heExhYmVsQ2hhcmFjdGVyc31gO1xuXHRcdHRoaXMubWF4TGFiZWxDaGFyYWN0ZXJzID0gbmV3TWF4TGFiZWxDaGFyYWN0ZXJzO1xuXHRcdHRoaXMudXBkYXRlTm9kZUxhYmVscygpO1xuXHR9XG5cblx0c2V0dXBMaW5rTGFiZWxTaXplU2xpZGVyKCkge1xuXHRcdGNvbnN0IGxpbmtMYWJlbFNpemVTbGlkZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1saW5rTGFiZWxTaXplJykgYXMgSFRNTElucHV0RWxlbWVudDtcblx0XHRpZiAobGlua0xhYmVsU2l6ZVNsaWRlcikge1xuXHRcdFx0bGlua0xhYmVsU2l6ZVNsaWRlci5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIChldmVudCkgPT4gdGhpcy51cGRhdGVMaW5rTGFiZWxTaXplKGV2ZW50KSk7XG5cdFx0fVxuXHR9XG5cblx0dXBkYXRlTGlua0xhYmVsU2l6ZShldmVudDogYW55KSB7XG5cdFx0Y29uc3QgbmV3TGlua0xhYmVsU2l6ZSA9IHBhcnNlRmxvYXQoZXZlbnQudGFyZ2V0LnZhbHVlKTtcblx0XHRjb25zdCBsYWJlbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzbWFydC1jb25uZWN0aW9ucy12aXN1YWxpemVyLWxpbmtMYWJlbFNpemVMYWJlbCcpO1xuXHRcdGlmIChsYWJlbCkgbGFiZWwudGV4dENvbnRlbnQgPSBgTGluayBMYWJlbCBTaXplOiAke25ld0xpbmtMYWJlbFNpemV9YDtcblx0XHR0aGlzLmxpbmtMYWJlbFNpemUgPSBuZXdMaW5rTGFiZWxTaXplO1xuXHRcdHRoaXMudXBkYXRlTGlua0xhYmVsU2l6ZXMoKTtcblx0fVxuXG5cdHNldHVwTm9kZUxhYmVsU2l6ZVNsaWRlcigpIHtcblx0XHRjb25zdCBub2RlTGFiZWxTaXplU2xpZGVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NtYXJ0LWNvbm5lY3Rpb25zLXZpc3VhbGl6ZXItbm9kZUxhYmVsU2l6ZScpIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG5cdFx0aWYgKG5vZGVMYWJlbFNpemVTbGlkZXIpIHtcblx0XHRcdG5vZGVMYWJlbFNpemVTbGlkZXIuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCAoZXZlbnQpID0+IHRoaXMudXBkYXRlTm9kZUxhYmVsU2l6ZShldmVudCkpO1xuXHRcdH1cblx0fVxuXG5cdHVwZGF0ZU5vZGVMYWJlbFNpemUoZXZlbnQ6IGFueSkge1xuXHRcdGNvbnNvbGUubG9nKCdmbG91bmRkZCcpO1xuXHRcdGNvbnN0IG5ld05vZGVMYWJlbFNpemUgPSBwYXJzZUZsb2F0KGV2ZW50LnRhcmdldC52YWx1ZSk7XG5cdFx0Y29uc3QgbGFiZWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1ub2RlTGFiZWxTaXplTGFiZWwnKTtcblx0XHRpZiAobGFiZWwpIGxhYmVsLnRleHRDb250ZW50ID0gYE5vZGUgTGFiZWwgU2l6ZTogJHtuZXdOb2RlTGFiZWxTaXplfWA7XG5cdFx0dGhpcy5ub2RlTGFiZWxTaXplID0gbmV3Tm9kZUxhYmVsU2l6ZTtcblx0XHR0aGlzLnVwZGF0ZU5vZGVMYWJlbFNpemVzKCk7XG5cdH1cblxuXHQvLyBVcGRhdGVkIHNldHVwQ2xvc2VJY29uIG1ldGhvZFxuXHRzZXR1cENsb3NlSWNvbigpIHtcblx0XHRjb25zdCBjbG9zZUljb24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1jbG9zZS1pY29uJyk7XG5cdFx0aWYgKGNsb3NlSWNvbikgY2xvc2VJY29uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gdGhpcy50b2dnbGVEcm9wZG93bk1lbnUoKSk7XG5cdH1cblxuXHRjbG9zZURyb3Bkb3duTWVudSgpIHtcblx0XHRjb25zdCBkcm9wZG93bk1lbnUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2MtdmlzdWFsaXplci1kcm9wZG93bi1tZW51Jyk7XG5cdFx0aWYgKGRyb3Bkb3duTWVudSkgZHJvcGRvd25NZW51LmNsYXNzTGlzdC5yZW1vdmUoJ29wZW4nKTtcblx0fVxuXG5cdHNldHVwUmVmcmVzaEljb24oKSB7XG5cdFx0Y29uc3QgcmVmcmVzaEljb24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1yZWZyZXNoLWljb24nKTtcblx0XHRpZiAocmVmcmVzaEljb24pIHJlZnJlc2hJY29uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gdGhpcy5yZXNldFRvRGVmYXVsdCgpKTtcblx0fVxuXG5cdGFzeW5jIHJlc2V0VG9EZWZhdWx0KCkge1xuXG5cdFx0Ly8gUmVzZXQgYWxsIHZhbHVlcyB0byB0aGVpciBkZWZhdWx0XG5cdFx0dGhpcy5yZWxldmFuY2VTY29yZVRocmVzaG9sZCA9IERFRkFVTFRfTkVUV09SS19TRVRUSU5HUy5yZWxldmFuY2VTY29yZVRocmVzaG9sZDtcblx0XHR0aGlzLm5vZGVTaXplID0gREVGQVVMVF9ORVRXT1JLX1NFVFRJTkdTLm5vZGVTaXplO1xuXHRcdHRoaXMubGlua1RoaWNrbmVzcyA9IERFRkFVTFRfTkVUV09SS19TRVRUSU5HUy5saW5lVGhpY2tuZXNzO1xuXHRcdHRoaXMucmVwZWxGb3JjZSA9IERFRkFVTFRfTkVUV09SS19TRVRUSU5HUy5yZXBlbEZvcmNlO1xuXHRcdHRoaXMubGlua0ZvcmNlID0gREVGQVVMVF9ORVRXT1JLX1NFVFRJTkdTLmxpbmtGb3JjZTtcblx0XHR0aGlzLmxpbmtEaXN0YW5jZSA9IERFRkFVTFRfTkVUV09SS19TRVRUSU5HUy5saW5rRGlzdGFuY2U7XG5cdFx0dGhpcy5jZW50ZXJGb3JjZSA9IERFRkFVTFRfTkVUV09SS19TRVRUSU5HUy5jZW50ZXJGb3JjZTtcblx0XHR0aGlzLnRleHRGYWRlVGhyZXNob2xkID0gREVGQVVMVF9ORVRXT1JLX1NFVFRJTkdTLnRleHRGYWRlVGhyZXNob2xkO1xuXHRcdHRoaXMubWluTGlua1RoaWNrbmVzcyA9IERFRkFVTFRfTkVUV09SS19TRVRUSU5HUy5taW5MaW5rVGhpY2tuZXNzO1xuXHRcdHRoaXMubWF4TGlua1RoaWNrbmVzcyA9IERFRkFVTFRfTkVUV09SS19TRVRUSU5HUy5tYXhMaW5rVGhpY2tuZXNzO1xuXHRcdHRoaXMubWF4TGFiZWxDaGFyYWN0ZXJzID0gREVGQVVMVF9ORVRXT1JLX1NFVFRJTkdTLm1heExhYmVsQ2hhcmFjdGVycztcblx0XHR0aGlzLmxpbmtMYWJlbFNpemUgPSBERUZBVUxUX05FVFdPUktfU0VUVElOR1MubGlua0xhYmVsU2l6ZTtcblx0XHR0aGlzLm5vZGVMYWJlbFNpemUgPSBERUZBVUxUX05FVFdPUktfU0VUVElOR1Mubm9kZUxhYmVsU2l6ZTtcblx0XHR0aGlzLmNvbm5lY3Rpb25UeXBlID0gREVGQVVMVF9ORVRXT1JLX1NFVFRJTkdTLmNvbm5lY3Rpb25UeXBlO1xuXHRcdHRoaXMubm90ZUZpbGxDb2xvciA9IERFRkFVTFRfTkVUV09SS19TRVRUSU5HUy5ub3RlRmlsbENvbG9yO1xuXHRcdHRoaXMuYmxvY2tGaWxsQ29sb3IgPSBERUZBVUxUX05FVFdPUktfU0VUVElOR1MuYmxvY2tGaWxsQ29sb3I7XG5cblx0XHQvLyBTYXZlIHBsdWdpbiBzZXR0aW5nc1xuXHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLnJlbGV2YW5jZVNjb3JlVGhyZXNob2xkID0gREVGQVVMVF9ORVRXT1JLX1NFVFRJTkdTLnJlbGV2YW5jZVNjb3JlVGhyZXNob2xkO1xuXHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLm5vZGVTaXplID0gREVGQVVMVF9ORVRXT1JLX1NFVFRJTkdTLm5vZGVTaXplO1xuXHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLmxpbmtUaGlja25lc3MgPSBERUZBVUxUX05FVFdPUktfU0VUVElOR1MubGluZVRoaWNrbmVzcztcblx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5yZXBlbEZvcmNlID0gREVGQVVMVF9ORVRXT1JLX1NFVFRJTkdTLnJlcGVsRm9yY2U7XG5cdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MubGlua0ZvcmNlID0gREVGQVVMVF9ORVRXT1JLX1NFVFRJTkdTLmxpbmtGb3JjZTtcblx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5saW5rRGlzdGFuY2UgPSBERUZBVUxUX05FVFdPUktfU0VUVElOR1MubGlua0Rpc3RhbmNlO1xuXHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLmNlbnRlckZvcmNlID0gREVGQVVMVF9ORVRXT1JLX1NFVFRJTkdTLmNlbnRlckZvcmNlO1xuXHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLnRleHRGYWRlVGhyZXNob2xkID0gREVGQVVMVF9ORVRXT1JLX1NFVFRJTkdTLnRleHRGYWRlVGhyZXNob2xkO1xuXHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLm1pbkxpbmtUaGlja25lc3MgPSBERUZBVUxUX05FVFdPUktfU0VUVElOR1MubWluTGlua1RoaWNrbmVzcztcblx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5tYXhMaW5rVGhpY2tuZXNzID0gREVGQVVMVF9ORVRXT1JLX1NFVFRJTkdTLm1heExpbmtUaGlja25lc3M7XG5cdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MubWF4TGFiZWxDaGFyYWN0ZXJzID0gREVGQVVMVF9ORVRXT1JLX1NFVFRJTkdTLm1heExhYmVsQ2hhcmFjdGVycztcblx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5saW5rTGFiZWxTaXplID0gREVGQVVMVF9ORVRXT1JLX1NFVFRJTkdTLmxpbmtMYWJlbFNpemU7XG5cdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3Mubm9kZUxhYmVsU2l6ZSA9IERFRkFVTFRfTkVUV09SS19TRVRUSU5HUy5ub2RlTGFiZWxTaXplO1xuXHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLmNvbm5lY3Rpb25UeXBlID0gREVGQVVMVF9ORVRXT1JLX1NFVFRJTkdTLmNvbm5lY3Rpb25UeXBlO1xuXHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLm5vdGVGaWxsQ29sb3IgPSBERUZBVUxUX05FVFdPUktfU0VUVElOR1Mubm90ZUZpbGxDb2xvcjtcblx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5ibG9ja0ZpbGxDb2xvciA9IERFRkFVTFRfTkVUV09SS19TRVRUSU5HUy5ibG9ja0ZpbGxDb2xvcjtcbiAgICAgICAgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7IC8vIFNhdmUgdGhlIHNldHRpbmdzXG5cblx0XHQvLyBVcGRhdGUgdmlzdWFsaXphdGlvblxuXHRcdHRoaXMudXBkYXRlTGFiZWxzVG9EZWZhdWx0cygpO1xuXHRcdHRoaXMudXBkYXRlU2xpZGVycygpO1xuXHRcdHRoaXMudXBkYXRlTm9kZVNpemVzKCk7XG5cdFx0dGhpcy51cGRhdGVMaW5rVGhpY2tuZXNzKCk7XG5cdFx0dGhpcy51cGRhdGVTaW11bGF0aW9uRm9yY2VzKCk7XG5cdFx0YXdhaXQgdGhpcy51cGRhdGVWaXN1YWxpemF0aW9uKHRoaXMucmVsZXZhbmNlU2NvcmVUaHJlc2hvbGQpO1xuXHRcdFxuXHR9XG5cblx0dXBkYXRlTGFiZWxzVG9EZWZhdWx0cygpIHtcblx0XHRjb25zdCBsYWJlbHMgPSB7XG5cdFx0XHQnc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1zY29yZVRocmVzaG9sZExhYmVsJzogYE1pbiByZWxldmFuY2U6ICR7KHRoaXMucmVsZXZhbmNlU2NvcmVUaHJlc2hvbGQgKiAxMDApLnRvRml4ZWQoMCl9JWAsXG5cdFx0XHQnc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1ub2RlU2l6ZUxhYmVsJzogYE5vZGUgc2l6ZTogJHt0aGlzLm5vZGVTaXplfWAsXG5cdFx0XHQnc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1tYXhMYWJlbENoYXJhY3RlcnNMYWJlbCc6IGBNYXggbGFiZWwgY2hhcmFjdGVyczogJHt0aGlzLm1heExhYmVsQ2hhcmFjdGVyc31gLFxuXHRcdFx0J3NtYXJ0LWNvbm5lY3Rpb25zLXZpc3VhbGl6ZXItbGlua0xhYmVsU2l6ZUxhYmVsJzogYExpbmsgbGFiZWwgc2l6ZTogJHt0aGlzLmxpbmtMYWJlbFNpemV9YCxcblx0XHRcdCdzbWFydC1jb25uZWN0aW9ucy12aXN1YWxpemVyLXNtYXJ0LWNvbm5lY3Rpb25zLXZpc3VhbGl6ZXItbm9kZUxhYmVsU2l6ZUxhYmVsJzogYE5vZGUgbGFiZWwgc2l6ZTogJHt0aGlzLm5vZGVMYWJlbFNpemV9YCxcblx0XHRcdCdzbWFydC1jb25uZWN0aW9ucy12aXN1YWxpemVyLW1pbkxpbmtUaGlja25lc3NMYWJlbCc6IGBNaW4gbGluayB0aGlja25lc3M6ICR7dGhpcy5taW5MaW5rVGhpY2tuZXNzfWAsXG5cdFx0XHQnc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1tYXhMaW5rVGhpY2tuZXNzTGFiZWwnOiBgTWF4IGxpbmsgdGhpY2tuZXNzOiAke3RoaXMubWF4TGlua1RoaWNrbmVzc31gLFxuXHRcdFx0J3NtYXJ0LWNvbm5lY3Rpb25zLXZpc3VhbGl6ZXItZmFkZVRocmVzaG9sZExhYmVsJzogYFRleHQgZmFkZSB0aHJlc2hvbGQ6ICR7dGhpcy50ZXh0RmFkZVRocmVzaG9sZH1gLFxuXHRcdFx0J3NtYXJ0LWNvbm5lY3Rpb25zLXZpc3VhbGl6ZXItcmVwZWxGb3JjZUxhYmVsJzogYFJlcGVsIGZvcmNlOiAke3RoaXMucmVwZWxGb3JjZX1gLFxuXHRcdFx0J3NtYXJ0LWNvbm5lY3Rpb25zLXZpc3VhbGl6ZXItbGlua0ZvcmNlTGFiZWwnOiBgTGluayBmb3JjZTogJHt0aGlzLmxpbmtGb3JjZX1gLFxuXHRcdFx0J3NtYXJ0LWNvbm5lY3Rpb25zLXZpc3VhbGl6ZXItbGlua0Rpc3RhbmNlTGFiZWwnOiBgTGluayBkaXN0YW5jZTogJHt0aGlzLmxpbmtEaXN0YW5jZX1gXG5cdFx0fTtcblx0XG5cdFx0Zm9yIChjb25zdCBbaWQsIHRleHRdIG9mIE9iamVjdC5lbnRyaWVzKGxhYmVscykpIHtcblx0XHRcdGNvbnN0IGxhYmVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpO1xuXHRcdFx0aWYgKGxhYmVsKSB7XG5cdFx0XHRcdGxhYmVsLnRleHRDb250ZW50ID0gdGV4dDtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHR1cGRhdGVTbGlkZXJzKCkge1xuXHRcdGNvbnN0IHNjb3JlVGhyZXNob2xkU2xpZGVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NtYXJ0LWNvbm5lY3Rpb25zLXZpc3VhbGl6ZXItc2NvcmVUaHJlc2hvbGQnKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xuXHRcdGNvbnN0IG5vZGVTaXplU2xpZGVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NtYXJ0LWNvbm5lY3Rpb25zLXZpc3VhbGl6ZXItbm9kZVNpemUnKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xuXHRcdC8vIGNvbnN0IGxpbmVUaGlja25lc3NTbGlkZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbGluZVRoaWNrbmVzcycpIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG5cdFx0Ly8gY29uc3QgY2VudGVyRm9yY2VTbGlkZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2VudGVyRm9yY2UnKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xuXHRcdGNvbnN0IHJlcGVsRm9yY2VTbGlkZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1yZXBlbEZvcmNlJykgYXMgSFRNTElucHV0RWxlbWVudDtcblx0XHRjb25zdCBsaW5rRm9yY2VTbGlkZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1saW5rRm9yY2UnKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xuXHRcdGNvbnN0IGxpbmtEaXN0YW5jZVNsaWRlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzbWFydC1jb25uZWN0aW9ucy12aXN1YWxpemVyLWxpbmtEaXN0YW5jZScpIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG5cdFx0Y29uc3QgZmFkZVRocmVzaG9sZFNsaWRlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzbWFydC1jb25uZWN0aW9ucy12aXN1YWxpemVyLWZhZGVUaHJlc2hvbGQnKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xuXHRcdGNvbnN0IG1pbkxpbmtUaGlja25lc3NTbGlkZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1taW5MaW5rVGhpY2tuZXNzJykgYXMgSFRNTElucHV0RWxlbWVudDtcblx0XHRjb25zdCBtYXhMaW5rVGhpY2tuZXNzU2xpZGVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NtYXJ0LWNvbm5lY3Rpb25zLXZpc3VhbGl6ZXItbWF4TGlua1RoaWNrbmVzcycpIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG5cdFx0Y29uc3QgbWF4TGFiZWxDaGFyYWN0ZXJzU2xpZGVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NtYXJ0LWNvbm5lY3Rpb25zLXZpc3VhbGl6ZXItbWF4TGFiZWxDaGFyYWN0ZXJzJykgYXMgSFRNTElucHV0RWxlbWVudDtcblx0XHRjb25zdCBsaW5rTGFiZWxTaXplU2xpZGVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NtYXJ0LWNvbm5lY3Rpb25zLXZpc3VhbGl6ZXItbGlua0xhYmVsU2l6ZScpIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG5cdFx0Y29uc3Qgbm9kZUxhYmVsU2l6ZVNsaWRlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzbWFydC1jb25uZWN0aW9ucy12aXN1YWxpemVyLW5vZGVMYWJlbFNpemUnKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xuXHRcdFxuXHRcdHNjb3JlVGhyZXNob2xkU2xpZGVyLnZhbHVlID0gYCR7dGhpcy5yZWxldmFuY2VTY29yZVRocmVzaG9sZH1gO1xuXHRcdG5vZGVTaXplU2xpZGVyLnZhbHVlID0gYCR7dGhpcy5ub2RlU2l6ZX1gO1xuXHRcdC8vIGxpbmVUaGlja25lc3NTbGlkZXIudmFsdWUgPSBgJHt0aGlzLmxpbmtUaGlja25lc3N9YDtcblx0XHQvLyBjZW50ZXJGb3JjZVNsaWRlci52YWx1ZSA9IGAke3RoaXMuY2VudGVyRm9yY2V9YDtcblx0XHRyZXBlbEZvcmNlU2xpZGVyLnZhbHVlID0gYCR7dGhpcy5yZXBlbEZvcmNlfWA7XG5cdFx0bGlua0ZvcmNlU2xpZGVyLnZhbHVlID0gYCR7dGhpcy5saW5rRm9yY2V9YDtcblx0XHRsaW5rRGlzdGFuY2VTbGlkZXIudmFsdWUgPSBgJHt0aGlzLmxpbmtEaXN0YW5jZX1gO1xuXHRcdGZhZGVUaHJlc2hvbGRTbGlkZXIudmFsdWUgPSBgJHt0aGlzLnRleHRGYWRlVGhyZXNob2xkfWA7XG5cdFx0bWluTGlua1RoaWNrbmVzc1NsaWRlci52YWx1ZSA9IGAke3RoaXMubWluTGlua1RoaWNrbmVzc31gO1xuXHRcdG1heExpbmtUaGlja25lc3NTbGlkZXIudmFsdWUgPSBgJHt0aGlzLm1heExpbmtUaGlja25lc3N9YDtcblx0XHRtYXhMYWJlbENoYXJhY3RlcnNTbGlkZXIudmFsdWUgPSBgJHt0aGlzLm1heExhYmVsQ2hhcmFjdGVyc31gO1xuXHRcdGxpbmtMYWJlbFNpemVTbGlkZXIudmFsdWUgPSBgJHt0aGlzLmxpbmtMYWJlbFNpemV9YDtcblx0XHRub2RlTGFiZWxTaXplU2xpZGVyLnZhbHVlID0gYCR7dGhpcy5ub2RlTGFiZWxTaXplfWA7XG5cdH1cblxuXHRhc3luYyB3YXRjaEZvck5vdGVDaGFuZ2VzKCkge1xuXHRcdHRoaXMuYXBwLndvcmtzcGFjZS5vbignZmlsZS1vcGVuJywgYXN5bmMoZmlsZSkgPT4ge1xuXHRcdFx0aWYgKGZpbGUgJiYgKHRoaXMuY3VycmVudE5vdGVLZXkgIT09IGZpbGUucGF0aCkgJiYgIXRoaXMuaXNIb3ZlcmluZyAmJiB0aGlzPy5jb250YWluZXJFbD8uY2hpbGRyZW5bMV0pIHtcblx0XHRcdFx0dGhpcy5jdXJyZW50Tm90ZUtleSA9IGZpbGUucGF0aDtcblx0XHRcdFx0dGhpcy5jdXJyZW50Tm90ZUNoYW5naW5nID0gdHJ1ZTtcblx0XHRcdFx0YXdhaXQgdGhpcy5yZW5kZXIoKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXG5cdGFzeW5jIHVwZGF0ZVZpc3VhbGl6YXRpb24obmV3U2NvcmVUaHJlc2hvbGQ/OiBudW1iZXIpIHtcblxuXHRcdC8vIE9ubHkgdXBkYXRlIGlmIHdlJ3JlIG5vdCBhbHJlYWR5IHVwZGF0aW5nXG5cdFx0aWYgKHRoaXMudXBkYXRpbmdWaXN1YWxpemF0aW9uICYmICF0aGlzLmlzQ2hhbmdpbmdDb25uZWN0aW9uVHlwZSkge1xuXHRcdFx0dGhpcy51cGRhdGluZ1Zpc3VhbGl6YXRpb24gPSBmYWxzZTtcblx0XHRcdHRoaXMuY3VycmVudE5vdGVDaGFuZ2luZyA9IGZhbHNlO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHRoaXMuaXNDaGFuZ2luZ0Nvbm5lY3Rpb25UeXBlID0gZmFsc2U7XG5cdFxuXHRcdGlmIChuZXdTY29yZVRocmVzaG9sZCAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHR0aGlzLnJlbGV2YW5jZVNjb3JlVGhyZXNob2xkID0gbmV3U2NvcmVUaHJlc2hvbGQ7XG5cdFx0fVxuXHRcblx0XHRhd2FpdCB0aGlzLnVwZGF0ZUNvbm5lY3Rpb25zKCk7XG5cblx0XHRjb25zdCBmaWx0ZXJlZENvbm5lY3Rpb25zID0gdGhpcy5jb25uZWN0aW9ucy5maWx0ZXIoKGNvbm5lY3Rpb246IGFueSkgPT4gY29ubmVjdGlvbi5zY29yZSA+PSB0aGlzLnJlbGV2YW5jZVNjb3JlVGhyZXNob2xkKTtcblx0XHRjb25zdCB2aXNpYmxlTm9kZXMgPSBuZXcgU2V0PHN0cmluZz4oKTtcblx0XHRmaWx0ZXJlZENvbm5lY3Rpb25zLmZvckVhY2goKGNvbm5lY3Rpb246IGFueSkgPT4ge1xuXHRcdFx0dmlzaWJsZU5vZGVzLmFkZChjb25uZWN0aW9uLnNvdXJjZSk7XG5cdFx0XHR2aXNpYmxlTm9kZXMuYWRkKGNvbm5lY3Rpb24udGFyZ2V0KTtcblx0XHR9KTtcblx0XHQvLyBBbHdheXMgaW5jbHVkZSB0aGUgY2VudHJhbCBub2RlXG5cdFx0dmlzaWJsZU5vZGVzLmFkZCh0aGlzLmNlbnRyYWxOb3RlLmtleSk7XG5cdFx0Y29uc3Qgbm9kZXNEYXRhID0gQXJyYXkuZnJvbSh2aXNpYmxlTm9kZXMpLm1hcCgoaWQ6IGFueSkgPT4ge1xuXHRcdFx0Y29uc3Qgbm9kZSA9IHRoaXMubm9kZXMuZmluZCgobm9kZTogYW55KSA9PiBub2RlLmlkID09PSBpZCk7XG5cdFx0XHRyZXR1cm4gbm9kZSA/IG5vZGUgOiBudWxsO1xuXHRcdH0pLmZpbHRlcihCb29sZWFuKTtcblxuXHRcdCAvLyBFbnN1cmUgdGhlIGNlbnRyYWwgbm9kZSBpcyBpbmNsdWRlZCBpbiBub2Rlc0RhdGFcblx0XHQgaWYgKCFub2Rlc0RhdGEuc29tZSgobm9kZTogYW55KSA9PiBub2RlLmlkID09PSB0aGlzLmNlbnRyYWxOb3RlLmtleSkpIHtcblx0XHRcdGNvbnN0IGNlbnRyYWxOb2RlID0gdGhpcy5ub2Rlcy5maW5kKChub2RlOiBhbnkpID0+IG5vZGUuaWQgPT09IHRoaXMuY2VudHJhbE5vdGUua2V5KTtcblx0XHRcdGlmIChjZW50cmFsTm9kZSkge1xuXHRcdFx0XHRub2Rlc0RhdGEucHVzaChjZW50cmFsTm9kZSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0IC8vIENoZWNrIGFuZCBpbml0aWFsaXplIG5vZGUgcG9zaXRpb25zXG5cdFx0IG5vZGVzRGF0YS5mb3JFYWNoKChub2RlOiBhbnkpID0+IHtcblxuXHRcdFx0aWYgKCFub2RlLnggfHwgIW5vZGUueSkge1xuXHRcdFx0XHRjb25zb2xlLndhcm4oYE5vZGUgd2l0aCBpbnZhbGlkIHBvc2l0aW9uOiAke25vZGUuaWR9YCk7XG5cdFx0XHRcdG5vZGUueCA9IE1hdGgucmFuZG9tKCkgKiAxMDAwOyAvLyBvciBzb21lIGRlZmF1bHQgdmFsdWVcblx0XHRcdFx0bm9kZS55ID0gTWF0aC5yYW5kb20oKSAqIDEwMDA7IC8vIG9yIHNvbWUgZGVmYXVsdCB2YWx1ZVxuXHRcdFx0fVxuXHRcdH0pO1xuXG5cblx0XG5cdFx0dGhpcy52YWxpZGF0ZWRMaW5rcyA9IGZpbHRlcmVkQ29ubmVjdGlvbnMuZmlsdGVyKChsaW5rOiBhbnkpID0+IHtcblx0XHRcdGNvbnN0IHNvdXJjZU5vZGUgPSBub2Rlc0RhdGEuZmluZCgobm9kZTogYW55KSA9PiBub2RlLmlkID09PSBsaW5rLnNvdXJjZSk7XG5cdFx0XHRjb25zdCB0YXJnZXROb2RlID0gbm9kZXNEYXRhLmZpbmQoKG5vZGU6IGFueSkgPT4gbm9kZS5pZCA9PT0gbGluay50YXJnZXQpO1xuXHRcdFx0aWYgKCFzb3VyY2VOb2RlIHx8ICF0YXJnZXROb2RlKSB7XG5cdFx0XHRcdGNvbnNvbGUud2FybihgTGluayBzb3VyY2Ugb3IgdGFyZ2V0IG5vZGUgbm90IGZvdW5kOiAke2xpbmsuc291cmNlfSwgJHtsaW5rLnRhcmdldH1gKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBzb3VyY2VOb2RlICYmIHRhcmdldE5vZGU7XG5cdFx0fSk7XG5cdFxuXHRcdGlmIChub2Rlc0RhdGEubGVuZ3RoID09PSAwIHx8IHRoaXMudmFsaWRhdGVkTGlua3MubGVuZ3RoID09PSAwKSB7XG5cdFx0XHR0aGlzLnVwZGF0aW5nVmlzdWFsaXphdGlvbiA9IGZhbHNlO1xuXHRcdFx0Y29uc29sZS53YXJuKCdObyBub2RlcyBvciBsaW5rcyB0byBkaXNwbGF5IGFmdGVyIGZpbHRlcmluZy4gQWJvcnRpbmcgdXBkYXRlLicpO1xuXHRcdFx0bmV3IE5vdGljZSgnTm8gbm9kZXMgb3IgbGlua3MgdG8gZGlzcGxheSBhZnRlciBmaWx0ZXJpbmcuIEFkanVzdCBmaWx0ZXIgc2V0dGluZ3MnKTtcblxuXHRcdFx0IC8vIENsZWFyIHRoZSBleGlzdGluZyBub2RlcyBhbmQgbGlua3MgZnJvbSB0aGUgdmlzdWFsaXphdGlvblxuXHRcdFx0IHRoaXMubm9kZVNlbGVjdGlvbiA9IHRoaXMuc3ZnR3JvdXAuc2VsZWN0KCdnLnNtYXJ0LWNvbm5lY3Rpb25zLXZpc3VhbGl6ZXItbm9kZXMnKS5zZWxlY3RBbGwoJ2NpcmNsZScpLmRhdGEoW10pLmV4aXQoKS5yZW1vdmUoKTtcblx0XHRcdCB0aGlzLmxpbmtTZWxlY3Rpb24gPSB0aGlzLnN2Z0dyb3VwLnNlbGVjdCgnZy5zbWFydC1jb25uZWN0aW9ucy12aXN1YWxpemVyLWxpbmtzJykuc2VsZWN0QWxsKCdsaW5lJykuZGF0YShbXSkuZXhpdCgpLnJlbW92ZSgpO1xuXHRcdFx0IHRoaXMubGlua0xhYmVsU2VsZWN0aW9uID0gdGhpcy5zdmdHcm91cC5zZWxlY3QoJ2cuc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1saW5rLWxhYmVscycpLnNlbGVjdEFsbCgndGV4dCcpLmRhdGEoW10pLmV4aXQoKS5yZW1vdmUoKTtcblx0XHRcdCB0aGlzLmxhYmVsU2VsZWN0aW9uID0gdGhpcy5zdmdHcm91cC5zZWxlY3QoJ2cuc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1ub2RlLWxhYmVscycpLnNlbGVjdEFsbCgndGV4dCcpLmRhdGEoW10pLmV4aXQoKS5yZW1vdmUoKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFxuXHRcdHRoaXMudXBkYXRlTm9kZUFuZExpbmtTZWxlY3Rpb24obm9kZXNEYXRhKTtcblxuXHRcdFxuXHRcdGlmICghdGhpcy5zaW11bGF0aW9uIHx8IHRoaXMuY3VycmVudE5vdGVDaGFuZ2luZyB8fCB0aGlzLmlzRmlsdGVyaW5nKSB7XG5cdFx0XHRjb25zdCB7IHdpZHRoLCBoZWlnaHQgfSA9IHRoaXMuZ2V0U1ZHRGltZW5zaW9ucygpO1xuXHRcdFx0dGhpcy5pbml0aWFsaXplU2ltdWxhdGlvbih3aWR0aCwgaGVpZ2h0KTtcblx0XHRcdHRoaXMuY3VycmVudE5vdGVDaGFuZ2luZyA9IGZhbHNlO1xuXHRcdFx0dGhpcy5pc0ZpbHRlcmluZyA9IGZhbHNlO1xuXHRcdH1cblx0XG5cdFx0dGhpcy5zaW11bGF0aW9uLm5vZGVzKG5vZGVzRGF0YSkub24oJ3RpY2snLCB0aGlzLnNpbXVsYXRpb25UaWNrSGFuZGxlci5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnNpbXVsYXRpb24uZm9yY2UoJ2xpbmsnKS5saW5rcyh0aGlzLnZhbGlkYXRlZExpbmtzKVxuXHRcdC5kaXN0YW5jZSgoZDogYW55KSA9PiB0aGlzLmxpbmtEaXN0YW5jZVNjYWxlKGQuc2NvcmUpKTsgLy8gRW5zdXJlIHRoZSBsaW5rIGRpc3RhbmNlIGlzIGFwcGxpZWRcblxuXHRcdHRoaXMuc2ltdWxhdGlvbi5hbHBoYSgxKS5yZXN0YXJ0KCk7XG5cblx0XHQvLyBTdG9wIHRoZSBzaW11bGF0aW9uIGFmdGVyIGEgc2hvcnQgZGVsYXlcblx0XHRzZXRUaW1lb3V0KCgpID0+IHtcblx0XHRcdHRoaXMuc2ltdWxhdGlvbi5hbHBoYVRhcmdldCgwKTtcblx0XHR9LCAxMDAwKTsgLy8gQWRqdXN0IHRoZSBkZWxheSBhcyBuZWVkZWRcblx0XG5cdFx0dGhpcy51cGRhdGluZ1Zpc3VhbGl6YXRpb24gPSBmYWxzZTtcblxuXHRcdC8vIFRPRE86IENvbW1lbnQgYmFjayB3aGVuIHB1c2hpbmcgbGVnZW5kXG5cdFx0Ly8gRmlyc3QsIGNsZWFyIHRoZSBleGlzdGluZyBsZWdlbmQgaWYgaXQgZXhpc3RzXG5cdFx0Ly8gY29uc3QgZXhpc3RpbmdMZWdlbmQgPSB0aGlzLmNvbnRlbnRFbC5xdWVyeVNlbGVjdG9yKCcubGVnZW5kLWNvbnRhaW5lcicpO1xuXHRcdC8vIGlmIChleGlzdGluZ0xlZ2VuZCkge1xuXHRcdC8vIFx0ZXhpc3RpbmdMZWdlbmQucmVtb3ZlKCk7XG5cdFx0Ly8gfVxuXG5cdFx0Ly8gTm93LCByZS1yZW5kZXIgdGhlIGxlZ2VuZCB3aXRoIHVwZGF0ZWQgbm9kZSBkYXRhXG5cdFx0Ly8gdGhpcy5yZW5kZXJMZWdlbmQoKTtcblx0fVxuXG5cdHNpbXVsYXRpb25UaWNrSGFuZGxlcigpIHtcblx0XHR0aGlzLm5vZGVTZWxlY3Rpb24uYXR0cignY3gnLCAoZDogYW55KSA9PiBkLngpLmF0dHIoJ2N5JywgKGQ6IGFueSkgPT4gZC55KS5zdHlsZSgnY3Vyc29yJywgJ3BvaW50ZXInKTtcblx0XHR0aGlzLmxpbmtTZWxlY3Rpb24uYXR0cigneDEnLCAoZDogYW55KSA9PiBkLnNvdXJjZS54IHx8IDApLmF0dHIoJ3kxJywgKGQ6IGFueSkgPT4gZC5zb3VyY2UueSB8fCAwKS5zdHlsZSgnY3Vyc29yJywgJ3BvaW50ZXInKVxuXHRcdFx0LmF0dHIoJ3gyJywgKGQ6IGFueSkgPT4gZC50YXJnZXQueCB8fCAwKS5hdHRyKCd5MicsIChkOiBhbnkpID0+IGQudGFyZ2V0LnkgfHwgMCk7XG5cdFx0dGhpcy5saW5rTGFiZWxTZWxlY3Rpb24uYXR0cigneCcsIChkOiBhbnkpID0+ICgoZC5zb3VyY2UueCArIGQudGFyZ2V0LngpIC8gMikpXG5cdFx0XHQuYXR0cigneScsIChkOiBhbnkpID0+ICgoZC5zb3VyY2UueSArIGQudGFyZ2V0LnkpIC8gMikpO1xuXHRcdHRoaXMubGFiZWxTZWxlY3Rpb25cblx0XHRcdC5hdHRyKCd4JywgKGQ6IGFueSkgPT4gZC54KVxuXHRcdFx0LmF0dHIoJ3knLCAoZDogYW55KSA9PiBkLnkpO1xuXHRcblx0fVxuXHRcblx0XG5cdFxuXHRhc3luYyB1cGRhdGVDb25uZWN0aW9ucygpIHtcblx0XHR0aGlzLm5vZGVzID0gW107XG5cdFx0dGhpcy5saW5rcyA9IFtdO1xuXHRcdHRoaXMuY29ubmVjdGlvbnMgPSBbXTtcblx0XHR0aGlzLm1pblNjb3JlID0gMTtcblx0XHR0aGlzLm1heFNjb3JlID0gMDtcblx0XHRpZiAoIXRoaXMuY3VycmVudE5vdGVLZXkpIHJldHVybjtcblx0XHR0aGlzLmNlbnRyYWxOb3RlID0gdGhpcy5zbWFydE5vdGVzW3RoaXMuY3VycmVudE5vdGVLZXldO1xuXHRcdGNvbnN0IG5vdGVDb25uZWN0aW9ucyA9IChhd2FpdCBhcGlDbGllbnQuZ2V0UmVzcG9uc2UodGhpcy5jdXJyZW50Tm90ZUtleS5yZXBsYWNlKFwiLm1kXCIsIFwiXCIpKSkubWFwKGwgPT4gKHtcblx0XHRcdGl0ZW06IHt0aXRsZTpsPy50aXRsZXM/Lm5vcm1hbGl6ZWQsIGtleTpsPy50aXRsZXM/Lm5vcm1hbGl6ZWQsIGlkOmw/LnRpdGxlcz8ubm9ybWFsaXplZH0sXG5cdFx0XHRzY29yZTogMVxuXHRcdH0pKVxuXHRcdHRoaXMuYWRkQ2VudHJhbE5vZGUoKTtcblx0XHR0aGlzLmFkZEZpbHRlcmVkQ29ubmVjdGlvbnMobm90ZUNvbm5lY3Rpb25zKTtcblx0XHRjb25zdCBpc1ZhbGlkID0gdGhpcy52YWxpZGF0ZUdyYXBoRGF0YSh0aGlzLm5vZGVzLCB0aGlzLmxpbmtzKTtcblx0XHRpZiAoIWlzVmFsaWQpIGNvbnNvbGUuZXJyb3IoJ0dyYXBoIGRhdGEgdmFsaWRhdGlvbiBmYWlsZWQuJyk7XG5cdH1cblx0XG5cdFxuXHRhZGRDZW50cmFsTm9kZSgpIHtcblx0XHRcblx0XHRpZiAodGhpcy5jZW50cmFsTm90ZS5rZXkgJiYgdGhpcy5jZW50cmFsTm90ZS5rZXkudHJpbSgpICE9PSAnJyAmJiAhdGhpcy5ub2Rlcy5zb21lKChub2RlOiB7IGlkOiBhbnk7IH0pID0+IG5vZGUuaWQgPT09IHRoaXMuY2VudHJhbE5vdGUua2V5KSkge1xuXG5cdFx0XHRjb25zdCBzdmcgPSB0aGlzLnN2Zy5ub2RlKCkgYXMgU1ZHU1ZHRWxlbWVudDtcblx0XHRcdGNvbnN0IHsgd2lkdGgsIGhlaWdodCB9ID0gc3ZnLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG5cdFx0XHR0aGlzLm5vZGVzLnB1c2goe1xuXHRcdFx0XHRpZDogdGhpcy5jZW50cmFsTm90ZS5rZXksXG5cdFx0XHRcdG5hbWU6IHRoaXMuY2VudHJhbE5vdGUua2V5LFxuXHRcdFx0XHRncm91cDogJ25vdGUnLFxuXHRcdFx0XHR4OiB3aWR0aCAvIDIsXG5cdFx0XHRcdHk6IGhlaWdodCAvIDIsXG5cdFx0XHRcdGZ4OiBudWxsLFxuXHRcdFx0XHRmeTogbnVsbCxcblx0XHRcdFx0ZmlsbDogdGhpcy5ub3RlRmlsbENvbG9yLFxuXHRcdFx0XHRzZWxlY3RlZDogZmFsc2UsXG5cdFx0XHRcdGhpZ2hsaWdodGVkOiBmYWxzZVxuXHRcdFx0fSk7XG5cdFx0XHR0aGlzLmNlbnRyYWxOb2RlID0gdGhpcy5ub2Rlc1t0aGlzLm5vZGVzLmxlbmd0aCAtIDFdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb25zb2xlLmVycm9yKGBDZW50cmFsIG5vZGUgbm90IGZvdW5kIG9yIGFscmVhZHkgZXhpc3RzOiAke3RoaXMuY2VudHJhbE5vdGUua2V5fWApO1xuXHRcdH1cblx0fVxuXHRcblx0YWRkRmlsdGVyZWRDb25uZWN0aW9ucyhub3RlQ29ubmVjdGlvbnM6IGFueSkge1xuXG5cdFx0Y29uc3QgZmlsdGVyZWRDb25uZWN0aW9ucyA9IG5vdGVDb25uZWN0aW9ucztcblx0XHRmaWx0ZXJlZENvbm5lY3Rpb25zLmZvckVhY2goKGNvbm5lY3Rpb246IGFueSwgaW5kZXg6IGFueSkgPT4ge1xuXHRcdFx0Ly8gY29uc29sZS5sb2coJ0ZpbHRlcmVkIGNvbm5lY3Rpb246JywgY29ubmVjdGlvbiwgJ0luZGV4OicsIGluZGV4KTtcblx0XHRcdGlmIChjb25uZWN0aW9uICYmIGNvbm5lY3Rpb24uaXRlbSAmJiBjb25uZWN0aW9uLml0ZW0ua2V5KSB7XG5cdFx0XHRcdGNvbnN0IGNvbm5lY3Rpb25JZCA9IGNvbm5lY3Rpb24uaXRlbS5rZXk7XG5cdFx0XHRcdC8vIGNvbnNvbGUubG9nKCdBZGRpbmcgY29ubmVjdGlvbiBub2RlIGZvciBJRDonLCBjb25uZWN0aW9uSWQpO1xuXG5cdFx0XHRcdHRoaXMuYWRkQ29ubmVjdGlvbk5vZGUoY29ubmVjdGlvbklkLCBjb25uZWN0aW9uKTtcblx0XHRcdFx0Ly8gY29uc29sZS5sb2coJ0FkZGluZyBjb25uZWN0aW9uIGxpbmsgZm9yIElEOicsIGNvbm5lY3Rpb25JZCk7XG5cblx0XHRcdFx0dGhpcy5hZGRDb25uZWN0aW9uTGluayhjb25uZWN0aW9uSWQsIGNvbm5lY3Rpb24pO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y29uc29sZS53YXJuKGBTa2lwcGluZyBpbnZhbGlkIGNvbm5lY3Rpb24gYXQgaW5kZXggJHtpbmRleH06YCwgY29ubmVjdGlvbik7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0Ly8gY29uc29sZS5sb2coJ05vZGVzIGFmdGVyIGFkZEZpbHRlcmVkQ29ubmVjdGlvbnM6JywgdGhpcy5ub2Rlcyk7XG5cdFx0Ly8gY29uc29sZS5sb2coJ0xpbmtzIGFmdGVyIGFkZEZpbHRlcmVkQ29ubmVjdGlvbnM6JywgdGhpcy5saW5rcyk7XHRcblx0fVxuXG5cdGFkZENvbm5lY3Rpb25Ob2RlKGNvbm5lY3Rpb25JZDogYW55LCBjb25uZWN0aW9uOiBhbnkpIHtcblx0XHRpZiAoIXRoaXMubm9kZXMuc29tZSgobm9kZTogeyBpZDogc3RyaW5nOyB9KSA9PiBub2RlLmlkID09PSBjb25uZWN0aW9uSWQpKSB7XG5cdFx0XHR0aGlzLm5vZGVzLnB1c2goe1xuXHRcdFx0XHRpZDogY29ubmVjdGlvbklkLFxuXHRcdFx0XHRuYW1lOiBjb25uZWN0aW9uSWQsXG5cdFx0XHRcdGdyb3VwOiAoY29ubmVjdGlvbi5pdGVtIGluc3RhbmNlb2YgdGhpcy5lbnYuaXRlbV90eXBlcy5TbWFydEJsb2NrKSA/ICdibG9jaycgOiAnbm90ZScsXG5cdFx0XHRcdHg6IE1hdGgucmFuZG9tKCkgKiAxMDAwLFxuXHRcdFx0XHR5OiBNYXRoLnJhbmRvbSgpICogMTAwMCxcblx0XHRcdFx0Zng6IG51bGwsXG5cdFx0XHRcdGZ5OiBudWxsLFxuXHRcdFx0XHRmaWxsOiAoY29ubmVjdGlvbi5pdGVtIGluc3RhbmNlb2YgdGhpcy5lbnYuaXRlbV90eXBlcy5TbWFydEJsb2NrKSA/IHRoaXMuYmxvY2tGaWxsQ29sb3IgOiB0aGlzLm5vdGVGaWxsQ29sb3IsXG5cdFx0XHRcdHNlbGVjdGVkOiBmYWxzZSxcblx0XHRcdFx0aGlnaGxpZ2h0ZWQ6IGZhbHNlXG5cdFx0XHR9KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29uc29sZS5sb2coJ05vZGUgYWxyZWFkeSBleGlzdHMgZm9yIGNvbm5lY3Rpb24gSUQ6Jyxjb25uZWN0aW9uSWQpO1xuXHRcdH1cblx0fVxuXHRcblx0YWRkQ29ubmVjdGlvbkxpbmsoY29ubmVjdGlvbklkOiBzdHJpbmcsIGNvbm5lY3Rpb246IGFueSkge1xuXHRcdGNvbnN0IHNvdXJjZU5vZGUgPSB0aGlzLm5vZGVzLmZpbmQoKG5vZGU6IHsgaWQ6IHN0cmluZzsgfSkgPT4gbm9kZS5pZCA9PT0gdGhpcy5jZW50cmFsTm90ZS5rZXkpO1xuXHRcdGNvbnN0IHRhcmdldE5vZGUgPSB0aGlzLm5vZGVzLmZpbmQoKG5vZGU6IHsgaWQ6IHN0cmluZzsgfSkgPT4gbm9kZS5pZCA9PT0gY29ubmVjdGlvbklkKTtcblx0XG5cdFx0aWYgKCFzb3VyY2VOb2RlKSB7XG5cdFx0XHRjb25zb2xlLmVycm9yKGBTb3VyY2Ugbm9kZSBub3QgZm91bmQ6ICR7dGhpcy5jZW50cmFsTm90ZS5rZXl9YCk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcblx0XHRpZiAoIXRhcmdldE5vZGUpIHtcblx0XHRcdGNvbnNvbGUuZXJyb3IoYFRhcmdldCBub2RlIG5vdCBmb3VuZDogJHtjb25uZWN0aW9uSWR9YCk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcblx0XHR0aGlzLmxpbmtzLnB1c2goe1xuXHRcdFx0c291cmNlOiB0aGlzLmNlbnRyYWxOb3RlLmtleSxcblx0XHRcdHRhcmdldDogY29ubmVjdGlvbklkLFxuXHRcdFx0dmFsdWU6IGNvbm5lY3Rpb24uc2NvcmUgfHwgMFxuXHRcdH0pO1xuXHRcdHRoaXMuY29ubmVjdGlvbnMucHVzaCh7XG5cdFx0XHRzb3VyY2U6IHRoaXMuY2VudHJhbE5vdGUua2V5LFxuXHRcdFx0dGFyZ2V0OiBjb25uZWN0aW9uSWQsXG5cdFx0XHRzY29yZTogY29ubmVjdGlvbi5zY29yZSB8fCAwXG5cdFx0fSk7XG5cdFx0dGhpcy51cGRhdGVTY29yZVJhbmdlKGNvbm5lY3Rpb24uc2NvcmUpO1xuXHR9XG5cdFxuXG5cdHVwZGF0ZVNjb3JlUmFuZ2Uoc2NvcmU6IG51bWJlcikge1xuXHRcdGlmIChzY29yZSA+IHRoaXMubWF4U2NvcmUpIHRoaXMubWF4U2NvcmUgPSBzY29yZTtcblx0XHRpZiAoc2NvcmUgPCB0aGlzLm1pblNjb3JlKSB0aGlzLm1pblNjb3JlID0gc2NvcmU7XG5cdH1cblxuXHR2YWxpZGF0ZUdyYXBoRGF0YShub2RlczogYW55W10sIGxpbmtzOiBhbnlbXSk6IGJvb2xlYW4ge1xuXHRcdGNvbnN0IG5vZGVJZHMgPSBuZXcgU2V0KG5vZGVzLm1hcChub2RlID0+IG5vZGUuaWQpKTtcblx0XHRsZXQgaXNWYWxpZCA9IHRydWU7XG5cdFx0bGlua3MuZm9yRWFjaCgobGluaywgaW5kZXgpID0+IHtcblx0XHRcdGlmICghbm9kZUlkcy5oYXMobGluay5zb3VyY2UpKSB7XG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoYExpbmsgYXQgaW5kZXggJHtpbmRleH0gaGFzIGFuIGludmFsaWQgc291cmNlOiAke2xpbmsuc291cmNlfWApO1xuXHRcdFx0XHRpc1ZhbGlkID0gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIW5vZGVJZHMuaGFzKGxpbmsudGFyZ2V0KSkge1xuXHRcdFx0XHRjb25zb2xlLmVycm9yKGBMaW5rIGF0IGluZGV4ICR7aW5kZXh9IGhhcyBhbiBpbnZhbGlkIHRhcmdldDogJHtsaW5rLnRhcmdldH1gKTtcblx0XHRcdFx0aXNWYWxpZCA9IGZhbHNlO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdG5vZGVzLmZvckVhY2goKG5vZGUsIGluZGV4KSA9PiB7XG5cdFx0XHRpZiAoIW5vZGUuaGFzT3duUHJvcGVydHkoJ2lkJykgfHwgIW5vZGUuaGFzT3duUHJvcGVydHkoJ25hbWUnKSB8fCAhbm9kZS5oYXNPd25Qcm9wZXJ0eSgnZ3JvdXAnKSkge1xuXHRcdFx0XHRjb25zb2xlLmVycm9yKGBOb2RlIGF0IGluZGV4ICR7aW5kZXh9IGlzIG1pc3NpbmcgcmVxdWlyZWQgcHJvcGVydGllczogJHtKU09OLnN0cmluZ2lmeShub2RlKX1gKTtcblx0XHRcdFx0aXNWYWxpZCA9IGZhbHNlO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdHJldHVybiBpc1ZhbGlkO1xuXHR9XG5cdFxuXG5cdHVwZGF0ZU5vZGVBbmRMaW5rU2VsZWN0aW9uKG5vZGVzRGF0YTogYW55KSB7XG5cdFx0Y29uc3Qgc3ZnR3JvdXAgPSB0aGlzLnN2Z0dyb3VwO1xuXHRcblx0XHQgLy8gVXBkYXRlIGxpbmtzIGZpcnN0XG5cdFx0IHRoaXMubGlua1NlbGVjdGlvbiA9IHN2Z0dyb3VwLnNlbGVjdCgnZy5zbWFydC1jb25uZWN0aW9ucy12aXN1YWxpemVyLWxpbmtzJykuc2VsZWN0QWxsKCdsaW5lJylcblx0XHQgLmRhdGEodGhpcy52YWxpZGF0ZWRMaW5rcywgKGQ6IGFueSkgPT4gYCR7ZC5zb3VyY2V9LSR7ZC50YXJnZXR9YClcblx0XHQgLmpvaW4oXG5cdFx0XHQgZW50ZXIgPT4gdGhpcy5lbnRlckxpbmsoZW50ZXIpLFxuXHRcdFx0IHVwZGF0ZSA9PiB0aGlzLnVwZGF0ZUxpbmsodXBkYXRlKSxcblx0XHRcdCBleGl0ID0+IGV4aXQucmVtb3ZlKClcblx0XHQgKTtcbiBcblx0XHRcblx0XHQgdGhpcy5saW5rTGFiZWxTZWxlY3Rpb24gPSBzdmdHcm91cC5zZWxlY3QoJ2cuc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1saW5rLWxhYmVscycpLnNlbGVjdEFsbCgndGV4dCcpXG4gICAgICAgIC5kYXRhKHRoaXMudmFsaWRhdGVkTGlua3MsIChkOiBhbnkpID0+IGAke2Quc291cmNlLmlkfS0ke2QudGFyZ2V0LmlkfWApXG4gICAgICAgIC5qb2luKFxuICAgICAgICAgICAgZW50ZXIgPT4gdGhpcy5lbnRlckxpbmtMYWJlbChlbnRlciksXG4gICAgICAgICAgICB1cGRhdGUgPT4gdGhpcy51cGRhdGVMaW5rTGFiZWwodXBkYXRlKSxcbiAgICAgICAgICAgIGV4aXQgPT4gZXhpdC5yZW1vdmUoKVxuICAgICAgICApO1xuXHRcblx0XHR0aGlzLmxhYmVsU2VsZWN0aW9uID0gc3ZnR3JvdXAuc2VsZWN0KCdnLnNtYXJ0LWNvbm5lY3Rpb25zLXZpc3VhbGl6ZXItbm9kZS1sYWJlbHMnKS5zZWxlY3RBbGwoJ3RleHQnKVxuXHRcdFx0LmRhdGEobm9kZXNEYXRhLCAoZDogYW55KSA9PiBkLmlkKVxuXHRcdFx0LmpvaW4oXG5cdFx0XHRcdGVudGVyID0+IHRoaXMuZW50ZXJMYWJlbChlbnRlciksXG5cdFx0XHRcdHVwZGF0ZSA9PiB0aGlzLnVwZGF0ZUxhYmVsKHVwZGF0ZSksXG5cdFx0XHRcdGV4aXQgPT4gZXhpdC5yZW1vdmUoKVxuXHRcdFx0KVxuXHRcdFx0LmF0dHIoJ3gnLCAoZDogYW55KSA9PiBkLngpXG5cdFx0XHQuYXR0cigneScsIChkOiBhbnkpID0+IGQueSk7XG5cblx0XHQvLyBVcGRhdGUgbm9kZXMgYWZ0ZXIgbGlua3Ncblx0XHR0aGlzLm5vZGVTZWxlY3Rpb24gPSBzdmdHcm91cC5zZWxlY3QoJ2cuc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1ub2RlcycpLnNlbGVjdEFsbCgnY2lyY2xlJylcblx0XHRcdC5kYXRhKG5vZGVzRGF0YSwgKGQ6IGFueSkgPT4geyBcblx0XHRcdFx0IHJldHVybiBkLmlkO1xuXHRcdFx0XHR9KVxuXHRcdFx0LmpvaW4oXG5cdFx0XHRcdGVudGVyID0+IHRoaXMuZW50ZXJOb2RlKGVudGVyKSxcblx0XHRcdFx0dXBkYXRlID0+IHRoaXMudXBkYXRlTm9kZSh1cGRhdGUpLFxuXHRcdFx0XHRleGl0ID0+IGV4aXQucmVtb3ZlKClcblx0XHRcdCk7XG5cdFxuXHR9XG5cdFxuXG5cdGVudGVyTm9kZShlbnRlcjogYW55KSB7XG5cdFx0Y29uc3QgdGhhdCA9IHRoaXM7ICAvLyBSZWZlcmVuY2UgdG8gJ3RoaXMnIGNvbnRleHQgZm9yIGlubmVyIGZ1bmN0aW9uc1xuXHRcdHJldHVybiBlbnRlci5hcHBlbmQoJ2NpcmNsZScpXG5cdFx0XHQuYXR0cignY2xhc3MnLCAnc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1ub2RlJylcblx0XHRcdC5hdHRyKCdyJywgKGQ6IGFueSkgPT4gZC5pZCA9PT0gdGhpcy5jZW50cmFsTm9kZS5pZCA/IHRoaXMubm9kZVNpemUgKyAyIDogdGhpcy5ub2RlU2l6ZSlcblx0XHRcdC5hdHRyKCdmaWxsJywgKGQ6IGFueSkgPT4gZC5maWxsKVxuXHRcdFx0LmF0dHIoJ3N0cm9rZScsIChkOiBhbnkpID0+IGQuc2VsZWN0ZWQgPyAnYmxhbmNoZWRhbG1vbmQnIDogJ3RyYW5zcGFyZW50Jylcblx0XHRcdC5hdHRyKCdzdHJva2Utd2lkdGgnLCAoZDogYW55KSA9PiBkLnNlbGVjdGVkID8gMS41IDogMC4zKVxuXHRcdFx0LmF0dHIoJ29wYWNpdHknLCAxKVxuXHRcdFx0LmF0dHIoJ2N1cnNvcicsICdwb2ludGVyJylcblx0XHRcdC5jYWxsKGQzLmRyYWcoKS5vbignc3RhcnQnLCB0aGlzLm9uRHJhZ1N0YXJ0LmJpbmQodGhpcykpXG5cdFx0XHRcdC5vbignZHJhZycsIHRoaXMub25EcmFnLmJpbmQodGhpcykpXG5cdFx0XHRcdC5vbignZW5kJywgdGhpcy5vbkRyYWdFbmQuYmluZCh0aGlzKSkpXG5cdFx0XHQub24oJ2NsaWNrJywgdGhpcy5vbk5vZGVDbGljay5iaW5kKHRoaXMpKVxuXHRcdFx0Lm9uKCdtb3VzZW92ZXInLCB0aGlzLm9uTm9kZU1vdXNlT3Zlci5iaW5kKHRoaXMpKVxuXHRcdFx0Lm9uKCdtb3VzZW91dCcsIHRoaXMub25Ob2RlTW91c2VPdXQuYmluZCh0aGlzKSk7XG5cdH1cblxuXHR1cGRhdGVOb2RlKHVwZGF0ZTogYW55KSB7XG5cdFx0cmV0dXJuIHVwZGF0ZS5hdHRyKCdyJywgKGQ6IGFueSkgPT4gZC5pZCA9PT0gdGhpcy5jZW50cmFsTm9kZS5pZCA/IHRoaXMubm9kZVNpemUgKyAyIDogdGhpcy5ub2RlU2l6ZSlcblx0XHRcdC5hdHRyKCdmaWxsJywgKGQ6IGFueSkgPT4gZC5zZWxlY3RlZCA/ICcjZjNlZTVkJyA6IGQuZmlsbClcblx0XHRcdC5hdHRyKCdzdHJva2UnLCAoZDogYW55KSA9PiBkLnNlbGVjdGVkID8gJ2JsYW5jaGVkYWxtb25kJyA6ICd0cmFuc3BhcmVudCcpXG5cdFx0XHQuYXR0cignc3Ryb2tlLXdpZHRoJywgKGQ6IGFueSkgPT4gZC5zZWxlY3RlZCA/IDEuNSA6IDAuMyk7XG5cdH1cblx0b25EcmFnU3RhcnQoZXZlbnQ6IGFueSwgZDogYW55KSB7XG5cdFx0aWYgKCFldmVudC5hY3RpdmUpIHRoaXMuc2ltdWxhdGlvbi5hbHBoYVRhcmdldCgwLjMpLnJlc3RhcnQoKTtcblx0XHR0aGlzLmRyYWdnaW5nID0gdHJ1ZTtcblx0XHRkLmZ4ID0gZC54O1xuXHRcdGQuZnkgPSBkLnk7XG5cdH1cblx0XG5cdG9uRHJhZyhldmVudDogYW55LCBkOiBhbnkpIHtcblxuXHRcdC8vIEVuc3VyZSBob3ZlcmluZyBkYXRlIGlzbnQgYWN0aXZlIHdoZW4gZHJhZ2dpbmcuXG5cdFx0aWYodGhpcy5pc0hvdmVyaW5nKSB0aGlzLmlzSG92ZXJpbmcgPSBmYWxzZTtcblxuXHRcdGQuZnggPSBldmVudC54O1xuXHRcdGQuZnkgPSBldmVudC55O1xuXHRcblx0XHQvLyBpZiAoZC5pZCA9PT0gdGhpcy5jZW50cmFsTm9kZS5pZCkge1xuXHRcdC8vICAvLyBVcGRhdGUgdGhlIHBvc2l0aW9uIG9mIHRoZSBub2RlJ3MgbGFiZWwgaW1tZWRpYXRlbHkgZHVyaW5nIGRyYWdnaW5nXG5cdFx0Ly8gIHRoaXMubGFiZWxTZWxlY3Rpb25cblx0XHQvLyAgLmZpbHRlcigobm9kZTogYW55KSA9PiBub2RlLmlkID09PSBkLmlkKVxuXHRcdC8vICAuYXR0cigneCcsIGQueClcblx0XHQvLyAgLmF0dHIoJ3knLCAoKSA9PiB7XG5cdFx0Ly8gXHQgaWYgKGQuaGlnaGxpZ2h0ZWQpIHtcblx0XHQvLyBcdFx0IHJldHVybiBkLnkgKyA4OyAvLyBLZWVwIGxhYmVsIDhweCBkb3duIGlmIG5vZGUgaXMgaGlnaGxpZ2h0ZWRcblx0XHQvLyBcdCB9XG5cdFx0Ly8gXHQgcmV0dXJuIGQueTtcblx0XHQvLyAgfSk7XG5cblx0XHQvLyB9XG5cblx0fVxuXHRcblx0XG5cdFxuXHRvbkRyYWdFbmQoZXZlbnQ6IGFueSwgZDogYW55KSB7XG5cdFx0aWYgKCFldmVudC5hY3RpdmUpIHRoaXMuc2ltdWxhdGlvbi5hbHBoYVRhcmdldCgwKTtcblx0XHRkLmZ4ID0gbnVsbDtcblx0XHRkLmZ5ID0gbnVsbDtcblx0XHR0aGlzLmRyYWdnaW5nID0gZmFsc2VcblxuXG5cdH1cblx0XG5cdG9uTm9kZUNsaWNrKGV2ZW50OiBhbnksIGQ6IGFueSkge1xuXG5cdFx0Ly8gRG9uJ3QgbmVlZCB0byB0b3VjaCBjZW50cmFsIHNpbmNlIHdlJ3JlIGluIGl0XG5cdFx0aWYoZC5pZCA9PT0gdGhpcy5jZW50cmFsTm9kZS5pZCkgcmV0dXJuO1xuXG5cdFx0dGhpcy5lbnYucGx1Z2luLm9wZW5fbm90ZShkLmlkLCBldmVudClcblxuXHRcdC8vIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdC8vIFRPRE86OiBCcmluZyBiYWNrIHdoZW4gcmVhZHkgZm9yIHNlbGVjdGlvblxuXG5cdFx0Ly8gaWYgKCF0aGlzLmlzQWx0UHJlc3NlZCkgdGhpcy5jbGVhclNlbGVjdGlvbnMoKTtcblx0XHQvLyBkLnNlbGVjdGVkID0gIWQuc2VsZWN0ZWQ7XG5cdFx0Ly8gaWYgKCFkLnNlbGVjdGVkKSB7XG5cdFx0Ly8gXHRkLmhpZ2hsaWdodGVkID0gZmFsc2U7XG5cdFx0Ly8gfVxuXHRcdC8vIHRoaXMudXBkYXRlTm9kZUFwcGVhcmFuY2UoKTtcblx0fVx0XG5cblx0b25Ob2RlTW91c2VPdmVyKGV2ZW50OiBhbnksIGQ6IGFueSkge1xuXG5cdFx0Ly8gRG9udCB0cmlnZ2VyIHBvc3NpYmxlIGhpZ2hsaWdodHMgaWYgdXNlciBkcmFnZ2luZyBhcm91bmQgbm9kZXMgcXVpY2tseSBmb3IgZnVuXG5cdFx0aWYodGhpcy5kcmFnZ2luZykgcmV0dXJuO1xuXHRcdFx0XHRcdFxuXHRcdC8vIERvbid0IGFwcGx5IGhvdmVyIGFmZmVjdCB0byBjZW50ZXIgbm9kZVxuXHRcdGlmKGQuaWQgPT09IHRoaXMuY2VudHJhbE5vZGUuaWQpIHJldHVybjtcblxuXHRcdC8vIEhvdmVyaW5nIHN0YXRlIGFjdGl2ZVxuXHRcdHRoaXMuaXNIb3ZlcmluZyA9IHRydWU7XG5cblx0XHQvLyBIaWdobGlnaHQgbm9kZVxuXHRcdHRoaXMuaGlnaGxpZ2h0Tm9kZShkKTtcblxuXHRcdC8vIFNob3cgbGluayBsYWJlbHMgYXNzb2NpYXRlZCB3aXRoIHRoZSBub2RlXG5cdFx0dGhpcy51cGRhdGVMaW5rTGFiZWxBcHBlYXJhbmNlKGQpO1xuXG5cdFx0Ly8gVE9ETzo6IENvbW1lbnQgYmFjayB3aGVuIHJlYWR5IHRvIGltcGxlbWVudCBMYWJlbCBNb3ZlbWVudCBhbmltYXRpb24gb24gaG92ZXJcblx0XHQvLyBjb25zb2xlLmxvZyhgSG92ZXJpbmcgb3ZlciBub2RlOiAke2QuaWR9LCBvcmlnaW5hbCB5OiAke2QueX1gKTtcblx0XHQvLyB0aGlzLnN2Z0dyb3VwLnNlbGVjdChgdGV4dFtkYXRhLWlkPScke2QuaWR9J11gKS50cmFuc2l0aW9uKCkuZHVyYXRpb24oNDAwMCkuYXR0cigneScsIGQueSArIDgpOyAvLyBBbmltYXRlIGxhYmVsIGRvd24gMTAgcGl4ZWxzXG5cdFxuXHRcdHRoaXMuYXBwLndvcmtzcGFjZS50cmlnZ2VyKFwiaG92ZXItbGlua1wiLCB7XG5cdFx0XHRldmVudCxcblx0XHRcdHNvdXJjZTogJ0QzJyxcblx0XHRcdGhvdmVyUGFyZW50OiBldmVudC5jdXJyZW50VGFyZ2V0LnBhcmVudEVsZW1lbnQsXG5cdFx0XHR0YXJnZXRFbDogZXZlbnQuY3VycmVudFRhcmdldCxcblx0XHRcdGxpbmt0ZXh0OiBkLmlkLFxuXHRcdH0pO1xuXHR9XG5cdFxuXHRvbk5vZGVNb3VzZU91dChldmVudDogYW55LCBkOiBhbnkpIHtcblx0XHRpZiAodGhpcy5kcmFnZ2luZykgcmV0dXJuO1xuXG5cdFx0dGhpcy5pc0hvdmVyaW5nID0gZmFsc2U7XG5cdFx0dGhpcy5jZW50ZXJIaWdobGlnaHRlZCA9IGZhbHNlO1xuXHRcdHRoaXMudW5oaWdobGlnaHROb2RlKGQpO1xuXG5cdFx0Ly8gSGlkZSBsaW5rIGxhYmVscyBhc3NvY2lhdGVkIHdpdGggdGhlIG5vZGVcblx0XHR0aGlzLnVwZGF0ZUxpbmtMYWJlbEFwcGVhcmFuY2UoeyBpZDogbnVsbCB9KTtcblx0XG5cdFx0Ly8gVE9ETzo6IENvbW1lbnQgYmFjayB3aGVuIHJlYWR5IHRvIGltcGxlbWVudCBMYWJlbCBNT3ZlbWVudCBhbmltYXRpb24gb24gaG92ZXJcblx0XHQvLyBjb25zb2xlLmxvZyhgTW91c2Ugb3V0IGZyb20gbm9kZTogJHtkLmlkfSwgcmV0dXJuaW5nIGxhYmVsIHRvIHk6ICR7ZC55fWApO1xuXHRcdC8vIHRoaXMuc3ZnR3JvdXAuc2VsZWN0KGB0ZXh0W2RhdGEtaWQ9JyR7ZC5pZH0nXWApLnRyYW5zaXRpb24oKS5kdXJhdGlvbig0MDApLmF0dHIoJ3knLCBkLnkpOyAvLyBBbmltYXRlIGxhYmVsIGJhY2sgdG8gb3JpZ2luYWwgcG9zaXRpb25cblx0fVxuXHRcblx0dXBkYXRlTGlua0xhYmVsUG9zaXRpb25zKCkge1xuXHRcdHRoaXMubGlua0xhYmVsU2VsZWN0aW9uXG5cdFx0XHQuYXR0cigneCcsIChkOiBhbnkpID0+IChkLnNvdXJjZS54ICsgZC50YXJnZXQueCkgLyAyKVxuXHRcdFx0LmF0dHIoJ3knLCAoZDogYW55KSA9PiAoZC5zb3VyY2UueSArIGQudGFyZ2V0LnkpIC8gMik7XG5cdH1cblx0dXBkYXRlTGlua1NlbGVjdGlvbihzdmdHcm91cDogYW55KSB7XG5cdFx0cmV0dXJuIHN2Z0dyb3VwLnNlbGVjdCgnZy5saW5rcycpLnNlbGVjdEFsbCgnbGluZScpXG5cdFx0XHQuZGF0YSh0aGlzLnZhbGlkYXRlZExpbmtzLCAoZDogYW55KSA9PiBgJHtkLnNvdXJjZX0tJHtkLnRhcmdldH1gKVxuXHRcdFx0LnN0eWxlKCdjdXJzb3InLCAncG9pbnRlcicpXG5cdFx0XHQuam9pbihcblx0XHRcdFx0KGVudGVyOiBhbnkpID0+IHRoaXMuZW50ZXJMaW5rKGVudGVyKSxcblx0XHRcdFx0KHVwZGF0ZTogYW55KSA9PiB0aGlzLnVwZGF0ZUxpbmsodXBkYXRlKSxcblx0XHRcdFx0KGV4aXQ6IHsgcmVtb3ZlOiAoKSA9PiBhbnk7IH0pID0+IGV4aXQucmVtb3ZlKClcblx0XHRcdCk7XG5cdH1cblxuXHRlbnRlckxpbmsoZW50ZXI6IGFueSkge1xuXHRcdHJldHVybiBlbnRlci5hcHBlbmQoJ2xpbmUnKVxuXHRcdFx0LmF0dHIoJ2NsYXNzJywgJ3NtYXJ0LWNvbm5lY3Rpb25zLXZpc3VhbGl6ZXItbGluaycpXG5cdFx0XHQuYXR0cignc3Ryb2tlJywgJyM0Yzc3ODcnKVxuXHRcdFx0LmF0dHIoJ3N0cm9rZS13aWR0aCcsIChkOiBhbnkpID0+IHRoaXMuZ2V0TGlua1N0cm9rZVdpZHRoKGQpKVxuXHRcdFx0LmF0dHIoJ3N0cm9rZS1vcGFjaXR5JywgMSlcblx0XHRcdC5hdHRyKCdvcGFjaXR5JywgMSk7XG5cdH1cblxuXHR1cGRhdGVMaW5rKHVwZGF0ZTogYW55KSB7XG5cdFx0cmV0dXJuIHVwZGF0ZS5hdHRyKCdzdHJva2UnLCAnIzRjNzc4NycpXG5cdFx0XHQuYXR0cignc3Ryb2tlLXdpZHRoJywgKGQ6IGFueSkgPT4gdGhpcy5nZXRMaW5rU3Ryb2tlV2lkdGgoZCkpO1xuXHR9XG5cblx0Z2V0TGlua1N0cm9rZVdpZHRoKGQ6IGFueSkge1xuXHRcdHJldHVybiBkMy5zY2FsZUxpbmVhcigpXG5cdFx0XHQuZG9tYWluKFt0aGlzLm1pblNjb3JlLCB0aGlzLm1heFNjb3JlXSlcblx0XHRcdC5yYW5nZShbdGhpcy5taW5MaW5rVGhpY2tuZXNzLCB0aGlzLm1heExpbmtUaGlja25lc3NdKShkLnNjb3JlKTtcblx0fVxuXG5cdHVwZGF0ZUxpbmtMYWJlbFNlbGVjdGlvbihzdmdHcm91cDogYW55KSB7XG5cdFx0cmV0dXJuIHN2Z0dyb3VwLmFwcGVuZCgnZycpXG5cdFx0XHQuYXR0cignY2xhc3MnLCAnc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1saW5rLWxhYmVscycpXG5cdFx0XHQuc2VsZWN0QWxsKCd0ZXh0Jylcblx0XHRcdC5kYXRhKHRoaXMudmFsaWRhdGVkTGlua3MsIChkOiBhbnkpID0+IGAke2Quc291cmNlLmlkfS0ke2QudGFyZ2V0LmlkfWApXG5cdFx0XHQuam9pbihcblx0XHRcdFx0KGVudGVyOiBhbnkpID0+IHRoaXMuZW50ZXJMaW5rTGFiZWwoZW50ZXIpLFxuXHRcdFx0XHQodXBkYXRlOiBhbnkpID0+IHRoaXMudXBkYXRlTGlua0xhYmVsKHVwZGF0ZSksXG5cdFx0XHRcdChleGl0OiB7IHJlbW92ZTogKCkgPT4gYW55OyB9KSA9PiBleGl0LnJlbW92ZSgpXG5cdFx0XHQpO1xuXHR9XG5cblx0ZW50ZXJMaW5rTGFiZWwoZW50ZXI6IGFueSkge1xuXHRcdHJldHVybiBlbnRlci5hcHBlbmQoJ3RleHQnKVxuXHRcdFx0LmF0dHIoJ2NsYXNzJywgJ3NtYXJ0LWNvbm5lY3Rpb25zLXZpc3VhbGl6ZXItbGluay1sYWJlbCcpXG5cdFx0XHQuYXR0cignZm9udC1zaXplJywgdGhpcy5saW5rTGFiZWxTaXplKVxuXHRcdFx0LmF0dHIoJ2ZpbGwnLCAnI2JiYicpXG5cdFx0XHQuYXR0cignb3BhY2l0eScsIDApXG5cdFx0XHQuYXR0cigneCcsIChkOiBhbnkpID0+IGQueCkgLy8gSW5pdGlhbGl6ZSB4IHBvc2l0aW9uXG5cdFx0XHQuYXR0cigneScsIChkOiBhbnkpID0+IGQueSkgLy8gSW5pdGlhbGl6ZSB5IHBvc2l0aW9uXG5cblx0XHRcdC50ZXh0KChkOiBhbnkpID0+IChkLnNjb3JlICogMTAwKS50b0ZpeGVkKDEpICsgJyUnKTtcblx0fVxuXG5cdHVwZGF0ZUxpbmtMYWJlbCh1cGRhdGU6IGFueSkge1xuXHRcdFxuXHRcdHJldHVybiB1cGRhdGUudGV4dCgoZDogYW55KSA9PiAoZC5zY29yZSAqIDEwMCkudG9GaXhlZCgxKSlcblx0XHQuYXR0cigneCcsIChkOiBhbnkpID0+IGQueCkgLy8gSW5pdGlhbGl6ZSB4IHBvc2l0aW9uXG5cdFx0LmF0dHIoJ3knLCAoZDogYW55KSA9PiBkLnkpIC8vIEluaXRpYWxpemUgeSBwb3NpdGlvblxuXG5cdH1cblxuXHRlbnRlckxhYmVsKGVudGVyOiBhbnkpIHtcblx0XHRyZXR1cm4gZW50ZXIuYXBwZW5kKCd0ZXh0Jylcblx0XHRcdC5hdHRyKCdjbGFzcycsICdzbWFydC1jb25uZWN0aW9ucy12aXN1YWxpemVyLWxhYmVsJylcblx0XHRcdC5hdHRyKCdkeCcsIDApXG5cdFx0XHQuYXR0cignZm9udC1zaXplJywgdGhpcy5ub2RlTGFiZWxTaXplKVxuXHRcdFx0LmF0dHIoJ2R5JywgMTIpXG5cdFx0XHQuYXR0cigndGV4dC1hbmNob3InLCAnbWlkZGxlJylcblx0XHRcdC5hdHRyKCdmaWxsJywgJyNiYmInKVxuXHRcdFx0LmF0dHIoJ2RhdGEtaWQnLCAoZDogYW55KSA9PiBkLmlkKVxuXHRcdFx0LmF0dHIoJ29wYWNpdHknLCAxKVxuXHRcdFx0LmF0dHIoJ3gnLCAoZDogYW55KSA9PiBkLngpIC8vIEluaXRpYWxpemUgeCBwb3NpdGlvblxuXHRcdFx0LmF0dHIoJ3knLCAoZDogYW55KSA9PiBkLnkpIC8vIEluaXRpYWxpemUgeSBwb3NpdGlvblxuXHRcdFx0LnRleHQoKGQ6IGFueSkgPT4gdGhpcy5mb3JtYXRMYWJlbChkLm5hbWUpKTtcblx0fVxuXHRcblx0XG5cdHVwZGF0ZUxhYmVsKHVwZGF0ZTogYW55KSB7XG5cdFx0cmV0dXJuIHVwZGF0ZS5hdHRyKCdkeCcsIDApXG5cdFx0XHQuYXR0cignZGF0YS1pZCcsIChkOiBhbnkpID0+IGQuaWQpXG5cdFx0XHQuYXR0cigndGV4dC1hbmNob3InLCAnbWlkZGxlJylcblx0XHRcdC50ZXh0KChkOiBhbnkpID0+IGQuaWQgPT09IHRoaXMuaGlnaGxpZ2h0ZWROb2RlSWQgPyB0aGlzLmZvcm1hdExhYmVsKGQubmFtZSwgZmFsc2UpIDogdGhpcy5mb3JtYXRMYWJlbChkLm5hbWUsIHRydWUpKVxuXHRcdFx0LmF0dHIoJ2ZpbGwnLCAnI2JiYicpXG5cdFx0XHQuYXR0cignZm9udC1zaXplJywgdGhpcy5ub2RlTGFiZWxTaXplKVxuXHRcdFx0LmF0dHIoJ3gnLCAoZDogYW55KSA9PiBkLngpIC8vIFVwZGF0ZSB4IHBvc2l0aW9uXG5cdFx0XHQuYXR0cigneScsIChkOiBhbnkpID0+IGQueSkgLy8gVXBkYXRlIHkgcG9zaXRpb24gd2l0aCBvZmZzZXQgZm9yIGhpZ2hsaWdodFxuXHRcdFx0LmF0dHIoJ29wYWNpdHknLCAxKTtcblx0fVxuXHRcblxuXHR1cGRhdGVOb2RlU2l6ZXMoKSB7XG5cdFx0dGhpcy5ub2RlU2VsZWN0aW9uLmF0dHIoJ3InLCAoZDogYW55KSA9PiBkLmlkID09PSB0aGlzLmNlbnRyYWxOb2RlLmlkID8gdGhpcy5ub2RlU2l6ZSArIDMgOiB0aGlzLm5vZGVTaXplKTtcblx0fVxuXG5cdHVwZGF0ZUxpbmtUaGlja25lc3MoKSB7XG5cdFx0Y29uc3QgbGlua1N0cm9rZVNjYWxlID0gZDMuc2NhbGVMaW5lYXIoKVxuXHRcdFx0LmRvbWFpbihbdGhpcy5taW5TY29yZSwgdGhpcy5tYXhTY29yZV0pXG5cdFx0XHQucmFuZ2UoW3RoaXMubWluTGlua1RoaWNrbmVzcywgdGhpcy5tYXhMaW5rVGhpY2tuZXNzXSk7XG5cdFx0dGhpcy5saW5rU2VsZWN0aW9uLmF0dHIoJ3N0cm9rZS13aWR0aCcsIChkOiBhbnkpID0+IGxpbmtTdHJva2VTY2FsZShkLnNjb3JlKSk7XG5cdH1cblxuXHR1cGRhdGVTaW11bGF0aW9uRm9yY2VzKCkge1xuXHRcdGlmICghdGhpcy5zaW11bGF0aW9uKSB7XG5cdFx0XHRjb25zb2xlLmVycm9yKCdTaW11bGF0aW9uIG5vdCBpbml0aWFsaXplZCcpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHR0aGlzLnNpbXVsYXRpb25cblx0XHRcdC8vIC5mb3JjZSgnY2VudGVyJywgZDMuZm9yY2VDZW50ZXIod2lkdGggLyAyLCBoZWlnaHQgLyAyKS5zdHJlbmd0aCh0aGlzLmNlbnRlckZvcmNlKSlcblx0XHRcdC5mb3JjZSgnY2hhcmdlJywgZDMuZm9yY2VNYW55Qm9keSgpLnN0cmVuZ3RoKC10aGlzLnJlcGVsRm9yY2UpKVxuXHRcdFx0LmZvcmNlKCdsaW5rJywgZDMuZm9yY2VMaW5rKHRoaXMudmFsaWRhdGVkTGlua3MpXG5cdFx0XHRcdC5pZCgoZDogYW55KSA9PiBkLmlkKVxuXHRcdFx0XHQuZGlzdGFuY2UoKGQ6IGFueSkgPT4gdGhpcy5saW5rRGlzdGFuY2VTY2FsZShkLnNjb3JlKSlcblx0XHRcdFx0LnN0cmVuZ3RoKHRoaXMubGlua0ZvcmNlKSlcdFx0XG5cdFx0XHQvLyAuZm9yY2UoJ2NvbGxpZGUnLCBkMy5mb3JjZUNvbGxpZGUoKS5yYWRpdXModGhpcy5ub2RlU2l6ZSArIDMpLnN0cmVuZ3RoKDAuNykpO1xuXG4gICAgXHR0aGlzLnNpbXVsYXRpb24uYWxwaGFUYXJnZXQoMC4zKS5yZXN0YXJ0KCk7XG5cdFx0XG5cdFx0Ly8gU3RvcCB0aGUgc2ltdWxhdGlvbiBhZnRlciBhIHNob3J0IGRlbGF5XG5cdFx0c2V0VGltZW91dCgoKSA9PiB7XG5cdFx0XHR0aGlzLnNpbXVsYXRpb24uYWxwaGFUYXJnZXQoMCk7XG5cdFx0fSwgMTAwMCk7IC8vIEFkanVzdCB0aGUgZGVsYXkgYXMgbmVlZGVkXG5cdH1cblxuXHRub3JtYWxpemVTY29yZShzY29yZTogbnVtYmVyKSA6IG51bWJlcntcblx0XHQvLyBXaGVuIG9ubHkgb25lIGxpbmssIGNhbid0IHJldHVuIDBcblx0XHRpZiAodGhpcy5taW5TY29yZSA9PT0gdGhpcy5tYXhTY29yZSkge1xuXHRcdFx0cmV0dXJuIDAuNTsgLy8gb3IgYW55IG90aGVyIHZhbHVlIGluIHRoZSByYW5nZSBbMCwgMV1cblx0XHR9XG4gICAgICAgIHJldHVybiAoc2NvcmUgLSB0aGlzLm1pblNjb3JlKSAvICh0aGlzLm1heFNjb3JlIC0gdGhpcy5taW5TY29yZSk7XG4gICAgfVxuXG5cdGxpbmtEaXN0YW5jZVNjYWxlKHNjb3JlOiBudW1iZXIpIHtcbiAgICAgICAgcmV0dXJuIGQzLnNjYWxlTGluZWFyKClcbiAgICAgICAgICAgIC5kb21haW4oWzAsIDFdKVxuICAgICAgICAgICAgLnJhbmdlKFt0aGlzLmxpbmtEaXN0YW5jZSAqIDIsIHRoaXMubGlua0Rpc3RhbmNlIC8gMl0pKHRoaXMubm9ybWFsaXplU2NvcmUoc2NvcmUpKTtcbiAgICB9XG5cdFxuXG5cdHVwZGF0ZUxhYmVsT3BhY2l0eSh6b29tTGV2ZWw6IG51bWJlcikge1xuXHRcdGNvbnN0IG1heE9wYWNpdHkgPSAxO1xuXHRcdGNvbnN0IG1pbk9wYWNpdHkgPSAwO1xuXHRcdGNvbnN0IG1pblpvb20gPSAwLjE7XG5cdFx0Y29uc3QgbWF4Wm9vbSA9IHRoaXMudGV4dEZhZGVUaHJlc2hvbGQ7IC8vIFVzZSB0aGUgdGhyZXNob2xkIHZhbHVlIGZyb20gdGhlIHNsaWRlclxuXHRcblx0XHRsZXQgbmV3T3BhY2l0eSA9ICh6b29tTGV2ZWwgLSBtaW5ab29tKSAvIChtYXhab29tIC0gbWluWm9vbSk7XG5cdFx0aWYgKHpvb21MZXZlbCA8PSBtaW5ab29tKSBuZXdPcGFjaXR5ID0gbWluT3BhY2l0eTtcblx0XHRpZiAoem9vbUxldmVsID49IG1heFpvb20pIG5ld09wYWNpdHkgPSBtYXhPcGFjaXR5O1xuXHRcblx0XHRuZXdPcGFjaXR5ID0gTWF0aC5tYXgobWluT3BhY2l0eSwgTWF0aC5taW4obWF4T3BhY2l0eSwgbmV3T3BhY2l0eSkpO1xuXHRcdFxuXHRcdC8vIFVwZGF0ZSBub2RlIGxhYmVscyBvcGFjaXR5IGJhc2VkIG9uIHpvb20gbGV2ZWxcblx0XHRpZih0aGlzLmxhYmVsU2VsZWN0aW9uKSB7XG5cdFx0XHR0aGlzLmxhYmVsU2VsZWN0aW9uLnRyYW5zaXRpb24oKS5kdXJhdGlvbigzMDApLmF0dHIoJ29wYWNpdHknLCBuZXdPcGFjaXR5KTtcblx0XHR9XG5cdH1cdFxuXHRcblxuXHR1cGRhdGVOb2RlTGFiZWxzKCkge1xuXHRcdHRoaXMubGFiZWxTZWxlY3Rpb24uYXR0cignZm9udC1zaXplJywgdGhpcy5ub2RlTGFiZWxTaXplKVxuXHRcdFx0LnRleHQoKGQ6IGFueSkgPT4gdGhpcy5mb3JtYXRMYWJlbChkLm5hbWUsIHRydWUpKTtcblx0fVxuXG5cdHVwZGF0ZUxpbmtMYWJlbFNpemVzKCkge1xuXG5cdFx0aWYgKHRoaXMubGlua0xhYmVsU2VsZWN0aW9uKSB7XG5cdFx0XHR0aGlzLmxpbmtMYWJlbFNlbGVjdGlvbi5hdHRyKCdmb250LXNpemUnLCB0aGlzLmxpbmtMYWJlbFNpemUpO1xuXHRcdH1cblx0fVxuXG5cdHVwZGF0ZU5vZGVMYWJlbFNpemVzKCkge1xuXHRcdHRoaXMubGFiZWxTZWxlY3Rpb24uYXR0cignZm9udC1zaXplJywgdGhpcy5ub2RlTGFiZWxTaXplKTtcblx0fVxuXG5cdHVwZGF0ZU5vZGVMYWJlbE9wYWNpdHkoem9vbUxldmVsOiBudW1iZXIpIHtcblx0XHRjb25zdCBtYXhPcGFjaXR5ID0gMTtcblx0XHRjb25zdCBtaW5PcGFjaXR5ID0gMDtcblx0XHRjb25zdCBtaW5ab29tID0gMC4xO1xuXHRcdGNvbnN0IG1heFpvb20gPSB0aGlzLnRleHRGYWRlVGhyZXNob2xkOyAvLyBVc2UgdGhlIHRocmVzaG9sZCB2YWx1ZSBmcm9tIHRoZSBzbGlkZXJcblx0XG5cdFx0bGV0IG5ld09wYWNpdHkgPSAoem9vbUxldmVsIC0gbWluWm9vbSkgLyAobWF4Wm9vbSAtIG1pblpvb20pO1xuXHRcdGlmICh6b29tTGV2ZWwgPD0gbWluWm9vbSkgbmV3T3BhY2l0eSA9IG1pbk9wYWNpdHk7XG5cdFx0aWYgKHpvb21MZXZlbCA+PSBtYXhab29tKSBuZXdPcGFjaXR5ID0gbWF4T3BhY2l0eTtcblx0XG5cdFx0bmV3T3BhY2l0eSA9IE1hdGgubWF4KG1pbk9wYWNpdHksIE1hdGgubWluKG1heE9wYWNpdHksIG5ld09wYWNpdHkpKTtcblx0XHRcblx0XHR0aGlzLmxhYmVsU2VsZWN0aW9uLnRyYW5zaXRpb24oKS5kdXJhdGlvbigzMDApLmF0dHIoJ29wYWNpdHknLCBuZXdPcGFjaXR5KTtcblx0fVxuXG5cdHN0YXJ0Qm94U2VsZWN0aW9uKGV2ZW50OiBhbnkpIHtcblx0XHRpZiAoIXRoaXMuaXNDdHJsUHJlc3NlZCkgcmV0dXJuO1xuXHRcdHRoaXMuaXNEcmFnZ2luZyA9IHRydWU7XG5cdFx0Y29uc3QgW3gsIHldID0gZDMucG9pbnRlcihldmVudCk7XG5cdFx0dGhpcy5zZWxlY3Rpb25Cb3ggPSBkMy5zZWxlY3QoJ3N2ZycpLmFwcGVuZCgncmVjdCcpXG5cdFx0XHQuYXR0cignY2xhc3MnLCAnc21hcnQtY29ubmVjdGlvbnMtdmlzdWFsaXplci1zZWxlY3Rpb24tYm94Jylcblx0XHRcdC5hdHRyKCd4JywgeClcblx0XHRcdC5hdHRyKCd5JywgeSlcblx0XHRcdC5hdHRyKCd3aWR0aCcsIDApXG5cdFx0XHQuYXR0cignaGVpZ2h0JywgMClcblx0XHRcdC5hdHRyKCdzdHJva2UnLCAnIzAwZicpXG5cdFx0XHQuYXR0cignc3Ryb2tlLXdpZHRoJywgMSlcblx0XHRcdC5hdHRyKCdmaWxsJywgJ3JnYmEoMCwgMCwgMjU1LCAwLjMpJyk7XG5cdFx0dGhpcy5zdGFydFggPSB4O1xuXHRcdHRoaXMuc3RhcnRZID0geTtcblx0fVxuXG5cdHVwZGF0ZUJveFNlbGVjdGlvbihldmVudDogYW55KSB7XG5cdFx0aWYgKCF0aGlzLmlzRHJhZ2dpbmcpIHJldHVybjtcblx0XHRjb25zdCBbeCwgeV0gPSBkMy5wb2ludGVyKGV2ZW50KTtcblx0XHRjb25zdCBuZXdXaWR0aCA9IHggLSB0aGlzLnN0YXJ0WDtcblx0XHRjb25zdCBuZXdIZWlnaHQgPSB5IC0gdGhpcy5zdGFydFk7XG5cdFx0dGhpcy5zZWxlY3Rpb25Cb3hcblx0XHRcdC5hdHRyKCd3aWR0aCcsIE1hdGguYWJzKG5ld1dpZHRoKSlcblx0XHRcdC5hdHRyKCdoZWlnaHQnLCBNYXRoLmFicyhuZXdIZWlnaHQpKVxuXHRcdFx0LmF0dHIoJ3gnLCBNYXRoLm1pbih4LCB0aGlzLnN0YXJ0WCkpXG5cdFx0XHQuYXR0cigneScsIE1hdGgubWluKHksIHRoaXMuc3RhcnRZKSk7XG5cdFx0dGhpcy51cGRhdGVOb2RlU2VsZWN0aW9uSW5Cb3gobmV3V2lkdGgsIG5ld0hlaWdodCk7XG5cdFx0dGhpcy51cGRhdGVOb2RlQXBwZWFyYW5jZSgpO1xuXHR9XG5cblx0dXBkYXRlTm9kZVNlbGVjdGlvbkluQm94KG5ld1dpZHRoOiBudW1iZXIsIG5ld0hlaWdodDogbnVtYmVyKSB7XG5cdFx0Y29uc3QgZW5kWCA9IHRoaXMuc3RhcnRYICsgbmV3V2lkdGg7XG5cdFx0Y29uc3QgZW5kWSA9IHRoaXMuc3RhcnRZICsgbmV3SGVpZ2h0O1xuXHRcdGNvbnN0IHRyYW5zZm9ybWVkU3RhcnRYID0gTWF0aC5taW4odGhpcy5zdGFydFgsIGVuZFgpO1xuXHRcdGNvbnN0IHRyYW5zZm9ybWVkU3RhcnRZID0gTWF0aC5taW4odGhpcy5zdGFydFksIGVuZFkpO1xuXHRcdGNvbnN0IHRyYW5zZm9ybWVkRW5kWCA9IE1hdGgubWF4KHRoaXMuc3RhcnRYLCBlbmRYKTtcblx0XHRjb25zdCB0cmFuc2Zvcm1lZEVuZFkgPSBNYXRoLm1heCh0aGlzLnN0YXJ0WSwgZW5kWSk7XG5cdFx0Y29uc3QgdHJhbnNmb3JtID0gZDMuem9vbVRyYW5zZm9ybShkMy5zZWxlY3QoJ3N2ZycpLm5vZGUoKSBhcyBFbGVtZW50KTtcblx0XHRjb25zdCB6b29tZWRTdGFydFggPSAodHJhbnNmb3JtZWRTdGFydFggLSB0cmFuc2Zvcm0ueCkgLyB0cmFuc2Zvcm0uaztcblx0XHRjb25zdCB6b29tZWRTdGFydFkgPSAodHJhbnNmb3JtZWRTdGFydFkgLSB0cmFuc2Zvcm0ueSkgLyB0cmFuc2Zvcm0uaztcblx0XHRjb25zdCB6b29tZWRFbmRYID0gKHRyYW5zZm9ybWVkRW5kWCAtIHRyYW5zZm9ybS54KSAvIHRyYW5zZm9ybS5rO1xuXHRcdGNvbnN0IHpvb21lZEVuZFkgPSAodHJhbnNmb3JtZWRFbmRZIC0gdHJhbnNmb3JtLnkpIC8gdHJhbnNmb3JtLms7XG5cdFx0dGhpcy5ub2RlU2VsZWN0aW9uLmVhY2goKGQ6IGFueSkgPT4ge1xuXHRcdFx0Y29uc3Qgbm9kZVggPSBkLng7XG5cdFx0XHRjb25zdCBub2RlWSA9IGQueTtcblx0XHRcdGQuc2VsZWN0ZWQgPSBub2RlWCA+PSB6b29tZWRTdGFydFggJiYgbm9kZVggPD0gem9vbWVkRW5kWCAmJiBub2RlWSA+PSB6b29tZWRTdGFydFkgJiYgbm9kZVkgPD0gem9vbWVkRW5kWTtcblx0XHR9KTtcblx0fVxuXG5cdGVuZEJveFNlbGVjdGlvbigpIHtcblx0XHRpZiAoIXRoaXMuaXNEcmFnZ2luZykgcmV0dXJuO1xuXHRcdHRoaXMuaXNEcmFnZ2luZyA9IGZhbHNlO1xuXHRcdHRoaXMuc2VsZWN0aW9uQm94LnJlbW92ZSgpO1xuXHR9XG5cblx0XG5cblx0Ly8gVE9ETzo6IEFkZCBiYWNrIGluIHdoZW4gcmVhZHkgZm9yIHRvb2x0aVxuXHQvLyBzaG93VG9vbHRpcChldmVudDogYW55LCBkOiBhbnkpIHtcblx0Ly8gXHRjb25zdCB0b29sdGlwID0gZDMuc2VsZWN0KCcudG9vbHRpcCcpO1xuXHQvLyBcdHRvb2x0aXAudGV4dChkLm5hbWUpXG5cdC8vIFx0XHQuc3R5bGUoJ3Zpc2liaWxpdHknLCAndmlzaWJsZScpO1xuXHQvLyBcdGNvbnN0IFt4LCB5XSA9IGQzLnBvaW50ZXIoZXZlbnQpO1xuXHQvLyBcdHRvb2x0aXAuc3R5bGUoJ3RvcCcsIGAke3kgKyAxMH1weGApXG5cdC8vIFx0XHQuc3R5bGUoJ2xlZnQnLCBgJHt4ICsgMTB9cHhgKTtcblx0Ly8gfVxuXG5cdC8vIGhpZGVUb29sdGlwKCkge1xuXHQvLyBcdGNvbnN0IHRvb2x0aXAgPSBkMy5zZWxlY3QoJy50b29sdGlwJyk7XG5cdC8vIFx0dG9vbHRpcC5zdHlsZSgndmlzaWJpbGl0eScsICdoaWRkZW4nKTtcblx0Ly8gfVxuXG59XG5cblx0XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTY0dyYXBoVmlldyBleHRlbmRzIFBsdWdpbiB7XG5cblx0c2V0dGluZ3M6IFBsdWdpblNldHRpbmdzO1xuXG4gICAgYXN5bmMgb25sb2FkKCkge1xuXG5cdFx0YXdhaXQgdGhpcy5sb2FkU2V0dGluZ3MoKTtcblxuXHRcdC8vIFJlZ2lzdGVyIHRoZSBuZXcgdmlld1xuICAgICAgICB0aGlzLnJlZ2lzdGVyVmlldyhcIndpa2lwZWRpYS1jb25uZWN0aW9ucy12aXN1YWxpemVyXCIsIChsZWFmOiBXb3Jrc3BhY2VMZWFmKSA9PiBuZXcgU2NHcmFwaEl0ZW1WaWV3KGxlYWYsIHRoaXMpKTtcblxuXHRcdC8vIFJlZ2lzdGVyIGhvdmVyIGxpbmsgc291cmNlXG5cdFx0dGhpcy5yZWdpc3RlckhvdmVyTGlua1NvdXJjZSgnd2lraXBlZGlhLWNvbm5lY3Rpb25zLXZpc3VhbGl6ZXInLCB7XG5cdFx0XHRkaXNwbGF5OiAnV2lraXBlZGlhIGNvbm5lY3Rpb25zIHZpc3VhbGl6ZXIgaG92ZXIgbGluayBzb3VyY2UnLFxuXHRcdFx0ZGVmYXVsdE1vZDogdHJ1ZVxuXHRcdH0pO1xuXG4gICAgICAgIC8vIFRoaXMgY3JlYXRlcyBhbiBpY29uIGluIHRoZSBsZWZ0IHJpYmJvbi5cbiAgICAgICAgdGhpcy5hZGRSaWJib25JY29uKCdnaXQtZm9yaycsICdPcGVuIHdpa2lwZWRpYSBjb25uZWN0aW9ucyB2aXN1YWxpemVyJywgKGV2dDogTW91c2VFdmVudCkgPT4ge1xuICAgICAgICAgICBcdC8vIENoZWNrIGlmIHRoZSB2aWV3IGlzIGFscmVhZHkgb3BlblxuXHRcdFx0Y29uc3QgZXhpc3RpbmdMZWFmID0gdGhpcy5hcHAud29ya3NwYWNlLmdldExlYXZlc09mVHlwZShcIndpa2lwZWRpYS1jb25uZWN0aW9ucy12aXN1YWxpemVyXCIpWzBdO1xuXHRcdFx0aWYgKGV4aXN0aW5nTGVhZikge1xuXHRcdFx0XHQvLyBJZiBpdCBleGlzdHMsIGZvY3VzIG9uIGl0XG5cdFx0XHRcdHRoaXMuYXBwLndvcmtzcGFjZS5zZXRBY3RpdmVMZWFmKGV4aXN0aW5nTGVhZik7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvLyBDcmVhdGUgYSBuZXcgbGVhZiBpbiB0aGUgY3VycmVudCB3b3Jrc3BhY2Vcblx0XHRcdFx0bGV0IGxlYWYgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0TGVhZih0cnVlKTtcblx0XHRcdFx0Ly8gU2V0IHRoZSBuZXcgbGVhZidzIHZpZXcgdG8geW91ciBjdXN0b20gdmlld1xuXHRcdFx0XHRsZWFmLnNldFZpZXdTdGF0ZSh7XG5cdFx0XHRcdFx0dHlwZTogXCJ3aWtpcGVkaWEtY29ubmVjdGlvbnMtdmlzdWFsaXplclwiLFxuXHRcdFx0XHRcdGFjdGl2ZTogdHJ1ZSxcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG4gICAgICAgIH0pXG5cdFx0XG5cbiAgICB9XG5cblx0YXN5bmMgbG9hZFNldHRpbmdzKCkge1xuICAgICAgICB0aGlzLnNldHRpbmdzID0gT2JqZWN0LmFzc2lnbih7fSwgREVGQVVMVF9ORVRXT1JLX1NFVFRJTkdTLCBhd2FpdCB0aGlzLmxvYWREYXRhKCkpO1xuICAgIH1cblxuXHRhc3luYyBzYXZlU2V0dGluZ3MoKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuc2F2ZURhdGEodGhpcy5zZXR0aW5ncyk7XG4gICAgfVxuXG4gICAgb251bmxvYWQoKSB7XG5cblx0fVxuXG59XG4iLCAiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYXNjZW5kaW5nKGEsIGIpIHtcbiAgcmV0dXJuIGEgPT0gbnVsbCB8fCBiID09IG51bGwgPyBOYU4gOiBhIDwgYiA/IC0xIDogYSA+IGIgPyAxIDogYSA+PSBiID8gMCA6IE5hTjtcbn1cbiIsICJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZXNjZW5kaW5nKGEsIGIpIHtcbiAgcmV0dXJuIGEgPT0gbnVsbCB8fCBiID09IG51bGwgPyBOYU5cbiAgICA6IGIgPCBhID8gLTFcbiAgICA6IGIgPiBhID8gMVxuICAgIDogYiA+PSBhID8gMFxuICAgIDogTmFOO1xufVxuIiwgImltcG9ydCBhc2NlbmRpbmcgZnJvbSBcIi4vYXNjZW5kaW5nLmpzXCI7XG5pbXBvcnQgZGVzY2VuZGluZyBmcm9tIFwiLi9kZXNjZW5kaW5nLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJpc2VjdG9yKGYpIHtcbiAgbGV0IGNvbXBhcmUxLCBjb21wYXJlMiwgZGVsdGE7XG5cbiAgLy8gSWYgYW4gYWNjZXNzb3IgaXMgc3BlY2lmaWVkLCBwcm9tb3RlIGl0IHRvIGEgY29tcGFyYXRvci4gSW4gdGhpcyBjYXNlIHdlXG4gIC8vIGNhbiB0ZXN0IHdoZXRoZXIgdGhlIHNlYXJjaCB2YWx1ZSBpcyAoc2VsZi0pIGNvbXBhcmFibGUuIFdlIGNhblx1MjAxOXQgZG8gdGhpc1xuICAvLyBmb3IgYSBjb21wYXJhdG9yIChleGNlcHQgZm9yIHNwZWNpZmljLCBrbm93biBjb21wYXJhdG9ycykgYmVjYXVzZSB3ZSBjYW5cdTIwMTl0XG4gIC8vIHRlbGwgaWYgdGhlIGNvbXBhcmF0b3IgaXMgc3ltbWV0cmljLCBhbmQgYW4gYXN5bW1ldHJpYyBjb21wYXJhdG9yIGNhblx1MjAxOXQgYmVcbiAgLy8gdXNlZCB0byB0ZXN0IHdoZXRoZXIgYSBzaW5nbGUgdmFsdWUgaXMgY29tcGFyYWJsZS5cbiAgaWYgKGYubGVuZ3RoICE9PSAyKSB7XG4gICAgY29tcGFyZTEgPSBhc2NlbmRpbmc7XG4gICAgY29tcGFyZTIgPSAoZCwgeCkgPT4gYXNjZW5kaW5nKGYoZCksIHgpO1xuICAgIGRlbHRhID0gKGQsIHgpID0+IGYoZCkgLSB4O1xuICB9IGVsc2Uge1xuICAgIGNvbXBhcmUxID0gZiA9PT0gYXNjZW5kaW5nIHx8IGYgPT09IGRlc2NlbmRpbmcgPyBmIDogemVybztcbiAgICBjb21wYXJlMiA9IGY7XG4gICAgZGVsdGEgPSBmO1xuICB9XG5cbiAgZnVuY3Rpb24gbGVmdChhLCB4LCBsbyA9IDAsIGhpID0gYS5sZW5ndGgpIHtcbiAgICBpZiAobG8gPCBoaSkge1xuICAgICAgaWYgKGNvbXBhcmUxKHgsIHgpICE9PSAwKSByZXR1cm4gaGk7XG4gICAgICBkbyB7XG4gICAgICAgIGNvbnN0IG1pZCA9IChsbyArIGhpKSA+Pj4gMTtcbiAgICAgICAgaWYgKGNvbXBhcmUyKGFbbWlkXSwgeCkgPCAwKSBsbyA9IG1pZCArIDE7XG4gICAgICAgIGVsc2UgaGkgPSBtaWQ7XG4gICAgICB9IHdoaWxlIChsbyA8IGhpKTtcbiAgICB9XG4gICAgcmV0dXJuIGxvO1xuICB9XG5cbiAgZnVuY3Rpb24gcmlnaHQoYSwgeCwgbG8gPSAwLCBoaSA9IGEubGVuZ3RoKSB7XG4gICAgaWYgKGxvIDwgaGkpIHtcbiAgICAgIGlmIChjb21wYXJlMSh4LCB4KSAhPT0gMCkgcmV0dXJuIGhpO1xuICAgICAgZG8ge1xuICAgICAgICBjb25zdCBtaWQgPSAobG8gKyBoaSkgPj4+IDE7XG4gICAgICAgIGlmIChjb21wYXJlMihhW21pZF0sIHgpIDw9IDApIGxvID0gbWlkICsgMTtcbiAgICAgICAgZWxzZSBoaSA9IG1pZDtcbiAgICAgIH0gd2hpbGUgKGxvIDwgaGkpO1xuICAgIH1cbiAgICByZXR1cm4gbG87XG4gIH1cblxuICBmdW5jdGlvbiBjZW50ZXIoYSwgeCwgbG8gPSAwLCBoaSA9IGEubGVuZ3RoKSB7XG4gICAgY29uc3QgaSA9IGxlZnQoYSwgeCwgbG8sIGhpIC0gMSk7XG4gICAgcmV0dXJuIGkgPiBsbyAmJiBkZWx0YShhW2kgLSAxXSwgeCkgPiAtZGVsdGEoYVtpXSwgeCkgPyBpIC0gMSA6IGk7XG4gIH1cblxuICByZXR1cm4ge2xlZnQsIGNlbnRlciwgcmlnaHR9O1xufVxuXG5mdW5jdGlvbiB6ZXJvKCkge1xuICByZXR1cm4gMDtcbn1cbiIsICJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBudW1iZXIoeCkge1xuICByZXR1cm4geCA9PT0gbnVsbCA/IE5hTiA6ICt4O1xufVxuXG5leHBvcnQgZnVuY3Rpb24qIG51bWJlcnModmFsdWVzLCB2YWx1ZW9mKSB7XG4gIGlmICh2YWx1ZW9mID09PSB1bmRlZmluZWQpIHtcbiAgICBmb3IgKGxldCB2YWx1ZSBvZiB2YWx1ZXMpIHtcbiAgICAgIGlmICh2YWx1ZSAhPSBudWxsICYmICh2YWx1ZSA9ICt2YWx1ZSkgPj0gdmFsdWUpIHtcbiAgICAgICAgeWllbGQgdmFsdWU7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGxldCBpbmRleCA9IC0xO1xuICAgIGZvciAobGV0IHZhbHVlIG9mIHZhbHVlcykge1xuICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlb2YodmFsdWUsICsraW5kZXgsIHZhbHVlcykpICE9IG51bGwgJiYgKHZhbHVlID0gK3ZhbHVlKSA+PSB2YWx1ZSkge1xuICAgICAgICB5aWVsZCB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiIsICJpbXBvcnQgYXNjZW5kaW5nIGZyb20gXCIuL2FzY2VuZGluZy5qc1wiO1xuaW1wb3J0IGJpc2VjdG9yIGZyb20gXCIuL2Jpc2VjdG9yLmpzXCI7XG5pbXBvcnQgbnVtYmVyIGZyb20gXCIuL251bWJlci5qc1wiO1xuXG5jb25zdCBhc2NlbmRpbmdCaXNlY3QgPSBiaXNlY3Rvcihhc2NlbmRpbmcpO1xuZXhwb3J0IGNvbnN0IGJpc2VjdFJpZ2h0ID0gYXNjZW5kaW5nQmlzZWN0LnJpZ2h0O1xuZXhwb3J0IGNvbnN0IGJpc2VjdExlZnQgPSBhc2NlbmRpbmdCaXNlY3QubGVmdDtcbmV4cG9ydCBjb25zdCBiaXNlY3RDZW50ZXIgPSBiaXNlY3RvcihudW1iZXIpLmNlbnRlcjtcbmV4cG9ydCBkZWZhdWx0IGJpc2VjdFJpZ2h0O1xuIiwgImNvbnN0IGUxMCA9IE1hdGguc3FydCg1MCksXG4gICAgZTUgPSBNYXRoLnNxcnQoMTApLFxuICAgIGUyID0gTWF0aC5zcXJ0KDIpO1xuXG5mdW5jdGlvbiB0aWNrU3BlYyhzdGFydCwgc3RvcCwgY291bnQpIHtcbiAgY29uc3Qgc3RlcCA9IChzdG9wIC0gc3RhcnQpIC8gTWF0aC5tYXgoMCwgY291bnQpLFxuICAgICAgcG93ZXIgPSBNYXRoLmZsb29yKE1hdGgubG9nMTAoc3RlcCkpLFxuICAgICAgZXJyb3IgPSBzdGVwIC8gTWF0aC5wb3coMTAsIHBvd2VyKSxcbiAgICAgIGZhY3RvciA9IGVycm9yID49IGUxMCA/IDEwIDogZXJyb3IgPj0gZTUgPyA1IDogZXJyb3IgPj0gZTIgPyAyIDogMTtcbiAgbGV0IGkxLCBpMiwgaW5jO1xuICBpZiAocG93ZXIgPCAwKSB7XG4gICAgaW5jID0gTWF0aC5wb3coMTAsIC1wb3dlcikgLyBmYWN0b3I7XG4gICAgaTEgPSBNYXRoLnJvdW5kKHN0YXJ0ICogaW5jKTtcbiAgICBpMiA9IE1hdGgucm91bmQoc3RvcCAqIGluYyk7XG4gICAgaWYgKGkxIC8gaW5jIDwgc3RhcnQpICsraTE7XG4gICAgaWYgKGkyIC8gaW5jID4gc3RvcCkgLS1pMjtcbiAgICBpbmMgPSAtaW5jO1xuICB9IGVsc2Uge1xuICAgIGluYyA9IE1hdGgucG93KDEwLCBwb3dlcikgKiBmYWN0b3I7XG4gICAgaTEgPSBNYXRoLnJvdW5kKHN0YXJ0IC8gaW5jKTtcbiAgICBpMiA9IE1hdGgucm91bmQoc3RvcCAvIGluYyk7XG4gICAgaWYgKGkxICogaW5jIDwgc3RhcnQpICsraTE7XG4gICAgaWYgKGkyICogaW5jID4gc3RvcCkgLS1pMjtcbiAgfVxuICBpZiAoaTIgPCBpMSAmJiAwLjUgPD0gY291bnQgJiYgY291bnQgPCAyKSByZXR1cm4gdGlja1NwZWMoc3RhcnQsIHN0b3AsIGNvdW50ICogMik7XG4gIHJldHVybiBbaTEsIGkyLCBpbmNdO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0aWNrcyhzdGFydCwgc3RvcCwgY291bnQpIHtcbiAgc3RvcCA9ICtzdG9wLCBzdGFydCA9ICtzdGFydCwgY291bnQgPSArY291bnQ7XG4gIGlmICghKGNvdW50ID4gMCkpIHJldHVybiBbXTtcbiAgaWYgKHN0YXJ0ID09PSBzdG9wKSByZXR1cm4gW3N0YXJ0XTtcbiAgY29uc3QgcmV2ZXJzZSA9IHN0b3AgPCBzdGFydCwgW2kxLCBpMiwgaW5jXSA9IHJldmVyc2UgPyB0aWNrU3BlYyhzdG9wLCBzdGFydCwgY291bnQpIDogdGlja1NwZWMoc3RhcnQsIHN0b3AsIGNvdW50KTtcbiAgaWYgKCEoaTIgPj0gaTEpKSByZXR1cm4gW107XG4gIGNvbnN0IG4gPSBpMiAtIGkxICsgMSwgdGlja3MgPSBuZXcgQXJyYXkobik7XG4gIGlmIChyZXZlcnNlKSB7XG4gICAgaWYgKGluYyA8IDApIGZvciAobGV0IGkgPSAwOyBpIDwgbjsgKytpKSB0aWNrc1tpXSA9IChpMiAtIGkpIC8gLWluYztcbiAgICBlbHNlIGZvciAobGV0IGkgPSAwOyBpIDwgbjsgKytpKSB0aWNrc1tpXSA9IChpMiAtIGkpICogaW5jO1xuICB9IGVsc2Uge1xuICAgIGlmIChpbmMgPCAwKSBmb3IgKGxldCBpID0gMDsgaSA8IG47ICsraSkgdGlja3NbaV0gPSAoaTEgKyBpKSAvIC1pbmM7XG4gICAgZWxzZSBmb3IgKGxldCBpID0gMDsgaSA8IG47ICsraSkgdGlja3NbaV0gPSAoaTEgKyBpKSAqIGluYztcbiAgfVxuICByZXR1cm4gdGlja3M7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0aWNrSW5jcmVtZW50KHN0YXJ0LCBzdG9wLCBjb3VudCkge1xuICBzdG9wID0gK3N0b3AsIHN0YXJ0ID0gK3N0YXJ0LCBjb3VudCA9ICtjb3VudDtcbiAgcmV0dXJuIHRpY2tTcGVjKHN0YXJ0LCBzdG9wLCBjb3VudClbMl07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0aWNrU3RlcChzdGFydCwgc3RvcCwgY291bnQpIHtcbiAgc3RvcCA9ICtzdG9wLCBzdGFydCA9ICtzdGFydCwgY291bnQgPSArY291bnQ7XG4gIGNvbnN0IHJldmVyc2UgPSBzdG9wIDwgc3RhcnQsIGluYyA9IHJldmVyc2UgPyB0aWNrSW5jcmVtZW50KHN0b3AsIHN0YXJ0LCBjb3VudCkgOiB0aWNrSW5jcmVtZW50KHN0YXJ0LCBzdG9wLCBjb3VudCk7XG4gIHJldHVybiAocmV2ZXJzZSA/IC0xIDogMSkgKiAoaW5jIDwgMCA/IDEgLyAtaW5jIDogaW5jKTtcbn1cbiIsICJ2YXIgbm9vcCA9IHt2YWx1ZTogKCkgPT4ge319O1xuXG5mdW5jdGlvbiBkaXNwYXRjaCgpIHtcbiAgZm9yICh2YXIgaSA9IDAsIG4gPSBhcmd1bWVudHMubGVuZ3RoLCBfID0ge30sIHQ7IGkgPCBuOyArK2kpIHtcbiAgICBpZiAoISh0ID0gYXJndW1lbnRzW2ldICsgXCJcIikgfHwgKHQgaW4gXykgfHwgL1tcXHMuXS8udGVzdCh0KSkgdGhyb3cgbmV3IEVycm9yKFwiaWxsZWdhbCB0eXBlOiBcIiArIHQpO1xuICAgIF9bdF0gPSBbXTtcbiAgfVxuICByZXR1cm4gbmV3IERpc3BhdGNoKF8pO1xufVxuXG5mdW5jdGlvbiBEaXNwYXRjaChfKSB7XG4gIHRoaXMuXyA9IF87XG59XG5cbmZ1bmN0aW9uIHBhcnNlVHlwZW5hbWVzKHR5cGVuYW1lcywgdHlwZXMpIHtcbiAgcmV0dXJuIHR5cGVuYW1lcy50cmltKCkuc3BsaXQoL158XFxzKy8pLm1hcChmdW5jdGlvbih0KSB7XG4gICAgdmFyIG5hbWUgPSBcIlwiLCBpID0gdC5pbmRleE9mKFwiLlwiKTtcbiAgICBpZiAoaSA+PSAwKSBuYW1lID0gdC5zbGljZShpICsgMSksIHQgPSB0LnNsaWNlKDAsIGkpO1xuICAgIGlmICh0ICYmICF0eXBlcy5oYXNPd25Qcm9wZXJ0eSh0KSkgdGhyb3cgbmV3IEVycm9yKFwidW5rbm93biB0eXBlOiBcIiArIHQpO1xuICAgIHJldHVybiB7dHlwZTogdCwgbmFtZTogbmFtZX07XG4gIH0pO1xufVxuXG5EaXNwYXRjaC5wcm90b3R5cGUgPSBkaXNwYXRjaC5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBEaXNwYXRjaCxcbiAgb246IGZ1bmN0aW9uKHR5cGVuYW1lLCBjYWxsYmFjaykge1xuICAgIHZhciBfID0gdGhpcy5fLFxuICAgICAgICBUID0gcGFyc2VUeXBlbmFtZXModHlwZW5hbWUgKyBcIlwiLCBfKSxcbiAgICAgICAgdCxcbiAgICAgICAgaSA9IC0xLFxuICAgICAgICBuID0gVC5sZW5ndGg7XG5cbiAgICAvLyBJZiBubyBjYWxsYmFjayB3YXMgc3BlY2lmaWVkLCByZXR1cm4gdGhlIGNhbGxiYWNrIG9mIHRoZSBnaXZlbiB0eXBlIGFuZCBuYW1lLlxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgICAgd2hpbGUgKCsraSA8IG4pIGlmICgodCA9ICh0eXBlbmFtZSA9IFRbaV0pLnR5cGUpICYmICh0ID0gZ2V0KF9bdF0sIHR5cGVuYW1lLm5hbWUpKSkgcmV0dXJuIHQ7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gSWYgYSB0eXBlIHdhcyBzcGVjaWZpZWQsIHNldCB0aGUgY2FsbGJhY2sgZm9yIHRoZSBnaXZlbiB0eXBlIGFuZCBuYW1lLlxuICAgIC8vIE90aGVyd2lzZSwgaWYgYSBudWxsIGNhbGxiYWNrIHdhcyBzcGVjaWZpZWQsIHJlbW92ZSBjYWxsYmFja3Mgb2YgdGhlIGdpdmVuIG5hbWUuXG4gICAgaWYgKGNhbGxiYWNrICE9IG51bGwgJiYgdHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgY2FsbGJhY2s6IFwiICsgY2FsbGJhY2spO1xuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBpZiAodCA9ICh0eXBlbmFtZSA9IFRbaV0pLnR5cGUpIF9bdF0gPSBzZXQoX1t0XSwgdHlwZW5hbWUubmFtZSwgY2FsbGJhY2spO1xuICAgICAgZWxzZSBpZiAoY2FsbGJhY2sgPT0gbnVsbCkgZm9yICh0IGluIF8pIF9bdF0gPSBzZXQoX1t0XSwgdHlwZW5hbWUubmFtZSwgbnVsbCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG4gIGNvcHk6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBjb3B5ID0ge30sIF8gPSB0aGlzLl87XG4gICAgZm9yICh2YXIgdCBpbiBfKSBjb3B5W3RdID0gX1t0XS5zbGljZSgpO1xuICAgIHJldHVybiBuZXcgRGlzcGF0Y2goY29weSk7XG4gIH0sXG4gIGNhbGw6IGZ1bmN0aW9uKHR5cGUsIHRoYXQpIHtcbiAgICBpZiAoKG4gPSBhcmd1bWVudHMubGVuZ3RoIC0gMikgPiAwKSBmb3IgKHZhciBhcmdzID0gbmV3IEFycmF5KG4pLCBpID0gMCwgbiwgdDsgaSA8IG47ICsraSkgYXJnc1tpXSA9IGFyZ3VtZW50c1tpICsgMl07XG4gICAgaWYgKCF0aGlzLl8uaGFzT3duUHJvcGVydHkodHlwZSkpIHRocm93IG5ldyBFcnJvcihcInVua25vd24gdHlwZTogXCIgKyB0eXBlKTtcbiAgICBmb3IgKHQgPSB0aGlzLl9bdHlwZV0sIGkgPSAwLCBuID0gdC5sZW5ndGg7IGkgPCBuOyArK2kpIHRbaV0udmFsdWUuYXBwbHkodGhhdCwgYXJncyk7XG4gIH0sXG4gIGFwcGx5OiBmdW5jdGlvbih0eXBlLCB0aGF0LCBhcmdzKSB7XG4gICAgaWYgKCF0aGlzLl8uaGFzT3duUHJvcGVydHkodHlwZSkpIHRocm93IG5ldyBFcnJvcihcInVua25vd24gdHlwZTogXCIgKyB0eXBlKTtcbiAgICBmb3IgKHZhciB0ID0gdGhpcy5fW3R5cGVdLCBpID0gMCwgbiA9IHQubGVuZ3RoOyBpIDwgbjsgKytpKSB0W2ldLnZhbHVlLmFwcGx5KHRoYXQsIGFyZ3MpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBnZXQodHlwZSwgbmFtZSkge1xuICBmb3IgKHZhciBpID0gMCwgbiA9IHR5cGUubGVuZ3RoLCBjOyBpIDwgbjsgKytpKSB7XG4gICAgaWYgKChjID0gdHlwZVtpXSkubmFtZSA9PT0gbmFtZSkge1xuICAgICAgcmV0dXJuIGMudmFsdWU7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHNldCh0eXBlLCBuYW1lLCBjYWxsYmFjaykge1xuICBmb3IgKHZhciBpID0gMCwgbiA9IHR5cGUubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgaWYgKHR5cGVbaV0ubmFtZSA9PT0gbmFtZSkge1xuICAgICAgdHlwZVtpXSA9IG5vb3AsIHR5cGUgPSB0eXBlLnNsaWNlKDAsIGkpLmNvbmNhdCh0eXBlLnNsaWNlKGkgKyAxKSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgaWYgKGNhbGxiYWNrICE9IG51bGwpIHR5cGUucHVzaCh7bmFtZTogbmFtZSwgdmFsdWU6IGNhbGxiYWNrfSk7XG4gIHJldHVybiB0eXBlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBkaXNwYXRjaDtcbiIsICJleHBvcnQgdmFyIHhodG1sID0gXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgc3ZnOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsXG4gIHhodG1sOiB4aHRtbCxcbiAgeGxpbms6IFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLFxuICB4bWw6IFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIsXG4gIHhtbG5zOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAveG1sbnMvXCJcbn07XG4iLCAiaW1wb3J0IG5hbWVzcGFjZXMgZnJvbSBcIi4vbmFtZXNwYWNlcy5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lKSB7XG4gIHZhciBwcmVmaXggPSBuYW1lICs9IFwiXCIsIGkgPSBwcmVmaXguaW5kZXhPZihcIjpcIik7XG4gIGlmIChpID49IDAgJiYgKHByZWZpeCA9IG5hbWUuc2xpY2UoMCwgaSkpICE9PSBcInhtbG5zXCIpIG5hbWUgPSBuYW1lLnNsaWNlKGkgKyAxKTtcbiAgcmV0dXJuIG5hbWVzcGFjZXMuaGFzT3duUHJvcGVydHkocHJlZml4KSA/IHtzcGFjZTogbmFtZXNwYWNlc1twcmVmaXhdLCBsb2NhbDogbmFtZX0gOiBuYW1lOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xufVxuIiwgImltcG9ydCBuYW1lc3BhY2UgZnJvbSBcIi4vbmFtZXNwYWNlLmpzXCI7XG5pbXBvcnQge3hodG1sfSBmcm9tIFwiLi9uYW1lc3BhY2VzLmpzXCI7XG5cbmZ1bmN0aW9uIGNyZWF0b3JJbmhlcml0KG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBkb2N1bWVudCA9IHRoaXMub3duZXJEb2N1bWVudCxcbiAgICAgICAgdXJpID0gdGhpcy5uYW1lc3BhY2VVUkk7XG4gICAgcmV0dXJuIHVyaSA9PT0geGh0bWwgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50Lm5hbWVzcGFjZVVSSSA9PT0geGh0bWxcbiAgICAgICAgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KG5hbWUpXG4gICAgICAgIDogZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKHVyaSwgbmFtZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNyZWF0b3JGaXhlZChmdWxsbmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMub3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSkge1xuICB2YXIgZnVsbG5hbWUgPSBuYW1lc3BhY2UobmFtZSk7XG4gIHJldHVybiAoZnVsbG5hbWUubG9jYWxcbiAgICAgID8gY3JlYXRvckZpeGVkXG4gICAgICA6IGNyZWF0b3JJbmhlcml0KShmdWxsbmFtZSk7XG59XG4iLCAiZnVuY3Rpb24gbm9uZSgpIHt9XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gIHJldHVybiBzZWxlY3RvciA9PSBudWxsID8gbm9uZSA6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpO1xuICB9O1xufVxuIiwgImltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleC5qc1wiO1xuaW1wb3J0IHNlbGVjdG9yIGZyb20gXCIuLi9zZWxlY3Rvci5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3QpIHtcbiAgaWYgKHR5cGVvZiBzZWxlY3QgIT09IFwiZnVuY3Rpb25cIikgc2VsZWN0ID0gc2VsZWN0b3Ioc2VsZWN0KTtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBzdWJncm91cHMgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIHN1Ymdyb3VwID0gc3ViZ3JvdXBzW2pdID0gbmV3IEFycmF5KG4pLCBub2RlLCBzdWJub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKChub2RlID0gZ3JvdXBbaV0pICYmIChzdWJub2RlID0gc2VsZWN0LmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApKSkge1xuICAgICAgICBpZiAoXCJfX2RhdGFfX1wiIGluIG5vZGUpIHN1Ym5vZGUuX19kYXRhX18gPSBub2RlLl9fZGF0YV9fO1xuICAgICAgICBzdWJncm91cFtpXSA9IHN1Ym5vZGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24oc3ViZ3JvdXBzLCB0aGlzLl9wYXJlbnRzKTtcbn1cbiIsICIvLyBHaXZlbiBzb21ldGhpbmcgYXJyYXkgbGlrZSAob3IgbnVsbCksIHJldHVybnMgc29tZXRoaW5nIHRoYXQgaXMgc3RyaWN0bHkgYW5cbi8vIGFycmF5LiBUaGlzIGlzIHVzZWQgdG8gZW5zdXJlIHRoYXQgYXJyYXktbGlrZSBvYmplY3RzIHBhc3NlZCB0byBkMy5zZWxlY3RBbGxcbi8vIG9yIHNlbGVjdGlvbi5zZWxlY3RBbGwgYXJlIGNvbnZlcnRlZCBpbnRvIHByb3BlciBhcnJheXMgd2hlbiBjcmVhdGluZyBhXG4vLyBzZWxlY3Rpb247IHdlIGRvblx1MjAxOXQgZXZlciB3YW50IHRvIGNyZWF0ZSBhIHNlbGVjdGlvbiBiYWNrZWQgYnkgYSBsaXZlXG4vLyBIVE1MQ29sbGVjdGlvbiBvciBOb2RlTGlzdC4gSG93ZXZlciwgbm90ZSB0aGF0IHNlbGVjdGlvbi5zZWxlY3RBbGwgd2lsbCB1c2UgYVxuLy8gc3RhdGljIE5vZGVMaXN0IGFzIGEgZ3JvdXAsIHNpbmNlIGl0IHNhZmVseSBkZXJpdmVkIGZyb20gcXVlcnlTZWxlY3RvckFsbC5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFycmF5KHgpIHtcbiAgcmV0dXJuIHggPT0gbnVsbCA/IFtdIDogQXJyYXkuaXNBcnJheSh4KSA/IHggOiBBcnJheS5mcm9tKHgpO1xufVxuIiwgImZ1bmN0aW9uIGVtcHR5KCkge1xuICByZXR1cm4gW107XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gIHJldHVybiBzZWxlY3RvciA9PSBudWxsID8gZW1wdHkgOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcbiAgfTtcbn1cbiIsICJpbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXguanNcIjtcbmltcG9ydCBhcnJheSBmcm9tIFwiLi4vYXJyYXkuanNcIjtcbmltcG9ydCBzZWxlY3RvckFsbCBmcm9tIFwiLi4vc2VsZWN0b3JBbGwuanNcIjtcblxuZnVuY3Rpb24gYXJyYXlBbGwoc2VsZWN0KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gYXJyYXkoc2VsZWN0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3QpIHtcbiAgaWYgKHR5cGVvZiBzZWxlY3QgPT09IFwiZnVuY3Rpb25cIikgc2VsZWN0ID0gYXJyYXlBbGwoc2VsZWN0KTtcbiAgZWxzZSBzZWxlY3QgPSBzZWxlY3RvckFsbChzZWxlY3QpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IFtdLCBwYXJlbnRzID0gW10sIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIHN1Ymdyb3Vwcy5wdXNoKHNlbGVjdC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSk7XG4gICAgICAgIHBhcmVudHMucHVzaChub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFNlbGVjdGlvbihzdWJncm91cHMsIHBhcmVudHMpO1xufVxuIiwgImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5tYXRjaGVzKHNlbGVjdG9yKTtcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNoaWxkTWF0Y2hlcihzZWxlY3Rvcikge1xuICByZXR1cm4gZnVuY3Rpb24obm9kZSkge1xuICAgIHJldHVybiBub2RlLm1hdGNoZXMoc2VsZWN0b3IpO1xuICB9O1xufVxuXG4iLCAiaW1wb3J0IHtjaGlsZE1hdGNoZXJ9IGZyb20gXCIuLi9tYXRjaGVyLmpzXCI7XG5cbnZhciBmaW5kID0gQXJyYXkucHJvdG90eXBlLmZpbmQ7XG5cbmZ1bmN0aW9uIGNoaWxkRmluZChtYXRjaCkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGZpbmQuY2FsbCh0aGlzLmNoaWxkcmVuLCBtYXRjaCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNoaWxkRmlyc3QoKSB7XG4gIHJldHVybiB0aGlzLmZpcnN0RWxlbWVudENoaWxkO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihtYXRjaCkge1xuICByZXR1cm4gdGhpcy5zZWxlY3QobWF0Y2ggPT0gbnVsbCA/IGNoaWxkRmlyc3RcbiAgICAgIDogY2hpbGRGaW5kKHR5cGVvZiBtYXRjaCA9PT0gXCJmdW5jdGlvblwiID8gbWF0Y2ggOiBjaGlsZE1hdGNoZXIobWF0Y2gpKSk7XG59XG4iLCAiaW1wb3J0IHtjaGlsZE1hdGNoZXJ9IGZyb20gXCIuLi9tYXRjaGVyLmpzXCI7XG5cbnZhciBmaWx0ZXIgPSBBcnJheS5wcm90b3R5cGUuZmlsdGVyO1xuXG5mdW5jdGlvbiBjaGlsZHJlbigpIHtcbiAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5jaGlsZHJlbik7XG59XG5cbmZ1bmN0aW9uIGNoaWxkcmVuRmlsdGVyKG1hdGNoKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZmlsdGVyLmNhbGwodGhpcy5jaGlsZHJlbiwgbWF0Y2gpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihtYXRjaCkge1xuICByZXR1cm4gdGhpcy5zZWxlY3RBbGwobWF0Y2ggPT0gbnVsbCA/IGNoaWxkcmVuXG4gICAgICA6IGNoaWxkcmVuRmlsdGVyKHR5cGVvZiBtYXRjaCA9PT0gXCJmdW5jdGlvblwiID8gbWF0Y2ggOiBjaGlsZE1hdGNoZXIobWF0Y2gpKSk7XG59XG4iLCAiaW1wb3J0IHtTZWxlY3Rpb259IGZyb20gXCIuL2luZGV4LmpzXCI7XG5pbXBvcnQgbWF0Y2hlciBmcm9tIFwiLi4vbWF0Y2hlci5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihtYXRjaCkge1xuICBpZiAodHlwZW9mIG1hdGNoICE9PSBcImZ1bmN0aW9uXCIpIG1hdGNoID0gbWF0Y2hlcihtYXRjaCk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gbmV3IEFycmF5KG0pLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBzdWJncm91cCA9IHN1Ymdyb3Vwc1tqXSA9IFtdLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKChub2RlID0gZ3JvdXBbaV0pICYmIG1hdGNoLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApKSB7XG4gICAgICAgIHN1Ymdyb3VwLnB1c2gobm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24oc3ViZ3JvdXBzLCB0aGlzLl9wYXJlbnRzKTtcbn1cbiIsICJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih1cGRhdGUpIHtcbiAgcmV0dXJuIG5ldyBBcnJheSh1cGRhdGUubGVuZ3RoKTtcbn1cbiIsICJpbXBvcnQgc3BhcnNlIGZyb20gXCIuL3NwYXJzZS5qc1wiO1xuaW1wb3J0IHtTZWxlY3Rpb259IGZyb20gXCIuL2luZGV4LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFNlbGVjdGlvbih0aGlzLl9lbnRlciB8fCB0aGlzLl9ncm91cHMubWFwKHNwYXJzZSksIHRoaXMuX3BhcmVudHMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gRW50ZXJOb2RlKHBhcmVudCwgZGF0dW0pIHtcbiAgdGhpcy5vd25lckRvY3VtZW50ID0gcGFyZW50Lm93bmVyRG9jdW1lbnQ7XG4gIHRoaXMubmFtZXNwYWNlVVJJID0gcGFyZW50Lm5hbWVzcGFjZVVSSTtcbiAgdGhpcy5fbmV4dCA9IG51bGw7XG4gIHRoaXMuX3BhcmVudCA9IHBhcmVudDtcbiAgdGhpcy5fX2RhdGFfXyA9IGRhdHVtO1xufVxuXG5FbnRlck5vZGUucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogRW50ZXJOb2RlLFxuICBhcHBlbmRDaGlsZDogZnVuY3Rpb24oY2hpbGQpIHsgcmV0dXJuIHRoaXMuX3BhcmVudC5pbnNlcnRCZWZvcmUoY2hpbGQsIHRoaXMuX25leHQpOyB9LFxuICBpbnNlcnRCZWZvcmU6IGZ1bmN0aW9uKGNoaWxkLCBuZXh0KSB7IHJldHVybiB0aGlzLl9wYXJlbnQuaW5zZXJ0QmVmb3JlKGNoaWxkLCBuZXh0KTsgfSxcbiAgcXVlcnlTZWxlY3RvcjogZnVuY3Rpb24oc2VsZWN0b3IpIHsgcmV0dXJuIHRoaXMuX3BhcmVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTsgfSxcbiAgcXVlcnlTZWxlY3RvckFsbDogZnVuY3Rpb24oc2VsZWN0b3IpIHsgcmV0dXJuIHRoaXMuX3BhcmVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTsgfVxufTtcbiIsICJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn1cbiIsICJpbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXguanNcIjtcbmltcG9ydCB7RW50ZXJOb2RlfSBmcm9tIFwiLi9lbnRlci5qc1wiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuLi9jb25zdGFudC5qc1wiO1xuXG5mdW5jdGlvbiBiaW5kSW5kZXgocGFyZW50LCBncm91cCwgZW50ZXIsIHVwZGF0ZSwgZXhpdCwgZGF0YSkge1xuICB2YXIgaSA9IDAsXG4gICAgICBub2RlLFxuICAgICAgZ3JvdXBMZW5ndGggPSBncm91cC5sZW5ndGgsXG4gICAgICBkYXRhTGVuZ3RoID0gZGF0YS5sZW5ndGg7XG5cbiAgLy8gUHV0IGFueSBub24tbnVsbCBub2RlcyB0aGF0IGZpdCBpbnRvIHVwZGF0ZS5cbiAgLy8gUHV0IGFueSBudWxsIG5vZGVzIGludG8gZW50ZXIuXG4gIC8vIFB1dCBhbnkgcmVtYWluaW5nIGRhdGEgaW50byBlbnRlci5cbiAgZm9yICg7IGkgPCBkYXRhTGVuZ3RoOyArK2kpIHtcbiAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICBub2RlLl9fZGF0YV9fID0gZGF0YVtpXTtcbiAgICAgIHVwZGF0ZVtpXSA9IG5vZGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVudGVyW2ldID0gbmV3IEVudGVyTm9kZShwYXJlbnQsIGRhdGFbaV0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIFB1dCBhbnkgbm9uLW51bGwgbm9kZXMgdGhhdCBkb25cdTIwMTl0IGZpdCBpbnRvIGV4aXQuXG4gIGZvciAoOyBpIDwgZ3JvdXBMZW5ndGg7ICsraSkge1xuICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgIGV4aXRbaV0gPSBub2RlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBiaW5kS2V5KHBhcmVudCwgZ3JvdXAsIGVudGVyLCB1cGRhdGUsIGV4aXQsIGRhdGEsIGtleSkge1xuICB2YXIgaSxcbiAgICAgIG5vZGUsXG4gICAgICBub2RlQnlLZXlWYWx1ZSA9IG5ldyBNYXAsXG4gICAgICBncm91cExlbmd0aCA9IGdyb3VwLmxlbmd0aCxcbiAgICAgIGRhdGFMZW5ndGggPSBkYXRhLmxlbmd0aCxcbiAgICAgIGtleVZhbHVlcyA9IG5ldyBBcnJheShncm91cExlbmd0aCksXG4gICAgICBrZXlWYWx1ZTtcblxuICAvLyBDb21wdXRlIHRoZSBrZXkgZm9yIGVhY2ggbm9kZS5cbiAgLy8gSWYgbXVsdGlwbGUgbm9kZXMgaGF2ZSB0aGUgc2FtZSBrZXksIHRoZSBkdXBsaWNhdGVzIGFyZSBhZGRlZCB0byBleGl0LlxuICBmb3IgKGkgPSAwOyBpIDwgZ3JvdXBMZW5ndGg7ICsraSkge1xuICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgIGtleVZhbHVlc1tpXSA9IGtleVZhbHVlID0ga2V5LmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApICsgXCJcIjtcbiAgICAgIGlmIChub2RlQnlLZXlWYWx1ZS5oYXMoa2V5VmFsdWUpKSB7XG4gICAgICAgIGV4aXRbaV0gPSBub2RlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbm9kZUJ5S2V5VmFsdWUuc2V0KGtleVZhbHVlLCBub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBDb21wdXRlIHRoZSBrZXkgZm9yIGVhY2ggZGF0dW0uXG4gIC8vIElmIHRoZXJlIGEgbm9kZSBhc3NvY2lhdGVkIHdpdGggdGhpcyBrZXksIGpvaW4gYW5kIGFkZCBpdCB0byB1cGRhdGUuXG4gIC8vIElmIHRoZXJlIGlzIG5vdCAob3IgdGhlIGtleSBpcyBhIGR1cGxpY2F0ZSksIGFkZCBpdCB0byBlbnRlci5cbiAgZm9yIChpID0gMDsgaSA8IGRhdGFMZW5ndGg7ICsraSkge1xuICAgIGtleVZhbHVlID0ga2V5LmNhbGwocGFyZW50LCBkYXRhW2ldLCBpLCBkYXRhKSArIFwiXCI7XG4gICAgaWYgKG5vZGUgPSBub2RlQnlLZXlWYWx1ZS5nZXQoa2V5VmFsdWUpKSB7XG4gICAgICB1cGRhdGVbaV0gPSBub2RlO1xuICAgICAgbm9kZS5fX2RhdGFfXyA9IGRhdGFbaV07XG4gICAgICBub2RlQnlLZXlWYWx1ZS5kZWxldGUoa2V5VmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbnRlcltpXSA9IG5ldyBFbnRlck5vZGUocGFyZW50LCBkYXRhW2ldKTtcbiAgICB9XG4gIH1cblxuICAvLyBBZGQgYW55IHJlbWFpbmluZyBub2RlcyB0aGF0IHdlcmUgbm90IGJvdW5kIHRvIGRhdGEgdG8gZXhpdC5cbiAgZm9yIChpID0gMDsgaSA8IGdyb3VwTGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoKG5vZGUgPSBncm91cFtpXSkgJiYgKG5vZGVCeUtleVZhbHVlLmdldChrZXlWYWx1ZXNbaV0pID09PSBub2RlKSkge1xuICAgICAgZXhpdFtpXSA9IG5vZGU7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGRhdHVtKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUuX19kYXRhX187XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLCBkYXR1bSk7XG5cbiAgdmFyIGJpbmQgPSBrZXkgPyBiaW5kS2V5IDogYmluZEluZGV4LFxuICAgICAgcGFyZW50cyA9IHRoaXMuX3BhcmVudHMsXG4gICAgICBncm91cHMgPSB0aGlzLl9ncm91cHM7XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiKSB2YWx1ZSA9IGNvbnN0YW50KHZhbHVlKTtcblxuICBmb3IgKHZhciBtID0gZ3JvdXBzLmxlbmd0aCwgdXBkYXRlID0gbmV3IEFycmF5KG0pLCBlbnRlciA9IG5ldyBBcnJheShtKSwgZXhpdCA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICB2YXIgcGFyZW50ID0gcGFyZW50c1tqXSxcbiAgICAgICAgZ3JvdXAgPSBncm91cHNbal0sXG4gICAgICAgIGdyb3VwTGVuZ3RoID0gZ3JvdXAubGVuZ3RoLFxuICAgICAgICBkYXRhID0gYXJyYXlsaWtlKHZhbHVlLmNhbGwocGFyZW50LCBwYXJlbnQgJiYgcGFyZW50Ll9fZGF0YV9fLCBqLCBwYXJlbnRzKSksXG4gICAgICAgIGRhdGFMZW5ndGggPSBkYXRhLmxlbmd0aCxcbiAgICAgICAgZW50ZXJHcm91cCA9IGVudGVyW2pdID0gbmV3IEFycmF5KGRhdGFMZW5ndGgpLFxuICAgICAgICB1cGRhdGVHcm91cCA9IHVwZGF0ZVtqXSA9IG5ldyBBcnJheShkYXRhTGVuZ3RoKSxcbiAgICAgICAgZXhpdEdyb3VwID0gZXhpdFtqXSA9IG5ldyBBcnJheShncm91cExlbmd0aCk7XG5cbiAgICBiaW5kKHBhcmVudCwgZ3JvdXAsIGVudGVyR3JvdXAsIHVwZGF0ZUdyb3VwLCBleGl0R3JvdXAsIGRhdGEsIGtleSk7XG5cbiAgICAvLyBOb3cgY29ubmVjdCB0aGUgZW50ZXIgbm9kZXMgdG8gdGhlaXIgZm9sbG93aW5nIHVwZGF0ZSBub2RlLCBzdWNoIHRoYXRcbiAgICAvLyBhcHBlbmRDaGlsZCBjYW4gaW5zZXJ0IHRoZSBtYXRlcmlhbGl6ZWQgZW50ZXIgbm9kZSBiZWZvcmUgdGhpcyBub2RlLFxuICAgIC8vIHJhdGhlciB0aGFuIGF0IHRoZSBlbmQgb2YgdGhlIHBhcmVudCBub2RlLlxuICAgIGZvciAodmFyIGkwID0gMCwgaTEgPSAwLCBwcmV2aW91cywgbmV4dDsgaTAgPCBkYXRhTGVuZ3RoOyArK2kwKSB7XG4gICAgICBpZiAocHJldmlvdXMgPSBlbnRlckdyb3VwW2kwXSkge1xuICAgICAgICBpZiAoaTAgPj0gaTEpIGkxID0gaTAgKyAxO1xuICAgICAgICB3aGlsZSAoIShuZXh0ID0gdXBkYXRlR3JvdXBbaTFdKSAmJiArK2kxIDwgZGF0YUxlbmd0aCk7XG4gICAgICAgIHByZXZpb3VzLl9uZXh0ID0gbmV4dCB8fCBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHVwZGF0ZSA9IG5ldyBTZWxlY3Rpb24odXBkYXRlLCBwYXJlbnRzKTtcbiAgdXBkYXRlLl9lbnRlciA9IGVudGVyO1xuICB1cGRhdGUuX2V4aXQgPSBleGl0O1xuICByZXR1cm4gdXBkYXRlO1xufVxuXG4vLyBHaXZlbiBzb21lIGRhdGEsIHRoaXMgcmV0dXJucyBhbiBhcnJheS1saWtlIHZpZXcgb2YgaXQ6IGFuIG9iamVjdCB0aGF0XG4vLyBleHBvc2VzIGEgbGVuZ3RoIHByb3BlcnR5IGFuZCBhbGxvd3MgbnVtZXJpYyBpbmRleGluZy4gTm90ZSB0aGF0IHVubGlrZVxuLy8gc2VsZWN0QWxsLCB0aGlzIGlzblx1MjAxOXQgd29ycmllZCBhYm91dCBcdTIwMUNsaXZlXHUyMDFEIGNvbGxlY3Rpb25zIGJlY2F1c2UgdGhlIHJlc3VsdGluZ1xuLy8gYXJyYXkgd2lsbCBvbmx5IGJlIHVzZWQgYnJpZWZseSB3aGlsZSBkYXRhIGlzIGJlaW5nIGJvdW5kLiAoSXQgaXMgcG9zc2libGUgdG9cbi8vIGNhdXNlIHRoZSBkYXRhIHRvIGNoYW5nZSB3aGlsZSBpdGVyYXRpbmcgYnkgdXNpbmcgYSBrZXkgZnVuY3Rpb24sIGJ1dCBwbGVhc2Vcbi8vIGRvblx1MjAxOXQ7IHdlXHUyMDE5ZCByYXRoZXIgYXZvaWQgYSBncmF0dWl0b3VzIGNvcHkuKVxuZnVuY3Rpb24gYXJyYXlsaWtlKGRhdGEpIHtcbiAgcmV0dXJuIHR5cGVvZiBkYXRhID09PSBcIm9iamVjdFwiICYmIFwibGVuZ3RoXCIgaW4gZGF0YVxuICAgID8gZGF0YSAvLyBBcnJheSwgVHlwZWRBcnJheSwgTm9kZUxpc3QsIGFycmF5LWxpa2VcbiAgICA6IEFycmF5LmZyb20oZGF0YSk7IC8vIE1hcCwgU2V0LCBpdGVyYWJsZSwgc3RyaW5nLCBvciBhbnl0aGluZyBlbHNlXG59XG4iLCAiaW1wb3J0IHNwYXJzZSBmcm9tIFwiLi9zcGFyc2UuanNcIjtcbmltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24odGhpcy5fZXhpdCB8fCB0aGlzLl9ncm91cHMubWFwKHNwYXJzZSksIHRoaXMuX3BhcmVudHMpO1xufVxuIiwgImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG9uZW50ZXIsIG9udXBkYXRlLCBvbmV4aXQpIHtcbiAgdmFyIGVudGVyID0gdGhpcy5lbnRlcigpLCB1cGRhdGUgPSB0aGlzLCBleGl0ID0gdGhpcy5leGl0KCk7XG4gIGlmICh0eXBlb2Ygb25lbnRlciA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZW50ZXIgPSBvbmVudGVyKGVudGVyKTtcbiAgICBpZiAoZW50ZXIpIGVudGVyID0gZW50ZXIuc2VsZWN0aW9uKCk7XG4gIH0gZWxzZSB7XG4gICAgZW50ZXIgPSBlbnRlci5hcHBlbmQob25lbnRlciArIFwiXCIpO1xuICB9XG4gIGlmIChvbnVwZGF0ZSAhPSBudWxsKSB7XG4gICAgdXBkYXRlID0gb251cGRhdGUodXBkYXRlKTtcbiAgICBpZiAodXBkYXRlKSB1cGRhdGUgPSB1cGRhdGUuc2VsZWN0aW9uKCk7XG4gIH1cbiAgaWYgKG9uZXhpdCA9PSBudWxsKSBleGl0LnJlbW92ZSgpOyBlbHNlIG9uZXhpdChleGl0KTtcbiAgcmV0dXJuIGVudGVyICYmIHVwZGF0ZSA/IGVudGVyLm1lcmdlKHVwZGF0ZSkub3JkZXIoKSA6IHVwZGF0ZTtcbn1cbiIsICJpbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXguanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY29udGV4dCkge1xuICB2YXIgc2VsZWN0aW9uID0gY29udGV4dC5zZWxlY3Rpb24gPyBjb250ZXh0LnNlbGVjdGlvbigpIDogY29udGV4dDtcblxuICBmb3IgKHZhciBncm91cHMwID0gdGhpcy5fZ3JvdXBzLCBncm91cHMxID0gc2VsZWN0aW9uLl9ncm91cHMsIG0wID0gZ3JvdXBzMC5sZW5ndGgsIG0xID0gZ3JvdXBzMS5sZW5ndGgsIG0gPSBNYXRoLm1pbihtMCwgbTEpLCBtZXJnZXMgPSBuZXcgQXJyYXkobTApLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwMCA9IGdyb3VwczBbal0sIGdyb3VwMSA9IGdyb3VwczFbal0sIG4gPSBncm91cDAubGVuZ3RoLCBtZXJnZSA9IG1lcmdlc1tqXSA9IG5ldyBBcnJheShuKSwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXAwW2ldIHx8IGdyb3VwMVtpXSkge1xuICAgICAgICBtZXJnZVtpXSA9IG5vZGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZm9yICg7IGogPCBtMDsgKytqKSB7XG4gICAgbWVyZ2VzW2pdID0gZ3JvdXBzMFtqXTtcbiAgfVxuXG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKG1lcmdlcywgdGhpcy5fcGFyZW50cyk7XG59XG4iLCAiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBqID0gLTEsIG0gPSBncm91cHMubGVuZ3RoOyArK2ogPCBtOykge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBpID0gZ3JvdXAubGVuZ3RoIC0gMSwgbmV4dCA9IGdyb3VwW2ldLCBub2RlOyAtLWkgPj0gMDspIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgaWYgKG5leHQgJiYgbm9kZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihuZXh0KSBeIDQpIG5leHQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobm9kZSwgbmV4dCk7XG4gICAgICAgIG5leHQgPSBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuIiwgImltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjb21wYXJlKSB7XG4gIGlmICghY29tcGFyZSkgY29tcGFyZSA9IGFzY2VuZGluZztcblxuICBmdW5jdGlvbiBjb21wYXJlTm9kZShhLCBiKSB7XG4gICAgcmV0dXJuIGEgJiYgYiA/IGNvbXBhcmUoYS5fX2RhdGFfXywgYi5fX2RhdGFfXykgOiAhYSAtICFiO1xuICB9XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc29ydGdyb3VwcyA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgc29ydGdyb3VwID0gc29ydGdyb3Vwc1tqXSA9IG5ldyBBcnJheShuKSwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgc29ydGdyb3VwW2ldID0gbm9kZTtcbiAgICAgIH1cbiAgICB9XG4gICAgc29ydGdyb3VwLnNvcnQoY29tcGFyZU5vZGUpO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24oc29ydGdyb3VwcywgdGhpcy5fcGFyZW50cykub3JkZXIoKTtcbn1cblxuZnVuY3Rpb24gYXNjZW5kaW5nKGEsIGIpIHtcbiAgcmV0dXJuIGEgPCBiID8gLTEgOiBhID4gYiA/IDEgOiBhID49IGIgPyAwIDogTmFOO1xufVxuIiwgImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgY2FsbGJhY2sgPSBhcmd1bWVudHNbMF07XG4gIGFyZ3VtZW50c1swXSA9IHRoaXM7XG4gIGNhbGxiYWNrLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gIHJldHVybiB0aGlzO1xufVxuIiwgImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzKTtcbn1cbiIsICJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIGogPSAwLCBtID0gZ3JvdXBzLmxlbmd0aDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBpID0gMCwgbiA9IGdyb3VwLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgdmFyIG5vZGUgPSBncm91cFtpXTtcbiAgICAgIGlmIChub2RlKSByZXR1cm4gbm9kZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cbiIsICJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgbGV0IHNpemUgPSAwO1xuICBmb3IgKGNvbnN0IG5vZGUgb2YgdGhpcykgKytzaXplOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gIHJldHVybiBzaXplO1xufVxuIiwgImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gIXRoaXMubm9kZSgpO1xufVxuIiwgImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBqID0gMCwgbSA9IGdyb3Vwcy5sZW5ndGg7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgaSA9IDAsIG4gPSBncm91cC5sZW5ndGgsIG5vZGU7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIGNhbGxiYWNrLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuIiwgImltcG9ydCBuYW1lc3BhY2UgZnJvbSBcIi4uL25hbWVzcGFjZS5qc1wiO1xuXG5mdW5jdGlvbiBhdHRyUmVtb3ZlKG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyUmVtb3ZlTlMoZnVsbG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckNvbnN0YW50KG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJDb25zdGFudE5TKGZ1bGxuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwsIHZhbHVlKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHYgPT0gbnVsbCkgdGhpcy5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgZWxzZSB0aGlzLnNldEF0dHJpYnV0ZShuYW1lLCB2KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckZ1bmN0aW9uTlMoZnVsbG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHYgPT0gbnVsbCkgdGhpcy5yZW1vdmVBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICAgIGVsc2UgdGhpcy5zZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwsIHYpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICB2YXIgZnVsbG5hbWUgPSBuYW1lc3BhY2UobmFtZSk7XG5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgdmFyIG5vZGUgPSB0aGlzLm5vZGUoKTtcbiAgICByZXR1cm4gZnVsbG5hbWUubG9jYWxcbiAgICAgICAgPyBub2RlLmdldEF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbClcbiAgICAgICAgOiBub2RlLmdldEF0dHJpYnV0ZShmdWxsbmFtZSk7XG4gIH1cblxuICByZXR1cm4gdGhpcy5lYWNoKCh2YWx1ZSA9PSBudWxsXG4gICAgICA/IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJSZW1vdmVOUyA6IGF0dHJSZW1vdmUpIDogKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICA/IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJGdW5jdGlvbk5TIDogYXR0ckZ1bmN0aW9uKVxuICAgICAgOiAoZnVsbG5hbWUubG9jYWwgPyBhdHRyQ29uc3RhbnROUyA6IGF0dHJDb25zdGFudCkpKShmdWxsbmFtZSwgdmFsdWUpKTtcbn1cbiIsICJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihub2RlKSB7XG4gIHJldHVybiAobm9kZS5vd25lckRvY3VtZW50ICYmIG5vZGUub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldykgLy8gbm9kZSBpcyBhIE5vZGVcbiAgICAgIHx8IChub2RlLmRvY3VtZW50ICYmIG5vZGUpIC8vIG5vZGUgaXMgYSBXaW5kb3dcbiAgICAgIHx8IG5vZGUuZGVmYXVsdFZpZXc7IC8vIG5vZGUgaXMgYSBEb2N1bWVudFxufVxuIiwgImltcG9ydCBkZWZhdWx0VmlldyBmcm9tIFwiLi4vd2luZG93LmpzXCI7XG5cbmZ1bmN0aW9uIHN0eWxlUmVtb3ZlKG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuc3R5bGUucmVtb3ZlUHJvcGVydHkobmFtZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0eWxlQ29uc3RhbnQobmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIHZhbHVlLCBwcmlvcml0eSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0eWxlRnVuY3Rpb24obmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHYgPT0gbnVsbCkgdGhpcy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShuYW1lKTtcbiAgICBlbHNlIHRoaXMuc3R5bGUuc2V0UHJvcGVydHkobmFtZSwgdiwgcHJpb3JpdHkpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAxXG4gICAgICA/IHRoaXMuZWFjaCgodmFsdWUgPT0gbnVsbFxuICAgICAgICAgICAgPyBzdHlsZVJlbW92ZSA6IHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgICA/IHN0eWxlRnVuY3Rpb25cbiAgICAgICAgICAgIDogc3R5bGVDb25zdGFudCkobmFtZSwgdmFsdWUsIHByaW9yaXR5ID09IG51bGwgPyBcIlwiIDogcHJpb3JpdHkpKVxuICAgICAgOiBzdHlsZVZhbHVlKHRoaXMubm9kZSgpLCBuYW1lKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN0eWxlVmFsdWUobm9kZSwgbmFtZSkge1xuICByZXR1cm4gbm9kZS5zdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKG5hbWUpXG4gICAgICB8fCBkZWZhdWx0Vmlldyhub2RlKS5nZXRDb21wdXRlZFN0eWxlKG5vZGUsIG51bGwpLmdldFByb3BlcnR5VmFsdWUobmFtZSk7XG59XG4iLCAiZnVuY3Rpb24gcHJvcGVydHlSZW1vdmUobmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgZGVsZXRlIHRoaXNbbmFtZV07XG4gIH07XG59XG5cbmZ1bmN0aW9uIHByb3BlcnR5Q29uc3RhbnQobmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXNbbmFtZV0gPSB2YWx1ZTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gcHJvcGVydHlGdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmICh2ID09IG51bGwpIGRlbGV0ZSB0aGlzW25hbWVdO1xuICAgIGVsc2UgdGhpc1tuYW1lXSA9IHY7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMVxuICAgICAgPyB0aGlzLmVhY2goKHZhbHVlID09IG51bGxcbiAgICAgICAgICA/IHByb3BlcnR5UmVtb3ZlIDogdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICA/IHByb3BlcnR5RnVuY3Rpb25cbiAgICAgICAgICA6IHByb3BlcnR5Q29uc3RhbnQpKG5hbWUsIHZhbHVlKSlcbiAgICAgIDogdGhpcy5ub2RlKClbbmFtZV07XG59XG4iLCAiZnVuY3Rpb24gY2xhc3NBcnJheShzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy50cmltKCkuc3BsaXQoL158XFxzKy8pO1xufVxuXG5mdW5jdGlvbiBjbGFzc0xpc3Qobm9kZSkge1xuICByZXR1cm4gbm9kZS5jbGFzc0xpc3QgfHwgbmV3IENsYXNzTGlzdChub2RlKTtcbn1cblxuZnVuY3Rpb24gQ2xhc3NMaXN0KG5vZGUpIHtcbiAgdGhpcy5fbm9kZSA9IG5vZGU7XG4gIHRoaXMuX25hbWVzID0gY2xhc3NBcnJheShub2RlLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpIHx8IFwiXCIpO1xufVxuXG5DbGFzc0xpc3QucHJvdG90eXBlID0ge1xuICBhZGQ6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICB2YXIgaSA9IHRoaXMuX25hbWVzLmluZGV4T2YobmFtZSk7XG4gICAgaWYgKGkgPCAwKSB7XG4gICAgICB0aGlzLl9uYW1lcy5wdXNoKG5hbWUpO1xuICAgICAgdGhpcy5fbm9kZS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCB0aGlzLl9uYW1lcy5qb2luKFwiIFwiKSk7XG4gICAgfVxuICB9LFxuICByZW1vdmU6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICB2YXIgaSA9IHRoaXMuX25hbWVzLmluZGV4T2YobmFtZSk7XG4gICAgaWYgKGkgPj0gMCkge1xuICAgICAgdGhpcy5fbmFtZXMuc3BsaWNlKGksIDEpO1xuICAgICAgdGhpcy5fbm9kZS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCB0aGlzLl9uYW1lcy5qb2luKFwiIFwiKSk7XG4gICAgfVxuICB9LFxuICBjb250YWluczogZnVuY3Rpb24obmFtZSkge1xuICAgIHJldHVybiB0aGlzLl9uYW1lcy5pbmRleE9mKG5hbWUpID49IDA7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGNsYXNzZWRBZGQobm9kZSwgbmFtZXMpIHtcbiAgdmFyIGxpc3QgPSBjbGFzc0xpc3Qobm9kZSksIGkgPSAtMSwgbiA9IG5hbWVzLmxlbmd0aDtcbiAgd2hpbGUgKCsraSA8IG4pIGxpc3QuYWRkKG5hbWVzW2ldKTtcbn1cblxuZnVuY3Rpb24gY2xhc3NlZFJlbW92ZShub2RlLCBuYW1lcykge1xuICB2YXIgbGlzdCA9IGNsYXNzTGlzdChub2RlKSwgaSA9IC0xLCBuID0gbmFtZXMubGVuZ3RoO1xuICB3aGlsZSAoKytpIDwgbikgbGlzdC5yZW1vdmUobmFtZXNbaV0pO1xufVxuXG5mdW5jdGlvbiBjbGFzc2VkVHJ1ZShuYW1lcykge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgY2xhc3NlZEFkZCh0aGlzLCBuYW1lcyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNsYXNzZWRGYWxzZShuYW1lcykge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgY2xhc3NlZFJlbW92ZSh0aGlzLCBuYW1lcyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNsYXNzZWRGdW5jdGlvbihuYW1lcywgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICh2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpID8gY2xhc3NlZEFkZCA6IGNsYXNzZWRSZW1vdmUpKHRoaXMsIG5hbWVzKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgdmFyIG5hbWVzID0gY2xhc3NBcnJheShuYW1lICsgXCJcIik7XG5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgdmFyIGxpc3QgPSBjbGFzc0xpc3QodGhpcy5ub2RlKCkpLCBpID0gLTEsIG4gPSBuYW1lcy5sZW5ndGg7XG4gICAgd2hpbGUgKCsraSA8IG4pIGlmICghbGlzdC5jb250YWlucyhuYW1lc1tpXSkpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLmVhY2goKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICA/IGNsYXNzZWRGdW5jdGlvbiA6IHZhbHVlXG4gICAgICA/IGNsYXNzZWRUcnVlXG4gICAgICA6IGNsYXNzZWRGYWxzZSkobmFtZXMsIHZhbHVlKSk7XG59XG4iLCAiZnVuY3Rpb24gdGV4dFJlbW92ZSgpIHtcbiAgdGhpcy50ZXh0Q29udGVudCA9IFwiXCI7XG59XG5cbmZ1bmN0aW9uIHRleHRDb25zdGFudCh2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xuICB9O1xufVxuXG5mdW5jdGlvbiB0ZXh0RnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB0aGlzLnRleHRDb250ZW50ID0gdiA9PSBudWxsID8gXCJcIiA6IHY7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMuZWFjaCh2YWx1ZSA9PSBudWxsXG4gICAgICAgICAgPyB0ZXh0UmVtb3ZlIDogKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgPyB0ZXh0RnVuY3Rpb25cbiAgICAgICAgICA6IHRleHRDb25zdGFudCkodmFsdWUpKVxuICAgICAgOiB0aGlzLm5vZGUoKS50ZXh0Q29udGVudDtcbn1cbiIsICJmdW5jdGlvbiBodG1sUmVtb3ZlKCkge1xuICB0aGlzLmlubmVySFRNTCA9IFwiXCI7XG59XG5cbmZ1bmN0aW9uIGh0bWxDb25zdGFudCh2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5pbm5lckhUTUwgPSB2YWx1ZTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gaHRtbEZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgdGhpcy5pbm5lckhUTUwgPSB2ID09IG51bGwgPyBcIlwiIDogdjtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgID8gdGhpcy5lYWNoKHZhbHVlID09IG51bGxcbiAgICAgICAgICA/IGh0bWxSZW1vdmUgOiAodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICA/IGh0bWxGdW5jdGlvblxuICAgICAgICAgIDogaHRtbENvbnN0YW50KSh2YWx1ZSkpXG4gICAgICA6IHRoaXMubm9kZSgpLmlubmVySFRNTDtcbn1cbiIsICJmdW5jdGlvbiByYWlzZSgpIHtcbiAgaWYgKHRoaXMubmV4dFNpYmxpbmcpIHRoaXMucGFyZW50Tm9kZS5hcHBlbmRDaGlsZCh0aGlzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmVhY2gocmFpc2UpO1xufVxuIiwgImZ1bmN0aW9uIGxvd2VyKCkge1xuICBpZiAodGhpcy5wcmV2aW91c1NpYmxpbmcpIHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpcywgdGhpcy5wYXJlbnROb2RlLmZpcnN0Q2hpbGQpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaChsb3dlcik7XG59XG4iLCAiaW1wb3J0IGNyZWF0b3IgZnJvbSBcIi4uL2NyZWF0b3IuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSkge1xuICB2YXIgY3JlYXRlID0gdHlwZW9mIG5hbWUgPT09IFwiZnVuY3Rpb25cIiA/IG5hbWUgOiBjcmVhdG9yKG5hbWUpO1xuICByZXR1cm4gdGhpcy5zZWxlY3QoZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuYXBwZW5kQ2hpbGQoY3JlYXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9KTtcbn1cbiIsICJpbXBvcnQgY3JlYXRvciBmcm9tIFwiLi4vY3JlYXRvci5qc1wiO1xuaW1wb3J0IHNlbGVjdG9yIGZyb20gXCIuLi9zZWxlY3Rvci5qc1wiO1xuXG5mdW5jdGlvbiBjb25zdGFudE51bGwoKSB7XG4gIHJldHVybiBudWxsO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCBiZWZvcmUpIHtcbiAgdmFyIGNyZWF0ZSA9IHR5cGVvZiBuYW1lID09PSBcImZ1bmN0aW9uXCIgPyBuYW1lIDogY3JlYXRvcihuYW1lKSxcbiAgICAgIHNlbGVjdCA9IGJlZm9yZSA9PSBudWxsID8gY29uc3RhbnROdWxsIDogdHlwZW9mIGJlZm9yZSA9PT0gXCJmdW5jdGlvblwiID8gYmVmb3JlIDogc2VsZWN0b3IoYmVmb3JlKTtcbiAgcmV0dXJuIHRoaXMuc2VsZWN0KGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmluc2VydEJlZm9yZShjcmVhdGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSwgc2VsZWN0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgbnVsbCk7XG4gIH0pO1xufVxuIiwgImZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgdmFyIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcbiAgaWYgKHBhcmVudCkgcGFyZW50LnJlbW92ZUNoaWxkKHRoaXMpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaChyZW1vdmUpO1xufVxuIiwgImZ1bmN0aW9uIHNlbGVjdGlvbl9jbG9uZVNoYWxsb3coKSB7XG4gIHZhciBjbG9uZSA9IHRoaXMuY2xvbmVOb2RlKGZhbHNlKSwgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xuICByZXR1cm4gcGFyZW50ID8gcGFyZW50Lmluc2VydEJlZm9yZShjbG9uZSwgdGhpcy5uZXh0U2libGluZykgOiBjbG9uZTtcbn1cblxuZnVuY3Rpb24gc2VsZWN0aW9uX2Nsb25lRGVlcCgpIHtcbiAgdmFyIGNsb25lID0gdGhpcy5jbG9uZU5vZGUodHJ1ZSksIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcbiAgcmV0dXJuIHBhcmVudCA/IHBhcmVudC5pbnNlcnRCZWZvcmUoY2xvbmUsIHRoaXMubmV4dFNpYmxpbmcpIDogY2xvbmU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGRlZXApIHtcbiAgcmV0dXJuIHRoaXMuc2VsZWN0KGRlZXAgPyBzZWxlY3Rpb25fY2xvbmVEZWVwIDogc2VsZWN0aW9uX2Nsb25lU2hhbGxvdyk7XG59XG4iLCAiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgID8gdGhpcy5wcm9wZXJ0eShcIl9fZGF0YV9fXCIsIHZhbHVlKVxuICAgICAgOiB0aGlzLm5vZGUoKS5fX2RhdGFfXztcbn1cbiIsICJmdW5jdGlvbiBjb250ZXh0TGlzdGVuZXIobGlzdGVuZXIpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgbGlzdGVuZXIuY2FsbCh0aGlzLCBldmVudCwgdGhpcy5fX2RhdGFfXyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHBhcnNlVHlwZW5hbWVzKHR5cGVuYW1lcykge1xuICByZXR1cm4gdHlwZW5hbWVzLnRyaW0oKS5zcGxpdCgvXnxcXHMrLykubWFwKGZ1bmN0aW9uKHQpIHtcbiAgICB2YXIgbmFtZSA9IFwiXCIsIGkgPSB0LmluZGV4T2YoXCIuXCIpO1xuICAgIGlmIChpID49IDApIG5hbWUgPSB0LnNsaWNlKGkgKyAxKSwgdCA9IHQuc2xpY2UoMCwgaSk7XG4gICAgcmV0dXJuIHt0eXBlOiB0LCBuYW1lOiBuYW1lfTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIG9uUmVtb3ZlKHR5cGVuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgb24gPSB0aGlzLl9fb247XG4gICAgaWYgKCFvbikgcmV0dXJuO1xuICAgIGZvciAodmFyIGogPSAwLCBpID0gLTEsIG0gPSBvbi5sZW5ndGgsIG87IGogPCBtOyArK2opIHtcbiAgICAgIGlmIChvID0gb25bal0sICghdHlwZW5hbWUudHlwZSB8fCBvLnR5cGUgPT09IHR5cGVuYW1lLnR5cGUpICYmIG8ubmFtZSA9PT0gdHlwZW5hbWUubmFtZSkge1xuICAgICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoby50eXBlLCBvLmxpc3RlbmVyLCBvLm9wdGlvbnMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb25bKytpXSA9IG87XG4gICAgICB9XG4gICAgfVxuICAgIGlmICgrK2kpIG9uLmxlbmd0aCA9IGk7XG4gICAgZWxzZSBkZWxldGUgdGhpcy5fX29uO1xuICB9O1xufVxuXG5mdW5jdGlvbiBvbkFkZCh0eXBlbmFtZSwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBvbiA9IHRoaXMuX19vbiwgbywgbGlzdGVuZXIgPSBjb250ZXh0TGlzdGVuZXIodmFsdWUpO1xuICAgIGlmIChvbikgZm9yICh2YXIgaiA9IDAsIG0gPSBvbi5sZW5ndGg7IGogPCBtOyArK2opIHtcbiAgICAgIGlmICgobyA9IG9uW2pdKS50eXBlID09PSB0eXBlbmFtZS50eXBlICYmIG8ubmFtZSA9PT0gdHlwZW5hbWUubmFtZSkge1xuICAgICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoby50eXBlLCBvLmxpc3RlbmVyLCBvLm9wdGlvbnMpO1xuICAgICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoby50eXBlLCBvLmxpc3RlbmVyID0gbGlzdGVuZXIsIG8ub3B0aW9ucyA9IG9wdGlvbnMpO1xuICAgICAgICBvLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKHR5cGVuYW1lLnR5cGUsIGxpc3RlbmVyLCBvcHRpb25zKTtcbiAgICBvID0ge3R5cGU6IHR5cGVuYW1lLnR5cGUsIG5hbWU6IHR5cGVuYW1lLm5hbWUsIHZhbHVlOiB2YWx1ZSwgbGlzdGVuZXI6IGxpc3RlbmVyLCBvcHRpb25zOiBvcHRpb25zfTtcbiAgICBpZiAoIW9uKSB0aGlzLl9fb24gPSBbb107XG4gICAgZWxzZSBvbi5wdXNoKG8pO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih0eXBlbmFtZSwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgdmFyIHR5cGVuYW1lcyA9IHBhcnNlVHlwZW5hbWVzKHR5cGVuYW1lICsgXCJcIiksIGksIG4gPSB0eXBlbmFtZXMubGVuZ3RoLCB0O1xuXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgIHZhciBvbiA9IHRoaXMubm9kZSgpLl9fb247XG4gICAgaWYgKG9uKSBmb3IgKHZhciBqID0gMCwgbSA9IG9uLmxlbmd0aCwgbzsgaiA8IG07ICsraikge1xuICAgICAgZm9yIChpID0gMCwgbyA9IG9uW2pdOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGlmICgodCA9IHR5cGVuYW1lc1tpXSkudHlwZSA9PT0gby50eXBlICYmIHQubmFtZSA9PT0gby5uYW1lKSB7XG4gICAgICAgICAgcmV0dXJuIG8udmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgb24gPSB2YWx1ZSA/IG9uQWRkIDogb25SZW1vdmU7XG4gIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHRoaXMuZWFjaChvbih0eXBlbmFtZXNbaV0sIHZhbHVlLCBvcHRpb25zKSk7XG4gIHJldHVybiB0aGlzO1xufVxuIiwgImltcG9ydCBkZWZhdWx0VmlldyBmcm9tIFwiLi4vd2luZG93LmpzXCI7XG5cbmZ1bmN0aW9uIGRpc3BhdGNoRXZlbnQobm9kZSwgdHlwZSwgcGFyYW1zKSB7XG4gIHZhciB3aW5kb3cgPSBkZWZhdWx0Vmlldyhub2RlKSxcbiAgICAgIGV2ZW50ID0gd2luZG93LkN1c3RvbUV2ZW50O1xuXG4gIGlmICh0eXBlb2YgZXZlbnQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGV2ZW50ID0gbmV3IGV2ZW50KHR5cGUsIHBhcmFtcyk7XG4gIH0gZWxzZSB7XG4gICAgZXZlbnQgPSB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRXZlbnQoXCJFdmVudFwiKTtcbiAgICBpZiAocGFyYW1zKSBldmVudC5pbml0RXZlbnQodHlwZSwgcGFyYW1zLmJ1YmJsZXMsIHBhcmFtcy5jYW5jZWxhYmxlKSwgZXZlbnQuZGV0YWlsID0gcGFyYW1zLmRldGFpbDtcbiAgICBlbHNlIGV2ZW50LmluaXRFdmVudCh0eXBlLCBmYWxzZSwgZmFsc2UpO1xuICB9XG5cbiAgbm9kZS5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbn1cblxuZnVuY3Rpb24gZGlzcGF0Y2hDb25zdGFudCh0eXBlLCBwYXJhbXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkaXNwYXRjaEV2ZW50KHRoaXMsIHR5cGUsIHBhcmFtcyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGRpc3BhdGNoRnVuY3Rpb24odHlwZSwgcGFyYW1zKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZGlzcGF0Y2hFdmVudCh0aGlzLCB0eXBlLCBwYXJhbXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHR5cGUsIHBhcmFtcykge1xuICByZXR1cm4gdGhpcy5lYWNoKCh0eXBlb2YgcGFyYW1zID09PSBcImZ1bmN0aW9uXCJcbiAgICAgID8gZGlzcGF0Y2hGdW5jdGlvblxuICAgICAgOiBkaXNwYXRjaENvbnN0YW50KSh0eXBlLCBwYXJhbXMpKTtcbn1cbiIsICJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiooKSB7XG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgaiA9IDAsIG0gPSBncm91cHMubGVuZ3RoOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIGkgPSAwLCBuID0gZ3JvdXAubGVuZ3RoLCBub2RlOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB5aWVsZCBub2RlO1xuICAgIH1cbiAgfVxufVxuIiwgImltcG9ydCBzZWxlY3Rpb25fc2VsZWN0IGZyb20gXCIuL3NlbGVjdC5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9zZWxlY3RBbGwgZnJvbSBcIi4vc2VsZWN0QWxsLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX3NlbGVjdENoaWxkIGZyb20gXCIuL3NlbGVjdENoaWxkLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX3NlbGVjdENoaWxkcmVuIGZyb20gXCIuL3NlbGVjdENoaWxkcmVuLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2ZpbHRlciBmcm9tIFwiLi9maWx0ZXIuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fZGF0YSBmcm9tIFwiLi9kYXRhLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2VudGVyIGZyb20gXCIuL2VudGVyLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2V4aXQgZnJvbSBcIi4vZXhpdC5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9qb2luIGZyb20gXCIuL2pvaW4uanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fbWVyZ2UgZnJvbSBcIi4vbWVyZ2UuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fb3JkZXIgZnJvbSBcIi4vb3JkZXIuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fc29ydCBmcm9tIFwiLi9zb3J0LmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2NhbGwgZnJvbSBcIi4vY2FsbC5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9ub2RlcyBmcm9tIFwiLi9ub2Rlcy5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9ub2RlIGZyb20gXCIuL25vZGUuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fc2l6ZSBmcm9tIFwiLi9zaXplLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2VtcHR5IGZyb20gXCIuL2VtcHR5LmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2VhY2ggZnJvbSBcIi4vZWFjaC5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9hdHRyIGZyb20gXCIuL2F0dHIuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fc3R5bGUgZnJvbSBcIi4vc3R5bGUuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fcHJvcGVydHkgZnJvbSBcIi4vcHJvcGVydHkuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fY2xhc3NlZCBmcm9tIFwiLi9jbGFzc2VkLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX3RleHQgZnJvbSBcIi4vdGV4dC5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9odG1sIGZyb20gXCIuL2h0bWwuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fcmFpc2UgZnJvbSBcIi4vcmFpc2UuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fbG93ZXIgZnJvbSBcIi4vbG93ZXIuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fYXBwZW5kIGZyb20gXCIuL2FwcGVuZC5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9pbnNlcnQgZnJvbSBcIi4vaW5zZXJ0LmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX3JlbW92ZSBmcm9tIFwiLi9yZW1vdmUuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fY2xvbmUgZnJvbSBcIi4vY2xvbmUuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fZGF0dW0gZnJvbSBcIi4vZGF0dW0uanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fb24gZnJvbSBcIi4vb24uanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fZGlzcGF0Y2ggZnJvbSBcIi4vZGlzcGF0Y2guanNcIjtcbmltcG9ydCBzZWxlY3Rpb25faXRlcmF0b3IgZnJvbSBcIi4vaXRlcmF0b3IuanNcIjtcblxuZXhwb3J0IHZhciByb290ID0gW251bGxdO1xuXG5leHBvcnQgZnVuY3Rpb24gU2VsZWN0aW9uKGdyb3VwcywgcGFyZW50cykge1xuICB0aGlzLl9ncm91cHMgPSBncm91cHM7XG4gIHRoaXMuX3BhcmVudHMgPSBwYXJlbnRzO1xufVxuXG5mdW5jdGlvbiBzZWxlY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKFtbZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50XV0sIHJvb3QpO1xufVxuXG5mdW5jdGlvbiBzZWxlY3Rpb25fc2VsZWN0aW9uKCkge1xuICByZXR1cm4gdGhpcztcbn1cblxuU2VsZWN0aW9uLnByb3RvdHlwZSA9IHNlbGVjdGlvbi5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBTZWxlY3Rpb24sXG4gIHNlbGVjdDogc2VsZWN0aW9uX3NlbGVjdCxcbiAgc2VsZWN0QWxsOiBzZWxlY3Rpb25fc2VsZWN0QWxsLFxuICBzZWxlY3RDaGlsZDogc2VsZWN0aW9uX3NlbGVjdENoaWxkLFxuICBzZWxlY3RDaGlsZHJlbjogc2VsZWN0aW9uX3NlbGVjdENoaWxkcmVuLFxuICBmaWx0ZXI6IHNlbGVjdGlvbl9maWx0ZXIsXG4gIGRhdGE6IHNlbGVjdGlvbl9kYXRhLFxuICBlbnRlcjogc2VsZWN0aW9uX2VudGVyLFxuICBleGl0OiBzZWxlY3Rpb25fZXhpdCxcbiAgam9pbjogc2VsZWN0aW9uX2pvaW4sXG4gIG1lcmdlOiBzZWxlY3Rpb25fbWVyZ2UsXG4gIHNlbGVjdGlvbjogc2VsZWN0aW9uX3NlbGVjdGlvbixcbiAgb3JkZXI6IHNlbGVjdGlvbl9vcmRlcixcbiAgc29ydDogc2VsZWN0aW9uX3NvcnQsXG4gIGNhbGw6IHNlbGVjdGlvbl9jYWxsLFxuICBub2Rlczogc2VsZWN0aW9uX25vZGVzLFxuICBub2RlOiBzZWxlY3Rpb25fbm9kZSxcbiAgc2l6ZTogc2VsZWN0aW9uX3NpemUsXG4gIGVtcHR5OiBzZWxlY3Rpb25fZW1wdHksXG4gIGVhY2g6IHNlbGVjdGlvbl9lYWNoLFxuICBhdHRyOiBzZWxlY3Rpb25fYXR0cixcbiAgc3R5bGU6IHNlbGVjdGlvbl9zdHlsZSxcbiAgcHJvcGVydHk6IHNlbGVjdGlvbl9wcm9wZXJ0eSxcbiAgY2xhc3NlZDogc2VsZWN0aW9uX2NsYXNzZWQsXG4gIHRleHQ6IHNlbGVjdGlvbl90ZXh0LFxuICBodG1sOiBzZWxlY3Rpb25faHRtbCxcbiAgcmFpc2U6IHNlbGVjdGlvbl9yYWlzZSxcbiAgbG93ZXI6IHNlbGVjdGlvbl9sb3dlcixcbiAgYXBwZW5kOiBzZWxlY3Rpb25fYXBwZW5kLFxuICBpbnNlcnQ6IHNlbGVjdGlvbl9pbnNlcnQsXG4gIHJlbW92ZTogc2VsZWN0aW9uX3JlbW92ZSxcbiAgY2xvbmU6IHNlbGVjdGlvbl9jbG9uZSxcbiAgZGF0dW06IHNlbGVjdGlvbl9kYXR1bSxcbiAgb246IHNlbGVjdGlvbl9vbixcbiAgZGlzcGF0Y2g6IHNlbGVjdGlvbl9kaXNwYXRjaCxcbiAgW1N5bWJvbC5pdGVyYXRvcl06IHNlbGVjdGlvbl9pdGVyYXRvclxufTtcblxuZXhwb3J0IGRlZmF1bHQgc2VsZWN0aW9uO1xuIiwgImltcG9ydCB7U2VsZWN0aW9uLCByb290fSBmcm9tIFwiLi9zZWxlY3Rpb24vaW5kZXguanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgcmV0dXJuIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIlxuICAgICAgPyBuZXcgU2VsZWN0aW9uKFtbZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3RvcildXSwgW2RvY3VtZW50LmRvY3VtZW50RWxlbWVudF0pXG4gICAgICA6IG5ldyBTZWxlY3Rpb24oW1tzZWxlY3Rvcl1dLCByb290KTtcbn1cbiIsICJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihldmVudCkge1xuICBsZXQgc291cmNlRXZlbnQ7XG4gIHdoaWxlIChzb3VyY2VFdmVudCA9IGV2ZW50LnNvdXJjZUV2ZW50KSBldmVudCA9IHNvdXJjZUV2ZW50O1xuICByZXR1cm4gZXZlbnQ7XG59XG4iLCAiaW1wb3J0IHNvdXJjZUV2ZW50IGZyb20gXCIuL3NvdXJjZUV2ZW50LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGV2ZW50LCBub2RlKSB7XG4gIGV2ZW50ID0gc291cmNlRXZlbnQoZXZlbnQpO1xuICBpZiAobm9kZSA9PT0gdW5kZWZpbmVkKSBub2RlID0gZXZlbnQuY3VycmVudFRhcmdldDtcbiAgaWYgKG5vZGUpIHtcbiAgICB2YXIgc3ZnID0gbm9kZS5vd25lclNWR0VsZW1lbnQgfHwgbm9kZTtcbiAgICBpZiAoc3ZnLmNyZWF0ZVNWR1BvaW50KSB7XG4gICAgICB2YXIgcG9pbnQgPSBzdmcuY3JlYXRlU1ZHUG9pbnQoKTtcbiAgICAgIHBvaW50LnggPSBldmVudC5jbGllbnRYLCBwb2ludC55ID0gZXZlbnQuY2xpZW50WTtcbiAgICAgIHBvaW50ID0gcG9pbnQubWF0cml4VHJhbnNmb3JtKG5vZGUuZ2V0U2NyZWVuQ1RNKCkuaW52ZXJzZSgpKTtcbiAgICAgIHJldHVybiBbcG9pbnQueCwgcG9pbnQueV07XG4gICAgfVxuICAgIGlmIChub2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCkge1xuICAgICAgdmFyIHJlY3QgPSBub2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgcmV0dXJuIFtldmVudC5jbGllbnRYIC0gcmVjdC5sZWZ0IC0gbm9kZS5jbGllbnRMZWZ0LCBldmVudC5jbGllbnRZIC0gcmVjdC50b3AgLSBub2RlLmNsaWVudFRvcF07XG4gICAgfVxuICB9XG4gIHJldHVybiBbZXZlbnQucGFnZVgsIGV2ZW50LnBhZ2VZXTtcbn1cbiIsICIvLyBUaGVzZSBhcmUgdHlwaWNhbGx5IHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCBub2V2ZW50IHRvIGVuc3VyZSB0aGF0IHdlIGNhblxuLy8gcHJldmVudERlZmF1bHQgb24gdGhlIGV2ZW50LlxuZXhwb3J0IGNvbnN0IG5vbnBhc3NpdmUgPSB7cGFzc2l2ZTogZmFsc2V9O1xuZXhwb3J0IGNvbnN0IG5vbnBhc3NpdmVjYXB0dXJlID0ge2NhcHR1cmU6IHRydWUsIHBhc3NpdmU6IGZhbHNlfTtcblxuZXhwb3J0IGZ1bmN0aW9uIG5vcHJvcGFnYXRpb24oZXZlbnQpIHtcbiAgZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGV2ZW50KSB7XG4gIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xufVxuIiwgImltcG9ydCB7c2VsZWN0fSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQgbm9ldmVudCwge25vbnBhc3NpdmVjYXB0dXJlfSBmcm9tIFwiLi9ub2V2ZW50LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZpZXcpIHtcbiAgdmFyIHJvb3QgPSB2aWV3LmRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxcbiAgICAgIHNlbGVjdGlvbiA9IHNlbGVjdCh2aWV3KS5vbihcImRyYWdzdGFydC5kcmFnXCIsIG5vZXZlbnQsIG5vbnBhc3NpdmVjYXB0dXJlKTtcbiAgaWYgKFwib25zZWxlY3RzdGFydFwiIGluIHJvb3QpIHtcbiAgICBzZWxlY3Rpb24ub24oXCJzZWxlY3RzdGFydC5kcmFnXCIsIG5vZXZlbnQsIG5vbnBhc3NpdmVjYXB0dXJlKTtcbiAgfSBlbHNlIHtcbiAgICByb290Ll9fbm9zZWxlY3QgPSByb290LnN0eWxlLk1velVzZXJTZWxlY3Q7XG4gICAgcm9vdC5zdHlsZS5Nb3pVc2VyU2VsZWN0ID0gXCJub25lXCI7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHllc2RyYWcodmlldywgbm9jbGljaykge1xuICB2YXIgcm9vdCA9IHZpZXcuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LFxuICAgICAgc2VsZWN0aW9uID0gc2VsZWN0KHZpZXcpLm9uKFwiZHJhZ3N0YXJ0LmRyYWdcIiwgbnVsbCk7XG4gIGlmIChub2NsaWNrKSB7XG4gICAgc2VsZWN0aW9uLm9uKFwiY2xpY2suZHJhZ1wiLCBub2V2ZW50LCBub25wYXNzaXZlY2FwdHVyZSk7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbigpIHsgc2VsZWN0aW9uLm9uKFwiY2xpY2suZHJhZ1wiLCBudWxsKTsgfSwgMCk7XG4gIH1cbiAgaWYgKFwib25zZWxlY3RzdGFydFwiIGluIHJvb3QpIHtcbiAgICBzZWxlY3Rpb24ub24oXCJzZWxlY3RzdGFydC5kcmFnXCIsIG51bGwpO1xuICB9IGVsc2Uge1xuICAgIHJvb3Quc3R5bGUuTW96VXNlclNlbGVjdCA9IHJvb3QuX19ub3NlbGVjdDtcbiAgICBkZWxldGUgcm9vdC5fX25vc2VsZWN0O1xuICB9XG59XG4iLCAiZXhwb3J0IGRlZmF1bHQgeCA9PiAoKSA9PiB4O1xuIiwgImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIERyYWdFdmVudCh0eXBlLCB7XG4gIHNvdXJjZUV2ZW50LFxuICBzdWJqZWN0LFxuICB0YXJnZXQsXG4gIGlkZW50aWZpZXIsXG4gIGFjdGl2ZSxcbiAgeCwgeSwgZHgsIGR5LFxuICBkaXNwYXRjaFxufSkge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0aGlzLCB7XG4gICAgdHlwZToge3ZhbHVlOiB0eXBlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWV9LFxuICAgIHNvdXJjZUV2ZW50OiB7dmFsdWU6IHNvdXJjZUV2ZW50LCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWV9LFxuICAgIHN1YmplY3Q6IHt2YWx1ZTogc3ViamVjdCwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlfSxcbiAgICB0YXJnZXQ6IHt2YWx1ZTogdGFyZ2V0LCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWV9LFxuICAgIGlkZW50aWZpZXI6IHt2YWx1ZTogaWRlbnRpZmllciwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlfSxcbiAgICBhY3RpdmU6IHt2YWx1ZTogYWN0aXZlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWV9LFxuICAgIHg6IHt2YWx1ZTogeCwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlfSxcbiAgICB5OiB7dmFsdWU6IHksIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZX0sXG4gICAgZHg6IHt2YWx1ZTogZHgsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZX0sXG4gICAgZHk6IHt2YWx1ZTogZHksIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZX0sXG4gICAgXzoge3ZhbHVlOiBkaXNwYXRjaH1cbiAgfSk7XG59XG5cbkRyYWdFdmVudC5wcm90b3R5cGUub24gPSBmdW5jdGlvbigpIHtcbiAgdmFyIHZhbHVlID0gdGhpcy5fLm9uLmFwcGx5KHRoaXMuXywgYXJndW1lbnRzKTtcbiAgcmV0dXJuIHZhbHVlID09PSB0aGlzLl8gPyB0aGlzIDogdmFsdWU7XG59O1xuIiwgImltcG9ydCB7ZGlzcGF0Y2h9IGZyb20gXCJkMy1kaXNwYXRjaFwiO1xuaW1wb3J0IHtzZWxlY3QsIHBvaW50ZXJ9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCBub2RyYWcsIHt5ZXNkcmFnfSBmcm9tIFwiLi9ub2RyYWcuanNcIjtcbmltcG9ydCBub2V2ZW50LCB7bm9ucGFzc2l2ZSwgbm9ucGFzc2l2ZWNhcHR1cmUsIG5vcHJvcGFnYXRpb259IGZyb20gXCIuL25vZXZlbnQuanNcIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudC5qc1wiO1xuaW1wb3J0IERyYWdFdmVudCBmcm9tIFwiLi9ldmVudC5qc1wiO1xuXG4vLyBJZ25vcmUgcmlnaHQtY2xpY2ssIHNpbmNlIHRoYXQgc2hvdWxkIG9wZW4gdGhlIGNvbnRleHQgbWVudS5cbmZ1bmN0aW9uIGRlZmF1bHRGaWx0ZXIoZXZlbnQpIHtcbiAgcmV0dXJuICFldmVudC5jdHJsS2V5ICYmICFldmVudC5idXR0b247XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRDb250YWluZXIoKSB7XG4gIHJldHVybiB0aGlzLnBhcmVudE5vZGU7XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRTdWJqZWN0KGV2ZW50LCBkKSB7XG4gIHJldHVybiBkID09IG51bGwgPyB7eDogZXZlbnQueCwgeTogZXZlbnQueX0gOiBkO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0VG91Y2hhYmxlKCkge1xuICByZXR1cm4gbmF2aWdhdG9yLm1heFRvdWNoUG9pbnRzIHx8IChcIm9udG91Y2hzdGFydFwiIGluIHRoaXMpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIGZpbHRlciA9IGRlZmF1bHRGaWx0ZXIsXG4gICAgICBjb250YWluZXIgPSBkZWZhdWx0Q29udGFpbmVyLFxuICAgICAgc3ViamVjdCA9IGRlZmF1bHRTdWJqZWN0LFxuICAgICAgdG91Y2hhYmxlID0gZGVmYXVsdFRvdWNoYWJsZSxcbiAgICAgIGdlc3R1cmVzID0ge30sXG4gICAgICBsaXN0ZW5lcnMgPSBkaXNwYXRjaChcInN0YXJ0XCIsIFwiZHJhZ1wiLCBcImVuZFwiKSxcbiAgICAgIGFjdGl2ZSA9IDAsXG4gICAgICBtb3VzZWRvd254LFxuICAgICAgbW91c2Vkb3dueSxcbiAgICAgIG1vdXNlbW92aW5nLFxuICAgICAgdG91Y2hlbmRpbmcsXG4gICAgICBjbGlja0Rpc3RhbmNlMiA9IDA7XG5cbiAgZnVuY3Rpb24gZHJhZyhzZWxlY3Rpb24pIHtcbiAgICBzZWxlY3Rpb25cbiAgICAgICAgLm9uKFwibW91c2Vkb3duLmRyYWdcIiwgbW91c2Vkb3duZWQpXG4gICAgICAuZmlsdGVyKHRvdWNoYWJsZSlcbiAgICAgICAgLm9uKFwidG91Y2hzdGFydC5kcmFnXCIsIHRvdWNoc3RhcnRlZClcbiAgICAgICAgLm9uKFwidG91Y2htb3ZlLmRyYWdcIiwgdG91Y2htb3ZlZCwgbm9ucGFzc2l2ZSlcbiAgICAgICAgLm9uKFwidG91Y2hlbmQuZHJhZyB0b3VjaGNhbmNlbC5kcmFnXCIsIHRvdWNoZW5kZWQpXG4gICAgICAgIC5zdHlsZShcInRvdWNoLWFjdGlvblwiLCBcIm5vbmVcIilcbiAgICAgICAgLnN0eWxlKFwiLXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yXCIsIFwicmdiYSgwLDAsMCwwKVwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1vdXNlZG93bmVkKGV2ZW50LCBkKSB7XG4gICAgaWYgKHRvdWNoZW5kaW5nIHx8ICFmaWx0ZXIuY2FsbCh0aGlzLCBldmVudCwgZCkpIHJldHVybjtcbiAgICB2YXIgZ2VzdHVyZSA9IGJlZm9yZXN0YXJ0KHRoaXMsIGNvbnRhaW5lci5jYWxsKHRoaXMsIGV2ZW50LCBkKSwgZXZlbnQsIGQsIFwibW91c2VcIik7XG4gICAgaWYgKCFnZXN0dXJlKSByZXR1cm47XG4gICAgc2VsZWN0KGV2ZW50LnZpZXcpXG4gICAgICAub24oXCJtb3VzZW1vdmUuZHJhZ1wiLCBtb3VzZW1vdmVkLCBub25wYXNzaXZlY2FwdHVyZSlcbiAgICAgIC5vbihcIm1vdXNldXAuZHJhZ1wiLCBtb3VzZXVwcGVkLCBub25wYXNzaXZlY2FwdHVyZSk7XG4gICAgbm9kcmFnKGV2ZW50LnZpZXcpO1xuICAgIG5vcHJvcGFnYXRpb24oZXZlbnQpO1xuICAgIG1vdXNlbW92aW5nID0gZmFsc2U7XG4gICAgbW91c2Vkb3dueCA9IGV2ZW50LmNsaWVudFg7XG4gICAgbW91c2Vkb3dueSA9IGV2ZW50LmNsaWVudFk7XG4gICAgZ2VzdHVyZShcInN0YXJ0XCIsIGV2ZW50KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1vdXNlbW92ZWQoZXZlbnQpIHtcbiAgICBub2V2ZW50KGV2ZW50KTtcbiAgICBpZiAoIW1vdXNlbW92aW5nKSB7XG4gICAgICB2YXIgZHggPSBldmVudC5jbGllbnRYIC0gbW91c2Vkb3dueCwgZHkgPSBldmVudC5jbGllbnRZIC0gbW91c2Vkb3dueTtcbiAgICAgIG1vdXNlbW92aW5nID0gZHggKiBkeCArIGR5ICogZHkgPiBjbGlja0Rpc3RhbmNlMjtcbiAgICB9XG4gICAgZ2VzdHVyZXMubW91c2UoXCJkcmFnXCIsIGV2ZW50KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1vdXNldXBwZWQoZXZlbnQpIHtcbiAgICBzZWxlY3QoZXZlbnQudmlldykub24oXCJtb3VzZW1vdmUuZHJhZyBtb3VzZXVwLmRyYWdcIiwgbnVsbCk7XG4gICAgeWVzZHJhZyhldmVudC52aWV3LCBtb3VzZW1vdmluZyk7XG4gICAgbm9ldmVudChldmVudCk7XG4gICAgZ2VzdHVyZXMubW91c2UoXCJlbmRcIiwgZXZlbnQpO1xuICB9XG5cbiAgZnVuY3Rpb24gdG91Y2hzdGFydGVkKGV2ZW50LCBkKSB7XG4gICAgaWYgKCFmaWx0ZXIuY2FsbCh0aGlzLCBldmVudCwgZCkpIHJldHVybjtcbiAgICB2YXIgdG91Y2hlcyA9IGV2ZW50LmNoYW5nZWRUb3VjaGVzLFxuICAgICAgICBjID0gY29udGFpbmVyLmNhbGwodGhpcywgZXZlbnQsIGQpLFxuICAgICAgICBuID0gdG91Y2hlcy5sZW5ndGgsIGksIGdlc3R1cmU7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoZ2VzdHVyZSA9IGJlZm9yZXN0YXJ0KHRoaXMsIGMsIGV2ZW50LCBkLCB0b3VjaGVzW2ldLmlkZW50aWZpZXIsIHRvdWNoZXNbaV0pKSB7XG4gICAgICAgIG5vcHJvcGFnYXRpb24oZXZlbnQpO1xuICAgICAgICBnZXN0dXJlKFwic3RhcnRcIiwgZXZlbnQsIHRvdWNoZXNbaV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHRvdWNobW92ZWQoZXZlbnQpIHtcbiAgICB2YXIgdG91Y2hlcyA9IGV2ZW50LmNoYW5nZWRUb3VjaGVzLFxuICAgICAgICBuID0gdG91Y2hlcy5sZW5ndGgsIGksIGdlc3R1cmU7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoZ2VzdHVyZSA9IGdlc3R1cmVzW3RvdWNoZXNbaV0uaWRlbnRpZmllcl0pIHtcbiAgICAgICAgbm9ldmVudChldmVudCk7XG4gICAgICAgIGdlc3R1cmUoXCJkcmFnXCIsIGV2ZW50LCB0b3VjaGVzW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB0b3VjaGVuZGVkKGV2ZW50KSB7XG4gICAgdmFyIHRvdWNoZXMgPSBldmVudC5jaGFuZ2VkVG91Y2hlcyxcbiAgICAgICAgbiA9IHRvdWNoZXMubGVuZ3RoLCBpLCBnZXN0dXJlO1xuXG4gICAgaWYgKHRvdWNoZW5kaW5nKSBjbGVhclRpbWVvdXQodG91Y2hlbmRpbmcpO1xuICAgIHRvdWNoZW5kaW5nID0gc2V0VGltZW91dChmdW5jdGlvbigpIHsgdG91Y2hlbmRpbmcgPSBudWxsOyB9LCA1MDApOyAvLyBHaG9zdCBjbGlja3MgYXJlIGRlbGF5ZWQhXG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKGdlc3R1cmUgPSBnZXN0dXJlc1t0b3VjaGVzW2ldLmlkZW50aWZpZXJdKSB7XG4gICAgICAgIG5vcHJvcGFnYXRpb24oZXZlbnQpO1xuICAgICAgICBnZXN0dXJlKFwiZW5kXCIsIGV2ZW50LCB0b3VjaGVzW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBiZWZvcmVzdGFydCh0aGF0LCBjb250YWluZXIsIGV2ZW50LCBkLCBpZGVudGlmaWVyLCB0b3VjaCkge1xuICAgIHZhciBkaXNwYXRjaCA9IGxpc3RlbmVycy5jb3B5KCksXG4gICAgICAgIHAgPSBwb2ludGVyKHRvdWNoIHx8IGV2ZW50LCBjb250YWluZXIpLCBkeCwgZHksXG4gICAgICAgIHM7XG5cbiAgICBpZiAoKHMgPSBzdWJqZWN0LmNhbGwodGhhdCwgbmV3IERyYWdFdmVudChcImJlZm9yZXN0YXJ0XCIsIHtcbiAgICAgICAgc291cmNlRXZlbnQ6IGV2ZW50LFxuICAgICAgICB0YXJnZXQ6IGRyYWcsXG4gICAgICAgIGlkZW50aWZpZXIsXG4gICAgICAgIGFjdGl2ZSxcbiAgICAgICAgeDogcFswXSxcbiAgICAgICAgeTogcFsxXSxcbiAgICAgICAgZHg6IDAsXG4gICAgICAgIGR5OiAwLFxuICAgICAgICBkaXNwYXRjaFxuICAgICAgfSksIGQpKSA9PSBudWxsKSByZXR1cm47XG5cbiAgICBkeCA9IHMueCAtIHBbMF0gfHwgMDtcbiAgICBkeSA9IHMueSAtIHBbMV0gfHwgMDtcblxuICAgIHJldHVybiBmdW5jdGlvbiBnZXN0dXJlKHR5cGUsIGV2ZW50LCB0b3VjaCkge1xuICAgICAgdmFyIHAwID0gcCwgbjtcbiAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlIFwic3RhcnRcIjogZ2VzdHVyZXNbaWRlbnRpZmllcl0gPSBnZXN0dXJlLCBuID0gYWN0aXZlKys7IGJyZWFrO1xuICAgICAgICBjYXNlIFwiZW5kXCI6IGRlbGV0ZSBnZXN0dXJlc1tpZGVudGlmaWVyXSwgLS1hY3RpdmU7IC8vIGZhbGxzIHRocm91Z2hcbiAgICAgICAgY2FzZSBcImRyYWdcIjogcCA9IHBvaW50ZXIodG91Y2ggfHwgZXZlbnQsIGNvbnRhaW5lciksIG4gPSBhY3RpdmU7IGJyZWFrO1xuICAgICAgfVxuICAgICAgZGlzcGF0Y2guY2FsbChcbiAgICAgICAgdHlwZSxcbiAgICAgICAgdGhhdCxcbiAgICAgICAgbmV3IERyYWdFdmVudCh0eXBlLCB7XG4gICAgICAgICAgc291cmNlRXZlbnQ6IGV2ZW50LFxuICAgICAgICAgIHN1YmplY3Q6IHMsXG4gICAgICAgICAgdGFyZ2V0OiBkcmFnLFxuICAgICAgICAgIGlkZW50aWZpZXIsXG4gICAgICAgICAgYWN0aXZlOiBuLFxuICAgICAgICAgIHg6IHBbMF0gKyBkeCxcbiAgICAgICAgICB5OiBwWzFdICsgZHksXG4gICAgICAgICAgZHg6IHBbMF0gLSBwMFswXSxcbiAgICAgICAgICBkeTogcFsxXSAtIHAwWzFdLFxuICAgICAgICAgIGRpc3BhdGNoXG4gICAgICAgIH0pLFxuICAgICAgICBkXG4gICAgICApO1xuICAgIH07XG4gIH1cblxuICBkcmFnLmZpbHRlciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChmaWx0ZXIgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCEhXyksIGRyYWcpIDogZmlsdGVyO1xuICB9O1xuXG4gIGRyYWcuY29udGFpbmVyID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGNvbnRhaW5lciA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoXyksIGRyYWcpIDogY29udGFpbmVyO1xuICB9O1xuXG4gIGRyYWcuc3ViamVjdCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzdWJqZWN0ID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudChfKSwgZHJhZykgOiBzdWJqZWN0O1xuICB9O1xuXG4gIGRyYWcudG91Y2hhYmxlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRvdWNoYWJsZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoISFfKSwgZHJhZykgOiB0b3VjaGFibGU7XG4gIH07XG5cbiAgZHJhZy5vbiA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZSA9IGxpc3RlbmVycy5vbi5hcHBseShsaXN0ZW5lcnMsIGFyZ3VtZW50cyk7XG4gICAgcmV0dXJuIHZhbHVlID09PSBsaXN0ZW5lcnMgPyBkcmFnIDogdmFsdWU7XG4gIH07XG5cbiAgZHJhZy5jbGlja0Rpc3RhbmNlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGNsaWNrRGlzdGFuY2UyID0gKF8gPSArXykgKiBfLCBkcmFnKSA6IE1hdGguc3FydChjbGlja0Rpc3RhbmNlMik7XG4gIH07XG5cbiAgcmV0dXJuIGRyYWc7XG59XG4iLCAiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY29uc3RydWN0b3IsIGZhY3RvcnksIHByb3RvdHlwZSkge1xuICBjb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBmYWN0b3J5LnByb3RvdHlwZSA9IHByb3RvdHlwZTtcbiAgcHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY29uc3RydWN0b3I7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBleHRlbmQocGFyZW50LCBkZWZpbml0aW9uKSB7XG4gIHZhciBwcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHBhcmVudC5wcm90b3R5cGUpO1xuICBmb3IgKHZhciBrZXkgaW4gZGVmaW5pdGlvbikgcHJvdG90eXBlW2tleV0gPSBkZWZpbml0aW9uW2tleV07XG4gIHJldHVybiBwcm90b3R5cGU7XG59XG4iLCAiaW1wb3J0IGRlZmluZSwge2V4dGVuZH0gZnJvbSBcIi4vZGVmaW5lLmpzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBDb2xvcigpIHt9XG5cbmV4cG9ydCB2YXIgZGFya2VyID0gMC43O1xuZXhwb3J0IHZhciBicmlnaHRlciA9IDEgLyBkYXJrZXI7XG5cbnZhciByZUkgPSBcIlxcXFxzKihbKy1dP1xcXFxkKylcXFxccypcIixcbiAgICByZU4gPSBcIlxcXFxzKihbKy1dPyg/OlxcXFxkKlxcXFwuKT9cXFxcZCsoPzpbZUVdWystXT9cXFxcZCspPylcXFxccypcIixcbiAgICByZVAgPSBcIlxcXFxzKihbKy1dPyg/OlxcXFxkKlxcXFwuKT9cXFxcZCsoPzpbZUVdWystXT9cXFxcZCspPyklXFxcXHMqXCIsXG4gICAgcmVIZXggPSAvXiMoWzAtOWEtZl17Myw4fSkkLyxcbiAgICByZVJnYkludGVnZXIgPSBuZXcgUmVnRXhwKGBecmdiXFxcXCgke3JlSX0sJHtyZUl9LCR7cmVJfVxcXFwpJGApLFxuICAgIHJlUmdiUGVyY2VudCA9IG5ldyBSZWdFeHAoYF5yZ2JcXFxcKCR7cmVQfSwke3JlUH0sJHtyZVB9XFxcXCkkYCksXG4gICAgcmVSZ2JhSW50ZWdlciA9IG5ldyBSZWdFeHAoYF5yZ2JhXFxcXCgke3JlSX0sJHtyZUl9LCR7cmVJfSwke3JlTn1cXFxcKSRgKSxcbiAgICByZVJnYmFQZXJjZW50ID0gbmV3IFJlZ0V4cChgXnJnYmFcXFxcKCR7cmVQfSwke3JlUH0sJHtyZVB9LCR7cmVOfVxcXFwpJGApLFxuICAgIHJlSHNsUGVyY2VudCA9IG5ldyBSZWdFeHAoYF5oc2xcXFxcKCR7cmVOfSwke3JlUH0sJHtyZVB9XFxcXCkkYCksXG4gICAgcmVIc2xhUGVyY2VudCA9IG5ldyBSZWdFeHAoYF5oc2xhXFxcXCgke3JlTn0sJHtyZVB9LCR7cmVQfSwke3JlTn1cXFxcKSRgKTtcblxudmFyIG5hbWVkID0ge1xuICBhbGljZWJsdWU6IDB4ZjBmOGZmLFxuICBhbnRpcXVld2hpdGU6IDB4ZmFlYmQ3LFxuICBhcXVhOiAweDAwZmZmZixcbiAgYXF1YW1hcmluZTogMHg3ZmZmZDQsXG4gIGF6dXJlOiAweGYwZmZmZixcbiAgYmVpZ2U6IDB4ZjVmNWRjLFxuICBiaXNxdWU6IDB4ZmZlNGM0LFxuICBibGFjazogMHgwMDAwMDAsXG4gIGJsYW5jaGVkYWxtb25kOiAweGZmZWJjZCxcbiAgYmx1ZTogMHgwMDAwZmYsXG4gIGJsdWV2aW9sZXQ6IDB4OGEyYmUyLFxuICBicm93bjogMHhhNTJhMmEsXG4gIGJ1cmx5d29vZDogMHhkZWI4ODcsXG4gIGNhZGV0Ymx1ZTogMHg1ZjllYTAsXG4gIGNoYXJ0cmV1c2U6IDB4N2ZmZjAwLFxuICBjaG9jb2xhdGU6IDB4ZDI2OTFlLFxuICBjb3JhbDogMHhmZjdmNTAsXG4gIGNvcm5mbG93ZXJibHVlOiAweDY0OTVlZCxcbiAgY29ybnNpbGs6IDB4ZmZmOGRjLFxuICBjcmltc29uOiAweGRjMTQzYyxcbiAgY3lhbjogMHgwMGZmZmYsXG4gIGRhcmtibHVlOiAweDAwMDA4YixcbiAgZGFya2N5YW46IDB4MDA4YjhiLFxuICBkYXJrZ29sZGVucm9kOiAweGI4ODYwYixcbiAgZGFya2dyYXk6IDB4YTlhOWE5LFxuICBkYXJrZ3JlZW46IDB4MDA2NDAwLFxuICBkYXJrZ3JleTogMHhhOWE5YTksXG4gIGRhcmtraGFraTogMHhiZGI3NmIsXG4gIGRhcmttYWdlbnRhOiAweDhiMDA4YixcbiAgZGFya29saXZlZ3JlZW46IDB4NTU2YjJmLFxuICBkYXJrb3JhbmdlOiAweGZmOGMwMCxcbiAgZGFya29yY2hpZDogMHg5OTMyY2MsXG4gIGRhcmtyZWQ6IDB4OGIwMDAwLFxuICBkYXJrc2FsbW9uOiAweGU5OTY3YSxcbiAgZGFya3NlYWdyZWVuOiAweDhmYmM4ZixcbiAgZGFya3NsYXRlYmx1ZTogMHg0ODNkOGIsXG4gIGRhcmtzbGF0ZWdyYXk6IDB4MmY0ZjRmLFxuICBkYXJrc2xhdGVncmV5OiAweDJmNGY0ZixcbiAgZGFya3R1cnF1b2lzZTogMHgwMGNlZDEsXG4gIGRhcmt2aW9sZXQ6IDB4OTQwMGQzLFxuICBkZWVwcGluazogMHhmZjE0OTMsXG4gIGRlZXBza3libHVlOiAweDAwYmZmZixcbiAgZGltZ3JheTogMHg2OTY5NjksXG4gIGRpbWdyZXk6IDB4Njk2OTY5LFxuICBkb2RnZXJibHVlOiAweDFlOTBmZixcbiAgZmlyZWJyaWNrOiAweGIyMjIyMixcbiAgZmxvcmFsd2hpdGU6IDB4ZmZmYWYwLFxuICBmb3Jlc3RncmVlbjogMHgyMjhiMjIsXG4gIGZ1Y2hzaWE6IDB4ZmYwMGZmLFxuICBnYWluc2Jvcm86IDB4ZGNkY2RjLFxuICBnaG9zdHdoaXRlOiAweGY4ZjhmZixcbiAgZ29sZDogMHhmZmQ3MDAsXG4gIGdvbGRlbnJvZDogMHhkYWE1MjAsXG4gIGdyYXk6IDB4ODA4MDgwLFxuICBncmVlbjogMHgwMDgwMDAsXG4gIGdyZWVueWVsbG93OiAweGFkZmYyZixcbiAgZ3JleTogMHg4MDgwODAsXG4gIGhvbmV5ZGV3OiAweGYwZmZmMCxcbiAgaG90cGluazogMHhmZjY5YjQsXG4gIGluZGlhbnJlZDogMHhjZDVjNWMsXG4gIGluZGlnbzogMHg0YjAwODIsXG4gIGl2b3J5OiAweGZmZmZmMCxcbiAga2hha2k6IDB4ZjBlNjhjLFxuICBsYXZlbmRlcjogMHhlNmU2ZmEsXG4gIGxhdmVuZGVyYmx1c2g6IDB4ZmZmMGY1LFxuICBsYXduZ3JlZW46IDB4N2NmYzAwLFxuICBsZW1vbmNoaWZmb246IDB4ZmZmYWNkLFxuICBsaWdodGJsdWU6IDB4YWRkOGU2LFxuICBsaWdodGNvcmFsOiAweGYwODA4MCxcbiAgbGlnaHRjeWFuOiAweGUwZmZmZixcbiAgbGlnaHRnb2xkZW5yb2R5ZWxsb3c6IDB4ZmFmYWQyLFxuICBsaWdodGdyYXk6IDB4ZDNkM2QzLFxuICBsaWdodGdyZWVuOiAweDkwZWU5MCxcbiAgbGlnaHRncmV5OiAweGQzZDNkMyxcbiAgbGlnaHRwaW5rOiAweGZmYjZjMSxcbiAgbGlnaHRzYWxtb246IDB4ZmZhMDdhLFxuICBsaWdodHNlYWdyZWVuOiAweDIwYjJhYSxcbiAgbGlnaHRza3libHVlOiAweDg3Y2VmYSxcbiAgbGlnaHRzbGF0ZWdyYXk6IDB4Nzc4ODk5LFxuICBsaWdodHNsYXRlZ3JleTogMHg3Nzg4OTksXG4gIGxpZ2h0c3RlZWxibHVlOiAweGIwYzRkZSxcbiAgbGlnaHR5ZWxsb3c6IDB4ZmZmZmUwLFxuICBsaW1lOiAweDAwZmYwMCxcbiAgbGltZWdyZWVuOiAweDMyY2QzMixcbiAgbGluZW46IDB4ZmFmMGU2LFxuICBtYWdlbnRhOiAweGZmMDBmZixcbiAgbWFyb29uOiAweDgwMDAwMCxcbiAgbWVkaXVtYXF1YW1hcmluZTogMHg2NmNkYWEsXG4gIG1lZGl1bWJsdWU6IDB4MDAwMGNkLFxuICBtZWRpdW1vcmNoaWQ6IDB4YmE1NWQzLFxuICBtZWRpdW1wdXJwbGU6IDB4OTM3MGRiLFxuICBtZWRpdW1zZWFncmVlbjogMHgzY2IzNzEsXG4gIG1lZGl1bXNsYXRlYmx1ZTogMHg3YjY4ZWUsXG4gIG1lZGl1bXNwcmluZ2dyZWVuOiAweDAwZmE5YSxcbiAgbWVkaXVtdHVycXVvaXNlOiAweDQ4ZDFjYyxcbiAgbWVkaXVtdmlvbGV0cmVkOiAweGM3MTU4NSxcbiAgbWlkbmlnaHRibHVlOiAweDE5MTk3MCxcbiAgbWludGNyZWFtOiAweGY1ZmZmYSxcbiAgbWlzdHlyb3NlOiAweGZmZTRlMSxcbiAgbW9jY2FzaW46IDB4ZmZlNGI1LFxuICBuYXZham93aGl0ZTogMHhmZmRlYWQsXG4gIG5hdnk6IDB4MDAwMDgwLFxuICBvbGRsYWNlOiAweGZkZjVlNixcbiAgb2xpdmU6IDB4ODA4MDAwLFxuICBvbGl2ZWRyYWI6IDB4NmI4ZTIzLFxuICBvcmFuZ2U6IDB4ZmZhNTAwLFxuICBvcmFuZ2VyZWQ6IDB4ZmY0NTAwLFxuICBvcmNoaWQ6IDB4ZGE3MGQ2LFxuICBwYWxlZ29sZGVucm9kOiAweGVlZThhYSxcbiAgcGFsZWdyZWVuOiAweDk4ZmI5OCxcbiAgcGFsZXR1cnF1b2lzZTogMHhhZmVlZWUsXG4gIHBhbGV2aW9sZXRyZWQ6IDB4ZGI3MDkzLFxuICBwYXBheWF3aGlwOiAweGZmZWZkNSxcbiAgcGVhY2hwdWZmOiAweGZmZGFiOSxcbiAgcGVydTogMHhjZDg1M2YsXG4gIHBpbms6IDB4ZmZjMGNiLFxuICBwbHVtOiAweGRkYTBkZCxcbiAgcG93ZGVyYmx1ZTogMHhiMGUwZTYsXG4gIHB1cnBsZTogMHg4MDAwODAsXG4gIHJlYmVjY2FwdXJwbGU6IDB4NjYzMzk5LFxuICByZWQ6IDB4ZmYwMDAwLFxuICByb3N5YnJvd246IDB4YmM4ZjhmLFxuICByb3lhbGJsdWU6IDB4NDE2OWUxLFxuICBzYWRkbGVicm93bjogMHg4YjQ1MTMsXG4gIHNhbG1vbjogMHhmYTgwNzIsXG4gIHNhbmR5YnJvd246IDB4ZjRhNDYwLFxuICBzZWFncmVlbjogMHgyZThiNTcsXG4gIHNlYXNoZWxsOiAweGZmZjVlZSxcbiAgc2llbm5hOiAweGEwNTIyZCxcbiAgc2lsdmVyOiAweGMwYzBjMCxcbiAgc2t5Ymx1ZTogMHg4N2NlZWIsXG4gIHNsYXRlYmx1ZTogMHg2YTVhY2QsXG4gIHNsYXRlZ3JheTogMHg3MDgwOTAsXG4gIHNsYXRlZ3JleTogMHg3MDgwOTAsXG4gIHNub3c6IDB4ZmZmYWZhLFxuICBzcHJpbmdncmVlbjogMHgwMGZmN2YsXG4gIHN0ZWVsYmx1ZTogMHg0NjgyYjQsXG4gIHRhbjogMHhkMmI0OGMsXG4gIHRlYWw6IDB4MDA4MDgwLFxuICB0aGlzdGxlOiAweGQ4YmZkOCxcbiAgdG9tYXRvOiAweGZmNjM0NyxcbiAgdHVycXVvaXNlOiAweDQwZTBkMCxcbiAgdmlvbGV0OiAweGVlODJlZSxcbiAgd2hlYXQ6IDB4ZjVkZWIzLFxuICB3aGl0ZTogMHhmZmZmZmYsXG4gIHdoaXRlc21va2U6IDB4ZjVmNWY1LFxuICB5ZWxsb3c6IDB4ZmZmZjAwLFxuICB5ZWxsb3dncmVlbjogMHg5YWNkMzJcbn07XG5cbmRlZmluZShDb2xvciwgY29sb3IsIHtcbiAgY29weShjaGFubmVscykge1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKG5ldyB0aGlzLmNvbnN0cnVjdG9yLCB0aGlzLCBjaGFubmVscyk7XG4gIH0sXG4gIGRpc3BsYXlhYmxlKCkge1xuICAgIHJldHVybiB0aGlzLnJnYigpLmRpc3BsYXlhYmxlKCk7XG4gIH0sXG4gIGhleDogY29sb3JfZm9ybWF0SGV4LCAvLyBEZXByZWNhdGVkISBVc2UgY29sb3IuZm9ybWF0SGV4LlxuICBmb3JtYXRIZXg6IGNvbG9yX2Zvcm1hdEhleCxcbiAgZm9ybWF0SGV4ODogY29sb3JfZm9ybWF0SGV4OCxcbiAgZm9ybWF0SHNsOiBjb2xvcl9mb3JtYXRIc2wsXG4gIGZvcm1hdFJnYjogY29sb3JfZm9ybWF0UmdiLFxuICB0b1N0cmluZzogY29sb3JfZm9ybWF0UmdiXG59KTtcblxuZnVuY3Rpb24gY29sb3JfZm9ybWF0SGV4KCkge1xuICByZXR1cm4gdGhpcy5yZ2IoKS5mb3JtYXRIZXgoKTtcbn1cblxuZnVuY3Rpb24gY29sb3JfZm9ybWF0SGV4OCgpIHtcbiAgcmV0dXJuIHRoaXMucmdiKCkuZm9ybWF0SGV4OCgpO1xufVxuXG5mdW5jdGlvbiBjb2xvcl9mb3JtYXRIc2woKSB7XG4gIHJldHVybiBoc2xDb252ZXJ0KHRoaXMpLmZvcm1hdEhzbCgpO1xufVxuXG5mdW5jdGlvbiBjb2xvcl9mb3JtYXRSZ2IoKSB7XG4gIHJldHVybiB0aGlzLnJnYigpLmZvcm1hdFJnYigpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb2xvcihmb3JtYXQpIHtcbiAgdmFyIG0sIGw7XG4gIGZvcm1hdCA9IChmb3JtYXQgKyBcIlwiKS50cmltKCkudG9Mb3dlckNhc2UoKTtcbiAgcmV0dXJuIChtID0gcmVIZXguZXhlYyhmb3JtYXQpKSA/IChsID0gbVsxXS5sZW5ndGgsIG0gPSBwYXJzZUludChtWzFdLCAxNiksIGwgPT09IDYgPyByZ2JuKG0pIC8vICNmZjAwMDBcbiAgICAgIDogbCA9PT0gMyA/IG5ldyBSZ2IoKG0gPj4gOCAmIDB4ZikgfCAobSA+PiA0ICYgMHhmMCksIChtID4+IDQgJiAweGYpIHwgKG0gJiAweGYwKSwgKChtICYgMHhmKSA8PCA0KSB8IChtICYgMHhmKSwgMSkgLy8gI2YwMFxuICAgICAgOiBsID09PSA4ID8gcmdiYShtID4+IDI0ICYgMHhmZiwgbSA+PiAxNiAmIDB4ZmYsIG0gPj4gOCAmIDB4ZmYsIChtICYgMHhmZikgLyAweGZmKSAvLyAjZmYwMDAwMDBcbiAgICAgIDogbCA9PT0gNCA/IHJnYmEoKG0gPj4gMTIgJiAweGYpIHwgKG0gPj4gOCAmIDB4ZjApLCAobSA+PiA4ICYgMHhmKSB8IChtID4+IDQgJiAweGYwKSwgKG0gPj4gNCAmIDB4ZikgfCAobSAmIDB4ZjApLCAoKChtICYgMHhmKSA8PCA0KSB8IChtICYgMHhmKSkgLyAweGZmKSAvLyAjZjAwMFxuICAgICAgOiBudWxsKSAvLyBpbnZhbGlkIGhleFxuICAgICAgOiAobSA9IHJlUmdiSW50ZWdlci5leGVjKGZvcm1hdCkpID8gbmV3IFJnYihtWzFdLCBtWzJdLCBtWzNdLCAxKSAvLyByZ2IoMjU1LCAwLCAwKVxuICAgICAgOiAobSA9IHJlUmdiUGVyY2VudC5leGVjKGZvcm1hdCkpID8gbmV3IFJnYihtWzFdICogMjU1IC8gMTAwLCBtWzJdICogMjU1IC8gMTAwLCBtWzNdICogMjU1IC8gMTAwLCAxKSAvLyByZ2IoMTAwJSwgMCUsIDAlKVxuICAgICAgOiAobSA9IHJlUmdiYUludGVnZXIuZXhlYyhmb3JtYXQpKSA/IHJnYmEobVsxXSwgbVsyXSwgbVszXSwgbVs0XSkgLy8gcmdiYSgyNTUsIDAsIDAsIDEpXG4gICAgICA6IChtID0gcmVSZ2JhUGVyY2VudC5leGVjKGZvcm1hdCkpID8gcmdiYShtWzFdICogMjU1IC8gMTAwLCBtWzJdICogMjU1IC8gMTAwLCBtWzNdICogMjU1IC8gMTAwLCBtWzRdKSAvLyByZ2IoMTAwJSwgMCUsIDAlLCAxKVxuICAgICAgOiAobSA9IHJlSHNsUGVyY2VudC5leGVjKGZvcm1hdCkpID8gaHNsYShtWzFdLCBtWzJdIC8gMTAwLCBtWzNdIC8gMTAwLCAxKSAvLyBoc2woMTIwLCA1MCUsIDUwJSlcbiAgICAgIDogKG0gPSByZUhzbGFQZXJjZW50LmV4ZWMoZm9ybWF0KSkgPyBoc2xhKG1bMV0sIG1bMl0gLyAxMDAsIG1bM10gLyAxMDAsIG1bNF0pIC8vIGhzbGEoMTIwLCA1MCUsIDUwJSwgMSlcbiAgICAgIDogbmFtZWQuaGFzT3duUHJvcGVydHkoZm9ybWF0KSA/IHJnYm4obmFtZWRbZm9ybWF0XSkgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbiAgICAgIDogZm9ybWF0ID09PSBcInRyYW5zcGFyZW50XCIgPyBuZXcgUmdiKE5hTiwgTmFOLCBOYU4sIDApXG4gICAgICA6IG51bGw7XG59XG5cbmZ1bmN0aW9uIHJnYm4obikge1xuICByZXR1cm4gbmV3IFJnYihuID4+IDE2ICYgMHhmZiwgbiA+PiA4ICYgMHhmZiwgbiAmIDB4ZmYsIDEpO1xufVxuXG5mdW5jdGlvbiByZ2JhKHIsIGcsIGIsIGEpIHtcbiAgaWYgKGEgPD0gMCkgciA9IGcgPSBiID0gTmFOO1xuICByZXR1cm4gbmV3IFJnYihyLCBnLCBiLCBhKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJnYkNvbnZlcnQobykge1xuICBpZiAoIShvIGluc3RhbmNlb2YgQ29sb3IpKSBvID0gY29sb3Iobyk7XG4gIGlmICghbykgcmV0dXJuIG5ldyBSZ2I7XG4gIG8gPSBvLnJnYigpO1xuICByZXR1cm4gbmV3IFJnYihvLnIsIG8uZywgby5iLCBvLm9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmdiKHIsIGcsIGIsIG9wYWNpdHkpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyByZ2JDb252ZXJ0KHIpIDogbmV3IFJnYihyLCBnLCBiLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBSZ2IociwgZywgYiwgb3BhY2l0eSkge1xuICB0aGlzLnIgPSArcjtcbiAgdGhpcy5nID0gK2c7XG4gIHRoaXMuYiA9ICtiO1xuICB0aGlzLm9wYWNpdHkgPSArb3BhY2l0eTtcbn1cblxuZGVmaW5lKFJnYiwgcmdiLCBleHRlbmQoQ29sb3IsIHtcbiAgYnJpZ2h0ZXIoaykge1xuICAgIGsgPSBrID09IG51bGwgPyBicmlnaHRlciA6IE1hdGgucG93KGJyaWdodGVyLCBrKTtcbiAgICByZXR1cm4gbmV3IFJnYih0aGlzLnIgKiBrLCB0aGlzLmcgKiBrLCB0aGlzLmIgKiBrLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICBkYXJrZXIoaykge1xuICAgIGsgPSBrID09IG51bGwgPyBkYXJrZXIgOiBNYXRoLnBvdyhkYXJrZXIsIGspO1xuICAgIHJldHVybiBuZXcgUmdiKHRoaXMuciAqIGssIHRoaXMuZyAqIGssIHRoaXMuYiAqIGssIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIHJnYigpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbiAgY2xhbXAoKSB7XG4gICAgcmV0dXJuIG5ldyBSZ2IoY2xhbXBpKHRoaXMuciksIGNsYW1waSh0aGlzLmcpLCBjbGFtcGkodGhpcy5iKSwgY2xhbXBhKHRoaXMub3BhY2l0eSkpO1xuICB9LFxuICBkaXNwbGF5YWJsZSgpIHtcbiAgICByZXR1cm4gKC0wLjUgPD0gdGhpcy5yICYmIHRoaXMuciA8IDI1NS41KVxuICAgICAgICAmJiAoLTAuNSA8PSB0aGlzLmcgJiYgdGhpcy5nIDwgMjU1LjUpXG4gICAgICAgICYmICgtMC41IDw9IHRoaXMuYiAmJiB0aGlzLmIgPCAyNTUuNSlcbiAgICAgICAgJiYgKDAgPD0gdGhpcy5vcGFjaXR5ICYmIHRoaXMub3BhY2l0eSA8PSAxKTtcbiAgfSxcbiAgaGV4OiByZ2JfZm9ybWF0SGV4LCAvLyBEZXByZWNhdGVkISBVc2UgY29sb3IuZm9ybWF0SGV4LlxuICBmb3JtYXRIZXg6IHJnYl9mb3JtYXRIZXgsXG4gIGZvcm1hdEhleDg6IHJnYl9mb3JtYXRIZXg4LFxuICBmb3JtYXRSZ2I6IHJnYl9mb3JtYXRSZ2IsXG4gIHRvU3RyaW5nOiByZ2JfZm9ybWF0UmdiXG59KSk7XG5cbmZ1bmN0aW9uIHJnYl9mb3JtYXRIZXgoKSB7XG4gIHJldHVybiBgIyR7aGV4KHRoaXMucil9JHtoZXgodGhpcy5nKX0ke2hleCh0aGlzLmIpfWA7XG59XG5cbmZ1bmN0aW9uIHJnYl9mb3JtYXRIZXg4KCkge1xuICByZXR1cm4gYCMke2hleCh0aGlzLnIpfSR7aGV4KHRoaXMuZyl9JHtoZXgodGhpcy5iKX0ke2hleCgoaXNOYU4odGhpcy5vcGFjaXR5KSA/IDEgOiB0aGlzLm9wYWNpdHkpICogMjU1KX1gO1xufVxuXG5mdW5jdGlvbiByZ2JfZm9ybWF0UmdiKCkge1xuICBjb25zdCBhID0gY2xhbXBhKHRoaXMub3BhY2l0eSk7XG4gIHJldHVybiBgJHthID09PSAxID8gXCJyZ2IoXCIgOiBcInJnYmEoXCJ9JHtjbGFtcGkodGhpcy5yKX0sICR7Y2xhbXBpKHRoaXMuZyl9LCAke2NsYW1waSh0aGlzLmIpfSR7YSA9PT0gMSA/IFwiKVwiIDogYCwgJHthfSlgfWA7XG59XG5cbmZ1bmN0aW9uIGNsYW1wYShvcGFjaXR5KSB7XG4gIHJldHVybiBpc05hTihvcGFjaXR5KSA/IDEgOiBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCBvcGFjaXR5KSk7XG59XG5cbmZ1bmN0aW9uIGNsYW1waSh2YWx1ZSkge1xuICByZXR1cm4gTWF0aC5tYXgoMCwgTWF0aC5taW4oMjU1LCBNYXRoLnJvdW5kKHZhbHVlKSB8fCAwKSk7XG59XG5cbmZ1bmN0aW9uIGhleCh2YWx1ZSkge1xuICB2YWx1ZSA9IGNsYW1waSh2YWx1ZSk7XG4gIHJldHVybiAodmFsdWUgPCAxNiA/IFwiMFwiIDogXCJcIikgKyB2YWx1ZS50b1N0cmluZygxNik7XG59XG5cbmZ1bmN0aW9uIGhzbGEoaCwgcywgbCwgYSkge1xuICBpZiAoYSA8PSAwKSBoID0gcyA9IGwgPSBOYU47XG4gIGVsc2UgaWYgKGwgPD0gMCB8fCBsID49IDEpIGggPSBzID0gTmFOO1xuICBlbHNlIGlmIChzIDw9IDApIGggPSBOYU47XG4gIHJldHVybiBuZXcgSHNsKGgsIHMsIGwsIGEpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaHNsQ29udmVydChvKSB7XG4gIGlmIChvIGluc3RhbmNlb2YgSHNsKSByZXR1cm4gbmV3IEhzbChvLmgsIG8ucywgby5sLCBvLm9wYWNpdHkpO1xuICBpZiAoIShvIGluc3RhbmNlb2YgQ29sb3IpKSBvID0gY29sb3Iobyk7XG4gIGlmICghbykgcmV0dXJuIG5ldyBIc2w7XG4gIGlmIChvIGluc3RhbmNlb2YgSHNsKSByZXR1cm4gbztcbiAgbyA9IG8ucmdiKCk7XG4gIHZhciByID0gby5yIC8gMjU1LFxuICAgICAgZyA9IG8uZyAvIDI1NSxcbiAgICAgIGIgPSBvLmIgLyAyNTUsXG4gICAgICBtaW4gPSBNYXRoLm1pbihyLCBnLCBiKSxcbiAgICAgIG1heCA9IE1hdGgubWF4KHIsIGcsIGIpLFxuICAgICAgaCA9IE5hTixcbiAgICAgIHMgPSBtYXggLSBtaW4sXG4gICAgICBsID0gKG1heCArIG1pbikgLyAyO1xuICBpZiAocykge1xuICAgIGlmIChyID09PSBtYXgpIGggPSAoZyAtIGIpIC8gcyArIChnIDwgYikgKiA2O1xuICAgIGVsc2UgaWYgKGcgPT09IG1heCkgaCA9IChiIC0gcikgLyBzICsgMjtcbiAgICBlbHNlIGggPSAociAtIGcpIC8gcyArIDQ7XG4gICAgcyAvPSBsIDwgMC41ID8gbWF4ICsgbWluIDogMiAtIG1heCAtIG1pbjtcbiAgICBoICo9IDYwO1xuICB9IGVsc2Uge1xuICAgIHMgPSBsID4gMCAmJiBsIDwgMSA/IDAgOiBoO1xuICB9XG4gIHJldHVybiBuZXcgSHNsKGgsIHMsIGwsIG8ub3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoc2woaCwgcywgbCwgb3BhY2l0eSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IGhzbENvbnZlcnQoaCkgOiBuZXcgSHNsKGgsIHMsIGwsIG9wYWNpdHkgPT0gbnVsbCA/IDEgOiBvcGFjaXR5KTtcbn1cblxuZnVuY3Rpb24gSHNsKGgsIHMsIGwsIG9wYWNpdHkpIHtcbiAgdGhpcy5oID0gK2g7XG4gIHRoaXMucyA9ICtzO1xuICB0aGlzLmwgPSArbDtcbiAgdGhpcy5vcGFjaXR5ID0gK29wYWNpdHk7XG59XG5cbmRlZmluZShIc2wsIGhzbCwgZXh0ZW5kKENvbG9yLCB7XG4gIGJyaWdodGVyKGspIHtcbiAgICBrID0gayA9PSBudWxsID8gYnJpZ2h0ZXIgOiBNYXRoLnBvdyhicmlnaHRlciwgayk7XG4gICAgcmV0dXJuIG5ldyBIc2wodGhpcy5oLCB0aGlzLnMsIHRoaXMubCAqIGssIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIGRhcmtlcihrKSB7XG4gICAgayA9IGsgPT0gbnVsbCA/IGRhcmtlciA6IE1hdGgucG93KGRhcmtlciwgayk7XG4gICAgcmV0dXJuIG5ldyBIc2wodGhpcy5oLCB0aGlzLnMsIHRoaXMubCAqIGssIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIHJnYigpIHtcbiAgICB2YXIgaCA9IHRoaXMuaCAlIDM2MCArICh0aGlzLmggPCAwKSAqIDM2MCxcbiAgICAgICAgcyA9IGlzTmFOKGgpIHx8IGlzTmFOKHRoaXMucykgPyAwIDogdGhpcy5zLFxuICAgICAgICBsID0gdGhpcy5sLFxuICAgICAgICBtMiA9IGwgKyAobCA8IDAuNSA/IGwgOiAxIC0gbCkgKiBzLFxuICAgICAgICBtMSA9IDIgKiBsIC0gbTI7XG4gICAgcmV0dXJuIG5ldyBSZ2IoXG4gICAgICBoc2wycmdiKGggPj0gMjQwID8gaCAtIDI0MCA6IGggKyAxMjAsIG0xLCBtMiksXG4gICAgICBoc2wycmdiKGgsIG0xLCBtMiksXG4gICAgICBoc2wycmdiKGggPCAxMjAgPyBoICsgMjQwIDogaCAtIDEyMCwgbTEsIG0yKSxcbiAgICAgIHRoaXMub3BhY2l0eVxuICAgICk7XG4gIH0sXG4gIGNsYW1wKCkge1xuICAgIHJldHVybiBuZXcgSHNsKGNsYW1waCh0aGlzLmgpLCBjbGFtcHQodGhpcy5zKSwgY2xhbXB0KHRoaXMubCksIGNsYW1wYSh0aGlzLm9wYWNpdHkpKTtcbiAgfSxcbiAgZGlzcGxheWFibGUoKSB7XG4gICAgcmV0dXJuICgwIDw9IHRoaXMucyAmJiB0aGlzLnMgPD0gMSB8fCBpc05hTih0aGlzLnMpKVxuICAgICAgICAmJiAoMCA8PSB0aGlzLmwgJiYgdGhpcy5sIDw9IDEpXG4gICAgICAgICYmICgwIDw9IHRoaXMub3BhY2l0eSAmJiB0aGlzLm9wYWNpdHkgPD0gMSk7XG4gIH0sXG4gIGZvcm1hdEhzbCgpIHtcbiAgICBjb25zdCBhID0gY2xhbXBhKHRoaXMub3BhY2l0eSk7XG4gICAgcmV0dXJuIGAke2EgPT09IDEgPyBcImhzbChcIiA6IFwiaHNsYShcIn0ke2NsYW1waCh0aGlzLmgpfSwgJHtjbGFtcHQodGhpcy5zKSAqIDEwMH0lLCAke2NsYW1wdCh0aGlzLmwpICogMTAwfSUke2EgPT09IDEgPyBcIilcIiA6IGAsICR7YX0pYH1gO1xuICB9XG59KSk7XG5cbmZ1bmN0aW9uIGNsYW1waCh2YWx1ZSkge1xuICB2YWx1ZSA9ICh2YWx1ZSB8fCAwKSAlIDM2MDtcbiAgcmV0dXJuIHZhbHVlIDwgMCA/IHZhbHVlICsgMzYwIDogdmFsdWU7XG59XG5cbmZ1bmN0aW9uIGNsYW1wdCh2YWx1ZSkge1xuICByZXR1cm4gTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgdmFsdWUgfHwgMCkpO1xufVxuXG4vKiBGcm9tIEZ2RCAxMy4zNywgQ1NTIENvbG9yIE1vZHVsZSBMZXZlbCAzICovXG5mdW5jdGlvbiBoc2wycmdiKGgsIG0xLCBtMikge1xuICByZXR1cm4gKGggPCA2MCA/IG0xICsgKG0yIC0gbTEpICogaCAvIDYwXG4gICAgICA6IGggPCAxODAgPyBtMlxuICAgICAgOiBoIDwgMjQwID8gbTEgKyAobTIgLSBtMSkgKiAoMjQwIC0gaCkgLyA2MFxuICAgICAgOiBtMSkgKiAyNTU7XG59XG4iLCAiZXhwb3J0IGZ1bmN0aW9uIGJhc2lzKHQxLCB2MCwgdjEsIHYyLCB2Mykge1xuICB2YXIgdDIgPSB0MSAqIHQxLCB0MyA9IHQyICogdDE7XG4gIHJldHVybiAoKDEgLSAzICogdDEgKyAzICogdDIgLSB0MykgKiB2MFxuICAgICAgKyAoNCAtIDYgKiB0MiArIDMgKiB0MykgKiB2MVxuICAgICAgKyAoMSArIDMgKiB0MSArIDMgKiB0MiAtIDMgKiB0MykgKiB2MlxuICAgICAgKyB0MyAqIHYzKSAvIDY7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlcykge1xuICB2YXIgbiA9IHZhbHVlcy5sZW5ndGggLSAxO1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHZhciBpID0gdCA8PSAwID8gKHQgPSAwKSA6IHQgPj0gMSA/ICh0ID0gMSwgbiAtIDEpIDogTWF0aC5mbG9vcih0ICogbiksXG4gICAgICAgIHYxID0gdmFsdWVzW2ldLFxuICAgICAgICB2MiA9IHZhbHVlc1tpICsgMV0sXG4gICAgICAgIHYwID0gaSA+IDAgPyB2YWx1ZXNbaSAtIDFdIDogMiAqIHYxIC0gdjIsXG4gICAgICAgIHYzID0gaSA8IG4gLSAxID8gdmFsdWVzW2kgKyAyXSA6IDIgKiB2MiAtIHYxO1xuICAgIHJldHVybiBiYXNpcygodCAtIGkgLyBuKSAqIG4sIHYwLCB2MSwgdjIsIHYzKTtcbiAgfTtcbn1cbiIsICJpbXBvcnQge2Jhc2lzfSBmcm9tIFwiLi9iYXNpcy5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZXMpIHtcbiAgdmFyIG4gPSB2YWx1ZXMubGVuZ3RoO1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHZhciBpID0gTWF0aC5mbG9vcigoKHQgJT0gMSkgPCAwID8gKyt0IDogdCkgKiBuKSxcbiAgICAgICAgdjAgPSB2YWx1ZXNbKGkgKyBuIC0gMSkgJSBuXSxcbiAgICAgICAgdjEgPSB2YWx1ZXNbaSAlIG5dLFxuICAgICAgICB2MiA9IHZhbHVlc1soaSArIDEpICUgbl0sXG4gICAgICAgIHYzID0gdmFsdWVzWyhpICsgMikgJSBuXTtcbiAgICByZXR1cm4gYmFzaXMoKHQgLSBpIC8gbikgKiBuLCB2MCwgdjEsIHYyLCB2Myk7XG4gIH07XG59XG4iLCAiZXhwb3J0IGRlZmF1bHQgeCA9PiAoKSA9PiB4O1xuIiwgImltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudC5qc1wiO1xuXG5mdW5jdGlvbiBsaW5lYXIoYSwgZCkge1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBhICsgdCAqIGQ7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGV4cG9uZW50aWFsKGEsIGIsIHkpIHtcbiAgcmV0dXJuIGEgPSBNYXRoLnBvdyhhLCB5KSwgYiA9IE1hdGgucG93KGIsIHkpIC0gYSwgeSA9IDEgLyB5LCBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIE1hdGgucG93KGEgKyB0ICogYiwgeSk7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBodWUoYSwgYikge1xuICB2YXIgZCA9IGIgLSBhO1xuICByZXR1cm4gZCA/IGxpbmVhcihhLCBkID4gMTgwIHx8IGQgPCAtMTgwID8gZCAtIDM2MCAqIE1hdGgucm91bmQoZCAvIDM2MCkgOiBkKSA6IGNvbnN0YW50KGlzTmFOKGEpID8gYiA6IGEpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2FtbWEoeSkge1xuICByZXR1cm4gKHkgPSAreSkgPT09IDEgPyBub2dhbW1hIDogZnVuY3Rpb24oYSwgYikge1xuICAgIHJldHVybiBiIC0gYSA/IGV4cG9uZW50aWFsKGEsIGIsIHkpIDogY29uc3RhbnQoaXNOYU4oYSkgPyBiIDogYSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG5vZ2FtbWEoYSwgYikge1xuICB2YXIgZCA9IGIgLSBhO1xuICByZXR1cm4gZCA/IGxpbmVhcihhLCBkKSA6IGNvbnN0YW50KGlzTmFOKGEpID8gYiA6IGEpO1xufVxuIiwgImltcG9ydCB7cmdiIGFzIGNvbG9yUmdifSBmcm9tIFwiZDMtY29sb3JcIjtcbmltcG9ydCBiYXNpcyBmcm9tIFwiLi9iYXNpcy5qc1wiO1xuaW1wb3J0IGJhc2lzQ2xvc2VkIGZyb20gXCIuL2Jhc2lzQ2xvc2VkLmpzXCI7XG5pbXBvcnQgbm9nYW1tYSwge2dhbW1hfSBmcm9tIFwiLi9jb2xvci5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gcmdiR2FtbWEoeSkge1xuICB2YXIgY29sb3IgPSBnYW1tYSh5KTtcblxuICBmdW5jdGlvbiByZ2Ioc3RhcnQsIGVuZCkge1xuICAgIHZhciByID0gY29sb3IoKHN0YXJ0ID0gY29sb3JSZ2Ioc3RhcnQpKS5yLCAoZW5kID0gY29sb3JSZ2IoZW5kKSkuciksXG4gICAgICAgIGcgPSBjb2xvcihzdGFydC5nLCBlbmQuZyksXG4gICAgICAgIGIgPSBjb2xvcihzdGFydC5iLCBlbmQuYiksXG4gICAgICAgIG9wYWNpdHkgPSBub2dhbW1hKHN0YXJ0Lm9wYWNpdHksIGVuZC5vcGFjaXR5KTtcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgc3RhcnQuciA9IHIodCk7XG4gICAgICBzdGFydC5nID0gZyh0KTtcbiAgICAgIHN0YXJ0LmIgPSBiKHQpO1xuICAgICAgc3RhcnQub3BhY2l0eSA9IG9wYWNpdHkodCk7XG4gICAgICByZXR1cm4gc3RhcnQgKyBcIlwiO1xuICAgIH07XG4gIH1cblxuICByZ2IuZ2FtbWEgPSByZ2JHYW1tYTtcblxuICByZXR1cm4gcmdiO1xufSkoMSk7XG5cbmZ1bmN0aW9uIHJnYlNwbGluZShzcGxpbmUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGNvbG9ycykge1xuICAgIHZhciBuID0gY29sb3JzLmxlbmd0aCxcbiAgICAgICAgciA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgZyA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgYiA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgaSwgY29sb3I7XG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgY29sb3IgPSBjb2xvclJnYihjb2xvcnNbaV0pO1xuICAgICAgcltpXSA9IGNvbG9yLnIgfHwgMDtcbiAgICAgIGdbaV0gPSBjb2xvci5nIHx8IDA7XG4gICAgICBiW2ldID0gY29sb3IuYiB8fCAwO1xuICAgIH1cbiAgICByID0gc3BsaW5lKHIpO1xuICAgIGcgPSBzcGxpbmUoZyk7XG4gICAgYiA9IHNwbGluZShiKTtcbiAgICBjb2xvci5vcGFjaXR5ID0gMTtcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgY29sb3IuciA9IHIodCk7XG4gICAgICBjb2xvci5nID0gZyh0KTtcbiAgICAgIGNvbG9yLmIgPSBiKHQpO1xuICAgICAgcmV0dXJuIGNvbG9yICsgXCJcIjtcbiAgICB9O1xuICB9O1xufVxuXG5leHBvcnQgdmFyIHJnYkJhc2lzID0gcmdiU3BsaW5lKGJhc2lzKTtcbmV4cG9ydCB2YXIgcmdiQmFzaXNDbG9zZWQgPSByZ2JTcGxpbmUoYmFzaXNDbG9zZWQpO1xuIiwgImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgaWYgKCFiKSBiID0gW107XG4gIHZhciBuID0gYSA/IE1hdGgubWluKGIubGVuZ3RoLCBhLmxlbmd0aCkgOiAwLFxuICAgICAgYyA9IGIuc2xpY2UoKSxcbiAgICAgIGk7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkgY1tpXSA9IGFbaV0gKiAoMSAtIHQpICsgYltpXSAqIHQ7XG4gICAgcmV0dXJuIGM7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc051bWJlckFycmF5KHgpIHtcbiAgcmV0dXJuIEFycmF5QnVmZmVyLmlzVmlldyh4KSAmJiAhKHggaW5zdGFuY2VvZiBEYXRhVmlldyk7XG59XG4iLCAiaW1wb3J0IHZhbHVlIGZyb20gXCIuL3ZhbHVlLmpzXCI7XG5pbXBvcnQgbnVtYmVyQXJyYXksIHtpc051bWJlckFycmF5fSBmcm9tIFwiLi9udW1iZXJBcnJheS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHJldHVybiAoaXNOdW1iZXJBcnJheShiKSA/IG51bWJlckFycmF5IDogZ2VuZXJpY0FycmF5KShhLCBiKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyaWNBcnJheShhLCBiKSB7XG4gIHZhciBuYiA9IGIgPyBiLmxlbmd0aCA6IDAsXG4gICAgICBuYSA9IGEgPyBNYXRoLm1pbihuYiwgYS5sZW5ndGgpIDogMCxcbiAgICAgIHggPSBuZXcgQXJyYXkobmEpLFxuICAgICAgYyA9IG5ldyBBcnJheShuYiksXG4gICAgICBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBuYTsgKytpKSB4W2ldID0gdmFsdWUoYVtpXSwgYltpXSk7XG4gIGZvciAoOyBpIDwgbmI7ICsraSkgY1tpXSA9IGJbaV07XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbmE7ICsraSkgY1tpXSA9IHhbaV0odCk7XG4gICAgcmV0dXJuIGM7XG4gIH07XG59XG4iLCAiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICB2YXIgZCA9IG5ldyBEYXRlO1xuICByZXR1cm4gYSA9ICthLCBiID0gK2IsIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gZC5zZXRUaW1lKGEgKiAoMSAtIHQpICsgYiAqIHQpLCBkO1xuICB9O1xufVxuIiwgImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgcmV0dXJuIGEgPSArYSwgYiA9ICtiLCBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIGEgKiAoMSAtIHQpICsgYiAqIHQ7XG4gIH07XG59XG4iLCAiaW1wb3J0IHZhbHVlIGZyb20gXCIuL3ZhbHVlLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgdmFyIGkgPSB7fSxcbiAgICAgIGMgPSB7fSxcbiAgICAgIGs7XG5cbiAgaWYgKGEgPT09IG51bGwgfHwgdHlwZW9mIGEgIT09IFwib2JqZWN0XCIpIGEgPSB7fTtcbiAgaWYgKGIgPT09IG51bGwgfHwgdHlwZW9mIGIgIT09IFwib2JqZWN0XCIpIGIgPSB7fTtcblxuICBmb3IgKGsgaW4gYikge1xuICAgIGlmIChrIGluIGEpIHtcbiAgICAgIGlba10gPSB2YWx1ZShhW2tdLCBiW2tdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY1trXSA9IGJba107XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICBmb3IgKGsgaW4gaSkgY1trXSA9IGlba10odCk7XG4gICAgcmV0dXJuIGM7XG4gIH07XG59XG4iLCAiaW1wb3J0IG51bWJlciBmcm9tIFwiLi9udW1iZXIuanNcIjtcblxudmFyIHJlQSA9IC9bLStdPyg/OlxcZCtcXC4/XFxkKnxcXC4/XFxkKykoPzpbZUVdWy0rXT9cXGQrKT8vZyxcbiAgICByZUIgPSBuZXcgUmVnRXhwKHJlQS5zb3VyY2UsIFwiZ1wiKTtcblxuZnVuY3Rpb24gemVybyhiKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gYjtcbiAgfTtcbn1cblxuZnVuY3Rpb24gb25lKGIpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gYih0KSArIFwiXCI7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgdmFyIGJpID0gcmVBLmxhc3RJbmRleCA9IHJlQi5sYXN0SW5kZXggPSAwLCAvLyBzY2FuIGluZGV4IGZvciBuZXh0IG51bWJlciBpbiBiXG4gICAgICBhbSwgLy8gY3VycmVudCBtYXRjaCBpbiBhXG4gICAgICBibSwgLy8gY3VycmVudCBtYXRjaCBpbiBiXG4gICAgICBicywgLy8gc3RyaW5nIHByZWNlZGluZyBjdXJyZW50IG51bWJlciBpbiBiLCBpZiBhbnlcbiAgICAgIGkgPSAtMSwgLy8gaW5kZXggaW4gc1xuICAgICAgcyA9IFtdLCAvLyBzdHJpbmcgY29uc3RhbnRzIGFuZCBwbGFjZWhvbGRlcnNcbiAgICAgIHEgPSBbXTsgLy8gbnVtYmVyIGludGVycG9sYXRvcnNcblxuICAvLyBDb2VyY2UgaW5wdXRzIHRvIHN0cmluZ3MuXG4gIGEgPSBhICsgXCJcIiwgYiA9IGIgKyBcIlwiO1xuXG4gIC8vIEludGVycG9sYXRlIHBhaXJzIG9mIG51bWJlcnMgaW4gYSAmIGIuXG4gIHdoaWxlICgoYW0gPSByZUEuZXhlYyhhKSlcbiAgICAgICYmIChibSA9IHJlQi5leGVjKGIpKSkge1xuICAgIGlmICgoYnMgPSBibS5pbmRleCkgPiBiaSkgeyAvLyBhIHN0cmluZyBwcmVjZWRlcyB0aGUgbmV4dCBudW1iZXIgaW4gYlxuICAgICAgYnMgPSBiLnNsaWNlKGJpLCBicyk7XG4gICAgICBpZiAoc1tpXSkgc1tpXSArPSBiczsgLy8gY29hbGVzY2Ugd2l0aCBwcmV2aW91cyBzdHJpbmdcbiAgICAgIGVsc2Ugc1srK2ldID0gYnM7XG4gICAgfVxuICAgIGlmICgoYW0gPSBhbVswXSkgPT09IChibSA9IGJtWzBdKSkgeyAvLyBudW1iZXJzIGluIGEgJiBiIG1hdGNoXG4gICAgICBpZiAoc1tpXSkgc1tpXSArPSBibTsgLy8gY29hbGVzY2Ugd2l0aCBwcmV2aW91cyBzdHJpbmdcbiAgICAgIGVsc2Ugc1srK2ldID0gYm07XG4gICAgfSBlbHNlIHsgLy8gaW50ZXJwb2xhdGUgbm9uLW1hdGNoaW5nIG51bWJlcnNcbiAgICAgIHNbKytpXSA9IG51bGw7XG4gICAgICBxLnB1c2goe2k6IGksIHg6IG51bWJlcihhbSwgYm0pfSk7XG4gICAgfVxuICAgIGJpID0gcmVCLmxhc3RJbmRleDtcbiAgfVxuXG4gIC8vIEFkZCByZW1haW5zIG9mIGIuXG4gIGlmIChiaSA8IGIubGVuZ3RoKSB7XG4gICAgYnMgPSBiLnNsaWNlKGJpKTtcbiAgICBpZiAoc1tpXSkgc1tpXSArPSBiczsgLy8gY29hbGVzY2Ugd2l0aCBwcmV2aW91cyBzdHJpbmdcbiAgICBlbHNlIHNbKytpXSA9IGJzO1xuICB9XG5cbiAgLy8gU3BlY2lhbCBvcHRpbWl6YXRpb24gZm9yIG9ubHkgYSBzaW5nbGUgbWF0Y2guXG4gIC8vIE90aGVyd2lzZSwgaW50ZXJwb2xhdGUgZWFjaCBvZiB0aGUgbnVtYmVycyBhbmQgcmVqb2luIHRoZSBzdHJpbmcuXG4gIHJldHVybiBzLmxlbmd0aCA8IDIgPyAocVswXVxuICAgICAgPyBvbmUocVswXS54KVxuICAgICAgOiB6ZXJvKGIpKVxuICAgICAgOiAoYiA9IHEubGVuZ3RoLCBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDAsIG87IGkgPCBiOyArK2kpIHNbKG8gPSBxW2ldKS5pXSA9IG8ueCh0KTtcbiAgICAgICAgICByZXR1cm4gcy5qb2luKFwiXCIpO1xuICAgICAgICB9KTtcbn1cbiIsICJpbXBvcnQge2NvbG9yfSBmcm9tIFwiZDMtY29sb3JcIjtcbmltcG9ydCByZ2IgZnJvbSBcIi4vcmdiLmpzXCI7XG5pbXBvcnQge2dlbmVyaWNBcnJheX0gZnJvbSBcIi4vYXJyYXkuanNcIjtcbmltcG9ydCBkYXRlIGZyb20gXCIuL2RhdGUuanNcIjtcbmltcG9ydCBudW1iZXIgZnJvbSBcIi4vbnVtYmVyLmpzXCI7XG5pbXBvcnQgb2JqZWN0IGZyb20gXCIuL29iamVjdC5qc1wiO1xuaW1wb3J0IHN0cmluZyBmcm9tIFwiLi9zdHJpbmcuanNcIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudC5qc1wiO1xuaW1wb3J0IG51bWJlckFycmF5LCB7aXNOdW1iZXJBcnJheX0gZnJvbSBcIi4vbnVtYmVyQXJyYXkuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICB2YXIgdCA9IHR5cGVvZiBiLCBjO1xuICByZXR1cm4gYiA9PSBudWxsIHx8IHQgPT09IFwiYm9vbGVhblwiID8gY29uc3RhbnQoYilcbiAgICAgIDogKHQgPT09IFwibnVtYmVyXCIgPyBudW1iZXJcbiAgICAgIDogdCA9PT0gXCJzdHJpbmdcIiA/ICgoYyA9IGNvbG9yKGIpKSA/IChiID0gYywgcmdiKSA6IHN0cmluZylcbiAgICAgIDogYiBpbnN0YW5jZW9mIGNvbG9yID8gcmdiXG4gICAgICA6IGIgaW5zdGFuY2VvZiBEYXRlID8gZGF0ZVxuICAgICAgOiBpc051bWJlckFycmF5KGIpID8gbnVtYmVyQXJyYXlcbiAgICAgIDogQXJyYXkuaXNBcnJheShiKSA/IGdlbmVyaWNBcnJheVxuICAgICAgOiB0eXBlb2YgYi52YWx1ZU9mICE9PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIGIudG9TdHJpbmcgIT09IFwiZnVuY3Rpb25cIiB8fCBpc05hTihiKSA/IG9iamVjdFxuICAgICAgOiBudW1iZXIpKGEsIGIpO1xufVxuIiwgImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgcmV0dXJuIGEgPSArYSwgYiA9ICtiLCBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQoYSAqICgxIC0gdCkgKyBiICogdCk7XG4gIH07XG59XG4iLCAidmFyIGRlZ3JlZXMgPSAxODAgLyBNYXRoLlBJO1xuXG5leHBvcnQgdmFyIGlkZW50aXR5ID0ge1xuICB0cmFuc2xhdGVYOiAwLFxuICB0cmFuc2xhdGVZOiAwLFxuICByb3RhdGU6IDAsXG4gIHNrZXdYOiAwLFxuICBzY2FsZVg6IDEsXG4gIHNjYWxlWTogMVxufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYiwgYywgZCwgZSwgZikge1xuICB2YXIgc2NhbGVYLCBzY2FsZVksIHNrZXdYO1xuICBpZiAoc2NhbGVYID0gTWF0aC5zcXJ0KGEgKiBhICsgYiAqIGIpKSBhIC89IHNjYWxlWCwgYiAvPSBzY2FsZVg7XG4gIGlmIChza2V3WCA9IGEgKiBjICsgYiAqIGQpIGMgLT0gYSAqIHNrZXdYLCBkIC09IGIgKiBza2V3WDtcbiAgaWYgKHNjYWxlWSA9IE1hdGguc3FydChjICogYyArIGQgKiBkKSkgYyAvPSBzY2FsZVksIGQgLz0gc2NhbGVZLCBza2V3WCAvPSBzY2FsZVk7XG4gIGlmIChhICogZCA8IGIgKiBjKSBhID0gLWEsIGIgPSAtYiwgc2tld1ggPSAtc2tld1gsIHNjYWxlWCA9IC1zY2FsZVg7XG4gIHJldHVybiB7XG4gICAgdHJhbnNsYXRlWDogZSxcbiAgICB0cmFuc2xhdGVZOiBmLFxuICAgIHJvdGF0ZTogTWF0aC5hdGFuMihiLCBhKSAqIGRlZ3JlZXMsXG4gICAgc2tld1g6IE1hdGguYXRhbihza2V3WCkgKiBkZWdyZWVzLFxuICAgIHNjYWxlWDogc2NhbGVYLFxuICAgIHNjYWxlWTogc2NhbGVZXG4gIH07XG59XG4iLCAiaW1wb3J0IGRlY29tcG9zZSwge2lkZW50aXR5fSBmcm9tIFwiLi9kZWNvbXBvc2UuanNcIjtcblxudmFyIHN2Z05vZGU7XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXVuZGVmICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VDc3ModmFsdWUpIHtcbiAgY29uc3QgbSA9IG5ldyAodHlwZW9mIERPTU1hdHJpeCA9PT0gXCJmdW5jdGlvblwiID8gRE9NTWF0cml4IDogV2ViS2l0Q1NTTWF0cml4KSh2YWx1ZSArIFwiXCIpO1xuICByZXR1cm4gbS5pc0lkZW50aXR5ID8gaWRlbnRpdHkgOiBkZWNvbXBvc2UobS5hLCBtLmIsIG0uYywgbS5kLCBtLmUsIG0uZik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVN2Zyh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT0gbnVsbCkgcmV0dXJuIGlkZW50aXR5O1xuICBpZiAoIXN2Z05vZGUpIHN2Z05vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLCBcImdcIik7XG4gIHN2Z05vZGUuc2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIsIHZhbHVlKTtcbiAgaWYgKCEodmFsdWUgPSBzdmdOb2RlLnRyYW5zZm9ybS5iYXNlVmFsLmNvbnNvbGlkYXRlKCkpKSByZXR1cm4gaWRlbnRpdHk7XG4gIHZhbHVlID0gdmFsdWUubWF0cml4O1xuICByZXR1cm4gZGVjb21wb3NlKHZhbHVlLmEsIHZhbHVlLmIsIHZhbHVlLmMsIHZhbHVlLmQsIHZhbHVlLmUsIHZhbHVlLmYpO1xufVxuIiwgImltcG9ydCBudW1iZXIgZnJvbSBcIi4uL251bWJlci5qc1wiO1xuaW1wb3J0IHtwYXJzZUNzcywgcGFyc2VTdmd9IGZyb20gXCIuL3BhcnNlLmpzXCI7XG5cbmZ1bmN0aW9uIGludGVycG9sYXRlVHJhbnNmb3JtKHBhcnNlLCBweENvbW1hLCBweFBhcmVuLCBkZWdQYXJlbikge1xuXG4gIGZ1bmN0aW9uIHBvcChzKSB7XG4gICAgcmV0dXJuIHMubGVuZ3RoID8gcy5wb3AoKSArIFwiIFwiIDogXCJcIjtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYW5zbGF0ZSh4YSwgeWEsIHhiLCB5YiwgcywgcSkge1xuICAgIGlmICh4YSAhPT0geGIgfHwgeWEgIT09IHliKSB7XG4gICAgICB2YXIgaSA9IHMucHVzaChcInRyYW5zbGF0ZShcIiwgbnVsbCwgcHhDb21tYSwgbnVsbCwgcHhQYXJlbik7XG4gICAgICBxLnB1c2goe2k6IGkgLSA0LCB4OiBudW1iZXIoeGEsIHhiKX0sIHtpOiBpIC0gMiwgeDogbnVtYmVyKHlhLCB5Yil9KTtcbiAgICB9IGVsc2UgaWYgKHhiIHx8IHliKSB7XG4gICAgICBzLnB1c2goXCJ0cmFuc2xhdGUoXCIgKyB4YiArIHB4Q29tbWEgKyB5YiArIHB4UGFyZW4pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJvdGF0ZShhLCBiLCBzLCBxKSB7XG4gICAgaWYgKGEgIT09IGIpIHtcbiAgICAgIGlmIChhIC0gYiA+IDE4MCkgYiArPSAzNjA7IGVsc2UgaWYgKGIgLSBhID4gMTgwKSBhICs9IDM2MDsgLy8gc2hvcnRlc3QgcGF0aFxuICAgICAgcS5wdXNoKHtpOiBzLnB1c2gocG9wKHMpICsgXCJyb3RhdGUoXCIsIG51bGwsIGRlZ1BhcmVuKSAtIDIsIHg6IG51bWJlcihhLCBiKX0pO1xuICAgIH0gZWxzZSBpZiAoYikge1xuICAgICAgcy5wdXNoKHBvcChzKSArIFwicm90YXRlKFwiICsgYiArIGRlZ1BhcmVuKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBza2V3WChhLCBiLCBzLCBxKSB7XG4gICAgaWYgKGEgIT09IGIpIHtcbiAgICAgIHEucHVzaCh7aTogcy5wdXNoKHBvcChzKSArIFwic2tld1goXCIsIG51bGwsIGRlZ1BhcmVuKSAtIDIsIHg6IG51bWJlcihhLCBiKX0pO1xuICAgIH0gZWxzZSBpZiAoYikge1xuICAgICAgcy5wdXNoKHBvcChzKSArIFwic2tld1goXCIgKyBiICsgZGVnUGFyZW4pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNjYWxlKHhhLCB5YSwgeGIsIHliLCBzLCBxKSB7XG4gICAgaWYgKHhhICE9PSB4YiB8fCB5YSAhPT0geWIpIHtcbiAgICAgIHZhciBpID0gcy5wdXNoKHBvcChzKSArIFwic2NhbGUoXCIsIG51bGwsIFwiLFwiLCBudWxsLCBcIilcIik7XG4gICAgICBxLnB1c2goe2k6IGkgLSA0LCB4OiBudW1iZXIoeGEsIHhiKX0sIHtpOiBpIC0gMiwgeDogbnVtYmVyKHlhLCB5Yil9KTtcbiAgICB9IGVsc2UgaWYgKHhiICE9PSAxIHx8IHliICE9PSAxKSB7XG4gICAgICBzLnB1c2gocG9wKHMpICsgXCJzY2FsZShcIiArIHhiICsgXCIsXCIgKyB5YiArIFwiKVwiKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24oYSwgYikge1xuICAgIHZhciBzID0gW10sIC8vIHN0cmluZyBjb25zdGFudHMgYW5kIHBsYWNlaG9sZGVyc1xuICAgICAgICBxID0gW107IC8vIG51bWJlciBpbnRlcnBvbGF0b3JzXG4gICAgYSA9IHBhcnNlKGEpLCBiID0gcGFyc2UoYik7XG4gICAgdHJhbnNsYXRlKGEudHJhbnNsYXRlWCwgYS50cmFuc2xhdGVZLCBiLnRyYW5zbGF0ZVgsIGIudHJhbnNsYXRlWSwgcywgcSk7XG4gICAgcm90YXRlKGEucm90YXRlLCBiLnJvdGF0ZSwgcywgcSk7XG4gICAgc2tld1goYS5za2V3WCwgYi5za2V3WCwgcywgcSk7XG4gICAgc2NhbGUoYS5zY2FsZVgsIGEuc2NhbGVZLCBiLnNjYWxlWCwgYi5zY2FsZVksIHMsIHEpO1xuICAgIGEgPSBiID0gbnVsbDsgLy8gZ2NcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgdmFyIGkgPSAtMSwgbiA9IHEubGVuZ3RoLCBvO1xuICAgICAgd2hpbGUgKCsraSA8IG4pIHNbKG8gPSBxW2ldKS5pXSA9IG8ueCh0KTtcbiAgICAgIHJldHVybiBzLmpvaW4oXCJcIik7XG4gICAgfTtcbiAgfTtcbn1cblxuZXhwb3J0IHZhciBpbnRlcnBvbGF0ZVRyYW5zZm9ybUNzcyA9IGludGVycG9sYXRlVHJhbnNmb3JtKHBhcnNlQ3NzLCBcInB4LCBcIiwgXCJweClcIiwgXCJkZWcpXCIpO1xuZXhwb3J0IHZhciBpbnRlcnBvbGF0ZVRyYW5zZm9ybVN2ZyA9IGludGVycG9sYXRlVHJhbnNmb3JtKHBhcnNlU3ZnLCBcIiwgXCIsIFwiKVwiLCBcIilcIik7XG4iLCAidmFyIGVwc2lsb24yID0gMWUtMTI7XG5cbmZ1bmN0aW9uIGNvc2goeCkge1xuICByZXR1cm4gKCh4ID0gTWF0aC5leHAoeCkpICsgMSAvIHgpIC8gMjtcbn1cblxuZnVuY3Rpb24gc2luaCh4KSB7XG4gIHJldHVybiAoKHggPSBNYXRoLmV4cCh4KSkgLSAxIC8geCkgLyAyO1xufVxuXG5mdW5jdGlvbiB0YW5oKHgpIHtcbiAgcmV0dXJuICgoeCA9IE1hdGguZXhwKDIgKiB4KSkgLSAxKSAvICh4ICsgMSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiB6b29tUmhvKHJobywgcmhvMiwgcmhvNCkge1xuXG4gIC8vIHAwID0gW3V4MCwgdXkwLCB3MF1cbiAgLy8gcDEgPSBbdXgxLCB1eTEsIHcxXVxuICBmdW5jdGlvbiB6b29tKHAwLCBwMSkge1xuICAgIHZhciB1eDAgPSBwMFswXSwgdXkwID0gcDBbMV0sIHcwID0gcDBbMl0sXG4gICAgICAgIHV4MSA9IHAxWzBdLCB1eTEgPSBwMVsxXSwgdzEgPSBwMVsyXSxcbiAgICAgICAgZHggPSB1eDEgLSB1eDAsXG4gICAgICAgIGR5ID0gdXkxIC0gdXkwLFxuICAgICAgICBkMiA9IGR4ICogZHggKyBkeSAqIGR5LFxuICAgICAgICBpLFxuICAgICAgICBTO1xuXG4gICAgLy8gU3BlY2lhbCBjYXNlIGZvciB1MCBcdTIyNDUgdTEuXG4gICAgaWYgKGQyIDwgZXBzaWxvbjIpIHtcbiAgICAgIFMgPSBNYXRoLmxvZyh3MSAvIHcwKSAvIHJobztcbiAgICAgIGkgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgdXgwICsgdCAqIGR4LFxuICAgICAgICAgIHV5MCArIHQgKiBkeSxcbiAgICAgICAgICB3MCAqIE1hdGguZXhwKHJobyAqIHQgKiBTKVxuICAgICAgICBdO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEdlbmVyYWwgY2FzZS5cbiAgICBlbHNlIHtcbiAgICAgIHZhciBkMSA9IE1hdGguc3FydChkMiksXG4gICAgICAgICAgYjAgPSAodzEgKiB3MSAtIHcwICogdzAgKyByaG80ICogZDIpIC8gKDIgKiB3MCAqIHJobzIgKiBkMSksXG4gICAgICAgICAgYjEgPSAodzEgKiB3MSAtIHcwICogdzAgLSByaG80ICogZDIpIC8gKDIgKiB3MSAqIHJobzIgKiBkMSksXG4gICAgICAgICAgcjAgPSBNYXRoLmxvZyhNYXRoLnNxcnQoYjAgKiBiMCArIDEpIC0gYjApLFxuICAgICAgICAgIHIxID0gTWF0aC5sb2coTWF0aC5zcXJ0KGIxICogYjEgKyAxKSAtIGIxKTtcbiAgICAgIFMgPSAocjEgLSByMCkgLyByaG87XG4gICAgICBpID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgcyA9IHQgKiBTLFxuICAgICAgICAgICAgY29zaHIwID0gY29zaChyMCksXG4gICAgICAgICAgICB1ID0gdzAgLyAocmhvMiAqIGQxKSAqIChjb3NocjAgKiB0YW5oKHJobyAqIHMgKyByMCkgLSBzaW5oKHIwKSk7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgdXgwICsgdSAqIGR4LFxuICAgICAgICAgIHV5MCArIHUgKiBkeSxcbiAgICAgICAgICB3MCAqIGNvc2hyMCAvIGNvc2gocmhvICogcyArIHIwKVxuICAgICAgICBdO1xuICAgICAgfVxuICAgIH1cblxuICAgIGkuZHVyYXRpb24gPSBTICogMTAwMCAqIHJobyAvIE1hdGguU1FSVDI7XG5cbiAgICByZXR1cm4gaTtcbiAgfVxuXG4gIHpvb20ucmhvID0gZnVuY3Rpb24oXykge1xuICAgIHZhciBfMSA9IE1hdGgubWF4KDFlLTMsICtfKSwgXzIgPSBfMSAqIF8xLCBfNCA9IF8yICogXzI7XG4gICAgcmV0dXJuIHpvb21SaG8oXzEsIF8yLCBfNCk7XG4gIH07XG5cbiAgcmV0dXJuIHpvb207XG59KShNYXRoLlNRUlQyLCAyLCA0KTtcbiIsICJ2YXIgZnJhbWUgPSAwLCAvLyBpcyBhbiBhbmltYXRpb24gZnJhbWUgcGVuZGluZz9cbiAgICB0aW1lb3V0ID0gMCwgLy8gaXMgYSB0aW1lb3V0IHBlbmRpbmc/XG4gICAgaW50ZXJ2YWwgPSAwLCAvLyBhcmUgYW55IHRpbWVycyBhY3RpdmU/XG4gICAgcG9rZURlbGF5ID0gMTAwMCwgLy8gaG93IGZyZXF1ZW50bHkgd2UgY2hlY2sgZm9yIGNsb2NrIHNrZXdcbiAgICB0YXNrSGVhZCxcbiAgICB0YXNrVGFpbCxcbiAgICBjbG9ja0xhc3QgPSAwLFxuICAgIGNsb2NrTm93ID0gMCxcbiAgICBjbG9ja1NrZXcgPSAwLFxuICAgIGNsb2NrID0gdHlwZW9mIHBlcmZvcm1hbmNlID09PSBcIm9iamVjdFwiICYmIHBlcmZvcm1hbmNlLm5vdyA/IHBlcmZvcm1hbmNlIDogRGF0ZSxcbiAgICBzZXRGcmFtZSA9IHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIgJiYgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSA/IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUuYmluZCh3aW5kb3cpIDogZnVuY3Rpb24oZikgeyBzZXRUaW1lb3V0KGYsIDE3KTsgfTtcblxuZXhwb3J0IGZ1bmN0aW9uIG5vdygpIHtcbiAgcmV0dXJuIGNsb2NrTm93IHx8IChzZXRGcmFtZShjbGVhck5vdyksIGNsb2NrTm93ID0gY2xvY2subm93KCkgKyBjbG9ja1NrZXcpO1xufVxuXG5mdW5jdGlvbiBjbGVhck5vdygpIHtcbiAgY2xvY2tOb3cgPSAwO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gVGltZXIoKSB7XG4gIHRoaXMuX2NhbGwgPVxuICB0aGlzLl90aW1lID1cbiAgdGhpcy5fbmV4dCA9IG51bGw7XG59XG5cblRpbWVyLnByb3RvdHlwZSA9IHRpbWVyLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IFRpbWVyLFxuICByZXN0YXJ0OiBmdW5jdGlvbihjYWxsYmFjaywgZGVsYXksIHRpbWUpIHtcbiAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJjYWxsYmFjayBpcyBub3QgYSBmdW5jdGlvblwiKTtcbiAgICB0aW1lID0gKHRpbWUgPT0gbnVsbCA/IG5vdygpIDogK3RpbWUpICsgKGRlbGF5ID09IG51bGwgPyAwIDogK2RlbGF5KTtcbiAgICBpZiAoIXRoaXMuX25leHQgJiYgdGFza1RhaWwgIT09IHRoaXMpIHtcbiAgICAgIGlmICh0YXNrVGFpbCkgdGFza1RhaWwuX25leHQgPSB0aGlzO1xuICAgICAgZWxzZSB0YXNrSGVhZCA9IHRoaXM7XG4gICAgICB0YXNrVGFpbCA9IHRoaXM7XG4gICAgfVxuICAgIHRoaXMuX2NhbGwgPSBjYWxsYmFjaztcbiAgICB0aGlzLl90aW1lID0gdGltZTtcbiAgICBzbGVlcCgpO1xuICB9LFxuICBzdG9wOiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5fY2FsbCkge1xuICAgICAgdGhpcy5fY2FsbCA9IG51bGw7XG4gICAgICB0aGlzLl90aW1lID0gSW5maW5pdHk7XG4gICAgICBzbGVlcCgpO1xuICAgIH1cbiAgfVxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIHRpbWVyKGNhbGxiYWNrLCBkZWxheSwgdGltZSkge1xuICB2YXIgdCA9IG5ldyBUaW1lcjtcbiAgdC5yZXN0YXJ0KGNhbGxiYWNrLCBkZWxheSwgdGltZSk7XG4gIHJldHVybiB0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGltZXJGbHVzaCgpIHtcbiAgbm93KCk7IC8vIEdldCB0aGUgY3VycmVudCB0aW1lLCBpZiBub3QgYWxyZWFkeSBzZXQuXG4gICsrZnJhbWU7IC8vIFByZXRlbmQgd2VcdTIwMTl2ZSBzZXQgYW4gYWxhcm0sIGlmIHdlIGhhdmVuXHUyMDE5dCBhbHJlYWR5LlxuICB2YXIgdCA9IHRhc2tIZWFkLCBlO1xuICB3aGlsZSAodCkge1xuICAgIGlmICgoZSA9IGNsb2NrTm93IC0gdC5fdGltZSkgPj0gMCkgdC5fY2FsbC5jYWxsKHVuZGVmaW5lZCwgZSk7XG4gICAgdCA9IHQuX25leHQ7XG4gIH1cbiAgLS1mcmFtZTtcbn1cblxuZnVuY3Rpb24gd2FrZSgpIHtcbiAgY2xvY2tOb3cgPSAoY2xvY2tMYXN0ID0gY2xvY2subm93KCkpICsgY2xvY2tTa2V3O1xuICBmcmFtZSA9IHRpbWVvdXQgPSAwO1xuICB0cnkge1xuICAgIHRpbWVyRmx1c2goKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBmcmFtZSA9IDA7XG4gICAgbmFwKCk7XG4gICAgY2xvY2tOb3cgPSAwO1xuICB9XG59XG5cbmZ1bmN0aW9uIHBva2UoKSB7XG4gIHZhciBub3cgPSBjbG9jay5ub3coKSwgZGVsYXkgPSBub3cgLSBjbG9ja0xhc3Q7XG4gIGlmIChkZWxheSA+IHBva2VEZWxheSkgY2xvY2tTa2V3IC09IGRlbGF5LCBjbG9ja0xhc3QgPSBub3c7XG59XG5cbmZ1bmN0aW9uIG5hcCgpIHtcbiAgdmFyIHQwLCB0MSA9IHRhc2tIZWFkLCB0MiwgdGltZSA9IEluZmluaXR5O1xuICB3aGlsZSAodDEpIHtcbiAgICBpZiAodDEuX2NhbGwpIHtcbiAgICAgIGlmICh0aW1lID4gdDEuX3RpbWUpIHRpbWUgPSB0MS5fdGltZTtcbiAgICAgIHQwID0gdDEsIHQxID0gdDEuX25leHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHQyID0gdDEuX25leHQsIHQxLl9uZXh0ID0gbnVsbDtcbiAgICAgIHQxID0gdDAgPyB0MC5fbmV4dCA9IHQyIDogdGFza0hlYWQgPSB0MjtcbiAgICB9XG4gIH1cbiAgdGFza1RhaWwgPSB0MDtcbiAgc2xlZXAodGltZSk7XG59XG5cbmZ1bmN0aW9uIHNsZWVwKHRpbWUpIHtcbiAgaWYgKGZyYW1lKSByZXR1cm47IC8vIFNvb25lc3QgYWxhcm0gYWxyZWFkeSBzZXQsIG9yIHdpbGwgYmUuXG4gIGlmICh0aW1lb3V0KSB0aW1lb3V0ID0gY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICB2YXIgZGVsYXkgPSB0aW1lIC0gY2xvY2tOb3c7IC8vIFN0cmljdGx5IGxlc3MgdGhhbiBpZiB3ZSByZWNvbXB1dGVkIGNsb2NrTm93LlxuICBpZiAoZGVsYXkgPiAyNCkge1xuICAgIGlmICh0aW1lIDwgSW5maW5pdHkpIHRpbWVvdXQgPSBzZXRUaW1lb3V0KHdha2UsIHRpbWUgLSBjbG9jay5ub3coKSAtIGNsb2NrU2tldyk7XG4gICAgaWYgKGludGVydmFsKSBpbnRlcnZhbCA9IGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWwpO1xuICB9IGVsc2Uge1xuICAgIGlmICghaW50ZXJ2YWwpIGNsb2NrTGFzdCA9IGNsb2NrLm5vdygpLCBpbnRlcnZhbCA9IHNldEludGVydmFsKHBva2UsIHBva2VEZWxheSk7XG4gICAgZnJhbWUgPSAxLCBzZXRGcmFtZSh3YWtlKTtcbiAgfVxufVxuIiwgImltcG9ydCB7VGltZXJ9IGZyb20gXCIuL3RpbWVyLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNhbGxiYWNrLCBkZWxheSwgdGltZSkge1xuICB2YXIgdCA9IG5ldyBUaW1lcjtcbiAgZGVsYXkgPSBkZWxheSA9PSBudWxsID8gMCA6ICtkZWxheTtcbiAgdC5yZXN0YXJ0KGVsYXBzZWQgPT4ge1xuICAgIHQuc3RvcCgpO1xuICAgIGNhbGxiYWNrKGVsYXBzZWQgKyBkZWxheSk7XG4gIH0sIGRlbGF5LCB0aW1lKTtcbiAgcmV0dXJuIHQ7XG59XG4iLCAiaW1wb3J0IHtkaXNwYXRjaH0gZnJvbSBcImQzLWRpc3BhdGNoXCI7XG5pbXBvcnQge3RpbWVyLCB0aW1lb3V0fSBmcm9tIFwiZDMtdGltZXJcIjtcblxudmFyIGVtcHR5T24gPSBkaXNwYXRjaChcInN0YXJ0XCIsIFwiZW5kXCIsIFwiY2FuY2VsXCIsIFwiaW50ZXJydXB0XCIpO1xudmFyIGVtcHR5VHdlZW4gPSBbXTtcblxuZXhwb3J0IHZhciBDUkVBVEVEID0gMDtcbmV4cG9ydCB2YXIgU0NIRURVTEVEID0gMTtcbmV4cG9ydCB2YXIgU1RBUlRJTkcgPSAyO1xuZXhwb3J0IHZhciBTVEFSVEVEID0gMztcbmV4cG9ydCB2YXIgUlVOTklORyA9IDQ7XG5leHBvcnQgdmFyIEVORElORyA9IDU7XG5leHBvcnQgdmFyIEVOREVEID0gNjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obm9kZSwgbmFtZSwgaWQsIGluZGV4LCBncm91cCwgdGltaW5nKSB7XG4gIHZhciBzY2hlZHVsZXMgPSBub2RlLl9fdHJhbnNpdGlvbjtcbiAgaWYgKCFzY2hlZHVsZXMpIG5vZGUuX190cmFuc2l0aW9uID0ge307XG4gIGVsc2UgaWYgKGlkIGluIHNjaGVkdWxlcykgcmV0dXJuO1xuICBjcmVhdGUobm9kZSwgaWQsIHtcbiAgICBuYW1lOiBuYW1lLFxuICAgIGluZGV4OiBpbmRleCwgLy8gRm9yIGNvbnRleHQgZHVyaW5nIGNhbGxiYWNrLlxuICAgIGdyb3VwOiBncm91cCwgLy8gRm9yIGNvbnRleHQgZHVyaW5nIGNhbGxiYWNrLlxuICAgIG9uOiBlbXB0eU9uLFxuICAgIHR3ZWVuOiBlbXB0eVR3ZWVuLFxuICAgIHRpbWU6IHRpbWluZy50aW1lLFxuICAgIGRlbGF5OiB0aW1pbmcuZGVsYXksXG4gICAgZHVyYXRpb246IHRpbWluZy5kdXJhdGlvbixcbiAgICBlYXNlOiB0aW1pbmcuZWFzZSxcbiAgICB0aW1lcjogbnVsbCxcbiAgICBzdGF0ZTogQ1JFQVRFRFxuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluaXQobm9kZSwgaWQpIHtcbiAgdmFyIHNjaGVkdWxlID0gZ2V0KG5vZGUsIGlkKTtcbiAgaWYgKHNjaGVkdWxlLnN0YXRlID4gQ1JFQVRFRCkgdGhyb3cgbmV3IEVycm9yKFwidG9vIGxhdGU7IGFscmVhZHkgc2NoZWR1bGVkXCIpO1xuICByZXR1cm4gc2NoZWR1bGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXQobm9kZSwgaWQpIHtcbiAgdmFyIHNjaGVkdWxlID0gZ2V0KG5vZGUsIGlkKTtcbiAgaWYgKHNjaGVkdWxlLnN0YXRlID4gU1RBUlRFRCkgdGhyb3cgbmV3IEVycm9yKFwidG9vIGxhdGU7IGFscmVhZHkgcnVubmluZ1wiKTtcbiAgcmV0dXJuIHNjaGVkdWxlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0KG5vZGUsIGlkKSB7XG4gIHZhciBzY2hlZHVsZSA9IG5vZGUuX190cmFuc2l0aW9uO1xuICBpZiAoIXNjaGVkdWxlIHx8ICEoc2NoZWR1bGUgPSBzY2hlZHVsZVtpZF0pKSB0aHJvdyBuZXcgRXJyb3IoXCJ0cmFuc2l0aW9uIG5vdCBmb3VuZFwiKTtcbiAgcmV0dXJuIHNjaGVkdWxlO1xufVxuXG5mdW5jdGlvbiBjcmVhdGUobm9kZSwgaWQsIHNlbGYpIHtcbiAgdmFyIHNjaGVkdWxlcyA9IG5vZGUuX190cmFuc2l0aW9uLFxuICAgICAgdHdlZW47XG5cbiAgLy8gSW5pdGlhbGl6ZSB0aGUgc2VsZiB0aW1lciB3aGVuIHRoZSB0cmFuc2l0aW9uIGlzIGNyZWF0ZWQuXG4gIC8vIE5vdGUgdGhlIGFjdHVhbCBkZWxheSBpcyBub3Qga25vd24gdW50aWwgdGhlIGZpcnN0IGNhbGxiYWNrIVxuICBzY2hlZHVsZXNbaWRdID0gc2VsZjtcbiAgc2VsZi50aW1lciA9IHRpbWVyKHNjaGVkdWxlLCAwLCBzZWxmLnRpbWUpO1xuXG4gIGZ1bmN0aW9uIHNjaGVkdWxlKGVsYXBzZWQpIHtcbiAgICBzZWxmLnN0YXRlID0gU0NIRURVTEVEO1xuICAgIHNlbGYudGltZXIucmVzdGFydChzdGFydCwgc2VsZi5kZWxheSwgc2VsZi50aW1lKTtcblxuICAgIC8vIElmIHRoZSBlbGFwc2VkIGRlbGF5IGlzIGxlc3MgdGhhbiBvdXIgZmlyc3Qgc2xlZXAsIHN0YXJ0IGltbWVkaWF0ZWx5LlxuICAgIGlmIChzZWxmLmRlbGF5IDw9IGVsYXBzZWQpIHN0YXJ0KGVsYXBzZWQgLSBzZWxmLmRlbGF5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHN0YXJ0KGVsYXBzZWQpIHtcbiAgICB2YXIgaSwgaiwgbiwgbztcblxuICAgIC8vIElmIHRoZSBzdGF0ZSBpcyBub3QgU0NIRURVTEVELCB0aGVuIHdlIHByZXZpb3VzbHkgZXJyb3JlZCBvbiBzdGFydC5cbiAgICBpZiAoc2VsZi5zdGF0ZSAhPT0gU0NIRURVTEVEKSByZXR1cm4gc3RvcCgpO1xuXG4gICAgZm9yIChpIGluIHNjaGVkdWxlcykge1xuICAgICAgbyA9IHNjaGVkdWxlc1tpXTtcbiAgICAgIGlmIChvLm5hbWUgIT09IHNlbGYubmFtZSkgY29udGludWU7XG5cbiAgICAgIC8vIFdoaWxlIHRoaXMgZWxlbWVudCBhbHJlYWR5IGhhcyBhIHN0YXJ0aW5nIHRyYW5zaXRpb24gZHVyaW5nIHRoaXMgZnJhbWUsXG4gICAgICAvLyBkZWZlciBzdGFydGluZyBhbiBpbnRlcnJ1cHRpbmcgdHJhbnNpdGlvbiB1bnRpbCB0aGF0IHRyYW5zaXRpb24gaGFzIGFcbiAgICAgIC8vIGNoYW5jZSB0byB0aWNrIChhbmQgcG9zc2libHkgZW5kKTsgc2VlIGQzL2QzLXRyYW5zaXRpb24jNTQhXG4gICAgICBpZiAoby5zdGF0ZSA9PT0gU1RBUlRFRCkgcmV0dXJuIHRpbWVvdXQoc3RhcnQpO1xuXG4gICAgICAvLyBJbnRlcnJ1cHQgdGhlIGFjdGl2ZSB0cmFuc2l0aW9uLCBpZiBhbnkuXG4gICAgICBpZiAoby5zdGF0ZSA9PT0gUlVOTklORykge1xuICAgICAgICBvLnN0YXRlID0gRU5ERUQ7XG4gICAgICAgIG8udGltZXIuc3RvcCgpO1xuICAgICAgICBvLm9uLmNhbGwoXCJpbnRlcnJ1cHRcIiwgbm9kZSwgbm9kZS5fX2RhdGFfXywgby5pbmRleCwgby5ncm91cCk7XG4gICAgICAgIGRlbGV0ZSBzY2hlZHVsZXNbaV07XG4gICAgICB9XG5cbiAgICAgIC8vIENhbmNlbCBhbnkgcHJlLWVtcHRlZCB0cmFuc2l0aW9ucy5cbiAgICAgIGVsc2UgaWYgKCtpIDwgaWQpIHtcbiAgICAgICAgby5zdGF0ZSA9IEVOREVEO1xuICAgICAgICBvLnRpbWVyLnN0b3AoKTtcbiAgICAgICAgby5vbi5jYWxsKFwiY2FuY2VsXCIsIG5vZGUsIG5vZGUuX19kYXRhX18sIG8uaW5kZXgsIG8uZ3JvdXApO1xuICAgICAgICBkZWxldGUgc2NoZWR1bGVzW2ldO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIERlZmVyIHRoZSBmaXJzdCB0aWNrIHRvIGVuZCBvZiB0aGUgY3VycmVudCBmcmFtZTsgc2VlIGQzL2QzIzE1NzYuXG4gICAgLy8gTm90ZSB0aGUgdHJhbnNpdGlvbiBtYXkgYmUgY2FuY2VsZWQgYWZ0ZXIgc3RhcnQgYW5kIGJlZm9yZSB0aGUgZmlyc3QgdGljayFcbiAgICAvLyBOb3RlIHRoaXMgbXVzdCBiZSBzY2hlZHVsZWQgYmVmb3JlIHRoZSBzdGFydCBldmVudDsgc2VlIGQzL2QzLXRyYW5zaXRpb24jMTYhXG4gICAgLy8gQXNzdW1pbmcgdGhpcyBpcyBzdWNjZXNzZnVsLCBzdWJzZXF1ZW50IGNhbGxiYWNrcyBnbyBzdHJhaWdodCB0byB0aWNrLlxuICAgIHRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoc2VsZi5zdGF0ZSA9PT0gU1RBUlRFRCkge1xuICAgICAgICBzZWxmLnN0YXRlID0gUlVOTklORztcbiAgICAgICAgc2VsZi50aW1lci5yZXN0YXJ0KHRpY2ssIHNlbGYuZGVsYXksIHNlbGYudGltZSk7XG4gICAgICAgIHRpY2soZWxhcHNlZCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBEaXNwYXRjaCB0aGUgc3RhcnQgZXZlbnQuXG4gICAgLy8gTm90ZSB0aGlzIG11c3QgYmUgZG9uZSBiZWZvcmUgdGhlIHR3ZWVuIGFyZSBpbml0aWFsaXplZC5cbiAgICBzZWxmLnN0YXRlID0gU1RBUlRJTkc7XG4gICAgc2VsZi5vbi5jYWxsKFwic3RhcnRcIiwgbm9kZSwgbm9kZS5fX2RhdGFfXywgc2VsZi5pbmRleCwgc2VsZi5ncm91cCk7XG4gICAgaWYgKHNlbGYuc3RhdGUgIT09IFNUQVJUSU5HKSByZXR1cm47IC8vIGludGVycnVwdGVkXG4gICAgc2VsZi5zdGF0ZSA9IFNUQVJURUQ7XG5cbiAgICAvLyBJbml0aWFsaXplIHRoZSB0d2VlbiwgZGVsZXRpbmcgbnVsbCB0d2Vlbi5cbiAgICB0d2VlbiA9IG5ldyBBcnJheShuID0gc2VsZi50d2Vlbi5sZW5ndGgpO1xuICAgIGZvciAoaSA9IDAsIGogPSAtMTsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG8gPSBzZWxmLnR3ZWVuW2ldLnZhbHVlLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgc2VsZi5pbmRleCwgc2VsZi5ncm91cCkpIHtcbiAgICAgICAgdHdlZW5bKytqXSA9IG87XG4gICAgICB9XG4gICAgfVxuICAgIHR3ZWVuLmxlbmd0aCA9IGogKyAxO1xuICB9XG5cbiAgZnVuY3Rpb24gdGljayhlbGFwc2VkKSB7XG4gICAgdmFyIHQgPSBlbGFwc2VkIDwgc2VsZi5kdXJhdGlvbiA/IHNlbGYuZWFzZS5jYWxsKG51bGwsIGVsYXBzZWQgLyBzZWxmLmR1cmF0aW9uKSA6IChzZWxmLnRpbWVyLnJlc3RhcnQoc3RvcCksIHNlbGYuc3RhdGUgPSBFTkRJTkcsIDEpLFxuICAgICAgICBpID0gLTEsXG4gICAgICAgIG4gPSB0d2Vlbi5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgdHdlZW5baV0uY2FsbChub2RlLCB0KTtcbiAgICB9XG5cbiAgICAvLyBEaXNwYXRjaCB0aGUgZW5kIGV2ZW50LlxuICAgIGlmIChzZWxmLnN0YXRlID09PSBFTkRJTkcpIHtcbiAgICAgIHNlbGYub24uY2FsbChcImVuZFwiLCBub2RlLCBub2RlLl9fZGF0YV9fLCBzZWxmLmluZGV4LCBzZWxmLmdyb3VwKTtcbiAgICAgIHN0b3AoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzdG9wKCkge1xuICAgIHNlbGYuc3RhdGUgPSBFTkRFRDtcbiAgICBzZWxmLnRpbWVyLnN0b3AoKTtcbiAgICBkZWxldGUgc2NoZWR1bGVzW2lkXTtcbiAgICBmb3IgKHZhciBpIGluIHNjaGVkdWxlcykgcmV0dXJuOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgZGVsZXRlIG5vZGUuX190cmFuc2l0aW9uO1xuICB9XG59XG4iLCAiaW1wb3J0IHtTVEFSVElORywgRU5ESU5HLCBFTkRFRH0gZnJvbSBcIi4vdHJhbnNpdGlvbi9zY2hlZHVsZS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihub2RlLCBuYW1lKSB7XG4gIHZhciBzY2hlZHVsZXMgPSBub2RlLl9fdHJhbnNpdGlvbixcbiAgICAgIHNjaGVkdWxlLFxuICAgICAgYWN0aXZlLFxuICAgICAgZW1wdHkgPSB0cnVlLFxuICAgICAgaTtcblxuICBpZiAoIXNjaGVkdWxlcykgcmV0dXJuO1xuXG4gIG5hbWUgPSBuYW1lID09IG51bGwgPyBudWxsIDogbmFtZSArIFwiXCI7XG5cbiAgZm9yIChpIGluIHNjaGVkdWxlcykge1xuICAgIGlmICgoc2NoZWR1bGUgPSBzY2hlZHVsZXNbaV0pLm5hbWUgIT09IG5hbWUpIHsgZW1wdHkgPSBmYWxzZTsgY29udGludWU7IH1cbiAgICBhY3RpdmUgPSBzY2hlZHVsZS5zdGF0ZSA+IFNUQVJUSU5HICYmIHNjaGVkdWxlLnN0YXRlIDwgRU5ESU5HO1xuICAgIHNjaGVkdWxlLnN0YXRlID0gRU5ERUQ7XG4gICAgc2NoZWR1bGUudGltZXIuc3RvcCgpO1xuICAgIHNjaGVkdWxlLm9uLmNhbGwoYWN0aXZlID8gXCJpbnRlcnJ1cHRcIiA6IFwiY2FuY2VsXCIsIG5vZGUsIG5vZGUuX19kYXRhX18sIHNjaGVkdWxlLmluZGV4LCBzY2hlZHVsZS5ncm91cCk7XG4gICAgZGVsZXRlIHNjaGVkdWxlc1tpXTtcbiAgfVxuXG4gIGlmIChlbXB0eSkgZGVsZXRlIG5vZGUuX190cmFuc2l0aW9uO1xufVxuIiwgImltcG9ydCBpbnRlcnJ1cHQgZnJvbSBcIi4uL2ludGVycnVwdC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lKSB7XG4gIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgaW50ZXJydXB0KHRoaXMsIG5hbWUpO1xuICB9KTtcbn1cbiIsICJpbXBvcnQge2dldCwgc2V0fSBmcm9tIFwiLi9zY2hlZHVsZS5qc1wiO1xuXG5mdW5jdGlvbiB0d2VlblJlbW92ZShpZCwgbmFtZSkge1xuICB2YXIgdHdlZW4wLCB0d2VlbjE7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2NoZWR1bGUgPSBzZXQodGhpcywgaWQpLFxuICAgICAgICB0d2VlbiA9IHNjaGVkdWxlLnR3ZWVuO1xuXG4gICAgLy8gSWYgdGhpcyBub2RlIHNoYXJlZCB0d2VlbiB3aXRoIHRoZSBwcmV2aW91cyBub2RlLFxuICAgIC8vIGp1c3QgYXNzaWduIHRoZSB1cGRhdGVkIHNoYXJlZCB0d2VlbiBhbmQgd2VcdTIwMTlyZSBkb25lIVxuICAgIC8vIE90aGVyd2lzZSwgY29weS1vbi13cml0ZS5cbiAgICBpZiAodHdlZW4gIT09IHR3ZWVuMCkge1xuICAgICAgdHdlZW4xID0gdHdlZW4wID0gdHdlZW47XG4gICAgICBmb3IgKHZhciBpID0gMCwgbiA9IHR3ZWVuMS5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgaWYgKHR3ZWVuMVtpXS5uYW1lID09PSBuYW1lKSB7XG4gICAgICAgICAgdHdlZW4xID0gdHdlZW4xLnNsaWNlKCk7XG4gICAgICAgICAgdHdlZW4xLnNwbGljZShpLCAxKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHNjaGVkdWxlLnR3ZWVuID0gdHdlZW4xO1xuICB9O1xufVxuXG5mdW5jdGlvbiB0d2VlbkZ1bmN0aW9uKGlkLCBuYW1lLCB2YWx1ZSkge1xuICB2YXIgdHdlZW4wLCB0d2VlbjE7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNjaGVkdWxlID0gc2V0KHRoaXMsIGlkKSxcbiAgICAgICAgdHdlZW4gPSBzY2hlZHVsZS50d2VlbjtcblxuICAgIC8vIElmIHRoaXMgbm9kZSBzaGFyZWQgdHdlZW4gd2l0aCB0aGUgcHJldmlvdXMgbm9kZSxcbiAgICAvLyBqdXN0IGFzc2lnbiB0aGUgdXBkYXRlZCBzaGFyZWQgdHdlZW4gYW5kIHdlXHUyMDE5cmUgZG9uZSFcbiAgICAvLyBPdGhlcndpc2UsIGNvcHktb24td3JpdGUuXG4gICAgaWYgKHR3ZWVuICE9PSB0d2VlbjApIHtcbiAgICAgIHR3ZWVuMSA9ICh0d2VlbjAgPSB0d2Vlbikuc2xpY2UoKTtcbiAgICAgIGZvciAodmFyIHQgPSB7bmFtZTogbmFtZSwgdmFsdWU6IHZhbHVlfSwgaSA9IDAsIG4gPSB0d2VlbjEubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGlmICh0d2VlbjFbaV0ubmFtZSA9PT0gbmFtZSkge1xuICAgICAgICAgIHR3ZWVuMVtpXSA9IHQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChpID09PSBuKSB0d2VlbjEucHVzaCh0KTtcbiAgICB9XG5cbiAgICBzY2hlZHVsZS50d2VlbiA9IHR3ZWVuMTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgdmFyIGlkID0gdGhpcy5faWQ7XG5cbiAgbmFtZSArPSBcIlwiO1xuXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgIHZhciB0d2VlbiA9IGdldCh0aGlzLm5vZGUoKSwgaWQpLnR3ZWVuO1xuICAgIGZvciAodmFyIGkgPSAwLCBuID0gdHdlZW4ubGVuZ3RoLCB0OyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoKHQgPSB0d2VlbltpXSkubmFtZSA9PT0gbmFtZSkge1xuICAgICAgICByZXR1cm4gdC52YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gdGhpcy5lYWNoKCh2YWx1ZSA9PSBudWxsID8gdHdlZW5SZW1vdmUgOiB0d2VlbkZ1bmN0aW9uKShpZCwgbmFtZSwgdmFsdWUpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHR3ZWVuVmFsdWUodHJhbnNpdGlvbiwgbmFtZSwgdmFsdWUpIHtcbiAgdmFyIGlkID0gdHJhbnNpdGlvbi5faWQ7XG5cbiAgdHJhbnNpdGlvbi5lYWNoKGZ1bmN0aW9uKCkge1xuICAgIHZhciBzY2hlZHVsZSA9IHNldCh0aGlzLCBpZCk7XG4gICAgKHNjaGVkdWxlLnZhbHVlIHx8IChzY2hlZHVsZS52YWx1ZSA9IHt9KSlbbmFtZV0gPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9KTtcblxuICByZXR1cm4gZnVuY3Rpb24obm9kZSkge1xuICAgIHJldHVybiBnZXQobm9kZSwgaWQpLnZhbHVlW25hbWVdO1xuICB9O1xufVxuIiwgImltcG9ydCB7Y29sb3J9IGZyb20gXCJkMy1jb2xvclwiO1xuaW1wb3J0IHtpbnRlcnBvbGF0ZU51bWJlciwgaW50ZXJwb2xhdGVSZ2IsIGludGVycG9sYXRlU3RyaW5nfSBmcm9tIFwiZDMtaW50ZXJwb2xhdGVcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICB2YXIgYztcbiAgcmV0dXJuICh0eXBlb2YgYiA9PT0gXCJudW1iZXJcIiA/IGludGVycG9sYXRlTnVtYmVyXG4gICAgICA6IGIgaW5zdGFuY2VvZiBjb2xvciA/IGludGVycG9sYXRlUmdiXG4gICAgICA6IChjID0gY29sb3IoYikpID8gKGIgPSBjLCBpbnRlcnBvbGF0ZVJnYilcbiAgICAgIDogaW50ZXJwb2xhdGVTdHJpbmcpKGEsIGIpO1xufVxuIiwgImltcG9ydCB7aW50ZXJwb2xhdGVUcmFuc2Zvcm1TdmcgYXMgaW50ZXJwb2xhdGVUcmFuc2Zvcm19IGZyb20gXCJkMy1pbnRlcnBvbGF0ZVwiO1xuaW1wb3J0IHtuYW1lc3BhY2V9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7dHdlZW5WYWx1ZX0gZnJvbSBcIi4vdHdlZW4uanNcIjtcbmltcG9ydCBpbnRlcnBvbGF0ZSBmcm9tIFwiLi9pbnRlcnBvbGF0ZS5qc1wiO1xuXG5mdW5jdGlvbiBhdHRyUmVtb3ZlKG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyUmVtb3ZlTlMoZnVsbG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckNvbnN0YW50KG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZTEpIHtcbiAgdmFyIHN0cmluZzAwLFxuICAgICAgc3RyaW5nMSA9IHZhbHVlMSArIFwiXCIsXG4gICAgICBpbnRlcnBvbGF0ZTA7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RyaW5nMCA9IHRoaXMuZ2V0QXR0cmlidXRlKG5hbWUpO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCB2YWx1ZTEpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyQ29uc3RhbnROUyhmdWxsbmFtZSwgaW50ZXJwb2xhdGUsIHZhbHVlMSkge1xuICB2YXIgc3RyaW5nMDAsXG4gICAgICBzdHJpbmcxID0gdmFsdWUxICsgXCJcIixcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdHJpbmcwID0gdGhpcy5nZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCB2YWx1ZTEpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyRnVuY3Rpb24obmFtZSwgaW50ZXJwb2xhdGUsIHZhbHVlKSB7XG4gIHZhciBzdHJpbmcwMCxcbiAgICAgIHN0cmluZzEwLFxuICAgICAgaW50ZXJwb2xhdGUwO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHN0cmluZzAsIHZhbHVlMSA9IHZhbHVlKHRoaXMpLCBzdHJpbmcxO1xuICAgIGlmICh2YWx1ZTEgPT0gbnVsbCkgcmV0dXJuIHZvaWQgdGhpcy5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgc3RyaW5nMCA9IHRoaXMuZ2V0QXR0cmlidXRlKG5hbWUpO1xuICAgIHN0cmluZzEgPSB2YWx1ZTEgKyBcIlwiO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwICYmIHN0cmluZzEgPT09IHN0cmluZzEwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogKHN0cmluZzEwID0gc3RyaW5nMSwgaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCB2YWx1ZTEpKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckZ1bmN0aW9uTlMoZnVsbG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZSkge1xuICB2YXIgc3RyaW5nMDAsXG4gICAgICBzdHJpbmcxMCxcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdHJpbmcwLCB2YWx1ZTEgPSB2YWx1ZSh0aGlzKSwgc3RyaW5nMTtcbiAgICBpZiAodmFsdWUxID09IG51bGwpIHJldHVybiB2b2lkIHRoaXMucmVtb3ZlQXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgICBzdHJpbmcwID0gdGhpcy5nZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICAgIHN0cmluZzEgPSB2YWx1ZTEgKyBcIlwiO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwICYmIHN0cmluZzEgPT09IHN0cmluZzEwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogKHN0cmluZzEwID0gc3RyaW5nMSwgaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCB2YWx1ZTEpKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgdmFyIGZ1bGxuYW1lID0gbmFtZXNwYWNlKG5hbWUpLCBpID0gZnVsbG5hbWUgPT09IFwidHJhbnNmb3JtXCIgPyBpbnRlcnBvbGF0ZVRyYW5zZm9ybSA6IGludGVycG9sYXRlO1xuICByZXR1cm4gdGhpcy5hdHRyVHdlZW4obmFtZSwgdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgID8gKGZ1bGxuYW1lLmxvY2FsID8gYXR0ckZ1bmN0aW9uTlMgOiBhdHRyRnVuY3Rpb24pKGZ1bGxuYW1lLCBpLCB0d2VlblZhbHVlKHRoaXMsIFwiYXR0ci5cIiArIG5hbWUsIHZhbHVlKSlcbiAgICAgIDogdmFsdWUgPT0gbnVsbCA/IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJSZW1vdmVOUyA6IGF0dHJSZW1vdmUpKGZ1bGxuYW1lKVxuICAgICAgOiAoZnVsbG5hbWUubG9jYWwgPyBhdHRyQ29uc3RhbnROUyA6IGF0dHJDb25zdGFudCkoZnVsbG5hbWUsIGksIHZhbHVlKSk7XG59XG4iLCAiaW1wb3J0IHtuYW1lc3BhY2V9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcblxuZnVuY3Rpb24gYXR0ckludGVycG9sYXRlKG5hbWUsIGkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZShuYW1lLCBpLmNhbGwodGhpcywgdCkpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRySW50ZXJwb2xhdGVOUyhmdWxsbmFtZSwgaSkge1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsLCBpLmNhbGwodGhpcywgdCkpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyVHdlZW5OUyhmdWxsbmFtZSwgdmFsdWUpIHtcbiAgdmFyIHQwLCBpMDtcbiAgZnVuY3Rpb24gdHdlZW4oKSB7XG4gICAgdmFyIGkgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmIChpICE9PSBpMCkgdDAgPSAoaTAgPSBpKSAmJiBhdHRySW50ZXJwb2xhdGVOUyhmdWxsbmFtZSwgaSk7XG4gICAgcmV0dXJuIHQwO1xuICB9XG4gIHR3ZWVuLl92YWx1ZSA9IHZhbHVlO1xuICByZXR1cm4gdHdlZW47XG59XG5cbmZ1bmN0aW9uIGF0dHJUd2VlbihuYW1lLCB2YWx1ZSkge1xuICB2YXIgdDAsIGkwO1xuICBmdW5jdGlvbiB0d2VlbigpIHtcbiAgICB2YXIgaSA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKGkgIT09IGkwKSB0MCA9IChpMCA9IGkpICYmIGF0dHJJbnRlcnBvbGF0ZShuYW1lLCBpKTtcbiAgICByZXR1cm4gdDA7XG4gIH1cbiAgdHdlZW4uX3ZhbHVlID0gdmFsdWU7XG4gIHJldHVybiB0d2Vlbjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgdmFyIGtleSA9IFwiYXR0ci5cIiArIG5hbWU7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikgcmV0dXJuIChrZXkgPSB0aGlzLnR3ZWVuKGtleSkpICYmIGtleS5fdmFsdWU7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSByZXR1cm4gdGhpcy50d2VlbihrZXksIG51bGwpO1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcbiAgdmFyIGZ1bGxuYW1lID0gbmFtZXNwYWNlKG5hbWUpO1xuICByZXR1cm4gdGhpcy50d2VlbihrZXksIChmdWxsbmFtZS5sb2NhbCA/IGF0dHJUd2Vlbk5TIDogYXR0clR3ZWVuKShmdWxsbmFtZSwgdmFsdWUpKTtcbn1cbiIsICJpbXBvcnQge2dldCwgaW5pdH0gZnJvbSBcIi4vc2NoZWR1bGUuanNcIjtcblxuZnVuY3Rpb24gZGVsYXlGdW5jdGlvbihpZCwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIGluaXQodGhpcywgaWQpLmRlbGF5ID0gK3ZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGRlbGF5Q29uc3RhbnQoaWQsIHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9ICt2YWx1ZSwgZnVuY3Rpb24oKSB7XG4gICAgaW5pdCh0aGlzLCBpZCkuZGVsYXkgPSB2YWx1ZTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUpIHtcbiAgdmFyIGlkID0gdGhpcy5faWQ7XG5cbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgID8gdGhpcy5lYWNoKCh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgID8gZGVsYXlGdW5jdGlvblxuICAgICAgICAgIDogZGVsYXlDb25zdGFudCkoaWQsIHZhbHVlKSlcbiAgICAgIDogZ2V0KHRoaXMubm9kZSgpLCBpZCkuZGVsYXk7XG59XG4iLCAiaW1wb3J0IHtnZXQsIHNldH0gZnJvbSBcIi4vc2NoZWR1bGUuanNcIjtcblxuZnVuY3Rpb24gZHVyYXRpb25GdW5jdGlvbihpZCwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHNldCh0aGlzLCBpZCkuZHVyYXRpb24gPSArdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZHVyYXRpb25Db25zdGFudChpZCwgdmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID0gK3ZhbHVlLCBmdW5jdGlvbigpIHtcbiAgICBzZXQodGhpcywgaWQpLmR1cmF0aW9uID0gdmFsdWU7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHZhciBpZCA9IHRoaXMuX2lkO1xuXG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMuZWFjaCgodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICA/IGR1cmF0aW9uRnVuY3Rpb25cbiAgICAgICAgICA6IGR1cmF0aW9uQ29uc3RhbnQpKGlkLCB2YWx1ZSkpXG4gICAgICA6IGdldCh0aGlzLm5vZGUoKSwgaWQpLmR1cmF0aW9uO1xufVxuIiwgImltcG9ydCB7Z2V0LCBzZXR9IGZyb20gXCIuL3NjaGVkdWxlLmpzXCI7XG5cbmZ1bmN0aW9uIGVhc2VDb25zdGFudChpZCwgdmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3I7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBzZXQodGhpcywgaWQpLmVhc2UgPSB2YWx1ZTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUpIHtcbiAgdmFyIGlkID0gdGhpcy5faWQ7XG5cbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgID8gdGhpcy5lYWNoKGVhc2VDb25zdGFudChpZCwgdmFsdWUpKVxuICAgICAgOiBnZXQodGhpcy5ub2RlKCksIGlkKS5lYXNlO1xufVxuIiwgImltcG9ydCB7c2V0fSBmcm9tIFwiLi9zY2hlZHVsZS5qc1wiO1xuXG5mdW5jdGlvbiBlYXNlVmFyeWluZyhpZCwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAodHlwZW9mIHYgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yO1xuICAgIHNldCh0aGlzLCBpZCkuZWFzZSA9IHY7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yO1xuICByZXR1cm4gdGhpcy5lYWNoKGVhc2VWYXJ5aW5nKHRoaXMuX2lkLCB2YWx1ZSkpO1xufVxuIiwgImltcG9ydCB7bWF0Y2hlcn0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHtUcmFuc2l0aW9ufSBmcm9tIFwiLi9pbmRleC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihtYXRjaCkge1xuICBpZiAodHlwZW9mIG1hdGNoICE9PSBcImZ1bmN0aW9uXCIpIG1hdGNoID0gbWF0Y2hlcihtYXRjaCk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gbmV3IEFycmF5KG0pLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBzdWJncm91cCA9IHN1Ymdyb3Vwc1tqXSA9IFtdLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKChub2RlID0gZ3JvdXBbaV0pICYmIG1hdGNoLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApKSB7XG4gICAgICAgIHN1Ymdyb3VwLnB1c2gobm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKHN1Ymdyb3VwcywgdGhpcy5fcGFyZW50cywgdGhpcy5fbmFtZSwgdGhpcy5faWQpO1xufVxuIiwgImltcG9ydCB7VHJhbnNpdGlvbn0gZnJvbSBcIi4vaW5kZXguanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odHJhbnNpdGlvbikge1xuICBpZiAodHJhbnNpdGlvbi5faWQgIT09IHRoaXMuX2lkKSB0aHJvdyBuZXcgRXJyb3I7XG5cbiAgZm9yICh2YXIgZ3JvdXBzMCA9IHRoaXMuX2dyb3VwcywgZ3JvdXBzMSA9IHRyYW5zaXRpb24uX2dyb3VwcywgbTAgPSBncm91cHMwLmxlbmd0aCwgbTEgPSBncm91cHMxLmxlbmd0aCwgbSA9IE1hdGgubWluKG0wLCBtMSksIG1lcmdlcyA9IG5ldyBBcnJheShtMCksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAwID0gZ3JvdXBzMFtqXSwgZ3JvdXAxID0gZ3JvdXBzMVtqXSwgbiA9IGdyb3VwMC5sZW5ndGgsIG1lcmdlID0gbWVyZ2VzW2pdID0gbmV3IEFycmF5KG4pLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cDBbaV0gfHwgZ3JvdXAxW2ldKSB7XG4gICAgICAgIG1lcmdlW2ldID0gbm9kZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmb3IgKDsgaiA8IG0wOyArK2opIHtcbiAgICBtZXJnZXNbal0gPSBncm91cHMwW2pdO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKG1lcmdlcywgdGhpcy5fcGFyZW50cywgdGhpcy5fbmFtZSwgdGhpcy5faWQpO1xufVxuIiwgImltcG9ydCB7Z2V0LCBzZXQsIGluaXR9IGZyb20gXCIuL3NjaGVkdWxlLmpzXCI7XG5cbmZ1bmN0aW9uIHN0YXJ0KG5hbWUpIHtcbiAgcmV0dXJuIChuYW1lICsgXCJcIikudHJpbSgpLnNwbGl0KC9efFxccysvKS5ldmVyeShmdW5jdGlvbih0KSB7XG4gICAgdmFyIGkgPSB0LmluZGV4T2YoXCIuXCIpO1xuICAgIGlmIChpID49IDApIHQgPSB0LnNsaWNlKDAsIGkpO1xuICAgIHJldHVybiAhdCB8fCB0ID09PSBcInN0YXJ0XCI7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBvbkZ1bmN0aW9uKGlkLCBuYW1lLCBsaXN0ZW5lcikge1xuICB2YXIgb24wLCBvbjEsIHNpdCA9IHN0YXJ0KG5hbWUpID8gaW5pdCA6IHNldDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzY2hlZHVsZSA9IHNpdCh0aGlzLCBpZCksXG4gICAgICAgIG9uID0gc2NoZWR1bGUub247XG5cbiAgICAvLyBJZiB0aGlzIG5vZGUgc2hhcmVkIGEgZGlzcGF0Y2ggd2l0aCB0aGUgcHJldmlvdXMgbm9kZSxcbiAgICAvLyBqdXN0IGFzc2lnbiB0aGUgdXBkYXRlZCBzaGFyZWQgZGlzcGF0Y2ggYW5kIHdlXHUyMDE5cmUgZG9uZSFcbiAgICAvLyBPdGhlcndpc2UsIGNvcHktb24td3JpdGUuXG4gICAgaWYgKG9uICE9PSBvbjApIChvbjEgPSAob24wID0gb24pLmNvcHkoKSkub24obmFtZSwgbGlzdGVuZXIpO1xuXG4gICAgc2NoZWR1bGUub24gPSBvbjE7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIGxpc3RlbmVyKSB7XG4gIHZhciBpZCA9IHRoaXMuX2lkO1xuXG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoIDwgMlxuICAgICAgPyBnZXQodGhpcy5ub2RlKCksIGlkKS5vbi5vbihuYW1lKVxuICAgICAgOiB0aGlzLmVhY2gob25GdW5jdGlvbihpZCwgbmFtZSwgbGlzdGVuZXIpKTtcbn1cbiIsICJmdW5jdGlvbiByZW1vdmVGdW5jdGlvbihpZCkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcbiAgICBmb3IgKHZhciBpIGluIHRoaXMuX190cmFuc2l0aW9uKSBpZiAoK2kgIT09IGlkKSByZXR1cm47XG4gICAgaWYgKHBhcmVudCkgcGFyZW50LnJlbW92ZUNoaWxkKHRoaXMpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMub24oXCJlbmQucmVtb3ZlXCIsIHJlbW92ZUZ1bmN0aW9uKHRoaXMuX2lkKSk7XG59XG4iLCAiaW1wb3J0IHtzZWxlY3Rvcn0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHtUcmFuc2l0aW9ufSBmcm9tIFwiLi9pbmRleC5qc1wiO1xuaW1wb3J0IHNjaGVkdWxlLCB7Z2V0fSBmcm9tIFwiLi9zY2hlZHVsZS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3QpIHtcbiAgdmFyIG5hbWUgPSB0aGlzLl9uYW1lLFxuICAgICAgaWQgPSB0aGlzLl9pZDtcblxuICBpZiAodHlwZW9mIHNlbGVjdCAhPT0gXCJmdW5jdGlvblwiKSBzZWxlY3QgPSBzZWxlY3RvcihzZWxlY3QpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgc3ViZ3JvdXAgPSBzdWJncm91cHNbal0gPSBuZXcgQXJyYXkobiksIG5vZGUsIHN1Ym5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoKG5vZGUgPSBncm91cFtpXSkgJiYgKHN1Ym5vZGUgPSBzZWxlY3QuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCkpKSB7XG4gICAgICAgIGlmIChcIl9fZGF0YV9fXCIgaW4gbm9kZSkgc3Vibm9kZS5fX2RhdGFfXyA9IG5vZGUuX19kYXRhX187XG4gICAgICAgIHN1Ymdyb3VwW2ldID0gc3Vibm9kZTtcbiAgICAgICAgc2NoZWR1bGUoc3ViZ3JvdXBbaV0sIG5hbWUsIGlkLCBpLCBzdWJncm91cCwgZ2V0KG5vZGUsIGlkKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKHN1Ymdyb3VwcywgdGhpcy5fcGFyZW50cywgbmFtZSwgaWQpO1xufVxuIiwgImltcG9ydCB7c2VsZWN0b3JBbGx9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7VHJhbnNpdGlvbn0gZnJvbSBcIi4vaW5kZXguanNcIjtcbmltcG9ydCBzY2hlZHVsZSwge2dldH0gZnJvbSBcIi4vc2NoZWR1bGUuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0KSB7XG4gIHZhciBuYW1lID0gdGhpcy5fbmFtZSxcbiAgICAgIGlkID0gdGhpcy5faWQ7XG5cbiAgaWYgKHR5cGVvZiBzZWxlY3QgIT09IFwiZnVuY3Rpb25cIikgc2VsZWN0ID0gc2VsZWN0b3JBbGwoc2VsZWN0KTtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBzdWJncm91cHMgPSBbXSwgcGFyZW50cyA9IFtdLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICBmb3IgKHZhciBjaGlsZHJlbiA9IHNlbGVjdC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSwgY2hpbGQsIGluaGVyaXQgPSBnZXQobm9kZSwgaWQpLCBrID0gMCwgbCA9IGNoaWxkcmVuLmxlbmd0aDsgayA8IGw7ICsraykge1xuICAgICAgICAgIGlmIChjaGlsZCA9IGNoaWxkcmVuW2tdKSB7XG4gICAgICAgICAgICBzY2hlZHVsZShjaGlsZCwgbmFtZSwgaWQsIGssIGNoaWxkcmVuLCBpbmhlcml0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc3ViZ3JvdXBzLnB1c2goY2hpbGRyZW4pO1xuICAgICAgICBwYXJlbnRzLnB1c2gobm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKHN1Ymdyb3VwcywgcGFyZW50cywgbmFtZSwgaWQpO1xufVxuIiwgImltcG9ydCB7c2VsZWN0aW9ufSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5cbnZhciBTZWxlY3Rpb24gPSBzZWxlY3Rpb24ucHJvdG90eXBlLmNvbnN0cnVjdG9yO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24odGhpcy5fZ3JvdXBzLCB0aGlzLl9wYXJlbnRzKTtcbn1cbiIsICJpbXBvcnQge2ludGVycG9sYXRlVHJhbnNmb3JtQ3NzIGFzIGludGVycG9sYXRlVHJhbnNmb3JtfSBmcm9tIFwiZDMtaW50ZXJwb2xhdGVcIjtcbmltcG9ydCB7c3R5bGV9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7c2V0fSBmcm9tIFwiLi9zY2hlZHVsZS5qc1wiO1xuaW1wb3J0IHt0d2VlblZhbHVlfSBmcm9tIFwiLi90d2Vlbi5qc1wiO1xuaW1wb3J0IGludGVycG9sYXRlIGZyb20gXCIuL2ludGVycG9sYXRlLmpzXCI7XG5cbmZ1bmN0aW9uIHN0eWxlTnVsbChuYW1lLCBpbnRlcnBvbGF0ZSkge1xuICB2YXIgc3RyaW5nMDAsXG4gICAgICBzdHJpbmcxMCxcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdHJpbmcwID0gc3R5bGUodGhpcywgbmFtZSksXG4gICAgICAgIHN0cmluZzEgPSAodGhpcy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShuYW1lKSwgc3R5bGUodGhpcywgbmFtZSkpO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwICYmIHN0cmluZzEgPT09IHN0cmluZzEwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCBzdHJpbmcxMCA9IHN0cmluZzEpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZVJlbW92ZShuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnN0eWxlLnJlbW92ZVByb3BlcnR5KG5hbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZUNvbnN0YW50KG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZTEpIHtcbiAgdmFyIHN0cmluZzAwLFxuICAgICAgc3RyaW5nMSA9IHZhbHVlMSArIFwiXCIsXG4gICAgICBpbnRlcnBvbGF0ZTA7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RyaW5nMCA9IHN0eWxlKHRoaXMsIG5hbWUpO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCB2YWx1ZTEpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZUZ1bmN0aW9uKG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZSkge1xuICB2YXIgc3RyaW5nMDAsXG4gICAgICBzdHJpbmcxMCxcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdHJpbmcwID0gc3R5bGUodGhpcywgbmFtZSksXG4gICAgICAgIHZhbHVlMSA9IHZhbHVlKHRoaXMpLFxuICAgICAgICBzdHJpbmcxID0gdmFsdWUxICsgXCJcIjtcbiAgICBpZiAodmFsdWUxID09IG51bGwpIHN0cmluZzEgPSB2YWx1ZTEgPSAodGhpcy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShuYW1lKSwgc3R5bGUodGhpcywgbmFtZSkpO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwICYmIHN0cmluZzEgPT09IHN0cmluZzEwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogKHN0cmluZzEwID0gc3RyaW5nMSwgaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCB2YWx1ZTEpKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3R5bGVNYXliZVJlbW92ZShpZCwgbmFtZSkge1xuICB2YXIgb24wLCBvbjEsIGxpc3RlbmVyMCwga2V5ID0gXCJzdHlsZS5cIiArIG5hbWUsIGV2ZW50ID0gXCJlbmQuXCIgKyBrZXksIHJlbW92ZTtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzY2hlZHVsZSA9IHNldCh0aGlzLCBpZCksXG4gICAgICAgIG9uID0gc2NoZWR1bGUub24sXG4gICAgICAgIGxpc3RlbmVyID0gc2NoZWR1bGUudmFsdWVba2V5XSA9PSBudWxsID8gcmVtb3ZlIHx8IChyZW1vdmUgPSBzdHlsZVJlbW92ZShuYW1lKSkgOiB1bmRlZmluZWQ7XG5cbiAgICAvLyBJZiB0aGlzIG5vZGUgc2hhcmVkIGEgZGlzcGF0Y2ggd2l0aCB0aGUgcHJldmlvdXMgbm9kZSxcbiAgICAvLyBqdXN0IGFzc2lnbiB0aGUgdXBkYXRlZCBzaGFyZWQgZGlzcGF0Y2ggYW5kIHdlXHUyMDE5cmUgZG9uZSFcbiAgICAvLyBPdGhlcndpc2UsIGNvcHktb24td3JpdGUuXG4gICAgaWYgKG9uICE9PSBvbjAgfHwgbGlzdGVuZXIwICE9PSBsaXN0ZW5lcikgKG9uMSA9IChvbjAgPSBvbikuY29weSgpKS5vbihldmVudCwgbGlzdGVuZXIwID0gbGlzdGVuZXIpO1xuXG4gICAgc2NoZWR1bGUub24gPSBvbjE7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICB2YXIgaSA9IChuYW1lICs9IFwiXCIpID09PSBcInRyYW5zZm9ybVwiID8gaW50ZXJwb2xhdGVUcmFuc2Zvcm0gOiBpbnRlcnBvbGF0ZTtcbiAgcmV0dXJuIHZhbHVlID09IG51bGwgPyB0aGlzXG4gICAgICAuc3R5bGVUd2VlbihuYW1lLCBzdHlsZU51bGwobmFtZSwgaSkpXG4gICAgICAub24oXCJlbmQuc3R5bGUuXCIgKyBuYW1lLCBzdHlsZVJlbW92ZShuYW1lKSlcbiAgICA6IHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiID8gdGhpc1xuICAgICAgLnN0eWxlVHdlZW4obmFtZSwgc3R5bGVGdW5jdGlvbihuYW1lLCBpLCB0d2VlblZhbHVlKHRoaXMsIFwic3R5bGUuXCIgKyBuYW1lLCB2YWx1ZSkpKVxuICAgICAgLmVhY2goc3R5bGVNYXliZVJlbW92ZSh0aGlzLl9pZCwgbmFtZSkpXG4gICAgOiB0aGlzXG4gICAgICAuc3R5bGVUd2VlbihuYW1lLCBzdHlsZUNvbnN0YW50KG5hbWUsIGksIHZhbHVlKSwgcHJpb3JpdHkpXG4gICAgICAub24oXCJlbmQuc3R5bGUuXCIgKyBuYW1lLCBudWxsKTtcbn1cbiIsICJmdW5jdGlvbiBzdHlsZUludGVycG9sYXRlKG5hbWUsIGksIHByaW9yaXR5KSB7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgdGhpcy5zdHlsZS5zZXRQcm9wZXJ0eShuYW1lLCBpLmNhbGwodGhpcywgdCksIHByaW9yaXR5KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3R5bGVUd2VlbihuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcbiAgdmFyIHQsIGkwO1xuICBmdW5jdGlvbiB0d2VlbigpIHtcbiAgICB2YXIgaSA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKGkgIT09IGkwKSB0ID0gKGkwID0gaSkgJiYgc3R5bGVJbnRlcnBvbGF0ZShuYW1lLCBpLCBwcmlvcml0eSk7XG4gICAgcmV0dXJuIHQ7XG4gIH1cbiAgdHdlZW4uX3ZhbHVlID0gdmFsdWU7XG4gIHJldHVybiB0d2Vlbjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG4gIHZhciBrZXkgPSBcInN0eWxlLlwiICsgKG5hbWUgKz0gXCJcIik7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikgcmV0dXJuIChrZXkgPSB0aGlzLnR3ZWVuKGtleSkpICYmIGtleS5fdmFsdWU7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSByZXR1cm4gdGhpcy50d2VlbihrZXksIG51bGwpO1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcbiAgcmV0dXJuIHRoaXMudHdlZW4oa2V5LCBzdHlsZVR3ZWVuKG5hbWUsIHZhbHVlLCBwcmlvcml0eSA9PSBudWxsID8gXCJcIiA6IHByaW9yaXR5KSk7XG59XG4iLCAiaW1wb3J0IHt0d2VlblZhbHVlfSBmcm9tIFwiLi90d2Vlbi5qc1wiO1xuXG5mdW5jdGlvbiB0ZXh0Q29uc3RhbnQodmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMudGV4dENvbnRlbnQgPSB2YWx1ZTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdGV4dEZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdmFsdWUxID0gdmFsdWUodGhpcyk7XG4gICAgdGhpcy50ZXh0Q29udGVudCA9IHZhbHVlMSA9PSBudWxsID8gXCJcIiA6IHZhbHVlMTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIHRoaXMudHdlZW4oXCJ0ZXh0XCIsIHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICA/IHRleHRGdW5jdGlvbih0d2VlblZhbHVlKHRoaXMsIFwidGV4dFwiLCB2YWx1ZSkpXG4gICAgICA6IHRleHRDb25zdGFudCh2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICsgXCJcIikpO1xufVxuIiwgImZ1bmN0aW9uIHRleHRJbnRlcnBvbGF0ZShpKSB7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgdGhpcy50ZXh0Q29udGVudCA9IGkuY2FsbCh0aGlzLCB0KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdGV4dFR3ZWVuKHZhbHVlKSB7XG4gIHZhciB0MCwgaTA7XG4gIGZ1bmN0aW9uIHR3ZWVuKCkge1xuICAgIHZhciBpID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAoaSAhPT0gaTApIHQwID0gKGkwID0gaSkgJiYgdGV4dEludGVycG9sYXRlKGkpO1xuICAgIHJldHVybiB0MDtcbiAgfVxuICB0d2Vlbi5fdmFsdWUgPSB2YWx1ZTtcbiAgcmV0dXJuIHR3ZWVuO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICB2YXIga2V5ID0gXCJ0ZXh0XCI7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMSkgcmV0dXJuIChrZXkgPSB0aGlzLnR3ZWVuKGtleSkpICYmIGtleS5fdmFsdWU7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSByZXR1cm4gdGhpcy50d2VlbihrZXksIG51bGwpO1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcbiAgcmV0dXJuIHRoaXMudHdlZW4oa2V5LCB0ZXh0VHdlZW4odmFsdWUpKTtcbn1cbiIsICJpbXBvcnQge1RyYW5zaXRpb24sIG5ld0lkfSBmcm9tIFwiLi9pbmRleC5qc1wiO1xuaW1wb3J0IHNjaGVkdWxlLCB7Z2V0fSBmcm9tIFwiLi9zY2hlZHVsZS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIG5hbWUgPSB0aGlzLl9uYW1lLFxuICAgICAgaWQwID0gdGhpcy5faWQsXG4gICAgICBpZDEgPSBuZXdJZCgpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIHZhciBpbmhlcml0ID0gZ2V0KG5vZGUsIGlkMCk7XG4gICAgICAgIHNjaGVkdWxlKG5vZGUsIG5hbWUsIGlkMSwgaSwgZ3JvdXAsIHtcbiAgICAgICAgICB0aW1lOiBpbmhlcml0LnRpbWUgKyBpbmhlcml0LmRlbGF5ICsgaW5oZXJpdC5kdXJhdGlvbixcbiAgICAgICAgICBkZWxheTogMCxcbiAgICAgICAgICBkdXJhdGlvbjogaW5oZXJpdC5kdXJhdGlvbixcbiAgICAgICAgICBlYXNlOiBpbmhlcml0LmVhc2VcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKGdyb3VwcywgdGhpcy5fcGFyZW50cywgbmFtZSwgaWQxKTtcbn1cbiIsICJpbXBvcnQge3NldH0gZnJvbSBcIi4vc2NoZWR1bGUuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBvbjAsIG9uMSwgdGhhdCA9IHRoaXMsIGlkID0gdGhhdC5faWQsIHNpemUgPSB0aGF0LnNpemUoKTtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgIHZhciBjYW5jZWwgPSB7dmFsdWU6IHJlamVjdH0sXG4gICAgICAgIGVuZCA9IHt2YWx1ZTogZnVuY3Rpb24oKSB7IGlmICgtLXNpemUgPT09IDApIHJlc29sdmUoKTsgfX07XG5cbiAgICB0aGF0LmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgc2NoZWR1bGUgPSBzZXQodGhpcywgaWQpLFxuICAgICAgICAgIG9uID0gc2NoZWR1bGUub247XG5cbiAgICAgIC8vIElmIHRoaXMgbm9kZSBzaGFyZWQgYSBkaXNwYXRjaCB3aXRoIHRoZSBwcmV2aW91cyBub2RlLFxuICAgICAgLy8ganVzdCBhc3NpZ24gdGhlIHVwZGF0ZWQgc2hhcmVkIGRpc3BhdGNoIGFuZCB3ZVx1MjAxOXJlIGRvbmUhXG4gICAgICAvLyBPdGhlcndpc2UsIGNvcHktb24td3JpdGUuXG4gICAgICBpZiAob24gIT09IG9uMCkge1xuICAgICAgICBvbjEgPSAob24wID0gb24pLmNvcHkoKTtcbiAgICAgICAgb24xLl8uY2FuY2VsLnB1c2goY2FuY2VsKTtcbiAgICAgICAgb24xLl8uaW50ZXJydXB0LnB1c2goY2FuY2VsKTtcbiAgICAgICAgb24xLl8uZW5kLnB1c2goZW5kKTtcbiAgICAgIH1cblxuICAgICAgc2NoZWR1bGUub24gPSBvbjE7XG4gICAgfSk7XG5cbiAgICAvLyBUaGUgc2VsZWN0aW9uIHdhcyBlbXB0eSwgcmVzb2x2ZSBlbmQgaW1tZWRpYXRlbHlcbiAgICBpZiAoc2l6ZSA9PT0gMCkgcmVzb2x2ZSgpO1xuICB9KTtcbn1cbiIsICJpbXBvcnQge3NlbGVjdGlvbn0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHRyYW5zaXRpb25fYXR0ciBmcm9tIFwiLi9hdHRyLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9hdHRyVHdlZW4gZnJvbSBcIi4vYXR0clR3ZWVuLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9kZWxheSBmcm9tIFwiLi9kZWxheS5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fZHVyYXRpb24gZnJvbSBcIi4vZHVyYXRpb24uanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX2Vhc2UgZnJvbSBcIi4vZWFzZS5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fZWFzZVZhcnlpbmcgZnJvbSBcIi4vZWFzZVZhcnlpbmcuanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX2ZpbHRlciBmcm9tIFwiLi9maWx0ZXIuanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX21lcmdlIGZyb20gXCIuL21lcmdlLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9vbiBmcm9tIFwiLi9vbi5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fcmVtb3ZlIGZyb20gXCIuL3JlbW92ZS5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fc2VsZWN0IGZyb20gXCIuL3NlbGVjdC5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fc2VsZWN0QWxsIGZyb20gXCIuL3NlbGVjdEFsbC5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fc2VsZWN0aW9uIGZyb20gXCIuL3NlbGVjdGlvbi5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fc3R5bGUgZnJvbSBcIi4vc3R5bGUuanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX3N0eWxlVHdlZW4gZnJvbSBcIi4vc3R5bGVUd2Vlbi5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fdGV4dCBmcm9tIFwiLi90ZXh0LmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl90ZXh0VHdlZW4gZnJvbSBcIi4vdGV4dFR3ZWVuLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl90cmFuc2l0aW9uIGZyb20gXCIuL3RyYW5zaXRpb24uanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX3R3ZWVuIGZyb20gXCIuL3R3ZWVuLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9lbmQgZnJvbSBcIi4vZW5kLmpzXCI7XG5cbnZhciBpZCA9IDA7XG5cbmV4cG9ydCBmdW5jdGlvbiBUcmFuc2l0aW9uKGdyb3VwcywgcGFyZW50cywgbmFtZSwgaWQpIHtcbiAgdGhpcy5fZ3JvdXBzID0gZ3JvdXBzO1xuICB0aGlzLl9wYXJlbnRzID0gcGFyZW50cztcbiAgdGhpcy5fbmFtZSA9IG5hbWU7XG4gIHRoaXMuX2lkID0gaWQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRyYW5zaXRpb24obmFtZSkge1xuICByZXR1cm4gc2VsZWN0aW9uKCkudHJhbnNpdGlvbihuYW1lKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG5ld0lkKCkge1xuICByZXR1cm4gKytpZDtcbn1cblxudmFyIHNlbGVjdGlvbl9wcm90b3R5cGUgPSBzZWxlY3Rpb24ucHJvdG90eXBlO1xuXG5UcmFuc2l0aW9uLnByb3RvdHlwZSA9IHRyYW5zaXRpb24ucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogVHJhbnNpdGlvbixcbiAgc2VsZWN0OiB0cmFuc2l0aW9uX3NlbGVjdCxcbiAgc2VsZWN0QWxsOiB0cmFuc2l0aW9uX3NlbGVjdEFsbCxcbiAgc2VsZWN0Q2hpbGQ6IHNlbGVjdGlvbl9wcm90b3R5cGUuc2VsZWN0Q2hpbGQsXG4gIHNlbGVjdENoaWxkcmVuOiBzZWxlY3Rpb25fcHJvdG90eXBlLnNlbGVjdENoaWxkcmVuLFxuICBmaWx0ZXI6IHRyYW5zaXRpb25fZmlsdGVyLFxuICBtZXJnZTogdHJhbnNpdGlvbl9tZXJnZSxcbiAgc2VsZWN0aW9uOiB0cmFuc2l0aW9uX3NlbGVjdGlvbixcbiAgdHJhbnNpdGlvbjogdHJhbnNpdGlvbl90cmFuc2l0aW9uLFxuICBjYWxsOiBzZWxlY3Rpb25fcHJvdG90eXBlLmNhbGwsXG4gIG5vZGVzOiBzZWxlY3Rpb25fcHJvdG90eXBlLm5vZGVzLFxuICBub2RlOiBzZWxlY3Rpb25fcHJvdG90eXBlLm5vZGUsXG4gIHNpemU6IHNlbGVjdGlvbl9wcm90b3R5cGUuc2l6ZSxcbiAgZW1wdHk6IHNlbGVjdGlvbl9wcm90b3R5cGUuZW1wdHksXG4gIGVhY2g6IHNlbGVjdGlvbl9wcm90b3R5cGUuZWFjaCxcbiAgb246IHRyYW5zaXRpb25fb24sXG4gIGF0dHI6IHRyYW5zaXRpb25fYXR0cixcbiAgYXR0clR3ZWVuOiB0cmFuc2l0aW9uX2F0dHJUd2VlbixcbiAgc3R5bGU6IHRyYW5zaXRpb25fc3R5bGUsXG4gIHN0eWxlVHdlZW46IHRyYW5zaXRpb25fc3R5bGVUd2VlbixcbiAgdGV4dDogdHJhbnNpdGlvbl90ZXh0LFxuICB0ZXh0VHdlZW46IHRyYW5zaXRpb25fdGV4dFR3ZWVuLFxuICByZW1vdmU6IHRyYW5zaXRpb25fcmVtb3ZlLFxuICB0d2VlbjogdHJhbnNpdGlvbl90d2VlbixcbiAgZGVsYXk6IHRyYW5zaXRpb25fZGVsYXksXG4gIGR1cmF0aW9uOiB0cmFuc2l0aW9uX2R1cmF0aW9uLFxuICBlYXNlOiB0cmFuc2l0aW9uX2Vhc2UsXG4gIGVhc2VWYXJ5aW5nOiB0cmFuc2l0aW9uX2Vhc2VWYXJ5aW5nLFxuICBlbmQ6IHRyYW5zaXRpb25fZW5kLFxuICBbU3ltYm9sLml0ZXJhdG9yXTogc2VsZWN0aW9uX3Byb3RvdHlwZVtTeW1ib2wuaXRlcmF0b3JdXG59O1xuIiwgImV4cG9ydCBmdW5jdGlvbiBjdWJpY0luKHQpIHtcbiAgcmV0dXJuIHQgKiB0ICogdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGN1YmljT3V0KHQpIHtcbiAgcmV0dXJuIC0tdCAqIHQgKiB0ICsgMTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGN1YmljSW5PdXQodCkge1xuICByZXR1cm4gKCh0ICo9IDIpIDw9IDEgPyB0ICogdCAqIHQgOiAodCAtPSAyKSAqIHQgKiB0ICsgMikgLyAyO1xufVxuIiwgImltcG9ydCB7VHJhbnNpdGlvbiwgbmV3SWR9IGZyb20gXCIuLi90cmFuc2l0aW9uL2luZGV4LmpzXCI7XG5pbXBvcnQgc2NoZWR1bGUgZnJvbSBcIi4uL3RyYW5zaXRpb24vc2NoZWR1bGUuanNcIjtcbmltcG9ydCB7ZWFzZUN1YmljSW5PdXR9IGZyb20gXCJkMy1lYXNlXCI7XG5pbXBvcnQge25vd30gZnJvbSBcImQzLXRpbWVyXCI7XG5cbnZhciBkZWZhdWx0VGltaW5nID0ge1xuICB0aW1lOiBudWxsLCAvLyBTZXQgb24gdXNlLlxuICBkZWxheTogMCxcbiAgZHVyYXRpb246IDI1MCxcbiAgZWFzZTogZWFzZUN1YmljSW5PdXRcbn07XG5cbmZ1bmN0aW9uIGluaGVyaXQobm9kZSwgaWQpIHtcbiAgdmFyIHRpbWluZztcbiAgd2hpbGUgKCEodGltaW5nID0gbm9kZS5fX3RyYW5zaXRpb24pIHx8ICEodGltaW5nID0gdGltaW5nW2lkXSkpIHtcbiAgICBpZiAoIShub2RlID0gbm9kZS5wYXJlbnROb2RlKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGB0cmFuc2l0aW9uICR7aWR9IG5vdCBmb3VuZGApO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGltaW5nO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lKSB7XG4gIHZhciBpZCxcbiAgICAgIHRpbWluZztcblxuICBpZiAobmFtZSBpbnN0YW5jZW9mIFRyYW5zaXRpb24pIHtcbiAgICBpZCA9IG5hbWUuX2lkLCBuYW1lID0gbmFtZS5fbmFtZTtcbiAgfSBlbHNlIHtcbiAgICBpZCA9IG5ld0lkKCksICh0aW1pbmcgPSBkZWZhdWx0VGltaW5nKS50aW1lID0gbm93KCksIG5hbWUgPSBuYW1lID09IG51bGwgPyBudWxsIDogbmFtZSArIFwiXCI7XG4gIH1cblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICBzY2hlZHVsZShub2RlLCBuYW1lLCBpZCwgaSwgZ3JvdXAsIHRpbWluZyB8fCBpbmhlcml0KG5vZGUsIGlkKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKGdyb3VwcywgdGhpcy5fcGFyZW50cywgbmFtZSwgaWQpO1xufVxuIiwgImltcG9ydCB7c2VsZWN0aW9ufSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2ludGVycnVwdCBmcm9tIFwiLi9pbnRlcnJ1cHQuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fdHJhbnNpdGlvbiBmcm9tIFwiLi90cmFuc2l0aW9uLmpzXCI7XG5cbnNlbGVjdGlvbi5wcm90b3R5cGUuaW50ZXJydXB0ID0gc2VsZWN0aW9uX2ludGVycnVwdDtcbnNlbGVjdGlvbi5wcm90b3R5cGUudHJhbnNpdGlvbiA9IHNlbGVjdGlvbl90cmFuc2l0aW9uO1xuIiwgImltcG9ydCB7ZGlzcGF0Y2h9IGZyb20gXCJkMy1kaXNwYXRjaFwiO1xuaW1wb3J0IHtkcmFnRGlzYWJsZSwgZHJhZ0VuYWJsZX0gZnJvbSBcImQzLWRyYWdcIjtcbmltcG9ydCB7aW50ZXJwb2xhdGV9IGZyb20gXCJkMy1pbnRlcnBvbGF0ZVwiO1xuaW1wb3J0IHtwb2ludGVyLCBzZWxlY3R9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7aW50ZXJydXB0fSBmcm9tIFwiZDMtdHJhbnNpdGlvblwiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50LmpzXCI7XG5pbXBvcnQgQnJ1c2hFdmVudCBmcm9tIFwiLi9ldmVudC5qc1wiO1xuaW1wb3J0IG5vZXZlbnQsIHtub3Byb3BhZ2F0aW9ufSBmcm9tIFwiLi9ub2V2ZW50LmpzXCI7XG5cbnZhciBNT0RFX0RSQUcgPSB7bmFtZTogXCJkcmFnXCJ9LFxuICAgIE1PREVfU1BBQ0UgPSB7bmFtZTogXCJzcGFjZVwifSxcbiAgICBNT0RFX0hBTkRMRSA9IHtuYW1lOiBcImhhbmRsZVwifSxcbiAgICBNT0RFX0NFTlRFUiA9IHtuYW1lOiBcImNlbnRlclwifTtcblxuY29uc3Qge2FicywgbWF4LCBtaW59ID0gTWF0aDtcblxuZnVuY3Rpb24gbnVtYmVyMShlKSB7XG4gIHJldHVybiBbK2VbMF0sICtlWzFdXTtcbn1cblxuZnVuY3Rpb24gbnVtYmVyMihlKSB7XG4gIHJldHVybiBbbnVtYmVyMShlWzBdKSwgbnVtYmVyMShlWzFdKV07XG59XG5cbnZhciBYID0ge1xuICBuYW1lOiBcInhcIixcbiAgaGFuZGxlczogW1wid1wiLCBcImVcIl0ubWFwKHR5cGUpLFxuICBpbnB1dDogZnVuY3Rpb24oeCwgZSkgeyByZXR1cm4geCA9PSBudWxsID8gbnVsbCA6IFtbK3hbMF0sIGVbMF1bMV1dLCBbK3hbMV0sIGVbMV1bMV1dXTsgfSxcbiAgb3V0cHV0OiBmdW5jdGlvbih4eSkgeyByZXR1cm4geHkgJiYgW3h5WzBdWzBdLCB4eVsxXVswXV07IH1cbn07XG5cbnZhciBZID0ge1xuICBuYW1lOiBcInlcIixcbiAgaGFuZGxlczogW1wiblwiLCBcInNcIl0ubWFwKHR5cGUpLFxuICBpbnB1dDogZnVuY3Rpb24oeSwgZSkgeyByZXR1cm4geSA9PSBudWxsID8gbnVsbCA6IFtbZVswXVswXSwgK3lbMF1dLCBbZVsxXVswXSwgK3lbMV1dXTsgfSxcbiAgb3V0cHV0OiBmdW5jdGlvbih4eSkgeyByZXR1cm4geHkgJiYgW3h5WzBdWzFdLCB4eVsxXVsxXV07IH1cbn07XG5cbnZhciBYWSA9IHtcbiAgbmFtZTogXCJ4eVwiLFxuICBoYW5kbGVzOiBbXCJuXCIsIFwid1wiLCBcImVcIiwgXCJzXCIsIFwibndcIiwgXCJuZVwiLCBcInN3XCIsIFwic2VcIl0ubWFwKHR5cGUpLFxuICBpbnB1dDogZnVuY3Rpb24oeHkpIHsgcmV0dXJuIHh5ID09IG51bGwgPyBudWxsIDogbnVtYmVyMih4eSk7IH0sXG4gIG91dHB1dDogZnVuY3Rpb24oeHkpIHsgcmV0dXJuIHh5OyB9XG59O1xuXG52YXIgY3Vyc29ycyA9IHtcbiAgb3ZlcmxheTogXCJjcm9zc2hhaXJcIixcbiAgc2VsZWN0aW9uOiBcIm1vdmVcIixcbiAgbjogXCJucy1yZXNpemVcIixcbiAgZTogXCJldy1yZXNpemVcIixcbiAgczogXCJucy1yZXNpemVcIixcbiAgdzogXCJldy1yZXNpemVcIixcbiAgbnc6IFwibndzZS1yZXNpemVcIixcbiAgbmU6IFwibmVzdy1yZXNpemVcIixcbiAgc2U6IFwibndzZS1yZXNpemVcIixcbiAgc3c6IFwibmVzdy1yZXNpemVcIlxufTtcblxudmFyIGZsaXBYID0ge1xuICBlOiBcIndcIixcbiAgdzogXCJlXCIsXG4gIG53OiBcIm5lXCIsXG4gIG5lOiBcIm53XCIsXG4gIHNlOiBcInN3XCIsXG4gIHN3OiBcInNlXCJcbn07XG5cbnZhciBmbGlwWSA9IHtcbiAgbjogXCJzXCIsXG4gIHM6IFwiblwiLFxuICBudzogXCJzd1wiLFxuICBuZTogXCJzZVwiLFxuICBzZTogXCJuZVwiLFxuICBzdzogXCJud1wiXG59O1xuXG52YXIgc2lnbnNYID0ge1xuICBvdmVybGF5OiArMSxcbiAgc2VsZWN0aW9uOiArMSxcbiAgbjogbnVsbCxcbiAgZTogKzEsXG4gIHM6IG51bGwsXG4gIHc6IC0xLFxuICBudzogLTEsXG4gIG5lOiArMSxcbiAgc2U6ICsxLFxuICBzdzogLTFcbn07XG5cbnZhciBzaWduc1kgPSB7XG4gIG92ZXJsYXk6ICsxLFxuICBzZWxlY3Rpb246ICsxLFxuICBuOiAtMSxcbiAgZTogbnVsbCxcbiAgczogKzEsXG4gIHc6IG51bGwsXG4gIG53OiAtMSxcbiAgbmU6IC0xLFxuICBzZTogKzEsXG4gIHN3OiArMVxufTtcblxuZnVuY3Rpb24gdHlwZSh0KSB7XG4gIHJldHVybiB7dHlwZTogdH07XG59XG5cbi8vIElnbm9yZSByaWdodC1jbGljaywgc2luY2UgdGhhdCBzaG91bGQgb3BlbiB0aGUgY29udGV4dCBtZW51LlxuZnVuY3Rpb24gZGVmYXVsdEZpbHRlcihldmVudCkge1xuICByZXR1cm4gIWV2ZW50LmN0cmxLZXkgJiYgIWV2ZW50LmJ1dHRvbjtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdEV4dGVudCgpIHtcbiAgdmFyIHN2ZyA9IHRoaXMub3duZXJTVkdFbGVtZW50IHx8IHRoaXM7XG4gIGlmIChzdmcuaGFzQXR0cmlidXRlKFwidmlld0JveFwiKSkge1xuICAgIHN2ZyA9IHN2Zy52aWV3Qm94LmJhc2VWYWw7XG4gICAgcmV0dXJuIFtbc3ZnLngsIHN2Zy55XSwgW3N2Zy54ICsgc3ZnLndpZHRoLCBzdmcueSArIHN2Zy5oZWlnaHRdXTtcbiAgfVxuICByZXR1cm4gW1swLCAwXSwgW3N2Zy53aWR0aC5iYXNlVmFsLnZhbHVlLCBzdmcuaGVpZ2h0LmJhc2VWYWwudmFsdWVdXTtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdFRvdWNoYWJsZSgpIHtcbiAgcmV0dXJuIG5hdmlnYXRvci5tYXhUb3VjaFBvaW50cyB8fCAoXCJvbnRvdWNoc3RhcnRcIiBpbiB0aGlzKTtcbn1cblxuLy8gTGlrZSBkMy5sb2NhbCwgYnV0IHdpdGggdGhlIG5hbWUgXHUyMDFDX19icnVzaFx1MjAxRCByYXRoZXIgdGhhbiBhdXRvLWdlbmVyYXRlZC5cbmZ1bmN0aW9uIGxvY2FsKG5vZGUpIHtcbiAgd2hpbGUgKCFub2RlLl9fYnJ1c2gpIGlmICghKG5vZGUgPSBub2RlLnBhcmVudE5vZGUpKSByZXR1cm47XG4gIHJldHVybiBub2RlLl9fYnJ1c2g7XG59XG5cbmZ1bmN0aW9uIGVtcHR5KGV4dGVudCkge1xuICByZXR1cm4gZXh0ZW50WzBdWzBdID09PSBleHRlbnRbMV1bMF1cbiAgICAgIHx8IGV4dGVudFswXVsxXSA9PT0gZXh0ZW50WzFdWzFdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYnJ1c2hTZWxlY3Rpb24obm9kZSkge1xuICB2YXIgc3RhdGUgPSBub2RlLl9fYnJ1c2g7XG4gIHJldHVybiBzdGF0ZSA/IHN0YXRlLmRpbS5vdXRwdXQoc3RhdGUuc2VsZWN0aW9uKSA6IG51bGw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBicnVzaFgoKSB7XG4gIHJldHVybiBicnVzaChYKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJydXNoWSgpIHtcbiAgcmV0dXJuIGJydXNoKFkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGJydXNoKFhZKTtcbn1cblxuZnVuY3Rpb24gYnJ1c2goZGltKSB7XG4gIHZhciBleHRlbnQgPSBkZWZhdWx0RXh0ZW50LFxuICAgICAgZmlsdGVyID0gZGVmYXVsdEZpbHRlcixcbiAgICAgIHRvdWNoYWJsZSA9IGRlZmF1bHRUb3VjaGFibGUsXG4gICAgICBrZXlzID0gdHJ1ZSxcbiAgICAgIGxpc3RlbmVycyA9IGRpc3BhdGNoKFwic3RhcnRcIiwgXCJicnVzaFwiLCBcImVuZFwiKSxcbiAgICAgIGhhbmRsZVNpemUgPSA2LFxuICAgICAgdG91Y2hlbmRpbmc7XG5cbiAgZnVuY3Rpb24gYnJ1c2goZ3JvdXApIHtcbiAgICB2YXIgb3ZlcmxheSA9IGdyb3VwXG4gICAgICAgIC5wcm9wZXJ0eShcIl9fYnJ1c2hcIiwgaW5pdGlhbGl6ZSlcbiAgICAgIC5zZWxlY3RBbGwoXCIub3ZlcmxheVwiKVxuICAgICAgLmRhdGEoW3R5cGUoXCJvdmVybGF5XCIpXSk7XG5cbiAgICBvdmVybGF5LmVudGVyKCkuYXBwZW5kKFwicmVjdFwiKVxuICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwib3ZlcmxheVwiKVxuICAgICAgICAuYXR0cihcInBvaW50ZXItZXZlbnRzXCIsIFwiYWxsXCIpXG4gICAgICAgIC5hdHRyKFwiY3Vyc29yXCIsIGN1cnNvcnMub3ZlcmxheSlcbiAgICAgIC5tZXJnZShvdmVybGF5KVxuICAgICAgICAuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgZXh0ZW50ID0gbG9jYWwodGhpcykuZXh0ZW50O1xuICAgICAgICAgIHNlbGVjdCh0aGlzKVxuICAgICAgICAgICAgICAuYXR0cihcInhcIiwgZXh0ZW50WzBdWzBdKVxuICAgICAgICAgICAgICAuYXR0cihcInlcIiwgZXh0ZW50WzBdWzFdKVxuICAgICAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIGV4dGVudFsxXVswXSAtIGV4dGVudFswXVswXSlcbiAgICAgICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgZXh0ZW50WzFdWzFdIC0gZXh0ZW50WzBdWzFdKTtcbiAgICAgICAgfSk7XG5cbiAgICBncm91cC5zZWxlY3RBbGwoXCIuc2VsZWN0aW9uXCIpXG4gICAgICAuZGF0YShbdHlwZShcInNlbGVjdGlvblwiKV0pXG4gICAgICAuZW50ZXIoKS5hcHBlbmQoXCJyZWN0XCIpXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJzZWxlY3Rpb25cIilcbiAgICAgICAgLmF0dHIoXCJjdXJzb3JcIiwgY3Vyc29ycy5zZWxlY3Rpb24pXG4gICAgICAgIC5hdHRyKFwiZmlsbFwiLCBcIiM3NzdcIilcbiAgICAgICAgLmF0dHIoXCJmaWxsLW9wYWNpdHlcIiwgMC4zKVxuICAgICAgICAuYXR0cihcInN0cm9rZVwiLCBcIiNmZmZcIilcbiAgICAgICAgLmF0dHIoXCJzaGFwZS1yZW5kZXJpbmdcIiwgXCJjcmlzcEVkZ2VzXCIpO1xuXG4gICAgdmFyIGhhbmRsZSA9IGdyb3VwLnNlbGVjdEFsbChcIi5oYW5kbGVcIilcbiAgICAgIC5kYXRhKGRpbS5oYW5kbGVzLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLnR5cGU7IH0pO1xuXG4gICAgaGFuZGxlLmV4aXQoKS5yZW1vdmUoKTtcblxuICAgIGhhbmRsZS5lbnRlcigpLmFwcGVuZChcInJlY3RcIilcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBmdW5jdGlvbihkKSB7IHJldHVybiBcImhhbmRsZSBoYW5kbGUtLVwiICsgZC50eXBlOyB9KVxuICAgICAgICAuYXR0cihcImN1cnNvclwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBjdXJzb3JzW2QudHlwZV07IH0pO1xuXG4gICAgZ3JvdXBcbiAgICAgICAgLmVhY2gocmVkcmF3KVxuICAgICAgICAuYXR0cihcImZpbGxcIiwgXCJub25lXCIpXG4gICAgICAgIC5hdHRyKFwicG9pbnRlci1ldmVudHNcIiwgXCJhbGxcIilcbiAgICAgICAgLm9uKFwibW91c2Vkb3duLmJydXNoXCIsIHN0YXJ0ZWQpXG4gICAgICAuZmlsdGVyKHRvdWNoYWJsZSlcbiAgICAgICAgLm9uKFwidG91Y2hzdGFydC5icnVzaFwiLCBzdGFydGVkKVxuICAgICAgICAub24oXCJ0b3VjaG1vdmUuYnJ1c2hcIiwgdG91Y2htb3ZlZClcbiAgICAgICAgLm9uKFwidG91Y2hlbmQuYnJ1c2ggdG91Y2hjYW5jZWwuYnJ1c2hcIiwgdG91Y2hlbmRlZClcbiAgICAgICAgLnN0eWxlKFwidG91Y2gtYWN0aW9uXCIsIFwibm9uZVwiKVxuICAgICAgICAuc3R5bGUoXCItd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3JcIiwgXCJyZ2JhKDAsMCwwLDApXCIpO1xuICB9XG5cbiAgYnJ1c2gubW92ZSA9IGZ1bmN0aW9uKGdyb3VwLCBzZWxlY3Rpb24sIGV2ZW50KSB7XG4gICAgaWYgKGdyb3VwLnR3ZWVuKSB7XG4gICAgICBncm91cFxuICAgICAgICAgIC5vbihcInN0YXJ0LmJydXNoXCIsIGZ1bmN0aW9uKGV2ZW50KSB7IGVtaXR0ZXIodGhpcywgYXJndW1lbnRzKS5iZWZvcmVzdGFydCgpLnN0YXJ0KGV2ZW50KTsgfSlcbiAgICAgICAgICAub24oXCJpbnRlcnJ1cHQuYnJ1c2ggZW5kLmJydXNoXCIsIGZ1bmN0aW9uKGV2ZW50KSB7IGVtaXR0ZXIodGhpcywgYXJndW1lbnRzKS5lbmQoZXZlbnQpOyB9KVxuICAgICAgICAgIC50d2VlbihcImJydXNoXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzLFxuICAgICAgICAgICAgICAgIHN0YXRlID0gdGhhdC5fX2JydXNoLFxuICAgICAgICAgICAgICAgIGVtaXQgPSBlbWl0dGVyKHRoYXQsIGFyZ3VtZW50cyksXG4gICAgICAgICAgICAgICAgc2VsZWN0aW9uMCA9IHN0YXRlLnNlbGVjdGlvbixcbiAgICAgICAgICAgICAgICBzZWxlY3Rpb24xID0gZGltLmlucHV0KHR5cGVvZiBzZWxlY3Rpb24gPT09IFwiZnVuY3Rpb25cIiA/IHNlbGVjdGlvbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogc2VsZWN0aW9uLCBzdGF0ZS5leHRlbnQpLFxuICAgICAgICAgICAgICAgIGkgPSBpbnRlcnBvbGF0ZShzZWxlY3Rpb24wLCBzZWxlY3Rpb24xKTtcblxuICAgICAgICAgICAgZnVuY3Rpb24gdHdlZW4odCkge1xuICAgICAgICAgICAgICBzdGF0ZS5zZWxlY3Rpb24gPSB0ID09PSAxICYmIHNlbGVjdGlvbjEgPT09IG51bGwgPyBudWxsIDogaSh0KTtcbiAgICAgICAgICAgICAgcmVkcmF3LmNhbGwodGhhdCk7XG4gICAgICAgICAgICAgIGVtaXQuYnJ1c2goKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHNlbGVjdGlvbjAgIT09IG51bGwgJiYgc2VsZWN0aW9uMSAhPT0gbnVsbCA/IHR3ZWVuIDogdHdlZW4oMSk7XG4gICAgICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdyb3VwXG4gICAgICAgICAgLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXMsXG4gICAgICAgICAgICAgICAgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgICAgICAgICBzdGF0ZSA9IHRoYXQuX19icnVzaCxcbiAgICAgICAgICAgICAgICBzZWxlY3Rpb24xID0gZGltLmlucHV0KHR5cGVvZiBzZWxlY3Rpb24gPT09IFwiZnVuY3Rpb25cIiA/IHNlbGVjdGlvbi5hcHBseSh0aGF0LCBhcmdzKSA6IHNlbGVjdGlvbiwgc3RhdGUuZXh0ZW50KSxcbiAgICAgICAgICAgICAgICBlbWl0ID0gZW1pdHRlcih0aGF0LCBhcmdzKS5iZWZvcmVzdGFydCgpO1xuXG4gICAgICAgICAgICBpbnRlcnJ1cHQodGhhdCk7XG4gICAgICAgICAgICBzdGF0ZS5zZWxlY3Rpb24gPSBzZWxlY3Rpb24xID09PSBudWxsID8gbnVsbCA6IHNlbGVjdGlvbjE7XG4gICAgICAgICAgICByZWRyYXcuY2FsbCh0aGF0KTtcbiAgICAgICAgICAgIGVtaXQuc3RhcnQoZXZlbnQpLmJydXNoKGV2ZW50KS5lbmQoZXZlbnQpO1xuICAgICAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBicnVzaC5jbGVhciA9IGZ1bmN0aW9uKGdyb3VwLCBldmVudCkge1xuICAgIGJydXNoLm1vdmUoZ3JvdXAsIG51bGwsIGV2ZW50KTtcbiAgfTtcblxuICBmdW5jdGlvbiByZWRyYXcoKSB7XG4gICAgdmFyIGdyb3VwID0gc2VsZWN0KHRoaXMpLFxuICAgICAgICBzZWxlY3Rpb24gPSBsb2NhbCh0aGlzKS5zZWxlY3Rpb247XG5cbiAgICBpZiAoc2VsZWN0aW9uKSB7XG4gICAgICBncm91cC5zZWxlY3RBbGwoXCIuc2VsZWN0aW9uXCIpXG4gICAgICAgICAgLnN0eWxlKFwiZGlzcGxheVwiLCBudWxsKVxuICAgICAgICAgIC5hdHRyKFwieFwiLCBzZWxlY3Rpb25bMF1bMF0pXG4gICAgICAgICAgLmF0dHIoXCJ5XCIsIHNlbGVjdGlvblswXVsxXSlcbiAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIHNlbGVjdGlvblsxXVswXSAtIHNlbGVjdGlvblswXVswXSlcbiAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCBzZWxlY3Rpb25bMV1bMV0gLSBzZWxlY3Rpb25bMF1bMV0pO1xuXG4gICAgICBncm91cC5zZWxlY3RBbGwoXCIuaGFuZGxlXCIpXG4gICAgICAgICAgLnN0eWxlKFwiZGlzcGxheVwiLCBudWxsKVxuICAgICAgICAgIC5hdHRyKFwieFwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLnR5cGVbZC50eXBlLmxlbmd0aCAtIDFdID09PSBcImVcIiA/IHNlbGVjdGlvblsxXVswXSAtIGhhbmRsZVNpemUgLyAyIDogc2VsZWN0aW9uWzBdWzBdIC0gaGFuZGxlU2l6ZSAvIDI7IH0pXG4gICAgICAgICAgLmF0dHIoXCJ5XCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQudHlwZVswXSA9PT0gXCJzXCIgPyBzZWxlY3Rpb25bMV1bMV0gLSBoYW5kbGVTaXplIC8gMiA6IHNlbGVjdGlvblswXVsxXSAtIGhhbmRsZVNpemUgLyAyOyB9KVxuICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC50eXBlID09PSBcIm5cIiB8fCBkLnR5cGUgPT09IFwic1wiID8gc2VsZWN0aW9uWzFdWzBdIC0gc2VsZWN0aW9uWzBdWzBdICsgaGFuZGxlU2l6ZSA6IGhhbmRsZVNpemU7IH0pXG4gICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC50eXBlID09PSBcImVcIiB8fCBkLnR5cGUgPT09IFwid1wiID8gc2VsZWN0aW9uWzFdWzFdIC0gc2VsZWN0aW9uWzBdWzFdICsgaGFuZGxlU2l6ZSA6IGhhbmRsZVNpemU7IH0pO1xuICAgIH1cblxuICAgIGVsc2Uge1xuICAgICAgZ3JvdXAuc2VsZWN0QWxsKFwiLnNlbGVjdGlvbiwuaGFuZGxlXCIpXG4gICAgICAgICAgLnN0eWxlKFwiZGlzcGxheVwiLCBcIm5vbmVcIilcbiAgICAgICAgICAuYXR0cihcInhcIiwgbnVsbClcbiAgICAgICAgICAuYXR0cihcInlcIiwgbnVsbClcbiAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIG51bGwpXG4gICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgbnVsbCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZW1pdHRlcih0aGF0LCBhcmdzLCBjbGVhbikge1xuICAgIHZhciBlbWl0ID0gdGhhdC5fX2JydXNoLmVtaXR0ZXI7XG4gICAgcmV0dXJuIGVtaXQgJiYgKCFjbGVhbiB8fCAhZW1pdC5jbGVhbikgPyBlbWl0IDogbmV3IEVtaXR0ZXIodGhhdCwgYXJncywgY2xlYW4pO1xuICB9XG5cbiAgZnVuY3Rpb24gRW1pdHRlcih0aGF0LCBhcmdzLCBjbGVhbikge1xuICAgIHRoaXMudGhhdCA9IHRoYXQ7XG4gICAgdGhpcy5hcmdzID0gYXJncztcbiAgICB0aGlzLnN0YXRlID0gdGhhdC5fX2JydXNoO1xuICAgIHRoaXMuYWN0aXZlID0gMDtcbiAgICB0aGlzLmNsZWFuID0gY2xlYW47XG4gIH1cblxuICBFbWl0dGVyLnByb3RvdHlwZSA9IHtcbiAgICBiZWZvcmVzdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoKyt0aGlzLmFjdGl2ZSA9PT0gMSkgdGhpcy5zdGF0ZS5lbWl0dGVyID0gdGhpcywgdGhpcy5zdGFydGluZyA9IHRydWU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIHN0YXJ0OiBmdW5jdGlvbihldmVudCwgbW9kZSkge1xuICAgICAgaWYgKHRoaXMuc3RhcnRpbmcpIHRoaXMuc3RhcnRpbmcgPSBmYWxzZSwgdGhpcy5lbWl0KFwic3RhcnRcIiwgZXZlbnQsIG1vZGUpO1xuICAgICAgZWxzZSB0aGlzLmVtaXQoXCJicnVzaFwiLCBldmVudCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIGJydXNoOiBmdW5jdGlvbihldmVudCwgbW9kZSkge1xuICAgICAgdGhpcy5lbWl0KFwiYnJ1c2hcIiwgZXZlbnQsIG1vZGUpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBlbmQ6IGZ1bmN0aW9uKGV2ZW50LCBtb2RlKSB7XG4gICAgICBpZiAoLS10aGlzLmFjdGl2ZSA9PT0gMCkgZGVsZXRlIHRoaXMuc3RhdGUuZW1pdHRlciwgdGhpcy5lbWl0KFwiZW5kXCIsIGV2ZW50LCBtb2RlKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgZW1pdDogZnVuY3Rpb24odHlwZSwgZXZlbnQsIG1vZGUpIHtcbiAgICAgIHZhciBkID0gc2VsZWN0KHRoaXMudGhhdCkuZGF0dW0oKTtcbiAgICAgIGxpc3RlbmVycy5jYWxsKFxuICAgICAgICB0eXBlLFxuICAgICAgICB0aGlzLnRoYXQsXG4gICAgICAgIG5ldyBCcnVzaEV2ZW50KHR5cGUsIHtcbiAgICAgICAgICBzb3VyY2VFdmVudDogZXZlbnQsXG4gICAgICAgICAgdGFyZ2V0OiBicnVzaCxcbiAgICAgICAgICBzZWxlY3Rpb246IGRpbS5vdXRwdXQodGhpcy5zdGF0ZS5zZWxlY3Rpb24pLFxuICAgICAgICAgIG1vZGUsXG4gICAgICAgICAgZGlzcGF0Y2g6IGxpc3RlbmVyc1xuICAgICAgICB9KSxcbiAgICAgICAgZFxuICAgICAgKTtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gc3RhcnRlZChldmVudCkge1xuICAgIGlmICh0b3VjaGVuZGluZyAmJiAhZXZlbnQudG91Y2hlcykgcmV0dXJuO1xuICAgIGlmICghZmlsdGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpIHJldHVybjtcblxuICAgIHZhciB0aGF0ID0gdGhpcyxcbiAgICAgICAgdHlwZSA9IGV2ZW50LnRhcmdldC5fX2RhdGFfXy50eXBlLFxuICAgICAgICBtb2RlID0gKGtleXMgJiYgZXZlbnQubWV0YUtleSA/IHR5cGUgPSBcIm92ZXJsYXlcIiA6IHR5cGUpID09PSBcInNlbGVjdGlvblwiID8gTU9ERV9EUkFHIDogKGtleXMgJiYgZXZlbnQuYWx0S2V5ID8gTU9ERV9DRU5URVIgOiBNT0RFX0hBTkRMRSksXG4gICAgICAgIHNpZ25YID0gZGltID09PSBZID8gbnVsbCA6IHNpZ25zWFt0eXBlXSxcbiAgICAgICAgc2lnblkgPSBkaW0gPT09IFggPyBudWxsIDogc2lnbnNZW3R5cGVdLFxuICAgICAgICBzdGF0ZSA9IGxvY2FsKHRoYXQpLFxuICAgICAgICBleHRlbnQgPSBzdGF0ZS5leHRlbnQsXG4gICAgICAgIHNlbGVjdGlvbiA9IHN0YXRlLnNlbGVjdGlvbixcbiAgICAgICAgVyA9IGV4dGVudFswXVswXSwgdzAsIHcxLFxuICAgICAgICBOID0gZXh0ZW50WzBdWzFdLCBuMCwgbjEsXG4gICAgICAgIEUgPSBleHRlbnRbMV1bMF0sIGUwLCBlMSxcbiAgICAgICAgUyA9IGV4dGVudFsxXVsxXSwgczAsIHMxLFxuICAgICAgICBkeCA9IDAsXG4gICAgICAgIGR5ID0gMCxcbiAgICAgICAgbW92aW5nLFxuICAgICAgICBzaGlmdGluZyA9IHNpZ25YICYmIHNpZ25ZICYmIGtleXMgJiYgZXZlbnQuc2hpZnRLZXksXG4gICAgICAgIGxvY2tYLFxuICAgICAgICBsb2NrWSxcbiAgICAgICAgcG9pbnRzID0gQXJyYXkuZnJvbShldmVudC50b3VjaGVzIHx8IFtldmVudF0sIHQgPT4ge1xuICAgICAgICAgIGNvbnN0IGkgPSB0LmlkZW50aWZpZXI7XG4gICAgICAgICAgdCA9IHBvaW50ZXIodCwgdGhhdCk7XG4gICAgICAgICAgdC5wb2ludDAgPSB0LnNsaWNlKCk7XG4gICAgICAgICAgdC5pZGVudGlmaWVyID0gaTtcbiAgICAgICAgICByZXR1cm4gdDtcbiAgICAgICAgfSk7XG5cbiAgICBpbnRlcnJ1cHQodGhhdCk7XG4gICAgdmFyIGVtaXQgPSBlbWl0dGVyKHRoYXQsIGFyZ3VtZW50cywgdHJ1ZSkuYmVmb3Jlc3RhcnQoKTtcblxuICAgIGlmICh0eXBlID09PSBcIm92ZXJsYXlcIikge1xuICAgICAgaWYgKHNlbGVjdGlvbikgbW92aW5nID0gdHJ1ZTtcbiAgICAgIGNvbnN0IHB0cyA9IFtwb2ludHNbMF0sIHBvaW50c1sxXSB8fCBwb2ludHNbMF1dO1xuICAgICAgc3RhdGUuc2VsZWN0aW9uID0gc2VsZWN0aW9uID0gW1tcbiAgICAgICAgICB3MCA9IGRpbSA9PT0gWSA/IFcgOiBtaW4ocHRzWzBdWzBdLCBwdHNbMV1bMF0pLFxuICAgICAgICAgIG4wID0gZGltID09PSBYID8gTiA6IG1pbihwdHNbMF1bMV0sIHB0c1sxXVsxXSlcbiAgICAgICAgXSwgW1xuICAgICAgICAgIGUwID0gZGltID09PSBZID8gRSA6IG1heChwdHNbMF1bMF0sIHB0c1sxXVswXSksXG4gICAgICAgICAgczAgPSBkaW0gPT09IFggPyBTIDogbWF4KHB0c1swXVsxXSwgcHRzWzFdWzFdKVxuICAgICAgICBdXTtcbiAgICAgIGlmIChwb2ludHMubGVuZ3RoID4gMSkgbW92ZShldmVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHcwID0gc2VsZWN0aW9uWzBdWzBdO1xuICAgICAgbjAgPSBzZWxlY3Rpb25bMF1bMV07XG4gICAgICBlMCA9IHNlbGVjdGlvblsxXVswXTtcbiAgICAgIHMwID0gc2VsZWN0aW9uWzFdWzFdO1xuICAgIH1cblxuICAgIHcxID0gdzA7XG4gICAgbjEgPSBuMDtcbiAgICBlMSA9IGUwO1xuICAgIHMxID0gczA7XG5cbiAgICB2YXIgZ3JvdXAgPSBzZWxlY3QodGhhdClcbiAgICAgICAgLmF0dHIoXCJwb2ludGVyLWV2ZW50c1wiLCBcIm5vbmVcIik7XG5cbiAgICB2YXIgb3ZlcmxheSA9IGdyb3VwLnNlbGVjdEFsbChcIi5vdmVybGF5XCIpXG4gICAgICAgIC5hdHRyKFwiY3Vyc29yXCIsIGN1cnNvcnNbdHlwZV0pO1xuXG4gICAgaWYgKGV2ZW50LnRvdWNoZXMpIHtcbiAgICAgIGVtaXQubW92ZWQgPSBtb3ZlZDtcbiAgICAgIGVtaXQuZW5kZWQgPSBlbmRlZDtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHZpZXcgPSBzZWxlY3QoZXZlbnQudmlldylcbiAgICAgICAgICAub24oXCJtb3VzZW1vdmUuYnJ1c2hcIiwgbW92ZWQsIHRydWUpXG4gICAgICAgICAgLm9uKFwibW91c2V1cC5icnVzaFwiLCBlbmRlZCwgdHJ1ZSk7XG4gICAgICBpZiAoa2V5cykgdmlld1xuICAgICAgICAgIC5vbihcImtleWRvd24uYnJ1c2hcIiwga2V5ZG93bmVkLCB0cnVlKVxuICAgICAgICAgIC5vbihcImtleXVwLmJydXNoXCIsIGtleXVwcGVkLCB0cnVlKVxuXG4gICAgICBkcmFnRGlzYWJsZShldmVudC52aWV3KTtcbiAgICB9XG5cbiAgICByZWRyYXcuY2FsbCh0aGF0KTtcbiAgICBlbWl0LnN0YXJ0KGV2ZW50LCBtb2RlLm5hbWUpO1xuXG4gICAgZnVuY3Rpb24gbW92ZWQoZXZlbnQpIHtcbiAgICAgIGZvciAoY29uc3QgcCBvZiBldmVudC5jaGFuZ2VkVG91Y2hlcyB8fCBbZXZlbnRdKSB7XG4gICAgICAgIGZvciAoY29uc3QgZCBvZiBwb2ludHMpXG4gICAgICAgICAgaWYgKGQuaWRlbnRpZmllciA9PT0gcC5pZGVudGlmaWVyKSBkLmN1ciA9IHBvaW50ZXIocCwgdGhhdCk7XG4gICAgICB9XG4gICAgICBpZiAoc2hpZnRpbmcgJiYgIWxvY2tYICYmICFsb2NrWSAmJiBwb2ludHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIGNvbnN0IHBvaW50ID0gcG9pbnRzWzBdO1xuICAgICAgICBpZiAoYWJzKHBvaW50LmN1clswXSAtIHBvaW50WzBdKSA+IGFicyhwb2ludC5jdXJbMV0gLSBwb2ludFsxXSkpXG4gICAgICAgICAgbG9ja1kgPSB0cnVlO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgbG9ja1ggPSB0cnVlO1xuICAgICAgfVxuICAgICAgZm9yIChjb25zdCBwb2ludCBvZiBwb2ludHMpXG4gICAgICAgIGlmIChwb2ludC5jdXIpIHBvaW50WzBdID0gcG9pbnQuY3VyWzBdLCBwb2ludFsxXSA9IHBvaW50LmN1clsxXTtcbiAgICAgIG1vdmluZyA9IHRydWU7XG4gICAgICBub2V2ZW50KGV2ZW50KTtcbiAgICAgIG1vdmUoZXZlbnQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1vdmUoZXZlbnQpIHtcbiAgICAgIGNvbnN0IHBvaW50ID0gcG9pbnRzWzBdLCBwb2ludDAgPSBwb2ludC5wb2ludDA7XG4gICAgICB2YXIgdDtcblxuICAgICAgZHggPSBwb2ludFswXSAtIHBvaW50MFswXTtcbiAgICAgIGR5ID0gcG9pbnRbMV0gLSBwb2ludDBbMV07XG5cbiAgICAgIHN3aXRjaCAobW9kZSkge1xuICAgICAgICBjYXNlIE1PREVfU1BBQ0U6XG4gICAgICAgIGNhc2UgTU9ERV9EUkFHOiB7XG4gICAgICAgICAgaWYgKHNpZ25YKSBkeCA9IG1heChXIC0gdzAsIG1pbihFIC0gZTAsIGR4KSksIHcxID0gdzAgKyBkeCwgZTEgPSBlMCArIGR4O1xuICAgICAgICAgIGlmIChzaWduWSkgZHkgPSBtYXgoTiAtIG4wLCBtaW4oUyAtIHMwLCBkeSkpLCBuMSA9IG4wICsgZHksIHMxID0gczAgKyBkeTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIE1PREVfSEFORExFOiB7XG4gICAgICAgICAgaWYgKHBvaW50c1sxXSkge1xuICAgICAgICAgICAgaWYgKHNpZ25YKSB3MSA9IG1heChXLCBtaW4oRSwgcG9pbnRzWzBdWzBdKSksIGUxID0gbWF4KFcsIG1pbihFLCBwb2ludHNbMV1bMF0pKSwgc2lnblggPSAxO1xuICAgICAgICAgICAgaWYgKHNpZ25ZKSBuMSA9IG1heChOLCBtaW4oUywgcG9pbnRzWzBdWzFdKSksIHMxID0gbWF4KE4sIG1pbihTLCBwb2ludHNbMV1bMV0pKSwgc2lnblkgPSAxO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoc2lnblggPCAwKSBkeCA9IG1heChXIC0gdzAsIG1pbihFIC0gdzAsIGR4KSksIHcxID0gdzAgKyBkeCwgZTEgPSBlMDtcbiAgICAgICAgICAgIGVsc2UgaWYgKHNpZ25YID4gMCkgZHggPSBtYXgoVyAtIGUwLCBtaW4oRSAtIGUwLCBkeCkpLCB3MSA9IHcwLCBlMSA9IGUwICsgZHg7XG4gICAgICAgICAgICBpZiAoc2lnblkgPCAwKSBkeSA9IG1heChOIC0gbjAsIG1pbihTIC0gbjAsIGR5KSksIG4xID0gbjAgKyBkeSwgczEgPSBzMDtcbiAgICAgICAgICAgIGVsc2UgaWYgKHNpZ25ZID4gMCkgZHkgPSBtYXgoTiAtIHMwLCBtaW4oUyAtIHMwLCBkeSkpLCBuMSA9IG4wLCBzMSA9IHMwICsgZHk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgTU9ERV9DRU5URVI6IHtcbiAgICAgICAgICBpZiAoc2lnblgpIHcxID0gbWF4KFcsIG1pbihFLCB3MCAtIGR4ICogc2lnblgpKSwgZTEgPSBtYXgoVywgbWluKEUsIGUwICsgZHggKiBzaWduWCkpO1xuICAgICAgICAgIGlmIChzaWduWSkgbjEgPSBtYXgoTiwgbWluKFMsIG4wIC0gZHkgKiBzaWduWSkpLCBzMSA9IG1heChOLCBtaW4oUywgczAgKyBkeSAqIHNpZ25ZKSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGUxIDwgdzEpIHtcbiAgICAgICAgc2lnblggKj0gLTE7XG4gICAgICAgIHQgPSB3MCwgdzAgPSBlMCwgZTAgPSB0O1xuICAgICAgICB0ID0gdzEsIHcxID0gZTEsIGUxID0gdDtcbiAgICAgICAgaWYgKHR5cGUgaW4gZmxpcFgpIG92ZXJsYXkuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzW3R5cGUgPSBmbGlwWFt0eXBlXV0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoczEgPCBuMSkge1xuICAgICAgICBzaWduWSAqPSAtMTtcbiAgICAgICAgdCA9IG4wLCBuMCA9IHMwLCBzMCA9IHQ7XG4gICAgICAgIHQgPSBuMSwgbjEgPSBzMSwgczEgPSB0O1xuICAgICAgICBpZiAodHlwZSBpbiBmbGlwWSkgb3ZlcmxheS5hdHRyKFwiY3Vyc29yXCIsIGN1cnNvcnNbdHlwZSA9IGZsaXBZW3R5cGVdXSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGF0ZS5zZWxlY3Rpb24pIHNlbGVjdGlvbiA9IHN0YXRlLnNlbGVjdGlvbjsgLy8gTWF5IGJlIHNldCBieSBicnVzaC5tb3ZlIVxuICAgICAgaWYgKGxvY2tYKSB3MSA9IHNlbGVjdGlvblswXVswXSwgZTEgPSBzZWxlY3Rpb25bMV1bMF07XG4gICAgICBpZiAobG9ja1kpIG4xID0gc2VsZWN0aW9uWzBdWzFdLCBzMSA9IHNlbGVjdGlvblsxXVsxXTtcblxuICAgICAgaWYgKHNlbGVjdGlvblswXVswXSAhPT0gdzFcbiAgICAgICAgICB8fCBzZWxlY3Rpb25bMF1bMV0gIT09IG4xXG4gICAgICAgICAgfHwgc2VsZWN0aW9uWzFdWzBdICE9PSBlMVxuICAgICAgICAgIHx8IHNlbGVjdGlvblsxXVsxXSAhPT0gczEpIHtcbiAgICAgICAgc3RhdGUuc2VsZWN0aW9uID0gW1t3MSwgbjFdLCBbZTEsIHMxXV07XG4gICAgICAgIHJlZHJhdy5jYWxsKHRoYXQpO1xuICAgICAgICBlbWl0LmJydXNoKGV2ZW50LCBtb2RlLm5hbWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGVuZGVkKGV2ZW50KSB7XG4gICAgICBub3Byb3BhZ2F0aW9uKGV2ZW50KTtcbiAgICAgIGlmIChldmVudC50b3VjaGVzKSB7XG4gICAgICAgIGlmIChldmVudC50b3VjaGVzLmxlbmd0aCkgcmV0dXJuO1xuICAgICAgICBpZiAodG91Y2hlbmRpbmcpIGNsZWFyVGltZW91dCh0b3VjaGVuZGluZyk7XG4gICAgICAgIHRvdWNoZW5kaW5nID0gc2V0VGltZW91dChmdW5jdGlvbigpIHsgdG91Y2hlbmRpbmcgPSBudWxsOyB9LCA1MDApOyAvLyBHaG9zdCBjbGlja3MgYXJlIGRlbGF5ZWQhXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkcmFnRW5hYmxlKGV2ZW50LnZpZXcsIG1vdmluZyk7XG4gICAgICAgIHZpZXcub24oXCJrZXlkb3duLmJydXNoIGtleXVwLmJydXNoIG1vdXNlbW92ZS5icnVzaCBtb3VzZXVwLmJydXNoXCIsIG51bGwpO1xuICAgICAgfVxuICAgICAgZ3JvdXAuYXR0cihcInBvaW50ZXItZXZlbnRzXCIsIFwiYWxsXCIpO1xuICAgICAgb3ZlcmxheS5hdHRyKFwiY3Vyc29yXCIsIGN1cnNvcnMub3ZlcmxheSk7XG4gICAgICBpZiAoc3RhdGUuc2VsZWN0aW9uKSBzZWxlY3Rpb24gPSBzdGF0ZS5zZWxlY3Rpb247IC8vIE1heSBiZSBzZXQgYnkgYnJ1c2gubW92ZSAob24gc3RhcnQpIVxuICAgICAgaWYgKGVtcHR5KHNlbGVjdGlvbikpIHN0YXRlLnNlbGVjdGlvbiA9IG51bGwsIHJlZHJhdy5jYWxsKHRoYXQpO1xuICAgICAgZW1pdC5lbmQoZXZlbnQsIG1vZGUubmFtZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24ga2V5ZG93bmVkKGV2ZW50KSB7XG4gICAgICBzd2l0Y2ggKGV2ZW50LmtleUNvZGUpIHtcbiAgICAgICAgY2FzZSAxNjogeyAvLyBTSElGVFxuICAgICAgICAgIHNoaWZ0aW5nID0gc2lnblggJiYgc2lnblk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAxODogeyAvLyBBTFRcbiAgICAgICAgICBpZiAobW9kZSA9PT0gTU9ERV9IQU5ETEUpIHtcbiAgICAgICAgICAgIGlmIChzaWduWCkgZTAgPSBlMSAtIGR4ICogc2lnblgsIHcwID0gdzEgKyBkeCAqIHNpZ25YO1xuICAgICAgICAgICAgaWYgKHNpZ25ZKSBzMCA9IHMxIC0gZHkgKiBzaWduWSwgbjAgPSBuMSArIGR5ICogc2lnblk7XG4gICAgICAgICAgICBtb2RlID0gTU9ERV9DRU5URVI7XG4gICAgICAgICAgICBtb3ZlKGV2ZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAzMjogeyAvLyBTUEFDRTsgdGFrZXMgcHJpb3JpdHkgb3ZlciBBTFRcbiAgICAgICAgICBpZiAobW9kZSA9PT0gTU9ERV9IQU5ETEUgfHwgbW9kZSA9PT0gTU9ERV9DRU5URVIpIHtcbiAgICAgICAgICAgIGlmIChzaWduWCA8IDApIGUwID0gZTEgLSBkeDsgZWxzZSBpZiAoc2lnblggPiAwKSB3MCA9IHcxIC0gZHg7XG4gICAgICAgICAgICBpZiAoc2lnblkgPCAwKSBzMCA9IHMxIC0gZHk7IGVsc2UgaWYgKHNpZ25ZID4gMCkgbjAgPSBuMSAtIGR5O1xuICAgICAgICAgICAgbW9kZSA9IE1PREVfU1BBQ0U7XG4gICAgICAgICAgICBvdmVybGF5LmF0dHIoXCJjdXJzb3JcIiwgY3Vyc29ycy5zZWxlY3Rpb24pO1xuICAgICAgICAgICAgbW92ZShldmVudCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6IHJldHVybjtcbiAgICAgIH1cbiAgICAgIG5vZXZlbnQoZXZlbnQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGtleXVwcGVkKGV2ZW50KSB7XG4gICAgICBzd2l0Y2ggKGV2ZW50LmtleUNvZGUpIHtcbiAgICAgICAgY2FzZSAxNjogeyAvLyBTSElGVFxuICAgICAgICAgIGlmIChzaGlmdGluZykge1xuICAgICAgICAgICAgbG9ja1ggPSBsb2NrWSA9IHNoaWZ0aW5nID0gZmFsc2U7XG4gICAgICAgICAgICBtb3ZlKGV2ZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAxODogeyAvLyBBTFRcbiAgICAgICAgICBpZiAobW9kZSA9PT0gTU9ERV9DRU5URVIpIHtcbiAgICAgICAgICAgIGlmIChzaWduWCA8IDApIGUwID0gZTE7IGVsc2UgaWYgKHNpZ25YID4gMCkgdzAgPSB3MTtcbiAgICAgICAgICAgIGlmIChzaWduWSA8IDApIHMwID0gczE7IGVsc2UgaWYgKHNpZ25ZID4gMCkgbjAgPSBuMTtcbiAgICAgICAgICAgIG1vZGUgPSBNT0RFX0hBTkRMRTtcbiAgICAgICAgICAgIG1vdmUoZXZlbnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIDMyOiB7IC8vIFNQQUNFXG4gICAgICAgICAgaWYgKG1vZGUgPT09IE1PREVfU1BBQ0UpIHtcbiAgICAgICAgICAgIGlmIChldmVudC5hbHRLZXkpIHtcbiAgICAgICAgICAgICAgaWYgKHNpZ25YKSBlMCA9IGUxIC0gZHggKiBzaWduWCwgdzAgPSB3MSArIGR4ICogc2lnblg7XG4gICAgICAgICAgICAgIGlmIChzaWduWSkgczAgPSBzMSAtIGR5ICogc2lnblksIG4wID0gbjEgKyBkeSAqIHNpZ25ZO1xuICAgICAgICAgICAgICBtb2RlID0gTU9ERV9DRU5URVI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBpZiAoc2lnblggPCAwKSBlMCA9IGUxOyBlbHNlIGlmIChzaWduWCA+IDApIHcwID0gdzE7XG4gICAgICAgICAgICAgIGlmIChzaWduWSA8IDApIHMwID0gczE7IGVsc2UgaWYgKHNpZ25ZID4gMCkgbjAgPSBuMTtcbiAgICAgICAgICAgICAgbW9kZSA9IE1PREVfSEFORExFO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3ZlcmxheS5hdHRyKFwiY3Vyc29yXCIsIGN1cnNvcnNbdHlwZV0pO1xuICAgICAgICAgICAgbW92ZShldmVudCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6IHJldHVybjtcbiAgICAgIH1cbiAgICAgIG5vZXZlbnQoZXZlbnQpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHRvdWNobW92ZWQoZXZlbnQpIHtcbiAgICBlbWl0dGVyKHRoaXMsIGFyZ3VtZW50cykubW92ZWQoZXZlbnQpO1xuICB9XG5cbiAgZnVuY3Rpb24gdG91Y2hlbmRlZChldmVudCkge1xuICAgIGVtaXR0ZXIodGhpcywgYXJndW1lbnRzKS5lbmRlZChldmVudCk7XG4gIH1cblxuICBmdW5jdGlvbiBpbml0aWFsaXplKCkge1xuICAgIHZhciBzdGF0ZSA9IHRoaXMuX19icnVzaCB8fCB7c2VsZWN0aW9uOiBudWxsfTtcbiAgICBzdGF0ZS5leHRlbnQgPSBudW1iZXIyKGV4dGVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgICBzdGF0ZS5kaW0gPSBkaW07XG4gICAgcmV0dXJuIHN0YXRlO1xuICB9XG5cbiAgYnJ1c2guZXh0ZW50ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGV4dGVudCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQobnVtYmVyMihfKSksIGJydXNoKSA6IGV4dGVudDtcbiAgfTtcblxuICBicnVzaC5maWx0ZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZmlsdGVyID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCghIV8pLCBicnVzaCkgOiBmaWx0ZXI7XG4gIH07XG5cbiAgYnJ1c2gudG91Y2hhYmxlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRvdWNoYWJsZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoISFfKSwgYnJ1c2gpIDogdG91Y2hhYmxlO1xuICB9O1xuXG4gIGJydXNoLmhhbmRsZVNpemUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoaGFuZGxlU2l6ZSA9ICtfLCBicnVzaCkgOiBoYW5kbGVTaXplO1xuICB9O1xuXG4gIGJydXNoLmtleU1vZGlmaWVycyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChrZXlzID0gISFfLCBicnVzaCkgOiBrZXlzO1xuICB9O1xuXG4gIGJydXNoLm9uID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZhbHVlID0gbGlzdGVuZXJzLm9uLmFwcGx5KGxpc3RlbmVycywgYXJndW1lbnRzKTtcbiAgICByZXR1cm4gdmFsdWUgPT09IGxpc3RlbmVycyA/IGJydXNoIDogdmFsdWU7XG4gIH07XG5cbiAgcmV0dXJuIGJydXNoO1xufVxuIiwgImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgsIHkpIHtcbiAgdmFyIG5vZGVzLCBzdHJlbmd0aCA9IDE7XG5cbiAgaWYgKHggPT0gbnVsbCkgeCA9IDA7XG4gIGlmICh5ID09IG51bGwpIHkgPSAwO1xuXG4gIGZ1bmN0aW9uIGZvcmNlKCkge1xuICAgIHZhciBpLFxuICAgICAgICBuID0gbm9kZXMubGVuZ3RoLFxuICAgICAgICBub2RlLFxuICAgICAgICBzeCA9IDAsXG4gICAgICAgIHN5ID0gMDtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIG5vZGUgPSBub2Rlc1tpXSwgc3ggKz0gbm9kZS54LCBzeSArPSBub2RlLnk7XG4gICAgfVxuXG4gICAgZm9yIChzeCA9IChzeCAvIG4gLSB4KSAqIHN0cmVuZ3RoLCBzeSA9IChzeSAvIG4gLSB5KSAqIHN0cmVuZ3RoLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgbm9kZSA9IG5vZGVzW2ldLCBub2RlLnggLT0gc3gsIG5vZGUueSAtPSBzeTtcbiAgICB9XG4gIH1cblxuICBmb3JjZS5pbml0aWFsaXplID0gZnVuY3Rpb24oXykge1xuICAgIG5vZGVzID0gXztcbiAgfTtcblxuICBmb3JjZS54ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHggPSArXywgZm9yY2UpIDogeDtcbiAgfTtcblxuICBmb3JjZS55ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHkgPSArXywgZm9yY2UpIDogeTtcbiAgfTtcblxuICBmb3JjZS5zdHJlbmd0aCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzdHJlbmd0aCA9ICtfLCBmb3JjZSkgOiBzdHJlbmd0aDtcbiAgfTtcblxuICByZXR1cm4gZm9yY2U7XG59XG4iLCAiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZCkge1xuICBjb25zdCB4ID0gK3RoaXMuX3guY2FsbChudWxsLCBkKSxcbiAgICAgIHkgPSArdGhpcy5feS5jYWxsKG51bGwsIGQpO1xuICByZXR1cm4gYWRkKHRoaXMuY292ZXIoeCwgeSksIHgsIHksIGQpO1xufVxuXG5mdW5jdGlvbiBhZGQodHJlZSwgeCwgeSwgZCkge1xuICBpZiAoaXNOYU4oeCkgfHwgaXNOYU4oeSkpIHJldHVybiB0cmVlOyAvLyBpZ25vcmUgaW52YWxpZCBwb2ludHNcblxuICB2YXIgcGFyZW50LFxuICAgICAgbm9kZSA9IHRyZWUuX3Jvb3QsXG4gICAgICBsZWFmID0ge2RhdGE6IGR9LFxuICAgICAgeDAgPSB0cmVlLl94MCxcbiAgICAgIHkwID0gdHJlZS5feTAsXG4gICAgICB4MSA9IHRyZWUuX3gxLFxuICAgICAgeTEgPSB0cmVlLl95MSxcbiAgICAgIHhtLFxuICAgICAgeW0sXG4gICAgICB4cCxcbiAgICAgIHlwLFxuICAgICAgcmlnaHQsXG4gICAgICBib3R0b20sXG4gICAgICBpLFxuICAgICAgajtcblxuICAvLyBJZiB0aGUgdHJlZSBpcyBlbXB0eSwgaW5pdGlhbGl6ZSB0aGUgcm9vdCBhcyBhIGxlYWYuXG4gIGlmICghbm9kZSkgcmV0dXJuIHRyZWUuX3Jvb3QgPSBsZWFmLCB0cmVlO1xuXG4gIC8vIEZpbmQgdGhlIGV4aXN0aW5nIGxlYWYgZm9yIHRoZSBuZXcgcG9pbnQsIG9yIGFkZCBpdC5cbiAgd2hpbGUgKG5vZGUubGVuZ3RoKSB7XG4gICAgaWYgKHJpZ2h0ID0geCA+PSAoeG0gPSAoeDAgKyB4MSkgLyAyKSkgeDAgPSB4bTsgZWxzZSB4MSA9IHhtO1xuICAgIGlmIChib3R0b20gPSB5ID49ICh5bSA9ICh5MCArIHkxKSAvIDIpKSB5MCA9IHltOyBlbHNlIHkxID0geW07XG4gICAgaWYgKHBhcmVudCA9IG5vZGUsICEobm9kZSA9IG5vZGVbaSA9IGJvdHRvbSA8PCAxIHwgcmlnaHRdKSkgcmV0dXJuIHBhcmVudFtpXSA9IGxlYWYsIHRyZWU7XG4gIH1cblxuICAvLyBJcyB0aGUgbmV3IHBvaW50IGlzIGV4YWN0bHkgY29pbmNpZGVudCB3aXRoIHRoZSBleGlzdGluZyBwb2ludD9cbiAgeHAgPSArdHJlZS5feC5jYWxsKG51bGwsIG5vZGUuZGF0YSk7XG4gIHlwID0gK3RyZWUuX3kuY2FsbChudWxsLCBub2RlLmRhdGEpO1xuICBpZiAoeCA9PT0geHAgJiYgeSA9PT0geXApIHJldHVybiBsZWFmLm5leHQgPSBub2RlLCBwYXJlbnQgPyBwYXJlbnRbaV0gPSBsZWFmIDogdHJlZS5fcm9vdCA9IGxlYWYsIHRyZWU7XG5cbiAgLy8gT3RoZXJ3aXNlLCBzcGxpdCB0aGUgbGVhZiBub2RlIHVudGlsIHRoZSBvbGQgYW5kIG5ldyBwb2ludCBhcmUgc2VwYXJhdGVkLlxuICBkbyB7XG4gICAgcGFyZW50ID0gcGFyZW50ID8gcGFyZW50W2ldID0gbmV3IEFycmF5KDQpIDogdHJlZS5fcm9vdCA9IG5ldyBBcnJheSg0KTtcbiAgICBpZiAocmlnaHQgPSB4ID49ICh4bSA9ICh4MCArIHgxKSAvIDIpKSB4MCA9IHhtOyBlbHNlIHgxID0geG07XG4gICAgaWYgKGJvdHRvbSA9IHkgPj0gKHltID0gKHkwICsgeTEpIC8gMikpIHkwID0geW07IGVsc2UgeTEgPSB5bTtcbiAgfSB3aGlsZSAoKGkgPSBib3R0b20gPDwgMSB8IHJpZ2h0KSA9PT0gKGogPSAoeXAgPj0geW0pIDw8IDEgfCAoeHAgPj0geG0pKSk7XG4gIHJldHVybiBwYXJlbnRbal0gPSBub2RlLCBwYXJlbnRbaV0gPSBsZWFmLCB0cmVlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYWRkQWxsKGRhdGEpIHtcbiAgdmFyIGQsIGksIG4gPSBkYXRhLmxlbmd0aCxcbiAgICAgIHgsXG4gICAgICB5LFxuICAgICAgeHogPSBuZXcgQXJyYXkobiksXG4gICAgICB5eiA9IG5ldyBBcnJheShuKSxcbiAgICAgIHgwID0gSW5maW5pdHksXG4gICAgICB5MCA9IEluZmluaXR5LFxuICAgICAgeDEgPSAtSW5maW5pdHksXG4gICAgICB5MSA9IC1JbmZpbml0eTtcblxuICAvLyBDb21wdXRlIHRoZSBwb2ludHMgYW5kIHRoZWlyIGV4dGVudC5cbiAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgIGlmIChpc05hTih4ID0gK3RoaXMuX3guY2FsbChudWxsLCBkID0gZGF0YVtpXSkpIHx8IGlzTmFOKHkgPSArdGhpcy5feS5jYWxsKG51bGwsIGQpKSkgY29udGludWU7XG4gICAgeHpbaV0gPSB4O1xuICAgIHl6W2ldID0geTtcbiAgICBpZiAoeCA8IHgwKSB4MCA9IHg7XG4gICAgaWYgKHggPiB4MSkgeDEgPSB4O1xuICAgIGlmICh5IDwgeTApIHkwID0geTtcbiAgICBpZiAoeSA+IHkxKSB5MSA9IHk7XG4gIH1cblxuICAvLyBJZiB0aGVyZSB3ZXJlIG5vICh2YWxpZCkgcG9pbnRzLCBhYm9ydC5cbiAgaWYgKHgwID4geDEgfHwgeTAgPiB5MSkgcmV0dXJuIHRoaXM7XG5cbiAgLy8gRXhwYW5kIHRoZSB0cmVlIHRvIGNvdmVyIHRoZSBuZXcgcG9pbnRzLlxuICB0aGlzLmNvdmVyKHgwLCB5MCkuY292ZXIoeDEsIHkxKTtcblxuICAvLyBBZGQgdGhlIG5ldyBwb2ludHMuXG4gIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICBhZGQodGhpcywgeHpbaV0sIHl6W2ldLCBkYXRhW2ldKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuIiwgImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgsIHkpIHtcbiAgaWYgKGlzTmFOKHggPSAreCkgfHwgaXNOYU4oeSA9ICt5KSkgcmV0dXJuIHRoaXM7IC8vIGlnbm9yZSBpbnZhbGlkIHBvaW50c1xuXG4gIHZhciB4MCA9IHRoaXMuX3gwLFxuICAgICAgeTAgPSB0aGlzLl95MCxcbiAgICAgIHgxID0gdGhpcy5feDEsXG4gICAgICB5MSA9IHRoaXMuX3kxO1xuXG4gIC8vIElmIHRoZSBxdWFkdHJlZSBoYXMgbm8gZXh0ZW50LCBpbml0aWFsaXplIHRoZW0uXG4gIC8vIEludGVnZXIgZXh0ZW50IGFyZSBuZWNlc3Nhcnkgc28gdGhhdCBpZiB3ZSBsYXRlciBkb3VibGUgdGhlIGV4dGVudCxcbiAgLy8gdGhlIGV4aXN0aW5nIHF1YWRyYW50IGJvdW5kYXJpZXMgZG9uXHUyMDE5dCBjaGFuZ2UgZHVlIHRvIGZsb2F0aW5nIHBvaW50IGVycm9yIVxuICBpZiAoaXNOYU4oeDApKSB7XG4gICAgeDEgPSAoeDAgPSBNYXRoLmZsb29yKHgpKSArIDE7XG4gICAgeTEgPSAoeTAgPSBNYXRoLmZsb29yKHkpKSArIDE7XG4gIH1cblxuICAvLyBPdGhlcndpc2UsIGRvdWJsZSByZXBlYXRlZGx5IHRvIGNvdmVyLlxuICBlbHNlIHtcbiAgICB2YXIgeiA9IHgxIC0geDAgfHwgMSxcbiAgICAgICAgbm9kZSA9IHRoaXMuX3Jvb3QsXG4gICAgICAgIHBhcmVudCxcbiAgICAgICAgaTtcblxuICAgIHdoaWxlICh4MCA+IHggfHwgeCA+PSB4MSB8fCB5MCA+IHkgfHwgeSA+PSB5MSkge1xuICAgICAgaSA9ICh5IDwgeTApIDw8IDEgfCAoeCA8IHgwKTtcbiAgICAgIHBhcmVudCA9IG5ldyBBcnJheSg0KSwgcGFyZW50W2ldID0gbm9kZSwgbm9kZSA9IHBhcmVudCwgeiAqPSAyO1xuICAgICAgc3dpdGNoIChpKSB7XG4gICAgICAgIGNhc2UgMDogeDEgPSB4MCArIHosIHkxID0geTAgKyB6OyBicmVhaztcbiAgICAgICAgY2FzZSAxOiB4MCA9IHgxIC0geiwgeTEgPSB5MCArIHo7IGJyZWFrO1xuICAgICAgICBjYXNlIDI6IHgxID0geDAgKyB6LCB5MCA9IHkxIC0gejsgYnJlYWs7XG4gICAgICAgIGNhc2UgMzogeDAgPSB4MSAtIHosIHkwID0geTEgLSB6OyBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5fcm9vdCAmJiB0aGlzLl9yb290Lmxlbmd0aCkgdGhpcy5fcm9vdCA9IG5vZGU7XG4gIH1cblxuICB0aGlzLl94MCA9IHgwO1xuICB0aGlzLl95MCA9IHkwO1xuICB0aGlzLl94MSA9IHgxO1xuICB0aGlzLl95MSA9IHkxO1xuICByZXR1cm4gdGhpcztcbn1cbiIsICJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIGRhdGEgPSBbXTtcbiAgdGhpcy52aXNpdChmdW5jdGlvbihub2RlKSB7XG4gICAgaWYgKCFub2RlLmxlbmd0aCkgZG8gZGF0YS5wdXNoKG5vZGUuZGF0YSk7IHdoaWxlIChub2RlID0gbm9kZS5uZXh0KVxuICB9KTtcbiAgcmV0dXJuIGRhdGE7XG59XG4iLCAiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oXykge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgPyB0aGlzLmNvdmVyKCtfWzBdWzBdLCArX1swXVsxXSkuY292ZXIoK19bMV1bMF0sICtfWzFdWzFdKVxuICAgICAgOiBpc05hTih0aGlzLl94MCkgPyB1bmRlZmluZWQgOiBbW3RoaXMuX3gwLCB0aGlzLl95MF0sIFt0aGlzLl94MSwgdGhpcy5feTFdXTtcbn1cbiIsICJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihub2RlLCB4MCwgeTAsIHgxLCB5MSkge1xuICB0aGlzLm5vZGUgPSBub2RlO1xuICB0aGlzLngwID0geDA7XG4gIHRoaXMueTAgPSB5MDtcbiAgdGhpcy54MSA9IHgxO1xuICB0aGlzLnkxID0geTE7XG59XG4iLCAiaW1wb3J0IFF1YWQgZnJvbSBcIi4vcXVhZC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4LCB5LCByYWRpdXMpIHtcbiAgdmFyIGRhdGEsXG4gICAgICB4MCA9IHRoaXMuX3gwLFxuICAgICAgeTAgPSB0aGlzLl95MCxcbiAgICAgIHgxLFxuICAgICAgeTEsXG4gICAgICB4MixcbiAgICAgIHkyLFxuICAgICAgeDMgPSB0aGlzLl94MSxcbiAgICAgIHkzID0gdGhpcy5feTEsXG4gICAgICBxdWFkcyA9IFtdLFxuICAgICAgbm9kZSA9IHRoaXMuX3Jvb3QsXG4gICAgICBxLFxuICAgICAgaTtcblxuICBpZiAobm9kZSkgcXVhZHMucHVzaChuZXcgUXVhZChub2RlLCB4MCwgeTAsIHgzLCB5MykpO1xuICBpZiAocmFkaXVzID09IG51bGwpIHJhZGl1cyA9IEluZmluaXR5O1xuICBlbHNlIHtcbiAgICB4MCA9IHggLSByYWRpdXMsIHkwID0geSAtIHJhZGl1cztcbiAgICB4MyA9IHggKyByYWRpdXMsIHkzID0geSArIHJhZGl1cztcbiAgICByYWRpdXMgKj0gcmFkaXVzO1xuICB9XG5cbiAgd2hpbGUgKHEgPSBxdWFkcy5wb3AoKSkge1xuXG4gICAgLy8gU3RvcCBzZWFyY2hpbmcgaWYgdGhpcyBxdWFkcmFudCBjYW5cdTIwMTl0IGNvbnRhaW4gYSBjbG9zZXIgbm9kZS5cbiAgICBpZiAoIShub2RlID0gcS5ub2RlKVxuICAgICAgICB8fCAoeDEgPSBxLngwKSA+IHgzXG4gICAgICAgIHx8ICh5MSA9IHEueTApID4geTNcbiAgICAgICAgfHwgKHgyID0gcS54MSkgPCB4MFxuICAgICAgICB8fCAoeTIgPSBxLnkxKSA8IHkwKSBjb250aW51ZTtcblxuICAgIC8vIEJpc2VjdCB0aGUgY3VycmVudCBxdWFkcmFudC5cbiAgICBpZiAobm9kZS5sZW5ndGgpIHtcbiAgICAgIHZhciB4bSA9ICh4MSArIHgyKSAvIDIsXG4gICAgICAgICAgeW0gPSAoeTEgKyB5MikgLyAyO1xuXG4gICAgICBxdWFkcy5wdXNoKFxuICAgICAgICBuZXcgUXVhZChub2RlWzNdLCB4bSwgeW0sIHgyLCB5MiksXG4gICAgICAgIG5ldyBRdWFkKG5vZGVbMl0sIHgxLCB5bSwgeG0sIHkyKSxcbiAgICAgICAgbmV3IFF1YWQobm9kZVsxXSwgeG0sIHkxLCB4MiwgeW0pLFxuICAgICAgICBuZXcgUXVhZChub2RlWzBdLCB4MSwgeTEsIHhtLCB5bSlcbiAgICAgICk7XG5cbiAgICAgIC8vIFZpc2l0IHRoZSBjbG9zZXN0IHF1YWRyYW50IGZpcnN0LlxuICAgICAgaWYgKGkgPSAoeSA+PSB5bSkgPDwgMSB8ICh4ID49IHhtKSkge1xuICAgICAgICBxID0gcXVhZHNbcXVhZHMubGVuZ3RoIC0gMV07XG4gICAgICAgIHF1YWRzW3F1YWRzLmxlbmd0aCAtIDFdID0gcXVhZHNbcXVhZHMubGVuZ3RoIC0gMSAtIGldO1xuICAgICAgICBxdWFkc1txdWFkcy5sZW5ndGggLSAxIC0gaV0gPSBxO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFZpc2l0IHRoaXMgcG9pbnQuIChWaXNpdGluZyBjb2luY2lkZW50IHBvaW50cyBpc25cdTIwMTl0IG5lY2Vzc2FyeSEpXG4gICAgZWxzZSB7XG4gICAgICB2YXIgZHggPSB4IC0gK3RoaXMuX3guY2FsbChudWxsLCBub2RlLmRhdGEpLFxuICAgICAgICAgIGR5ID0geSAtICt0aGlzLl95LmNhbGwobnVsbCwgbm9kZS5kYXRhKSxcbiAgICAgICAgICBkMiA9IGR4ICogZHggKyBkeSAqIGR5O1xuICAgICAgaWYgKGQyIDwgcmFkaXVzKSB7XG4gICAgICAgIHZhciBkID0gTWF0aC5zcXJ0KHJhZGl1cyA9IGQyKTtcbiAgICAgICAgeDAgPSB4IC0gZCwgeTAgPSB5IC0gZDtcbiAgICAgICAgeDMgPSB4ICsgZCwgeTMgPSB5ICsgZDtcbiAgICAgICAgZGF0YSA9IG5vZGUuZGF0YTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gZGF0YTtcbn1cbiIsICJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihkKSB7XG4gIGlmIChpc05hTih4ID0gK3RoaXMuX3guY2FsbChudWxsLCBkKSkgfHwgaXNOYU4oeSA9ICt0aGlzLl95LmNhbGwobnVsbCwgZCkpKSByZXR1cm4gdGhpczsgLy8gaWdub3JlIGludmFsaWQgcG9pbnRzXG5cbiAgdmFyIHBhcmVudCxcbiAgICAgIG5vZGUgPSB0aGlzLl9yb290LFxuICAgICAgcmV0YWluZXIsXG4gICAgICBwcmV2aW91cyxcbiAgICAgIG5leHQsXG4gICAgICB4MCA9IHRoaXMuX3gwLFxuICAgICAgeTAgPSB0aGlzLl95MCxcbiAgICAgIHgxID0gdGhpcy5feDEsXG4gICAgICB5MSA9IHRoaXMuX3kxLFxuICAgICAgeCxcbiAgICAgIHksXG4gICAgICB4bSxcbiAgICAgIHltLFxuICAgICAgcmlnaHQsXG4gICAgICBib3R0b20sXG4gICAgICBpLFxuICAgICAgajtcblxuICAvLyBJZiB0aGUgdHJlZSBpcyBlbXB0eSwgaW5pdGlhbGl6ZSB0aGUgcm9vdCBhcyBhIGxlYWYuXG4gIGlmICghbm9kZSkgcmV0dXJuIHRoaXM7XG5cbiAgLy8gRmluZCB0aGUgbGVhZiBub2RlIGZvciB0aGUgcG9pbnQuXG4gIC8vIFdoaWxlIGRlc2NlbmRpbmcsIGFsc28gcmV0YWluIHRoZSBkZWVwZXN0IHBhcmVudCB3aXRoIGEgbm9uLXJlbW92ZWQgc2libGluZy5cbiAgaWYgKG5vZGUubGVuZ3RoKSB3aGlsZSAodHJ1ZSkge1xuICAgIGlmIChyaWdodCA9IHggPj0gKHhtID0gKHgwICsgeDEpIC8gMikpIHgwID0geG07IGVsc2UgeDEgPSB4bTtcbiAgICBpZiAoYm90dG9tID0geSA+PSAoeW0gPSAoeTAgKyB5MSkgLyAyKSkgeTAgPSB5bTsgZWxzZSB5MSA9IHltO1xuICAgIGlmICghKHBhcmVudCA9IG5vZGUsIG5vZGUgPSBub2RlW2kgPSBib3R0b20gPDwgMSB8IHJpZ2h0XSkpIHJldHVybiB0aGlzO1xuICAgIGlmICghbm9kZS5sZW5ndGgpIGJyZWFrO1xuICAgIGlmIChwYXJlbnRbKGkgKyAxKSAmIDNdIHx8IHBhcmVudFsoaSArIDIpICYgM10gfHwgcGFyZW50WyhpICsgMykgJiAzXSkgcmV0YWluZXIgPSBwYXJlbnQsIGogPSBpO1xuICB9XG5cbiAgLy8gRmluZCB0aGUgcG9pbnQgdG8gcmVtb3ZlLlxuICB3aGlsZSAobm9kZS5kYXRhICE9PSBkKSBpZiAoIShwcmV2aW91cyA9IG5vZGUsIG5vZGUgPSBub2RlLm5leHQpKSByZXR1cm4gdGhpcztcbiAgaWYgKG5leHQgPSBub2RlLm5leHQpIGRlbGV0ZSBub2RlLm5leHQ7XG5cbiAgLy8gSWYgdGhlcmUgYXJlIG11bHRpcGxlIGNvaW5jaWRlbnQgcG9pbnRzLCByZW1vdmUganVzdCB0aGUgcG9pbnQuXG4gIGlmIChwcmV2aW91cykgcmV0dXJuIChuZXh0ID8gcHJldmlvdXMubmV4dCA9IG5leHQgOiBkZWxldGUgcHJldmlvdXMubmV4dCksIHRoaXM7XG5cbiAgLy8gSWYgdGhpcyBpcyB0aGUgcm9vdCBwb2ludCwgcmVtb3ZlIGl0LlxuICBpZiAoIXBhcmVudCkgcmV0dXJuIHRoaXMuX3Jvb3QgPSBuZXh0LCB0aGlzO1xuXG4gIC8vIFJlbW92ZSB0aGlzIGxlYWYuXG4gIG5leHQgPyBwYXJlbnRbaV0gPSBuZXh0IDogZGVsZXRlIHBhcmVudFtpXTtcblxuICAvLyBJZiB0aGUgcGFyZW50IG5vdyBjb250YWlucyBleGFjdGx5IG9uZSBsZWFmLCBjb2xsYXBzZSBzdXBlcmZsdW91cyBwYXJlbnRzLlxuICBpZiAoKG5vZGUgPSBwYXJlbnRbMF0gfHwgcGFyZW50WzFdIHx8IHBhcmVudFsyXSB8fCBwYXJlbnRbM10pXG4gICAgICAmJiBub2RlID09PSAocGFyZW50WzNdIHx8IHBhcmVudFsyXSB8fCBwYXJlbnRbMV0gfHwgcGFyZW50WzBdKVxuICAgICAgJiYgIW5vZGUubGVuZ3RoKSB7XG4gICAgaWYgKHJldGFpbmVyKSByZXRhaW5lcltqXSA9IG5vZGU7XG4gICAgZWxzZSB0aGlzLl9yb290ID0gbm9kZTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlQWxsKGRhdGEpIHtcbiAgZm9yICh2YXIgaSA9IDAsIG4gPSBkYXRhLmxlbmd0aDsgaSA8IG47ICsraSkgdGhpcy5yZW1vdmUoZGF0YVtpXSk7XG4gIHJldHVybiB0aGlzO1xufVxuIiwgImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5fcm9vdDtcbn1cbiIsICJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIHNpemUgPSAwO1xuICB0aGlzLnZpc2l0KGZ1bmN0aW9uKG5vZGUpIHtcbiAgICBpZiAoIW5vZGUubGVuZ3RoKSBkbyArK3NpemU7IHdoaWxlIChub2RlID0gbm9kZS5uZXh0KVxuICB9KTtcbiAgcmV0dXJuIHNpemU7XG59XG4iLCAiaW1wb3J0IFF1YWQgZnJvbSBcIi4vcXVhZC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjYWxsYmFjaykge1xuICB2YXIgcXVhZHMgPSBbXSwgcSwgbm9kZSA9IHRoaXMuX3Jvb3QsIGNoaWxkLCB4MCwgeTAsIHgxLCB5MTtcbiAgaWYgKG5vZGUpIHF1YWRzLnB1c2gobmV3IFF1YWQobm9kZSwgdGhpcy5feDAsIHRoaXMuX3kwLCB0aGlzLl94MSwgdGhpcy5feTEpKTtcbiAgd2hpbGUgKHEgPSBxdWFkcy5wb3AoKSkge1xuICAgIGlmICghY2FsbGJhY2sobm9kZSA9IHEubm9kZSwgeDAgPSBxLngwLCB5MCA9IHEueTAsIHgxID0gcS54MSwgeTEgPSBxLnkxKSAmJiBub2RlLmxlbmd0aCkge1xuICAgICAgdmFyIHhtID0gKHgwICsgeDEpIC8gMiwgeW0gPSAoeTAgKyB5MSkgLyAyO1xuICAgICAgaWYgKGNoaWxkID0gbm9kZVszXSkgcXVhZHMucHVzaChuZXcgUXVhZChjaGlsZCwgeG0sIHltLCB4MSwgeTEpKTtcbiAgICAgIGlmIChjaGlsZCA9IG5vZGVbMl0pIHF1YWRzLnB1c2gobmV3IFF1YWQoY2hpbGQsIHgwLCB5bSwgeG0sIHkxKSk7XG4gICAgICBpZiAoY2hpbGQgPSBub2RlWzFdKSBxdWFkcy5wdXNoKG5ldyBRdWFkKGNoaWxkLCB4bSwgeTAsIHgxLCB5bSkpO1xuICAgICAgaWYgKGNoaWxkID0gbm9kZVswXSkgcXVhZHMucHVzaChuZXcgUXVhZChjaGlsZCwgeDAsIHkwLCB4bSwgeW0pKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG4iLCAiaW1wb3J0IFF1YWQgZnJvbSBcIi4vcXVhZC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjYWxsYmFjaykge1xuICB2YXIgcXVhZHMgPSBbXSwgbmV4dCA9IFtdLCBxO1xuICBpZiAodGhpcy5fcm9vdCkgcXVhZHMucHVzaChuZXcgUXVhZCh0aGlzLl9yb290LCB0aGlzLl94MCwgdGhpcy5feTAsIHRoaXMuX3gxLCB0aGlzLl95MSkpO1xuICB3aGlsZSAocSA9IHF1YWRzLnBvcCgpKSB7XG4gICAgdmFyIG5vZGUgPSBxLm5vZGU7XG4gICAgaWYgKG5vZGUubGVuZ3RoKSB7XG4gICAgICB2YXIgY2hpbGQsIHgwID0gcS54MCwgeTAgPSBxLnkwLCB4MSA9IHEueDEsIHkxID0gcS55MSwgeG0gPSAoeDAgKyB4MSkgLyAyLCB5bSA9ICh5MCArIHkxKSAvIDI7XG4gICAgICBpZiAoY2hpbGQgPSBub2RlWzBdKSBxdWFkcy5wdXNoKG5ldyBRdWFkKGNoaWxkLCB4MCwgeTAsIHhtLCB5bSkpO1xuICAgICAgaWYgKGNoaWxkID0gbm9kZVsxXSkgcXVhZHMucHVzaChuZXcgUXVhZChjaGlsZCwgeG0sIHkwLCB4MSwgeW0pKTtcbiAgICAgIGlmIChjaGlsZCA9IG5vZGVbMl0pIHF1YWRzLnB1c2gobmV3IFF1YWQoY2hpbGQsIHgwLCB5bSwgeG0sIHkxKSk7XG4gICAgICBpZiAoY2hpbGQgPSBub2RlWzNdKSBxdWFkcy5wdXNoKG5ldyBRdWFkKGNoaWxkLCB4bSwgeW0sIHgxLCB5MSkpO1xuICAgIH1cbiAgICBuZXh0LnB1c2gocSk7XG4gIH1cbiAgd2hpbGUgKHEgPSBuZXh0LnBvcCgpKSB7XG4gICAgY2FsbGJhY2socS5ub2RlLCBxLngwLCBxLnkwLCBxLngxLCBxLnkxKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn1cbiIsICJleHBvcnQgZnVuY3Rpb24gZGVmYXVsdFgoZCkge1xuICByZXR1cm4gZFswXTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oXykge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aGlzLl94ID0gXywgdGhpcykgOiB0aGlzLl94O1xufVxuIiwgImV4cG9ydCBmdW5jdGlvbiBkZWZhdWx0WShkKSB7XG4gIHJldHVybiBkWzFdO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihfKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRoaXMuX3kgPSBfLCB0aGlzKSA6IHRoaXMuX3k7XG59XG4iLCAiaW1wb3J0IHRyZWVfYWRkLCB7YWRkQWxsIGFzIHRyZWVfYWRkQWxsfSBmcm9tIFwiLi9hZGQuanNcIjtcbmltcG9ydCB0cmVlX2NvdmVyIGZyb20gXCIuL2NvdmVyLmpzXCI7XG5pbXBvcnQgdHJlZV9kYXRhIGZyb20gXCIuL2RhdGEuanNcIjtcbmltcG9ydCB0cmVlX2V4dGVudCBmcm9tIFwiLi9leHRlbnQuanNcIjtcbmltcG9ydCB0cmVlX2ZpbmQgZnJvbSBcIi4vZmluZC5qc1wiO1xuaW1wb3J0IHRyZWVfcmVtb3ZlLCB7cmVtb3ZlQWxsIGFzIHRyZWVfcmVtb3ZlQWxsfSBmcm9tIFwiLi9yZW1vdmUuanNcIjtcbmltcG9ydCB0cmVlX3Jvb3QgZnJvbSBcIi4vcm9vdC5qc1wiO1xuaW1wb3J0IHRyZWVfc2l6ZSBmcm9tIFwiLi9zaXplLmpzXCI7XG5pbXBvcnQgdHJlZV92aXNpdCBmcm9tIFwiLi92aXNpdC5qc1wiO1xuaW1wb3J0IHRyZWVfdmlzaXRBZnRlciBmcm9tIFwiLi92aXNpdEFmdGVyLmpzXCI7XG5pbXBvcnQgdHJlZV94LCB7ZGVmYXVsdFh9IGZyb20gXCIuL3guanNcIjtcbmltcG9ydCB0cmVlX3ksIHtkZWZhdWx0WX0gZnJvbSBcIi4veS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBxdWFkdHJlZShub2RlcywgeCwgeSkge1xuICB2YXIgdHJlZSA9IG5ldyBRdWFkdHJlZSh4ID09IG51bGwgPyBkZWZhdWx0WCA6IHgsIHkgPT0gbnVsbCA/IGRlZmF1bHRZIDogeSwgTmFOLCBOYU4sIE5hTiwgTmFOKTtcbiAgcmV0dXJuIG5vZGVzID09IG51bGwgPyB0cmVlIDogdHJlZS5hZGRBbGwobm9kZXMpO1xufVxuXG5mdW5jdGlvbiBRdWFkdHJlZSh4LCB5LCB4MCwgeTAsIHgxLCB5MSkge1xuICB0aGlzLl94ID0geDtcbiAgdGhpcy5feSA9IHk7XG4gIHRoaXMuX3gwID0geDA7XG4gIHRoaXMuX3kwID0geTA7XG4gIHRoaXMuX3gxID0geDE7XG4gIHRoaXMuX3kxID0geTE7XG4gIHRoaXMuX3Jvb3QgPSB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIGxlYWZfY29weShsZWFmKSB7XG4gIHZhciBjb3B5ID0ge2RhdGE6IGxlYWYuZGF0YX0sIG5leHQgPSBjb3B5O1xuICB3aGlsZSAobGVhZiA9IGxlYWYubmV4dCkgbmV4dCA9IG5leHQubmV4dCA9IHtkYXRhOiBsZWFmLmRhdGF9O1xuICByZXR1cm4gY29weTtcbn1cblxudmFyIHRyZWVQcm90byA9IHF1YWR0cmVlLnByb3RvdHlwZSA9IFF1YWR0cmVlLnByb3RvdHlwZTtcblxudHJlZVByb3RvLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGNvcHkgPSBuZXcgUXVhZHRyZWUodGhpcy5feCwgdGhpcy5feSwgdGhpcy5feDAsIHRoaXMuX3kwLCB0aGlzLl94MSwgdGhpcy5feTEpLFxuICAgICAgbm9kZSA9IHRoaXMuX3Jvb3QsXG4gICAgICBub2RlcyxcbiAgICAgIGNoaWxkO1xuXG4gIGlmICghbm9kZSkgcmV0dXJuIGNvcHk7XG5cbiAgaWYgKCFub2RlLmxlbmd0aCkgcmV0dXJuIGNvcHkuX3Jvb3QgPSBsZWFmX2NvcHkobm9kZSksIGNvcHk7XG5cbiAgbm9kZXMgPSBbe3NvdXJjZTogbm9kZSwgdGFyZ2V0OiBjb3B5Ll9yb290ID0gbmV3IEFycmF5KDQpfV07XG4gIHdoaWxlIChub2RlID0gbm9kZXMucG9wKCkpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IDQ7ICsraSkge1xuICAgICAgaWYgKGNoaWxkID0gbm9kZS5zb3VyY2VbaV0pIHtcbiAgICAgICAgaWYgKGNoaWxkLmxlbmd0aCkgbm9kZXMucHVzaCh7c291cmNlOiBjaGlsZCwgdGFyZ2V0OiBub2RlLnRhcmdldFtpXSA9IG5ldyBBcnJheSg0KX0pO1xuICAgICAgICBlbHNlIG5vZGUudGFyZ2V0W2ldID0gbGVhZl9jb3B5KGNoaWxkKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gY29weTtcbn07XG5cbnRyZWVQcm90by5hZGQgPSB0cmVlX2FkZDtcbnRyZWVQcm90by5hZGRBbGwgPSB0cmVlX2FkZEFsbDtcbnRyZWVQcm90by5jb3ZlciA9IHRyZWVfY292ZXI7XG50cmVlUHJvdG8uZGF0YSA9IHRyZWVfZGF0YTtcbnRyZWVQcm90by5leHRlbnQgPSB0cmVlX2V4dGVudDtcbnRyZWVQcm90by5maW5kID0gdHJlZV9maW5kO1xudHJlZVByb3RvLnJlbW92ZSA9IHRyZWVfcmVtb3ZlO1xudHJlZVByb3RvLnJlbW92ZUFsbCA9IHRyZWVfcmVtb3ZlQWxsO1xudHJlZVByb3RvLnJvb3QgPSB0cmVlX3Jvb3Q7XG50cmVlUHJvdG8uc2l6ZSA9IHRyZWVfc2l6ZTtcbnRyZWVQcm90by52aXNpdCA9IHRyZWVfdmlzaXQ7XG50cmVlUHJvdG8udmlzaXRBZnRlciA9IHRyZWVfdmlzaXRBZnRlcjtcbnRyZWVQcm90by54ID0gdHJlZV94O1xudHJlZVByb3RvLnkgPSB0cmVlX3k7XG4iLCAiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHg7XG4gIH07XG59XG4iLCAiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ocmFuZG9tKSB7XG4gIHJldHVybiAocmFuZG9tKCkgLSAwLjUpICogMWUtNjtcbn1cbiIsICJpbXBvcnQge3F1YWR0cmVlfSBmcm9tIFwiZDMtcXVhZHRyZWVcIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudC5qc1wiO1xuaW1wb3J0IGppZ2dsZSBmcm9tIFwiLi9qaWdnbGUuanNcIjtcblxuZnVuY3Rpb24geChkKSB7XG4gIHJldHVybiBkLnggKyBkLnZ4O1xufVxuXG5mdW5jdGlvbiB5KGQpIHtcbiAgcmV0dXJuIGQueSArIGQudnk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHJhZGl1cykge1xuICB2YXIgbm9kZXMsXG4gICAgICByYWRpaSxcbiAgICAgIHJhbmRvbSxcbiAgICAgIHN0cmVuZ3RoID0gMSxcbiAgICAgIGl0ZXJhdGlvbnMgPSAxO1xuXG4gIGlmICh0eXBlb2YgcmFkaXVzICE9PSBcImZ1bmN0aW9uXCIpIHJhZGl1cyA9IGNvbnN0YW50KHJhZGl1cyA9PSBudWxsID8gMSA6ICtyYWRpdXMpO1xuXG4gIGZ1bmN0aW9uIGZvcmNlKCkge1xuICAgIHZhciBpLCBuID0gbm9kZXMubGVuZ3RoLFxuICAgICAgICB0cmVlLFxuICAgICAgICBub2RlLFxuICAgICAgICB4aSxcbiAgICAgICAgeWksXG4gICAgICAgIHJpLFxuICAgICAgICByaTI7XG5cbiAgICBmb3IgKHZhciBrID0gMDsgayA8IGl0ZXJhdGlvbnM7ICsraykge1xuICAgICAgdHJlZSA9IHF1YWR0cmVlKG5vZGVzLCB4LCB5KS52aXNpdEFmdGVyKHByZXBhcmUpO1xuICAgICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgICBub2RlID0gbm9kZXNbaV07XG4gICAgICAgIHJpID0gcmFkaWlbbm9kZS5pbmRleF0sIHJpMiA9IHJpICogcmk7XG4gICAgICAgIHhpID0gbm9kZS54ICsgbm9kZS52eDtcbiAgICAgICAgeWkgPSBub2RlLnkgKyBub2RlLnZ5O1xuICAgICAgICB0cmVlLnZpc2l0KGFwcGx5KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhcHBseShxdWFkLCB4MCwgeTAsIHgxLCB5MSkge1xuICAgICAgdmFyIGRhdGEgPSBxdWFkLmRhdGEsIHJqID0gcXVhZC5yLCByID0gcmkgKyByajtcbiAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgIGlmIChkYXRhLmluZGV4ID4gbm9kZS5pbmRleCkge1xuICAgICAgICAgIHZhciB4ID0geGkgLSBkYXRhLnggLSBkYXRhLnZ4LFxuICAgICAgICAgICAgICB5ID0geWkgLSBkYXRhLnkgLSBkYXRhLnZ5LFxuICAgICAgICAgICAgICBsID0geCAqIHggKyB5ICogeTtcbiAgICAgICAgICBpZiAobCA8IHIgKiByKSB7XG4gICAgICAgICAgICBpZiAoeCA9PT0gMCkgeCA9IGppZ2dsZShyYW5kb20pLCBsICs9IHggKiB4O1xuICAgICAgICAgICAgaWYgKHkgPT09IDApIHkgPSBqaWdnbGUocmFuZG9tKSwgbCArPSB5ICogeTtcbiAgICAgICAgICAgIGwgPSAociAtIChsID0gTWF0aC5zcXJ0KGwpKSkgLyBsICogc3RyZW5ndGg7XG4gICAgICAgICAgICBub2RlLnZ4ICs9ICh4ICo9IGwpICogKHIgPSAocmogKj0gcmopIC8gKHJpMiArIHJqKSk7XG4gICAgICAgICAgICBub2RlLnZ5ICs9ICh5ICo9IGwpICogcjtcbiAgICAgICAgICAgIGRhdGEudnggLT0geCAqIChyID0gMSAtIHIpO1xuICAgICAgICAgICAgZGF0YS52eSAtPSB5ICogcjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHgwID4geGkgKyByIHx8IHgxIDwgeGkgLSByIHx8IHkwID4geWkgKyByIHx8IHkxIDwgeWkgLSByO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHByZXBhcmUocXVhZCkge1xuICAgIGlmIChxdWFkLmRhdGEpIHJldHVybiBxdWFkLnIgPSByYWRpaVtxdWFkLmRhdGEuaW5kZXhdO1xuICAgIGZvciAodmFyIGkgPSBxdWFkLnIgPSAwOyBpIDwgNDsgKytpKSB7XG4gICAgICBpZiAocXVhZFtpXSAmJiBxdWFkW2ldLnIgPiBxdWFkLnIpIHtcbiAgICAgICAgcXVhZC5yID0gcXVhZFtpXS5yO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRpYWxpemUoKSB7XG4gICAgaWYgKCFub2RlcykgcmV0dXJuO1xuICAgIHZhciBpLCBuID0gbm9kZXMubGVuZ3RoLCBub2RlO1xuICAgIHJhZGlpID0gbmV3IEFycmF5KG4pO1xuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIG5vZGUgPSBub2Rlc1tpXSwgcmFkaWlbbm9kZS5pbmRleF0gPSArcmFkaXVzKG5vZGUsIGksIG5vZGVzKTtcbiAgfVxuXG4gIGZvcmNlLmluaXRpYWxpemUgPSBmdW5jdGlvbihfbm9kZXMsIF9yYW5kb20pIHtcbiAgICBub2RlcyA9IF9ub2RlcztcbiAgICByYW5kb20gPSBfcmFuZG9tO1xuICAgIGluaXRpYWxpemUoKTtcbiAgfTtcblxuICBmb3JjZS5pdGVyYXRpb25zID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGl0ZXJhdGlvbnMgPSArXywgZm9yY2UpIDogaXRlcmF0aW9ucztcbiAgfTtcblxuICBmb3JjZS5zdHJlbmd0aCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzdHJlbmd0aCA9ICtfLCBmb3JjZSkgOiBzdHJlbmd0aDtcbiAgfTtcblxuICBmb3JjZS5yYWRpdXMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocmFkaXVzID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGluaXRpYWxpemUoKSwgZm9yY2UpIDogcmFkaXVzO1xuICB9O1xuXG4gIHJldHVybiBmb3JjZTtcbn1cbiIsICJpbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnQuanNcIjtcbmltcG9ydCBqaWdnbGUgZnJvbSBcIi4vamlnZ2xlLmpzXCI7XG5cbmZ1bmN0aW9uIGluZGV4KGQpIHtcbiAgcmV0dXJuIGQuaW5kZXg7XG59XG5cbmZ1bmN0aW9uIGZpbmQobm9kZUJ5SWQsIG5vZGVJZCkge1xuICB2YXIgbm9kZSA9IG5vZGVCeUlkLmdldChub2RlSWQpO1xuICBpZiAoIW5vZGUpIHRocm93IG5ldyBFcnJvcihcIm5vZGUgbm90IGZvdW5kOiBcIiArIG5vZGVJZCk7XG4gIHJldHVybiBub2RlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihsaW5rcykge1xuICB2YXIgaWQgPSBpbmRleCxcbiAgICAgIHN0cmVuZ3RoID0gZGVmYXVsdFN0cmVuZ3RoLFxuICAgICAgc3RyZW5ndGhzLFxuICAgICAgZGlzdGFuY2UgPSBjb25zdGFudCgzMCksXG4gICAgICBkaXN0YW5jZXMsXG4gICAgICBub2RlcyxcbiAgICAgIGNvdW50LFxuICAgICAgYmlhcyxcbiAgICAgIHJhbmRvbSxcbiAgICAgIGl0ZXJhdGlvbnMgPSAxO1xuXG4gIGlmIChsaW5rcyA9PSBudWxsKSBsaW5rcyA9IFtdO1xuXG4gIGZ1bmN0aW9uIGRlZmF1bHRTdHJlbmd0aChsaW5rKSB7XG4gICAgcmV0dXJuIDEgLyBNYXRoLm1pbihjb3VudFtsaW5rLnNvdXJjZS5pbmRleF0sIGNvdW50W2xpbmsudGFyZ2V0LmluZGV4XSk7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JjZShhbHBoYSkge1xuICAgIGZvciAodmFyIGsgPSAwLCBuID0gbGlua3MubGVuZ3RoOyBrIDwgaXRlcmF0aW9uczsgKytrKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbGluaywgc291cmNlLCB0YXJnZXQsIHgsIHksIGwsIGI7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgbGluayA9IGxpbmtzW2ldLCBzb3VyY2UgPSBsaW5rLnNvdXJjZSwgdGFyZ2V0ID0gbGluay50YXJnZXQ7XG4gICAgICAgIHggPSB0YXJnZXQueCArIHRhcmdldC52eCAtIHNvdXJjZS54IC0gc291cmNlLnZ4IHx8IGppZ2dsZShyYW5kb20pO1xuICAgICAgICB5ID0gdGFyZ2V0LnkgKyB0YXJnZXQudnkgLSBzb3VyY2UueSAtIHNvdXJjZS52eSB8fCBqaWdnbGUocmFuZG9tKTtcbiAgICAgICAgbCA9IE1hdGguc3FydCh4ICogeCArIHkgKiB5KTtcbiAgICAgICAgbCA9IChsIC0gZGlzdGFuY2VzW2ldKSAvIGwgKiBhbHBoYSAqIHN0cmVuZ3Roc1tpXTtcbiAgICAgICAgeCAqPSBsLCB5ICo9IGw7XG4gICAgICAgIHRhcmdldC52eCAtPSB4ICogKGIgPSBiaWFzW2ldKTtcbiAgICAgICAgdGFyZ2V0LnZ5IC09IHkgKiBiO1xuICAgICAgICBzb3VyY2UudnggKz0geCAqIChiID0gMSAtIGIpO1xuICAgICAgICBzb3VyY2UudnkgKz0geSAqIGI7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW5pdGlhbGl6ZSgpIHtcbiAgICBpZiAoIW5vZGVzKSByZXR1cm47XG5cbiAgICB2YXIgaSxcbiAgICAgICAgbiA9IG5vZGVzLmxlbmd0aCxcbiAgICAgICAgbSA9IGxpbmtzLmxlbmd0aCxcbiAgICAgICAgbm9kZUJ5SWQgPSBuZXcgTWFwKG5vZGVzLm1hcCgoZCwgaSkgPT4gW2lkKGQsIGksIG5vZGVzKSwgZF0pKSxcbiAgICAgICAgbGluaztcblxuICAgIGZvciAoaSA9IDAsIGNvdW50ID0gbmV3IEFycmF5KG4pOyBpIDwgbTsgKytpKSB7XG4gICAgICBsaW5rID0gbGlua3NbaV0sIGxpbmsuaW5kZXggPSBpO1xuICAgICAgaWYgKHR5cGVvZiBsaW5rLnNvdXJjZSAhPT0gXCJvYmplY3RcIikgbGluay5zb3VyY2UgPSBmaW5kKG5vZGVCeUlkLCBsaW5rLnNvdXJjZSk7XG4gICAgICBpZiAodHlwZW9mIGxpbmsudGFyZ2V0ICE9PSBcIm9iamVjdFwiKSBsaW5rLnRhcmdldCA9IGZpbmQobm9kZUJ5SWQsIGxpbmsudGFyZ2V0KTtcbiAgICAgIGNvdW50W2xpbmsuc291cmNlLmluZGV4XSA9IChjb3VudFtsaW5rLnNvdXJjZS5pbmRleF0gfHwgMCkgKyAxO1xuICAgICAgY291bnRbbGluay50YXJnZXQuaW5kZXhdID0gKGNvdW50W2xpbmsudGFyZ2V0LmluZGV4XSB8fCAwKSArIDE7XG4gICAgfVxuXG4gICAgZm9yIChpID0gMCwgYmlhcyA9IG5ldyBBcnJheShtKTsgaSA8IG07ICsraSkge1xuICAgICAgbGluayA9IGxpbmtzW2ldLCBiaWFzW2ldID0gY291bnRbbGluay5zb3VyY2UuaW5kZXhdIC8gKGNvdW50W2xpbmsuc291cmNlLmluZGV4XSArIGNvdW50W2xpbmsudGFyZ2V0LmluZGV4XSk7XG4gICAgfVxuXG4gICAgc3RyZW5ndGhzID0gbmV3IEFycmF5KG0pLCBpbml0aWFsaXplU3RyZW5ndGgoKTtcbiAgICBkaXN0YW5jZXMgPSBuZXcgQXJyYXkobSksIGluaXRpYWxpemVEaXN0YW5jZSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gaW5pdGlhbGl6ZVN0cmVuZ3RoKCkge1xuICAgIGlmICghbm9kZXMpIHJldHVybjtcblxuICAgIGZvciAodmFyIGkgPSAwLCBuID0gbGlua3MubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICBzdHJlbmd0aHNbaV0gPSArc3RyZW5ndGgobGlua3NbaV0sIGksIGxpbmtzKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpbml0aWFsaXplRGlzdGFuY2UoKSB7XG4gICAgaWYgKCFub2RlcykgcmV0dXJuO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIG4gPSBsaW5rcy5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgIGRpc3RhbmNlc1tpXSA9ICtkaXN0YW5jZShsaW5rc1tpXSwgaSwgbGlua3MpO1xuICAgIH1cbiAgfVxuXG4gIGZvcmNlLmluaXRpYWxpemUgPSBmdW5jdGlvbihfbm9kZXMsIF9yYW5kb20pIHtcbiAgICBub2RlcyA9IF9ub2RlcztcbiAgICByYW5kb20gPSBfcmFuZG9tO1xuICAgIGluaXRpYWxpemUoKTtcbiAgfTtcblxuICBmb3JjZS5saW5rcyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChsaW5rcyA9IF8sIGluaXRpYWxpemUoKSwgZm9yY2UpIDogbGlua3M7XG4gIH07XG5cbiAgZm9yY2UuaWQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoaWQgPSBfLCBmb3JjZSkgOiBpZDtcbiAgfTtcblxuICBmb3JjZS5pdGVyYXRpb25zID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGl0ZXJhdGlvbnMgPSArXywgZm9yY2UpIDogaXRlcmF0aW9ucztcbiAgfTtcblxuICBmb3JjZS5zdHJlbmd0aCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzdHJlbmd0aCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBpbml0aWFsaXplU3RyZW5ndGgoKSwgZm9yY2UpIDogc3RyZW5ndGg7XG4gIH07XG5cbiAgZm9yY2UuZGlzdGFuY2UgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZGlzdGFuY2UgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgaW5pdGlhbGl6ZURpc3RhbmNlKCksIGZvcmNlKSA6IGRpc3RhbmNlO1xuICB9O1xuXG4gIHJldHVybiBmb3JjZTtcbn1cbiIsICIvLyBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MaW5lYXJfY29uZ3J1ZW50aWFsX2dlbmVyYXRvciNQYXJhbWV0ZXJzX2luX2NvbW1vbl91c2VcbmNvbnN0IGEgPSAxNjY0NTI1O1xuY29uc3QgYyA9IDEwMTM5MDQyMjM7XG5jb25zdCBtID0gNDI5NDk2NzI5NjsgLy8gMl4zMlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgbGV0IHMgPSAxO1xuICByZXR1cm4gKCkgPT4gKHMgPSAoYSAqIHMgKyBjKSAlIG0pIC8gbTtcbn1cbiIsICJpbXBvcnQge2Rpc3BhdGNofSBmcm9tIFwiZDMtZGlzcGF0Y2hcIjtcbmltcG9ydCB7dGltZXJ9IGZyb20gXCJkMy10aW1lclwiO1xuaW1wb3J0IGxjZyBmcm9tIFwiLi9sY2cuanNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIHgoZCkge1xuICByZXR1cm4gZC54O1xufVxuXG5leHBvcnQgZnVuY3Rpb24geShkKSB7XG4gIHJldHVybiBkLnk7XG59XG5cbnZhciBpbml0aWFsUmFkaXVzID0gMTAsXG4gICAgaW5pdGlhbEFuZ2xlID0gTWF0aC5QSSAqICgzIC0gTWF0aC5zcXJ0KDUpKTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obm9kZXMpIHtcbiAgdmFyIHNpbXVsYXRpb24sXG4gICAgICBhbHBoYSA9IDEsXG4gICAgICBhbHBoYU1pbiA9IDAuMDAxLFxuICAgICAgYWxwaGFEZWNheSA9IDEgLSBNYXRoLnBvdyhhbHBoYU1pbiwgMSAvIDMwMCksXG4gICAgICBhbHBoYVRhcmdldCA9IDAsXG4gICAgICB2ZWxvY2l0eURlY2F5ID0gMC42LFxuICAgICAgZm9yY2VzID0gbmV3IE1hcCgpLFxuICAgICAgc3RlcHBlciA9IHRpbWVyKHN0ZXApLFxuICAgICAgZXZlbnQgPSBkaXNwYXRjaChcInRpY2tcIiwgXCJlbmRcIiksXG4gICAgICByYW5kb20gPSBsY2coKTtcblxuICBpZiAobm9kZXMgPT0gbnVsbCkgbm9kZXMgPSBbXTtcblxuICBmdW5jdGlvbiBzdGVwKCkge1xuICAgIHRpY2soKTtcbiAgICBldmVudC5jYWxsKFwidGlja1wiLCBzaW11bGF0aW9uKTtcbiAgICBpZiAoYWxwaGEgPCBhbHBoYU1pbikge1xuICAgICAgc3RlcHBlci5zdG9wKCk7XG4gICAgICBldmVudC5jYWxsKFwiZW5kXCIsIHNpbXVsYXRpb24pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHRpY2soaXRlcmF0aW9ucykge1xuICAgIHZhciBpLCBuID0gbm9kZXMubGVuZ3RoLCBub2RlO1xuXG4gICAgaWYgKGl0ZXJhdGlvbnMgPT09IHVuZGVmaW5lZCkgaXRlcmF0aW9ucyA9IDE7XG5cbiAgICBmb3IgKHZhciBrID0gMDsgayA8IGl0ZXJhdGlvbnM7ICsraykge1xuICAgICAgYWxwaGEgKz0gKGFscGhhVGFyZ2V0IC0gYWxwaGEpICogYWxwaGFEZWNheTtcblxuICAgICAgZm9yY2VzLmZvckVhY2goZnVuY3Rpb24oZm9yY2UpIHtcbiAgICAgICAgZm9yY2UoYWxwaGEpO1xuICAgICAgfSk7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgbm9kZSA9IG5vZGVzW2ldO1xuICAgICAgICBpZiAobm9kZS5meCA9PSBudWxsKSBub2RlLnggKz0gbm9kZS52eCAqPSB2ZWxvY2l0eURlY2F5O1xuICAgICAgICBlbHNlIG5vZGUueCA9IG5vZGUuZngsIG5vZGUudnggPSAwO1xuICAgICAgICBpZiAobm9kZS5meSA9PSBudWxsKSBub2RlLnkgKz0gbm9kZS52eSAqPSB2ZWxvY2l0eURlY2F5O1xuICAgICAgICBlbHNlIG5vZGUueSA9IG5vZGUuZnksIG5vZGUudnkgPSAwO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzaW11bGF0aW9uO1xuICB9XG5cbiAgZnVuY3Rpb24gaW5pdGlhbGl6ZU5vZGVzKCkge1xuICAgIGZvciAodmFyIGkgPSAwLCBuID0gbm9kZXMubGVuZ3RoLCBub2RlOyBpIDwgbjsgKytpKSB7XG4gICAgICBub2RlID0gbm9kZXNbaV0sIG5vZGUuaW5kZXggPSBpO1xuICAgICAgaWYgKG5vZGUuZnggIT0gbnVsbCkgbm9kZS54ID0gbm9kZS5meDtcbiAgICAgIGlmIChub2RlLmZ5ICE9IG51bGwpIG5vZGUueSA9IG5vZGUuZnk7XG4gICAgICBpZiAoaXNOYU4obm9kZS54KSB8fCBpc05hTihub2RlLnkpKSB7XG4gICAgICAgIHZhciByYWRpdXMgPSBpbml0aWFsUmFkaXVzICogTWF0aC5zcXJ0KDAuNSArIGkpLCBhbmdsZSA9IGkgKiBpbml0aWFsQW5nbGU7XG4gICAgICAgIG5vZGUueCA9IHJhZGl1cyAqIE1hdGguY29zKGFuZ2xlKTtcbiAgICAgICAgbm9kZS55ID0gcmFkaXVzICogTWF0aC5zaW4oYW5nbGUpO1xuICAgICAgfVxuICAgICAgaWYgKGlzTmFOKG5vZGUudngpIHx8IGlzTmFOKG5vZGUudnkpKSB7XG4gICAgICAgIG5vZGUudnggPSBub2RlLnZ5ID0gMDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpbml0aWFsaXplRm9yY2UoZm9yY2UpIHtcbiAgICBpZiAoZm9yY2UuaW5pdGlhbGl6ZSkgZm9yY2UuaW5pdGlhbGl6ZShub2RlcywgcmFuZG9tKTtcbiAgICByZXR1cm4gZm9yY2U7XG4gIH1cblxuICBpbml0aWFsaXplTm9kZXMoKTtcblxuICByZXR1cm4gc2ltdWxhdGlvbiA9IHtcbiAgICB0aWNrOiB0aWNrLFxuXG4gICAgcmVzdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gc3RlcHBlci5yZXN0YXJ0KHN0ZXApLCBzaW11bGF0aW9uO1xuICAgIH0sXG5cbiAgICBzdG9wOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBzdGVwcGVyLnN0b3AoKSwgc2ltdWxhdGlvbjtcbiAgICB9LFxuXG4gICAgbm9kZXM6IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKG5vZGVzID0gXywgaW5pdGlhbGl6ZU5vZGVzKCksIGZvcmNlcy5mb3JFYWNoKGluaXRpYWxpemVGb3JjZSksIHNpbXVsYXRpb24pIDogbm9kZXM7XG4gICAgfSxcblxuICAgIGFscGhhOiBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChhbHBoYSA9ICtfLCBzaW11bGF0aW9uKSA6IGFscGhhO1xuICAgIH0sXG5cbiAgICBhbHBoYU1pbjogZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoYWxwaGFNaW4gPSArXywgc2ltdWxhdGlvbikgOiBhbHBoYU1pbjtcbiAgICB9LFxuXG4gICAgYWxwaGFEZWNheTogZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoYWxwaGFEZWNheSA9ICtfLCBzaW11bGF0aW9uKSA6ICthbHBoYURlY2F5O1xuICAgIH0sXG5cbiAgICBhbHBoYVRhcmdldDogZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoYWxwaGFUYXJnZXQgPSArXywgc2ltdWxhdGlvbikgOiBhbHBoYVRhcmdldDtcbiAgICB9LFxuXG4gICAgdmVsb2NpdHlEZWNheTogZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodmVsb2NpdHlEZWNheSA9IDEgLSBfLCBzaW11bGF0aW9uKSA6IDEgLSB2ZWxvY2l0eURlY2F5O1xuICAgIH0sXG5cbiAgICByYW5kb21Tb3VyY2U6IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHJhbmRvbSA9IF8sIGZvcmNlcy5mb3JFYWNoKGluaXRpYWxpemVGb3JjZSksIHNpbXVsYXRpb24pIDogcmFuZG9tO1xuICAgIH0sXG5cbiAgICBmb3JjZTogZnVuY3Rpb24obmFtZSwgXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gKChfID09IG51bGwgPyBmb3JjZXMuZGVsZXRlKG5hbWUpIDogZm9yY2VzLnNldChuYW1lLCBpbml0aWFsaXplRm9yY2UoXykpKSwgc2ltdWxhdGlvbikgOiBmb3JjZXMuZ2V0KG5hbWUpO1xuICAgIH0sXG5cbiAgICBmaW5kOiBmdW5jdGlvbih4LCB5LCByYWRpdXMpIHtcbiAgICAgIHZhciBpID0gMCxcbiAgICAgICAgICBuID0gbm9kZXMubGVuZ3RoLFxuICAgICAgICAgIGR4LFxuICAgICAgICAgIGR5LFxuICAgICAgICAgIGQyLFxuICAgICAgICAgIG5vZGUsXG4gICAgICAgICAgY2xvc2VzdDtcblxuICAgICAgaWYgKHJhZGl1cyA9PSBudWxsKSByYWRpdXMgPSBJbmZpbml0eTtcbiAgICAgIGVsc2UgcmFkaXVzICo9IHJhZGl1cztcblxuICAgICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgICBub2RlID0gbm9kZXNbaV07XG4gICAgICAgIGR4ID0geCAtIG5vZGUueDtcbiAgICAgICAgZHkgPSB5IC0gbm9kZS55O1xuICAgICAgICBkMiA9IGR4ICogZHggKyBkeSAqIGR5O1xuICAgICAgICBpZiAoZDIgPCByYWRpdXMpIGNsb3Nlc3QgPSBub2RlLCByYWRpdXMgPSBkMjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNsb3Nlc3Q7XG4gICAgfSxcblxuICAgIG9uOiBmdW5jdGlvbihuYW1lLCBfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyAoZXZlbnQub24obmFtZSwgXyksIHNpbXVsYXRpb24pIDogZXZlbnQub24obmFtZSk7XG4gICAgfVxuICB9O1xufVxuIiwgImltcG9ydCB7cXVhZHRyZWV9IGZyb20gXCJkMy1xdWFkdHJlZVwiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50LmpzXCI7XG5pbXBvcnQgamlnZ2xlIGZyb20gXCIuL2ppZ2dsZS5qc1wiO1xuaW1wb3J0IHt4LCB5fSBmcm9tIFwiLi9zaW11bGF0aW9uLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgbm9kZXMsXG4gICAgICBub2RlLFxuICAgICAgcmFuZG9tLFxuICAgICAgYWxwaGEsXG4gICAgICBzdHJlbmd0aCA9IGNvbnN0YW50KC0zMCksXG4gICAgICBzdHJlbmd0aHMsXG4gICAgICBkaXN0YW5jZU1pbjIgPSAxLFxuICAgICAgZGlzdGFuY2VNYXgyID0gSW5maW5pdHksXG4gICAgICB0aGV0YTIgPSAwLjgxO1xuXG4gIGZ1bmN0aW9uIGZvcmNlKF8pIHtcbiAgICB2YXIgaSwgbiA9IG5vZGVzLmxlbmd0aCwgdHJlZSA9IHF1YWR0cmVlKG5vZGVzLCB4LCB5KS52aXNpdEFmdGVyKGFjY3VtdWxhdGUpO1xuICAgIGZvciAoYWxwaGEgPSBfLCBpID0gMDsgaSA8IG47ICsraSkgbm9kZSA9IG5vZGVzW2ldLCB0cmVlLnZpc2l0KGFwcGx5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRpYWxpemUoKSB7XG4gICAgaWYgKCFub2RlcykgcmV0dXJuO1xuICAgIHZhciBpLCBuID0gbm9kZXMubGVuZ3RoLCBub2RlO1xuICAgIHN0cmVuZ3RocyA9IG5ldyBBcnJheShuKTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSBub2RlID0gbm9kZXNbaV0sIHN0cmVuZ3Roc1tub2RlLmluZGV4XSA9ICtzdHJlbmd0aChub2RlLCBpLCBub2Rlcyk7XG4gIH1cblxuICBmdW5jdGlvbiBhY2N1bXVsYXRlKHF1YWQpIHtcbiAgICB2YXIgc3RyZW5ndGggPSAwLCBxLCBjLCB3ZWlnaHQgPSAwLCB4LCB5LCBpO1xuXG4gICAgLy8gRm9yIGludGVybmFsIG5vZGVzLCBhY2N1bXVsYXRlIGZvcmNlcyBmcm9tIGNoaWxkIHF1YWRyYW50cy5cbiAgICBpZiAocXVhZC5sZW5ndGgpIHtcbiAgICAgIGZvciAoeCA9IHkgPSBpID0gMDsgaSA8IDQ7ICsraSkge1xuICAgICAgICBpZiAoKHEgPSBxdWFkW2ldKSAmJiAoYyA9IE1hdGguYWJzKHEudmFsdWUpKSkge1xuICAgICAgICAgIHN0cmVuZ3RoICs9IHEudmFsdWUsIHdlaWdodCArPSBjLCB4ICs9IGMgKiBxLngsIHkgKz0gYyAqIHEueTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcXVhZC54ID0geCAvIHdlaWdodDtcbiAgICAgIHF1YWQueSA9IHkgLyB3ZWlnaHQ7XG4gICAgfVxuXG4gICAgLy8gRm9yIGxlYWYgbm9kZXMsIGFjY3VtdWxhdGUgZm9yY2VzIGZyb20gY29pbmNpZGVudCBxdWFkcmFudHMuXG4gICAgZWxzZSB7XG4gICAgICBxID0gcXVhZDtcbiAgICAgIHEueCA9IHEuZGF0YS54O1xuICAgICAgcS55ID0gcS5kYXRhLnk7XG4gICAgICBkbyBzdHJlbmd0aCArPSBzdHJlbmd0aHNbcS5kYXRhLmluZGV4XTtcbiAgICAgIHdoaWxlIChxID0gcS5uZXh0KTtcbiAgICB9XG5cbiAgICBxdWFkLnZhbHVlID0gc3RyZW5ndGg7XG4gIH1cblxuICBmdW5jdGlvbiBhcHBseShxdWFkLCB4MSwgXywgeDIpIHtcbiAgICBpZiAoIXF1YWQudmFsdWUpIHJldHVybiB0cnVlO1xuXG4gICAgdmFyIHggPSBxdWFkLnggLSBub2RlLngsXG4gICAgICAgIHkgPSBxdWFkLnkgLSBub2RlLnksXG4gICAgICAgIHcgPSB4MiAtIHgxLFxuICAgICAgICBsID0geCAqIHggKyB5ICogeTtcblxuICAgIC8vIEFwcGx5IHRoZSBCYXJuZXMtSHV0IGFwcHJveGltYXRpb24gaWYgcG9zc2libGUuXG4gICAgLy8gTGltaXQgZm9yY2VzIGZvciB2ZXJ5IGNsb3NlIG5vZGVzOyByYW5kb21pemUgZGlyZWN0aW9uIGlmIGNvaW5jaWRlbnQuXG4gICAgaWYgKHcgKiB3IC8gdGhldGEyIDwgbCkge1xuICAgICAgaWYgKGwgPCBkaXN0YW5jZU1heDIpIHtcbiAgICAgICAgaWYgKHggPT09IDApIHggPSBqaWdnbGUocmFuZG9tKSwgbCArPSB4ICogeDtcbiAgICAgICAgaWYgKHkgPT09IDApIHkgPSBqaWdnbGUocmFuZG9tKSwgbCArPSB5ICogeTtcbiAgICAgICAgaWYgKGwgPCBkaXN0YW5jZU1pbjIpIGwgPSBNYXRoLnNxcnQoZGlzdGFuY2VNaW4yICogbCk7XG4gICAgICAgIG5vZGUudnggKz0geCAqIHF1YWQudmFsdWUgKiBhbHBoYSAvIGw7XG4gICAgICAgIG5vZGUudnkgKz0geSAqIHF1YWQudmFsdWUgKiBhbHBoYSAvIGw7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBPdGhlcndpc2UsIHByb2Nlc3MgcG9pbnRzIGRpcmVjdGx5LlxuICAgIGVsc2UgaWYgKHF1YWQubGVuZ3RoIHx8IGwgPj0gZGlzdGFuY2VNYXgyKSByZXR1cm47XG5cbiAgICAvLyBMaW1pdCBmb3JjZXMgZm9yIHZlcnkgY2xvc2Ugbm9kZXM7IHJhbmRvbWl6ZSBkaXJlY3Rpb24gaWYgY29pbmNpZGVudC5cbiAgICBpZiAocXVhZC5kYXRhICE9PSBub2RlIHx8IHF1YWQubmV4dCkge1xuICAgICAgaWYgKHggPT09IDApIHggPSBqaWdnbGUocmFuZG9tKSwgbCArPSB4ICogeDtcbiAgICAgIGlmICh5ID09PSAwKSB5ID0gamlnZ2xlKHJhbmRvbSksIGwgKz0geSAqIHk7XG4gICAgICBpZiAobCA8IGRpc3RhbmNlTWluMikgbCA9IE1hdGguc3FydChkaXN0YW5jZU1pbjIgKiBsKTtcbiAgICB9XG5cbiAgICBkbyBpZiAocXVhZC5kYXRhICE9PSBub2RlKSB7XG4gICAgICB3ID0gc3RyZW5ndGhzW3F1YWQuZGF0YS5pbmRleF0gKiBhbHBoYSAvIGw7XG4gICAgICBub2RlLnZ4ICs9IHggKiB3O1xuICAgICAgbm9kZS52eSArPSB5ICogdztcbiAgICB9IHdoaWxlIChxdWFkID0gcXVhZC5uZXh0KTtcbiAgfVxuXG4gIGZvcmNlLmluaXRpYWxpemUgPSBmdW5jdGlvbihfbm9kZXMsIF9yYW5kb20pIHtcbiAgICBub2RlcyA9IF9ub2RlcztcbiAgICByYW5kb20gPSBfcmFuZG9tO1xuICAgIGluaXRpYWxpemUoKTtcbiAgfTtcblxuICBmb3JjZS5zdHJlbmd0aCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzdHJlbmd0aCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBpbml0aWFsaXplKCksIGZvcmNlKSA6IHN0cmVuZ3RoO1xuICB9O1xuXG4gIGZvcmNlLmRpc3RhbmNlTWluID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGRpc3RhbmNlTWluMiA9IF8gKiBfLCBmb3JjZSkgOiBNYXRoLnNxcnQoZGlzdGFuY2VNaW4yKTtcbiAgfTtcblxuICBmb3JjZS5kaXN0YW5jZU1heCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkaXN0YW5jZU1heDIgPSBfICogXywgZm9yY2UpIDogTWF0aC5zcXJ0KGRpc3RhbmNlTWF4Mik7XG4gIH07XG5cbiAgZm9yY2UudGhldGEgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGhldGEyID0gXyAqIF8sIGZvcmNlKSA6IE1hdGguc3FydCh0aGV0YTIpO1xuICB9O1xuXG4gIHJldHVybiBmb3JjZTtcbn1cbiIsICJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiBNYXRoLmFicyh4ID0gTWF0aC5yb3VuZCh4KSkgPj0gMWUyMVxuICAgICAgPyB4LnRvTG9jYWxlU3RyaW5nKFwiZW5cIikucmVwbGFjZSgvLC9nLCBcIlwiKVxuICAgICAgOiB4LnRvU3RyaW5nKDEwKTtcbn1cblxuLy8gQ29tcHV0ZXMgdGhlIGRlY2ltYWwgY29lZmZpY2llbnQgYW5kIGV4cG9uZW50IG9mIHRoZSBzcGVjaWZpZWQgbnVtYmVyIHggd2l0aFxuLy8gc2lnbmlmaWNhbnQgZGlnaXRzIHAsIHdoZXJlIHggaXMgcG9zaXRpdmUgYW5kIHAgaXMgaW4gWzEsIDIxXSBvciB1bmRlZmluZWQuXG4vLyBGb3IgZXhhbXBsZSwgZm9ybWF0RGVjaW1hbFBhcnRzKDEuMjMpIHJldHVybnMgW1wiMTIzXCIsIDBdLlxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdERlY2ltYWxQYXJ0cyh4LCBwKSB7XG4gIGlmICgoaSA9ICh4ID0gcCA/IHgudG9FeHBvbmVudGlhbChwIC0gMSkgOiB4LnRvRXhwb25lbnRpYWwoKSkuaW5kZXhPZihcImVcIikpIDwgMCkgcmV0dXJuIG51bGw7IC8vIE5hTiwgXHUwMEIxSW5maW5pdHlcbiAgdmFyIGksIGNvZWZmaWNpZW50ID0geC5zbGljZSgwLCBpKTtcblxuICAvLyBUaGUgc3RyaW5nIHJldHVybmVkIGJ5IHRvRXhwb25lbnRpYWwgZWl0aGVyIGhhcyB0aGUgZm9ybSBcXGRcXC5cXGQrZVstK11cXGQrXG4gIC8vIChlLmcuLCAxLjJlKzMpIG9yIHRoZSBmb3JtIFxcZGVbLStdXFxkKyAoZS5nLiwgMWUrMykuXG4gIHJldHVybiBbXG4gICAgY29lZmZpY2llbnQubGVuZ3RoID4gMSA/IGNvZWZmaWNpZW50WzBdICsgY29lZmZpY2llbnQuc2xpY2UoMikgOiBjb2VmZmljaWVudCxcbiAgICAreC5zbGljZShpICsgMSlcbiAgXTtcbn1cbiIsICJpbXBvcnQge2Zvcm1hdERlY2ltYWxQYXJ0c30gZnJvbSBcIi4vZm9ybWF0RGVjaW1hbC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiB4ID0gZm9ybWF0RGVjaW1hbFBhcnRzKE1hdGguYWJzKHgpKSwgeCA/IHhbMV0gOiBOYU47XG59XG4iLCAiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZ3JvdXBpbmcsIHRob3VzYW5kcykge1xuICByZXR1cm4gZnVuY3Rpb24odmFsdWUsIHdpZHRoKSB7XG4gICAgdmFyIGkgPSB2YWx1ZS5sZW5ndGgsXG4gICAgICAgIHQgPSBbXSxcbiAgICAgICAgaiA9IDAsXG4gICAgICAgIGcgPSBncm91cGluZ1swXSxcbiAgICAgICAgbGVuZ3RoID0gMDtcblxuICAgIHdoaWxlIChpID4gMCAmJiBnID4gMCkge1xuICAgICAgaWYgKGxlbmd0aCArIGcgKyAxID4gd2lkdGgpIGcgPSBNYXRoLm1heCgxLCB3aWR0aCAtIGxlbmd0aCk7XG4gICAgICB0LnB1c2godmFsdWUuc3Vic3RyaW5nKGkgLT0gZywgaSArIGcpKTtcbiAgICAgIGlmICgobGVuZ3RoICs9IGcgKyAxKSA+IHdpZHRoKSBicmVhaztcbiAgICAgIGcgPSBncm91cGluZ1tqID0gKGogKyAxKSAlIGdyb3VwaW5nLmxlbmd0aF07XG4gICAgfVxuXG4gICAgcmV0dXJuIHQucmV2ZXJzZSgpLmpvaW4odGhvdXNhbmRzKTtcbiAgfTtcbn1cbiIsICJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihudW1lcmFscykge1xuICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUucmVwbGFjZSgvWzAtOV0vZywgZnVuY3Rpb24oaSkge1xuICAgICAgcmV0dXJuIG51bWVyYWxzWytpXTtcbiAgICB9KTtcbiAgfTtcbn1cbiIsICIvLyBbW2ZpbGxdYWxpZ25dW3NpZ25dW3N5bWJvbF1bMF1bd2lkdGhdWyxdWy5wcmVjaXNpb25dW35dW3R5cGVdXG52YXIgcmUgPSAvXig/OiguKT8oWzw+PV5dKSk/KFsrXFwtKCBdKT8oWyQjXSk/KDApPyhcXGQrKT8oLCk/KFxcLlxcZCspPyh+KT8oW2EteiVdKT8kL2k7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvcm1hdFNwZWNpZmllcihzcGVjaWZpZXIpIHtcbiAgaWYgKCEobWF0Y2ggPSByZS5leGVjKHNwZWNpZmllcikpKSB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGZvcm1hdDogXCIgKyBzcGVjaWZpZXIpO1xuICB2YXIgbWF0Y2g7XG4gIHJldHVybiBuZXcgRm9ybWF0U3BlY2lmaWVyKHtcbiAgICBmaWxsOiBtYXRjaFsxXSxcbiAgICBhbGlnbjogbWF0Y2hbMl0sXG4gICAgc2lnbjogbWF0Y2hbM10sXG4gICAgc3ltYm9sOiBtYXRjaFs0XSxcbiAgICB6ZXJvOiBtYXRjaFs1XSxcbiAgICB3aWR0aDogbWF0Y2hbNl0sXG4gICAgY29tbWE6IG1hdGNoWzddLFxuICAgIHByZWNpc2lvbjogbWF0Y2hbOF0gJiYgbWF0Y2hbOF0uc2xpY2UoMSksXG4gICAgdHJpbTogbWF0Y2hbOV0sXG4gICAgdHlwZTogbWF0Y2hbMTBdXG4gIH0pO1xufVxuXG5mb3JtYXRTcGVjaWZpZXIucHJvdG90eXBlID0gRm9ybWF0U3BlY2lmaWVyLnByb3RvdHlwZTsgLy8gaW5zdGFuY2VvZlxuXG5leHBvcnQgZnVuY3Rpb24gRm9ybWF0U3BlY2lmaWVyKHNwZWNpZmllcikge1xuICB0aGlzLmZpbGwgPSBzcGVjaWZpZXIuZmlsbCA9PT0gdW5kZWZpbmVkID8gXCIgXCIgOiBzcGVjaWZpZXIuZmlsbCArIFwiXCI7XG4gIHRoaXMuYWxpZ24gPSBzcGVjaWZpZXIuYWxpZ24gPT09IHVuZGVmaW5lZCA/IFwiPlwiIDogc3BlY2lmaWVyLmFsaWduICsgXCJcIjtcbiAgdGhpcy5zaWduID0gc3BlY2lmaWVyLnNpZ24gPT09IHVuZGVmaW5lZCA/IFwiLVwiIDogc3BlY2lmaWVyLnNpZ24gKyBcIlwiO1xuICB0aGlzLnN5bWJvbCA9IHNwZWNpZmllci5zeW1ib2wgPT09IHVuZGVmaW5lZCA/IFwiXCIgOiBzcGVjaWZpZXIuc3ltYm9sICsgXCJcIjtcbiAgdGhpcy56ZXJvID0gISFzcGVjaWZpZXIuemVybztcbiAgdGhpcy53aWR0aCA9IHNwZWNpZmllci53aWR0aCA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogK3NwZWNpZmllci53aWR0aDtcbiAgdGhpcy5jb21tYSA9ICEhc3BlY2lmaWVyLmNvbW1hO1xuICB0aGlzLnByZWNpc2lvbiA9IHNwZWNpZmllci5wcmVjaXNpb24gPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6ICtzcGVjaWZpZXIucHJlY2lzaW9uO1xuICB0aGlzLnRyaW0gPSAhIXNwZWNpZmllci50cmltO1xuICB0aGlzLnR5cGUgPSBzcGVjaWZpZXIudHlwZSA9PT0gdW5kZWZpbmVkID8gXCJcIiA6IHNwZWNpZmllci50eXBlICsgXCJcIjtcbn1cblxuRm9ybWF0U3BlY2lmaWVyLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5maWxsXG4gICAgICArIHRoaXMuYWxpZ25cbiAgICAgICsgdGhpcy5zaWduXG4gICAgICArIHRoaXMuc3ltYm9sXG4gICAgICArICh0aGlzLnplcm8gPyBcIjBcIiA6IFwiXCIpXG4gICAgICArICh0aGlzLndpZHRoID09PSB1bmRlZmluZWQgPyBcIlwiIDogTWF0aC5tYXgoMSwgdGhpcy53aWR0aCB8IDApKVxuICAgICAgKyAodGhpcy5jb21tYSA/IFwiLFwiIDogXCJcIilcbiAgICAgICsgKHRoaXMucHJlY2lzaW9uID09PSB1bmRlZmluZWQgPyBcIlwiIDogXCIuXCIgKyBNYXRoLm1heCgwLCB0aGlzLnByZWNpc2lvbiB8IDApKVxuICAgICAgKyAodGhpcy50cmltID8gXCJ+XCIgOiBcIlwiKVxuICAgICAgKyB0aGlzLnR5cGU7XG59O1xuIiwgIi8vIFRyaW1zIGluc2lnbmlmaWNhbnQgemVyb3MsIGUuZy4sIHJlcGxhY2VzIDEuMjAwMGsgd2l0aCAxLjJrLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ocykge1xuICBvdXQ6IGZvciAodmFyIG4gPSBzLmxlbmd0aCwgaSA9IDEsIGkwID0gLTEsIGkxOyBpIDwgbjsgKytpKSB7XG4gICAgc3dpdGNoIChzW2ldKSB7XG4gICAgICBjYXNlIFwiLlwiOiBpMCA9IGkxID0gaTsgYnJlYWs7XG4gICAgICBjYXNlIFwiMFwiOiBpZiAoaTAgPT09IDApIGkwID0gaTsgaTEgPSBpOyBicmVhaztcbiAgICAgIGRlZmF1bHQ6IGlmICghK3NbaV0pIGJyZWFrIG91dDsgaWYgKGkwID4gMCkgaTAgPSAwOyBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGkwID4gMCA/IHMuc2xpY2UoMCwgaTApICsgcy5zbGljZShpMSArIDEpIDogcztcbn1cbiIsICJpbXBvcnQge2Zvcm1hdERlY2ltYWxQYXJ0c30gZnJvbSBcIi4vZm9ybWF0RGVjaW1hbC5qc1wiO1xuXG5leHBvcnQgdmFyIHByZWZpeEV4cG9uZW50O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4LCBwKSB7XG4gIHZhciBkID0gZm9ybWF0RGVjaW1hbFBhcnRzKHgsIHApO1xuICBpZiAoIWQpIHJldHVybiB4ICsgXCJcIjtcbiAgdmFyIGNvZWZmaWNpZW50ID0gZFswXSxcbiAgICAgIGV4cG9uZW50ID0gZFsxXSxcbiAgICAgIGkgPSBleHBvbmVudCAtIChwcmVmaXhFeHBvbmVudCA9IE1hdGgubWF4KC04LCBNYXRoLm1pbig4LCBNYXRoLmZsb29yKGV4cG9uZW50IC8gMykpKSAqIDMpICsgMSxcbiAgICAgIG4gPSBjb2VmZmljaWVudC5sZW5ndGg7XG4gIHJldHVybiBpID09PSBuID8gY29lZmZpY2llbnRcbiAgICAgIDogaSA+IG4gPyBjb2VmZmljaWVudCArIG5ldyBBcnJheShpIC0gbiArIDEpLmpvaW4oXCIwXCIpXG4gICAgICA6IGkgPiAwID8gY29lZmZpY2llbnQuc2xpY2UoMCwgaSkgKyBcIi5cIiArIGNvZWZmaWNpZW50LnNsaWNlKGkpXG4gICAgICA6IFwiMC5cIiArIG5ldyBBcnJheSgxIC0gaSkuam9pbihcIjBcIikgKyBmb3JtYXREZWNpbWFsUGFydHMoeCwgTWF0aC5tYXgoMCwgcCArIGkgLSAxKSlbMF07IC8vIGxlc3MgdGhhbiAxeSFcbn1cbiIsICJpbXBvcnQge2Zvcm1hdERlY2ltYWxQYXJ0c30gZnJvbSBcIi4vZm9ybWF0RGVjaW1hbC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4LCBwKSB7XG4gIHZhciBkID0gZm9ybWF0RGVjaW1hbFBhcnRzKHgsIHApO1xuICBpZiAoIWQpIHJldHVybiB4ICsgXCJcIjtcbiAgdmFyIGNvZWZmaWNpZW50ID0gZFswXSxcbiAgICAgIGV4cG9uZW50ID0gZFsxXTtcbiAgcmV0dXJuIGV4cG9uZW50IDwgMCA/IFwiMC5cIiArIG5ldyBBcnJheSgtZXhwb25lbnQpLmpvaW4oXCIwXCIpICsgY29lZmZpY2llbnRcbiAgICAgIDogY29lZmZpY2llbnQubGVuZ3RoID4gZXhwb25lbnQgKyAxID8gY29lZmZpY2llbnQuc2xpY2UoMCwgZXhwb25lbnQgKyAxKSArIFwiLlwiICsgY29lZmZpY2llbnQuc2xpY2UoZXhwb25lbnQgKyAxKVxuICAgICAgOiBjb2VmZmljaWVudCArIG5ldyBBcnJheShleHBvbmVudCAtIGNvZWZmaWNpZW50Lmxlbmd0aCArIDIpLmpvaW4oXCIwXCIpO1xufVxuIiwgImltcG9ydCBmb3JtYXREZWNpbWFsIGZyb20gXCIuL2Zvcm1hdERlY2ltYWwuanNcIjtcbmltcG9ydCBmb3JtYXRQcmVmaXhBdXRvIGZyb20gXCIuL2Zvcm1hdFByZWZpeEF1dG8uanNcIjtcbmltcG9ydCBmb3JtYXRSb3VuZGVkIGZyb20gXCIuL2Zvcm1hdFJvdW5kZWQuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBcIiVcIjogKHgsIHApID0+ICh4ICogMTAwKS50b0ZpeGVkKHApLFxuICBcImJcIjogKHgpID0+IE1hdGgucm91bmQoeCkudG9TdHJpbmcoMiksXG4gIFwiY1wiOiAoeCkgPT4geCArIFwiXCIsXG4gIFwiZFwiOiBmb3JtYXREZWNpbWFsLFxuICBcImVcIjogKHgsIHApID0+IHgudG9FeHBvbmVudGlhbChwKSxcbiAgXCJmXCI6ICh4LCBwKSA9PiB4LnRvRml4ZWQocCksXG4gIFwiZ1wiOiAoeCwgcCkgPT4geC50b1ByZWNpc2lvbihwKSxcbiAgXCJvXCI6ICh4KSA9PiBNYXRoLnJvdW5kKHgpLnRvU3RyaW5nKDgpLFxuICBcInBcIjogKHgsIHApID0+IGZvcm1hdFJvdW5kZWQoeCAqIDEwMCwgcCksXG4gIFwiclwiOiBmb3JtYXRSb3VuZGVkLFxuICBcInNcIjogZm9ybWF0UHJlZml4QXV0byxcbiAgXCJYXCI6ICh4KSA9PiBNYXRoLnJvdW5kKHgpLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpLFxuICBcInhcIjogKHgpID0+IE1hdGgucm91bmQoeCkudG9TdHJpbmcoMTYpXG59O1xuIiwgImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIHg7XG59XG4iLCAiaW1wb3J0IGV4cG9uZW50IGZyb20gXCIuL2V4cG9uZW50LmpzXCI7XG5pbXBvcnQgZm9ybWF0R3JvdXAgZnJvbSBcIi4vZm9ybWF0R3JvdXAuanNcIjtcbmltcG9ydCBmb3JtYXROdW1lcmFscyBmcm9tIFwiLi9mb3JtYXROdW1lcmFscy5qc1wiO1xuaW1wb3J0IGZvcm1hdFNwZWNpZmllciBmcm9tIFwiLi9mb3JtYXRTcGVjaWZpZXIuanNcIjtcbmltcG9ydCBmb3JtYXRUcmltIGZyb20gXCIuL2Zvcm1hdFRyaW0uanNcIjtcbmltcG9ydCBmb3JtYXRUeXBlcyBmcm9tIFwiLi9mb3JtYXRUeXBlcy5qc1wiO1xuaW1wb3J0IHtwcmVmaXhFeHBvbmVudH0gZnJvbSBcIi4vZm9ybWF0UHJlZml4QXV0by5qc1wiO1xuaW1wb3J0IGlkZW50aXR5IGZyb20gXCIuL2lkZW50aXR5LmpzXCI7XG5cbnZhciBtYXAgPSBBcnJheS5wcm90b3R5cGUubWFwLFxuICAgIHByZWZpeGVzID0gW1wieVwiLFwielwiLFwiYVwiLFwiZlwiLFwicFwiLFwiblwiLFwiXHUwMEI1XCIsXCJtXCIsXCJcIixcImtcIixcIk1cIixcIkdcIixcIlRcIixcIlBcIixcIkVcIixcIlpcIixcIllcIl07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGxvY2FsZSkge1xuICB2YXIgZ3JvdXAgPSBsb2NhbGUuZ3JvdXBpbmcgPT09IHVuZGVmaW5lZCB8fCBsb2NhbGUudGhvdXNhbmRzID09PSB1bmRlZmluZWQgPyBpZGVudGl0eSA6IGZvcm1hdEdyb3VwKG1hcC5jYWxsKGxvY2FsZS5ncm91cGluZywgTnVtYmVyKSwgbG9jYWxlLnRob3VzYW5kcyArIFwiXCIpLFxuICAgICAgY3VycmVuY3lQcmVmaXggPSBsb2NhbGUuY3VycmVuY3kgPT09IHVuZGVmaW5lZCA/IFwiXCIgOiBsb2NhbGUuY3VycmVuY3lbMF0gKyBcIlwiLFxuICAgICAgY3VycmVuY3lTdWZmaXggPSBsb2NhbGUuY3VycmVuY3kgPT09IHVuZGVmaW5lZCA/IFwiXCIgOiBsb2NhbGUuY3VycmVuY3lbMV0gKyBcIlwiLFxuICAgICAgZGVjaW1hbCA9IGxvY2FsZS5kZWNpbWFsID09PSB1bmRlZmluZWQgPyBcIi5cIiA6IGxvY2FsZS5kZWNpbWFsICsgXCJcIixcbiAgICAgIG51bWVyYWxzID0gbG9jYWxlLm51bWVyYWxzID09PSB1bmRlZmluZWQgPyBpZGVudGl0eSA6IGZvcm1hdE51bWVyYWxzKG1hcC5jYWxsKGxvY2FsZS5udW1lcmFscywgU3RyaW5nKSksXG4gICAgICBwZXJjZW50ID0gbG9jYWxlLnBlcmNlbnQgPT09IHVuZGVmaW5lZCA/IFwiJVwiIDogbG9jYWxlLnBlcmNlbnQgKyBcIlwiLFxuICAgICAgbWludXMgPSBsb2NhbGUubWludXMgPT09IHVuZGVmaW5lZCA/IFwiXHUyMjEyXCIgOiBsb2NhbGUubWludXMgKyBcIlwiLFxuICAgICAgbmFuID0gbG9jYWxlLm5hbiA9PT0gdW5kZWZpbmVkID8gXCJOYU5cIiA6IGxvY2FsZS5uYW4gKyBcIlwiO1xuXG4gIGZ1bmN0aW9uIG5ld0Zvcm1hdChzcGVjaWZpZXIpIHtcbiAgICBzcGVjaWZpZXIgPSBmb3JtYXRTcGVjaWZpZXIoc3BlY2lmaWVyKTtcblxuICAgIHZhciBmaWxsID0gc3BlY2lmaWVyLmZpbGwsXG4gICAgICAgIGFsaWduID0gc3BlY2lmaWVyLmFsaWduLFxuICAgICAgICBzaWduID0gc3BlY2lmaWVyLnNpZ24sXG4gICAgICAgIHN5bWJvbCA9IHNwZWNpZmllci5zeW1ib2wsXG4gICAgICAgIHplcm8gPSBzcGVjaWZpZXIuemVybyxcbiAgICAgICAgd2lkdGggPSBzcGVjaWZpZXIud2lkdGgsXG4gICAgICAgIGNvbW1hID0gc3BlY2lmaWVyLmNvbW1hLFxuICAgICAgICBwcmVjaXNpb24gPSBzcGVjaWZpZXIucHJlY2lzaW9uLFxuICAgICAgICB0cmltID0gc3BlY2lmaWVyLnRyaW0sXG4gICAgICAgIHR5cGUgPSBzcGVjaWZpZXIudHlwZTtcblxuICAgIC8vIFRoZSBcIm5cIiB0eXBlIGlzIGFuIGFsaWFzIGZvciBcIixnXCIuXG4gICAgaWYgKHR5cGUgPT09IFwiblwiKSBjb21tYSA9IHRydWUsIHR5cGUgPSBcImdcIjtcblxuICAgIC8vIFRoZSBcIlwiIHR5cGUsIGFuZCBhbnkgaW52YWxpZCB0eXBlLCBpcyBhbiBhbGlhcyBmb3IgXCIuMTJ+Z1wiLlxuICAgIGVsc2UgaWYgKCFmb3JtYXRUeXBlc1t0eXBlXSkgcHJlY2lzaW9uID09PSB1bmRlZmluZWQgJiYgKHByZWNpc2lvbiA9IDEyKSwgdHJpbSA9IHRydWUsIHR5cGUgPSBcImdcIjtcblxuICAgIC8vIElmIHplcm8gZmlsbCBpcyBzcGVjaWZpZWQsIHBhZGRpbmcgZ29lcyBhZnRlciBzaWduIGFuZCBiZWZvcmUgZGlnaXRzLlxuICAgIGlmICh6ZXJvIHx8IChmaWxsID09PSBcIjBcIiAmJiBhbGlnbiA9PT0gXCI9XCIpKSB6ZXJvID0gdHJ1ZSwgZmlsbCA9IFwiMFwiLCBhbGlnbiA9IFwiPVwiO1xuXG4gICAgLy8gQ29tcHV0ZSB0aGUgcHJlZml4IGFuZCBzdWZmaXguXG4gICAgLy8gRm9yIFNJLXByZWZpeCwgdGhlIHN1ZmZpeCBpcyBsYXppbHkgY29tcHV0ZWQuXG4gICAgdmFyIHByZWZpeCA9IHN5bWJvbCA9PT0gXCIkXCIgPyBjdXJyZW5jeVByZWZpeCA6IHN5bWJvbCA9PT0gXCIjXCIgJiYgL1tib3hYXS8udGVzdCh0eXBlKSA/IFwiMFwiICsgdHlwZS50b0xvd2VyQ2FzZSgpIDogXCJcIixcbiAgICAgICAgc3VmZml4ID0gc3ltYm9sID09PSBcIiRcIiA/IGN1cnJlbmN5U3VmZml4IDogL1slcF0vLnRlc3QodHlwZSkgPyBwZXJjZW50IDogXCJcIjtcblxuICAgIC8vIFdoYXQgZm9ybWF0IGZ1bmN0aW9uIHNob3VsZCB3ZSB1c2U/XG4gICAgLy8gSXMgdGhpcyBhbiBpbnRlZ2VyIHR5cGU/XG4gICAgLy8gQ2FuIHRoaXMgdHlwZSBnZW5lcmF0ZSBleHBvbmVudGlhbCBub3RhdGlvbj9cbiAgICB2YXIgZm9ybWF0VHlwZSA9IGZvcm1hdFR5cGVzW3R5cGVdLFxuICAgICAgICBtYXliZVN1ZmZpeCA9IC9bZGVmZ3BycyVdLy50ZXN0KHR5cGUpO1xuXG4gICAgLy8gU2V0IHRoZSBkZWZhdWx0IHByZWNpc2lvbiBpZiBub3Qgc3BlY2lmaWVkLFxuICAgIC8vIG9yIGNsYW1wIHRoZSBzcGVjaWZpZWQgcHJlY2lzaW9uIHRvIHRoZSBzdXBwb3J0ZWQgcmFuZ2UuXG4gICAgLy8gRm9yIHNpZ25pZmljYW50IHByZWNpc2lvbiwgaXQgbXVzdCBiZSBpbiBbMSwgMjFdLlxuICAgIC8vIEZvciBmaXhlZCBwcmVjaXNpb24sIGl0IG11c3QgYmUgaW4gWzAsIDIwXS5cbiAgICBwcmVjaXNpb24gPSBwcmVjaXNpb24gPT09IHVuZGVmaW5lZCA/IDZcbiAgICAgICAgOiAvW2dwcnNdLy50ZXN0KHR5cGUpID8gTWF0aC5tYXgoMSwgTWF0aC5taW4oMjEsIHByZWNpc2lvbikpXG4gICAgICAgIDogTWF0aC5tYXgoMCwgTWF0aC5taW4oMjAsIHByZWNpc2lvbikpO1xuXG4gICAgZnVuY3Rpb24gZm9ybWF0KHZhbHVlKSB7XG4gICAgICB2YXIgdmFsdWVQcmVmaXggPSBwcmVmaXgsXG4gICAgICAgICAgdmFsdWVTdWZmaXggPSBzdWZmaXgsXG4gICAgICAgICAgaSwgbiwgYztcblxuICAgICAgaWYgKHR5cGUgPT09IFwiY1wiKSB7XG4gICAgICAgIHZhbHVlU3VmZml4ID0gZm9ybWF0VHlwZSh2YWx1ZSkgKyB2YWx1ZVN1ZmZpeDtcbiAgICAgICAgdmFsdWUgPSBcIlwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsdWUgPSArdmFsdWU7XG5cbiAgICAgICAgLy8gRGV0ZXJtaW5lIHRoZSBzaWduLiAtMCBpcyBub3QgbGVzcyB0aGFuIDAsIGJ1dCAxIC8gLTAgaXMhXG4gICAgICAgIHZhciB2YWx1ZU5lZ2F0aXZlID0gdmFsdWUgPCAwIHx8IDEgLyB2YWx1ZSA8IDA7XG5cbiAgICAgICAgLy8gUGVyZm9ybSB0aGUgaW5pdGlhbCBmb3JtYXR0aW5nLlxuICAgICAgICB2YWx1ZSA9IGlzTmFOKHZhbHVlKSA/IG5hbiA6IGZvcm1hdFR5cGUoTWF0aC5hYnModmFsdWUpLCBwcmVjaXNpb24pO1xuXG4gICAgICAgIC8vIFRyaW0gaW5zaWduaWZpY2FudCB6ZXJvcy5cbiAgICAgICAgaWYgKHRyaW0pIHZhbHVlID0gZm9ybWF0VHJpbSh2YWx1ZSk7XG5cbiAgICAgICAgLy8gSWYgYSBuZWdhdGl2ZSB2YWx1ZSByb3VuZHMgdG8gemVybyBhZnRlciBmb3JtYXR0aW5nLCBhbmQgbm8gZXhwbGljaXQgcG9zaXRpdmUgc2lnbiBpcyByZXF1ZXN0ZWQsIGhpZGUgdGhlIHNpZ24uXG4gICAgICAgIGlmICh2YWx1ZU5lZ2F0aXZlICYmICt2YWx1ZSA9PT0gMCAmJiBzaWduICE9PSBcIitcIikgdmFsdWVOZWdhdGl2ZSA9IGZhbHNlO1xuXG4gICAgICAgIC8vIENvbXB1dGUgdGhlIHByZWZpeCBhbmQgc3VmZml4LlxuICAgICAgICB2YWx1ZVByZWZpeCA9ICh2YWx1ZU5lZ2F0aXZlID8gKHNpZ24gPT09IFwiKFwiID8gc2lnbiA6IG1pbnVzKSA6IHNpZ24gPT09IFwiLVwiIHx8IHNpZ24gPT09IFwiKFwiID8gXCJcIiA6IHNpZ24pICsgdmFsdWVQcmVmaXg7XG4gICAgICAgIHZhbHVlU3VmZml4ID0gKHR5cGUgPT09IFwic1wiID8gcHJlZml4ZXNbOCArIHByZWZpeEV4cG9uZW50IC8gM10gOiBcIlwiKSArIHZhbHVlU3VmZml4ICsgKHZhbHVlTmVnYXRpdmUgJiYgc2lnbiA9PT0gXCIoXCIgPyBcIilcIiA6IFwiXCIpO1xuXG4gICAgICAgIC8vIEJyZWFrIHRoZSBmb3JtYXR0ZWQgdmFsdWUgaW50byB0aGUgaW50ZWdlciBcdTIwMUN2YWx1ZVx1MjAxRCBwYXJ0IHRoYXQgY2FuIGJlXG4gICAgICAgIC8vIGdyb3VwZWQsIGFuZCBmcmFjdGlvbmFsIG9yIGV4cG9uZW50aWFsIFx1MjAxQ3N1ZmZpeFx1MjAxRCBwYXJ0IHRoYXQgaXMgbm90LlxuICAgICAgICBpZiAobWF5YmVTdWZmaXgpIHtcbiAgICAgICAgICBpID0gLTEsIG4gPSB2YWx1ZS5sZW5ndGg7XG4gICAgICAgICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgICAgIGlmIChjID0gdmFsdWUuY2hhckNvZGVBdChpKSwgNDggPiBjIHx8IGMgPiA1Nykge1xuICAgICAgICAgICAgICB2YWx1ZVN1ZmZpeCA9IChjID09PSA0NiA/IGRlY2ltYWwgKyB2YWx1ZS5zbGljZShpICsgMSkgOiB2YWx1ZS5zbGljZShpKSkgKyB2YWx1ZVN1ZmZpeDtcbiAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5zbGljZSgwLCBpKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIElmIHRoZSBmaWxsIGNoYXJhY3RlciBpcyBub3QgXCIwXCIsIGdyb3VwaW5nIGlzIGFwcGxpZWQgYmVmb3JlIHBhZGRpbmcuXG4gICAgICBpZiAoY29tbWEgJiYgIXplcm8pIHZhbHVlID0gZ3JvdXAodmFsdWUsIEluZmluaXR5KTtcblxuICAgICAgLy8gQ29tcHV0ZSB0aGUgcGFkZGluZy5cbiAgICAgIHZhciBsZW5ndGggPSB2YWx1ZVByZWZpeC5sZW5ndGggKyB2YWx1ZS5sZW5ndGggKyB2YWx1ZVN1ZmZpeC5sZW5ndGgsXG4gICAgICAgICAgcGFkZGluZyA9IGxlbmd0aCA8IHdpZHRoID8gbmV3IEFycmF5KHdpZHRoIC0gbGVuZ3RoICsgMSkuam9pbihmaWxsKSA6IFwiXCI7XG5cbiAgICAgIC8vIElmIHRoZSBmaWxsIGNoYXJhY3RlciBpcyBcIjBcIiwgZ3JvdXBpbmcgaXMgYXBwbGllZCBhZnRlciBwYWRkaW5nLlxuICAgICAgaWYgKGNvbW1hICYmIHplcm8pIHZhbHVlID0gZ3JvdXAocGFkZGluZyArIHZhbHVlLCBwYWRkaW5nLmxlbmd0aCA/IHdpZHRoIC0gdmFsdWVTdWZmaXgubGVuZ3RoIDogSW5maW5pdHkpLCBwYWRkaW5nID0gXCJcIjtcblxuICAgICAgLy8gUmVjb25zdHJ1Y3QgdGhlIGZpbmFsIG91dHB1dCBiYXNlZCBvbiB0aGUgZGVzaXJlZCBhbGlnbm1lbnQuXG4gICAgICBzd2l0Y2ggKGFsaWduKSB7XG4gICAgICAgIGNhc2UgXCI8XCI6IHZhbHVlID0gdmFsdWVQcmVmaXggKyB2YWx1ZSArIHZhbHVlU3VmZml4ICsgcGFkZGluZzsgYnJlYWs7XG4gICAgICAgIGNhc2UgXCI9XCI6IHZhbHVlID0gdmFsdWVQcmVmaXggKyBwYWRkaW5nICsgdmFsdWUgKyB2YWx1ZVN1ZmZpeDsgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJeXCI6IHZhbHVlID0gcGFkZGluZy5zbGljZSgwLCBsZW5ndGggPSBwYWRkaW5nLmxlbmd0aCA+PiAxKSArIHZhbHVlUHJlZml4ICsgdmFsdWUgKyB2YWx1ZVN1ZmZpeCArIHBhZGRpbmcuc2xpY2UobGVuZ3RoKTsgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6IHZhbHVlID0gcGFkZGluZyArIHZhbHVlUHJlZml4ICsgdmFsdWUgKyB2YWx1ZVN1ZmZpeDsgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBudW1lcmFscyh2YWx1ZSk7XG4gICAgfVxuXG4gICAgZm9ybWF0LnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gc3BlY2lmaWVyICsgXCJcIjtcbiAgICB9O1xuXG4gICAgcmV0dXJuIGZvcm1hdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFByZWZpeChzcGVjaWZpZXIsIHZhbHVlKSB7XG4gICAgdmFyIGYgPSBuZXdGb3JtYXQoKHNwZWNpZmllciA9IGZvcm1hdFNwZWNpZmllcihzcGVjaWZpZXIpLCBzcGVjaWZpZXIudHlwZSA9IFwiZlwiLCBzcGVjaWZpZXIpKSxcbiAgICAgICAgZSA9IE1hdGgubWF4KC04LCBNYXRoLm1pbig4LCBNYXRoLmZsb29yKGV4cG9uZW50KHZhbHVlKSAvIDMpKSkgKiAzLFxuICAgICAgICBrID0gTWF0aC5wb3coMTAsIC1lKSxcbiAgICAgICAgcHJlZml4ID0gcHJlZml4ZXNbOCArIGUgLyAzXTtcbiAgICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiBmKGsgKiB2YWx1ZSkgKyBwcmVmaXg7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZm9ybWF0OiBuZXdGb3JtYXQsXG4gICAgZm9ybWF0UHJlZml4OiBmb3JtYXRQcmVmaXhcbiAgfTtcbn1cbiIsICJpbXBvcnQgZm9ybWF0TG9jYWxlIGZyb20gXCIuL2xvY2FsZS5qc1wiO1xuXG52YXIgbG9jYWxlO1xuZXhwb3J0IHZhciBmb3JtYXQ7XG5leHBvcnQgdmFyIGZvcm1hdFByZWZpeDtcblxuZGVmYXVsdExvY2FsZSh7XG4gIHRob3VzYW5kczogXCIsXCIsXG4gIGdyb3VwaW5nOiBbM10sXG4gIGN1cnJlbmN5OiBbXCIkXCIsIFwiXCJdXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGVmYXVsdExvY2FsZShkZWZpbml0aW9uKSB7XG4gIGxvY2FsZSA9IGZvcm1hdExvY2FsZShkZWZpbml0aW9uKTtcbiAgZm9ybWF0ID0gbG9jYWxlLmZvcm1hdDtcbiAgZm9ybWF0UHJlZml4ID0gbG9jYWxlLmZvcm1hdFByZWZpeDtcbiAgcmV0dXJuIGxvY2FsZTtcbn1cbiIsICJpbXBvcnQgZXhwb25lbnQgZnJvbSBcIi4vZXhwb25lbnQuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc3RlcCkge1xuICByZXR1cm4gTWF0aC5tYXgoMCwgLWV4cG9uZW50KE1hdGguYWJzKHN0ZXApKSk7XG59XG4iLCAiaW1wb3J0IGV4cG9uZW50IGZyb20gXCIuL2V4cG9uZW50LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHN0ZXAsIHZhbHVlKSB7XG4gIHJldHVybiBNYXRoLm1heCgwLCBNYXRoLm1heCgtOCwgTWF0aC5taW4oOCwgTWF0aC5mbG9vcihleHBvbmVudCh2YWx1ZSkgLyAzKSkpICogMyAtIGV4cG9uZW50KE1hdGguYWJzKHN0ZXApKSk7XG59XG4iLCAiaW1wb3J0IGV4cG9uZW50IGZyb20gXCIuL2V4cG9uZW50LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHN0ZXAsIG1heCkge1xuICBzdGVwID0gTWF0aC5hYnMoc3RlcCksIG1heCA9IE1hdGguYWJzKG1heCkgLSBzdGVwO1xuICByZXR1cm4gTWF0aC5tYXgoMCwgZXhwb25lbnQobWF4KSAtIGV4cG9uZW50KHN0ZXApKSArIDE7XG59XG4iLCAiZXhwb3J0IGZ1bmN0aW9uIGluaXRSYW5nZShkb21haW4sIHJhbmdlKSB7XG4gIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgIGNhc2UgMDogYnJlYWs7XG4gICAgY2FzZSAxOiB0aGlzLnJhbmdlKGRvbWFpbik7IGJyZWFrO1xuICAgIGRlZmF1bHQ6IHRoaXMucmFuZ2UocmFuZ2UpLmRvbWFpbihkb21haW4pOyBicmVhaztcbiAgfVxuICByZXR1cm4gdGhpcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluaXRJbnRlcnBvbGF0b3IoZG9tYWluLCBpbnRlcnBvbGF0b3IpIHtcbiAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgY2FzZSAwOiBicmVhaztcbiAgICBjYXNlIDE6IHtcbiAgICAgIGlmICh0eXBlb2YgZG9tYWluID09PSBcImZ1bmN0aW9uXCIpIHRoaXMuaW50ZXJwb2xhdG9yKGRvbWFpbik7XG4gICAgICBlbHNlIHRoaXMucmFuZ2UoZG9tYWluKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBkZWZhdWx0OiB7XG4gICAgICB0aGlzLmRvbWFpbihkb21haW4pO1xuICAgICAgaWYgKHR5cGVvZiBpbnRlcnBvbGF0b3IgPT09IFwiZnVuY3Rpb25cIikgdGhpcy5pbnRlcnBvbGF0b3IoaW50ZXJwb2xhdG9yKTtcbiAgICAgIGVsc2UgdGhpcy5yYW5nZShpbnRlcnBvbGF0b3IpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiB0aGlzO1xufVxuIiwgImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbnN0YW50cyh4KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn1cbiIsICJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBudW1iZXIoeCkge1xuICByZXR1cm4gK3g7XG59XG4iLCAiaW1wb3J0IHtiaXNlY3R9IGZyb20gXCJkMy1hcnJheVwiO1xuaW1wb3J0IHtpbnRlcnBvbGF0ZSBhcyBpbnRlcnBvbGF0ZVZhbHVlLCBpbnRlcnBvbGF0ZU51bWJlciwgaW50ZXJwb2xhdGVSb3VuZH0gZnJvbSBcImQzLWludGVycG9sYXRlXCI7XG5pbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnQuanNcIjtcbmltcG9ydCBudW1iZXIgZnJvbSBcIi4vbnVtYmVyLmpzXCI7XG5cbnZhciB1bml0ID0gWzAsIDFdO1xuXG5leHBvcnQgZnVuY3Rpb24gaWRlbnRpdHkoeCkge1xuICByZXR1cm4geDtcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplKGEsIGIpIHtcbiAgcmV0dXJuIChiIC09IChhID0gK2EpKVxuICAgICAgPyBmdW5jdGlvbih4KSB7IHJldHVybiAoeCAtIGEpIC8gYjsgfVxuICAgICAgOiBjb25zdGFudChpc05hTihiKSA/IE5hTiA6IDAuNSk7XG59XG5cbmZ1bmN0aW9uIGNsYW1wZXIoYSwgYikge1xuICB2YXIgdDtcbiAgaWYgKGEgPiBiKSB0ID0gYSwgYSA9IGIsIGIgPSB0O1xuICByZXR1cm4gZnVuY3Rpb24oeCkgeyByZXR1cm4gTWF0aC5tYXgoYSwgTWF0aC5taW4oYiwgeCkpOyB9O1xufVxuXG4vLyBub3JtYWxpemUoYSwgYikoeCkgdGFrZXMgYSBkb21haW4gdmFsdWUgeCBpbiBbYSxiXSBhbmQgcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyBwYXJhbWV0ZXIgdCBpbiBbMCwxXS5cbi8vIGludGVycG9sYXRlKGEsIGIpKHQpIHRha2VzIGEgcGFyYW1ldGVyIHQgaW4gWzAsMV0gYW5kIHJldHVybnMgdGhlIGNvcnJlc3BvbmRpbmcgcmFuZ2UgdmFsdWUgeCBpbiBbYSxiXS5cbmZ1bmN0aW9uIGJpbWFwKGRvbWFpbiwgcmFuZ2UsIGludGVycG9sYXRlKSB7XG4gIHZhciBkMCA9IGRvbWFpblswXSwgZDEgPSBkb21haW5bMV0sIHIwID0gcmFuZ2VbMF0sIHIxID0gcmFuZ2VbMV07XG4gIGlmIChkMSA8IGQwKSBkMCA9IG5vcm1hbGl6ZShkMSwgZDApLCByMCA9IGludGVycG9sYXRlKHIxLCByMCk7XG4gIGVsc2UgZDAgPSBub3JtYWxpemUoZDAsIGQxKSwgcjAgPSBpbnRlcnBvbGF0ZShyMCwgcjEpO1xuICByZXR1cm4gZnVuY3Rpb24oeCkgeyByZXR1cm4gcjAoZDAoeCkpOyB9O1xufVxuXG5mdW5jdGlvbiBwb2x5bWFwKGRvbWFpbiwgcmFuZ2UsIGludGVycG9sYXRlKSB7XG4gIHZhciBqID0gTWF0aC5taW4oZG9tYWluLmxlbmd0aCwgcmFuZ2UubGVuZ3RoKSAtIDEsXG4gICAgICBkID0gbmV3IEFycmF5KGopLFxuICAgICAgciA9IG5ldyBBcnJheShqKSxcbiAgICAgIGkgPSAtMTtcblxuICAvLyBSZXZlcnNlIGRlc2NlbmRpbmcgZG9tYWlucy5cbiAgaWYgKGRvbWFpbltqXSA8IGRvbWFpblswXSkge1xuICAgIGRvbWFpbiA9IGRvbWFpbi5zbGljZSgpLnJldmVyc2UoKTtcbiAgICByYW5nZSA9IHJhbmdlLnNsaWNlKCkucmV2ZXJzZSgpO1xuICB9XG5cbiAgd2hpbGUgKCsraSA8IGopIHtcbiAgICBkW2ldID0gbm9ybWFsaXplKGRvbWFpbltpXSwgZG9tYWluW2kgKyAxXSk7XG4gICAgcltpXSA9IGludGVycG9sYXRlKHJhbmdlW2ldLCByYW5nZVtpICsgMV0pO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKHgpIHtcbiAgICB2YXIgaSA9IGJpc2VjdChkb21haW4sIHgsIDEsIGopIC0gMTtcbiAgICByZXR1cm4gcltpXShkW2ldKHgpKTtcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvcHkoc291cmNlLCB0YXJnZXQpIHtcbiAgcmV0dXJuIHRhcmdldFxuICAgICAgLmRvbWFpbihzb3VyY2UuZG9tYWluKCkpXG4gICAgICAucmFuZ2Uoc291cmNlLnJhbmdlKCkpXG4gICAgICAuaW50ZXJwb2xhdGUoc291cmNlLmludGVycG9sYXRlKCkpXG4gICAgICAuY2xhbXAoc291cmNlLmNsYW1wKCkpXG4gICAgICAudW5rbm93bihzb3VyY2UudW5rbm93bigpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZm9ybWVyKCkge1xuICB2YXIgZG9tYWluID0gdW5pdCxcbiAgICAgIHJhbmdlID0gdW5pdCxcbiAgICAgIGludGVycG9sYXRlID0gaW50ZXJwb2xhdGVWYWx1ZSxcbiAgICAgIHRyYW5zZm9ybSxcbiAgICAgIHVudHJhbnNmb3JtLFxuICAgICAgdW5rbm93bixcbiAgICAgIGNsYW1wID0gaWRlbnRpdHksXG4gICAgICBwaWVjZXdpc2UsXG4gICAgICBvdXRwdXQsXG4gICAgICBpbnB1dDtcblxuICBmdW5jdGlvbiByZXNjYWxlKCkge1xuICAgIHZhciBuID0gTWF0aC5taW4oZG9tYWluLmxlbmd0aCwgcmFuZ2UubGVuZ3RoKTtcbiAgICBpZiAoY2xhbXAgIT09IGlkZW50aXR5KSBjbGFtcCA9IGNsYW1wZXIoZG9tYWluWzBdLCBkb21haW5bbiAtIDFdKTtcbiAgICBwaWVjZXdpc2UgPSBuID4gMiA/IHBvbHltYXAgOiBiaW1hcDtcbiAgICBvdXRwdXQgPSBpbnB1dCA9IG51bGw7XG4gICAgcmV0dXJuIHNjYWxlO1xuICB9XG5cbiAgZnVuY3Rpb24gc2NhbGUoeCkge1xuICAgIHJldHVybiB4ID09IG51bGwgfHwgaXNOYU4oeCA9ICt4KSA/IHVua25vd24gOiAob3V0cHV0IHx8IChvdXRwdXQgPSBwaWVjZXdpc2UoZG9tYWluLm1hcCh0cmFuc2Zvcm0pLCByYW5nZSwgaW50ZXJwb2xhdGUpKSkodHJhbnNmb3JtKGNsYW1wKHgpKSk7XG4gIH1cblxuICBzY2FsZS5pbnZlcnQgPSBmdW5jdGlvbih5KSB7XG4gICAgcmV0dXJuIGNsYW1wKHVudHJhbnNmb3JtKChpbnB1dCB8fCAoaW5wdXQgPSBwaWVjZXdpc2UocmFuZ2UsIGRvbWFpbi5tYXAodHJhbnNmb3JtKSwgaW50ZXJwb2xhdGVOdW1iZXIpKSkoeSkpKTtcbiAgfTtcblxuICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZG9tYWluID0gQXJyYXkuZnJvbShfLCBudW1iZXIpLCByZXNjYWxlKCkpIDogZG9tYWluLnNsaWNlKCk7XG4gIH07XG5cbiAgc2NhbGUucmFuZ2UgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocmFuZ2UgPSBBcnJheS5mcm9tKF8pLCByZXNjYWxlKCkpIDogcmFuZ2Uuc2xpY2UoKTtcbiAgfTtcblxuICBzY2FsZS5yYW5nZVJvdW5kID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiByYW5nZSA9IEFycmF5LmZyb20oXyksIGludGVycG9sYXRlID0gaW50ZXJwb2xhdGVSb3VuZCwgcmVzY2FsZSgpO1xuICB9O1xuXG4gIHNjYWxlLmNsYW1wID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGNsYW1wID0gXyA/IHRydWUgOiBpZGVudGl0eSwgcmVzY2FsZSgpKSA6IGNsYW1wICE9PSBpZGVudGl0eTtcbiAgfTtcblxuICBzY2FsZS5pbnRlcnBvbGF0ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChpbnRlcnBvbGF0ZSA9IF8sIHJlc2NhbGUoKSkgOiBpbnRlcnBvbGF0ZTtcbiAgfTtcblxuICBzY2FsZS51bmtub3duID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHVua25vd24gPSBfLCBzY2FsZSkgOiB1bmtub3duO1xuICB9O1xuXG4gIHJldHVybiBmdW5jdGlvbih0LCB1KSB7XG4gICAgdHJhbnNmb3JtID0gdCwgdW50cmFuc2Zvcm0gPSB1O1xuICAgIHJldHVybiByZXNjYWxlKCk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbnRpbnVvdXMoKSB7XG4gIHJldHVybiB0cmFuc2Zvcm1lcigpKGlkZW50aXR5LCBpZGVudGl0eSk7XG59XG4iLCAiaW1wb3J0IHt0aWNrU3RlcH0gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQge2Zvcm1hdCwgZm9ybWF0UHJlZml4LCBmb3JtYXRTcGVjaWZpZXIsIHByZWNpc2lvbkZpeGVkLCBwcmVjaXNpb25QcmVmaXgsIHByZWNpc2lvblJvdW5kfSBmcm9tIFwiZDMtZm9ybWF0XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRpY2tGb3JtYXQoc3RhcnQsIHN0b3AsIGNvdW50LCBzcGVjaWZpZXIpIHtcbiAgdmFyIHN0ZXAgPSB0aWNrU3RlcChzdGFydCwgc3RvcCwgY291bnQpLFxuICAgICAgcHJlY2lzaW9uO1xuICBzcGVjaWZpZXIgPSBmb3JtYXRTcGVjaWZpZXIoc3BlY2lmaWVyID09IG51bGwgPyBcIixmXCIgOiBzcGVjaWZpZXIpO1xuICBzd2l0Y2ggKHNwZWNpZmllci50eXBlKSB7XG4gICAgY2FzZSBcInNcIjoge1xuICAgICAgdmFyIHZhbHVlID0gTWF0aC5tYXgoTWF0aC5hYnMoc3RhcnQpLCBNYXRoLmFicyhzdG9wKSk7XG4gICAgICBpZiAoc3BlY2lmaWVyLnByZWNpc2lvbiA9PSBudWxsICYmICFpc05hTihwcmVjaXNpb24gPSBwcmVjaXNpb25QcmVmaXgoc3RlcCwgdmFsdWUpKSkgc3BlY2lmaWVyLnByZWNpc2lvbiA9IHByZWNpc2lvbjtcbiAgICAgIHJldHVybiBmb3JtYXRQcmVmaXgoc3BlY2lmaWVyLCB2YWx1ZSk7XG4gICAgfVxuICAgIGNhc2UgXCJcIjpcbiAgICBjYXNlIFwiZVwiOlxuICAgIGNhc2UgXCJnXCI6XG4gICAgY2FzZSBcInBcIjpcbiAgICBjYXNlIFwiclwiOiB7XG4gICAgICBpZiAoc3BlY2lmaWVyLnByZWNpc2lvbiA9PSBudWxsICYmICFpc05hTihwcmVjaXNpb24gPSBwcmVjaXNpb25Sb3VuZChzdGVwLCBNYXRoLm1heChNYXRoLmFicyhzdGFydCksIE1hdGguYWJzKHN0b3ApKSkpKSBzcGVjaWZpZXIucHJlY2lzaW9uID0gcHJlY2lzaW9uIC0gKHNwZWNpZmllci50eXBlID09PSBcImVcIik7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgY2FzZSBcImZcIjpcbiAgICBjYXNlIFwiJVwiOiB7XG4gICAgICBpZiAoc3BlY2lmaWVyLnByZWNpc2lvbiA9PSBudWxsICYmICFpc05hTihwcmVjaXNpb24gPSBwcmVjaXNpb25GaXhlZChzdGVwKSkpIHNwZWNpZmllci5wcmVjaXNpb24gPSBwcmVjaXNpb24gLSAoc3BlY2lmaWVyLnR5cGUgPT09IFwiJVwiKSAqIDI7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZvcm1hdChzcGVjaWZpZXIpO1xufVxuIiwgImltcG9ydCB7dGlja3MsIHRpY2tJbmNyZW1lbnR9IGZyb20gXCJkMy1hcnJheVwiO1xuaW1wb3J0IGNvbnRpbnVvdXMsIHtjb3B5fSBmcm9tIFwiLi9jb250aW51b3VzLmpzXCI7XG5pbXBvcnQge2luaXRSYW5nZX0gZnJvbSBcIi4vaW5pdC5qc1wiO1xuaW1wb3J0IHRpY2tGb3JtYXQgZnJvbSBcIi4vdGlja0Zvcm1hdC5qc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gbGluZWFyaXNoKHNjYWxlKSB7XG4gIHZhciBkb21haW4gPSBzY2FsZS5kb21haW47XG5cbiAgc2NhbGUudGlja3MgPSBmdW5jdGlvbihjb3VudCkge1xuICAgIHZhciBkID0gZG9tYWluKCk7XG4gICAgcmV0dXJuIHRpY2tzKGRbMF0sIGRbZC5sZW5ndGggLSAxXSwgY291bnQgPT0gbnVsbCA/IDEwIDogY291bnQpO1xuICB9O1xuXG4gIHNjYWxlLnRpY2tGb3JtYXQgPSBmdW5jdGlvbihjb3VudCwgc3BlY2lmaWVyKSB7XG4gICAgdmFyIGQgPSBkb21haW4oKTtcbiAgICByZXR1cm4gdGlja0Zvcm1hdChkWzBdLCBkW2QubGVuZ3RoIC0gMV0sIGNvdW50ID09IG51bGwgPyAxMCA6IGNvdW50LCBzcGVjaWZpZXIpO1xuICB9O1xuXG4gIHNjYWxlLm5pY2UgPSBmdW5jdGlvbihjb3VudCkge1xuICAgIGlmIChjb3VudCA9PSBudWxsKSBjb3VudCA9IDEwO1xuXG4gICAgdmFyIGQgPSBkb21haW4oKTtcbiAgICB2YXIgaTAgPSAwO1xuICAgIHZhciBpMSA9IGQubGVuZ3RoIC0gMTtcbiAgICB2YXIgc3RhcnQgPSBkW2kwXTtcbiAgICB2YXIgc3RvcCA9IGRbaTFdO1xuICAgIHZhciBwcmVzdGVwO1xuICAgIHZhciBzdGVwO1xuICAgIHZhciBtYXhJdGVyID0gMTA7XG5cbiAgICBpZiAoc3RvcCA8IHN0YXJ0KSB7XG4gICAgICBzdGVwID0gc3RhcnQsIHN0YXJ0ID0gc3RvcCwgc3RvcCA9IHN0ZXA7XG4gICAgICBzdGVwID0gaTAsIGkwID0gaTEsIGkxID0gc3RlcDtcbiAgICB9XG4gICAgXG4gICAgd2hpbGUgKG1heEl0ZXItLSA+IDApIHtcbiAgICAgIHN0ZXAgPSB0aWNrSW5jcmVtZW50KHN0YXJ0LCBzdG9wLCBjb3VudCk7XG4gICAgICBpZiAoc3RlcCA9PT0gcHJlc3RlcCkge1xuICAgICAgICBkW2kwXSA9IHN0YXJ0XG4gICAgICAgIGRbaTFdID0gc3RvcFxuICAgICAgICByZXR1cm4gZG9tYWluKGQpO1xuICAgICAgfSBlbHNlIGlmIChzdGVwID4gMCkge1xuICAgICAgICBzdGFydCA9IE1hdGguZmxvb3Ioc3RhcnQgLyBzdGVwKSAqIHN0ZXA7XG4gICAgICAgIHN0b3AgPSBNYXRoLmNlaWwoc3RvcCAvIHN0ZXApICogc3RlcDtcbiAgICAgIH0gZWxzZSBpZiAoc3RlcCA8IDApIHtcbiAgICAgICAgc3RhcnQgPSBNYXRoLmNlaWwoc3RhcnQgKiBzdGVwKSAvIHN0ZXA7XG4gICAgICAgIHN0b3AgPSBNYXRoLmZsb29yKHN0b3AgKiBzdGVwKSAvIHN0ZXA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHByZXN0ZXAgPSBzdGVwO1xuICAgIH1cblxuICAgIHJldHVybiBzY2FsZTtcbiAgfTtcblxuICByZXR1cm4gc2NhbGU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxpbmVhcigpIHtcbiAgdmFyIHNjYWxlID0gY29udGludW91cygpO1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gY29weShzY2FsZSwgbGluZWFyKCkpO1xuICB9O1xuXG4gIGluaXRSYW5nZS5hcHBseShzY2FsZSwgYXJndW1lbnRzKTtcblxuICByZXR1cm4gbGluZWFyaXNoKHNjYWxlKTtcbn1cbiIsICJleHBvcnQgZGVmYXVsdCB4ID0+ICgpID0+IHg7XG4iLCAiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gWm9vbUV2ZW50KHR5cGUsIHtcbiAgc291cmNlRXZlbnQsXG4gIHRhcmdldCxcbiAgdHJhbnNmb3JtLFxuICBkaXNwYXRjaFxufSkge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0aGlzLCB7XG4gICAgdHlwZToge3ZhbHVlOiB0eXBlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWV9LFxuICAgIHNvdXJjZUV2ZW50OiB7dmFsdWU6IHNvdXJjZUV2ZW50LCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWV9LFxuICAgIHRhcmdldDoge3ZhbHVlOiB0YXJnZXQsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZX0sXG4gICAgdHJhbnNmb3JtOiB7dmFsdWU6IHRyYW5zZm9ybSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlfSxcbiAgICBfOiB7dmFsdWU6IGRpc3BhdGNofVxuICB9KTtcbn1cbiIsICJleHBvcnQgZnVuY3Rpb24gVHJhbnNmb3JtKGssIHgsIHkpIHtcbiAgdGhpcy5rID0gaztcbiAgdGhpcy54ID0geDtcbiAgdGhpcy55ID0geTtcbn1cblxuVHJhbnNmb3JtLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IFRyYW5zZm9ybSxcbiAgc2NhbGU6IGZ1bmN0aW9uKGspIHtcbiAgICByZXR1cm4gayA9PT0gMSA/IHRoaXMgOiBuZXcgVHJhbnNmb3JtKHRoaXMuayAqIGssIHRoaXMueCwgdGhpcy55KTtcbiAgfSxcbiAgdHJhbnNsYXRlOiBmdW5jdGlvbih4LCB5KSB7XG4gICAgcmV0dXJuIHggPT09IDAgJiB5ID09PSAwID8gdGhpcyA6IG5ldyBUcmFuc2Zvcm0odGhpcy5rLCB0aGlzLnggKyB0aGlzLmsgKiB4LCB0aGlzLnkgKyB0aGlzLmsgKiB5KTtcbiAgfSxcbiAgYXBwbHk6IGZ1bmN0aW9uKHBvaW50KSB7XG4gICAgcmV0dXJuIFtwb2ludFswXSAqIHRoaXMuayArIHRoaXMueCwgcG9pbnRbMV0gKiB0aGlzLmsgKyB0aGlzLnldO1xuICB9LFxuICBhcHBseVg6IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4geCAqIHRoaXMuayArIHRoaXMueDtcbiAgfSxcbiAgYXBwbHlZOiBmdW5jdGlvbih5KSB7XG4gICAgcmV0dXJuIHkgKiB0aGlzLmsgKyB0aGlzLnk7XG4gIH0sXG4gIGludmVydDogZnVuY3Rpb24obG9jYXRpb24pIHtcbiAgICByZXR1cm4gWyhsb2NhdGlvblswXSAtIHRoaXMueCkgLyB0aGlzLmssIChsb2NhdGlvblsxXSAtIHRoaXMueSkgLyB0aGlzLmtdO1xuICB9LFxuICBpbnZlcnRYOiBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuICh4IC0gdGhpcy54KSAvIHRoaXMuaztcbiAgfSxcbiAgaW52ZXJ0WTogZnVuY3Rpb24oeSkge1xuICAgIHJldHVybiAoeSAtIHRoaXMueSkgLyB0aGlzLms7XG4gIH0sXG4gIHJlc2NhbGVYOiBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIHguY29weSgpLmRvbWFpbih4LnJhbmdlKCkubWFwKHRoaXMuaW52ZXJ0WCwgdGhpcykubWFwKHguaW52ZXJ0LCB4KSk7XG4gIH0sXG4gIHJlc2NhbGVZOiBmdW5jdGlvbih5KSB7XG4gICAgcmV0dXJuIHkuY29weSgpLmRvbWFpbih5LnJhbmdlKCkubWFwKHRoaXMuaW52ZXJ0WSwgdGhpcykubWFwKHkuaW52ZXJ0LCB5KSk7XG4gIH0sXG4gIHRvU3RyaW5nOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gXCJ0cmFuc2xhdGUoXCIgKyB0aGlzLnggKyBcIixcIiArIHRoaXMueSArIFwiKSBzY2FsZShcIiArIHRoaXMuayArIFwiKVwiO1xuICB9XG59O1xuXG5leHBvcnQgdmFyIGlkZW50aXR5ID0gbmV3IFRyYW5zZm9ybSgxLCAwLCAwKTtcblxudHJhbnNmb3JtLnByb3RvdHlwZSA9IFRyYW5zZm9ybS5wcm90b3R5cGU7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRyYW5zZm9ybShub2RlKSB7XG4gIHdoaWxlICghbm9kZS5fX3pvb20pIGlmICghKG5vZGUgPSBub2RlLnBhcmVudE5vZGUpKSByZXR1cm4gaWRlbnRpdHk7XG4gIHJldHVybiBub2RlLl9fem9vbTtcbn1cbiIsICJleHBvcnQgZnVuY3Rpb24gbm9wcm9wYWdhdGlvbihldmVudCkge1xuICBldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZXZlbnQpIHtcbiAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG59XG4iLCAiaW1wb3J0IHtkaXNwYXRjaH0gZnJvbSBcImQzLWRpc3BhdGNoXCI7XG5pbXBvcnQge2RyYWdEaXNhYmxlLCBkcmFnRW5hYmxlfSBmcm9tIFwiZDMtZHJhZ1wiO1xuaW1wb3J0IHtpbnRlcnBvbGF0ZVpvb219IGZyb20gXCJkMy1pbnRlcnBvbGF0ZVwiO1xuaW1wb3J0IHtzZWxlY3QsIHBvaW50ZXJ9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7aW50ZXJydXB0fSBmcm9tIFwiZDMtdHJhbnNpdGlvblwiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50LmpzXCI7XG5pbXBvcnQgWm9vbUV2ZW50IGZyb20gXCIuL2V2ZW50LmpzXCI7XG5pbXBvcnQge1RyYW5zZm9ybSwgaWRlbnRpdHl9IGZyb20gXCIuL3RyYW5zZm9ybS5qc1wiO1xuaW1wb3J0IG5vZXZlbnQsIHtub3Byb3BhZ2F0aW9ufSBmcm9tIFwiLi9ub2V2ZW50LmpzXCI7XG5cbi8vIElnbm9yZSByaWdodC1jbGljaywgc2luY2UgdGhhdCBzaG91bGQgb3BlbiB0aGUgY29udGV4dCBtZW51LlxuLy8gZXhjZXB0IGZvciBwaW5jaC10by16b29tLCB3aGljaCBpcyBzZW50IGFzIGEgd2hlZWwrY3RybEtleSBldmVudFxuZnVuY3Rpb24gZGVmYXVsdEZpbHRlcihldmVudCkge1xuICByZXR1cm4gKCFldmVudC5jdHJsS2V5IHx8IGV2ZW50LnR5cGUgPT09ICd3aGVlbCcpICYmICFldmVudC5idXR0b247XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRFeHRlbnQoKSB7XG4gIHZhciBlID0gdGhpcztcbiAgaWYgKGUgaW5zdGFuY2VvZiBTVkdFbGVtZW50KSB7XG4gICAgZSA9IGUub3duZXJTVkdFbGVtZW50IHx8IGU7XG4gICAgaWYgKGUuaGFzQXR0cmlidXRlKFwidmlld0JveFwiKSkge1xuICAgICAgZSA9IGUudmlld0JveC5iYXNlVmFsO1xuICAgICAgcmV0dXJuIFtbZS54LCBlLnldLCBbZS54ICsgZS53aWR0aCwgZS55ICsgZS5oZWlnaHRdXTtcbiAgICB9XG4gICAgcmV0dXJuIFtbMCwgMF0sIFtlLndpZHRoLmJhc2VWYWwudmFsdWUsIGUuaGVpZ2h0LmJhc2VWYWwudmFsdWVdXTtcbiAgfVxuICByZXR1cm4gW1swLCAwXSwgW2UuY2xpZW50V2lkdGgsIGUuY2xpZW50SGVpZ2h0XV07XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRUcmFuc2Zvcm0oKSB7XG4gIHJldHVybiB0aGlzLl9fem9vbSB8fCBpZGVudGl0eTtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdFdoZWVsRGVsdGEoZXZlbnQpIHtcbiAgcmV0dXJuIC1ldmVudC5kZWx0YVkgKiAoZXZlbnQuZGVsdGFNb2RlID09PSAxID8gMC4wNSA6IGV2ZW50LmRlbHRhTW9kZSA/IDEgOiAwLjAwMikgKiAoZXZlbnQuY3RybEtleSA/IDEwIDogMSk7XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRUb3VjaGFibGUoKSB7XG4gIHJldHVybiBuYXZpZ2F0b3IubWF4VG91Y2hQb2ludHMgfHwgKFwib250b3VjaHN0YXJ0XCIgaW4gdGhpcyk7XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRDb25zdHJhaW4odHJhbnNmb3JtLCBleHRlbnQsIHRyYW5zbGF0ZUV4dGVudCkge1xuICB2YXIgZHgwID0gdHJhbnNmb3JtLmludmVydFgoZXh0ZW50WzBdWzBdKSAtIHRyYW5zbGF0ZUV4dGVudFswXVswXSxcbiAgICAgIGR4MSA9IHRyYW5zZm9ybS5pbnZlcnRYKGV4dGVudFsxXVswXSkgLSB0cmFuc2xhdGVFeHRlbnRbMV1bMF0sXG4gICAgICBkeTAgPSB0cmFuc2Zvcm0uaW52ZXJ0WShleHRlbnRbMF1bMV0pIC0gdHJhbnNsYXRlRXh0ZW50WzBdWzFdLFxuICAgICAgZHkxID0gdHJhbnNmb3JtLmludmVydFkoZXh0ZW50WzFdWzFdKSAtIHRyYW5zbGF0ZUV4dGVudFsxXVsxXTtcbiAgcmV0dXJuIHRyYW5zZm9ybS50cmFuc2xhdGUoXG4gICAgZHgxID4gZHgwID8gKGR4MCArIGR4MSkgLyAyIDogTWF0aC5taW4oMCwgZHgwKSB8fCBNYXRoLm1heCgwLCBkeDEpLFxuICAgIGR5MSA+IGR5MCA/IChkeTAgKyBkeTEpIC8gMiA6IE1hdGgubWluKDAsIGR5MCkgfHwgTWF0aC5tYXgoMCwgZHkxKVxuICApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIGZpbHRlciA9IGRlZmF1bHRGaWx0ZXIsXG4gICAgICBleHRlbnQgPSBkZWZhdWx0RXh0ZW50LFxuICAgICAgY29uc3RyYWluID0gZGVmYXVsdENvbnN0cmFpbixcbiAgICAgIHdoZWVsRGVsdGEgPSBkZWZhdWx0V2hlZWxEZWx0YSxcbiAgICAgIHRvdWNoYWJsZSA9IGRlZmF1bHRUb3VjaGFibGUsXG4gICAgICBzY2FsZUV4dGVudCA9IFswLCBJbmZpbml0eV0sXG4gICAgICB0cmFuc2xhdGVFeHRlbnQgPSBbWy1JbmZpbml0eSwgLUluZmluaXR5XSwgW0luZmluaXR5LCBJbmZpbml0eV1dLFxuICAgICAgZHVyYXRpb24gPSAyNTAsXG4gICAgICBpbnRlcnBvbGF0ZSA9IGludGVycG9sYXRlWm9vbSxcbiAgICAgIGxpc3RlbmVycyA9IGRpc3BhdGNoKFwic3RhcnRcIiwgXCJ6b29tXCIsIFwiZW5kXCIpLFxuICAgICAgdG91Y2hzdGFydGluZyxcbiAgICAgIHRvdWNoZmlyc3QsXG4gICAgICB0b3VjaGVuZGluZyxcbiAgICAgIHRvdWNoRGVsYXkgPSA1MDAsXG4gICAgICB3aGVlbERlbGF5ID0gMTUwLFxuICAgICAgY2xpY2tEaXN0YW5jZTIgPSAwLFxuICAgICAgdGFwRGlzdGFuY2UgPSAxMDtcblxuICBmdW5jdGlvbiB6b29tKHNlbGVjdGlvbikge1xuICAgIHNlbGVjdGlvblxuICAgICAgICAucHJvcGVydHkoXCJfX3pvb21cIiwgZGVmYXVsdFRyYW5zZm9ybSlcbiAgICAgICAgLm9uKFwid2hlZWwuem9vbVwiLCB3aGVlbGVkLCB7cGFzc2l2ZTogZmFsc2V9KVxuICAgICAgICAub24oXCJtb3VzZWRvd24uem9vbVwiLCBtb3VzZWRvd25lZClcbiAgICAgICAgLm9uKFwiZGJsY2xpY2suem9vbVwiLCBkYmxjbGlja2VkKVxuICAgICAgLmZpbHRlcih0b3VjaGFibGUpXG4gICAgICAgIC5vbihcInRvdWNoc3RhcnQuem9vbVwiLCB0b3VjaHN0YXJ0ZWQpXG4gICAgICAgIC5vbihcInRvdWNobW92ZS56b29tXCIsIHRvdWNobW92ZWQpXG4gICAgICAgIC5vbihcInRvdWNoZW5kLnpvb20gdG91Y2hjYW5jZWwuem9vbVwiLCB0b3VjaGVuZGVkKVxuICAgICAgICAuc3R5bGUoXCItd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3JcIiwgXCJyZ2JhKDAsMCwwLDApXCIpO1xuICB9XG5cbiAgem9vbS50cmFuc2Zvcm0gPSBmdW5jdGlvbihjb2xsZWN0aW9uLCB0cmFuc2Zvcm0sIHBvaW50LCBldmVudCkge1xuICAgIHZhciBzZWxlY3Rpb24gPSBjb2xsZWN0aW9uLnNlbGVjdGlvbiA/IGNvbGxlY3Rpb24uc2VsZWN0aW9uKCkgOiBjb2xsZWN0aW9uO1xuICAgIHNlbGVjdGlvbi5wcm9wZXJ0eShcIl9fem9vbVwiLCBkZWZhdWx0VHJhbnNmb3JtKTtcbiAgICBpZiAoY29sbGVjdGlvbiAhPT0gc2VsZWN0aW9uKSB7XG4gICAgICBzY2hlZHVsZShjb2xsZWN0aW9uLCB0cmFuc2Zvcm0sIHBvaW50LCBldmVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlbGVjdGlvbi5pbnRlcnJ1cHQoKS5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICBnZXN0dXJlKHRoaXMsIGFyZ3VtZW50cylcbiAgICAgICAgICAuZXZlbnQoZXZlbnQpXG4gICAgICAgICAgLnN0YXJ0KClcbiAgICAgICAgICAuem9vbShudWxsLCB0eXBlb2YgdHJhbnNmb3JtID09PSBcImZ1bmN0aW9uXCIgPyB0cmFuc2Zvcm0uYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IHRyYW5zZm9ybSlcbiAgICAgICAgICAuZW5kKCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgem9vbS5zY2FsZUJ5ID0gZnVuY3Rpb24oc2VsZWN0aW9uLCBrLCBwLCBldmVudCkge1xuICAgIHpvb20uc2NhbGVUbyhzZWxlY3Rpb24sIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGswID0gdGhpcy5fX3pvb20uayxcbiAgICAgICAgICBrMSA9IHR5cGVvZiBrID09PSBcImZ1bmN0aW9uXCIgPyBrLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgOiBrO1xuICAgICAgcmV0dXJuIGswICogazE7XG4gICAgfSwgcCwgZXZlbnQpO1xuICB9O1xuXG4gIHpvb20uc2NhbGVUbyA9IGZ1bmN0aW9uKHNlbGVjdGlvbiwgaywgcCwgZXZlbnQpIHtcbiAgICB6b29tLnRyYW5zZm9ybShzZWxlY3Rpb24sIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGUgPSBleHRlbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSxcbiAgICAgICAgICB0MCA9IHRoaXMuX196b29tLFxuICAgICAgICAgIHAwID0gcCA9PSBudWxsID8gY2VudHJvaWQoZSkgOiB0eXBlb2YgcCA9PT0gXCJmdW5jdGlvblwiID8gcC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogcCxcbiAgICAgICAgICBwMSA9IHQwLmludmVydChwMCksXG4gICAgICAgICAgazEgPSB0eXBlb2YgayA9PT0gXCJmdW5jdGlvblwiID8gay5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogaztcbiAgICAgIHJldHVybiBjb25zdHJhaW4odHJhbnNsYXRlKHNjYWxlKHQwLCBrMSksIHAwLCBwMSksIGUsIHRyYW5zbGF0ZUV4dGVudCk7XG4gICAgfSwgcCwgZXZlbnQpO1xuICB9O1xuXG4gIHpvb20udHJhbnNsYXRlQnkgPSBmdW5jdGlvbihzZWxlY3Rpb24sIHgsIHksIGV2ZW50KSB7XG4gICAgem9vbS50cmFuc2Zvcm0oc2VsZWN0aW9uLCBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBjb25zdHJhaW4odGhpcy5fX3pvb20udHJhbnNsYXRlKFxuICAgICAgICB0eXBlb2YgeCA9PT0gXCJmdW5jdGlvblwiID8geC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogeCxcbiAgICAgICAgdHlwZW9mIHkgPT09IFwiZnVuY3Rpb25cIiA/IHkuYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IHlcbiAgICAgICksIGV4dGVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpLCB0cmFuc2xhdGVFeHRlbnQpO1xuICAgIH0sIG51bGwsIGV2ZW50KTtcbiAgfTtcblxuICB6b29tLnRyYW5zbGF0ZVRvID0gZnVuY3Rpb24oc2VsZWN0aW9uLCB4LCB5LCBwLCBldmVudCkge1xuICAgIHpvb20udHJhbnNmb3JtKHNlbGVjdGlvbiwgZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgZSA9IGV4dGVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpLFxuICAgICAgICAgIHQgPSB0aGlzLl9fem9vbSxcbiAgICAgICAgICBwMCA9IHAgPT0gbnVsbCA/IGNlbnRyb2lkKGUpIDogdHlwZW9mIHAgPT09IFwiZnVuY3Rpb25cIiA/IHAuYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IHA7XG4gICAgICByZXR1cm4gY29uc3RyYWluKGlkZW50aXR5LnRyYW5zbGF0ZShwMFswXSwgcDBbMV0pLnNjYWxlKHQuaykudHJhbnNsYXRlKFxuICAgICAgICB0eXBlb2YgeCA9PT0gXCJmdW5jdGlvblwiID8gLXguYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IC14LFxuICAgICAgICB0eXBlb2YgeSA9PT0gXCJmdW5jdGlvblwiID8gLXkuYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IC15XG4gICAgICApLCBlLCB0cmFuc2xhdGVFeHRlbnQpO1xuICAgIH0sIHAsIGV2ZW50KTtcbiAgfTtcblxuICBmdW5jdGlvbiBzY2FsZSh0cmFuc2Zvcm0sIGspIHtcbiAgICBrID0gTWF0aC5tYXgoc2NhbGVFeHRlbnRbMF0sIE1hdGgubWluKHNjYWxlRXh0ZW50WzFdLCBrKSk7XG4gICAgcmV0dXJuIGsgPT09IHRyYW5zZm9ybS5rID8gdHJhbnNmb3JtIDogbmV3IFRyYW5zZm9ybShrLCB0cmFuc2Zvcm0ueCwgdHJhbnNmb3JtLnkpO1xuICB9XG5cbiAgZnVuY3Rpb24gdHJhbnNsYXRlKHRyYW5zZm9ybSwgcDAsIHAxKSB7XG4gICAgdmFyIHggPSBwMFswXSAtIHAxWzBdICogdHJhbnNmb3JtLmssIHkgPSBwMFsxXSAtIHAxWzFdICogdHJhbnNmb3JtLms7XG4gICAgcmV0dXJuIHggPT09IHRyYW5zZm9ybS54ICYmIHkgPT09IHRyYW5zZm9ybS55ID8gdHJhbnNmb3JtIDogbmV3IFRyYW5zZm9ybSh0cmFuc2Zvcm0uaywgeCwgeSk7XG4gIH1cblxuICBmdW5jdGlvbiBjZW50cm9pZChleHRlbnQpIHtcbiAgICByZXR1cm4gWygrZXh0ZW50WzBdWzBdICsgK2V4dGVudFsxXVswXSkgLyAyLCAoK2V4dGVudFswXVsxXSArICtleHRlbnRbMV1bMV0pIC8gMl07XG4gIH1cblxuICBmdW5jdGlvbiBzY2hlZHVsZSh0cmFuc2l0aW9uLCB0cmFuc2Zvcm0sIHBvaW50LCBldmVudCkge1xuICAgIHRyYW5zaXRpb25cbiAgICAgICAgLm9uKFwic3RhcnQuem9vbVwiLCBmdW5jdGlvbigpIHsgZ2VzdHVyZSh0aGlzLCBhcmd1bWVudHMpLmV2ZW50KGV2ZW50KS5zdGFydCgpOyB9KVxuICAgICAgICAub24oXCJpbnRlcnJ1cHQuem9vbSBlbmQuem9vbVwiLCBmdW5jdGlvbigpIHsgZ2VzdHVyZSh0aGlzLCBhcmd1bWVudHMpLmV2ZW50KGV2ZW50KS5lbmQoKTsgfSlcbiAgICAgICAgLnR3ZWVuKFwiem9vbVwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgdGhhdCA9IHRoaXMsXG4gICAgICAgICAgICAgIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgICAgICAgIGcgPSBnZXN0dXJlKHRoYXQsIGFyZ3MpLmV2ZW50KGV2ZW50KSxcbiAgICAgICAgICAgICAgZSA9IGV4dGVudC5hcHBseSh0aGF0LCBhcmdzKSxcbiAgICAgICAgICAgICAgcCA9IHBvaW50ID09IG51bGwgPyBjZW50cm9pZChlKSA6IHR5cGVvZiBwb2ludCA9PT0gXCJmdW5jdGlvblwiID8gcG9pbnQuYXBwbHkodGhhdCwgYXJncykgOiBwb2ludCxcbiAgICAgICAgICAgICAgdyA9IE1hdGgubWF4KGVbMV1bMF0gLSBlWzBdWzBdLCBlWzFdWzFdIC0gZVswXVsxXSksXG4gICAgICAgICAgICAgIGEgPSB0aGF0Ll9fem9vbSxcbiAgICAgICAgICAgICAgYiA9IHR5cGVvZiB0cmFuc2Zvcm0gPT09IFwiZnVuY3Rpb25cIiA/IHRyYW5zZm9ybS5hcHBseSh0aGF0LCBhcmdzKSA6IHRyYW5zZm9ybSxcbiAgICAgICAgICAgICAgaSA9IGludGVycG9sYXRlKGEuaW52ZXJ0KHApLmNvbmNhdCh3IC8gYS5rKSwgYi5pbnZlcnQocCkuY29uY2F0KHcgLyBiLmspKTtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgaWYgKHQgPT09IDEpIHQgPSBiOyAvLyBBdm9pZCByb3VuZGluZyBlcnJvciBvbiBlbmQuXG4gICAgICAgICAgICBlbHNlIHsgdmFyIGwgPSBpKHQpLCBrID0gdyAvIGxbMl07IHQgPSBuZXcgVHJhbnNmb3JtKGssIHBbMF0gLSBsWzBdICogaywgcFsxXSAtIGxbMV0gKiBrKTsgfVxuICAgICAgICAgICAgZy56b29tKG51bGwsIHQpO1xuICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2VzdHVyZSh0aGF0LCBhcmdzLCBjbGVhbikge1xuICAgIHJldHVybiAoIWNsZWFuICYmIHRoYXQuX196b29taW5nKSB8fCBuZXcgR2VzdHVyZSh0aGF0LCBhcmdzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIEdlc3R1cmUodGhhdCwgYXJncykge1xuICAgIHRoaXMudGhhdCA9IHRoYXQ7XG4gICAgdGhpcy5hcmdzID0gYXJncztcbiAgICB0aGlzLmFjdGl2ZSA9IDA7XG4gICAgdGhpcy5zb3VyY2VFdmVudCA9IG51bGw7XG4gICAgdGhpcy5leHRlbnQgPSBleHRlbnQuYXBwbHkodGhhdCwgYXJncyk7XG4gICAgdGhpcy50YXBzID0gMDtcbiAgfVxuXG4gIEdlc3R1cmUucHJvdG90eXBlID0ge1xuICAgIGV2ZW50OiBmdW5jdGlvbihldmVudCkge1xuICAgICAgaWYgKGV2ZW50KSB0aGlzLnNvdXJjZUV2ZW50ID0gZXZlbnQ7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIHN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICgrK3RoaXMuYWN0aXZlID09PSAxKSB7XG4gICAgICAgIHRoaXMudGhhdC5fX3pvb21pbmcgPSB0aGlzO1xuICAgICAgICB0aGlzLmVtaXQoXCJzdGFydFwiKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgem9vbTogZnVuY3Rpb24oa2V5LCB0cmFuc2Zvcm0pIHtcbiAgICAgIGlmICh0aGlzLm1vdXNlICYmIGtleSAhPT0gXCJtb3VzZVwiKSB0aGlzLm1vdXNlWzFdID0gdHJhbnNmb3JtLmludmVydCh0aGlzLm1vdXNlWzBdKTtcbiAgICAgIGlmICh0aGlzLnRvdWNoMCAmJiBrZXkgIT09IFwidG91Y2hcIikgdGhpcy50b3VjaDBbMV0gPSB0cmFuc2Zvcm0uaW52ZXJ0KHRoaXMudG91Y2gwWzBdKTtcbiAgICAgIGlmICh0aGlzLnRvdWNoMSAmJiBrZXkgIT09IFwidG91Y2hcIikgdGhpcy50b3VjaDFbMV0gPSB0cmFuc2Zvcm0uaW52ZXJ0KHRoaXMudG91Y2gxWzBdKTtcbiAgICAgIHRoaXMudGhhdC5fX3pvb20gPSB0cmFuc2Zvcm07XG4gICAgICB0aGlzLmVtaXQoXCJ6b29tXCIpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBlbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKC0tdGhpcy5hY3RpdmUgPT09IDApIHtcbiAgICAgICAgZGVsZXRlIHRoaXMudGhhdC5fX3pvb21pbmc7XG4gICAgICAgIHRoaXMuZW1pdChcImVuZFwiKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgZW1pdDogZnVuY3Rpb24odHlwZSkge1xuICAgICAgdmFyIGQgPSBzZWxlY3QodGhpcy50aGF0KS5kYXR1bSgpO1xuICAgICAgbGlzdGVuZXJzLmNhbGwoXG4gICAgICAgIHR5cGUsXG4gICAgICAgIHRoaXMudGhhdCxcbiAgICAgICAgbmV3IFpvb21FdmVudCh0eXBlLCB7XG4gICAgICAgICAgc291cmNlRXZlbnQ6IHRoaXMuc291cmNlRXZlbnQsXG4gICAgICAgICAgdGFyZ2V0OiB6b29tLFxuICAgICAgICAgIHR5cGUsXG4gICAgICAgICAgdHJhbnNmb3JtOiB0aGlzLnRoYXQuX196b29tLFxuICAgICAgICAgIGRpc3BhdGNoOiBsaXN0ZW5lcnNcbiAgICAgICAgfSksXG4gICAgICAgIGRcbiAgICAgICk7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIHdoZWVsZWQoZXZlbnQsIC4uLmFyZ3MpIHtcbiAgICBpZiAoIWZpbHRlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSByZXR1cm47XG4gICAgdmFyIGcgPSBnZXN0dXJlKHRoaXMsIGFyZ3MpLmV2ZW50KGV2ZW50KSxcbiAgICAgICAgdCA9IHRoaXMuX196b29tLFxuICAgICAgICBrID0gTWF0aC5tYXgoc2NhbGVFeHRlbnRbMF0sIE1hdGgubWluKHNjYWxlRXh0ZW50WzFdLCB0LmsgKiBNYXRoLnBvdygyLCB3aGVlbERlbHRhLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpKSksXG4gICAgICAgIHAgPSBwb2ludGVyKGV2ZW50KTtcblxuICAgIC8vIElmIHRoZSBtb3VzZSBpcyBpbiB0aGUgc2FtZSBsb2NhdGlvbiBhcyBiZWZvcmUsIHJldXNlIGl0LlxuICAgIC8vIElmIHRoZXJlIHdlcmUgcmVjZW50IHdoZWVsIGV2ZW50cywgcmVzZXQgdGhlIHdoZWVsIGlkbGUgdGltZW91dC5cbiAgICBpZiAoZy53aGVlbCkge1xuICAgICAgaWYgKGcubW91c2VbMF1bMF0gIT09IHBbMF0gfHwgZy5tb3VzZVswXVsxXSAhPT0gcFsxXSkge1xuICAgICAgICBnLm1vdXNlWzFdID0gdC5pbnZlcnQoZy5tb3VzZVswXSA9IHApO1xuICAgICAgfVxuICAgICAgY2xlYXJUaW1lb3V0KGcud2hlZWwpO1xuICAgIH1cblxuICAgIC8vIElmIHRoaXMgd2hlZWwgZXZlbnQgd29uXHUyMDE5dCB0cmlnZ2VyIGEgdHJhbnNmb3JtIGNoYW5nZSwgaWdub3JlIGl0LlxuICAgIGVsc2UgaWYgKHQuayA9PT0gaykgcmV0dXJuO1xuXG4gICAgLy8gT3RoZXJ3aXNlLCBjYXB0dXJlIHRoZSBtb3VzZSBwb2ludCBhbmQgbG9jYXRpb24gYXQgdGhlIHN0YXJ0LlxuICAgIGVsc2Uge1xuICAgICAgZy5tb3VzZSA9IFtwLCB0LmludmVydChwKV07XG4gICAgICBpbnRlcnJ1cHQodGhpcyk7XG4gICAgICBnLnN0YXJ0KCk7XG4gICAgfVxuXG4gICAgbm9ldmVudChldmVudCk7XG4gICAgZy53aGVlbCA9IHNldFRpbWVvdXQod2hlZWxpZGxlZCwgd2hlZWxEZWxheSk7XG4gICAgZy56b29tKFwibW91c2VcIiwgY29uc3RyYWluKHRyYW5zbGF0ZShzY2FsZSh0LCBrKSwgZy5tb3VzZVswXSwgZy5tb3VzZVsxXSksIGcuZXh0ZW50LCB0cmFuc2xhdGVFeHRlbnQpKTtcblxuICAgIGZ1bmN0aW9uIHdoZWVsaWRsZWQoKSB7XG4gICAgICBnLndoZWVsID0gbnVsbDtcbiAgICAgIGcuZW5kKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gbW91c2Vkb3duZWQoZXZlbnQsIC4uLmFyZ3MpIHtcbiAgICBpZiAodG91Y2hlbmRpbmcgfHwgIWZpbHRlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSByZXR1cm47XG4gICAgdmFyIGN1cnJlbnRUYXJnZXQgPSBldmVudC5jdXJyZW50VGFyZ2V0LFxuICAgICAgICBnID0gZ2VzdHVyZSh0aGlzLCBhcmdzLCB0cnVlKS5ldmVudChldmVudCksXG4gICAgICAgIHYgPSBzZWxlY3QoZXZlbnQudmlldykub24oXCJtb3VzZW1vdmUuem9vbVwiLCBtb3VzZW1vdmVkLCB0cnVlKS5vbihcIm1vdXNldXAuem9vbVwiLCBtb3VzZXVwcGVkLCB0cnVlKSxcbiAgICAgICAgcCA9IHBvaW50ZXIoZXZlbnQsIGN1cnJlbnRUYXJnZXQpLFxuICAgICAgICB4MCA9IGV2ZW50LmNsaWVudFgsXG4gICAgICAgIHkwID0gZXZlbnQuY2xpZW50WTtcblxuICAgIGRyYWdEaXNhYmxlKGV2ZW50LnZpZXcpO1xuICAgIG5vcHJvcGFnYXRpb24oZXZlbnQpO1xuICAgIGcubW91c2UgPSBbcCwgdGhpcy5fX3pvb20uaW52ZXJ0KHApXTtcbiAgICBpbnRlcnJ1cHQodGhpcyk7XG4gICAgZy5zdGFydCgpO1xuXG4gICAgZnVuY3Rpb24gbW91c2Vtb3ZlZChldmVudCkge1xuICAgICAgbm9ldmVudChldmVudCk7XG4gICAgICBpZiAoIWcubW92ZWQpIHtcbiAgICAgICAgdmFyIGR4ID0gZXZlbnQuY2xpZW50WCAtIHgwLCBkeSA9IGV2ZW50LmNsaWVudFkgLSB5MDtcbiAgICAgICAgZy5tb3ZlZCA9IGR4ICogZHggKyBkeSAqIGR5ID4gY2xpY2tEaXN0YW5jZTI7XG4gICAgICB9XG4gICAgICBnLmV2ZW50KGV2ZW50KVxuICAgICAgIC56b29tKFwibW91c2VcIiwgY29uc3RyYWluKHRyYW5zbGF0ZShnLnRoYXQuX196b29tLCBnLm1vdXNlWzBdID0gcG9pbnRlcihldmVudCwgY3VycmVudFRhcmdldCksIGcubW91c2VbMV0pLCBnLmV4dGVudCwgdHJhbnNsYXRlRXh0ZW50KSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbW91c2V1cHBlZChldmVudCkge1xuICAgICAgdi5vbihcIm1vdXNlbW92ZS56b29tIG1vdXNldXAuem9vbVwiLCBudWxsKTtcbiAgICAgIGRyYWdFbmFibGUoZXZlbnQudmlldywgZy5tb3ZlZCk7XG4gICAgICBub2V2ZW50KGV2ZW50KTtcbiAgICAgIGcuZXZlbnQoZXZlbnQpLmVuZCgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGRibGNsaWNrZWQoZXZlbnQsIC4uLmFyZ3MpIHtcbiAgICBpZiAoIWZpbHRlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSByZXR1cm47XG4gICAgdmFyIHQwID0gdGhpcy5fX3pvb20sXG4gICAgICAgIHAwID0gcG9pbnRlcihldmVudC5jaGFuZ2VkVG91Y2hlcyA/IGV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdIDogZXZlbnQsIHRoaXMpLFxuICAgICAgICBwMSA9IHQwLmludmVydChwMCksXG4gICAgICAgIGsxID0gdDAuayAqIChldmVudC5zaGlmdEtleSA/IDAuNSA6IDIpLFxuICAgICAgICB0MSA9IGNvbnN0cmFpbih0cmFuc2xhdGUoc2NhbGUodDAsIGsxKSwgcDAsIHAxKSwgZXh0ZW50LmFwcGx5KHRoaXMsIGFyZ3MpLCB0cmFuc2xhdGVFeHRlbnQpO1xuXG4gICAgbm9ldmVudChldmVudCk7XG4gICAgaWYgKGR1cmF0aW9uID4gMCkgc2VsZWN0KHRoaXMpLnRyYW5zaXRpb24oKS5kdXJhdGlvbihkdXJhdGlvbikuY2FsbChzY2hlZHVsZSwgdDEsIHAwLCBldmVudCk7XG4gICAgZWxzZSBzZWxlY3QodGhpcykuY2FsbCh6b29tLnRyYW5zZm9ybSwgdDEsIHAwLCBldmVudCk7XG4gIH1cblxuICBmdW5jdGlvbiB0b3VjaHN0YXJ0ZWQoZXZlbnQsIC4uLmFyZ3MpIHtcbiAgICBpZiAoIWZpbHRlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSByZXR1cm47XG4gICAgdmFyIHRvdWNoZXMgPSBldmVudC50b3VjaGVzLFxuICAgICAgICBuID0gdG91Y2hlcy5sZW5ndGgsXG4gICAgICAgIGcgPSBnZXN0dXJlKHRoaXMsIGFyZ3MsIGV2ZW50LmNoYW5nZWRUb3VjaGVzLmxlbmd0aCA9PT0gbikuZXZlbnQoZXZlbnQpLFxuICAgICAgICBzdGFydGVkLCBpLCB0LCBwO1xuXG4gICAgbm9wcm9wYWdhdGlvbihldmVudCk7XG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgdCA9IHRvdWNoZXNbaV0sIHAgPSBwb2ludGVyKHQsIHRoaXMpO1xuICAgICAgcCA9IFtwLCB0aGlzLl9fem9vbS5pbnZlcnQocCksIHQuaWRlbnRpZmllcl07XG4gICAgICBpZiAoIWcudG91Y2gwKSBnLnRvdWNoMCA9IHAsIHN0YXJ0ZWQgPSB0cnVlLCBnLnRhcHMgPSAxICsgISF0b3VjaHN0YXJ0aW5nO1xuICAgICAgZWxzZSBpZiAoIWcudG91Y2gxICYmIGcudG91Y2gwWzJdICE9PSBwWzJdKSBnLnRvdWNoMSA9IHAsIGcudGFwcyA9IDA7XG4gICAgfVxuXG4gICAgaWYgKHRvdWNoc3RhcnRpbmcpIHRvdWNoc3RhcnRpbmcgPSBjbGVhclRpbWVvdXQodG91Y2hzdGFydGluZyk7XG5cbiAgICBpZiAoc3RhcnRlZCkge1xuICAgICAgaWYgKGcudGFwcyA8IDIpIHRvdWNoZmlyc3QgPSBwWzBdLCB0b3VjaHN0YXJ0aW5nID0gc2V0VGltZW91dChmdW5jdGlvbigpIHsgdG91Y2hzdGFydGluZyA9IG51bGw7IH0sIHRvdWNoRGVsYXkpO1xuICAgICAgaW50ZXJydXB0KHRoaXMpO1xuICAgICAgZy5zdGFydCgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHRvdWNobW92ZWQoZXZlbnQsIC4uLmFyZ3MpIHtcbiAgICBpZiAoIXRoaXMuX196b29taW5nKSByZXR1cm47XG4gICAgdmFyIGcgPSBnZXN0dXJlKHRoaXMsIGFyZ3MpLmV2ZW50KGV2ZW50KSxcbiAgICAgICAgdG91Y2hlcyA9IGV2ZW50LmNoYW5nZWRUb3VjaGVzLFxuICAgICAgICBuID0gdG91Y2hlcy5sZW5ndGgsIGksIHQsIHAsIGw7XG5cbiAgICBub2V2ZW50KGV2ZW50KTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICB0ID0gdG91Y2hlc1tpXSwgcCA9IHBvaW50ZXIodCwgdGhpcyk7XG4gICAgICBpZiAoZy50b3VjaDAgJiYgZy50b3VjaDBbMl0gPT09IHQuaWRlbnRpZmllcikgZy50b3VjaDBbMF0gPSBwO1xuICAgICAgZWxzZSBpZiAoZy50b3VjaDEgJiYgZy50b3VjaDFbMl0gPT09IHQuaWRlbnRpZmllcikgZy50b3VjaDFbMF0gPSBwO1xuICAgIH1cbiAgICB0ID0gZy50aGF0Ll9fem9vbTtcbiAgICBpZiAoZy50b3VjaDEpIHtcbiAgICAgIHZhciBwMCA9IGcudG91Y2gwWzBdLCBsMCA9IGcudG91Y2gwWzFdLFxuICAgICAgICAgIHAxID0gZy50b3VjaDFbMF0sIGwxID0gZy50b3VjaDFbMV0sXG4gICAgICAgICAgZHAgPSAoZHAgPSBwMVswXSAtIHAwWzBdKSAqIGRwICsgKGRwID0gcDFbMV0gLSBwMFsxXSkgKiBkcCxcbiAgICAgICAgICBkbCA9IChkbCA9IGwxWzBdIC0gbDBbMF0pICogZGwgKyAoZGwgPSBsMVsxXSAtIGwwWzFdKSAqIGRsO1xuICAgICAgdCA9IHNjYWxlKHQsIE1hdGguc3FydChkcCAvIGRsKSk7XG4gICAgICBwID0gWyhwMFswXSArIHAxWzBdKSAvIDIsIChwMFsxXSArIHAxWzFdKSAvIDJdO1xuICAgICAgbCA9IFsobDBbMF0gKyBsMVswXSkgLyAyLCAobDBbMV0gKyBsMVsxXSkgLyAyXTtcbiAgICB9XG4gICAgZWxzZSBpZiAoZy50b3VjaDApIHAgPSBnLnRvdWNoMFswXSwgbCA9IGcudG91Y2gwWzFdO1xuICAgIGVsc2UgcmV0dXJuO1xuXG4gICAgZy56b29tKFwidG91Y2hcIiwgY29uc3RyYWluKHRyYW5zbGF0ZSh0LCBwLCBsKSwgZy5leHRlbnQsIHRyYW5zbGF0ZUV4dGVudCkpO1xuICB9XG5cbiAgZnVuY3Rpb24gdG91Y2hlbmRlZChldmVudCwgLi4uYXJncykge1xuICAgIGlmICghdGhpcy5fX3pvb21pbmcpIHJldHVybjtcbiAgICB2YXIgZyA9IGdlc3R1cmUodGhpcywgYXJncykuZXZlbnQoZXZlbnQpLFxuICAgICAgICB0b3VjaGVzID0gZXZlbnQuY2hhbmdlZFRvdWNoZXMsXG4gICAgICAgIG4gPSB0b3VjaGVzLmxlbmd0aCwgaSwgdDtcblxuICAgIG5vcHJvcGFnYXRpb24oZXZlbnQpO1xuICAgIGlmICh0b3VjaGVuZGluZykgY2xlYXJUaW1lb3V0KHRvdWNoZW5kaW5nKTtcbiAgICB0b3VjaGVuZGluZyA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IHRvdWNoZW5kaW5nID0gbnVsbDsgfSwgdG91Y2hEZWxheSk7XG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgdCA9IHRvdWNoZXNbaV07XG4gICAgICBpZiAoZy50b3VjaDAgJiYgZy50b3VjaDBbMl0gPT09IHQuaWRlbnRpZmllcikgZGVsZXRlIGcudG91Y2gwO1xuICAgICAgZWxzZSBpZiAoZy50b3VjaDEgJiYgZy50b3VjaDFbMl0gPT09IHQuaWRlbnRpZmllcikgZGVsZXRlIGcudG91Y2gxO1xuICAgIH1cbiAgICBpZiAoZy50b3VjaDEgJiYgIWcudG91Y2gwKSBnLnRvdWNoMCA9IGcudG91Y2gxLCBkZWxldGUgZy50b3VjaDE7XG4gICAgaWYgKGcudG91Y2gwKSBnLnRvdWNoMFsxXSA9IHRoaXMuX196b29tLmludmVydChnLnRvdWNoMFswXSk7XG4gICAgZWxzZSB7XG4gICAgICBnLmVuZCgpO1xuICAgICAgLy8gSWYgdGhpcyB3YXMgYSBkYmx0YXAsIHJlcm91dGUgdG8gdGhlIChvcHRpb25hbCkgZGJsY2xpY2suem9vbSBoYW5kbGVyLlxuICAgICAgaWYgKGcudGFwcyA9PT0gMikge1xuICAgICAgICB0ID0gcG9pbnRlcih0LCB0aGlzKTtcbiAgICAgICAgaWYgKE1hdGguaHlwb3QodG91Y2hmaXJzdFswXSAtIHRbMF0sIHRvdWNoZmlyc3RbMV0gLSB0WzFdKSA8IHRhcERpc3RhbmNlKSB7XG4gICAgICAgICAgdmFyIHAgPSBzZWxlY3QodGhpcykub24oXCJkYmxjbGljay56b29tXCIpO1xuICAgICAgICAgIGlmIChwKSBwLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB6b29tLndoZWVsRGVsdGEgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAod2hlZWxEZWx0YSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCB6b29tKSA6IHdoZWVsRGVsdGE7XG4gIH07XG5cbiAgem9vbS5maWx0ZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZmlsdGVyID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCghIV8pLCB6b29tKSA6IGZpbHRlcjtcbiAgfTtcblxuICB6b29tLnRvdWNoYWJsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0b3VjaGFibGUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCEhXyksIHpvb20pIDogdG91Y2hhYmxlO1xuICB9O1xuXG4gIHpvb20uZXh0ZW50ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGV4dGVudCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoW1srX1swXVswXSwgK19bMF1bMV1dLCBbK19bMV1bMF0sICtfWzFdWzFdXV0pLCB6b29tKSA6IGV4dGVudDtcbiAgfTtcblxuICB6b29tLnNjYWxlRXh0ZW50ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHNjYWxlRXh0ZW50WzBdID0gK19bMF0sIHNjYWxlRXh0ZW50WzFdID0gK19bMV0sIHpvb20pIDogW3NjYWxlRXh0ZW50WzBdLCBzY2FsZUV4dGVudFsxXV07XG4gIH07XG5cbiAgem9vbS50cmFuc2xhdGVFeHRlbnQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodHJhbnNsYXRlRXh0ZW50WzBdWzBdID0gK19bMF1bMF0sIHRyYW5zbGF0ZUV4dGVudFsxXVswXSA9ICtfWzFdWzBdLCB0cmFuc2xhdGVFeHRlbnRbMF1bMV0gPSArX1swXVsxXSwgdHJhbnNsYXRlRXh0ZW50WzFdWzFdID0gK19bMV1bMV0sIHpvb20pIDogW1t0cmFuc2xhdGVFeHRlbnRbMF1bMF0sIHRyYW5zbGF0ZUV4dGVudFswXVsxXV0sIFt0cmFuc2xhdGVFeHRlbnRbMV1bMF0sIHRyYW5zbGF0ZUV4dGVudFsxXVsxXV1dO1xuICB9O1xuXG4gIHpvb20uY29uc3RyYWluID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGNvbnN0cmFpbiA9IF8sIHpvb20pIDogY29uc3RyYWluO1xuICB9O1xuXG4gIHpvb20uZHVyYXRpb24gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZHVyYXRpb24gPSArXywgem9vbSkgOiBkdXJhdGlvbjtcbiAgfTtcblxuICB6b29tLmludGVycG9sYXRlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGludGVycG9sYXRlID0gXywgem9vbSkgOiBpbnRlcnBvbGF0ZTtcbiAgfTtcblxuICB6b29tLm9uID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZhbHVlID0gbGlzdGVuZXJzLm9uLmFwcGx5KGxpc3RlbmVycywgYXJndW1lbnRzKTtcbiAgICByZXR1cm4gdmFsdWUgPT09IGxpc3RlbmVycyA/IHpvb20gOiB2YWx1ZTtcbiAgfTtcblxuICB6b29tLmNsaWNrRGlzdGFuY2UgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY2xpY2tEaXN0YW5jZTIgPSAoXyA9ICtfKSAqIF8sIHpvb20pIDogTWF0aC5zcXJ0KGNsaWNrRGlzdGFuY2UyKTtcbiAgfTtcblxuICB6b29tLnRhcERpc3RhbmNlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRhcERpc3RhbmNlID0gK18sIHpvb20pIDogdGFwRGlzdGFuY2U7XG4gIH07XG5cbiAgcmV0dXJuIHpvb207XG59XG4iLCAiaW1wb3J0IHdpa2ksIHsgcmVsYXRlZFJlc3VsdCwgd2lraVN1bW1hcnkgfSBmcm9tIFwid2lraXBlZGlhXCI7XG4vLyBUT0RPOiBnZXQgcmlkIG9mIGB3aWtpcGVkaWFgIHBrZ1xuXG5cbi8vIGh0dHBzOi8vZGV2LnRvL3RpbWh1YW5nL2Etc2ltcGxlLXdheS10by1kZXRlY3QtaWYtYnJvd3Nlci1pcy1vbi1hLW1vYmlsZS1kZXZpY2Utd2l0aC1qYXZhc2NyaXB0LTQ0ajNcbmV4cG9ydCBsZXQgaXNNb2JpbGUgPSBmYWxzZTtcbmlmIChcbiAgL0FuZHJvaWR8d2ViT1N8aVBob25lfGlQYWR8aVBvZHxCbGFja0JlcnJ5fElFTW9iaWxlfE9wZXJhIE1pbmkvaS50ZXN0KFxuICAgIG5hdmlnYXRvci51c2VyQWdlbnRcbiAgKVxuKSB7XG4gIGlzTW9iaWxlID0gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gX19taW5pbWl6ZVVybCh1cmw6IHN0cmluZykge1xuICByZXR1cm4gdXJsLnJlcGxhY2VBbGwoL1xcblxccyovZywgXCJcIik7XG59XG5cbmxldCByZXN0QXBpTGFuZyA9ICdlbidcblxuZnVuY3Rpb24gUmVzdEFwaUJhc2UoKSB7XG4gIHJldHVybiBgaHR0cHM6Ly8ke3Jlc3RBcGlMYW5nfS53aWtpcGVkaWEub3JnL2FwaS9yZXN0X3YxYFxufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cbi8vICAgICAgICAgICAgICAgICAgICAgICAgQXV0byBjb21wbGV0aW9uICAgICAgICAgICAgICAgICAgICAgIC8vXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS8vXG5cbi8qKiBXcmFwcyBgd2lraS5zZWFyY2goKWAgbWV0aG9kICovXG4vLyBhc3luYyBmdW5jdGlvbiBzdWdnZXN0KHF1ZXJ5OiBzdHJpbmcpIHtcbi8vICAgY29uc3QgcmVzU2VhcmNoID0gYXdhaXQgd2lraS5zZWFyY2gocXVlcnksIHtcbi8vICAgICBsaW1pdDogMTAsXG4vLyAgICAgc3VnZ2VzdGlvbjogdHJ1ZSxcbi8vICAgfSk7XG4vLyAgIGNvbnNvbGUubG9nKFwicmVzU2VhcmNoOlwiLCByZXNTZWFyY2gpO1xuXG4vLyAgIC8vIGNvbnN0IHJlc1N1Z2dlc3QgPSBhd2FpdCB3aWtpLnN1Z2dlc3QocXVlcnkpO1xuLy8gICAvLyBjb25zb2xlLmxvZyhcInJlc1N1Z2dlc3Q6XCIsIHJlc1N1Z2dlc3QpO1xuXG4vLyAgIHJldHVybiByZXNTZWFyY2gucmVzdWx0cztcbi8vIH1cblxuY29uc3QgbGFuZyA9ICdlbic7XG5jb25zdCBnZXRVcmxTdWdnZXN0ID0gKHF1ZXJ5OiBzdHJpbmcpID0+XG4gIF9fbWluaW1pemVVcmwoYFxuICBodHRwczovLyR7bGFuZ30ud2lraXBlZGlhLm9yZy93L2FwaS5waHBcbiAgP2FjdGlvbj1vcGVuc2VhcmNoXG4gICZmb3JtYXQ9anNvblxuICAmZm9ybWF0dmVyc2lvbj0yXG4gICZzZWFyY2g9JHtxdWVyeX1cbiAgJm5hbWVzcGFjZT0wXG4gICZsaW1pdD0xMFxuICAmb3JpZ2luPSpgKTtcblxuLyoqXG4gKiBVc2VzIGBMZWdhY3kgV2lraXBlZGlhIEFQSSAtIGFwaS5waHBgXG4gKlxuICogaHR0cHM6Ly93d3cubWVkaWF3aWtpLm9yZy93aWtpL0FQSTpNYWluX3BhZ2VcbiAqICovXG5hc3luYyBmdW5jdGlvbiBzdWdnZXN0Q3VzdG9tKHF1ZXJ5OiBzdHJpbmcpIHtcbiAgY29uc3QgYXBpRW5kcG9pbnQgPSBnZXRVcmxTdWdnZXN0KHF1ZXJ5KTtcbiAgY29uc29sZS5sb2coXCJhcGkgZW5kcG9pbnQ6XCIsIGFwaUVuZHBvaW50KTtcbiAgY29uc29sZS5sb2coXCJlbmNvZGVkIHVybDpcIiwgZW5jb2RlVVJJKHF1ZXJ5KSk7XG5cbiAgY29uc3QgZmV0Y2hTZWFyY2ggPSAoYXdhaXQgKGF3YWl0IGZldGNoKGFwaUVuZHBvaW50KSkuanNvbigpKSBhcyBbXG4gICAgc3RyaW5nLFxuICAgIHN0cmluZ1tdLFxuICAgIHN0cmluZ1tdLFxuICAgIHN0cmluZ1tdXG4gIF07XG4gIGNvbnNvbGUubG9nKFwiZmV0Y2hTZWFyY2g6XCIsIGZldGNoU2VhcmNoKTtcblxuICAvLyByZXR1cm4gZmV0Y2hTZWFyY2ggW3F1ZXJ5LCBzdWdnZXN0c1tdLCBcIlwiW10sIGxpbmtzW11dXG4gIGNvbnN0IFssIHRpdGxlcywgLCBsaW5rc10gPSBmZXRjaFNlYXJjaDtcbiAgXG4gIFxuICBjb25zdCByZXM6IFN1Z2dlc3Rpb25zQ3VzdG9tID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdGl0bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgY2h1bmtzID0gbGlua3NbaV0uc3BsaXQoXCIvXCIpXG4gICAgcmVzLnB1c2goeyB0aXRsZTogdGl0bGVzW2ldLCBub3JtYWxpemVkOiBjaHVua3NbY2h1bmtzLmxlbmd0aCAtIDFdIH0pO1xuICB9XG5cbiAgcmV0dXJuIHJlcztcbn1cblxuZXhwb3J0IHR5cGUgU3VnZ2VzdGlvbnNDdXN0b20gPSB7IHRpdGxlOiBzdHJpbmc7IG5vcm1hbGl6ZWQ6IHN0cmluZyB9W107XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuLy8gICAgICAgICAgICAgICAgICAgICAgIExpbmtzICYgUHJldmlldyAgICAgICAgICAgICAgICAgICAgICAgLy9cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLy9cblxuLyoqIExvYWRzIHBhZ2UgbGlua3MgYW5kIGludHJvLiAqL1xuYXN5bmMgZnVuY3Rpb24gcGFnZShxdWVyeTogc3RyaW5nKSB7XG4gIGNvbnN0IHJlc1BhZ2UgPSBhd2FpdCB3aWtpLnBhZ2UocXVlcnksIHtcbiAgICBhdXRvU3VnZ2VzdDogdHJ1ZSxcbiAgICByZWRpcmVjdDogZmFsc2UsXG4gIH0pO1xuXG4gIC8vIFJFU1QgQVBJIHNwZWNcbiAgLy8gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL2FwaS9yZXN0X3YxLyMvXG5cbiAgLy8gY29uc29sZS5sb2coXCJyZXNQYWdlOlwiLCByZXNQYWdlKTtcblxuICAvLyBjb25zb2xlLmxvZyhcInJlc1BhZ2UubGlua3M6XCIsIGF3YWl0IHJlc1BhZ2UubGlua3MoKSk7XG4gIC8vIGNvbnNvbGUubG9nKFwicmVzUGFnZS5pbnRybzpcIiwgYXdhaXQgcmVzUGFnZS5pbnRybygpKTtcblxuICAvLyBjb25zaWRlciBzaG93aW5nIHRoZSBpbmZvYm94XG4gIC8vIGNvbnNvbGUubG9nKFwicmVzUGFnZS5pbmZvYm94OlwiLCBhd2FpdCByZXNQYWdlLmluZm9ib3goe2F1dG9TdWdnZXN0OiB0cnVlfSkpO1xuXG4gIC8vIHJlcXVpcmVzIFVzZXItQWdlbnQvQXBpLVVzZXItQWdlbnQgaGVhZGVyXG4gIC8vIGNvbnNvbGUubG9nKFwicmVzUGFnZS5zdW1tYXJ5OlwiLCBhd2FpdCByZXNQYWdlLnN1bW1hcnkoKSk7XG5cbiAgLy8gZG9uJ3QgbmVlZCB0aGUgd2hvbGUgY29udGVudCAoZm9yIGEgcHJldmlldylcbiAgLy8gY29uc29sZS5sb2coXCJyZXNQYWdlLmNvbnRlbnQ6XCIsIGF3YWl0IHJlc1BhZ2UuY29udGVudCgpKTtcblxuICAvLyB0aGUgXCIvcmVsYXRlZFwiIHJvdXRlIGlzIGV4cGVyaW1lbnRhbCFcbiAgLy8gY29uc3QgcmVsYXRlZCA9IGF3YWl0IHJlc1BhZ2UucmVsYXRlZCgpO1xuICAvLyBjb25zb2xlLmxvZyhcInJlc1BhZ2UucmVsYXRlZDpcIiwgcmVsYXRlZCk7XG5cbiAgcmV0dXJuIHJlc1BhZ2U7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldFN1bW1hcnkocXVlcnk6IHN0cmluZykge1xuICAvLyBjb25zb2xlLmxvZyhcIlx1RDgzRFx1REU4MCB8IGdldFN1bW1hcnkgfCBxdWVyeVwiLCBxdWVyeSlcblxuICBjb25zdCBlbmRwb2ludCA9IFJlc3RBcGlCYXNlKCkgKyAnL3BhZ2Uvc3VtbWFyeS8nICsgcXVlcnlcbiAgY29uc3Qgc3VtbWFyeTogd2lraVN1bW1hcnkgPSBhd2FpdCAoYXdhaXQgZmV0Y2goZW5kcG9pbnQpKS5qc29uKCk7XG5cbiAgcmV0dXJuIHN1bW1hcnk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldFJlc3BvbnNlKHF1ZXJ5OiBzdHJpbmcpIHtcbiAgY29uc3QgZW5kcG9pbnQgPSBSZXN0QXBpQmFzZSgpICsgJy9wYWdlL3JlbGF0ZWQvJyArIHF1ZXJ5XG4gIGNvbnN0IHJlbGF0ZWQ6IHJlbGF0ZWRSZXN1bHQgPSBhd2FpdCAoYXdhaXQgZmV0Y2goZW5kcG9pbnQpKS5qc29uKCk7XG5cbiAgcmV0dXJuIHJlbGF0ZWQucGFnZXM7XG59XG5cbmZ1bmN0aW9uIGdldEl0ZW0oaXRlbTogcmVsYXRlZFJlc3VsdFtcInBhZ2VzXCJdW251bWJlcl0pIHtcbiAgLy8gVE9ETzogcmVwbGFjZSB3aXRoIHRpdGxlcy5kaXNwbGF5P1xuICAvLyByZXR1cm4gaXRlbS50aXRsZXMubm9ybWFsaXplZDtcblxuICBjb25zdCB7XG4gICAgZGVzY3JpcHRpb24sXG4gICAgcGFnZWlkLFxuICAgIGV4dHJhY3RfaHRtbCxcbiAgICBvcmlnaW5hbGltYWdlLFxuICAgIHRodW1ibmFpbCxcbiAgICBjb250ZW50X3VybHMsXG4gIH0gPSBpdGVtO1xuXG4gIGNvbnN0IHBhZ2VfdXJsID0gaXNNb2JpbGVcbiAgICA/IGNvbnRlbnRfdXJscy5tb2JpbGUucGFnZVxuICAgIDogY29udGVudF91cmxzLmRlc2t0b3AucGFnZTtcblxuICBjb25zdCBkYXRhID0ge1xuICAgIGRlc2NyaXB0aW9uLFxuICAgIHBhZ2VpZCxcbiAgICBleHRyYWN0X2h0bWwsXG4gICAgb3JpZ2luYWxpbWFnZSxcbiAgICB0aHVtYm5haWwsXG4gICAgcGFnZV91cmwsXG4gIH07XG5cbiAgcmV0dXJuIHsgaWQ6IGl0ZW0udGl0bGVzLm5vcm1hbGl6ZWQsIGRhdGEgfTtcbn1cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgTGFuZ3VhZ2VzICAgICAgICAgICAgICAgICAgICAgICAgICAvL1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0vL1xuXG4vLyBsZXQgbGFuZ3VhZ2VzID0gd3JpdGFibGU8bGFuZ3VhZ2VSZXN1bHRbXT4obnVsbCk7XG5cbi8vIC8vIE5vdGU6IGhlcmUgbGFuZz1lbiBzaW5jZSB0aGUgcmVzcG9uc2UgaXMgdGhlIHNhbWUgZm9yIGFueSBsYW5nXG4vLyBjb25zdCBsb2FkTGFuZ3NVcmwgPSBfX21pbmltaXplVXJsKGBcbi8vIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93L2FwaS5waHBcbi8vID9tZXRhPXNpdGVpbmZvXG4vLyAmc2lwcm9wPWxhbmd1YWdlc1xuLy8gJmZvcm1hdD1qc29uXG4vLyAmcmVkaXJlY3RzPVxuLy8gJmFjdGlvbj1xdWVyeVxuLy8gJm9yaWdpbj0qYCk7XG5cbi8vIGFzeW5jIGZ1bmN0aW9uIGxvYWRMYW5ncygpIHtcbi8vICAgLy8gaWYgKGxhbmd1YWdlcykgcmV0dXJuO1xuLy8gICAvLyBjb25zdCBsYW5ncyA9IGF3YWl0IHdpa2kubGFuZ3VhZ2VzKCk7XG5cbi8vICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChsb2FkTGFuZ3NVcmwpO1xuXG4vLyAgIGlmICghcmVzcG9uc2Uub2spIHJldHVybjtcblxuLy8gICBjb25zdCBsYW5ncyA9IChhd2FpdCByZXNwb25zZS5qc29uKCkpLnF1ZXJ5Lmxhbmd1YWdlcyBhcyBsYW5ndWFnZVJlc3VsdFtdO1xuXG4vLyAgIGxhbmd1YWdlcy5zZXQobGFuZ3MpO1xuLy8gfVxuXG5mdW5jdGlvbiBzZXRMYW5nKGxhbmd1YWdlOiBzdHJpbmcpIHtcbiAgLy8gdmFsaWRhdGlvbj9cblxuICByZXN0QXBpTGFuZyA9IGxhbmd1YWdlO1xufVxuXG5leHBvcnQgY29uc3QgYXBpQ2xpZW50ID0ge1xuICAvLyBzdWdnZXN0LFxuICBwYWdlLFxuXG4gIHN1Z2dlc3RDdXN0b20sXG4gIGdldFN1bW1hcnksXG5cbiAgZ2V0UmVzcG9uc2UsXG4gIGdldEl0ZW0sXG5cbiAgLy8gbGFuZ3VhZ2VzLFxuICAvLyBsb2FkTGFuZ3MsXG4gIHNldExhbmcsXG59O1xuIl0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVlLGFBQVMsS0FBSyxJQUFJLFNBQVM7QUFDeEMsYUFBTyxTQUFTLE9BQU87QUFDckIsZUFBTyxHQUFHLE1BQU0sU0FBUyxTQUFTO01BQ3RDO0lBQ0E7QUNBQSxRQUFNLEVBQUMsU0FBUSxJQUFJLE9BQU87QUFDMUIsUUFBTSxFQUFDLGVBQWMsSUFBSTtBQUV6QixRQUFNLFVBQVUsV0FBUyxXQUFTO0FBQzlCLFlBQU0sTUFBTSxTQUFTLEtBQUssS0FBSztBQUMvQixhQUFPLE1BQU0sR0FBRyxNQUFNLE1BQU0sR0FBRyxJQUFJLElBQUksTUFBTSxHQUFHLEVBQUUsRUFBRSxZQUFXO0lBQ25FLEdBQUcsdUJBQU8sT0FBTyxJQUFJLENBQUM7QUFFdEIsUUFBTSxhQUFhLENBQUNBLFVBQVM7QUFDM0IsTUFBQUEsUUFBT0EsTUFBSyxZQUFXO0FBQ3ZCLGFBQU8sQ0FBQyxVQUFVLE9BQU8sS0FBSyxNQUFNQTtJQUN0QztBQUVBLFFBQU0sYUFBYSxDQUFBQSxVQUFRLFdBQVMsT0FB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LE1BQUFBLE9BQUFBLFlBQUFBLFdBQUFBLE9BQUFBO0lBQUFBO0FBQUFBLFFBQUFBLGlCQUFBQSxTQUFBQSxHQUFBQSxHQUFBQSxHQUFBQTtBQUFBQSxhQUFBQSxLQUFBQSxJQUFBQSxPQUFBQSxlQUFBQSxHQUFBQSxHQUFBQSxFQUFBQSxPQUFBQSxHQUFBQSxZQUFBQSxNQUFBQSxjQUFBQSxNQUFBQSxVQUFBQSxLQUFBQSxDQUFBQSxJQUFBQSxFQUFBQSxDQUFBQSxJQUFBQSxHQUFBQTtJQUFBQTtBQUFBQSxRQUFBQSxnQkFBQUEsV0FBQUE7QUFBQUEsZUFBQUEsRUFBQUEsSUFBQUEsR0FBQUE7QUFBQUEsWUFBQUEsSUFBQUEsQ0FBQUEsR0FBQUEsS0FBQUEsTUFBQUEsSUFBQUEsT0FBQUEsSUFBQUE7QUFBQUEsWUFBQUE7QUFBQUEsbUJBQUFBLEdBQUFBLElBQUFBLEdBQUFBLE9BQUFBLFFBQUFBLEVBQUFBLEdBQUFBLEVBQUFBLE1BQUFBLElBQUFBLEVBQUFBLEtBQUFBLEdBQUFBLFVBQUFBLEVBQUFBLEtBQUFBLEVBQUFBLEtBQUFBLEdBQUFBLENBQUFBLEtBQUFBLEVBQUFBLFdBQUFBLElBQUFBLEtBQUFBO0FBQUFBO1FBQUFBLFNBQUFBLElBQUFBO0FBQUFBLGNBQUFBLE1BQUFBLElBQUFBO1FBQUFBLFVBQUFBO0FBQUFBLGNBQUFBO0FBQUFBLGFBQUFBLE1BQUFBLEVBQUFBLFVBQUFBLEVBQUFBLE9BQUFBO1VBQUFBLFVBQUFBO0FBQUFBLGdCQUFBQTtBQUFBQSxvQkFBQUE7VUFBQUE7UUFBQUE7QUFBQUEsZUFBQUE7TUFBQUE7QUFBQUEsYUFBQUEsU0FBQUEsR0FBQUEsR0FBQUE7QUFBQUEsWUFBQUEsTUFBQUEsUUFBQUEsQ0FBQUE7QUFBQUEsaUJBQUFBO0FBQUFBLFlBQUFBLE9BQUFBLFlBQUFBLE9BQUFBLENBQUFBO0FBQUFBLGlCQUFBQSxFQUFBQSxHQUFBQSxDQUFBQTtBQUFBQSxjQUFBQSxJQUFBQSxVQUFBQSxzREFBQUE7TUFBQUE7SUFBQUEsRUFBQUE7QUFBQUEsUUFBQUEsb0JB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O0FBQUEsRUFDVixlQUFlO0FBQUEsRUFDZixVQUFVO0FBQUEsRUFDVixXQUFXO0FBQUEsRUFDWCxVQUFVO0FBQUEsRUFDVixXQUFXO0FBQUEsRUFDWCxhQUFhO0FBQUEsRUFDYixnQkFBZ0I7QUFBQSxFQUNoQixZQUFZO0FBQUEsRUFDWixZQUFZO0FBQUEsRUFDWixTQUFTO0FBQUEsRUFDVCxZQUFZO0FBQUEsRUFDWixjQUFjO0FBQUEsRUFDZCxlQUFlO0FBQUEsRUFDZixlQUFlO0FBQUEsRUFDZixlQUFlO0FBQUEsRUFDZixlQUFlO0FBQUEsRUFDZixZQUFZO0FBQUEsRUFDWixVQUFVO0FBQUEsRUFDVixhQUFhO0FBQUEsRUFDYixTQUFTO0FBQUEsRUFDVCxTQUFTO0FBQUEsRUFDVCxZQUFZO0FBQUEsRUFDWixXQUFXO0FBQUEsRUFDWCxhQUFhO0FBQUEsRUFDYixhQUFhO0FBQUEsRUFDYixTQUFTO0FBQUEsRUFDVCxXQUFXO0FBQUEsRUFDWCxZQUFZO0FBQUEsRUFDWixNQUFNO0FBQUEsRUFDTixXQUFXO0FBQUEsRUFDWCxNQUFNO0FBQUEsRUFDTixPQUFPO0FBQUEsRUFDUCxhQUFhO0FBQUEsRUFDYixNQUFNO0FBQUEsRUFDTixVQUFVO0FBQUEsRUFDVixTQUFTO0FBQUEsRUFDVCxXQUFXO0FBQUEsRUFDWCxRQUFRO0FBQUEsRUFDUixPQUFPO0FBQUEsRUFDUCxPQUFPO0FBQUEsRUFDUCxVQUFVO0FBQUEsRUFDVixlQUFlO0FBQUEsRUFDZixXQUFXO0FBQUEsRUFDWCxjQUFjO0FBQUEsRUFDZCxXQUFXO0FBQUEsRUFDWCxZQUFZO0FBQUEsRUFDWixXQUFXO0FBQUEsRUFDWCxzQkFBc0I7QUFBQSxFQUN0QixXQUFXO0FBQUEsRUFDWCxZQUFZO0FBQUEsRUFDWixXQUFXO0FBQUEsRUFDWCxXQUFXO0FBQUEsRUFDWCxhQUFhO0FBQUEsRUFDYixlQUFlO0FBQUEsRUFDZixjQUFjO0FBQUEsRUFDZCxnQkFBZ0I7QUFBQSxFQUNoQixnQkFBZ0I7QUFBQSxFQUNoQixnQkFBZ0I7QUFBQSxFQUNoQixhQUFhO0FBQUEsRUFDYixNQUFNO0FBQUEsRUFDTixXQUFXO0FBQUEsRUFDWCxPQUFPO0FBQUEsRUFDUCxTQUFTO0FBQUEsRUFDVCxRQUFRO0FBQUEsRUFDUixrQkFBa0I7QUFBQSxFQUNsQixZQUFZO0FBQUEsRUFDWixjQUFjO0FBQUEsRUFDZCxjQUFjO0FBQUEsRUFDZCxnQkFBZ0I7QUFBQSxFQUNoQixpQkFBaUI7QUFBQSxFQUNqQixtQkFBbUI7QUFBQSxFQUNuQixpQkFBaUI7QUFBQSxFQUNqQixpQkFBaUI7QUFBQSxFQUNqQixjQUFjO0FBQUEsRUFDZCxXQUFXO0FBQUEsRUFDWCxXQUFXO0FBQUEsRUFDWCxVQUFVO0FBQUEsRUFDVixhQUFhO0FBQUEsRUFDYixNQUFNO0FBQUEsRUFDTixTQUFTO0FBQUEsRUFDVCxPQUFPO0FBQUEsRUFDUCxXQUFXO0FBQUEsRUFDWCxRQUFRO0FBQUEsRUFDUixXQUFXO0FBQUEsRUFDWCxRQUFRO0FBQUEsRUFDUixlQUFlO0FBQUEsRUFDZixXQUFXO0FBQUEsRUFDWCxlQUFlO0FBQUEsRUFDZixlQUFlO0FBQUEsRUFDZixZQUFZO0FBQUEsRUFDWixXQUFXO0FBQUEsRUFDWCxNQUFNO0FBQUEsRUFDTixNQUFNO0FBQUEsRUFDTixNQUFNO0FBQUEsRUFDTixZQUFZO0FBQUEsRUFDWixRQUFRO0FBQUEsRUFDUixlQUFlO0FBQUEsRUFDZixLQUFLO0FBQUEsRUFDTCxXQUFXO0FBQUEsRUFDWCxXQUFXO0FBQUEsRUFDWCxhQUFhO0FBQUEsRUFDYixRQUFRO0FBQUEsRUFDUixZQUFZO0FBQUEsRUFDWixVQUFVO0FBQUEsRUFDVixVQUFVO0FBQUEsRUFDVixRQUFRO0FBQUEsRUFDUixRQUFRO0FBQUEsRUFDUixTQUFTO0FBQUEsRUFDVCxXQUFXO0FBQUEsRUFDWCxXQUFXO0FBQUEsRUFDWCxXQUFXO0FBQUEsRUFDWCxNQUFNO0FBQUEsRUFDTixhQUFhO0FBQUEsRUFDYixXQUFXO0FBQUEsRUFDWCxLQUFLO0FBQUEsRUFDTCxNQUFNO0FBQUEsRUFDTixTQUFTO0FBQUEsRUFDVCxRQUFRO0FBQUEsRUFDUixXQUFXO0FBQUEsRUFDWCxRQUFRO0FBQUEsRUFDUixPQUFPO0FBQUEsRUFDUCxPQUFPO0FBQUEsRUFDUCxZQUFZO0FBQUEsRUFDWixRQUFRO0FBQUEsRUFDUixhQUFhO0FBQ2Y7QUFFQSxlQUFPLE9BQU8sT0FBTztBQUFBLEVBQ25CLEtBQUssVUFBVTtBQUNiLFdBQU8sT0FBTyxPQUFPLElBQUksS0FBSyxlQUFhLE1BQU0sUUFBUTtBQUFBLEVBQzNEO0FBQUEsRUFDQSxjQUFjO0FBQ1osV0FBTyxLQUFLLElBQUksRUFBRSxZQUFZO0FBQUEsRUFDaEM7QUFBQSxFQUNBLEtBQUs7QUFBQTtBQUFBLEVBQ0wsV0FBVztBQUFBLEVBQ1gsWUFBWTtBQUFBLEVBQ1osV0FBVztBQUFBLEVBQ1gsV0FBVztBQUFBLEVBQ1gsVUFBVTtBQUNaLENBQUM7QUFFRCxTQUFTLGtCQUFrQjtBQUN6QixTQUFPLEtBQUssSUFBSSxFQUFFLFVBQVU7QUFDOUI7QUFFQSxTQUFTLG1CQUFtQjtBQUMxQixTQUFPLEtBQUssSUFBSSxFQUFFLFdBQVc7QUFDL0I7QUFFQSxTQUFTLGtCQUFrQjtBQUN6QixTQUFPLFdBQVcsSUFBSSxFQUFFLFVBQVU7QUFDcEM7QUFFQSxTQUFTLGtCQUFrQjtBQUN6QixTQUFPLEtBQUssSUFBSSxFQUFFLFVBQVU7QUFDOUI7QUFFZSxTQUFSLE1BQXVCQyxTQUFRO0FBQ3BDLE1BQUlDLElBQUc7QUFDUCxFQUFBRCxXQUFVQSxVQUFTLElBQUksS0FBSyxFQUFFLFlBQVk7QUFDMUMsVUFBUUMsS0FBSSxNQUFNLEtBQUtELE9BQU0sTUFBTSxJQUFJQyxHQUFFLENBQUMsRUFBRSxRQUFRQSxLQUFJLFNBQVNBLEdBQUUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxNQUFNLElBQUksS0FBS0EsRUFBQyxJQUN0RixNQUFNLElBQUksSUFBSSxJQUFLQSxNQUFLLElBQUksS0FBUUEsTUFBSyxJQUFJLEtBQVFBLE1BQUssSUFBSSxLQUFRQSxLQUFJLE1BQVNBLEtBQUksT0FBUSxJQUFNQSxLQUFJLElBQU0sQ0FBQyxJQUNoSCxNQUFNLElBQUksS0FBS0EsTUFBSyxLQUFLLEtBQU1BLE1BQUssS0FBSyxLQUFNQSxNQUFLLElBQUksTUFBT0EsS0FBSSxPQUFRLEdBQUksSUFDL0UsTUFBTSxJQUFJLEtBQU1BLE1BQUssS0FBSyxLQUFRQSxNQUFLLElBQUksS0FBUUEsTUFBSyxJQUFJLEtBQVFBLE1BQUssSUFBSSxLQUFRQSxNQUFLLElBQUksS0FBUUEsS0FBSSxPQUFVQSxLQUFJLE9BQVEsSUFBTUEsS0FBSSxNQUFRLEdBQUksSUFDdEosU0FDQ0EsS0FBSSxhQUFhLEtBQUtELE9BQU0sS0FBSyxJQUFJLElBQUlDLEdBQUUsQ0FBQyxHQUFHQSxHQUFFLENBQUMsR0FBR0EsR0FBRSxDQUFDLEdBQUcsQ0FBQyxLQUM1REEsS0FBSSxhQUFhLEtBQUtELE9BQU0sS0FBSyxJQUFJLElBQUlDLEdBQUUsQ0FBQyxJQUFJLE1BQU0sS0FBS0EsR0FBRSxDQUFDLElBQUksTUFBTSxLQUFLQSxHQUFFLENBQUMsSUFBSSxNQUFNLEtBQUssQ0FBQyxLQUNoR0EsS0FBSSxjQUFjLEtBQUtELE9BQU0sS0FBSyxLQUFLQyxHQUFFLENBQUMsR0FBR0EsR0FBRSxDQUFDLEdBQUdBLEdBQUUsQ0FBQyxHQUFHQSxHQUFFLENBQUMsQ0FBQyxLQUM3REEsS0FBSSxjQUFjLEtBQUtELE9BQU0sS0FBSyxLQUFLQyxHQUFFLENBQUMsSUFBSSxNQUFNLEtBQUtBLEdBQUUsQ0FBQyxJQUFJLE1BQU0sS0FBS0EsR0FBRSxDQUFDLElBQUksTUFBTSxLQUFLQSxHQUFFLENBQUMsQ0FBQyxLQUNqR0EsS0FBSSxhQUFhLEtBQUtELE9BQU0sS0FBSyxLQUFLQyxHQUFFLENBQUMsR0FBR0EsR0FBRSxDQUFDLElBQUksS0FBS0EsR0FBRSxDQUFDLElBQUksS0FBSyxDQUFDLEtBQ3JFQSxLQUFJLGNBQWMsS0FBS0QsT0FBTSxLQUFLLEtBQUtDLEdBQUUsQ0FBQyxHQUFHQSxHQUFFLENBQUMsSUFBSSxLQUFLQSxHQUFFLENBQUMsSUFBSSxLQUFLQSxHQUFF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Q0FBQztBQUFBLE1BQ0Y7QUFBQSxJQUNLLENBQUM7QUFBQSxFQUdMO0FBQUEsRUFFSCxNQUFNLGVBQWU7QUFDZCxTQUFLLFdBQVcsT0FBTyxPQUFPLENBQUMsR0FBRywwQkFBMEIsTUFBTSxLQUFLLFNBQVMsQ0FBQztBQUFBLEVBQ3JGO0FBQUEsRUFFSCxNQUFNLGVBQWU7QUFDZCxVQUFNLEtBQUssU0FBUyxLQUFLLFFBQVE7QUFBQSxFQUNyQztBQUFBLEVBRUEsV0FBVztBQUFBLEVBRWQ7QUFFRDsiLAogICJuYW1lcyI6IFsidHlwZSIsICJyZXN1bHQiLCAicHJvdG90eXBlIiwgImV4dGVuZCIsICJhIiwgImNvbnRlbnQiLCAiZGVzY3JpcHRvcnMiLCAiZmlsdGVyIiwgIm0iLCAiaGFzT3duUHJvcGVydHkiLCAibm9vcCIsICJ1dGlscyIsICJpbmRleCIsICJlbmNvZGUiLCAidG9TdHJpbmciLCAiaWQiLCAiVVJMU2VhcmNoUGFyYW1zIiwgIkZvcm1EYXRhIiwgIkJsb2IiLCAicGxhdGZvcm0iLCAiaXNGb3JtRGF0YSIsICJpc0ZpbGVMaXN0IiwgInNlbGYiLCAiZm9ybWF0IiwgImRlZmF1bHRzIiwgIkF4aW9zSGVhZGVycyIsICJ0cmFuc2Zvcm0iLCAibWluIiwgIm5vdyIsICJ0aW1lciIsICJvcmlnaW4iLCAibWVyZ2UiLCAidGltZW91dCIsICJzaWduYWwiLCAiZG9uZSIsICJyZXMiLCAiY29tcG9zZVNpZ25hbHMiLCAiYWRhcHRlcnMiLCAidmFsaWRhdG9ycyIsICJ2YWxpZGF0b3IiLCAiSW50ZXJjZXB0b3JNYW5hZ2VyIiwgImMiLCAiQXhpb3MiLCAiY3JlYXRlIiwgIkNhbmNlbFRva2VuIiwgIkh0dHBTdGF0dXNDb2RlIiwgImV4cG9ydHMiLCAiZXhwb3J0cyIsICJlcnJvcnNfMSIsICJleHBvcnRzIiwgImV4cG9ydHMiLCAiZXJyb3JzXzEiLCAibWVzc2FnZXNfMSIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJjIiwgIngiLCAibSIsICJ0cmltV3JhcHBlcnMiLCAic3RyIiwgInJlcGxhY2UiLCAidHJpbSIsICJ0cmltT3IiLCAib3JQb3NpdGlvbiIsICJpbmRleE9mIiwgInN1YnN0cmluZyIsICJnZXRWYWx1ZSIsICJyYXciLCAia2V5IiwgImNsZWFuc2VkIiwgImV4dHJhUHJvcGVydHlQYXR0ZXJuIiwgImVuZGluZ1BhdHRlcm4iLCAibGlua3MiLCAibWF0Y2giLCAibGlua3NQYXR0ZXJuIiwgInNwbGl0IiwgImxpbmtTZXBhcmF0b3JQYXR0ZXJuIiwgImZpbHRlciIsICJlIiwgInRleHQiLCAiZGF0YVR5cGUiLCAiZ2xvYmFsUGF0dGVybiIsICJwYXJzZVBhdHRlcm4iLCAicGFyc2UiLCAidmFyaWFibGUiLCAibmFtZSIsICJzb3VyY2UiLCAibWF0Y2hlcyIsICJpbnN0YW5jZXMiLCAibWFwIiwgInNvdXJjZUFmdGVyIiwgInJlZHVjZSIsICJtZW1vIiwgImluZGV4IiwgIkRPX05PVF9SRVBMQUNFIiwgImJ5RGF0YUhhbmRsZXIiLCAiaGFuZGxlciIsICJjb250ZXh0IiwgImRhdGEiLCAiT2JqZWN0IiwgImFzc2lnbiIsICJleHRyYWN0RGF0YSIsICJkYXRhVHlwZXMiLCAidHlwZSIsICJmaW5kUHJvcGVydHlMaXN0IiwgImtleVZhbHVlUGFpcnMiLCAia2V5VmFsdWVHbG9iYWxQYXR0ZXJuIiwgInJlc3VsdCIsICJrZXlWYWx1ZVBhdHRlcm4iLCAiZXhlYyIsICJyYXdLZXkiLCAicmF3VmFsdWUiLCAiY2FtZWxDYXNlIiwgIml0ZW0iLCAiZmlsbFZhcmlhYmxlIiwgInZhbHVlIiwgInNpbXBsaWZ5RGF0YVZhbHVlcyIsICJsb2ciLCAiSlNPTiIsICJzdHJpbmdpZnkiLCAiZmluZCIsICJwYXR0ZXJuIiwgIm1hdGNoZWQiLCAiZGF0YVZhbHVlIiwgInBhcnNlSW50IiwgImZpbGxWYXJpYWJsZXMiLCAib3B0aW9ucyIsICJEYXRlIiwgIkFycmF5IiwgImlzQXJyYXkiLCAia2V5cyIsICJmaWxsZWQiLCAiaGFuZGxlU21hbGxEYXRhIiwgInNtYWxsRGF0YVR5cGUiLCAicHJpbWFyeSIsICJzZWNvbmRhcnkiLCAiZ2V0VmFyaWFibGVWYWx1ZSIsICJzbWFsbERhdGEiLCAicmVkdWNlVmFyaWFibGUiLCAiZmxvYXQiLCAibnVtYmVyUGFyc2UiLCAicGFyc2VGbG9hdCIsICJpc05hTiIsICJkYXRlVmFsdWUiLCAidmFyaWFibGVWYWx1ZSIsICJieVZhcmlhYmxlUmVkdWN0aW9uIiwgInJlZHVjZWQiLCAiZXh0cmFjdFByb3BlcnRpZXMiLCAidHJhbnNmb3JtUHJvcGVydGllcyIsICJwcm9wZXJ0aWVzIiwgInRyYW5zZm9ybWVkIiwgImJsYW5rTmFtZVBhdHRlcm4iLCAiaWQiLCAiYmxhbmtOYW1lIiwgImJsYW5rSW5mbyIsICJibGFua0luZm9QYXR0ZXJuIiwgImZpbmRPdXRlckluZGV4IiwgImxhc3RPcGVuIiwgImkiLCAibGVuZ3RoIiwgIm5leHRUd28iLCAic3Vic3RyIiwgInBvcCIsICJwdXNoIiwgInN0YXJ0TWF0Y2giLCAiaW5mb0JveFN0YXJ0UGF0dGVybiIsICJzb3VyY2VMZWZ0IiwgInN0YXJ0SW5kZXgiLCAid2l0aFN0YXJ0IiwgIm91dGVySW5kZXgiLCAiZXh0cmFjdEluZm9ib3hlcyIsICJwYXJzZWQiLCAiaW5mb2JveGVzIiwgImNsZWFuU291cmNlIiwgInJlbW92ZVNtYWxsIiwgInJlbW92ZVJlZmVyZW5jZXMiLCAidHJhbnNmb3JtUm93U3BhbiIsICJyb3dzIiwgInRyYW5zZm9ybUNlbGxzIiwgIm1lcmdlZCIsICJjZWxscyIsICJrIiwgIm8iLCAiam9pbiIsICJjbGVhbiIsICJsaW5rUGF0dGVybiIsICJtIiwgIngiLCAicGFyc2VSb3ciLCAiY291bnRNYXRjaCIsICJjb3VudCIsICJpY29ucyIsICJnZXRNYXRjaGVzIiwgInBhcnNlVGFibGVEYXRhIiwgInJvd1BhdHRlcm4iLCAidCIsICJlbCIsICJyb3dQYXR0ZXJuU2luZ2xlIiwgInNsaWNlIiwgImdldFRhYmxlcyIsICJ0YWJsZVN0YXJ0cyIsICJ0YWJsZVN0YXJ0UGF0dGVybiIsICJ0YWJsZUVuZHMiLCAidGFibGVFbmRQYXR0ZXJuIiwgInRhYmxlU3RhcnQiLCAidGFibGVFbmQiLCAiRXJyb3IiLCAiZW5kIiwgInN0YXJ0IiwgImxhc3QiLCAibGlzdCIsICJ1bmRlZmluZWQiLCAicGFyc2VJbmZvYm94IiwgImluZm9ib3giLCAicmVzIiwgInNoaWZ0IiwgImZvckVhY2giLCAibmV4dCIsICJnZW5lcmFsIiwgInRhYmxlcyIsICJwYXJzZVRhYmxlcyIsICJic1RhYmxlcyIsICJwYXJzZUJzVGFibGVzIiwgImxpc3RzIiwgInBhcnNlTGlzdHMiLCAic21hbGxHbG9iYWxQYXR0ZXJuIiwgInNtYWxsUGF0dGVybiIsICJyZXN1bHRzIiwgImZsYWdHbG9iYWxQYXR0ZXJuIiwgImZsYWdQYXR0ZXJuIiwgImNvb3Jkc0dsb2JhbFBhdHRlcm4iLCAiY29vcmRzUGF0dGVybiIsICJsaXN0SXRlbVByZWZpeFBhdHRlcm4iLCAidW5idWxsZXRlZExpc3RHbG9iYWxQYXR0ZXJuIiwgInVuYnVsbGV0ZWRMaXN0SXRlbVBhdHRlcm4iLCAibGlzdEl0ZW1zIiwgInBsYWluTGlzdEdsb2JhbFBhdHRlcm4iLCAicGxhaW5MaXN0SXRlbVBhdHRlcm4iLCAibWFycmlhZ2VHbG9iYWxQYXR0ZXJuIiwgIm1hcnJpYWdlUGF0dGVybiIsICJuYmF5R2xvYmFsUGF0dGVybiIsICJuYmF5UGF0dGVybiIsICJ5ZWFyIiwgIm90aGVyR2xvYmFsUGF0dGVybiIsICJvdGhlclBhdHRlcm4iLCAibGFiZWwiLCAiaGxpc3RHbG9iYWxQYXR0ZXJuIiwgImhsaXN0UGF0dGVybiIsICJiaXJ0aERhdGVHbG9iYWxQYXR0ZXJuIiwgImJpcnRoRGF0ZVBhdHRlcm4iLCAibWlsbGlzSW5ZZWFyIiwgIm1vbnRoIiwgImRheSIsICJkYXRlIiwgIk1hdGgiLCAiZmxvb3IiLCAibm93IiwgIlN5bWJvbCIsICJsYWJlbGVkRGF0ZUdsb2JhbFBhdHRlcm4iLCAibGFiZWxlZERhdGVQYXR0ZXJuIiwgImZpcnN0UGlwZUluZGV4IiwgInBvdGVudGlhbERhdGUiLCAiZ2V0VGltZSIsICJkZWF0aERhdGVHbG9iYWxQYXR0ZXJuIiwgImRlYXRoRGF0ZVBhdHRlcm4iLCAiZGVhdGhZZWFyIiwgImRlYXRoTW9udGgiLCAiZGVhdGhEYXkiLCAiYmlydGhZZWFyIiwgImJpcnRoTW9udGgiLCAiYmlydGhEYXkiLCAiZGVhdGhEYXRlIiwgImJpcnRoRGF0ZSIsICJOdW1iZXIiLCAiVVJMR2xvYmFsUGF0dGVybiIsICJVUkxQYXR0ZXJuIiwgIndlYnNpdGVHbG9iYWxQYXR0ZXJuIiwgIndlYnNpdGVQYXR0ZXJuIiwgInByb3RvY29sIiwgImhvc3RuYW1lIiwgInBhdGgiLCAicHJvcFBhdHRlcm4iLCAib2JqIiwgImNvbnZlcnRHbG9iYWxQYXR0ZXJuIiwgImNvbnZlcnRQYXR0ZXJuIiwgImZpbG1EYXRlc1BhdHRlcm4iLCAiZmlsbURhdGVQYXR0ZXJuR2xvYmFsIiwgImZpbG1EYXRlUGF0dGVybiIsICJsb2NhdGlvbiIsICJyZWYiLCAiYXR0cmlidXRlR2xvYmFsUGF0dGVybiIsICJhdHRyaWJ1dGVQYXR0ZXJuIiwgImF0dHJpYnV0ZXNTb3VyY2UiLCAiY29udGVudHMiLCAiYXR0cmlidXRlcyIsICJhdHRyIiwgInIiLCAicmVmMSIsICJyZWYyIiwgInNtYWxsIiwgImZvcm1hdE51bSIsICJmbGFnIiwgImNvb3JkcyIsICJtYXJyaWFnZXMiLCAiYmlydGhEYXRlcyIsICJsYWJlbGVkRGF0ZXMiLCAiZGVhdGhEYXRlcyIsICJ1bmJ1bGxldGVkTGlzdHMiLCAid2Vic2l0ZSIsICJobGlzdCIsICJ1cmwiLCAiY29udmVydCIsICJuYmF5IiwgImZpbG1EYXRlcyIsICJvdGhlciIsICJleHRyYSIsICJwbGFpbkxpc3RzIiwgInVubWFya2VkTGlzdHMiLCAiY3JlYXRlRGF0YVR5cGVIYW5kbGVyIiwgIlJlZ0V4cCIsICJudW1iZXIiLCAicGFyc2VFbmdsaXNoIiwgInBhcnNlU3BhbmlzaCIsICJ0b1N0cmluZyIsICJoZWFkZXJzUGF0dGVybiIsICJjZWxsU2VwYXJhdG9yUGF0dGVybiIsICJsaW5rTmFtZVBhdHRlcm4iLCAiaW5saW5lSGVhZGVyUGF0dGVybiIsICJhY3Rpb25QYXR0ZXJuIiwgInJvd1NwYW5Db3VudFBhdHRlcm4iLCAic3RyaXBMaW5rcyIsICJjYXB0dXJlIiwgInJlbW92ZUFjdGlvbnMiLCAidHJhbnNmb3JtQ2VsbCIsICJyb3ciLCAiZmluZEluZGV4IiwgInAiLCAiZmluZFRhYmxlU3RhcnQiLCAiZmluZFRhYmxlRW5kIiwgImdldEhlYWRlcnMiLCAiaGVhZGVycyIsICJnZXRSb3dzIiwgInNwYW5OIiwgInNwYW5Db3VudCIsICJyb3dzSW5TcGFuIiwgImdldE5leHRUYWJsZSIsICJsZWZ0IiwgImEiLCAiY2FtZWxjYXNlIiwgImNsZWFuZWRTb3VyY2UiLCAia21QYXR0ZXJuIiwgImhlYWRpbmdQYXR0ZXJuIiwgInN1YmhlYWRpbmdQYXR0ZXJuIiwgImhlYWRpbmdzIiwgInN1YmhlYWRpbmdzIiwgImhlYWRpbmdzQmVmb3JlIiwgImhlYWRpbmciLCAidGFibGUiLCAic3ViaGVhZGluZ3NCZWZvcmUiLCAic3ViaGVhZGluZyIsICJyZXNwb25zZSIsICJyZXN1bHQiLCAiaW1hZ2VzIiwgImNvb3JkaW5hdGVzIiwgImZvcm1hdCIsICJleHBvcnRzIiwgImV4cG9ydHMiLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAibSIsICJyZXF1ZXN0XzEiLCAiZXJyb3JzXzEiLCAibWVzc2FnZXNfMSIsICJ1dGlsc18xIiwgIndpa2kiLCAicmVzdWx0IiwgInBhZ2UiLCAibGFuZyIsICJ0eXBlIiwgImZvcm1hdCIsICJhIiwgImEiLCAieCIsICJhIiwgIngiLCAic3RhcnQiLCAidGlja3MiLCAiY29weSIsICJ0eXBlIiwgImMiLCAiZG9jdW1lbnQiLCAibSIsICJ4IiwgIm0iLCAibSIsICJkYXR1bSIsICJ4IiwgIm0iLCAic2VsZWN0aW9uIiwgIm0iLCAibSIsICJhc2NlbmRpbmciLCAiYSIsICJtIiwgIm0iLCAibSIsICJjcmVhdGUiLCAiY3JlYXRlIiwgInBhcnNlVHlwZW5hbWVzIiwgIm0iLCAidHlwZSIsICJ3aW5kb3ciLCAiZGlzcGF0Y2hfZGVmYXVsdCIsICJtIiwgImRpc3BhdGNoX2RlZmF1bHQiLCAic2VsZWN0X2RlZmF1bHQiLCAicm9vdCIsICJzZWxlY3Rpb24iLCAic2VsZWN0X2RlZmF1bHQiLCAiY29uc3RhbnRfZGVmYXVsdCIsICJ4IiwgInR5cGUiLCAieCIsICJ5IiwgImRpc3BhdGNoIiwgImZpbHRlciIsICJzZWxlY3Rpb24iLCAic2VsZWN0X2RlZmF1bHQiLCAiYyIsICJjb250YWluZXIiLCAiZGlzcGF0Y2giLCAidHlwZSIsICJldmVudCIsICJ0b3VjaCIsICJjb25zdGFudF9kZWZhdWx0IiwgImZvcm1hdCIsICJtIiwgImEiLCAibWluIiwgIm1heCIsICJjb25zdGFudF9kZWZhdWx0IiwgIngiLCAiYSIsICJ5IiwgInkiLCAiYSIsICJjb25zdGFudF9kZWZhdWx0IiwgInkiLCAiY29sb3IiLCAicmdiIiwgInN0YXJ0IiwgImEiLCAiYyIsICJ4IiwgImEiLCAieCIsICJjIiwgImEiLCAiYSIsICJhIiwgImMiLCAiemVybyIsICJhIiwgImkiLCAiYSIsICJjIiwgImNvbnN0YW50X2RlZmF1bHQiLCAiYSIsICJhIiwgImMiLCAibSIsICJhIiwgIngiLCAibm93IiwgImlkIiwgImluZGV4IiwgImdldCIsICJzZXQiLCAic2VsZiIsICJzdGFydCIsICJlbXB0eSIsICJpbnRlcnJ1cHRfZGVmYXVsdCIsICJpZCIsICJzZXQiLCAiZ2V0IiwgInRyYW5zaXRpb24iLCAiYSIsICJjIiwgImF0dHJSZW1vdmUiLCAiYXR0clJlbW92ZU5TIiwgImF0dHJDb25zdGFudCIsICJhdHRyQ29uc3RhbnROUyIsICJhdHRyRnVuY3Rpb24iLCAiYXR0ckZ1bmN0aW9uTlMiLCAiYXR0cl9kZWZhdWx0IiwgImlkIiwgImdldCIsICJpZCIsICJzZXQiLCAiZ2V0IiwgImlkIiwgInNldCIsICJnZXQiLCAiaWQiLCAic2V0IiwgImZpbHRlcl9kZWZhdWx0IiwgIm0iLCAibWVyZ2VfZGVmYXVsdCIsICJ0cmFuc2l0aW9uIiwgIm0iLCAiaWQiLCAic2V0IiwgIm9uX2RlZmF1bHQiLCAiZ2V0IiwgImlkIiwgInJlbW92ZV9kZWZhdWx0IiwgInNlbGVjdF9kZWZhdWx0IiwgImlkIiwgIm0iLCAiZ2V0IiwgInNlbGVjdEFsbF9kZWZhdWx0IiwgImlkIiwgIm0iLCAiY2hpbGRyZW4iLCAiaW5oZXJpdCIsICJnZXQiLCAiU2VsZWN0aW9uIiwgInNlbGVjdGlvbl9kZWZhdWx0IiwgInN0eWxlUmVtb3ZlIiwgInN0eWxlQ29uc3RhbnQiLCAic3R5bGVGdW5jdGlvbiIsICJpZCIsICJyZW1vdmUiLCAic2V0IiwgInN0eWxlX2RlZmF1bHQiLCAidGV4dENvbnN0YW50IiwgInRleHRGdW5jdGlvbiIsICJ0ZXh0X2RlZmF1bHQiLCAibSIsICJpbmhlcml0IiwgImdldCIsICJpZCIsICJzZXQiLCAiaWQiLCAic2VsZWN0X2RlZmF1bHQiLCAic2VsZWN0QWxsX2RlZmF1bHQiLCAiZmlsdGVyX2RlZmF1bHQiLCAibWVyZ2VfZGVmYXVsdCIsICJzZWxlY3Rpb25fZGVmYXVsdCIsICJvbl9kZWZhdWx0IiwgImF0dHJfZGVmYXVsdCIsICJzdHlsZV9kZWZhdWx0IiwgInRleHRfZGVmYXVsdCIsICJyZW1vdmVfZGVmYXVsdCIsICJpZCIsICJ0cmFuc2l0aW9uX2RlZmF1bHQiLCAibSIsICJpbnRlcnJ1cHRfZGVmYXVsdCIsICJ0cmFuc2l0aW9uX2RlZmF1bHQiLCAieCIsICJ5IiwgIngiLCAieSIsICJ4IiwgInkiLCAieCIsICJ5IiwgImRhdGFfZGVmYXVsdCIsICJ4IiwgInkiLCAieDIiLCAieTIiLCAieDMiLCAieTMiLCAicmVtb3ZlX2RlZmF1bHQiLCAieCIsICJ5IiwgInNpemVfZGVmYXVsdCIsICJ4IiwgInkiLCAiY29weSIsICJkYXRhX2RlZmF1bHQiLCAicmVtb3ZlX2RlZmF1bHQiLCAic2l6ZV9kZWZhdWx0IiwgImNvbnN0YW50X2RlZmF1bHQiLCAieCIsICJjb25zdGFudF9kZWZhdWx0IiwgIngiLCAieSIsICJmaW5kIiwgImxpbmtzIiwgImlkIiwgImNvbnN0YW50X2RlZmF1bHQiLCAieCIsICJ5IiwgIm0iLCAiaSIsICJ4IiwgInkiLCAiY29uc3RhbnRfZGVmYXVsdCIsICJ4IiwgInkiLCAibm9kZSIsICJzdHJlbmd0aCIsICJjIiwgIngyIiwgIngiLCAieCIsICJ4IiwgIngiLCAieCIsICJ4IiwgImxvY2FsZSIsICJ6ZXJvIiwgInR5cGUiLCAiZm9ybWF0IiwgImMiLCAiZm9ybWF0UHJlZml4IiwgInZhbHVlIiwgIm1heCIsICJ4IiwgIm51bWJlciIsICJ4IiwgImlkZW50aXR5IiwgIngiLCAiYSIsICJpIiwgInRyYW5zZm9ybSIsICJ5IiwgIm51bWJlciIsICJzdGFydCIsICJzdGFydCIsICJsaW5lYXIiLCAiY29uc3RhbnRfZGVmYXVsdCIsICJ4IiwgInR5cGUiLCAidHJhbnNmb3JtIiwgImRpc3BhdGNoIiwgIngiLCAieSIsICJpZGVudGl0eSIsICJub3Byb3BhZ2F0aW9uIiwgIm5vZXZlbnRfZGVmYXVsdCIsICJkZWZhdWx0RmlsdGVyIiwgImlkZW50aXR5IiwgImRlZmF1bHRUb3VjaGFibGUiLCAidHJhbnNmb3JtIiwgInpvb21fZGVmYXVsdCIsICJmaWx0ZXIiLCAic2VsZWN0aW9uIiwgIngiLCAieSIsICJleHRlbnQiLCAidHJhbnNpdGlvbiIsICJhIiwgInR5cGUiLCAic2VsZWN0X2RlZmF1bHQiLCAibm9ldmVudF9kZWZhdWx0IiwgIm5vcHJvcGFnYXRpb24iLCAiZXZlbnQiLCAiY29uc3RhbnRfZGVmYXVsdCIsICJsaW5rcyIsICJ3aWtpIiwgInN1bW1hcnkiLCAicmVsYXRlZCIsICJzZWxlY3RfZGVmYXVsdCIsICJ6b29tX2RlZmF1bHQiLCAidHlwZSIsICJpbmRleCIsICJjb2xvciIsICJxdWFkdHJlZSIsICJ4MiIsICJ5MiIsICJ4IiwgInkiLCAiY29udGVudCIsICJpZCIsICJub2RlIiwgImxpbmtzIiwgImxpbmVhciIsICJ0cmFuc2Zvcm0iXQp9Cg==
