/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/axios/dist/browser/axios.cjs
var require_axios = __commonJS({
  "node_modules/axios/dist/browser/axios.cjs"(exports2, module2) {
    "use strict";
    function bind(fn, thisArg) {
      return function wrap() {
        return fn.apply(thisArg, arguments);
      };
    }
    var { toString } = Object.prototype;
    var { getPrototypeOf } = Object;
    var kindOf = ((cache) => (thing) => {
      const str = toString.call(thing);
      return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
    })(/* @__PURE__ */ Object.create(null));
    var kindOfTest = (type2) => {
      type2 = type2.toLowerCase();
      return (thing) => kindOf(thing) === type2;
    };
    var typeOfTest = (type2) => (thing) => typeof thing === type2;
    var { isArray } = Array;
    var isUndefined = typeOfTest("undefined");
    function isBuffer(val) {
      return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);
    }
    var isArrayBuffer = kindOfTest("ArrayBuffer");
    function isArrayBufferView(val) {
      let result2;
      if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
        result2 = ArrayBuffer.isView(val);
      } else {
        result2 = val && val.buffer && isArrayBuffer(val.buffer);
      }
      return result2;
    }
    var isString = typeOfTest("string");
    var isFunction = typeOfTest("function");
    var isNumber = typeOfTest("number");
    var isObject = (thing) => thing !== null && typeof thing === "object";
    var isBoolean = (thing) => thing === true || thing === false;
    var isPlainObject = (val) => {
      if (kindOf(val) !== "object") {
        return false;
      }
      const prototype2 = getPrototypeOf(val);
      return (prototype2 === null || prototype2 === Object.prototype || Object.getPrototypeOf(prototype2) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);
    };
    var isDate = kindOfTest("Date");
    var isFile = kindOfTest("File");
    var isBlob = kindOfTest("Blob");
    var isFileList = kindOfTest("FileList");
    var isStream = (val) => isObject(val) && isFunction(val.pipe);
    var isFormData = (thing) => {
      let kind;
      return thing && (typeof FormData === "function" && thing instanceof FormData || isFunction(thing.append) && ((kind = kindOf(thing)) === "formdata" || // detect form-data instance
      kind === "object" && isFunction(thing.toString) && thing.toString() === "[object FormData]"));
    };
    var isURLSearchParams = kindOfTest("URLSearchParams");
    var [isReadableStream, isRequest, isResponse, isHeaders] = ["ReadableStream", "Request", "Response", "Headers"].map(kindOfTest);
    var trim = (str) => str.trim ? str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
    function forEach(obj, fn, { allOwnKeys = false } = {}) {
      if (obj === null || typeof obj === "undefined") {
        return;
      }
      let i;
      let l;
      if (typeof obj !== "object") {
        obj = [obj];
      }
      if (isArray(obj)) {
        for (i = 0, l = obj.length; i < l; i++) {
          fn.call(null, obj[i], i, obj);
        }
      } else {
        const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
        const len = keys.length;
        let key;
        for (i = 0; i < len; i++) {
          key = keys[i];
          fn.call(null, obj[key], key, obj);
        }
      }
    }
    function findKey(obj, key) {
      key = key.toLowerCase();
      const keys = Object.keys(obj);
      let i = keys.length;
      let _key;
      while (i-- > 0) {
        _key = keys[i];
        if (key === _key.toLowerCase()) {
          return _key;
        }
      }
      return null;
    }
    var _global = (() => {
      if (typeof globalThis !== "undefined")
        return globalThis;
      return typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : global;
    })();
    var isContextDefined = (context) => !isUndefined(context) && context !== _global;
    function merge() {
      const { caseless } = isContextDefined(this) && this || {};
      const result2 = {};
      const assignValue = (val, key) => {
        const targetKey = caseless && findKey(result2, key) || key;
        if (isPlainObject(result2[targetKey]) && isPlainObject(val)) {
          result2[targetKey] = merge(result2[targetKey], val);
        } else if (isPlainObject(val)) {
          result2[targetKey] = merge({}, val);
        } else if (isArray(val)) {
          result2[targetKey] = val.slice();
        } else {
          result2[targetKey] = val;
        }
      };
      for (let i = 0, l = arguments.length; i < l; i++) {
        arguments[i] && forEach(arguments[i], assignValue);
      }
      return result2;
    }
    var extend2 = (a2, b, thisArg, { allOwnKeys } = {}) => {
      forEach(b, (val, key) => {
        if (thisArg && isFunction(val)) {
          a2[key] = bind(val, thisArg);
        } else {
          a2[key] = val;
        }
      }, { allOwnKeys });
      return a2;
    };
    var stripBOM = (content2) => {
      if (content2.charCodeAt(0) === 65279) {
        content2 = content2.slice(1);
      }
      return content2;
    };
    var inherits = (constructor, superConstructor, props, descriptors2) => {
      constructor.prototype = Object.create(superConstructor.prototype, descriptors2);
      constructor.prototype.constructor = constructor;
      Object.defineProperty(constructor, "super", {
        value: superConstructor.prototype
      });
      props && Object.assign(constructor.prototype, props);
    };
    var toFlatObject = (sourceObj, destObj, filter2, propFilter) => {
      let props;
      let i;
      let prop;
      const merged = {};
      destObj = destObj || {};
      if (sourceObj == null)
        return destObj;
      do {
        props = Object.getOwnPropertyNames(sourceObj);
        i = props.length;
        while (i-- > 0) {
          prop = props[i];
          if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
            destObj[prop] = sourceObj[prop];
            merged[prop] = true;
          }
        }
        sourceObj = filter2 !== false && getPrototypeOf(sourceObj);
      } while (sourceObj && (!filter2 || filter2(sourceObj, destObj)) && sourceObj !== Object.prototype);
      return destObj;
    };
    var endsWith = (str, searchString, position) => {
      str = String(str);
      if (position === void 0 || position > str.length) {
        position = str.length;
      }
      position -= searchString.length;
      const lastIndex = str.indexOf(searchString, position);
      return lastIndex !== -1 && lastIndex === position;
    };
    var toArray = (thing) => {
      if (!thing)
        return null;
      if (isArray(thing))
        return thing;
      let i = thing.length;
      if (!isNumber(i))
        return null;
      const arr = new Array(i);
      while (i-- > 0) {
        arr[i] = thing[i];
      }
      return arr;
    };
    var isTypedArray = ((TypedArray) => {
      return (thing) => {
        return TypedArray && thing instanceof TypedArray;
      };
    })(typeof Uint8Array !== "undefined" && getPrototypeOf(Uint8Array));
    var forEachEntry = (obj, fn) => {
      const generator = obj && obj[Symbol.iterator];
      const iterator = generator.call(obj);
      let result2;
      while ((result2 = iterator.next()) && !result2.done) {
        const pair = result2.value;
        fn.call(obj, pair[0], pair[1]);
      }
    };
    var matchAll = (regExp, str) => {
      let matches;
      const arr = [];
      while ((matches = regExp.exec(str)) !== null) {
        arr.push(matches);
      }
      return arr;
    };
    var isHTMLForm = kindOfTest("HTMLFormElement");
    var toCamelCase = (str) => {
      return str.toLowerCase().replace(
        /[-_\s]([a-z\d])(\w*)/g,
        function replacer(m2, p1, p2) {
          return p1.toUpperCase() + p2;
        }
      );
    };
    var hasOwnProperty = (({ hasOwnProperty: hasOwnProperty2 }) => (obj, prop) => hasOwnProperty2.call(obj, prop))(Object.prototype);
    var isRegExp = kindOfTest("RegExp");
    var reduceDescriptors = (obj, reducer) => {
      const descriptors2 = Object.getOwnPropertyDescriptors(obj);
      const reducedDescriptors = {};
      forEach(descriptors2, (descriptor, name) => {
        let ret;
        if ((ret = reducer(descriptor, name, obj)) !== false) {
          reducedDescriptors[name] = ret || descriptor;
        }
      });
      Object.defineProperties(obj, reducedDescriptors);
    };
    var freezeMethods = (obj) => {
      reduceDescriptors(obj, (descriptor, name) => {
        if (isFunction(obj) && ["arguments", "caller", "callee"].indexOf(name) !== -1) {
          return false;
        }
        const value = obj[name];
        if (!isFunction(value))
          return;
        descriptor.enumerable = false;
        if ("writable" in descriptor) {
          descriptor.writable = false;
          return;
        }
        if (!descriptor.set) {
          descriptor.set = () => {
            throw Error("Can not rewrite read-only method '" + name + "'");
          };
        }
      });
    };
    var toObjectSet = (arrayOrString, delimiter) => {
      const obj = {};
      const define = (arr) => {
        arr.forEach((value) => {
          obj[value] = true;
        });
      };
      isArray(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));
      return obj;
    };
    var noop2 = () => {
    };
    var toFiniteNumber = (value, defaultValue) => {
      return value != null && Number.isFinite(value = +value) ? value : defaultValue;
    };
    var ALPHA = "abcdefghijklmnopqrstuvwxyz";
    var DIGIT = "0123456789";
    var ALPHABET = {
      DIGIT,
      ALPHA,
      ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT
    };
    var generateString = (size = 16, alphabet = ALPHABET.ALPHA_DIGIT) => {
      let str = "";
      const { length } = alphabet;
      while (size--) {
        str += alphabet[Math.random() * length | 0];
      }
      return str;
    };
    function isSpecCompliantForm(thing) {
      return !!(thing && isFunction(thing.append) && thing[Symbol.toStringTag] === "FormData" && thing[Symbol.iterator]);
    }
    var toJSONObject = (obj) => {
      const stack = new Array(10);
      const visit = (source, i) => {
        if (isObject(source)) {
          if (stack.indexOf(source) >= 0) {
            return;
          }
          if (!("toJSON" in source)) {
            stack[i] = source;
            const target = isArray(source) ? [] : {};
            forEach(source, (value, key) => {
              const reducedValue = visit(value, i + 1);
              !isUndefined(reducedValue) && (target[key] = reducedValue);
            });
            stack[i] = void 0;
            return target;
          }
        }
        return source;
      };
      return visit(obj, 0);
    };
    var isAsyncFn = kindOfTest("AsyncFunction");
    var isThenable = (thing) => thing && (isObject(thing) || isFunction(thing)) && isFunction(thing.then) && isFunction(thing.catch);
    var _setImmediate = ((setImmediateSupported, postMessageSupported) => {
      if (setImmediateSupported) {
        return setImmediate;
      }
      return postMessageSupported ? ((token, callbacks) => {
        _global.addEventListener("message", ({ source, data }) => {
          if (source === _global && data === token) {
            callbacks.length && callbacks.shift()();
          }
        }, false);
        return (cb) => {
          callbacks.push(cb);
          _global.postMessage(token, "*");
        };
      })(`axios@${Math.random()}`, []) : (cb) => setTimeout(cb);
    })(
      typeof setImmediate === "function",
      isFunction(_global.postMessage)
    );
    var asap = typeof queueMicrotask !== "undefined" ? queueMicrotask.bind(_global) : typeof process !== "undefined" && process.nextTick || _setImmediate;
    var utils$1 = {
      isArray,
      isArrayBuffer,
      isBuffer,
      isFormData,
      isArrayBufferView,
      isString,
      isNumber,
      isBoolean,
      isObject,
      isPlainObject,
      isReadableStream,
      isRequest,
      isResponse,
      isHeaders,
      isUndefined,
      isDate,
      isFile,
      isBlob,
      isRegExp,
      isFunction,
      isStream,
      isURLSearchParams,
      isTypedArray,
      isFileList,
      forEach,
      merge,
      extend: extend2,
      trim,
      stripBOM,
      inherits,
      toFlatObject,
      kindOf,
      kindOfTest,
      endsWith,
      toArray,
      forEachEntry,
      matchAll,
      isHTMLForm,
      hasOwnProperty,
      hasOwnProp: hasOwnProperty,
      // an alias to avoid ESLint no-prototype-builtins detection
      reduceDescriptors,
      freezeMethods,
      toObjectSet,
      toCamelCase,
      noop: noop2,
      toFiniteNumber,
      findKey,
      global: _global,
      isContextDefined,
      ALPHABET,
      generateString,
      isSpecCompliantForm,
      toJSONObject,
      isAsyncFn,
      isThenable,
      setImmediate: _setImmediate,
      asap
    };
    function AxiosError(message, code, config, request, response) {
      Error.call(this);
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, this.constructor);
      } else {
        this.stack = new Error().stack;
      }
      this.message = message;
      this.name = "AxiosError";
      code && (this.code = code);
      config && (this.config = config);
      request && (this.request = request);
      if (response) {
        this.response = response;
        this.status = response.status ? response.status : null;
      }
    }
    utils$1.inherits(AxiosError, Error, {
      toJSON: function toJSON() {
        return {
          // Standard
          message: this.message,
          name: this.name,
          // Microsoft
          description: this.description,
          number: this.number,
          // Mozilla
          fileName: this.fileName,
          lineNumber: this.lineNumber,
          columnNumber: this.columnNumber,
          stack: this.stack,
          // Axios
          config: utils$1.toJSONObject(this.config),
          code: this.code,
          status: this.status
        };
      }
    });
    var prototype$1 = AxiosError.prototype;
    var descriptors = {};
    [
      "ERR_BAD_OPTION_VALUE",
      "ERR_BAD_OPTION",
      "ECONNABORTED",
      "ETIMEDOUT",
      "ERR_NETWORK",
      "ERR_FR_TOO_MANY_REDIRECTS",
      "ERR_DEPRECATED",
      "ERR_BAD_RESPONSE",
      "ERR_BAD_REQUEST",
      "ERR_CANCELED",
      "ERR_NOT_SUPPORT",
      "ERR_INVALID_URL"
      // eslint-disable-next-line func-names
    ].forEach((code) => {
      descriptors[code] = { value: code };
    });
    Object.defineProperties(AxiosError, descriptors);
    Object.defineProperty(prototype$1, "isAxiosError", { value: true });
    AxiosError.from = (error, code, config, request, response, customProps) => {
      const axiosError = Object.create(prototype$1);
      utils$1.toFlatObject(error, axiosError, function filter2(obj) {
        return obj !== Error.prototype;
      }, (prop) => {
        return prop !== "isAxiosError";
      });
      AxiosError.call(axiosError, error.message, code, config, request, response);
      axiosError.cause = error;
      axiosError.name = error.name;
      customProps && Object.assign(axiosError, customProps);
      return axiosError;
    };
    var httpAdapter = null;
    function isVisitable(thing) {
      return utils$1.isPlainObject(thing) || utils$1.isArray(thing);
    }
    function removeBrackets(key) {
      return utils$1.endsWith(key, "[]") ? key.slice(0, -2) : key;
    }
    function renderKey(path, key, dots) {
      if (!path)
        return key;
      return path.concat(key).map(function each(token, i) {
        token = removeBrackets(token);
        return !dots && i ? "[" + token + "]" : token;
      }).join(dots ? "." : "");
    }
    function isFlatArray(arr) {
      return utils$1.isArray(arr) && !arr.some(isVisitable);
    }
    var predicates = utils$1.toFlatObject(utils$1, {}, null, function filter2(prop) {
      return /^is[A-Z]/.test(prop);
    });
    function toFormData(obj, formData, options) {
      if (!utils$1.isObject(obj)) {
        throw new TypeError("target must be an object");
      }
      formData = formData || new FormData();
      options = utils$1.toFlatObject(options, {
        metaTokens: true,
        dots: false,
        indexes: false
      }, false, function defined(option, source) {
        return !utils$1.isUndefined(source[option]);
      });
      const metaTokens = options.metaTokens;
      const visitor = options.visitor || defaultVisitor;
      const dots = options.dots;
      const indexes = options.indexes;
      const _Blob = options.Blob || typeof Blob !== "undefined" && Blob;
      const useBlob = _Blob && utils$1.isSpecCompliantForm(formData);
      if (!utils$1.isFunction(visitor)) {
        throw new TypeError("visitor must be a function");
      }
      function convertValue(value) {
        if (value === null)
          return "";
        if (utils$1.isDate(value)) {
          return value.toISOString();
        }
        if (!useBlob && utils$1.isBlob(value)) {
          throw new AxiosError("Blob is not supported. Use a Buffer instead.");
        }
        if (utils$1.isArrayBuffer(value) || utils$1.isTypedArray(value)) {
          return useBlob && typeof Blob === "function" ? new Blob([value]) : Buffer.from(value);
        }
        return value;
      }
      function defaultVisitor(value, key, path) {
        let arr = value;
        if (value && !path && typeof value === "object") {
          if (utils$1.endsWith(key, "{}")) {
            key = metaTokens ? key : key.slice(0, -2);
            value = JSON.stringify(value);
          } else if (utils$1.isArray(value) && isFlatArray(value) || (utils$1.isFileList(value) || utils$1.endsWith(key, "[]")) && (arr = utils$1.toArray(value))) {
            key = removeBrackets(key);
            arr.forEach(function each(el, index2) {
              !(utils$1.isUndefined(el) || el === null) && formData.append(
                // eslint-disable-next-line no-nested-ternary
                indexes === true ? renderKey([key], index2, dots) : indexes === null ? key : key + "[]",
                convertValue(el)
              );
            });
            return false;
          }
        }
        if (isVisitable(value)) {
          return true;
        }
        formData.append(renderKey(path, key, dots), convertValue(value));
        return false;
      }
      const stack = [];
      const exposedHelpers = Object.assign(predicates, {
        defaultVisitor,
        convertValue,
        isVisitable
      });
      function build(value, path) {
        if (utils$1.isUndefined(value))
          return;
        if (stack.indexOf(value) !== -1) {
          throw Error("Circular reference detected in " + path.join("."));
        }
        stack.push(value);
        utils$1.forEach(value, function each(el, key) {
          const result2 = !(utils$1.isUndefined(el) || el === null) && visitor.call(
            formData,
            el,
            utils$1.isString(key) ? key.trim() : key,
            path,
            exposedHelpers
          );
          if (result2 === true) {
            build(el, path ? path.concat(key) : [key]);
          }
        });
        stack.pop();
      }
      if (!utils$1.isObject(obj)) {
        throw new TypeError("data must be an object");
      }
      build(obj);
      return formData;
    }
    function encode$1(str) {
      const charMap = {
        "!": "%21",
        "'": "%27",
        "(": "%28",
        ")": "%29",
        "~": "%7E",
        "%20": "+",
        "%00": "\0"
      };
      return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {
        return charMap[match];
      });
    }
    function AxiosURLSearchParams(params, options) {
      this._pairs = [];
      params && toFormData(params, this, options);
    }
    var prototype = AxiosURLSearchParams.prototype;
    prototype.append = function append(name, value) {
      this._pairs.push([name, value]);
    };
    prototype.toString = function toString2(encoder) {
      const _encode = encoder ? function(value) {
        return encoder.call(this, value, encode$1);
      } : encode$1;
      return this._pairs.map(function each(pair) {
        return _encode(pair[0]) + "=" + _encode(pair[1]);
      }, "").join("&");
    };
    function encode(val) {
      return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
    }
    function buildURL(url, params, options) {
      if (!params) {
        return url;
      }
      const _encode = options && options.encode || encode;
      if (utils$1.isFunction(options)) {
        options = {
          serialize: options
        };
      }
      const serializeFn = options && options.serialize;
      let serializedParams;
      if (serializeFn) {
        serializedParams = serializeFn(params, options);
      } else {
        serializedParams = utils$1.isURLSearchParams(params) ? params.toString() : new AxiosURLSearchParams(params, options).toString(_encode);
      }
      if (serializedParams) {
        const hashmarkIndex = url.indexOf("#");
        if (hashmarkIndex !== -1) {
          url = url.slice(0, hashmarkIndex);
        }
        url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
      }
      return url;
    }
    var InterceptorManager = class {
      constructor() {
        this.handlers = [];
      }
      /**
       * Add a new interceptor to the stack
       *
       * @param {Function} fulfilled The function to handle `then` for a `Promise`
       * @param {Function} rejected The function to handle `reject` for a `Promise`
       *
       * @return {Number} An ID used to remove interceptor later
       */
      use(fulfilled, rejected, options) {
        this.handlers.push({
          fulfilled,
          rejected,
          synchronous: options ? options.synchronous : false,
          runWhen: options ? options.runWhen : null
        });
        return this.handlers.length - 1;
      }
      /**
       * Remove an interceptor from the stack
       *
       * @param {Number} id The ID that was returned by `use`
       *
       * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
       */
      eject(id2) {
        if (this.handlers[id2]) {
          this.handlers[id2] = null;
        }
      }
      /**
       * Clear all interceptors from the stack
       *
       * @returns {void}
       */
      clear() {
        if (this.handlers) {
          this.handlers = [];
        }
      }
      /**
       * Iterate over all the registered interceptors
       *
       * This method is particularly useful for skipping over any
       * interceptors that may have become `null` calling `eject`.
       *
       * @param {Function} fn The function to call for each interceptor
       *
       * @returns {void}
       */
      forEach(fn) {
        utils$1.forEach(this.handlers, function forEachHandler(h) {
          if (h !== null) {
            fn(h);
          }
        });
      }
    };
    var InterceptorManager$1 = InterceptorManager;
    var transitionalDefaults = {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    };
    var URLSearchParams$1 = typeof URLSearchParams !== "undefined" ? URLSearchParams : AxiosURLSearchParams;
    var FormData$1 = typeof FormData !== "undefined" ? FormData : null;
    var Blob$1 = typeof Blob !== "undefined" ? Blob : null;
    var platform$1 = {
      isBrowser: true,
      classes: {
        URLSearchParams: URLSearchParams$1,
        FormData: FormData$1,
        Blob: Blob$1
      },
      protocols: ["http", "https", "file", "blob", "url", "data"]
    };
    var hasBrowserEnv = typeof window !== "undefined" && typeof document !== "undefined";
    var _navigator = typeof navigator === "object" && navigator || void 0;
    var hasStandardBrowserEnv = hasBrowserEnv && (!_navigator || ["ReactNative", "NativeScript", "NS"].indexOf(_navigator.product) < 0);
    var hasStandardBrowserWebWorkerEnv = (() => {
      return typeof WorkerGlobalScope !== "undefined" && // eslint-disable-next-line no-undef
      self instanceof WorkerGlobalScope && typeof self.importScripts === "function";
    })();
    var origin = hasBrowserEnv && window.location.href || "http://localhost";
    var utils = /* @__PURE__ */ Object.freeze({
      __proto__: null,
      hasBrowserEnv,
      hasStandardBrowserWebWorkerEnv,
      hasStandardBrowserEnv,
      navigator: _navigator,
      origin
    });
    var platform = {
      ...utils,
      ...platform$1
    };
    function toURLEncodedForm(data, options) {
      return toFormData(data, new platform.classes.URLSearchParams(), Object.assign({
        visitor: function(value, key, path, helpers) {
          if (platform.isNode && utils$1.isBuffer(value)) {
            this.append(key, value.toString("base64"));
            return false;
          }
          return helpers.defaultVisitor.apply(this, arguments);
        }
      }, options));
    }
    function parsePropPath(name) {
      return utils$1.matchAll(/\w+|\[(\w*)]/g, name).map((match) => {
        return match[0] === "[]" ? "" : match[1] || match[0];
      });
    }
    function arrayToObject(arr) {
      const obj = {};
      const keys = Object.keys(arr);
      let i;
      const len = keys.length;
      let key;
      for (i = 0; i < len; i++) {
        key = keys[i];
        obj[key] = arr[key];
      }
      return obj;
    }
    function formDataToJSON(formData) {
      function buildPath(path, value, target, index2) {
        let name = path[index2++];
        if (name === "__proto__")
          return true;
        const isNumericKey = Number.isFinite(+name);
        const isLast = index2 >= path.length;
        name = !name && utils$1.isArray(target) ? target.length : name;
        if (isLast) {
          if (utils$1.hasOwnProp(target, name)) {
            target[name] = [target[name], value];
          } else {
            target[name] = value;
          }
          return !isNumericKey;
        }
        if (!target[name] || !utils$1.isObject(target[name])) {
          target[name] = [];
        }
        const result2 = buildPath(path, value, target[name], index2);
        if (result2 && utils$1.isArray(target[name])) {
          target[name] = arrayToObject(target[name]);
        }
        return !isNumericKey;
      }
      if (utils$1.isFormData(formData) && utils$1.isFunction(formData.entries)) {
        const obj = {};
        utils$1.forEachEntry(formData, (name, value) => {
          buildPath(parsePropPath(name), value, obj, 0);
        });
        return obj;
      }
      return null;
    }
    function stringifySafely(rawValue, parser, encoder) {
      if (utils$1.isString(rawValue)) {
        try {
          (parser || JSON.parse)(rawValue);
          return utils$1.trim(rawValue);
        } catch (e) {
          if (e.name !== "SyntaxError") {
            throw e;
          }
        }
      }
      return (encoder || JSON.stringify)(rawValue);
    }
    var defaults = {
      transitional: transitionalDefaults,
      adapter: ["xhr", "http", "fetch"],
      transformRequest: [function transformRequest(data, headers) {
        const contentType = headers.getContentType() || "";
        const hasJSONContentType = contentType.indexOf("application/json") > -1;
        const isObjectPayload = utils$1.isObject(data);
        if (isObjectPayload && utils$1.isHTMLForm(data)) {
          data = new FormData(data);
        }
        const isFormData2 = utils$1.isFormData(data);
        if (isFormData2) {
          return hasJSONContentType ? JSON.stringify(formDataToJSON(data)) : data;
        }
        if (utils$1.isArrayBuffer(data) || utils$1.isBuffer(data) || utils$1.isStream(data) || utils$1.isFile(data) || utils$1.isBlob(data) || utils$1.isReadableStream(data)) {
          return data;
        }
        if (utils$1.isArrayBufferView(data)) {
          return data.buffer;
        }
        if (utils$1.isURLSearchParams(data)) {
          headers.setContentType("application/x-www-form-urlencoded;charset=utf-8", false);
          return data.toString();
        }
        let isFileList2;
        if (isObjectPayload) {
          if (contentType.indexOf("application/x-www-form-urlencoded") > -1) {
            return toURLEncodedForm(data, this.formSerializer).toString();
          }
          if ((isFileList2 = utils$1.isFileList(data)) || contentType.indexOf("multipart/form-data") > -1) {
            const _FormData = this.env && this.env.FormData;
            return toFormData(
              isFileList2 ? { "files[]": data } : data,
              _FormData && new _FormData(),
              this.formSerializer
            );
          }
        }
        if (isObjectPayload || hasJSONContentType) {
          headers.setContentType("application/json", false);
          return stringifySafely(data);
        }
        return data;
      }],
      transformResponse: [function transformResponse(data) {
        const transitional = this.transitional || defaults.transitional;
        const forcedJSONParsing = transitional && transitional.forcedJSONParsing;
        const JSONRequested = this.responseType === "json";
        if (utils$1.isResponse(data) || utils$1.isReadableStream(data)) {
          return data;
        }
        if (data && utils$1.isString(data) && (forcedJSONParsing && !this.responseType || JSONRequested)) {
          const silentJSONParsing = transitional && transitional.silentJSONParsing;
          const strictJSONParsing = !silentJSONParsing && JSONRequested;
          try {
            return JSON.parse(data);
          } catch (e) {
            if (strictJSONParsing) {
              if (e.name === "SyntaxError") {
                throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);
              }
              throw e;
            }
          }
        }
        return data;
      }],
      /**
       * A timeout in milliseconds to abort a request. If set to 0 (default) a
       * timeout is not created.
       */
      timeout: 0,
      xsrfCookieName: "XSRF-TOKEN",
      xsrfHeaderName: "X-XSRF-TOKEN",
      maxContentLength: -1,
      maxBodyLength: -1,
      env: {
        FormData: platform.classes.FormData,
        Blob: platform.classes.Blob
      },
      validateStatus: function validateStatus(status) {
        return status >= 200 && status < 300;
      },
      headers: {
        common: {
          "Accept": "application/json, text/plain, */*",
          "Content-Type": void 0
        }
      }
    };
    utils$1.forEach(["delete", "get", "head", "post", "put", "patch"], (method) => {
      defaults.headers[method] = {};
    });
    var defaults$1 = defaults;
    var ignoreDuplicateOf = utils$1.toObjectSet([
      "age",
      "authorization",
      "content-length",
      "content-type",
      "etag",
      "expires",
      "from",
      "host",
      "if-modified-since",
      "if-unmodified-since",
      "last-modified",
      "location",
      "max-forwards",
      "proxy-authorization",
      "referer",
      "retry-after",
      "user-agent"
    ]);
    var parseHeaders = (rawHeaders) => {
      const parsed = {};
      let key;
      let val;
      let i;
      rawHeaders && rawHeaders.split("\n").forEach(function parser(line) {
        i = line.indexOf(":");
        key = line.substring(0, i).trim().toLowerCase();
        val = line.substring(i + 1).trim();
        if (!key || parsed[key] && ignoreDuplicateOf[key]) {
          return;
        }
        if (key === "set-cookie") {
          if (parsed[key]) {
            parsed[key].push(val);
          } else {
            parsed[key] = [val];
          }
        } else {
          parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
        }
      });
      return parsed;
    };
    var $internals = Symbol("internals");
    function normalizeHeader(header) {
      return header && String(header).trim().toLowerCase();
    }
    function normalizeValue(value) {
      if (value === false || value == null) {
        return value;
      }
      return utils$1.isArray(value) ? value.map(normalizeValue) : String(value);
    }
    function parseTokens(str) {
      const tokens = /* @__PURE__ */ Object.create(null);
      const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
      let match;
      while (match = tokensRE.exec(str)) {
        tokens[match[1]] = match[2];
      }
      return tokens;
    }
    var isValidHeaderName = (str) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());
    function matchHeaderValue(context, value, header, filter2, isHeaderNameFilter) {
      if (utils$1.isFunction(filter2)) {
        return filter2.call(this, value, header);
      }
      if (isHeaderNameFilter) {
        value = header;
      }
      if (!utils$1.isString(value))
        return;
      if (utils$1.isString(filter2)) {
        return value.indexOf(filter2) !== -1;
      }
      if (utils$1.isRegExp(filter2)) {
        return filter2.test(value);
      }
    }
    function formatHeader(header) {
      return header.trim().toLowerCase().replace(/([a-z\d])(\w*)/g, (w, char, str) => {
        return char.toUpperCase() + str;
      });
    }
    function buildAccessors(obj, header) {
      const accessorName = utils$1.toCamelCase(" " + header);
      ["get", "set", "has"].forEach((methodName) => {
        Object.defineProperty(obj, methodName + accessorName, {
          value: function(arg1, arg2, arg3) {
            return this[methodName].call(this, header, arg1, arg2, arg3);
          },
          configurable: true
        });
      });
    }
    var AxiosHeaders = class {
      constructor(headers) {
        headers && this.set(headers);
      }
      set(header, valueOrRewrite, rewrite) {
        const self2 = this;
        function setHeader(_value, _header, _rewrite) {
          const lHeader = normalizeHeader(_header);
          if (!lHeader) {
            throw new Error("header name must be a non-empty string");
          }
          const key = utils$1.findKey(self2, lHeader);
          if (!key || self2[key] === void 0 || _rewrite === true || _rewrite === void 0 && self2[key] !== false) {
            self2[key || _header] = normalizeValue(_value);
          }
        }
        const setHeaders = (headers, _rewrite) => utils$1.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));
        if (utils$1.isPlainObject(header) || header instanceof this.constructor) {
          setHeaders(header, valueOrRewrite);
        } else if (utils$1.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {
          setHeaders(parseHeaders(header), valueOrRewrite);
        } else if (utils$1.isHeaders(header)) {
          for (const [key, value] of header.entries()) {
            setHeader(value, key, rewrite);
          }
        } else {
          header != null && setHeader(valueOrRewrite, header, rewrite);
        }
        return this;
      }
      get(header, parser) {
        header = normalizeHeader(header);
        if (header) {
          const key = utils$1.findKey(this, header);
          if (key) {
            const value = this[key];
            if (!parser) {
              return value;
            }
            if (parser === true) {
              return parseTokens(value);
            }
            if (utils$1.isFunction(parser)) {
              return parser.call(this, value, key);
            }
            if (utils$1.isRegExp(parser)) {
              return parser.exec(value);
            }
            throw new TypeError("parser must be boolean|regexp|function");
          }
        }
      }
      has(header, matcher) {
        header = normalizeHeader(header);
        if (header) {
          const key = utils$1.findKey(this, header);
          return !!(key && this[key] !== void 0 && (!matcher || matchHeaderValue(this, this[key], key, matcher)));
        }
        return false;
      }
      delete(header, matcher) {
        const self2 = this;
        let deleted = false;
        function deleteHeader(_header) {
          _header = normalizeHeader(_header);
          if (_header) {
            const key = utils$1.findKey(self2, _header);
            if (key && (!matcher || matchHeaderValue(self2, self2[key], key, matcher))) {
              delete self2[key];
              deleted = true;
            }
          }
        }
        if (utils$1.isArray(header)) {
          header.forEach(deleteHeader);
        } else {
          deleteHeader(header);
        }
        return deleted;
      }
      clear(matcher) {
        const keys = Object.keys(this);
        let i = keys.length;
        let deleted = false;
        while (i--) {
          const key = keys[i];
          if (!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {
            delete this[key];
            deleted = true;
          }
        }
        return deleted;
      }
      normalize(format2) {
        const self2 = this;
        const headers = {};
        utils$1.forEach(this, (value, header) => {
          const key = utils$1.findKey(headers, header);
          if (key) {
            self2[key] = normalizeValue(value);
            delete self2[header];
            return;
          }
          const normalized = format2 ? formatHeader(header) : String(header).trim();
          if (normalized !== header) {
            delete self2[header];
          }
          self2[normalized] = normalizeValue(value);
          headers[normalized] = true;
        });
        return this;
      }
      concat(...targets) {
        return this.constructor.concat(this, ...targets);
      }
      toJSON(asStrings) {
        const obj = /* @__PURE__ */ Object.create(null);
        utils$1.forEach(this, (value, header) => {
          value != null && value !== false && (obj[header] = asStrings && utils$1.isArray(value) ? value.join(", ") : value);
        });
        return obj;
      }
      [Symbol.iterator]() {
        return Object.entries(this.toJSON())[Symbol.iterator]();
      }
      toString() {
        return Object.entries(this.toJSON()).map(([header, value]) => header + ": " + value).join("\n");
      }
      get [Symbol.toStringTag]() {
        return "AxiosHeaders";
      }
      static from(thing) {
        return thing instanceof this ? thing : new this(thing);
      }
      static concat(first, ...targets) {
        const computed = new this(first);
        targets.forEach((target) => computed.set(target));
        return computed;
      }
      static accessor(header) {
        const internals = this[$internals] = this[$internals] = {
          accessors: {}
        };
        const accessors = internals.accessors;
        const prototype2 = this.prototype;
        function defineAccessor(_header) {
          const lHeader = normalizeHeader(_header);
          if (!accessors[lHeader]) {
            buildAccessors(prototype2, _header);
            accessors[lHeader] = true;
          }
        }
        utils$1.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);
        return this;
      }
    };
    AxiosHeaders.accessor(["Content-Type", "Content-Length", "Accept", "Accept-Encoding", "User-Agent", "Authorization"]);
    utils$1.reduceDescriptors(AxiosHeaders.prototype, ({ value }, key) => {
      let mapped = key[0].toUpperCase() + key.slice(1);
      return {
        get: () => value,
        set(headerValue) {
          this[mapped] = headerValue;
        }
      };
    });
    utils$1.freezeMethods(AxiosHeaders);
    var AxiosHeaders$1 = AxiosHeaders;
    function transformData(fns, response) {
      const config = this || defaults$1;
      const context = response || config;
      const headers = AxiosHeaders$1.from(context.headers);
      let data = context.data;
      utils$1.forEach(fns, function transform2(fn) {
        data = fn.call(config, data, headers.normalize(), response ? response.status : void 0);
      });
      headers.normalize();
      return data;
    }
    function isCancel(value) {
      return !!(value && value.__CANCEL__);
    }
    function CanceledError(message, config, request) {
      AxiosError.call(this, message == null ? "canceled" : message, AxiosError.ERR_CANCELED, config, request);
      this.name = "CanceledError";
    }
    utils$1.inherits(CanceledError, AxiosError, {
      __CANCEL__: true
    });
    function settle(resolve, reject, response) {
      const validateStatus = response.config.validateStatus;
      if (!response.status || !validateStatus || validateStatus(response.status)) {
        resolve(response);
      } else {
        reject(new AxiosError(
          "Request failed with status code " + response.status,
          [AxiosError.ERR_BAD_REQUEST, AxiosError.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
          response.config,
          response.request,
          response
        ));
      }
    }
    function parseProtocol(url) {
      const match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
      return match && match[1] || "";
    }
    function speedometer(samplesCount, min2) {
      samplesCount = samplesCount || 10;
      const bytes = new Array(samplesCount);
      const timestamps = new Array(samplesCount);
      let head = 0;
      let tail = 0;
      let firstSampleTS;
      min2 = min2 !== void 0 ? min2 : 1e3;
      return function push(chunkLength) {
        const now2 = Date.now();
        const startedAt = timestamps[tail];
        if (!firstSampleTS) {
          firstSampleTS = now2;
        }
        bytes[head] = chunkLength;
        timestamps[head] = now2;
        let i = tail;
        let bytesCount = 0;
        while (i !== head) {
          bytesCount += bytes[i++];
          i = i % samplesCount;
        }
        head = (head + 1) % samplesCount;
        if (head === tail) {
          tail = (tail + 1) % samplesCount;
        }
        if (now2 - firstSampleTS < min2) {
          return;
        }
        const passed = startedAt && now2 - startedAt;
        return passed ? Math.round(bytesCount * 1e3 / passed) : void 0;
      };
    }
    function throttle(fn, freq) {
      let timestamp = 0;
      let threshold = 1e3 / freq;
      let lastArgs;
      let timer2;
      const invoke = (args, now2 = Date.now()) => {
        timestamp = now2;
        lastArgs = null;
        if (timer2) {
          clearTimeout(timer2);
          timer2 = null;
        }
        fn.apply(null, args);
      };
      const throttled = (...args) => {
        const now2 = Date.now();
        const passed = now2 - timestamp;
        if (passed >= threshold) {
          invoke(args, now2);
        } else {
          lastArgs = args;
          if (!timer2) {
            timer2 = setTimeout(() => {
              timer2 = null;
              invoke(lastArgs);
            }, threshold - passed);
          }
        }
      };
      const flush = () => lastArgs && invoke(lastArgs);
      return [throttled, flush];
    }
    var progressEventReducer = (listener, isDownloadStream, freq = 3) => {
      let bytesNotified = 0;
      const _speedometer = speedometer(50, 250);
      return throttle((e) => {
        const loaded = e.loaded;
        const total = e.lengthComputable ? e.total : void 0;
        const progressBytes = loaded - bytesNotified;
        const rate = _speedometer(progressBytes);
        const inRange = loaded <= total;
        bytesNotified = loaded;
        const data = {
          loaded,
          total,
          progress: total ? loaded / total : void 0,
          bytes: progressBytes,
          rate: rate ? rate : void 0,
          estimated: rate && total && inRange ? (total - loaded) / rate : void 0,
          event: e,
          lengthComputable: total != null,
          [isDownloadStream ? "download" : "upload"]: true
        };
        listener(data);
      }, freq);
    };
    var progressEventDecorator = (total, throttled) => {
      const lengthComputable = total != null;
      return [(loaded) => throttled[0]({
        lengthComputable,
        total,
        loaded
      }), throttled[1]];
    };
    var asyncDecorator = (fn) => (...args) => utils$1.asap(() => fn(...args));
    var isURLSameOrigin = platform.hasStandardBrowserEnv ? ((origin2, isMSIE) => (url) => {
      url = new URL(url, platform.origin);
      return origin2.protocol === url.protocol && origin2.host === url.host && (isMSIE || origin2.port === url.port);
    })(
      new URL(platform.origin),
      platform.navigator && /(msie|trident)/i.test(platform.navigator.userAgent)
    ) : () => true;
    var cookies = platform.hasStandardBrowserEnv ? (
      // Standard browser envs support document.cookie
      {
        write(name, value, expires, path, domain, secure) {
          const cookie = [name + "=" + encodeURIComponent(value)];
          utils$1.isNumber(expires) && cookie.push("expires=" + new Date(expires).toGMTString());
          utils$1.isString(path) && cookie.push("path=" + path);
          utils$1.isString(domain) && cookie.push("domain=" + domain);
          secure === true && cookie.push("secure");
          document.cookie = cookie.join("; ");
        },
        read(name) {
          const match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
          return match ? decodeURIComponent(match[3]) : null;
        },
        remove(name) {
          this.write(name, "", Date.now() - 864e5);
        }
      }
    ) : (
      // Non-standard browser env (web workers, react-native) lack needed support.
      {
        write() {
        },
        read() {
          return null;
        },
        remove() {
        }
      }
    );
    function isAbsoluteURL(url) {
      return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
    }
    function combineURLs(baseURL, relativeURL) {
      return relativeURL ? baseURL.replace(/\/?\/$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
    }
    function buildFullPath(baseURL, requestedURL) {
      if (baseURL && !isAbsoluteURL(requestedURL)) {
        return combineURLs(baseURL, requestedURL);
      }
      return requestedURL;
    }
    var headersToObject = (thing) => thing instanceof AxiosHeaders$1 ? { ...thing } : thing;
    function mergeConfig(config1, config2) {
      config2 = config2 || {};
      const config = {};
      function getMergedValue(target, source, prop, caseless) {
        if (utils$1.isPlainObject(target) && utils$1.isPlainObject(source)) {
          return utils$1.merge.call({ caseless }, target, source);
        } else if (utils$1.isPlainObject(source)) {
          return utils$1.merge({}, source);
        } else if (utils$1.isArray(source)) {
          return source.slice();
        }
        return source;
      }
      function mergeDeepProperties(a2, b, prop, caseless) {
        if (!utils$1.isUndefined(b)) {
          return getMergedValue(a2, b, prop, caseless);
        } else if (!utils$1.isUndefined(a2)) {
          return getMergedValue(void 0, a2, prop, caseless);
        }
      }
      function valueFromConfig2(a2, b) {
        if (!utils$1.isUndefined(b)) {
          return getMergedValue(void 0, b);
        }
      }
      function defaultToConfig2(a2, b) {
        if (!utils$1.isUndefined(b)) {
          return getMergedValue(void 0, b);
        } else if (!utils$1.isUndefined(a2)) {
          return getMergedValue(void 0, a2);
        }
      }
      function mergeDirectKeys(a2, b, prop) {
        if (prop in config2) {
          return getMergedValue(a2, b);
        } else if (prop in config1) {
          return getMergedValue(void 0, a2);
        }
      }
      const mergeMap = {
        url: valueFromConfig2,
        method: valueFromConfig2,
        data: valueFromConfig2,
        baseURL: defaultToConfig2,
        transformRequest: defaultToConfig2,
        transformResponse: defaultToConfig2,
        paramsSerializer: defaultToConfig2,
        timeout: defaultToConfig2,
        timeoutMessage: defaultToConfig2,
        withCredentials: defaultToConfig2,
        withXSRFToken: defaultToConfig2,
        adapter: defaultToConfig2,
        responseType: defaultToConfig2,
        xsrfCookieName: defaultToConfig2,
        xsrfHeaderName: defaultToConfig2,
        onUploadProgress: defaultToConfig2,
        onDownloadProgress: defaultToConfig2,
        decompress: defaultToConfig2,
        maxContentLength: defaultToConfig2,
        maxBodyLength: defaultToConfig2,
        beforeRedirect: defaultToConfig2,
        transport: defaultToConfig2,
        httpAgent: defaultToConfig2,
        httpsAgent: defaultToConfig2,
        cancelToken: defaultToConfig2,
        socketPath: defaultToConfig2,
        responseEncoding: defaultToConfig2,
        validateStatus: mergeDirectKeys,
        headers: (a2, b, prop) => mergeDeepProperties(headersToObject(a2), headersToObject(b), prop, true)
      };
      utils$1.forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {
        const merge2 = mergeMap[prop] || mergeDeepProperties;
        const configValue = merge2(config1[prop], config2[prop], prop);
        utils$1.isUndefined(configValue) && merge2 !== mergeDirectKeys || (config[prop] = configValue);
      });
      return config;
    }
    var resolveConfig = (config) => {
      const newConfig = mergeConfig({}, config);
      let { data, withXSRFToken, xsrfHeaderName, xsrfCookieName, headers, auth } = newConfig;
      newConfig.headers = headers = AxiosHeaders$1.from(headers);
      newConfig.url = buildURL(buildFullPath(newConfig.baseURL, newConfig.url), config.params, config.paramsSerializer);
      if (auth) {
        headers.set(
          "Authorization",
          "Basic " + btoa((auth.username || "") + ":" + (auth.password ? unescape(encodeURIComponent(auth.password)) : ""))
        );
      }
      let contentType;
      if (utils$1.isFormData(data)) {
        if (platform.hasStandardBrowserEnv || platform.hasStandardBrowserWebWorkerEnv) {
          headers.setContentType(void 0);
        } else if ((contentType = headers.getContentType()) !== false) {
          const [type2, ...tokens] = contentType ? contentType.split(";").map((token) => token.trim()).filter(Boolean) : [];
          headers.setContentType([type2 || "multipart/form-data", ...tokens].join("; "));
        }
      }
      if (platform.hasStandardBrowserEnv) {
        withXSRFToken && utils$1.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(newConfig));
        if (withXSRFToken || withXSRFToken !== false && isURLSameOrigin(newConfig.url)) {
          const xsrfValue = xsrfHeaderName && xsrfCookieName && cookies.read(xsrfCookieName);
          if (xsrfValue) {
            headers.set(xsrfHeaderName, xsrfValue);
          }
        }
      }
      return newConfig;
    };
    var isXHRAdapterSupported = typeof XMLHttpRequest !== "undefined";
    var xhrAdapter = isXHRAdapterSupported && function(config) {
      return new Promise(function dispatchXhrRequest(resolve, reject) {
        const _config = resolveConfig(config);
        let requestData = _config.data;
        const requestHeaders = AxiosHeaders$1.from(_config.headers).normalize();
        let { responseType, onUploadProgress, onDownloadProgress } = _config;
        let onCanceled;
        let uploadThrottled, downloadThrottled;
        let flushUpload, flushDownload;
        function done() {
          flushUpload && flushUpload();
          flushDownload && flushDownload();
          _config.cancelToken && _config.cancelToken.unsubscribe(onCanceled);
          _config.signal && _config.signal.removeEventListener("abort", onCanceled);
        }
        let request = new XMLHttpRequest();
        request.open(_config.method.toUpperCase(), _config.url, true);
        request.timeout = _config.timeout;
        function onloadend() {
          if (!request) {
            return;
          }
          const responseHeaders = AxiosHeaders$1.from(
            "getAllResponseHeaders" in request && request.getAllResponseHeaders()
          );
          const responseData = !responseType || responseType === "text" || responseType === "json" ? request.responseText : request.response;
          const response = {
            data: responseData,
            status: request.status,
            statusText: request.statusText,
            headers: responseHeaders,
            config,
            request
          };
          settle(function _resolve(value) {
            resolve(value);
            done();
          }, function _reject(err) {
            reject(err);
            done();
          }, response);
          request = null;
        }
        if ("onloadend" in request) {
          request.onloadend = onloadend;
        } else {
          request.onreadystatechange = function handleLoad() {
            if (!request || request.readyState !== 4) {
              return;
            }
            if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) {
              return;
            }
            setTimeout(onloadend);
          };
        }
        request.onabort = function handleAbort() {
          if (!request) {
            return;
          }
          reject(new AxiosError("Request aborted", AxiosError.ECONNABORTED, config, request));
          request = null;
        };
        request.onerror = function handleError() {
          reject(new AxiosError("Network Error", AxiosError.ERR_NETWORK, config, request));
          request = null;
        };
        request.ontimeout = function handleTimeout() {
          let timeoutErrorMessage = _config.timeout ? "timeout of " + _config.timeout + "ms exceeded" : "timeout exceeded";
          const transitional = _config.transitional || transitionalDefaults;
          if (_config.timeoutErrorMessage) {
            timeoutErrorMessage = _config.timeoutErrorMessage;
          }
          reject(new AxiosError(
            timeoutErrorMessage,
            transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED,
            config,
            request
          ));
          request = null;
        };
        requestData === void 0 && requestHeaders.setContentType(null);
        if ("setRequestHeader" in request) {
          utils$1.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
            request.setRequestHeader(key, val);
          });
        }
        if (!utils$1.isUndefined(_config.withCredentials)) {
          request.withCredentials = !!_config.withCredentials;
        }
        if (responseType && responseType !== "json") {
          request.responseType = _config.responseType;
        }
        if (onDownloadProgress) {
          [downloadThrottled, flushDownload] = progressEventReducer(onDownloadProgress, true);
          request.addEventListener("progress", downloadThrottled);
        }
        if (onUploadProgress && request.upload) {
          [uploadThrottled, flushUpload] = progressEventReducer(onUploadProgress);
          request.upload.addEventListener("progress", uploadThrottled);
          request.upload.addEventListener("loadend", flushUpload);
        }
        if (_config.cancelToken || _config.signal) {
          onCanceled = (cancel) => {
            if (!request) {
              return;
            }
            reject(!cancel || cancel.type ? new CanceledError(null, config, request) : cancel);
            request.abort();
            request = null;
          };
          _config.cancelToken && _config.cancelToken.subscribe(onCanceled);
          if (_config.signal) {
            _config.signal.aborted ? onCanceled() : _config.signal.addEventListener("abort", onCanceled);
          }
        }
        const protocol = parseProtocol(_config.url);
        if (protocol && platform.protocols.indexOf(protocol) === -1) {
          reject(new AxiosError("Unsupported protocol " + protocol + ":", AxiosError.ERR_BAD_REQUEST, config));
          return;
        }
        request.send(requestData || null);
      });
    };
    var composeSignals = (signals, timeout2) => {
      const { length } = signals = signals ? signals.filter(Boolean) : [];
      if (timeout2 || length) {
        let controller = new AbortController();
        let aborted;
        const onabort = function(reason) {
          if (!aborted) {
            aborted = true;
            unsubscribe();
            const err = reason instanceof Error ? reason : this.reason;
            controller.abort(err instanceof AxiosError ? err : new CanceledError(err instanceof Error ? err.message : err));
          }
        };
        let timer2 = timeout2 && setTimeout(() => {
          timer2 = null;
          onabort(new AxiosError(`timeout ${timeout2} of ms exceeded`, AxiosError.ETIMEDOUT));
        }, timeout2);
        const unsubscribe = () => {
          if (signals) {
            timer2 && clearTimeout(timer2);
            timer2 = null;
            signals.forEach((signal2) => {
              signal2.unsubscribe ? signal2.unsubscribe(onabort) : signal2.removeEventListener("abort", onabort);
            });
            signals = null;
          }
        };
        signals.forEach((signal2) => signal2.addEventListener("abort", onabort));
        const { signal } = controller;
        signal.unsubscribe = () => utils$1.asap(unsubscribe);
        return signal;
      }
    };
    var composeSignals$1 = composeSignals;
    var streamChunk = function* (chunk, chunkSize) {
      let len = chunk.byteLength;
      if (!chunkSize || len < chunkSize) {
        yield chunk;
        return;
      }
      let pos = 0;
      let end;
      while (pos < len) {
        end = pos + chunkSize;
        yield chunk.slice(pos, end);
        pos = end;
      }
    };
    var readBytes = async function* (iterable, chunkSize) {
      for await (const chunk of readStream(iterable)) {
        yield* streamChunk(chunk, chunkSize);
      }
    };
    var readStream = async function* (stream) {
      if (stream[Symbol.asyncIterator]) {
        yield* stream;
        return;
      }
      const reader = stream.getReader();
      try {
        for (; ; ) {
          const { done, value } = await reader.read();
          if (done) {
            break;
          }
          yield value;
        }
      } finally {
        await reader.cancel();
      }
    };
    var trackStream = (stream, chunkSize, onProgress, onFinish) => {
      const iterator = readBytes(stream, chunkSize);
      let bytes = 0;
      let done;
      let _onFinish = (e) => {
        if (!done) {
          done = true;
          onFinish && onFinish(e);
        }
      };
      return new ReadableStream({
        async pull(controller) {
          try {
            const { done: done2, value } = await iterator.next();
            if (done2) {
              _onFinish();
              controller.close();
              return;
            }
            let len = value.byteLength;
            if (onProgress) {
              let loadedBytes = bytes += len;
              onProgress(loadedBytes);
            }
            controller.enqueue(new Uint8Array(value));
          } catch (err) {
            _onFinish(err);
            throw err;
          }
        },
        cancel(reason) {
          _onFinish(reason);
          return iterator.return();
        }
      }, {
        highWaterMark: 2
      });
    };
    var isFetchSupported = typeof fetch === "function" && typeof Request === "function" && typeof Response === "function";
    var isReadableStreamSupported = isFetchSupported && typeof ReadableStream === "function";
    var encodeText = isFetchSupported && (typeof TextEncoder === "function" ? ((encoder) => (str) => encoder.encode(str))(new TextEncoder()) : async (str) => new Uint8Array(await new Response(str).arrayBuffer()));
    var test = (fn, ...args) => {
      try {
        return !!fn(...args);
      } catch (e) {
        return false;
      }
    };
    var supportsRequestStream = isReadableStreamSupported && test(() => {
      let duplexAccessed = false;
      const hasContentType = new Request(platform.origin, {
        body: new ReadableStream(),
        method: "POST",
        get duplex() {
          duplexAccessed = true;
          return "half";
        }
      }).headers.has("Content-Type");
      return duplexAccessed && !hasContentType;
    });
    var DEFAULT_CHUNK_SIZE = 64 * 1024;
    var supportsResponseStream = isReadableStreamSupported && test(() => utils$1.isReadableStream(new Response("").body));
    var resolvers = {
      stream: supportsResponseStream && ((res) => res.body)
    };
    isFetchSupported && ((res) => {
      ["text", "arrayBuffer", "blob", "formData", "stream"].forEach((type2) => {
        !resolvers[type2] && (resolvers[type2] = utils$1.isFunction(res[type2]) ? (res2) => res2[type2]() : (_, config) => {
          throw new AxiosError(`Response type '${type2}' is not supported`, AxiosError.ERR_NOT_SUPPORT, config);
        });
      });
    })(new Response());
    var getBodyLength = async (body) => {
      if (body == null) {
        return 0;
      }
      if (utils$1.isBlob(body)) {
        return body.size;
      }
      if (utils$1.isSpecCompliantForm(body)) {
        const _request = new Request(platform.origin, {
          method: "POST",
          body
        });
        return (await _request.arrayBuffer()).byteLength;
      }
      if (utils$1.isArrayBufferView(body) || utils$1.isArrayBuffer(body)) {
        return body.byteLength;
      }
      if (utils$1.isURLSearchParams(body)) {
        body = body + "";
      }
      if (utils$1.isString(body)) {
        return (await encodeText(body)).byteLength;
      }
    };
    var resolveBodyLength = async (headers, body) => {
      const length = utils$1.toFiniteNumber(headers.getContentLength());
      return length == null ? getBodyLength(body) : length;
    };
    var fetchAdapter = isFetchSupported && (async (config) => {
      let {
        url,
        method,
        data,
        signal,
        cancelToken,
        timeout: timeout2,
        onDownloadProgress,
        onUploadProgress,
        responseType,
        headers,
        withCredentials = "same-origin",
        fetchOptions
      } = resolveConfig(config);
      responseType = responseType ? (responseType + "").toLowerCase() : "text";
      let composedSignal = composeSignals$1([signal, cancelToken && cancelToken.toAbortSignal()], timeout2);
      let request;
      const unsubscribe = composedSignal && composedSignal.unsubscribe && (() => {
        composedSignal.unsubscribe();
      });
      let requestContentLength;
      try {
        if (onUploadProgress && supportsRequestStream && method !== "get" && method !== "head" && (requestContentLength = await resolveBodyLength(headers, data)) !== 0) {
          let _request = new Request(url, {
            method: "POST",
            body: data,
            duplex: "half"
          });
          let contentTypeHeader;
          if (utils$1.isFormData(data) && (contentTypeHeader = _request.headers.get("content-type"))) {
            headers.setContentType(contentTypeHeader);
          }
          if (_request.body) {
            const [onProgress, flush] = progressEventDecorator(
              requestContentLength,
              progressEventReducer(asyncDecorator(onUploadProgress))
            );
            data = trackStream(_request.body, DEFAULT_CHUNK_SIZE, onProgress, flush);
          }
        }
        if (!utils$1.isString(withCredentials)) {
          withCredentials = withCredentials ? "include" : "omit";
        }
        const isCredentialsSupported = "credentials" in Request.prototype;
        request = new Request(url, {
          ...fetchOptions,
          signal: composedSignal,
          method: method.toUpperCase(),
          headers: headers.normalize().toJSON(),
          body: data,
          duplex: "half",
          credentials: isCredentialsSupported ? withCredentials : void 0
        });
        let response = await fetch(request);
        const isStreamResponse = supportsResponseStream && (responseType === "stream" || responseType === "response");
        if (supportsResponseStream && (onDownloadProgress || isStreamResponse && unsubscribe)) {
          const options = {};
          ["status", "statusText", "headers"].forEach((prop) => {
            options[prop] = response[prop];
          });
          const responseContentLength = utils$1.toFiniteNumber(response.headers.get("content-length"));
          const [onProgress, flush] = onDownloadProgress && progressEventDecorator(
            responseContentLength,
            progressEventReducer(asyncDecorator(onDownloadProgress), true)
          ) || [];
          response = new Response(
            trackStream(response.body, DEFAULT_CHUNK_SIZE, onProgress, () => {
              flush && flush();
              unsubscribe && unsubscribe();
            }),
            options
          );
        }
        responseType = responseType || "text";
        let responseData = await resolvers[utils$1.findKey(resolvers, responseType) || "text"](response, config);
        !isStreamResponse && unsubscribe && unsubscribe();
        return await new Promise((resolve, reject) => {
          settle(resolve, reject, {
            data: responseData,
            headers: AxiosHeaders$1.from(response.headers),
            status: response.status,
            statusText: response.statusText,
            config,
            request
          });
        });
      } catch (err) {
        unsubscribe && unsubscribe();
        if (err && err.name === "TypeError" && /fetch/i.test(err.message)) {
          throw Object.assign(
            new AxiosError("Network Error", AxiosError.ERR_NETWORK, config, request),
            {
              cause: err.cause || err
            }
          );
        }
        throw AxiosError.from(err, err && err.code, config, request);
      }
    });
    var knownAdapters = {
      http: httpAdapter,
      xhr: xhrAdapter,
      fetch: fetchAdapter
    };
    utils$1.forEach(knownAdapters, (fn, value) => {
      if (fn) {
        try {
          Object.defineProperty(fn, "name", { value });
        } catch (e) {
        }
        Object.defineProperty(fn, "adapterName", { value });
      }
    });
    var renderReason = (reason) => `- ${reason}`;
    var isResolvedHandle = (adapter) => utils$1.isFunction(adapter) || adapter === null || adapter === false;
    var adapters = {
      getAdapter: (adapters2) => {
        adapters2 = utils$1.isArray(adapters2) ? adapters2 : [adapters2];
        const { length } = adapters2;
        let nameOrAdapter;
        let adapter;
        const rejectedReasons = {};
        for (let i = 0; i < length; i++) {
          nameOrAdapter = adapters2[i];
          let id2;
          adapter = nameOrAdapter;
          if (!isResolvedHandle(nameOrAdapter)) {
            adapter = knownAdapters[(id2 = String(nameOrAdapter)).toLowerCase()];
            if (adapter === void 0) {
              throw new AxiosError(`Unknown adapter '${id2}'`);
            }
          }
          if (adapter) {
            break;
          }
          rejectedReasons[id2 || "#" + i] = adapter;
        }
        if (!adapter) {
          const reasons = Object.entries(rejectedReasons).map(
            ([id2, state]) => `adapter ${id2} ` + (state === false ? "is not supported by the environment" : "is not available in the build")
          );
          let s = length ? reasons.length > 1 ? "since :\n" + reasons.map(renderReason).join("\n") : " " + renderReason(reasons[0]) : "as no adapter specified";
          throw new AxiosError(
            `There is no suitable adapter to dispatch the request ` + s,
            "ERR_NOT_SUPPORT"
          );
        }
        return adapter;
      },
      adapters: knownAdapters
    };
    function throwIfCancellationRequested(config) {
      if (config.cancelToken) {
        config.cancelToken.throwIfRequested();
      }
      if (config.signal && config.signal.aborted) {
        throw new CanceledError(null, config);
      }
    }
    function dispatchRequest(config) {
      throwIfCancellationRequested(config);
      config.headers = AxiosHeaders$1.from(config.headers);
      config.data = transformData.call(
        config,
        config.transformRequest
      );
      if (["post", "put", "patch"].indexOf(config.method) !== -1) {
        config.headers.setContentType("application/x-www-form-urlencoded", false);
      }
      const adapter = adapters.getAdapter(config.adapter || defaults$1.adapter);
      return adapter(config).then(function onAdapterResolution(response) {
        throwIfCancellationRequested(config);
        response.data = transformData.call(
          config,
          config.transformResponse,
          response
        );
        response.headers = AxiosHeaders$1.from(response.headers);
        return response;
      }, function onAdapterRejection(reason) {
        if (!isCancel(reason)) {
          throwIfCancellationRequested(config);
          if (reason && reason.response) {
            reason.response.data = transformData.call(
              config,
              config.transformResponse,
              reason.response
            );
            reason.response.headers = AxiosHeaders$1.from(reason.response.headers);
          }
        }
        return Promise.reject(reason);
      });
    }
    var VERSION = "1.7.9";
    var validators$1 = {};
    ["object", "boolean", "number", "function", "string", "symbol"].forEach((type2, i) => {
      validators$1[type2] = function validator2(thing) {
        return typeof thing === type2 || "a" + (i < 1 ? "n " : " ") + type2;
      };
    });
    var deprecatedWarnings = {};
    validators$1.transitional = function transitional(validator2, version, message) {
      function formatMessage(opt, desc) {
        return "[Axios v" + VERSION + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
      }
      return (value, opt, opts) => {
        if (validator2 === false) {
          throw new AxiosError(
            formatMessage(opt, " has been removed" + (version ? " in " + version : "")),
            AxiosError.ERR_DEPRECATED
          );
        }
        if (version && !deprecatedWarnings[opt]) {
          deprecatedWarnings[opt] = true;
          console.warn(
            formatMessage(
              opt,
              " has been deprecated since v" + version + " and will be removed in the near future"
            )
          );
        }
        return validator2 ? validator2(value, opt, opts) : true;
      };
    };
    validators$1.spelling = function spelling(correctSpelling) {
      return (value, opt) => {
        console.warn(`${opt} is likely a misspelling of ${correctSpelling}`);
        return true;
      };
    };
    function assertOptions(options, schema, allowUnknown) {
      if (typeof options !== "object") {
        throw new AxiosError("options must be an object", AxiosError.ERR_BAD_OPTION_VALUE);
      }
      const keys = Object.keys(options);
      let i = keys.length;
      while (i-- > 0) {
        const opt = keys[i];
        const validator2 = schema[opt];
        if (validator2) {
          const value = options[opt];
          const result2 = value === void 0 || validator2(value, opt, options);
          if (result2 !== true) {
            throw new AxiosError("option " + opt + " must be " + result2, AxiosError.ERR_BAD_OPTION_VALUE);
          }
          continue;
        }
        if (allowUnknown !== true) {
          throw new AxiosError("Unknown option " + opt, AxiosError.ERR_BAD_OPTION);
        }
      }
    }
    var validator = {
      assertOptions,
      validators: validators$1
    };
    var validators = validator.validators;
    var Axios = class {
      constructor(instanceConfig) {
        this.defaults = instanceConfig;
        this.interceptors = {
          request: new InterceptorManager$1(),
          response: new InterceptorManager$1()
        };
      }
      /**
       * Dispatch a request
       *
       * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
       * @param {?Object} config
       *
       * @returns {Promise} The Promise to be fulfilled
       */
      async request(configOrUrl, config) {
        try {
          return await this._request(configOrUrl, config);
        } catch (err) {
          if (err instanceof Error) {
            let dummy = {};
            Error.captureStackTrace ? Error.captureStackTrace(dummy) : dummy = new Error();
            const stack = dummy.stack ? dummy.stack.replace(/^.+\n/, "") : "";
            try {
              if (!err.stack) {
                err.stack = stack;
              } else if (stack && !String(err.stack).endsWith(stack.replace(/^.+\n.+\n/, ""))) {
                err.stack += "\n" + stack;
              }
            } catch (e) {
            }
          }
          throw err;
        }
      }
      _request(configOrUrl, config) {
        if (typeof configOrUrl === "string") {
          config = config || {};
          config.url = configOrUrl;
        } else {
          config = configOrUrl || {};
        }
        config = mergeConfig(this.defaults, config);
        const { transitional, paramsSerializer, headers } = config;
        if (transitional !== void 0) {
          validator.assertOptions(transitional, {
            silentJSONParsing: validators.transitional(validators.boolean),
            forcedJSONParsing: validators.transitional(validators.boolean),
            clarifyTimeoutError: validators.transitional(validators.boolean)
          }, false);
        }
        if (paramsSerializer != null) {
          if (utils$1.isFunction(paramsSerializer)) {
            config.paramsSerializer = {
              serialize: paramsSerializer
            };
          } else {
            validator.assertOptions(paramsSerializer, {
              encode: validators.function,
              serialize: validators.function
            }, true);
          }
        }
        validator.assertOptions(config, {
          baseUrl: validators.spelling("baseURL"),
          withXsrfToken: validators.spelling("withXSRFToken")
        }, true);
        config.method = (config.method || this.defaults.method || "get").toLowerCase();
        let contextHeaders = headers && utils$1.merge(
          headers.common,
          headers[config.method]
        );
        headers && utils$1.forEach(
          ["delete", "get", "head", "post", "put", "patch", "common"],
          (method) => {
            delete headers[method];
          }
        );
        config.headers = AxiosHeaders$1.concat(contextHeaders, headers);
        const requestInterceptorChain = [];
        let synchronousRequestInterceptors = true;
        this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
          if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config) === false) {
            return;
          }
          synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
          requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
        });
        const responseInterceptorChain = [];
        this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
          responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
        });
        let promise;
        let i = 0;
        let len;
        if (!synchronousRequestInterceptors) {
          const chain = [dispatchRequest.bind(this), void 0];
          chain.unshift.apply(chain, requestInterceptorChain);
          chain.push.apply(chain, responseInterceptorChain);
          len = chain.length;
          promise = Promise.resolve(config);
          while (i < len) {
            promise = promise.then(chain[i++], chain[i++]);
          }
          return promise;
        }
        len = requestInterceptorChain.length;
        let newConfig = config;
        i = 0;
        while (i < len) {
          const onFulfilled = requestInterceptorChain[i++];
          const onRejected = requestInterceptorChain[i++];
          try {
            newConfig = onFulfilled(newConfig);
          } catch (error) {
            onRejected.call(this, error);
            break;
          }
        }
        try {
          promise = dispatchRequest.call(this, newConfig);
        } catch (error) {
          return Promise.reject(error);
        }
        i = 0;
        len = responseInterceptorChain.length;
        while (i < len) {
          promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);
        }
        return promise;
      }
      getUri(config) {
        config = mergeConfig(this.defaults, config);
        const fullPath = buildFullPath(config.baseURL, config.url);
        return buildURL(fullPath, config.params, config.paramsSerializer);
      }
    };
    utils$1.forEach(["delete", "get", "head", "options"], function forEachMethodNoData(method) {
      Axios.prototype[method] = function(url, config) {
        return this.request(mergeConfig(config || {}, {
          method,
          url,
          data: (config || {}).data
        }));
      };
    });
    utils$1.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
      function generateHTTPMethod(isForm) {
        return function httpMethod(url, data, config) {
          return this.request(mergeConfig(config || {}, {
            method,
            headers: isForm ? {
              "Content-Type": "multipart/form-data"
            } : {},
            url,
            data
          }));
        };
      }
      Axios.prototype[method] = generateHTTPMethod();
      Axios.prototype[method + "Form"] = generateHTTPMethod(true);
    });
    var Axios$1 = Axios;
    var CancelToken = class {
      constructor(executor) {
        if (typeof executor !== "function") {
          throw new TypeError("executor must be a function.");
        }
        let resolvePromise;
        this.promise = new Promise(function promiseExecutor(resolve) {
          resolvePromise = resolve;
        });
        const token = this;
        this.promise.then((cancel) => {
          if (!token._listeners)
            return;
          let i = token._listeners.length;
          while (i-- > 0) {
            token._listeners[i](cancel);
          }
          token._listeners = null;
        });
        this.promise.then = (onfulfilled) => {
          let _resolve;
          const promise = new Promise((resolve) => {
            token.subscribe(resolve);
            _resolve = resolve;
          }).then(onfulfilled);
          promise.cancel = function reject() {
            token.unsubscribe(_resolve);
          };
          return promise;
        };
        executor(function cancel(message, config, request) {
          if (token.reason) {
            return;
          }
          token.reason = new CanceledError(message, config, request);
          resolvePromise(token.reason);
        });
      }
      /**
       * Throws a `CanceledError` if cancellation has been requested.
       */
      throwIfRequested() {
        if (this.reason) {
          throw this.reason;
        }
      }
      /**
       * Subscribe to the cancel signal
       */
      subscribe(listener) {
        if (this.reason) {
          listener(this.reason);
          return;
        }
        if (this._listeners) {
          this._listeners.push(listener);
        } else {
          this._listeners = [listener];
        }
      }
      /**
       * Unsubscribe from the cancel signal
       */
      unsubscribe(listener) {
        if (!this._listeners) {
          return;
        }
        const index2 = this._listeners.indexOf(listener);
        if (index2 !== -1) {
          this._listeners.splice(index2, 1);
        }
      }
      toAbortSignal() {
        const controller = new AbortController();
        const abort = (err) => {
          controller.abort(err);
        };
        this.subscribe(abort);
        controller.signal.unsubscribe = () => this.unsubscribe(abort);
        return controller.signal;
      }
      /**
       * Returns an object that contains a new `CancelToken` and a function that, when called,
       * cancels the `CancelToken`.
       */
      static source() {
        let cancel;
        const token = new CancelToken(function executor(c2) {
          cancel = c2;
        });
        return {
          token,
          cancel
        };
      }
    };
    var CancelToken$1 = CancelToken;
    function spread(callback) {
      return function wrap(arr) {
        return callback.apply(null, arr);
      };
    }
    function isAxiosError(payload) {
      return utils$1.isObject(payload) && payload.isAxiosError === true;
    }
    var HttpStatusCode = {
      Continue: 100,
      SwitchingProtocols: 101,
      Processing: 102,
      EarlyHints: 103,
      Ok: 200,
      Created: 201,
      Accepted: 202,
      NonAuthoritativeInformation: 203,
      NoContent: 204,
      ResetContent: 205,
      PartialContent: 206,
      MultiStatus: 207,
      AlreadyReported: 208,
      ImUsed: 226,
      MultipleChoices: 300,
      MovedPermanently: 301,
      Found: 302,
      SeeOther: 303,
      NotModified: 304,
      UseProxy: 305,
      Unused: 306,
      TemporaryRedirect: 307,
      PermanentRedirect: 308,
      BadRequest: 400,
      Unauthorized: 401,
      PaymentRequired: 402,
      Forbidden: 403,
      NotFound: 404,
      MethodNotAllowed: 405,
      NotAcceptable: 406,
      ProxyAuthenticationRequired: 407,
      RequestTimeout: 408,
      Conflict: 409,
      Gone: 410,
      LengthRequired: 411,
      PreconditionFailed: 412,
      PayloadTooLarge: 413,
      UriTooLong: 414,
      UnsupportedMediaType: 415,
      RangeNotSatisfiable: 416,
      ExpectationFailed: 417,
      ImATeapot: 418,
      MisdirectedRequest: 421,
      UnprocessableEntity: 422,
      Locked: 423,
      FailedDependency: 424,
      TooEarly: 425,
      UpgradeRequired: 426,
      PreconditionRequired: 428,
      TooManyRequests: 429,
      RequestHeaderFieldsTooLarge: 431,
      UnavailableForLegalReasons: 451,
      InternalServerError: 500,
      NotImplemented: 501,
      BadGateway: 502,
      ServiceUnavailable: 503,
      GatewayTimeout: 504,
      HttpVersionNotSupported: 505,
      VariantAlsoNegotiates: 506,
      InsufficientStorage: 507,
      LoopDetected: 508,
      NotExtended: 510,
      NetworkAuthenticationRequired: 511
    };
    Object.entries(HttpStatusCode).forEach(([key, value]) => {
      HttpStatusCode[value] = key;
    });
    var HttpStatusCode$1 = HttpStatusCode;
    function createInstance(defaultConfig) {
      const context = new Axios$1(defaultConfig);
      const instance = bind(Axios$1.prototype.request, context);
      utils$1.extend(instance, Axios$1.prototype, context, { allOwnKeys: true });
      utils$1.extend(instance, context, null, { allOwnKeys: true });
      instance.create = function create2(instanceConfig) {
        return createInstance(mergeConfig(defaultConfig, instanceConfig));
      };
      return instance;
    }
    var axios = createInstance(defaults$1);
    axios.Axios = Axios$1;
    axios.CanceledError = CanceledError;
    axios.CancelToken = CancelToken$1;
    axios.isCancel = isCancel;
    axios.VERSION = VERSION;
    axios.toFormData = toFormData;
    axios.AxiosError = AxiosError;
    axios.Cancel = axios.CanceledError;
    axios.all = function all(promises) {
      return Promise.all(promises);
    };
    axios.spread = spread;
    axios.isAxiosError = isAxiosError;
    axios.mergeConfig = mergeConfig;
    axios.AxiosHeaders = AxiosHeaders$1;
    axios.formToJSON = (thing) => formDataToJSON(utils$1.isHTMLForm(thing) ? new FormData(thing) : thing);
    axios.getAdapter = adapters.getAdapter;
    axios.HttpStatusCode = HttpStatusCode$1;
    axios.default = axios;
    module2.exports = axios;
  }
});

// node_modules/wikipedia/dist/errors.js
var require_errors = __commonJS({
  "node_modules/wikipedia/dist/errors.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.citationError = exports2.pdfError = exports2.fcError = exports2.eventsError = exports2.mediaError = exports2.relatedError = exports2.introError = exports2.preloadError = exports2.infoboxError = exports2.coordinatesError = exports2.geoSearchError = exports2.linksError = exports2.categoriesError = exports2.contentError = exports2.htmlError = exports2.imageError = exports2.summaryError = exports2.pageError = exports2.autocompletionsError = exports2.searchError = exports2.wikiError = void 0;
    var wikiError = class extends Error {
      constructor(message, code) {
        super(message);
        this.name = "wikiError";
        this.code = code;
      }
    };
    exports2.wikiError = wikiError;
    var searchError = class extends wikiError {
      constructor(message) {
        super(message);
        this.name = "searchError";
      }
    };
    exports2.searchError = searchError;
    var autocompletionsError = class extends wikiError {
      constructor(message) {
        super(message);
        this.name = "autocompletionsError";
      }
    };
    exports2.autocompletionsError = autocompletionsError;
    var pageError = class extends wikiError {
      constructor(message) {
        super(message);
        this.name = "pageError";
      }
    };
    exports2.pageError = pageError;
    var summaryError = class extends wikiError {
      constructor(message) {
        super(message);
        this.name = "summaryError";
      }
    };
    exports2.summaryError = summaryError;
    var imageError = class extends wikiError {
      constructor(message) {
        super(message);
        this.name = "imageError";
      }
    };
    exports2.imageError = imageError;
    var htmlError = class extends wikiError {
      constructor(message) {
        super(message);
        this.name = "htmlError";
      }
    };
    exports2.htmlError = htmlError;
    var contentError = class extends wikiError {
      constructor(message) {
        super(message);
        this.name = "contentError";
      }
    };
    exports2.contentError = contentError;
    var categoriesError = class extends wikiError {
      constructor(message) {
        super(message);
        this.name = "categoriesError";
      }
    };
    exports2.categoriesError = categoriesError;
    var linksError = class extends wikiError {
      constructor(message) {
        super(message);
        this.name = "linksError";
      }
    };
    exports2.linksError = linksError;
    var geoSearchError = class extends wikiError {
      constructor(message) {
        super(message);
        this.name = "geoSearchError";
      }
    };
    exports2.geoSearchError = geoSearchError;
    var coordinatesError = class extends wikiError {
      constructor(message) {
        super(message);
        this.name = "coordinatesError";
      }
    };
    exports2.coordinatesError = coordinatesError;
    var infoboxError = class extends wikiError {
      constructor(message) {
        super(message);
        this.name = "infoboxError";
      }
    };
    exports2.infoboxError = infoboxError;
    var preloadError = class extends wikiError {
      constructor(message) {
        super(message);
        this.name = "preloadError";
      }
    };
    exports2.preloadError = preloadError;
    var introError = class extends wikiError {
      constructor(message) {
        super(message);
        this.name = "introError";
      }
    };
    exports2.introError = introError;
    var relatedError = class extends wikiError {
      constructor(message) {
        super(message);
        this.name = "relatedError";
      }
    };
    exports2.relatedError = relatedError;
    var mediaError = class extends wikiError {
      constructor(message) {
        super(message);
        this.name = "mediaError";
      }
    };
    exports2.mediaError = mediaError;
    var eventsError = class extends wikiError {
      constructor(message) {
        super(message);
        this.name = "eventsError";
      }
    };
    exports2.eventsError = eventsError;
    var fcError = class extends wikiError {
      constructor(message) {
        super(message);
        this.name = "featuredContentError";
      }
    };
    exports2.fcError = fcError;
    var pdfError = class extends wikiError {
      constructor(message) {
        super(message);
        this.name = "pdfError";
      }
    };
    exports2.pdfError = pdfError;
    var citationError = class extends wikiError {
      constructor(message) {
        super(message);
        this.name = "citationError";
      }
    };
    exports2.citationError = citationError;
  }
});

// node_modules/wikipedia/dist/request.js
var require_request = __commonJS({
  "node_modules/wikipedia/dist/request.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.setUserAgent = exports2.setAPIUrl = exports2.returnRestUrl = exports2.makeRestRequest = void 0;
    var axios_1 = require_axios();
    var errors_12 = require_errors();
    var API_URL = "https://en.wikipedia.org/w/api.php?";
    var REST_API_URL = "https://en.wikipedia.org/api/rest_v1/";
    var USER_AGENT = "wikipedia (https://github.com/dopecodez/Wikipedia/)";
    async function callAPI(url) {
      const options = {
        headers: {
          "Api-User-Agent": USER_AGENT
        }
      };
      try {
        const { data } = await axios_1.default.get(url, options);
        return data;
      } catch (error) {
        throw new errors_12.wikiError(error);
      }
    }
    async function makeRequest(params, redirect = true) {
      const search = { ...params };
      search["format"] = "json";
      if (redirect) {
        search["redirects"] = "";
      }
      if (!params.action) {
        search["action"] = "query";
      }
      search["origin"] = "*";
      let searchParam = "";
      Object.keys(search).forEach((key) => {
        searchParam += `${key}=${search[key]}&`;
      });
      return await callAPI(encodeURI(API_URL + searchParam));
    }
    async function makeRestRequest(path, redirect = true) {
      if (!redirect) {
        path += "?redirect=false";
      }
      return await callAPI(encodeURI(REST_API_URL + path));
    }
    exports2.makeRestRequest = makeRestRequest;
    function returnRestUrl(path) {
      return encodeURI(REST_API_URL + path);
    }
    exports2.returnRestUrl = returnRestUrl;
    function setAPIUrl(prefix) {
      API_URL = "https://" + prefix.toLowerCase() + ".wikipedia.org/w/api.php?";
      REST_API_URL = "https://" + prefix.toLowerCase() + ".wikipedia.org/api/rest_v1/";
      return API_URL;
    }
    exports2.setAPIUrl = setAPIUrl;
    function setUserAgent(userAgent) {
      USER_AGENT = userAgent;
    }
    exports2.setUserAgent = setUserAgent;
    exports2.default = makeRequest;
  }
});

// node_modules/wikipedia/dist/messages.js
var require_messages = __commonJS({
  "node_modules/wikipedia/dist/messages.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.MSGS = void 0;
    exports2.MSGS = {
      PAGE_NOT_SUGGEST: "No page with given title suggested : ",
      PAGE_NOT_EXIST: "No page with given title exists : ",
      INFOBOX_NOT_EXIST: "Info cannot be parsed for given page"
    };
  }
});

// node_modules/wikipedia/dist/utils.js
var require_utils = __commonJS({
  "node_modules/wikipedia/dist/utils.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getCurrentDay = exports2.getCurrentMonth = exports2.getCurrentYear = exports2.setPageId = exports2.setPageIdOrTitleParam = exports2.setTitleForPage = exports2.isString = void 0;
    var _1 = require_dist();
    var errors_12 = require_errors();
    var messages_12 = require_messages();
    function isString(title) {
      return isNaN(title);
    }
    exports2.isString = isString;
    async function setTitleForPage(title) {
      {
        const searchResult = await _1.default.search(title, { limit: 1, suggestion: true });
        if (!searchResult.suggestion && searchResult.results.length == 0) {
          throw new errors_12.pageError(`${messages_12.MSGS.PAGE_NOT_SUGGEST}${title}`);
        }
        title = searchResult.suggestion || title;
        return title;
      }
    }
    exports2.setTitleForPage = setTitleForPage;
    function setPageIdOrTitleParam(params, title) {
      if (isString(title)) {
        params.titles = title;
      } else {
        params.pageids = title;
      }
      return params;
    }
    exports2.setPageIdOrTitleParam = setPageIdOrTitleParam;
    function setPageId(params, results) {
      let pageId;
      if (params.pageIds) {
        pageId = params.pageIds;
      } else {
        pageId = Object.keys(results.query.pages)[0];
      }
      return pageId;
    }
    exports2.setPageId = setPageId;
    function getCurrentYear() {
      const date = new Date();
      const year = date.getFullYear();
      return year;
    }
    exports2.getCurrentYear = getCurrentYear;
    function getCurrentMonth() {
      const date = new Date();
      const month = date.getMonth();
      return month + 1;
    }
    exports2.getCurrentMonth = getCurrentMonth;
    function getCurrentDay() {
      const date = new Date();
      const day = date.getDate();
      return day;
    }
    exports2.getCurrentDay = getCurrentDay;
  }
});

// node_modules/camelcase/index.js
var require_camelcase = __commonJS({
  "node_modules/camelcase/index.js"(exports2, module2) {
    "use strict";
    function preserveCamelCase(str) {
      let isLastCharLower = false;
      let isLastCharUpper = false;
      let isLastLastCharUpper = false;
      for (let i = 0; i < str.length; i++) {
        const c2 = str[i];
        if (isLastCharLower && /[a-zA-Z]/.test(c2) && c2.toUpperCase() === c2) {
          str = str.substr(0, i) + "-" + str.substr(i);
          isLastCharLower = false;
          isLastLastCharUpper = isLastCharUpper;
          isLastCharUpper = true;
          i++;
        } else if (isLastCharUpper && isLastLastCharUpper && /[a-zA-Z]/.test(c2) && c2.toLowerCase() === c2) {
          str = str.substr(0, i - 1) + "-" + str.substr(i - 1);
          isLastLastCharUpper = isLastCharUpper;
          isLastCharUpper = false;
          isLastCharLower = true;
        } else {
          isLastCharLower = c2.toLowerCase() === c2;
          isLastLastCharUpper = isLastCharUpper;
          isLastCharUpper = c2.toUpperCase() === c2;
        }
      }
      return str;
    }
    module2.exports = function(str) {
      if (arguments.length > 1) {
        str = Array.from(arguments).map((x3) => x3.trim()).filter((x3) => x3.length).join("-");
      } else {
        str = str.trim();
      }
      if (str.length === 0) {
        return "";
      }
      if (str.length === 1) {
        return str.toLowerCase();
      }
      if (/^[a-z0-9]+$/.test(str)) {
        return str;
      }
      const hasUpperCase = str !== str.toLowerCase();
      if (hasUpperCase) {
        str = preserveCamelCase(str);
      }
      return str.replace(/^[_.\- ]+/, "").toLowerCase().replace(/[_.\- ]+(\w|$)/g, (m2, p1) => p1.toUpperCase());
    };
  }
});

// node_modules/infobox-parser/build/bundle.min.js
var require_bundle_min = __commonJS({
  "node_modules/infobox-parser/build/bundle.min.js"(exports2, module2) {
    "use strict";
    function _interopDefault(e) {
      return e && "object" == typeof e && "default" in e ? e.default : e;
    }
    function trimWrappers(e) {
      return e.replace(/\[\[/g, "").replace(/\]\]/g, "").replace(/\{\{/g, "").replace(/\}\}/g, "").trim();
    }
    function trimOr(e) {
      var t = e.indexOf("|");
      return -1 !== t ? e.substring(0, t) : e;
    }
    function getValue(e, t) {
      if (!e)
        return null;
      var r = e.trim().replace(/File:/, "").replace(/\{\{\d+\}\}/g, "").replace(extraPropertyPattern, "").replace(endingPattern, "");
      if ("y" === r || "yes" === r)
        return true;
      if ("birthPlace" == t)
        return e.trim();
      var a2 = r.match(linksPattern);
      return a2 ? a2[0].split(linkSeparatorPattern).filter(function(e3) {
        return e3;
      }) : trimOr(trimWrappers(r));
    }
    function dataType(e) {
      var t = e.globalPattern, r = e.parsePattern, a2 = e.parse, n = e.variable, l = e.name;
      return function(e3) {
        var i = e3.match(t);
        if (!i) {
          var s;
          return s = {}, defineProperty(s, l, []), defineProperty(s, "sourceAfter", e3), s;
        }
        var o = i.map(function(e4) {
          return a2(e4.match(r));
        }), u = i.reduce(function(e4, t2, r2) {
          return o[r2] === DO_NOT_REPLACE ? e4 : e4.replace(t2, "$" + n + "_" + r2);
        }, e3);
        return { data: defineProperty({}, l, o), sourceAfter: u };
      };
    }
    function byDataHandler(e, t) {
      var r = e.source, a2 = e.context, n = t(r), l = n.data, i = n.sourceAfter;
      return { context: Object.assign({}, a2, l), source: i };
    }
    function extractData(e) {
      return dataTypes$1.map(function(e3) {
        return e3.handler;
      }).reduce(byDataHandler, { context: {}, source: e });
    }
    function findPropertyList(e) {
      var t = e.match(keyValueGlobalPattern);
      return t ? t.map(function(e3) {
        var t2 = keyValuePattern.exec(e3);
        if (!t2)
          return null;
        var r = slicedToArray(t2, 3), a2 = r[1], n = r[2], l = camelCase(a2.trim());
        return { key: l, value: getValue(n, l) };
      }).filter(function(e3) {
        return e3;
      }) : [];
    }
    function fillVariable(e, t) {
      var r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {}, a2 = r.simplifyDataValues;
      if ("string" != typeof e)
        return console.log("Warning: Something went wrong. Could not fill variables in: (" + (void 0 === e ? "undefined" : _typeof(e)) + ") " + JSON.stringify(e)), {};
      var n = dataTypes$1.find(function(t2) {
        return e.match(t2.pattern);
      });
      if (n) {
        var l = n.pattern.exec(e), i = slicedToArray(l, 2), s = i[0], o = i[1], u = t[n.name][parseInt(o, 10)];
        return a2 || "string" != typeof u ? u : e.replace(s, u);
      }
      return e;
    }
    function fillVariables(e, t, r) {
      if (void 0 === e)
        return e;
      if (e instanceof Date)
        return e;
      if ("number" == typeof e)
        return e;
      if (Array.isArray(e))
        return e.map(function(e3) {
          return fillVariables(e3, t, r);
        });
      if ("object" === (void 0 === e ? "undefined" : _typeof(e)))
        return Object.keys(e).reduce(function(a3, n) {
          return Object.assign(a3, defineProperty({}, n, fillVariables(e[n], t, r)));
        }, {});
      var a2 = fillVariable(e, t, r);
      return a2 === e ? e : fillVariables(a2, t, r);
    }
    function handleSmallData(e, t, r) {
      var a2 = r.simplifyDataValues;
      if ("string" == typeof e && e.match(smallDataType.pattern)) {
        var n = e.replace(smallDataType.pattern, "").replace(/,/, "").trim(), l = smallDataType.pattern.exec(e), i = slicedToArray(l, 2), s = i[1], o = t[smallDataType.name][parseInt(s, 10)], u = { primary: getVariableValue(n, t, { simplifyDataValues: a2 }), secondary: getVariableValue(o, t, { simplifyDataValues: a2 }) };
        return a2 ? u.primary : u;
      }
      return null;
    }
    function getVariableValue(e, t) {
      var r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {}, a2 = r.simplifyDataValues, n = handleSmallData(e, t, { simplifyDataValues: a2 });
      return n || fillVariables(e, t, { simplifyDataValues: a2 });
    }
    function reduceVariable(e, t, r, a2) {
      if (null === t)
        return null;
      if ("boolean" == typeof t)
        return t;
      if (Array.isArray(t))
        return t.map(function(e3) {
          return getVariableValue(e3, r, a2);
        });
      if (e.match(/areaTotal/) || e.match(/population/)) {
        var n = numberParse(t);
        if (false === n && (n = parseFloat(t, 10)), !isNaN(n))
          return n;
      }
      if (e.match(/date/i)) {
        var l = +new Date(t);
        if (!isNaN(l))
          return new Date(t);
      }
      var i = getVariableValue(t, r, a2);
      return Array.isArray(i) ? i.map(function(e3) {
        return getVariableValue(e3, r, a2);
      }) : i;
    }
    function byVariableReduction(e, t) {
      return function(r, a2) {
        var n = a2.key, l = a2.value, i = reduceVariable(n, l, e, t);
        return "" === i || null === i ? r : Object.assign({}, r, defineProperty({}, n, i));
      };
    }
    function extractProperties(e) {
      var t = e.source, r = e.context, a2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, n = a2.simplifyDataValues, l = void 0 === n || n;
      return findPropertyList(t).reduce(byVariableReduction(r, { simplifyDataValues: l }), {});
    }
    function transformProperties(e) {
      return Object.keys(e).reduce(function(t, r) {
        var a2 = e[r], n = r.match(blankNamePattern);
        if (n) {
          var l = n[1] || "", i = e["blank" + l + "NameSec2"], s = e["blank" + l + "InfoSec2"];
          return "string" != typeof i ? t : Object.assign(t, defineProperty({}, camelCase(i), s));
        }
        return r.match(blankInfoPattern) ? t : Object.assign(t, defineProperty({}, r, a2));
      }, {});
    }
    function findOuterIndex(e) {
      for (var t = [], r = 0; r < e.length - 1; r++) {
        var a2 = e.substr(r, 2);
        if ("{{" !== a2) {
          if ("}}" === a2) {
            t.pop();
            if (0 === t.length)
              return r + 2;
            r++;
          }
        } else
          t.push(r), r++;
      }
    }
    function parse(e) {
      var t = e.match(infoBoxStartPattern);
      if (!t)
        return { data: e, sourceLeft: null };
      var r = t.index, a2 = e.substring(r), n = findOuterIndex(a2);
      if (!n)
        return { data: e, sourceLeft: null };
      var l = a2.substring(0, n), i = e.substring(n);
      return { data: l, sourceLeft: !i.match(infoBoxStartPattern) ? null : i };
    }
    function extractInfoboxes(e) {
      for (var t = parse(e), r = [t.data]; t.sourceLeft; )
        t = parse(t.sourceLeft), r.push(t.data);
      return r;
    }
    function cleanSource(e) {
      var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r = t.removeSmall, a2 = void 0 !== r && r, n = t.removeReferences;
      return (void 0 === n || n) && (e = e.replace(/<ref(\s\w+=[^>]+)?>.*<\/ref>/g, "").replace(/<ref(\s\w+=[^>]+)?\s?\/>/g, "")), a2 && (e = e.replace(/<small>.*<\/small>/g, "")), e.replace(/'''?/g, "").replace(/\|display=inline/g, "").replace(/<br\s?\/?>/g, ",").replace(/&minus;/g, "-").replace(/{{Sndash}}/g, "\u2013").replace(/<sup>/g, "^").replace(/\{\{sfn\|([^\}\}]+)\}\}/g, "").replace(/\{\{efn\|([^\}\}]+)\}\}/g, "").replace(/−/g, "-").replace(/<\/sup>/g, "").replace(/\{\{\s*nowrap\s*\|([^\n\}]+)\}\}/gi, "$1").replace(/\{\{\s*Avoid\swrap\s*\|([^\n\}]+)\}\}/gi, "$1").replace(/<!--([\s\S]*?)-->/g, "").replace(/&nbsp;/g, " ").replace("|''See list''", "");
    }
    function transformRowSpan(e) {
      return e.map(transformCells).reduce(function(e3, t, r) {
        for (var a2 = 0 === r ? 0 : 1, n = 0; n < t.length; n++)
          e3[n + a2] || (e3[n + a2] = {}), t[n] && (e3[n + a2][t[n]] = 1);
        return e3;
      }, []).map(function(e3) {
        return Object.keys(e3).join(",");
      }).join(" || ");
    }
    function clean(e) {
      return e.substring(2, e.length - 2).replace(linkPattern$1, function(e3, t) {
        return t.split("|")[0];
      }).replace(/'''?/g, "");
    }
    function parseRow(e) {
      var t = e[0].match(/BS(\d)/), r = e[0].substring(2), a2 = 1, n = [], l = 1;
      for (t && (a2 = t[1], r = e[0].substring(3)); l <= a2; l++)
        n.push(e[l]);
      return { type: r, margin: e[l++], text1: e[l++], text2: e[l++], comment: e[l++], icons: n };
    }
    function getMatches(e, t) {
      for (var r = void 0, a2 = []; null !== (r = t.exec(e)); )
        a2.push({ value: r[1] && r[1].trim(), start: r.index, end: r.index + r[0].length });
      return a2;
    }
    function parseTableData(e) {
      var t = e.match(rowPattern$1);
      return t ? t.map(function(e3) {
        var t2 = e3.match(rowPatternSingle);
        return slicedToArray(t2, 2)[1].trim().split("|").slice(1);
      }) : [];
    }
    function getTables(e) {
      var t = getMatches(e, tableStartPattern$1), r = getMatches(e, tableEndPattern$1);
      return t.map(function(t2, a2) {
        var n = r[a2];
        if (!n)
          throw new Error("[Table Parsing] Failed to pair table");
        return { rows: parseTableData(e.substring(t2.end, n.start).trim().replace(/'''/g, "")), start: t2.start, end: n.end };
      });
    }
    function last(e) {
      return e.length ? e[e.length - 1] : void 0;
    }
    function parseInfobox(e, t) {
      var r = extractInfoboxes(e).map(function(e3) {
        return transformProperties(extractProperties(extractData(cleanSource(e3, t)), t));
      });
      if (!r.length)
        return {};
      var a2 = { general: r.shift() };
      return r.forEach(function(e3) {
        var t2 = e3.type;
        t2 ? a2[camelCase(t2)] = e3 : Object.assign(a2, { general: Object.assign({}, a2.general, e3) });
      }), a2.tables = parseTables(e), a2.bsTables = parseBsTables(e), a2.lists = parseLists(e), a2;
    }
    var camelCase = _interopDefault(require_camelcase());
    var _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
      return typeof e;
    } : function(e) {
      return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
    };
    var defineProperty = function(e, t, r) {
      return t in e ? Object.defineProperty(e, t, { value: r, enumerable: true, configurable: true, writable: true }) : e[t] = r, e;
    };
    var slicedToArray = function() {
      function e(e3, t) {
        var r = [], a2 = true, n = false, l = void 0;
        try {
          for (var i, s = e3[Symbol.iterator](); !(a2 = (i = s.next()).done) && (r.push(i.value), !t || r.length !== t); a2 = true)
            ;
        } catch (e4) {
          n = true, l = e4;
        } finally {
          try {
            !a2 && s.return && s.return();
          } finally {
            if (n)
              throw l;
          }
        }
        return r;
      }
      return function(t, r) {
        if (Array.isArray(t))
          return t;
        if (Symbol.iterator in Object(t))
          return e(t, r);
        throw new TypeError("Invalid attempt to destructure non-iterable instance");
      };
    }();
    var toConsumableArray = function(e) {
      if (Array.isArray(e)) {
        for (var t = 0, r = Array(e.length); t < e.length; t++)
          r[t] = e[t];
        return r;
      }
      return Array.from(e);
    };
    var smallGlobalPattern = /\{\{small\|([^\}\}]+)\}\}/g;
    var smallPattern = /small\|([^\}\}]+)\}\}/;
    var small = { globalPattern: smallGlobalPattern, parsePattern: smallPattern, parse: function(e) {
      return slicedToArray(e, 2)[1];
    }, variable: "SMALL", name: "smalls" };
    var flagGlobalPattern = /\{\{flag\|([^\}\}]+)\}\}/g;
    var flagPattern = /flag\|([^\}\}]+)\}\}/;
    var flag = { globalPattern: flagGlobalPattern, parsePattern: flagPattern, parse: function(e) {
      return slicedToArray(e, 2)[1];
    }, variable: "FLAG", name: "flags" };
    var coordsGlobalPattern = /\{\{coord\|([^\}\}]+)\}\}/g;
    var coordsPattern = /coord\|([^\}\}]+)\}\}/;
    var coords = { globalPattern: coordsGlobalPattern, parsePattern: coordsPattern, parse: function(e) {
      return slicedToArray(e, 2)[1];
    }, variable: "COORD", name: "coords" };
    var globalPattern = /\[\[([^\]\|]+)\|?([^\]]+)?\]\]/g;
    var pattern = /\[\[([^\]\|]+)\|?([^\]]+)?\]\]/;
    var instances = { globalPattern, parsePattern: pattern, parse: function(e) {
      var t = slicedToArray(e, 3), r = t[1], a2 = t[2];
      return r || a2;
    }, variable: "INSTANCE", name: "instances" };
    var extraPropertyPattern = /\n?\s?\|\s?\w+$/;
    var endingPattern = /\n\}\}$/;
    var linksPattern = /((\$\w+_\d+)\s*,?\s*){2,}/g;
    var linkSeparatorPattern = /[,\s?]/g;
    var listItemPrefixPattern = /^\|\s?/;
    var unbulletedListGlobalPattern = /\{\{(?:unbulleted list|ubl|ubt|ublist|unbullet)\s?\|([^\}\}]+)\}\}/gi;
    var unbulletedListItemPattern = /\|\s*([^|}]+)/g;
    var unbulletedLists = { globalPattern: unbulletedListGlobalPattern, parsePattern: unbulletedListItemPattern, parse: function(e) {
      return e ? e.map(function(e3) {
        return e3.replace(listItemPrefixPattern, "").trim();
      }).filter(function(e3) {
        return e3 && e3.length;
      }) : [];
    }, variable: "UNBULLETED_LIST", name: "unbulletedLists" };
    var listItemPrefixPattern$1 = /^\*\s*/;
    var plainListGlobalPattern = /\n(\*\s*[^*|]+)+/g;
    var plainListItemPattern = /\*\s*([^*|]+)/g;
    var unmarkedLists = { globalPattern: plainListGlobalPattern, parsePattern: plainListItemPattern, parse: function(e) {
      return e ? e.map(function(e3) {
        return e3.replace(listItemPrefixPattern$1, "").trim();
      }).filter(function(e3) {
        return e3 && e3.length;
      }) : [];
    }, variable: "UNMARKED_LIST", name: "unmarkedLists" };
    var listItemPrefixPattern$2 = /^\*\s?/;
    var plainListGlobalPattern$1 = /\{\{f?p?P?l?a?i?n?t?\s?list\s?\|([^\}\}]+)\}\}/g;
    var plainListItemPattern$1 = /\*\s*([^*}]+)/g;
    var plainLists = { globalPattern: plainListGlobalPattern$1, parsePattern: plainListItemPattern$1, parse: function(e) {
      return e ? e.map(function(e3) {
        return e3.replace(listItemPrefixPattern$2, "").trim();
      }).filter(function(e3) {
        return e3 && e3.length;
      }) : [];
    }, variable: "PLAIN_LIST", name: "plainLists" };
    var marriageGlobalPattern = /\{\{Marriage\|([^\}\}]+)\}\}/gi;
    var marriagePattern = /Marriage\|([^|]+)\|([^|]*)(.*)\}\}/i;
    var marriages = { globalPattern: marriageGlobalPattern, parsePattern: marriagePattern, parse: function(e) {
      var t = slicedToArray(e, 3);
      return { who: t[1], married: t[2] };
    }, variable: "MARRIAGE", name: "marriages" };
    var nbayGlobalPattern = /\{\{nbay\|([^\}\}]+)\}\}/gi;
    var nbayPattern = /nbay\|([^|]+)\|(.*)\}\}/i;
    var nbay = { globalPattern: nbayGlobalPattern, parsePattern: nbayPattern, parse: function(e) {
      var t = slicedToArray(e, 3), r = t[1];
      t[2];
      return r;
    }, variable: "nbay", name: "nbay" };
    var otherGlobalPattern = /\{\{([^|\n]+)\|([^|\n]+)\|?([^\}\n]+)?\}\}/g;
    var otherPattern = /\{\{([^|\n]+)\|([^|\n]+)\|?([^\}\n]+)?\}\}/;
    var other = { globalPattern: otherGlobalPattern, parsePattern: otherPattern, parse: function(e) {
      var t = slicedToArray(e, 4), r = t[1];
      t[2], t[3];
      return r;
    }, variable: "OTHER", name: "others" };
    var hlistGlobalPattern = /\{\{hlist\|([^\}\}]+)\}\}/gi;
    var hlistPattern = /hlist\|(.*)\n?\}\}/i;
    var hlist = { globalPattern: hlistGlobalPattern, parsePattern: hlistPattern, parse: function(e) {
      return e ? slicedToArray(e, 2)[1].split("|") : [];
    }, variable: "HLIST", name: "hlists" };
    var birthDateGlobalPattern = /\{\{birth\sdate([^\}\}]+)\}\}/gi;
    var birthDatePattern = /(\d+)\|(\d+)\|(\d+)/;
    var millisInYear = 31536e6;
    var birthDates = { globalPattern: birthDateGlobalPattern, parsePattern: birthDatePattern, parse: function(e) {
      var t = slicedToArray(e, 4), r = t[1], a2 = t[2], n = t[3], l = new Date(r, a2 - 1, n);
      return { date: l, age: Math.floor((Date.now() - +l) / millisInYear) };
    }, variable: "BIRTH_DATE", name: "birthDates" };
    var DO_NOT_REPLACE = Symbol("DO NOT REPLACE");
    var labeledDateGlobalPattern = /\{\{([^\n\}\}]+)\}\}/g;
    var labeledDatePattern = /(.*)/;
    var labeledDates = { globalPattern: labeledDateGlobalPattern, parsePattern: labeledDatePattern, parse: function(e) {
      var t = e[0].indexOf("|");
      if (t > -1) {
        var r = e[0].substring(t + 1).slice(0, -2), a2 = new Date(r + " GMT");
        if (!isNaN(a2.getTime()))
          return { date: a2 };
        if (a2 = new Date(r.split("|").join("-") + " GMT"), !isNaN(a2.getTime()))
          return { date: a2 };
      }
      return DO_NOT_REPLACE;
    }, variable: "LABELED_DATE", name: "labeledDates" };
    var deathDateGlobalPattern = /\{\{death\sdate\sand\sage([^\}\}]+)\}\}/gi;
    var deathDatePattern = /(\d+)\|(\d+)\|(\d+)\|(\d+)\|?(\d+)?\|?(\d+)?/;
    var millisInYear$1 = 31536e6;
    var deathDates = { globalPattern: deathDateGlobalPattern, parsePattern: deathDatePattern, parse: function(e) {
      var t = slicedToArray(e, 7), r = t[1], a2 = t[2], n = t[3], l = t[4], i = t[5], s = void 0 === i ? 0 : i, o = t[6], u = void 0 === o ? 0 : o, c2 = new Date(r, a2 - 1, n), f = new Date(l, s - 1, u);
      return { date: c2, age: Math.floor((Number(c2) - Number(f)) / millisInYear$1) };
    }, variable: "DEATH_DATE", name: "deathDates" };
    var URLGlobalPattern = /\{\{URL\|([^\}\}]+)\}\}/g;
    var URLPattern = /URL\|([^\}\}]+)\}\}/;
    var url = { globalPattern: URLGlobalPattern, parsePattern: URLPattern, parse: function(e) {
      return slicedToArray(e, 2)[1];
    }, variable: "URL", name: "urls" };
    var websiteGlobalPattern = /\[(https?):\/\/((?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6})\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)\s+([\w\s]+)\]/g;
    var websitePattern = /\[(https?):\/\/((?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6})\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)\s+([\w\s]+)\]/;
    var website = { globalPattern: websiteGlobalPattern, parsePattern: websitePattern, parse: function(e) {
      var t = slicedToArray(e, 5), r = t[1], a2 = t[2], n = t[3];
      return { protocol: r, hostname: a2, path: n, title: t[4], url: r + "://" + a2 + n };
    }, variable: "WEBSITE", name: "websites" };
    var globalPattern$1 = /\{\{Extra[^}}]+\}\}/gi;
    var parsePattern = /\|\s?(\w+)\s+=\s+(.+)/g;
    var propPattern = /\|\s?(\w+)\s+=\s+(.+)/;
    var extra = { globalPattern: globalPattern$1, parsePattern, parse: function(e) {
      return e.reduce(function(e3, t) {
        var r = t.match(propPattern), a2 = slicedToArray(r, 3), n = a2[1], l = a2[2];
        return e3[n] = l, e3;
      }, {});
    }, variable: "EXTRA", name: "extra" };
    var convertGlobalPattern = /\{\{convert\|([\d\.]+)\|(\w+)/g;
    var convertPattern = /\{\{convert\|([\d\.]+)\|(\w+)/;
    var convert = { globalPattern: convertGlobalPattern, parsePattern: convertPattern, parse: function(e) {
      var t = slicedToArray(e, 3);
      return t[1] + " " + t[2];
    }, variable: "CONVERT", name: "converts" };
    var filmDatesPattern = /\{\{film\sdate([^\}\}]+)\}\}/gi;
    var filmDatePatternGlobal = /(\d+)\|?(\d+)\|?(\d+)\|?([^\|\}]*)\|?(ref\d+=([^\|\}]*))?/g;
    var filmDatePattern = /(\d+)\|?(\d+)\|?(\d+)\|?([^\|\}]*)\|?(ref\d+=([^\|\}]*))?/;
    var filmDates = { globalPattern: filmDatesPattern, parsePattern: filmDatePatternGlobal, parse: function(e) {
      return e.map(function(e3) {
        var t = e3.match(filmDatePattern), r = slicedToArray(t, 7), a2 = (r[0], r[1]), n = r[2], l = r[3], i = r[4], s = (r[5], r[6]);
        return { date: new Date(a2, n && n - 1, l), location: i, ref: s };
      });
    }, variable: "FILM_DATES", name: "filmDates" };
    var otherGlobalPattern$1 = /<ref(\s\w+=[^>]+)?>(.*)<\/ref>/g;
    var otherPattern$1 = /<ref(\s\w+=[^>]+)?>(.*)<\/ref>/;
    var attributeGlobalPattern = /(\w+)=(["\w]+)/g;
    var attributePattern = /(\w+)=(["\w]+)/;
    var ref1 = { globalPattern: otherGlobalPattern$1, parsePattern: otherPattern$1, parse: function(e) {
      var t = slicedToArray(e, 3), r = (t[0], t[1]), a2 = t[2];
      return { attributes: ((r || "").match(attributeGlobalPattern) || []).reduce(function(e3, t2) {
        if (t2) {
          var r2 = t2.match(attributePattern), a3 = slicedToArray(r2, 3), n = (a3[0], a3[1]), l = a3[2];
          e3[n] = l.replace(/"/g, "");
        }
        return e3;
      }, {}), contents: a2 };
    }, variable: "REF", name: "refs" };
    var otherGlobalPattern$2 = /<ref(\s\w+=[^>]+)?\/>/g;
    var otherPattern$2 = /<ref(\s\w+=[^>]+)?\/>/;
    var attributeGlobalPattern$1 = /(\w+)=(["\w]+)/g;
    var attributePattern$1 = /(\w+)=(["\w]+)/;
    var ref2 = { globalPattern: otherGlobalPattern$2, parsePattern: otherPattern$2, parse: function(e) {
      return { attributes: e[1].match(attributeGlobalPattern$1).reduce(function(e3, t) {
        var r = t.match(attributePattern$1), a2 = slicedToArray(r, 3), n = (a2[0], a2[1]), l = a2[2];
        return e3[n] = l.replace(/"/g, ""), e3;
      }, {}) };
    }, variable: "REF", name: "refs" };
    var globalPattern$2 = /\{\{formatnum:\d+\}\}/gi;
    var parsePattern$1 = /\{\{formatnum:(\d+)\}\}/;
    var formatNum = { globalPattern: globalPattern$2, parsePattern: parsePattern$1, parse: function(e) {
      var t = slicedToArray(e, 2), r = t[1];
      return parseFloat(r);
    }, variable: "FORMAT_NUM", name: "formatNum" };
    var dataTypes = [instances, ref1, ref2, small, formatNum, flag, coords, marriages, birthDates, labeledDates, deathDates, unbulletedLists, website, hlist, url, convert, nbay, filmDates, other, extra, plainLists, unmarkedLists];
    var dataTypes$1 = dataTypes.map(function(e) {
      return { handler: dataType(e), name: e.name, pattern: new RegExp("\\$" + e.variable + "_(\\d+)") };
    });
    var keyValueGlobalPattern = /\|\s*([-'\u0400-\u04FF\w\s]+)\s*=\s*([^|]+)?/g;
    var keyValuePattern = /\|\s*([-'\u0400-\u04FF\w\s]+)\s*=\s*([^|]+)?/;
    var numberParse = function(e) {
      return "string" == typeof e && (e = e.trim().replace(/ /g, ""), e.match(/,/) && e.match(/\./) ? e.indexOf(",") < e.indexOf(".") ? parseEnglish(e) : parseSpanish(e) : e.match(/,/) && !e.match(/\./) ? e.match(/,/g).length > 1 ? parseEnglish(e) : e.match(/,[0-9]{3}($|^[0-9])/) ? parseEnglish(e) : parseSpanish(e) : !e.match(/,/) && e.match(/\./) ? e.match(/\./g).length > 1 ? parseSpanish(e) : e.match(/\.[0-9]{3}($|^[0-9])/) ? parseSpanish(e) : parseEnglish(e) : (+e).toString() === e && +e);
    };
    var parseEnglish = function(e) {
      return +e.replace(/,/g, "");
    };
    var parseSpanish = function(e) {
      return +e.replace(/\./g, "").replace(/,/g, ".");
    };
    var smallDataType = dataTypes$1.find(function(e) {
      return "smalls" === e.name;
    });
    var blankNamePattern = /blank(\d+)?NameSec2/;
    var blankInfoPattern = /blank(\d+)?InfoSec2/;
    var infoBoxStartPattern = /{{\w*box/;
    var tableStartPattern = /{\|(.*)\n?/;
    var tableEndPattern = /\n\|}/;
    var headersPattern = /!\s?(.*)/g;
    var rowPattern = /\|-/;
    var cellSeparatorPattern = /(?:\n\|)|(?:\|\|)/;
    var linkPattern = /\[\[([^\]]+)\]\]/g;
    var linkNamePattern = /^.*\|/;
    var inlineHeaderPattern = "!!";
    var actionPattern = /{{anchor\|(.*)}}/g;
    var rowSpanCountPattern = /rowspan="(\d+)"/;
    var stripLinks = function(e) {
      return e.replace(linkPattern, function(e3, t) {
        return t.replace(linkNamePattern, "").trim() || t;
      });
    };
    var removeActions = function(e) {
      return e.replace(actionPattern, "");
    };
    var transformCell = function(e) {
      return stripLinks(removeActions(e || "")).replace(rowSpanCountPattern, "").replace(linkNamePattern, "").trim();
    };
    var transformCells = function(e) {
      return e.split(cellSeparatorPattern).map(transformCell);
    };
    var findIndex = function(e, t) {
      var r = e.match(t);
      return r ? r.index : -1;
    };
    var findTableStart = function(e) {
      var t = e.match(tableStartPattern);
      return t ? t.index + t[0].length : -1;
    };
    var findTableEnd = function(e) {
      return findIndex(e, tableEndPattern);
    };
    var getHeaders = function(e) {
      for (var t = [], r = void 0; r = headersPattern.exec(e); )
        t.push.apply(t, toConsumableArray(r[1].split(inlineHeaderPattern).map(transformCell)));
      return t;
    };
    var getRows = function(e) {
      var t = e.split(rowPattern).map(function(e3) {
        return e3.replace(/^.*\n+?\|/, "").trim();
      }).filter(function(e3) {
        return e3;
      }), r = [], a2 = 0, n = 0, l = [], i = true, s = false, o = void 0;
      try {
        for (var u, c2 = t[Symbol.iterator](); !(i = (u = c2.next()).done); i = true) {
          var f = u.value, p = f.match(rowSpanCountPattern);
          p && (a2 = 0, n = parseInt(p[1]), l = []), a2 < n ? (l.push(f), ++a2 === n && r.push(transformRowSpan(l))) : r.push(f);
        }
      } catch (e3) {
        s = true, o = e3;
      } finally {
        try {
          !i && c2.return && c2.return();
        } finally {
          if (s)
            throw o;
        }
      }
      return r;
    };
    var getNextTable = function(e, t, r) {
      var a2 = e, n = findTableStart(a2);
      if (-1 === n)
        return null;
      a2 = a2.substring(n);
      var l = findTableEnd(a2);
      if (-1 === l)
        return null;
      a2 = a2.substring(0, l);
      var i = getRows(a2);
      if (!i.length)
        return null;
      var s = getHeaders(i[0]);
      return s.length ? { data: i.slice(1).map(transformCells).map(function(e3) {
        return s.reduce(function(a3, n2, l2) {
          return a3[camelCase(fillVariable(n2, t, r))] = fillVariables(e3[l2], t, r), a3;
        }, {});
      }), end: n + l } : null;
    };
    var parseTables = function(e, t) {
      for (var r = cleanSource(e, t), a2 = extractData(r), n = [], l = a2.source, i = null; i = getNextTable(l, a2.context, t); ) {
        if (!i)
          return n;
        n.push(i.data), l = l.substring(i.end);
      }
      return n;
    };
    var linkPattern$1 = /\[\[([^\]]+)\]\]/g;
    var kmPattern = /{{BSkm\|([\dx]+,[\dx]+)\|([\dx]+,[\dx]+)}}/g;
    var parseBsTables = function(e) {
      var t = e.replace(kmPattern, "$1/$2").match(/{{BS([^}}]+)}}/g);
      return t ? t.map(function(e3) {
        return clean(e3).split("|");
      }).map(parseRow).filter(function(e3) {
        return "-" !== e3.type[0];
      }) : null;
    };
    var headingPattern = /[^=]==\s?([\w\s]+)\s?==/g;
    var subheadingPattern = /===([\w\s]+)===/g;
    var tableStartPattern$1 = /{{list.+start.*}}/gi;
    var tableEndPattern$1 = /{{list.+end.*}}/gi;
    var rowPattern$1 = /{{(.*)}}/g;
    var rowPatternSingle = /{{(.*)}}/;
    var parseLists = function(e) {
      var t = getMatches(e, headingPattern), r = getMatches(e, subheadingPattern), a2 = getTables(e);
      return a2.forEach(function(e3) {
        var a3 = t.filter(function(t2) {
          return t2.end < e3.start;
        }).map(function(e4) {
          return e4.value;
        });
        e3.heading = last(a3);
        var n = r.filter(function(t2) {
          return t2.end < e3.start;
        }).map(function(e4) {
          return e4.value;
        });
        e3.subheading = last(n), delete e3.start, delete e3.end;
      }), a2;
    };
    module2.exports = parseInfobox;
  }
});

// node_modules/wikipedia/dist/page.js
var require_page = __commonJS({
  "node_modules/wikipedia/dist/page.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.citation = exports.pdf = exports.mobileHtml = exports.media = exports.related = exports.summary = exports.rawInfo = exports.tables = exports.infobox = exports.langLinks = exports.coordinates = exports.references = exports.links = exports.categories = exports.content = exports.html = exports.intro = exports.images = exports.Page = void 0;
    var errors_1 = require_errors();
    var request_1 = require_request();
    var utils_1 = require_utils();
    var messages_1 = require_messages();
    var infoboxParser = require_bundle_min();
    var Page = class {
      constructor(response) {
        this.intro = async (pageOptions) => {
          try {
            if (!this._intro) {
              const response2 = await (0, exports.intro)(this.pageid.toString(), pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.redirect);
              this._intro = response2;
            }
            return this._intro;
          } catch (error) {
            throw new errors_1.introError(error);
          }
        };
        this.images = async (listOptions) => {
          try {
            if (!this._images) {
              const result2 = await (0, exports.images)(this.pageid.toString(), listOptions);
              this._images = result2;
            }
            return this._images;
          } catch (error) {
            throw new errors_1.imageError(error);
          }
        };
        this.summary = async (pageOptions) => {
          try {
            if (!this._summary) {
              const result2 = await (0, exports.summary)(this.title, pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.redirect);
              this._summary = result2;
            }
            return this._summary;
          } catch (error) {
            throw new errors_1.summaryError(error);
          }
        };
        this.html = async (pageOptions) => {
          try {
            if (!this._html) {
              const result2 = await (0, exports.html)(this.pageid.toString(), pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.redirect);
              this._html = result2;
            }
            return this._html;
          } catch (error) {
            throw new errors_1.htmlError(error);
          }
        };
        this.content = async (pageOptions) => {
          try {
            if (!this._content) {
              const result2 = await (0, exports.content)(this.pageid.toString(), pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.redirect);
              this.parentid = result2.ids.parentId;
              this.revid = result2.ids.revId;
              this._content = result2.result;
            }
            return this._content;
          } catch (error) {
            throw new errors_1.contentError(error);
          }
        };
        this.categories = async (listOptions) => {
          try {
            if (!this._categories) {
              const result2 = await (0, exports.categories)(this.pageid.toString(), listOptions);
              this._categories = result2;
            }
            return this._categories;
          } catch (error) {
            throw new errors_1.categoriesError(error);
          }
        };
        this.links = async (listOptions) => {
          try {
            if (!this._links) {
              const result2 = await (0, exports.links)(this.pageid.toString(), listOptions);
              this._links = result2;
            }
            return this._links;
          } catch (error) {
            throw new errors_1.linksError(error);
          }
        };
        this.references = async (listOptions) => {
          try {
            if (!this._references) {
              const result2 = await (0, exports.references)(this.pageid.toString(), listOptions);
              this._references = result2;
            }
            return this._references;
          } catch (error) {
            throw new errors_1.linksError(error);
          }
        };
        this.coordinates = async (pageOptions) => {
          try {
            if (!this._coordinates) {
              const result2 = await (0, exports.coordinates)(this.pageid.toString(), pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.redirect);
              this._coordinates = result2;
            }
            return this._coordinates;
          } catch (error) {
            throw new errors_1.coordinatesError(error);
          }
        };
        this.langLinks = async (listOptions) => {
          try {
            if (!this._langLinks) {
              const result2 = await (0, exports.langLinks)(this.pageid.toString(), listOptions);
              this._langLinks = result2;
            }
            return this._langLinks;
          } catch (error) {
            throw new errors_1.linksError(error);
          }
        };
        this.infobox = async (pageOptions) => {
          try {
            if (!this._infobox) {
              const result2 = await (0, exports.infobox)(this.pageid.toString(), pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.redirect);
              this._infobox = result2;
            }
            return this._infobox;
          } catch (error) {
            throw new errors_1.infoboxError(error);
          }
        };
        this.tables = async (pageOptions) => {
          try {
            if (!this._tables) {
              const result2 = await (0, exports.tables)(this.pageid.toString(), pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.redirect);
              this._tables = result2;
            }
            return this._tables;
          } catch (error) {
            throw new errors_1.infoboxError(error);
          }
        };
        this.related = async (pageOptions) => {
          try {
            if (!this._related) {
              const result2 = await (0, exports.related)(this.title, pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.redirect);
              this._related = result2;
            }
            return this._related;
          } catch (error) {
            throw new errors_1.relatedError(error);
          }
        };
        this.media = async (pageOptions) => {
          try {
            if (!this._media) {
              const result2 = await (0, exports.media)(this.title, pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.redirect);
              this._media = result2;
            }
            return this._media;
          } catch (error) {
            throw new errors_1.mediaError(error);
          }
        };
        this.mobileHtml = async (pageOptions) => {
          try {
            if (!this._mobileHtml) {
              const result2 = await (0, exports.mobileHtml)(this.title, pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.redirect);
              this._mobileHtml = result2;
            }
            return this._mobileHtml;
          } catch (error) {
            throw new errors_1.htmlError(error);
          }
        };
        this.pdf = async (pdfOptions) => {
          try {
            const result2 = await (0, exports.pdf)(this.title, pdfOptions);
            return result2;
          } catch (error) {
            throw new errors_1.pdfError(error);
          }
        };
        this.pageid = response.pageid;
        this.ns = response.ns;
        this.title = response.title;
        this.contentmodel = response.contentmodel;
        this.pagelanguage = response.pagelanguage;
        this.pagelanguagedir = response.pagelanguagedir;
        this.touched = response.touched;
        this.lastrevid = response.lastrevid;
        this.length = response.length;
        this.fullurl = response.fullurl;
        this.editurl = response.editurl;
        this.canonicalurl = response.canonicalurl;
      }
      async runMethod(functionName) {
        try {
          const result = await eval(`this.${functionName}()`);
          return result;
        } catch (error) {
          throw new errors_1.preloadError(error);
        }
      }
    };
    exports.Page = Page;
    var images = async (title, listOptions) => {
      try {
        let imageOptions = {
          generator: "images",
          gimlimit: (listOptions === null || listOptions === void 0 ? void 0 : listOptions.limit) || 5,
          prop: "imageinfo",
          iiprop: "url"
        };
        imageOptions = (0, utils_1.setPageIdOrTitleParam)(imageOptions, title);
        const response = await (0, request_1.default)(imageOptions, listOptions === null || listOptions === void 0 ? void 0 : listOptions.redirect);
        const images2 = [];
        const imageKeys = Object.keys(response.query.pages);
        for (const image of imageKeys) {
          const imageInfo = response.query.pages[image];
          imageInfo.url = imageInfo.imageinfo[0].url;
          images2.push(imageInfo);
        }
        return images2;
      } catch (error) {
        throw new errors_1.imageError(error);
      }
    };
    exports.images = images;
    var intro = async (title, redirect = true) => {
      var _a;
      try {
        let introOptions = {
          prop: "extracts",
          explaintext: "",
          exintro: ""
        };
        introOptions = (0, utils_1.setPageIdOrTitleParam)(introOptions, title);
        const response = await (0, request_1.default)(introOptions, redirect);
        const pageId = (0, utils_1.setPageId)(introOptions, response);
        return (_a = response === null || response === void 0 ? void 0 : response.query) === null || _a === void 0 ? void 0 : _a.pages[pageId].extract;
      } catch (error) {
        throw new errors_1.introError(error);
      }
    };
    exports.intro = intro;
    var html = async (title, redirect = true) => {
      try {
        let htmlOptions = {
          "prop": "revisions",
          "rvprop": "content",
          "rvlimit": 1,
          "rvparse": ""
        };
        htmlOptions = (0, utils_1.setPageIdOrTitleParam)(htmlOptions, title);
        const response = await (0, request_1.default)(htmlOptions, redirect);
        const pageId = (0, utils_1.setPageId)(htmlOptions, response);
        return response.query.pages[pageId].revisions[0]["*"];
      } catch (error) {
        throw new errors_1.htmlError(error);
      }
    };
    exports.html = html;
    var content = async (title, redirect = true) => {
      try {
        let contentOptions = {
          "prop": "extracts|revisions",
          "explaintext": "",
          "rvprop": "ids"
        };
        contentOptions = (0, utils_1.setPageIdOrTitleParam)(contentOptions, title);
        const response = await (0, request_1.default)(contentOptions, redirect);
        const pageId = (0, utils_1.setPageId)(contentOptions, response);
        const result2 = response["query"]["pages"][pageId]["extract"];
        const ids = {
          revisionId: response["query"]["pages"][pageId]["revisions"][0]["revid"],
          parentId: response["query"]["pages"][pageId]["revisions"][0]["parentid"]
        };
        return {
          result: result2,
          ids
        };
      } catch (error) {
        throw new errors_1.contentError(error);
      }
    };
    exports.content = content;
    var categories = async (title, listOptions) => {
      try {
        let categoryOptions = {
          prop: "categories",
          pllimit: listOptions === null || listOptions === void 0 ? void 0 : listOptions.limit
        };
        categoryOptions = (0, utils_1.setPageIdOrTitleParam)(categoryOptions, title);
        const response = await (0, request_1.default)(categoryOptions, listOptions === null || listOptions === void 0 ? void 0 : listOptions.redirect);
        const pageId = (0, utils_1.setPageId)(categoryOptions, response);
        return response.query.pages[pageId].categories.map((category) => category.title);
      } catch (error) {
        throw new errors_1.categoriesError(error);
      }
    };
    exports.categories = categories;
    var links = async (title, listOptions) => {
      try {
        let linksOptions = {
          prop: "links",
          plnamespace: 0,
          pllimit: (listOptions === null || listOptions === void 0 ? void 0 : listOptions.limit) || "max"
        };
        linksOptions = (0, utils_1.setPageIdOrTitleParam)(linksOptions, title);
        const response = await (0, request_1.default)(linksOptions, listOptions === null || listOptions === void 0 ? void 0 : listOptions.redirect);
        const pageId = (0, utils_1.setPageId)(linksOptions, response);
        const result2 = response.query.pages[pageId].links.map((link) => link.title);
        return result2;
      } catch (error) {
        throw new errors_1.linksError(error);
      }
    };
    exports.links = links;
    var references = async (title, listOptions) => {
      try {
        let extLinksOptions = {
          prop: "extlinks",
          ellimit: (listOptions === null || listOptions === void 0 ? void 0 : listOptions.limit) || "max"
        };
        extLinksOptions = (0, utils_1.setPageIdOrTitleParam)(extLinksOptions, title);
        const response = await (0, request_1.default)(extLinksOptions, listOptions === null || listOptions === void 0 ? void 0 : listOptions.redirect);
        const pageId = (0, utils_1.setPageId)(extLinksOptions, response);
        const result2 = response.query.pages[pageId].extlinks.map((link) => link["*"]);
        return result2;
      } catch (error) {
        throw new errors_1.linksError(error);
      }
    };
    exports.references = references;
    var coordinates = async (title, redirect = true) => {
      try {
        let coordinatesOptions = {
          prop: "coordinates"
        };
        coordinatesOptions = (0, utils_1.setPageIdOrTitleParam)(coordinatesOptions, title);
        const response = await (0, request_1.default)(coordinatesOptions, redirect);
        const pageId = (0, utils_1.setPageId)(coordinatesOptions, response);
        const coordinates2 = response.query.pages[pageId].coordinates;
        return coordinates2 ? coordinates2[0] : null;
      } catch (error) {
        throw new errors_1.coordinatesError(error);
      }
    };
    exports.coordinates = coordinates;
    var langLinks = async (title, listOptions) => {
      var _a;
      try {
        let languageOptions = {
          prop: "langlinks",
          lllimit: (listOptions === null || listOptions === void 0 ? void 0 : listOptions.limit) || "max",
          llprop: "url"
        };
        languageOptions = (0, utils_1.setPageIdOrTitleParam)(languageOptions, title);
        const response = await (0, request_1.default)(languageOptions, listOptions === null || listOptions === void 0 ? void 0 : listOptions.redirect);
        const pageId = (0, utils_1.setPageId)(languageOptions, response);
        const result2 = ((_a = response.query.pages[pageId].langlinks) !== null && _a !== void 0 ? _a : []).map((link) => {
          return {
            lang: link.lang,
            title: link["*"],
            url: link.url
          };
        });
        return result2;
      } catch (error) {
        throw new errors_1.linksError(error);
      }
    };
    exports.langLinks = langLinks;
    var infobox = async (title, redirect = true) => {
      try {
        const infoboxOptions = {
          prop: "revisions",
          rvprop: "content",
          rvsection: 0
        };
        const fullInfo = await (0, exports.rawInfo)(title, infoboxOptions, redirect);
        const info = infoboxParser(fullInfo).general;
        return info;
      } catch (error) {
        throw new errors_1.infoboxError(error);
      }
    };
    exports.infobox = infobox;
    var tables = async (title, redirect = true) => {
      try {
        const tableOptions = {
          prop: "revisions",
          rvprop: "content"
        };
        const fullInfo = await (0, exports.rawInfo)(title, tableOptions, redirect);
        const info = infoboxParser(fullInfo).tables;
        return info;
      } catch (error) {
        throw new errors_1.infoboxError(error);
      }
    };
    exports.tables = tables;
    var rawInfo = async (title, options, redirect = true) => {
      var _a;
      try {
        options = (0, utils_1.setPageIdOrTitleParam)(options, title);
        const response = await (0, request_1.default)(options, redirect);
        if (!((_a = response.query) === null || _a === void 0 ? void 0 : _a.pages)) {
          throw new errors_1.wikiError(messages_1.MSGS.INFOBOX_NOT_EXIST);
        }
        const pageId = (0, utils_1.setPageId)(options, response);
        const data = response.query.pages[pageId]["revisions"][0];
        return data ? data["*"] : "";
      } catch (error) {
        throw new errors_1.infoboxError(error);
      }
    };
    exports.rawInfo = rawInfo;
    var summary = async (title, redirect = true) => {
      try {
        const path = "page/summary/" + title.replace(" ", "_");
        const response = await (0, request_1.makeRestRequest)(path, redirect);
        return response;
      } catch (error) {
        throw new errors_1.summaryError(error);
      }
    };
    exports.summary = summary;
    var related = async (title, redirect = true) => {
      try {
        const path = "page/related/" + title.replace(" ", "_");
        const response = await (0, request_1.makeRestRequest)(path, redirect);
        return response;
      } catch (error) {
        throw new errors_1.relatedError(error);
      }
    };
    exports.related = related;
    var media = async (title, redirect = true) => {
      try {
        const path = "page/media-list/" + title.replace(" ", "_");
        const response = await (0, request_1.makeRestRequest)(path, redirect);
        return response;
      } catch (error) {
        throw new errors_1.mediaError(error);
      }
    };
    exports.media = media;
    var mobileHtml = async (title, redirect = true) => {
      try {
        const path = `page/mobile-html/${title}`;
        const result2 = await (0, request_1.makeRestRequest)(path, redirect);
        return result2;
      } catch (error) {
        throw new errors_1.htmlError(error);
      }
    };
    exports.mobileHtml = mobileHtml;
    var pdf = async (title, pdfOptions) => {
      try {
        let path = `page/pdf/${title}`;
        (pdfOptions === null || pdfOptions === void 0 ? void 0 : pdfOptions.format) ? path += `/${pdfOptions.format}` : null;
        (pdfOptions === null || pdfOptions === void 0 ? void 0 : pdfOptions.type) ? path += `/${pdfOptions.type}` : null;
        const result2 = (0, request_1.returnRestUrl)(path);
        return result2;
      } catch (error) {
        throw new errors_1.pdfError(error);
      }
    };
    exports.pdf = pdf;
    var citation = async (query, format2, language) => {
      try {
        let path = `data/citation`;
        path += format2 ? `/${format2}` : `/mediawiki`;
        path += `/${query}`;
        language ? path += `/${language}` : null;
        const result2 = await (0, request_1.makeRestRequest)(path);
        return result2;
      } catch (error) {
        throw new errors_1.citationError(error);
      }
    };
    exports.citation = citation;
    exports.default = Page;
  }
});

// node_modules/wikipedia/dist/resultTypes.js
var require_resultTypes = __commonJS({
  "node_modules/wikipedia/dist/resultTypes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/wikipedia/dist/optionTypes.js
var require_optionTypes = __commonJS({
  "node_modules/wikipedia/dist/optionTypes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/wikipedia/dist/index.js
var require_dist = __commonJS({
  "node_modules/wikipedia/dist/index.js"(exports2, module2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m2, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m2, k);
      if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m2[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m2, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m2[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m2, exports3) {
      for (var p in m2)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
          __createBinding(exports3, m2, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    var request_12 = require_request();
    var page_1 = require_page();
    var errors_12 = require_errors();
    var messages_12 = require_messages();
    var utils_12 = require_utils();
    var wiki2 = async (title, pageOptions) => {
      return wiki2.page(title, pageOptions);
    };
    wiki2.search = async (query, searchOptions) => {
      try {
        const searchParams = {
          "list": "search",
          "srprop": "",
          "srlimit": (searchOptions === null || searchOptions === void 0 ? void 0 : searchOptions.limit) || 10,
          "srsearch": query
        };
        (searchOptions === null || searchOptions === void 0 ? void 0 : searchOptions.suggestion) ? searchParams["srinfo"] = "suggestion" : null;
        const response = await (0, request_12.default)(searchParams);
        const result2 = {
          results: response.query.search,
          suggestion: response.query.searchinfo ? response.query.searchinfo.suggestion : null
        };
        return result2;
      } catch (error) {
        throw new errors_12.searchError(error);
      }
    };
    wiki2.page = async (title, pageOptions) => {
      try {
        if (pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.autoSuggest) {
          title = await (0, utils_12.setTitleForPage)(title);
        }
        let pageParams = {
          prop: "info|pageprops",
          inprop: "url",
          ppprop: "disambiguation"
        };
        pageParams = (0, utils_12.setPageIdOrTitleParam)(pageParams, title);
        const response = await (0, request_12.default)(pageParams);
        let pageInfo = response.query.pages;
        const pageId = (0, utils_12.setPageId)(pageParams, response);
        pageInfo = pageInfo[pageId];
        if (pageInfo.missing == "") {
          throw new errors_12.pageError(`${messages_12.MSGS.PAGE_NOT_EXIST}${title}`);
        }
        const page2 = new page_1.default(pageInfo);
        if (pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.preload) {
          if (!(pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.fields)) {
            pageOptions.fields = ["summary", "images"];
          }
          for (const field of pageOptions.fields) {
            await page2.runMethod(field);
          }
        }
        return page2;
      } catch (error) {
        throw new errors_12.pageError(error);
      }
    };
    wiki2.intro = async (title, pageOptions) => {
      try {
        if (pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.autoSuggest) {
          title = await (0, utils_12.setTitleForPage)(title);
        }
        const result2 = await (0, page_1.intro)(title, pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.redirect);
        return result2;
      } catch (error) {
        throw new errors_12.introError(error);
      }
    };
    wiki2.images = async (title, listOptions) => {
      try {
        if (listOptions === null || listOptions === void 0 ? void 0 : listOptions.autoSuggest) {
          title = await (0, utils_12.setTitleForPage)(title);
        }
        const result2 = await (0, page_1.images)(title, listOptions);
        return result2;
      } catch (error) {
        throw new errors_12.imageError(error);
      }
    };
    wiki2.summary = async (title, pageOptions) => {
      try {
        if (pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.autoSuggest) {
          title = await (0, utils_12.setTitleForPage)(title);
        }
        const result2 = await (0, page_1.summary)(title, pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.redirect);
        return result2;
      } catch (error) {
        throw new errors_12.summaryError(error);
      }
    };
    wiki2.html = async (title, pageOptions) => {
      try {
        if (pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.autoSuggest) {
          title = await (0, utils_12.setTitleForPage)(title);
        }
        const result2 = await (0, page_1.html)(title, pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.redirect);
        return result2;
      } catch (error) {
        throw new errors_12.htmlError(error);
      }
    };
    wiki2.content = async (title, pageOptions) => {
      try {
        if (pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.autoSuggest) {
          title = await (0, utils_12.setTitleForPage)(title);
        }
        const response = await (0, page_1.content)(title, pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.redirect);
        return response.result;
      } catch (error) {
        throw new errors_12.contentError(error);
      }
    };
    wiki2.categories = async (title, listOptions) => {
      try {
        if (listOptions === null || listOptions === void 0 ? void 0 : listOptions.autoSuggest) {
          title = await (0, utils_12.setTitleForPage)(title);
        }
        const response = await (0, page_1.categories)(title, listOptions);
        return response;
      } catch (error) {
        throw new errors_12.categoriesError(error);
      }
    };
    wiki2.related = async (title, pageOptions) => {
      try {
        if (pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.autoSuggest) {
          title = await (0, utils_12.setTitleForPage)(title);
        }
        const response = await (0, page_1.related)(title, pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.redirect);
        return response;
      } catch (error) {
        throw new errors_12.relatedError(error);
      }
    };
    wiki2.media = async (title, pageOptions) => {
      try {
        if (pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.autoSuggest) {
          title = await (0, utils_12.setTitleForPage)(title);
        }
        const response = await (0, page_1.media)(title, pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.redirect);
        return response;
      } catch (error) {
        throw new errors_12.mediaError(error);
      }
    };
    wiki2.links = async (title, listOptions) => {
      try {
        if (listOptions === null || listOptions === void 0 ? void 0 : listOptions.autoSuggest) {
          title = await (0, utils_12.setTitleForPage)(title);
        }
        const response = await (0, page_1.links)(title, listOptions);
        return response;
      } catch (error) {
        throw new errors_12.linksError(error);
      }
    };
    wiki2.references = async (title, listOptions) => {
      try {
        if (listOptions === null || listOptions === void 0 ? void 0 : listOptions.autoSuggest) {
          title = await (0, utils_12.setTitleForPage)(title);
        }
        const response = await (0, page_1.references)(title, listOptions);
        return response;
      } catch (error) {
        throw new errors_12.linksError(error);
      }
    };
    wiki2.coordinates = async (title, pageOptions) => {
      try {
        if (pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.autoSuggest) {
          title = await (0, utils_12.setTitleForPage)(title);
        }
        const response = await (0, page_1.coordinates)(title, pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.redirect);
        return response;
      } catch (error) {
        throw new errors_12.coordinatesError(error);
      }
    };
    wiki2.langLinks = async (title, listOptions) => {
      try {
        if (listOptions === null || listOptions === void 0 ? void 0 : listOptions.autoSuggest) {
          title = await (0, utils_12.setTitleForPage)(title);
        }
        const response = await (0, page_1.langLinks)(title, listOptions);
        return response;
      } catch (error) {
        throw new errors_12.linksError(error);
      }
    };
    wiki2.infobox = async (title, pageOptions) => {
      try {
        if (pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.autoSuggest) {
          title = await (0, utils_12.setTitleForPage)(title);
        }
        const response = await (0, page_1.infobox)(title, pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.redirect);
        return response;
      } catch (error) {
        throw new errors_12.infoboxError(error);
      }
    };
    wiki2.tables = async (title, pageOptions) => {
      try {
        if (pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.autoSuggest) {
          title = await (0, utils_12.setTitleForPage)(title);
        }
        const response = await (0, page_1.tables)(title, pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.redirect);
        return response;
      } catch (error) {
        throw new errors_12.infoboxError(error);
      }
    };
    wiki2.languages = async () => {
      try {
        const langParams = {
          "meta": "siteinfo",
          "siprop": "languages"
        };
        const response = await (0, request_12.default)(langParams);
        const languages = [];
        for (const lang3 of response.query.languages) {
          languages.push({ [lang3.code]: lang3["*"] });
        }
        return languages;
      } catch (error) {
        throw new errors_12.wikiError(error);
      }
    };
    wiki2.setLang = (language) => {
      const apiUrl = (0, request_12.setAPIUrl)(language);
      return apiUrl;
    };
    wiki2.geoSearch = async (latitude, longitude, geoOptions) => {
      try {
        const geoSearchParams = {
          "list": "geosearch",
          "gsradius": (geoOptions === null || geoOptions === void 0 ? void 0 : geoOptions.radius) || 1e3,
          "gscoord": `${latitude}|${longitude}`,
          "gslimit": (geoOptions === null || geoOptions === void 0 ? void 0 : geoOptions.limit) || 10,
          "gsprop": "type"
        };
        const results = await (0, request_12.default)(geoSearchParams);
        const searchPages = results.query.geosearch;
        return searchPages;
      } catch (error) {
        throw new errors_12.geoSearchError(error);
      }
    };
    wiki2.suggest = async (query) => {
      var _a, _b, _c, _d;
      try {
        const suggestParams = {
          "list": "search",
          "srinfo": "suggestion",
          "srprop": "",
          "srsearch": query
        };
        const result2 = await (0, request_12.default)(suggestParams);
        return ((_b = (_a = result2.query) === null || _a === void 0 ? void 0 : _a.searchinfo) === null || _b === void 0 ? void 0 : _b.suggestion) ? (_d = (_c = result2.query) === null || _c === void 0 ? void 0 : _c.searchinfo) === null || _d === void 0 ? void 0 : _d.suggestion : null;
      } catch (error) {
        throw new errors_12.searchError(error);
      }
    };
    wiki2.onThisDay = async (eventOptions = {}) => {
      try {
        const type2 = eventOptions.type || "all";
        const mm = (eventOptions.month || (0, utils_12.getCurrentMonth)()).toString().padStart(2, "0");
        const dd = (eventOptions.day || (0, utils_12.getCurrentDay)()).toString().padStart(2, "0");
        const path = `feed/onthisday/${type2}/${mm}/${dd}`;
        const result2 = await (0, request_12.makeRestRequest)(path, true);
        return result2;
      } catch (error) {
        throw new errors_12.eventsError(error);
      }
    };
    wiki2.featuredContent = async (fcOptions = {}) => {
      try {
        const yyyy = (fcOptions.year || (0, utils_12.getCurrentYear)()).toString();
        const mm = (fcOptions.month || (0, utils_12.getCurrentMonth)()).toString().padStart(2, "0");
        const dd = (fcOptions.day || (0, utils_12.getCurrentDay)()).toString().padStart(2, "0");
        const path = `feed/featured/${yyyy}/${mm}/${dd}`;
        const result2 = await (0, request_12.makeRestRequest)(path, true);
        return result2;
      } catch (error) {
        throw new errors_12.fcError(error);
      }
    };
    wiki2.random = async (format2) => {
      try {
        if (!format2) {
          format2 = "summary";
        }
        const path = `page/random/${format2}`;
        const result2 = await (0, request_12.makeRestRequest)(path);
        return result2;
      } catch (error) {
        throw new errors_12.wikiError(error);
      }
    };
    wiki2.mobileHtml = async (title, pageOptions) => {
      try {
        if (pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.autoSuggest) {
          title = await (0, utils_12.setTitleForPage)(title);
        }
        const result2 = await (0, page_1.mobileHtml)(title, pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.redirect);
        return result2;
      } catch (error) {
        throw new errors_12.htmlError(error);
      }
    };
    wiki2.pdf = async (title, pdfOptions) => {
      try {
        if (pdfOptions === null || pdfOptions === void 0 ? void 0 : pdfOptions.autoSuggest) {
          title = await (0, utils_12.setTitleForPage)(title);
        }
        const result2 = await (0, page_1.pdf)(title, pdfOptions);
        return result2;
      } catch (error) {
        throw new errors_12.pdfError(error);
      }
    };
    wiki2.citation = async (query, format2, language) => {
      try {
        const result2 = await (0, page_1.citation)(query, format2, language);
        return result2;
      } catch (error) {
        throw new errors_12.citationError(error);
      }
    };
    wiki2.autocompletions = async (query, autocompletionOptions) => {
      try {
        const autocompletionsParams = {
          list: "search",
          limit: (autocompletionOptions === null || autocompletionOptions === void 0 ? void 0 : autocompletionOptions.limit) || 10,
          search: query,
          action: "opensearch",
          redirect: "return"
        };
        const [, autocompletions] = await (0, request_12.default)(autocompletionsParams, false);
        return autocompletions;
      } catch (error) {
        throw new errors_12.autocompletionsError(error);
      }
    };
    wiki2.setUserAgent = (userAgent) => {
      (0, request_12.setUserAgent)(userAgent);
    };
    exports2.default = wiki2;
    module2.exports = wiki2;
    module2.exports.default = wiki2;
    __exportStar(require_errors(), exports2);
    __exportStar(require_resultTypes(), exports2);
    __exportStar(require_optionTypes(), exports2);
    __exportStar(require_page(), exports2);
  }
});

// node_modules/languagedetect/data/lang.json
var require_lang = __commonJS({
  "node_modules/languagedetect/data/lang.json"(exports2, module2) {
    module2.exports = { trigram: { albanian: { "t\xEB ": "0", " t\xEB": "1", "n\xEB ": "2", p\u00EBr: "3", " p\xEB": "4", " e ": "5", sht: "6", " n\xEB": "7", " sh": "8", "se ": "9", "et ": "10", "\xEB s": "11", "\xEB t": "12", " se": "13", "he ": "14", "j\xEB ": "15", "\xEBr ": "16", dhe: "17", " pa": "18", "\xEB n": "19", "\xEB p": "20", " q\xEB": "21", " dh": "22", nj\u00EB: "23", "\xEB m": "24", " nj": "25", \u00EBsh: "26", "in ": "27", " me": "28", "q\xEB ": "29", " po": "30", "e n": "31", "e t": "32", ish: "33", "m\xEB ": "34", "s\xEB ": "35", "me ": "36", ht\u00EB: "37", " ka": "38", " si": "39", "e k": "40", "e p": "41", " i ": "42", an\u00EB: "43", "ar ": "44", " nu": "45", und: "46", "ve ": "47", " \xEBs": "48", "e s": "49", " m\xEB": "50", nuk: "51", par: "52", uar: "53", "uk ": "54", "jo ": "55", "r\xEB ": "56", "ta ": "57", "\xEB f": "58", "en ": "59", "it ": "60", min: "61", het: "62", "n e": "63", "ri ": "64", shq: "65", "\xEB d": "66", " do": "67", " nd": "68", "sh ": "69", "\xEBn ": "70", at\u00EB: "71", hqi: "72", ist: "73", "\xEB q": "74", " gj": "75", " ng": "76", " th": "77", "a n": "78", "do ": "79", end: "80", imi: "81", ndi: "82", "r t": "83", rat: "84", "\xEB b": "85", \u00EBri: "86", " mu": "87", art: "88", ash: "89", qip: "90", " ko": "91", "e m": "92", edh: "93", eri: "94", "je ": "95", "ka ": "96", nga: "97", "si ": "98", "te ": "99", "\xEB k": "100", \u00EBsi: "101", " ma": "102", " ti": "103", eve: "104", hje: "105", ira: "106", mun: "107", "on ": "108", "po ": "109", "re ": "110", " pr": "111", "im ": "112", lit: "113", "o t": "114", "ur ": "115", "\xEB e": "116", "\xEB v": "117", "\xEBt ": "118", " ku": "119", " s\xEB": "120", "e d": "121", "es ": "122", "ga ": "123", iti: "124", jet: "125", nd\u00EB: "126", oli: "127", shi: "128", tje: "129", " b\xEB": "130", " z ": "131", gje: "132", kan: "133", shk: "134", \u00EBnd: "135", "\xEBs ": "136", " de": "137", " kj": "138", " ru": "139", " vi": "140", ara: "141", gov: "142", kjo: "143", "or ": "144", "r p": "145", rto: "146", rug: "147", tet: "148", ugo: "149", ali: "150", arr: "151", "at ": "152", "d t": "153", "ht ": "154", "i p": "155", ip\u00EB: "156", izi: "157", jn\u00EB: "158", "n n": "159", ohe: "160", shu: "161", sh\u00EB: "162", "t e": "163", tik: "164", "a e": "165", ar\u00EB: "166", et\u00EB: "167", hum: "168", "nd ": "169", ndr: "170", osh: "171", ova: "172", rim: "173", tos: "174", "va ": "175", " fa": "176", " fi": "177", "a s": "178", hen: "179", "i n": "180", mar: "181", ndo: "182", por: "183", ris: "184", "sa ": "185", sis: "186", t\u00EBs: "187", um\u00EB: "188", viz: "189", zit: "190", " di": "191", " mb": "192", "aj ": "193", ana: "194", ata: "195", d\u00EBr: "196", "e a": "197", esh: "198", ime: "199", jes: "200", lar: "201", "n s": "202", nte: "203", pol: "204", "r n": "205", ran: "206", res: "207", rr\u00EB: "208", tar: "209", "\xEB a": "210", "\xEB i": "211", " at": "212", " jo": "213", " k\xEB": "214", " re": "215", "a k": "216", "ai ": "217", akt: "218", "h\xEB ": "219", h\u00EBn: "220", "i i": "221", "i m": "222", "ia ": "223", men: "224", nis: "225", shm: "226", str: "227", "t k": "228", "t n": "229", "t s": "230", "\xEB g": "231", \u00EBrk: "232", \u00EBve: "233", " ai": "234", " ci": "235", " ed": "236", " ja": "237", " kr": "238", " qe": "239", " ta": "240", " ve": "241", "a p": "242", cil: "243", "el ": "244", er\u00EB: "245", gji: "246", hte: "247", "i t": "248", jen: "249", jit: "250", "k d": "251", m\u00EBn: "252", "n t": "253", nyr: "254", ori: "255", pas: "256", "ra ": "257", rie: "258", r\u00EBs: "259", tor: "260", uaj: "261", yre: "262", "\xEBm ": "263", \u00EBny: "264", " ar": "265", " du": "266", " ga": "267", " je": "268", d\u00EBs: "269", "e e": "270", "e z": "271", "ha ": "272", hme: "273", ika: "274", ini: "275", ite: "276", ith: "277", koh: "278", kra: "279", "ku ": "280", lim: "281", lis: "282", q\u00EBn: "283", r\u00EBn: "284", "s s": "285", "t d": "286", "t t": "287", tir: "288", t\u00EBn: "289", ver: "290", "\xEB j": "291", " ba": "292", " in": "293", " tr": "294", " zg": "295", "a a": "296", "a m": "297", "a t": "298", abr: "299" }, arabic: { " \u0627\u0644": "0", \u0627\u0644\u0639: "1", \u0644\u0639\u0631: "2", \u0639\u0631\u0627: "3", \u0631\u0627\u0642: "4", " \u0641\u064A": "5", "\u0641\u064A ": "6", "\u064A\u0646 ": "7", "\u064A\u0629 ": "8", "\u0646 \u0627": "9", \u0627\u0644\u0645: "10", "\u0627\u062A ": "11", "\u0645\u0646 ": "12", "\u064A \u0627": "13", " \u0645\u0646": "14", \u0627\u0644\u0623: "15", "\u0629 \u0627": "16", "\u0627\u0642 ": "17", " \u0648\u0627": "18", "\u0627\u0621 ": "19", \u0627\u0644\u0625: "20", " \u0623\u0646": "21", \u0648\u0627\u0644: "22", "\u0645\u0627 ": "23", " \u0639\u0644": "24", "\u0644\u0649 ": "25", "\u062A \u0627": "26", "\u0648\u0646 ": "27", "\u0647\u0645 ": "28", \u0627\u0642\u064A: "29", "\u0627\u0645 ": "30", "\u0644 \u0627": "31", "\u0623\u0646 ": "32", "\u0645 \u0627": "33", \u0627\u0644\u062A: "34", "\u0644\u0627 ": "35", \u0627\u0644\u0627: "36", "\u0627\u0646 ": "37", "\u0647\u0627 ": "38", "\u0627\u0644 ": "39", "\u0629 \u0648": "40", "\u0627 \u0627": "41", \u0631\u0647\u0627: "42", \u0644\u0627\u0645: "43", \u064A\u064A\u0646: "44", " \u0648\u0644": "45", \u0644\u0623\u0645: "46", "\u0646\u0627 ": "47", \u0639\u0644\u0649: "48", "\u0646 \u064A": "49", \u0627\u0644\u0628: "50", "\u0627\u062F ": "51", \u0627\u0644\u0642: "52", "\u062F \u0627": "53", "\u0630\u0627 ": "54", "\u0647 \u0627": "55", " \u0628\u0627": "56", \u0627\u0644\u062F: "57", "\u0628 \u0627": "58", \u0645\u0631\u064A: "59", "\u0644\u0645 ": "60", " \u0625\u0646": "61", " \u0644\u0644": "62", \u0633\u0644\u0627: "63", \u0623\u0645\u0631: "64", \u0631\u064A\u0643: "65", "\u0645\u0629 ": "66", "\u0649 \u0627": "67", "\u0627 \u064A": "68", " \u0639\u0646": "69", " \u0647\u0630": "70", "\u0621 \u0627": "71", "\u0631 \u0627": "72", \u0643\u0627\u0646: "73", \u0642\u062A\u0644: "74", \u0625\u0633\u0644: "75", \u0627\u0644\u062D: "76", "\u0648\u0627 ": "77", " \u0625\u0644": "78", "\u0627 \u0623": "79", \u0628\u0627\u0644: "80", "\u0646 \u0645": "81", \u0627\u0644\u0633: "82", "\u0631\u0629 ": "83", \u0644\u0625\u0633: "84", "\u0646 \u0648": "85", \u0647\u0627\u0628: "86", "\u064A \u0648": "87", "\u064A\u0631 ": "88", " \u0643\u0627": "89", "\u0644\u0629 ": "90", \u064A\u0627\u062A: "91", " \u0644\u0627": "92", \u0627\u0646\u062A: "93", "\u0646 \u0623": "94", \u064A\u0643\u064A: "95", \u0627\u0644\u0631: "96", \u0627\u0644\u0648: "97", "\u0629 \u0641": "98", "\u062F\u0629 ": "99", \u0627\u0644\u062C: "100", "\u0642\u064A ": "101", "\u0648\u064A ": "102", \u0627\u0644\u0630: "103", \u0627\u0644\u0634: "104", \u0627\u0645\u064A: "105", \u0627\u0646\u064A: "106", "\u0630\u0647 ": "107", "\u0639\u0646 ": "108", \u0644\u0645\u0627: "109", \u0647\u0630\u0647: "110", "\u0648\u0644 ": "111", "\u0627\u0641 ": "112", \u0627\u0648\u064A: "113", \u0628\u0631\u064A: "114", "\u0629 \u0644": "115", " \u0623\u0645": "116", " \u0644\u0645": "117", " \u0645\u0627": "118", "\u064A\u062F ": "119", " \u0623\u064A": "120", \u0625\u0631\u0647: "121", "\u0639 \u0627": "122", \u0639\u0645\u0644: "123", \u0648\u0644\u0627: "124", \u0625\u0644\u0649: "125", \u0627\u0628\u064A: "126", "\u0646 \u0641": "127", \u062E\u062A\u0637: "128", "\u0644\u0643 ": "129", "\u0646\u0647 ": "130", "\u0646\u064A ": "131", "\u0625\u0646 ": "132", \u062F\u064A\u0646: "133", "\u0641 \u0627": "134", \u0644\u0630\u064A: "135", "\u064A \u0623": "136", "\u064A \u0628": "137", " \u0648\u0623": "138", "\u0627 \u0639": "139", \u0627\u0644\u062E: "140", "\u062A\u0644 ": "141", "\u062A\u064A ": "142", "\u0642\u062F ": "143", \u0644\u062F\u064A: "144", " \u0643\u0644": "145", " \u0645\u0639": "146", "\u0627\u0628 ": "147", \u0627\u062E\u062A: "148", "\u0627\u0631 ": "149", \u0627\u0644\u0646: "150", \u0639\u0644\u0627: "151", "\u0645 \u0648": "152", "\u0645\u0639 ": "153", "\u0633 \u0627": "154", "\u0643\u0644 ": "155", \u0644\u0627\u0621: "156", "\u0646 \u0628": "157", "\u0646 \u062A": "158", "\u064A \u0645": "159", \u0639\u0631\u0628: "160", "\u0645 \u0628": "161", " \u0648\u0642": "162", " \u064A\u0642": "163", "\u0627 \u0644": "164", "\u0627 \u0645": "165", \u0627\u0644\u0641: "166", \u062A\u0637\u0627: "167", \u062F\u0627\u062F: "168", \u0644\u0645\u0633: "169", "\u0644\u0647 ": "170", \u0647\u0630\u0627: "171", " \u0645\u062D": "172", \u0624\u0644\u0627: "173", "\u0628\u064A ": "174", "\u0629 \u0645": "175", "\u0646 \u0644": "176", \u0647\u0624\u0644: "177", "\u0643\u0646 ": "178", \u0644\u0625\u0631: "179", \u0644\u062A\u064A: "180", " \u0623\u0648": "181", " \u0627\u0646": "182", " \u0639\u0645": "183", "\u0627 \u0641": "184", "\u0629 \u0623": "185", \u0637\u0627\u0641: "186", "\u0639\u0628 ": "187", "\u0644 \u0645": "188", "\u0646 \u0639": "189", "\u0648\u0631 ": "190", "\u064A\u0627 ": "191", " \u064A\u0633": "192", "\u0627 \u062A": "193", "\u0629 \u0628": "194", \u0631\u0627\u0621: "195", \u0639\u0627\u0644: "196", \u0642\u0648\u0627: "197", \u0642\u064A\u0629: "198", \u0644\u0639\u0627: "199", "\u0645 \u064A": "200", "\u0645\u064A ": "201", \u0645\u064A\u0629: "202", \u0646\u064A\u0629: "203", "\u0623\u064A ": "204", \u0627\u0628\u0627: "205", \u0628\u063A\u062F: "206", "\u0628\u0644 ": "207", "\u0631\u0628 ": "208", \u0639\u0645\u0627: "209", \u063A\u062F\u0627: "210", \u0645\u0627\u0644: "211", \u0645\u0644\u064A: "212", "\u064A\u0633 ": "213", " \u0628\u0623": "214", " \u0628\u0639": "215", " \u0628\u063A": "216", " \u0648\u0645": "217", \u0628\u0627\u062A: "218", \u0628\u064A\u0629: "219", \u0630\u0644\u0643: "220", "\u0639\u0629 ": "221", \u0642\u0627\u0648: "222", \u0642\u064A\u064A: "223", "\u0643\u064A ": "224", "\u0645 \u0645": "225", "\u064A \u0639": "226", " \u0639\u0631": "227", " \u0642\u0627": "228", "\u0627 \u0648": "229", "\u0631\u0649 ": "230", "\u0642 \u0627": "231", \u0648\u0627\u062A: "232", "\u0648\u0645 ": "233", " \u0647\u0624": "234", "\u0627 \u0628": "235", \u062F\u0627\u0645: "236", "\u062F\u064A ": "237", \u0631\u0627\u062A: "238", \u0634\u0639\u0628: "239", \u0644\u0627\u0646: "240", \u0644\u0634\u0639: "241", \u0644\u0642\u0648: "242", \u0644\u064A\u0627: "243", "\u0646 \u0647": "244", "\u064A \u062A": "245", "\u064A \u064A": "246", " \u0648\u0647": "247", " \u064A\u062D": "248", \u062C\u0631\u0627: "249", \u062C\u0645\u0627: "250", \u062D\u0645\u062F: "251", "\u062F\u0645 ": "252", "\u0643\u0645 ": "253", \u0644\u0627\u0648: "254", \u0644\u0631\u0647: "255", \u0645\u0627\u0639: "256", "\u0646 \u0642": "257", "\u0646\u0629 ": "258", "\u0647\u064A ": "259", " \u0628\u0644": "260", " \u0628\u0647": "261", " \u0644\u0647": "262", " \u0648\u064A": "263", "\u0627 \u0643": "264", \u0627\u0630\u0627: "265", "\u0627\u0639 ": "266", "\u062A \u0645": "267", \u062A\u062E\u0627: "268", \u062E\u0627\u0628: "269", "\u0631 \u0645": "270", \u0644\u0645\u062A: "271", \u0645\u0633\u0644: "272", "\u0649 \u0623": "273", \u064A\u0633\u062A: "274", \u064A\u0637\u0627: "275", " \u0644\u0623": "276", " \u0644\u064A": "277", \u0623\u0645\u0646: "278", \u0627\u0633\u062A: "279", \u0628\u0639\u0636: "280", "\u0629 \u062A": "281", "\u0631\u064A ": "282", \u0635\u062F\u0627: "283", "\u0642 \u0648": "284", \u0642\u0648\u0644: "285", "\u0645\u062F ": "286", \u0646\u062A\u062E: "287", \u0646\u0641\u0633: "288", \u0646\u0647\u0627: "289", \u0647\u0646\u0627: "290", \u0623\u0639\u0645: "291", \u0623\u0646\u0647: "292", \u0627\u0626\u0646: "293", \u0627\u0644\u0622: "294", \u0627\u0644\u0643: "295", "\u062D\u0629 ": "296", "\u062F \u0645": "297", "\u0631 \u0639": "298", \u0631\u0628\u064A: "299" }, azeri: { l\u0259r: "0", "in ": "1", "\u0131n ": "2", lar: "3", "da ": "4", "an ": "5", "ir ": "6", "d\u0259 ": "7", "ki ": "8", " bi": "9", "\u0259n ": "10", \u0259ri: "11", ar\u0131: "12", "\u0259r ": "13", dir: "14", nda: "15", " ki": "16", rin: "17", n\u0131n: "18", \u0259si: "19", ini: "20", " ed": "21", " qa": "22", " t\u0259": "23", " ba": "24", " ol": "25", as\u0131: "26", il\u0259: "27", r\u0131n: "28", " ya": "29", an\u0131: "30", " v\u0259": "31", nd\u0259: "32", "ni ": "33", ara: "34", \u0131n\u0131: "35", \u0131nd: "36", " bu": "37", "si ": "38", "ib ": "39", "aq ": "40", d\u0259n: "41", iya: "42", "n\u0259 ": "43", "r\u0259 ": "44", "n b": "45", s\u0131n: "46", "v\u0259 ": "47", iri: "48", "l\u0259 ": "49", nin: "50", \u0259li: "51", " de": "52", " m\xFC": "53", bir: "54", "n s": "55", "ri ": "56", "\u0259k ": "57", " az": "58", " s\u0259": "59", "ar ": "60", bil: "61", z\u0259r: "62", "bu ": "63", dan: "64", edi: "65", ind: "66", man: "67", "un ": "68", \u0259r\u0259: "69", " ha": "70", lan: "71", yy\u0259: "72", iyy: "73", " il": "74", " ne": "75", "r k": "76", "\u0259 b": "77", " is": "78", "na ": "79", nun: "80", "\u0131r ": "81", " da": "82", " h\u0259": "83", "a b": "84", in\u0259: "85", sin: "86", yan: "87", \u0259rb: "88", " d\u0259": "89", " m\u0259": "90", " q\u0259": "91", d\u0131r: "92", "li ": "93", ola: "94", rba: "95", az\u0259: "96", can: "97", "l\u0131 ": "98", nla: "99", " et": "100", " g\xF6": "101", al\u0131: "102", ayc: "103", bay: "104", eft: "105", ist: "106", "n i": "107", nef: "108", tl\u0259: "109", yca: "110", y\u0259t: "111", \u0259c\u0259: "112", " la": "113", ild: "114", "n\u0131 ": "115", tin: "116", ldi: "117", lik: "118", "n h": "119", "n m": "120", oyu: "121", raq: "122", "ya ": "123", \u0259ti: "124", " ar": "125", ada: "126", ed\u0259: "127", mas: "128", "s\u0131 ": "129", \u0131na: "130", "\u0259 d": "131", \u0259l\u0259: "132", ay\u0131: "133", iyi: "134", lma: "135", m\u0259k: "136", "n d": "137", "ti ": "138", yin: "139", yun: "140", "\u0259t ": "141", az\u0131: "142", "ft ": "143", "i t": "144", lli: "145", "n a": "146", "ra ": "147", " c\u0259": "148", " g\u0259": "149", " ko": "150", " n\u0259": "151", " oy": "152", "a d": "153", ana: "154", c\u0259k: "155", eyi: "156", ilm: "157", irl: "158", lay: "159", liy: "160", lub: "161", "n \u0259": "162", ril: "163", rl\u0259: "164", unu: "165", ver: "166", "\xFCn ": "167", "\u0259 o": "168", \u0259ni: "169", " he": "170", " ma": "171", " on": "172", " pa": "173", ala: "174", dey: "175", "i m": "176", ima: "177", lm\u0259: "178", m\u0259t: "179", par: "180", "y\u0259 ": "181", \u0259tl: "182", " al": "183", " mi": "184", " sa": "185", " \u0259l": "186", ad\u0131: "187", ak\u0131: "188", and: "189", ard: "190", art: "191", ayi: "192", "i a": "193", "i q": "194", "i y": "195", ili: "196", ill: "197", is\u0259: "198", "n o": "199", "n q": "200", olu: "201", rla: "202", st\u0259: "203", "s\u0259 ": "204", tan: "205", tel: "206", yar: "207", \u0259d\u0259: "208", " me": "209", " r\u0259": "210", " ve": "211", " ye": "212", "a k": "213", "at ": "214", ba\u015F: "215", diy: "216", ent: "217", eti: "218", h\u0259s: "219", "i i": "220", "ik ": "221", "la ": "222", mi\u015F: "223", "n n": "224", "nu ": "225", qar: "226", ran: "227", t\u0259r: "228", xan: "229", "\u0259 a": "230", "\u0259 g": "231", "\u0259 t": "232", " d\xFC": "233", ama: "234", "b k": "235", dil: "236", era: "237", etm: "238", "i b": "239", kil: "240", mil: "241", "n r": "242", qla: "243", "r s": "244", ras: "245", siy: "246", son: "247", tim: "248", yer: "249", "\u0259 k": "250", " g\xFC": "251", " so": "252", " s\xF6": "253", " te": "254", " xa": "255", "ai ": "256", bar: "257", cti: "258", "di ": "259", eri: "260", g\u00F6r: "261", g\u00FCn: "262", g\u0259l: "263", hb\u0259: "264", ih\u0259: "265", iki: "266", isi: "267", lin: "268", mai: "269", maq: "270", "n k": "271", "n t": "272", "n v": "273", onu: "274", qan: "275", q\u0259z: "276", "t\u0259 ": "277", xal: "278", yib: "279", yih: "280", zet: "281", z\u0131r: "282", "\u0131b ": "283", "\u0259 m": "284", \u0259ze: "285", " br": "286", " in": "287", " i\u0307": "288", " pr": "289", " ta": "290", " to": "291", " \xFC\xE7": "292", "a o": "293", ali: "294", ani: "295", anl: "296", aql: "297", azi: "298", bri: "299" }, bengali: { "\u09BE\u09B0 ": "0", "\u09AF\u09BC ": "1", "\u09C7\u09AF\u09BC": "2", \u09AF\u09BC\u09BE: "3", " \u0995\u09B0": "4", "\u09C7\u09A4 ": "5", " \u0995\u09BE": "6", " \u09AA\u09BE": "7", " \u09A4\u09BE": "8", "\u09A8\u09BE ": "9", "\u09BE\u09AF\u09BC": "10", "\u09C7\u09B0 ": "11", \u09AF\u09BC\u09C7: "12", " \u09AC\u09BE": "13", "\u09C7\u09AC ": "14", " \u09AF\u09BE": "15", " \u09B9\u09C7": "16", " \u09B8\u09BE": "17", "\u09BE\u09A8 ": "18", "\u09C7\u099B ": "19", " \u09BF\u09A8": "20", "\u09C7\u09B2 ": "21", " \u09BF\u09A6": "22", " \u09A8\u09BE": "23", " \u09BF\u09AC": "24", "\u09C7\u0995 ": "25", "\u09B2\u09BE ": "26", "\u09A4\u09BE ": "27", " \u09AC\u0A98": "28", " \u09BF\u0995": "29", \u0995\u09B0\u09C7: "30", " \u09AA\u0A9A": "31", "\u09BE\u09C7\u09B0": "32", "\u09BF\u09A8\u09C7": "33", "\u09B0\u09BE ": "34", " \u09CB\u09AC": "35", "\u0995\u09BE ": "36", " \u0995\u09C7": "37", " \u099F\u09BE": "38", "\u09B0 \u0995": "39", "\u09C7\u09B2\u09BE": "40", " \u09CB\u0995": "41", " \u09AE\u09BE": "42", " \u09CB\u09A6": "43", " \u09CB\u09AE": "44", "\u09A6\u09B0 ": "45", "\u09BC\u09BE ": "46", "\u09BF\u09A6\u09C7": "47", "\u09BE\u0995\u09BE": "48", "\u09BC\u09C7\u099B": "49", "\u09C7\u09A6\u09B0": "50", " \u0986\u09C7": "51", " \u0993 ": "52", "\u09BE\u09B2 ": "53", "\u09BF\u099F ": "54", " \u09AE\u09C1": "55", \u0995\u09C7\u09B0: "56", \u09B9\u09AF\u09BC: "57", \u0995\u09B0\u09BE: "58", "\u09AA\u09B0 ": "59", \u09AA\u09BE\u09C7: "60", " \u098F\u0995": "61", " \u09AA\u09A6": "62", \u099F\u09BE\u0995: "63", "\u09A1\u09BC ": "64", \u0995\u09BE\u09A8: "65", "\u099F\u09BE ": "66", \u09A6\u0A97\u09BE: "67", \u09AA\u09A6\u0A97: "68", "\u09BE\u09A1\u09BC": "69", "\u09CB\u0995\u09BE": "70", \u0993\u09AF\u09BC: "71", \u0995\u09BE\u09AA: "72", \u09B9\u09C7\u09AF: "73", "\u09C7\u09A8\u09B0": "74", " \u09B9\u09AF": "75", \u09A6\u09C7\u09AF: "76", "\u09A8\u09B0 ": "77", "\u09BE\u09A8\u09BE": "78", "\u09BE\u09C7\u09B2": "79", " \u0986\u09B0": "80", " \u09BC ": "81", \u09AC\u0A98\u09AC: "82", "\u09BF\u09AF\u09BC": "83", " \u09A6\u09BE": "84", " \u09B8\u09AE": "85", \u0995\u09BE\u09B0: "86", \u09B9\u09BE\u09B0: "87", "\u09BE\u0987 ": "88", \u09A1\u09BC\u09BE: "89", "\u09BF\u09AC\u09BF": "90", " \u09B0\u09BE": "91", " \u09B2\u09BE": "92", \u09A8\u09BE\u09B0: "93", \u09AC\u09B9\u09BE: "94", "\u09AC\u09BE ": "95", \u09AF\u09BE\u09AF: "96", "\u09C7\u09A8 ": "97", \u0A98\u09AC\u09B9: "98", " \u09AD\u09BE": "99", " \u09B8\u09C7": "100", " \u09CB\u09AF": "101", "\u09B0\u09B0 ": "102", "\u09BC\u09BE\u09B0": "103", "\u09BC\u09BE\u09B2": "104", "\u0A97\u09BE ": "105", \u09A5\u09C7\u0995: "106", \u09AD\u09BE\u09C7: "107", "\u09BC\u09C7 ": "108", "\u09C7\u09B0\u09B0": "109", " \u09A7\u09B0": "110", " \u09B9\u09BE": "111", "\u09A8\u0A98 ": "112", \u09B0\u09C7\u09A8: "113", "\u09BE\u09C7\u09AC": "114", "\u09BF\u09A1\u09BC": "115", "\u09BF\u09B0 ": "116", " \u09CB\u09A5": "117", \u09A4\u09BE\u09B0: "118", \u09AC\u09BF\u09AD: "119", \u09B0\u09C7\u09A4: "120", \u09B8\u09BE\u09C7: "121", "\u09BE\u0995\u09C7": "122", "\u09BE\u09C7\u09A4": "123", "\u09BF\u09AD\u0A2D": "124", "\u09C7 \u09AC": "125", "\u09CB\u09A5\u09C7": "126", " \u09CB\u09AA": "127", " \u09CB\u09B8": "128", \u09AC\u09BE\u09B0: "129", "\u09AD\u0A2D ": "130", "\u09B0\u09A8 ": "131", "\u09BE\u09AE ": "132", " \u098F\u0996": "133", "\u0986\u09B0 ": "134", \u0995\u09BE\u09C7: "135", "\u09A6\u09A8 ": "136", \u09B8\u09BE\u099C: "137", "\u09BE\u09C7\u0995": "138", "\u09BE\u09C7\u09A8": "139", "\u09C7\u09A8\u09BE": "140", " \u0998\u09C7": "141", " \u09A4\u09C7": "142", " \u09B0\u09C7": "143", \u09A4\u09C7\u09AC: "144", "\u09AC\u09A8 ": "145", \u09AC\u0A98\u09BE: "146", "\u09C7\u09A1\u09BC": "147", "\u09C7\u09AC\u09A8": "148", " \u0996\u09C1": "149", " \u099A\u09BE": "150", " \u09B8\u09C1": "151", "\u0995\u09C7 ": "152", \u09A7\u09B0\u09C7: "153", "\u09B0 \u09CB": "154", "\u09BC \u09BF": "155", "\u09BE \u09BF": "156", "\u09BE\u09C7\u09A5": "157", "\u09BE\u0A20\u09BE": "158", "\u09BF\u09A6 ": "159", "\u09BF\u09A8 ": "160", " \u0985\u09A8": "161", " \u0986\u09AA": "162", " \u0986\u09AE": "163", " \u09A5\u09BE": "164", " \u09AC\u0A9A": "165", " \u09CB\u09AB": "166", " \u09CC\u09A4": "167", \u0998\u09C7\u09B0: "168", "\u09A4\u09C7 ": "169", \u09AE\u09AF\u09BC: "170", \u09AF\u09BE\u0A20: "171", "\u09B0 \u09B8": "172", \u09B0\u09BE\u0996: "173", "\u09BE \u09AC": "174", "\u09BE \u09CB": "175", "\u09BE\u09B2\u09BE": "176", "\u09BF\u0995 ": "177", "\u09BF\u09B6 ": "178", "\u09C7\u0996 ": "179", " \u098F\u09B0": "180", " \u099A\u0A93": "181", " \u09BF\u09A1": "182", "\u0996\u09A8 ": "183", \u09A1\u09BC\u09C7: "184", "\u09B0 \u09AC": "185", "\u09BC\u09B0 ": "186", "\u09BE\u0987\u09C7": "187", "\u09BE\u09C7\u09A6": "188", "\u09BF\u09A6\u09A8": "189", "\u09C7\u09B0\u09A8": "190", " \u09A4\u0A74": "191", \u099B\u09BE\u09A1: "192", \u099C\u09A8\u0A98: "193", \u09A4\u09BE\u0987: "194", "\u09AE\u09BE ": "195", \u09AE\u09BE\u09C7: "196", \u09B2\u09BE\u09B0: "197", "\u09BE\u099C ": "198", "\u09BE\u09A4\u09BE": "199", "\u09BE\u09AE\u09BE": "200", \u0A0A\u09C7\u09B2: "201", \u0A97\u09BE\u09B0: "202", " \u09B8\u09AC": "203", \u0986\u09AA\u09A8: "204", \u098F\u0995\u099F: "205", \u0995\u09BE\u09BF: "206", \u099C\u09BE\u0987: "207", "\u099F\u09B0 ": "208", \u09A1\u099C\u09BE: "209", \u09A6\u09C7\u0996: "210", \u09AA\u09A8\u09BE: "211", "\u09B0\u0993 ": "212", "\u09B2\u09C7 ": "213", \u09B9\u09C7\u09AC: "214", "\u09BE\u099C\u09BE": "215", "\u09BE\u09BF\u099F": "216", "\u09BF\u09A1\u099C": "217", "\u09C7\u09A5 ": "218", " \u098F\u09AC": "219", " \u099C\u09A8": "220", " \u099C\u09BE": "221", \u0986\u09AE\u09BE: "222", \u0997\u09C7\u09B2: "223", \u099C\u09BE\u09A8: "224", \u09A8\u09C7\u09A4: "225", \u09AC\u09BF\u09B6: "226", \u09AE\u09C1\u09C7: "227", \u09AE\u09C7\u09AF: "228", "\u09B0 \u09AA": "229", "\u09B8\u09C7 ": "230", \u09B9\u09C7\u09B2: "231", "\u09BC \u09CB": "232", "\u09BE \u09B9": "233", "\u09BE\u0993\u09AF": "234", "\u09CB\u09AE\u0995": "235", \u0A98\u09BE\u09BF: "236", " \u0985\u09C7": "237", " \u099F ": "238", " \u09CB\u0997": "239", " \u09CB\u09A8": "240", "\u099C\u09B0 ": "241", \u09A4\u09BF\u09B0: "242", \u09A6\u09BE\u09AE: "243", \u09AA\u09A1\u09BC: "244", \u09AA\u09BE\u09B0: "245", \u09AC\u09BE\u0998: "246", \u09AE\u0995\u09BE: "247", \u09AE\u09BE\u09AE: "248", \u09AF\u09BC\u09B0: "249", \u09AF\u09BE\u09C7: "250", "\u09B0 \u09AE": "251", "\u09B0\u09C7 ": "252", "\u09B2\u09B0 ": "253", "\u09BE \u0995": "254", "\u09BE\u0997 ": "255", "\u09BE\u09AC\u09BE": "256", "\u09BE\u09B0\u09BE": "257", "\u09BE\u09BF\u09A8": "258", "\u09C7 \u0997": "259", "\u09C7\u0997 ": "260", "\u09C7\u09B2\u09B0": "261", "\u09CB\u09A6\u0996": "262", "\u09CB\u09AC\u09BF": "263", "\u0A93\u09B2 ": "264", " \u09A6\u09C7": "265", " \u09AA\u09C1": "266", " \u09AC\u09C7": "267", \u0985\u09C7\u09A8: "268", \u098F\u0996\u09A8: "269", \u0995\u099B\u09C1: "270", \u0995\u09BE\u09B2: "271", \u0997\u09C7\u09AF: "272", "\u099B\u09A8 ": "273", "\u09A4 \u09AA": "274", \u09A8\u09C7\u09AF: "275", \u09AA\u09BE\u09BF: "276", "\u09AE\u09A8 ": "277", "\u09B0 \u0986": "278", \u09B0\u09BE\u09B0: "279", "\u09BE\u0993 ": "280", "\u09BE\u09AA ": "281", "\u09BF\u0995\u099B": "282", "\u09BF\u0997\u09C7": "283", "\u09C7\u099B\u09A8": "284", "\u09C7\u099C\u09B0": "285", "\u09CB\u09AE\u09BE": "286", "\u09CB\u09AE\u09C7": "287", "\u09CC\u09A4\u09BF": "288", \u0A98\u09BE\u09C7: "289", " ' ": "290", " \u098F\u099B": "291", " \u099B\u09BE": "292", " \u09AC\u09B2": "293", " \u09AF\u09BF": "294", " \u09B6\u09BF": "295", " \u09BF\u09AE": "296", " \u09CB\u09B2": "297", \u098F\u099B\u09BE: "298", "\u0996\u09BE ": "299" }, bulgarian: { "\u043D\u0430 ": "0", " \u043D\u0430": "1", "\u0442\u043E ": "2", " \u043F\u0440": "3", " \u0437\u0430": "4", "\u0442\u0430 ": "5", " \u043F\u043E": "6", \u0438\u0442\u0435: "7", "\u0442\u0435 ": "8", "\u0430 \u043F": "9", "\u0430 \u0441": "10", " \u043E\u0442": "11", "\u0437\u0430 ": "12", \u0430\u0442\u0430: "13", "\u0438\u044F ": "14", " \u0432 ": "15", "\u0435 \u043D": "16", " \u0434\u0430": "17", "\u0430 \u043D": "18", " \u0441\u0435": "19", " \u043A\u043E": "20", "\u0434\u0430 ": "21", "\u043E\u0442 ": "22", \u0430\u043D\u0438: "23", \u043F\u0440\u0435: "24", "\u043D\u0435 ": "25", \u0435\u043D\u0438: "26", "\u043E \u043D": "27", "\u043D\u0438 ": "28", "\u0441\u0435 ": "29", " \u0438 ": "30", "\u043D\u043E ": "31", \u0430\u043D\u0435: "32", \u0435\u0442\u043E: "33", "\u0430 \u0432": "34", "\u0432\u0430 ": "35", \u0432\u0430\u043D: "36", "\u0435 \u043F": "37", "\u0430 \u043E": "38", \u043E\u0442\u043E: "39", \u0440\u0430\u043D: "40", "\u0430\u0442 ": "41", \u0440\u0435\u0434: "42", " \u043D\u0435": "43", "\u0430 \u0434": "44", "\u0438 \u043F": "45", " \u0434\u043E": "46", \u043F\u0440\u043E: "47", " \u0441\u044A": "48", "\u043B\u0438 ": "49", \u043F\u0440\u0438: "50", \u043D\u0438\u044F: "51", \u0441\u043A\u0438: "52", \u0442\u0435\u043B: "53", "\u0430 \u0438": "54", "\u043F\u043E ": "55", "\u0440\u0438 ": "56", " \u0435 ": "57", " \u043A\u0430": "58", \u0438\u0440\u0430: "59", \u043A\u0430\u0442: "60", \u043D\u0438\u0435: "61", \u043D\u0438\u0442: "62", "\u0435 \u0437": "63", "\u0438 \u0441": "64", "\u043E \u0441": "65", \u043E\u0441\u0442: "66", "\u0447\u0435 ": "67", " \u0440\u0430": "68", \u0438\u0441\u0442: "69", "\u043E \u043F": "70", " \u0438\u0437": "71", " \u0441\u0430": "72", "\u0435 \u0434": "73", \u0438\u043D\u0438: "74", "\u043A\u0438 ": "75", \u043C\u0438\u043D: "76", " \u043C\u0438": "77", "\u0430 \u0431": "78", \u0430\u0432\u0430: "79", "\u0435 \u0432": "80", "\u0438\u0435 ": "81", \u043F\u043E\u043B: "82", \u0441\u0442\u0432: "83", "\u0442 \u043D": "84", " \u0432\u044A": "85", " \u0441\u0442": "86", " \u0442\u043E": "87", \u0430\u0437\u0430: "88", "\u0435 \u043E": "89", "\u043E\u0432 ": "90", "\u0441\u0442 ": "91", "\u044A\u0442 ": "92", "\u0438 \u043D": "93", \u0438\u044F\u0442: "94", \u043D\u0430\u0442: "95", "\u0440\u0430 ": "96", " \u0431\u044A": "97", " \u0447\u0435": "98", \u0430\u043B\u043D: "99", "\u0435 \u0441": "100", "\u0435\u043D ": "101", \u0435\u0441\u0442: "102", "\u0438 \u0434": "103", \u043B\u0435\u043D: "104", \u043D\u0438\u0441: "105", "\u043E \u043E": "106", \u043E\u0432\u0438: "107", " \u043E\u0431": "108", " \u0441\u043B": "109", "\u0430 \u0440": "110", \u0430\u0442\u043E: "111", \u043A\u043E\u043D: "112", \u043D\u043E\u0441: "113", \u0440\u043E\u0432: "114", "\u0449\u0435 ": "115", " \u0440\u0435": "116", " \u0441 ": "117", " \u0441\u043F": "118", \u0432\u0430\u0442: "119", \u0435\u0448\u0435: "120", "\u0438 \u0432": "121", \u0438\u0435\u0442: "122", "\u043E \u0432": "123", \u043E\u0432\u0435: "124", \u0441\u0442\u0430: "125", "\u0430 \u043A": "126", "\u0430 \u0442": "127", \u0434\u0430\u0442: "128", \u0435\u043D\u0442: "129", "\u043A\u0430 ": "130", \u043B\u0435\u0434: "131", \u043D\u0435\u0442: "132", \u043E\u0440\u0438: "133", \u0441\u0442\u0440: "134", \u0441\u0442\u044A: "135", "\u0442\u0438 ": "136", \u0442\u044A\u0440: "137", " \u0442\u0435": "138", "\u0430 \u0437": "139", "\u0430 \u043C": "140", "\u0430\u0434 ": "141", \u0430\u043D\u0430: "142", \u0435\u043D\u043E: "143", "\u0438 \u043E": "144", \u0438\u043D\u0430: "145", \u0438\u0442\u0438: "146", "\u043C\u0430 ": "147", \u0441\u043A\u0430: "148", \u0441\u043B\u0435: "149", \u0442\u0432\u043E: "150", \u0442\u0435\u0440: "151", \u0446\u0438\u044F: "152", "\u044F\u0442 ": "153", " \u0431\u0435": "154", " \u0434\u0435": "155", " \u043F\u0430": "156", \u0430\u0442\u0435: "157", \u0432\u0435\u043D: "158", "\u0432\u0438 ": "159", \u0432\u0438\u0442: "160", "\u0438 \u0437": "161", "\u0438 \u0438": "162", \u043D\u0430\u0440: "163", \u043D\u043E\u0432: "164", \u043E\u0432\u0430: "165", \u043F\u043E\u0432: "166", \u0440\u0435\u0437: "167", \u0440\u0438\u0442: "168", "\u0441\u0430 ": "169", \u044F\u0442\u0430: "170", " \u0433\u043E": "171", " \u0449\u0435": "172", \u0430\u043B\u0438: "173", "\u0432 \u043F": "174", \u0433\u0440\u0430: "175", "\u0435 \u0438": "176", \u0435\u0434\u0438: "177", \u0435\u043B\u0438: "178", \u0438\u043B\u0438: "179", \u043A\u0430\u0437: "180", \u043A\u0438\u0442: "181", \u043B\u043D\u043E: "182", \u043C\u0435\u043D: "183", \u043E\u043B\u0438: "184", \u0440\u0430\u0437: "185", " \u0432\u0435": "186", " \u0433\u0440": "187", " \u0438\u043C": "188", " \u043C\u0435": "189", " \u043F\u044A": "190", \u0430\u0432\u0438: "191", \u0430\u043A\u043E: "192", \u0430\u0447\u0430: "193", \u0432\u0438\u043D: "194", "\u0432\u043E ": "195", \u0433\u043E\u0432: "196", \u0434\u0430\u043D: "197", "\u0434\u0438 ": "198", "\u0434\u043E ": "199", "\u0435\u0434 ": "200", \u0435\u0440\u0438: "201", \u0435\u0440\u043E: "202", \u0436\u0434\u0430: "203", \u0438\u0442\u043E: "204", \u043A\u043E\u0432: "205", \u043A\u043E\u043B: "206", \u043B\u043D\u0438: "207", \u043C\u0435\u0440: "208", \u043D\u0430\u0447: "209", "\u043E \u0437": "210", \u043E\u043B\u0430: "211", "\u043E\u043D ": "212", \u043E\u043D\u0430: "213", \u043F\u0440\u0430: "214", \u0440\u0430\u0432: "215", \u0440\u0435\u043C: "216", \u0441\u0438\u044F: "217", \u0441\u0442\u0438: "218", "\u0442 \u043F": "219", \u0442\u0430\u043D: "220", "\u0445\u0430 ": "221", "\u0448\u0435 ": "222", \u0448\u0435\u043D: "223", \u044A\u043B\u0433: "224", " \u0431\u0430": "225", " \u0441\u0438": "226", \u0430\u0440\u043E: "227", \u0431\u044A\u043B: "228", "\u0432 \u0440": "229", \u0433\u0430\u0440: "230", "\u0435 \u0435": "231", \u0435\u043B\u043D: "232", \u0435\u043C\u0435: "233", \u0438\u043A\u043E: "234", \u0438\u043C\u0430: "235", "\u043A\u043E ": "236", \u043A\u043E\u0438: "237", "\u043B\u0430 ": "238", \u043B\u0433\u0430: "239", "\u043E \u0434": "240", \u043E\u0437\u0438: "241", \u043E\u0438\u0442: "242", \u043F\u043E\u0434: "243", \u0440\u0435\u0441: "244", \u0440\u0438\u0435: "245", \u0441\u0442\u043E: "246", "\u0442 \u043A": "247", "\u0442 \u043C": "248", "\u0442 \u0441": "249", \u0443\u0441\u0442: "250", " \u0431\u0438": "251", " \u0434\u0432": "252", " \u0434\u044A": "253", " \u043C\u0430": "254", " \u043C\u043E": "255", " \u043D\u0438": "256", " \u043E\u0441": "257", \u0430\u043B\u0430: "258", \u0430\u043D\u0441: "259", \u0430\u0440\u0430: "260", \u0430\u0442\u0438: "261", \u0430\u0446\u0438: "262", \u0431\u0435\u0448: "263", \u0432\u044A\u0440: "264", "\u0435 \u0440": "265", \u0435\u0434\u0432: "266", \u0435\u043C\u0430: "267", \u0436\u0430\u0432: "268", "\u0438 \u043A": "269", \u0438\u0430\u043B: "270", \u0438\u0446\u0430: "271", \u0438\u0447\u0435: "272", \u043A\u0438\u044F: "273", \u043B\u0438\u0442: "274", "\u043E \u0431": "275", \u043E\u0432\u043E: "276", \u043E\u0434\u0438: "277", \u043E\u043A\u0430: "278", \u043F\u043E\u0441: "279", \u0440\u043E\u0434: "280", \u0441\u0435\u0434: "281", \u0441\u043B\u0443: "282", "\u0442 \u0438": "283", \u0442\u043E\u0432: "284", \u0443\u0432\u0430: "285", \u0446\u0438\u0430: "286", \u0447\u0435\u0441: "287", "\u044F \u0437": "288", " \u0432\u043E": "289", " \u0438\u043B": "290", " \u0441\u043A": "291", " \u0442\u0440": "292", " \u0446\u0435": "293", \u0430\u043C\u0438: "294", \u0430\u0440\u0438: "295", \u0431\u0430\u0442: "296", "\u0431\u0438 ": "297", \u0431\u0440\u0430: "298", \u0431\u044A\u0434: "299" }, cebuano: { "ng ": "0", "sa ": "1", " sa": "2", ang: "3", "ga ": "4", nga: "5", " ka": "6", " ng": "7", "an ": "8", " an": "9", " na": "10", " ma": "11", " ni": "12", "a s": "13", "a n": "14", "on ": "15", " pa": "16", " si": "17", "a k": "18", "a m": "19", " ba": "20", ong: "21", "a i": "22", ila: "23", " mg": "24", mga: "25", "a p": "26", iya: "27", "a a": "28", "ay ": "29", "ka ": "30", ala: "31", ing: "32", "g m": "33", "n s": "34", "g n": "35", lan: "36", " gi": "37", "na ": "38", "ni ": "39", "o s": "40", "g p": "41", "n n": "42", " da": "43", "ag ": "44", pag: "45", "g s": "46", yan: "47", ayo: "48", "o n": "49", "si ": "50", " mo": "51", "a b": "52", "g a": "53", ail: "54", "g b": "55", han: "56", "a d": "57", asu: "58", nag: "59", "ya ": "60", man: "61", "ne ": "62", pan: "63", kon: "64", " il": "65", " la": "66", aka: "67", ako: "68", ana: "69", bas: "70", "ko ": "71", "od ": "72", "yo ": "73", " di": "74", " ko": "75", " ug": "76", "a u": "77", "g k": "78", kan: "79", "la ": "80", len: "81", sur: "82", "ug ": "83", " ai": "84", apa: "85", "aw ": "86", "d s": "87", "g d": "88", "g g": "89", ile: "90", nin: "91", " iy": "92", " su": "93", ene: "94", "og ": "95", "ot ": "96", aba: "97", aha: "98", "as ": "99", imo: "100", " ki": "101", "a t": "102", aga: "103", ban: "104", ero: "105", nan: "106", "o k": "107", ran: "108", ron: "109", sil: "110", una: "111", usa: "112", " us": "113", "a g": "114", ahi: "115", ani: "116", "er ": "117", "ha ": "118", "i a": "119", rer: "120", yon: "121", " pu": "122", ini: "123", nak: "124", "ro ": "125", "to ": "126", ure: "127", " ed": "128", " og": "129", " wa": "130", ili: "131", "mo ": "132", "n a": "133", "nd ": "134", "o a": "135", " ad": "136", " du": "137", " pr": "138", aro: "139", "i s": "140", "ma ": "141", "n m": "142", ulo: "143", und: "144", " ta": "145", ara: "146", asa: "147", ato: "148", awa: "149", dmu: "150", "e n": "151", edm: "152", ina: "153", mak: "154", mun: "155", niy: "156", san: "157", "wa ": "158", " tu": "159", " un": "160", "a l": "161", bay: "162", iga: "163", ika: "164", ita: "165", kin: "166", lis: "167", may: "168", "os ": "169", " ar": "170", "ad ": "171", ali: "172", ama: "173", ers: "174", ipa: "175", isa: "176", mao: "177", nim: "178", "t s": "179", tin: "180", " ak": "181", " ap": "182", " hi": "183", abo: "184", agp: "185", ano: "186", ata: "187", "g i": "188", gan: "189", gka: "190", gpa: "191", "i m": "192", iha: "193", "k s": "194", law: "195", "or ": "196", "rs ": "197", siy: "198", tag: "199", " al": "200", " at": "201", " ha": "202", " hu": "203", " im": "204", "a h": "205", "bu ": "206", "e s": "207", gma: "208", kas: "209", lag: "210", mon: "211", nah: "212", ngo: "213", "r s": "214", "ra ": "215", sab: "216", sam: "217", sul: "218", uba: "219", uha: "220", " lo": "221", " re": "222", ada: "223", aki: "224", aya: "225", bah: "226", "ce ": "227", "d n": "228", lab: "229", "pa ": "230", pak: "231", "s n": "232", "s s": "233", tan: "234", taw: "235", "te ": "236", uma: "237", ura: "238", " in": "239", " lu": "240", "a c": "241", abi: "242", "at ": "243", awo: "244", bat: "245", dal: "246", dla: "247", ele: "248", "g t": "249", "g u": "250", gay: "251", "go ": "252", hab: "253", hin: "254", "i e": "255", "i n": "256", kab: "257", kap: "258", lay: "259", lin: "260", nil: "261", pam: "262", pas: "263", pro: "264", pul: "265", "ta ": "266", ton: "267", uga: "268", ugm: "269", unt: "270", " co": "271", " gu": "272", " mi": "273", " pi": "274", " ti": "275", "a o": "276", abu: "277", adl: "278", ado: "279", agh: "280", agk: "281", "ao ": "282", art: "283", bal: "284", cit: "285", "di ": "286", dto: "287", dun: "288", ent: "289", "g e": "290", gon: "291", gug: "292", "ia ": "293", iba: "294", ice: "295", "in ": "296", inu: "297", "it ": "298", kaa: "299" }, croatian: { "je ": "0", " na": "1", " pr": "2", " po": "3", "na ": "4", " je": "5", " za": "6", ije: "7", "ne ": "8", " i ": "9", "ti ": "10", "da ": "11", " ko": "12", " ne": "13", "li ": "14", " bi": "15", " da": "16", " u ": "17", "ma ": "18", "mo ": "19", "a n": "20", "ih ": "21", "za ": "22", "a s": "23", "ko ": "24", "i s": "25", "a p": "26", koj: "27", pro: "28", "ju ": "29", "se ": "30", " go": "31", ost: "32", "to ": "33", "va ": "34", " do": "35", " to": "36", "e n": "37", "i p": "38", " od": "39", " ra": "40", "no ": "41", ako: "42", "ka ": "43", "ni ": "44", " ka": "45", " se": "46", " mo": "47", " st": "48", "i n": "49", ima: "50", "ja ": "51", pri: "52", vat: "53", sta: "54", " su": "55", ati: "56", "e p": "57", "ta ": "58", tsk: "59", "e i": "60", nij: "61", " tr": "62", cij: "63", jen: "64", nos: "65", "o s": "66", " iz": "67", "om ": "68", tro: "69", ili: "70", iti: "71", pos: "72", " al": "73", "a i": "74", "a o": "75", "e s": "76", ija: "77", ini: "78", pre: "79", str: "80", "la ": "81", "og ": "82", ovo: "83", " sv": "84", ekt: "85", nje: "86", "o p": "87", odi: "88", rva: "89", " ni": "90", ali: "91", min: "92", rij: "93", "a t": "94", "a z": "95", ats: "96", iva: "97", "o t": "98", "od ": "99", oje: "100", "ra ": "101", " hr": "102", "a m": "103", "a u": "104", hrv: "105", "im ": "106", "ke ": "107", "o i": "108", ovi: "109", red: "110", riv: "111", "te ": "112", "bi ": "113", "e o": "114", god: "115", "i d": "116", lek: "117", umi: "118", zvo: "119", din: "120", "e u": "121", ene: "122", jed: "123", "ji ": "124", lje: "125", nog: "126", "su ": "127", " a ": "128", " el": "129", " mi": "130", " o ": "131", "a d": "132", alu: "133", ele: "134", "i u": "135", izv: "136", ktr: "137", lum: "138", "o d": "139", ori: "140", rad: "141", sto: "142", "a k": "143", anj: "144", ava: "145", "e k": "146", men: "147", nic: "148", "o j": "149", "oj ": "150", ove: "151", ski: "152", tvr: "153", una: "154", vor: "155", " di": "156", " no": "157", " s ": "158", " ta": "159", " tv": "160", "i i": "161", "i o": "162", kak: "163", ro\u0161: "164", sko: "165", vod: "166", " sa": "167", " \u0107e": "168", "a b": "169", adi: "170", amo: "171", eni: "172", gov: "173", iju: "174", "ku ": "175", "o n": "176", ora: "177", rav: "178", ruj: "179", smo: "180", tav: "181", tru: "182", "u p": "183", "ve ": "184", " in": "185", " pl": "186", aci: "187", bit: "188", "de ": "189", di\u0161: "190", ema: "191", "i m": "192", ika: "193", i\u0161t: "194", jer: "195", "ki ": "196", mog: "197", nik: "198", nov: "199", "nu ": "200", oji: "201", oli: "202", pla: "203", pod: "204", "st ": "205", sti: "206", tra: "207", tre: "208", "vo ": "209", " sm": "210", " \u0161t": "211", dan: "212", "e z": "213", "i t": "214", "io ": "215", ist: "216", kon: "217", "lo ": "218", stv: "219", "u s": "220", uje: "221", ust: "222", "\u0107e ": "223", "\u0107i ": "224", \u0161to: "225", " dr": "226", " im": "227", " li": "228", ada: "229", aft: "230", ani: "231", "ao ": "232", ars: "233", ata: "234", "e t": "235", emo: "236", "i k": "237", ine: "238", jem: "239", kov: "240", lik: "241", lji: "242", mje: "243", naf: "244", ner: "245", nih: "246", nja: "247", ogo: "248", oiz: "249", ome: "250", pot: "251", ran: "252", "ri ": "253", roi: "254", rtk: "255", ska: "256", ter: "257", "u i": "258", "u o": "259", "vi ": "260", vrt: "261", " me": "262", " ug": "263", "ak ": "264", ama: "265", dr\u017E: "266", "e e": "267", "e g": "268", "e m": "269", "em ": "270", eme: "271", enj: "272", ent: "273", "er ": "274", ere: "275", erg: "276", eur: "277", "go ": "278", "i b": "279", "i z": "280", jet: "281", ksi: "282", "o u": "283", oda: "284", ona: "285", pra: "286", reb: "287", rem: "288", rop: "289", tri: "290", \u017Eav: "291", " ci": "292", " eu": "293", " re": "294", " te": "295", " uv": "296", " ve": "297", aju: "298", "an ": "299" }, czech: { " pr": "0", " po": "1", "n\xED ": "2", pro: "3", " na": "4", "na ": "5", " p\u0159": "6", "ch ": "7", " je": "8", " ne": "9", "\u017Ee ": "10", " \u017Ee": "11", " se": "12", " do": "13", " ro": "14", " st": "15", " v ": "16", " ve": "17", p\u0159e: "18", "se ": "19", "ho ": "20", sta: "21", " to": "22", " vy": "23", " za": "24", "ou ": "25", " a ": "26", "to ": "27", " by": "28", "la ": "29", "ce ": "30", "e v": "31", ist: "32", "le ": "33", pod: "34", "\xED p": "35", " vl": "36", "e n": "37", "e s": "38", "je ": "39", "k\xE9 ": "40", "by ": "41", "em ": "42", \u00FDch: "43", " od": "44", ova: "45", \u0159ed: "46", "dy ": "47", en\u00ED: "48", kon: "49", "li ": "50", "n\u011B ": "51", str: "52", " z\xE1": "53", "ve ": "54", " ka": "55", " sv": "56", "e p": "57", "it ": "58", l\u00E1d: "59", oho: "60", rov: "61", roz: "62", ter: "63", vl\u00E1: "64", "\xEDm ": "65", " ko": "66", hod: "67", nis: "68", p\u0159\u00ED: "69", sk\u00FD: "70", " mi": "71", " ob": "72", " so": "73", "a p": "74", ali: "75", bud: "76", edn: "77", ick: "78", kte: "79", "ku ": "80", "o s": "81", "al ": "82", "ci ": "83", "e t": "84", "il ": "85", "ny ": "86", "n\xE9 ": "87", odl: "88", ov\u00E1: "89", rot: "90", sou: "91", \u00E1n\u00ED: "92", " bu": "93", " mo": "94", " o ": "95", ast: "96", byl: "97", "de ": "98", "ek ": "99", ost: "100", " m\xED": "101", " ta": "102", "es ": "103", jed: "104", "ky ": "105", las: "106", "m p": "107", nes: "108", n\u00EDm: "109", ran: "110", rem: "111", ros: "112", \u00E9ho: "113", " de": "114", " kt": "115", " ni": "116", " si": "117", " v\xFD": "118", "at ": "119", "j\xED ": "120", "k\xFD ": "121", "mi ": "122", pre: "123", tak: "124", tan: "125", "y v": "126", \u0159ek: "127", " ch": "128", " li": "129", " n\xE1": "130", " pa": "131", " \u0159e": "132", "da ": "133", dle: "134", dne: "135", "i p": "136", "i v": "137", "ly ": "138", min: "139", "o n": "140", "o v": "141", pol: "142", tra: "143", val: "144", vn\u00ED: "145", \u00EDch: "146", "\xFD p": "147", \u0159ej: "148", " ce": "149", " kd": "150", " le": "151", "a s": "152", "a z": "153", cen: "154", "e k": "155", eds: "156", ekl: "157", emi: "158", "kl ": "159", lat: "160", "lo ": "161", mi\u00E9: "162", nov: "163", pra: "164", sku: "165", sk\u00E9: "166", sti: "167", tav: "168", "ti ": "169", "ty ": "170", v\u00E1n: "171", "v\xE9 ": "172", "y n": "173", "y s": "174", "\xED s": "175", "\xED v": "176", "\u011B p": "177", " dn": "178", " n\u011B": "179", " sp": "180", " \u010Ds": "181", "a n": "182", "a t": "183", "ak ": "184", dn\u00ED: "185", doh: "186", "e b": "187", "e m": "188", ejn: "189", ena: "190", est: "191", ini: "192", "m z": "193", nal: "194", nou: "195", "n\xE1 ": "196", ovi: "197", ov\u00E9: "198", ov\u00FD: "199", rsk: "200", st\u00E1: "201", "t\xED ": "202", t\u0159e: "203", "t\u016F ": "204", ude: "205", "za ": "206", "\xE9 p": "207", "\xE9m ": "208", "\xED d": "209", " ir": "210", " zv": "211", ale: "212", an\u011B: "213", ave: "214", ck\u00E9: "215", den: "216", "e z": "217", ech: "218", "en ": "219", er\u00FD: "220", hla: "221", "i s": "222", i\u00E9r: "223", lov: "224", "mu ": "225", neb: "226", nic: "227", "o b": "228", "o m": "229", pad: "230", pot: "231", rav: "232", rop: "233", "r\xFD ": "234", sed: "235", "si ": "236", "t p": "237", tic: "238", "tu ": "239", "t\u011B ": "240", "u p": "241", "u v": "242", "v\xE1 ": "243", v\u00FD\u0161: "244", zv\u00FD: "245", \u010Dn\u00ED: "246", "\u0159\xED ": "247", "\u016Fm ": "248", " bl": "249", " br": "250", " ho": "251", " ja": "252", " re": "253", " s ": "254", " z ": "255", " zd": "256", "a v": "257", ani: "258", ato: "259", bla: "260", bri: "261", e\u010Dn: "262", e\u0159e: "263", "h v": "264", "i n": "265", "ie ": "266", ila: "267", irs: "268", ite: "269", kov: "270", nos: "271", "o o": "272", "o p": "273", oce: "274", ody: "275", ohl: "276", oli: "277", ovo: "278", pla: "279", po\u010D: "280", pr\u00E1: "281", "ra ": "282", rit: "283", rod: "284", "ry ": "285", "sd ": "286", sko: "287", ssd: "288", tel: "289", "u s": "290", vat: "291", ve\u0159: "292", vit: "293", vla: "294", "y p": "295", \u00E1ln: "296", \u010Dss: "297", \u0161en: "298", " al": "299" }, danish: { "er ": "0", "en ": "1", " de": "2", "et ": "3", der: "4", "de ": "5", for: "6", " fo": "7", " i ": "8", "at ": "9", " at": "10", "re ": "11", det: "12", " ha": "13", nde: "14", ere: "15", ing: "16", den: "17", " me": "18", " og": "19", ger: "20", ter: "21", " er": "22", " si": "23", and: "24", " af": "25", "or ": "26", " st": "27", " ti": "28", " en": "29", "og ": "30", "ar ": "31", "il ": "32", "r s": "33", ige: "34", til: "35", "ke ": "36", "r e": "37", "af ": "38", kke: "39", " ma": "40", " p\xE5": "41", "om ": "42", "p\xE5 ": "43", "ed ": "44", "ge ": "45", end: "46", nge: "47", "t s": "48", "e s": "49", ler: "50", " sk": "51", els: "52", ern: "53", sig: "54", "ne ": "55", lig: "56", "r d": "57", ska: "58", " vi": "59", har: "60", " be": "61", " se": "62", "an ": "63", ikk: "64", lle: "65", gen: "66", "n f": "67", ste: "68", "t a": "69", "t d": "70", rin: "71", " ik": "72", "es ": "73", "ng ": "74", ver: "75", "r b": "76", sen: "77", ede: "78", men: "79", "r i": "80", " he": "81", " et": "82", "ig ": "83", lan: "84", med: "85", "nd ": "86", rne: "87", " da": "88", " in": "89", "e t": "90", mme: "91", und: "92", " om": "93", "e e": "94", "e m": "95", her: "96", "le ": "97", "r f": "98", "t f": "99", "s\xE5 ": "100", "te ": "101", " so": "102", ele: "103", "t e": "104", " ko": "105", est: "106", ske: "107", " bl": "108", "e f": "109", ekt: "110", mar: "111", bru: "112", "e a": "113", "el ": "114", ers: "115", ret: "116", som: "117", tte: "118", "ve ": "119", " la": "120", " ud": "121", " ve": "122", age: "123", "e d": "124", "e h": "125", lse: "126", man: "127", rug: "128", sel: "129", ser: "130", " fi": "131", " op": "132", " pr": "133", "dt ": "134", "e i": "135", "n m": "136", "r m": "137", " an": "138", " re": "139", " sa": "140", ion: "141", ner: "142", res: "143", "t i": "144", get: "145", "n s": "146", one: "147", orb: "148", "t h": "149", vis: "150", "\xE5r ": "151", " fr": "152", bil: "153", "e k": "154", ens: "155", ind: "156", omm: "157", "t m": "158", " hv": "159", " je": "160", dan: "161", ent: "162", fte: "163", nin: "164", " mi": "165", "e o": "166", "e p": "167", "n o": "168", nte: "169", " ku": "170", ell: "171", nas: "172", ore: "173", "r h": "174", "r k": "175", sta: "176", sto: "177", dag: "178", eri: "179", kun: "180", lde: "181", mer: "182", "r a": "183", "r v": "184", rek: "185", rer: "186", "t o": "187", tor: "188", t\u00F8r: "189", " f\xE5": "190", " m\xE5": "191", " to": "192", boe: "193", che: "194", "e v": "195", "i d": "196", ive: "197", kab: "198", "ns ": "199", oel: "200", "se ": "201", "t v": "202", " al": "203", " bo": "204", " un": "205", ans: "206", dre: "207", ire: "208", k\u00F8b: "209", ors: "210", ove: "211", ren: "212", "t b": "213", "\xF8r ": "214", " ka": "215", ald: "216", bet: "217", "gt ": "218", isk: "219", kal: "220", kom: "221", lev: "222", "n d": "223", "n i": "224", pri: "225", "r p": "226", rbr: "227", s\u00F8g: "228", tel: "229", " s\xE5": "230", " te": "231", " va": "232", "al ": "233", dir: "234", eje: "235", fis: "236", gs\u00E5: "237", isc: "238", jer: "239", ker: "240", ogs: "241", sch: "242", "st ": "243", "t k": "244", uge: "245", " di": "246", "ag ": "247", "d a": "248", "g i": "249", ill: "250", "l a": "251", lsk: "252", "n a": "253", "on ": "254", sam: "255", str: "256", tet: "257", var: "258", " mo": "259", art: "260", ash: "261", att: "262", "e b": "263", han: "264", hav: "265", kla: "266", kon: "267", "n t": "268", ned: "269", "r o": "270", "ra ": "271", rre: "272", ves: "273", vil: "274", " el": "275", " kr": "276", " ov": "277", ann: "278", "e u": "279", ess: "280", fra: "281", "g a": "282", "g d": "283", int: "284", ngs: "285", rde: "286", tra: "287", " \xE5r": "288", akt: "289", asi: "290", "em ": "291", gel: "292", gym: "293", hol: "294", kan: "295", mna: "296", "n h": "297", nsk: "298", old: "299" }, dutch: { "en ": "0", "de ": "1", " de": "2", "et ": "3", "an ": "4", " he": "5", "er ": "6", " va": "7", "n d": "8", van: "9", een: "10", het: "11", " ge": "12", oor: "13", " ee": "14", der: "15", " en": "16", "ij ": "17", aar: "18", gen: "19", "te ": "20", ver: "21", " in": "22", " me": "23", aan: "24", den: "25", " we": "26", "at ": "27", "in ": "28", " da": "29", " te": "30", eer: "31", nde: "32", ter: "33", ste: "34", "n v": "35", " vo": "36", " zi": "37", ing: "38", "n h": "39", voo: "40", "is ": "41", " op": "42", tie: "43", " aa": "44", ede: "45", erd: "46", ers: "47", " be": "48", eme: "49", ten: "50", ken: "51", "n e": "52", " ni": "53", " ve": "54", ent: "55", ijn: "56", "jn ": "57", mee: "58", iet: "59", "n w": "60", "ng ": "61", nie: "62", " is": "63", cht: "64", dat: "65", ere: "66", "ie ": "67", ijk: "68", "n b": "69", rde: "70", "ar ": "71", "e b": "72", "e a": "73", met: "74", "t d": "75", "el ": "76", ond: "77", "t h": "78", " al": "79", "e w": "80", "op ": "81", ren: "82", " di": "83", " on": "84", "al ": "85", and: "86", bij: "87", zij: "88", " bi": "89", " hi": "90", " wi": "91", "or ": "92", "r d": "93", "t v": "94", " wa": "95", "e h": "96", lle: "97", "rt ": "98", ang: "99", hij: "100", men: "101", "n a": "102", "n z": "103", "rs ": "104", " om": "105", "e o": "106", "e v": "107", end: "108", est: "109", "n t": "110", par: "111", " pa": "112", " pr": "113", " ze": "114", "e g": "115", "e p": "116", "n p": "117", ord: "118", oud: "119", raa: "120", sch: "121", "t e": "122", ege: "123", ich: "124", ien: "125", aat: "126", "ek ": "127", len: "128", "n m": "129", nge: "130", "nt ": "131", ove: "132", "rd ": "133", wer: "134", " ma": "135", " mi": "136", daa: "137", "e k": "138", lij: "139", mer: "140", "n g": "141", "n o": "142", "om ": "143", sen: "144", "t b": "145", wij: "146", " ho": "147", "e m": "148", ele: "149", gem: "150", heb: "151", pen: "152", ude: "153", " bo": "154", " ja": "155", die: "156", "e e": "157", eli: "158", erk: "159", "le ": "160", pro: "161", rij: "162", " er": "163", " za": "164", "e d": "165", ens: "166", ind: "167", "ke ": "168", "n k": "169", "nd ": "170", nen: "171", nte: "172", "r h": "173", "s d": "174", "s e": "175", "t z": "176", " b ": "177", " co": "178", " ik": "179", " ko": "180", " ov": "181", eke: "182", hou: "183", "ik ": "184", iti: "185", lan: "186", "ns ": "187", "t g": "188", "t m": "189", " do": "190", " le": "191", " zo": "192", ams: "193", "e z": "194", "g v": "195", "it ": "196", "je ": "197", "ls ": "198", maa: "199", "n i": "200", nke: "201", rke: "202", uit: "203", " ha": "204", " ka": "205", " mo": "206", " re": "207", " st": "208", " to": "209", age: "210", als: "211", ark: "212", art: "213", ben: "214", "e r": "215", "e s": "216", ert: "217", eze: "218", "ht ": "219", ijd: "220", lem: "221", "r v": "222", rte: "223", "t p": "224", zeg: "225", zic: "226", aak: "227", aal: "228", "ag ": "229", ale: "230", bbe: "231", "ch ": "232", "e t": "233", ebb: "234", erz: "235", "ft ": "236", "ge ": "237", led: "238", mst: "239", "n n": "240", oek: "241", "r i": "242", "t o": "243", "t w": "244", tel: "245", tte: "246", uur: "247", "we ": "248", zit: "249", " af": "250", " li": "251", " ui": "252", "ak ": "253", all: "254", aut: "255", doo: "256", "e i": "257", ene: "258", erg: "259", ete: "260", ges: "261", hee: "262", jaa: "263", jke: "264", kee: "265", kel: "266", kom: "267", lee: "268", moe: "269", "n s": "270", ort: "271", rec: "272", "s o": "273", "s v": "274", teg: "275", tij: "276", ven: "277", waa: "278", wel: "279", " an": "280", " au": "281", " bu": "282", " gr": "283", " pl": "284", " ti": "285", "'' ": "286", ade: "287", dag: "288", "e l": "289", ech: "290", eel: "291", eft: "292", ger: "293", "gt ": "294", "ig ": "295", itt: "296", "j d": "297", ppe: "298", rda: "299" }, english: { " th": "0", the: "1", "he ": "2", "ed ": "3", " to": "4", " in": "5", "er ": "6", ing: "7", "ng ": "8", " an": "9", "nd ": "10", " of": "11", and: "12", "to ": "13", "of ": "14", " co": "15", "at ": "16", "on ": "17", "in ": "18", " a ": "19", "d t": "20", " he": "21", "e t": "22", ion: "23", "es ": "24", " re": "25", "re ": "26", hat: "27", " sa": "28", " st": "29", " ha": "30", her: "31", tha: "32", tio: "33", "or ": "34", " ''": "35", "en ": "36", " wh": "37", "e s": "38", ent: "39", "n t": "40", "s a": "41", "as ": "42", for: "43", "is ": "44", "t t": "45", " be": "46", "ld ": "47", "e a": "48", "rs ": "49", " wa": "50", "ut ": "51", "ve ": "52", "ll ": "53", "al ": "54", " ma": "55", "e i": "56", " fo": "57", "'s ": "58", "an ": "59", est: "60", " hi": "61", " mo": "62", " se": "63", " pr": "64", "s t": "65", ate: "66", "st ": "67", ter: "68", ere: "69", ted: "70", "nt ": "71", ver: "72", "d a": "73", " wi": "74", "se ": "75", "e c": "76", ect: "77", "ns ": "78", " on": "79", "ly ": "80", tol: "81", "ey ": "82", "r t": "83", " ca": "84", ati: "85", "ts ": "86", all: "87", " no": "88", his: "89", "s o": "90", ers: "91", con: "92", "e o": "93", ear: "94", "f t": "95", "e w": "96", was: "97", ons: "98", sta: "99", "'' ": "100", sti: "101", "n a": "102", sto: "103", "t h": "104", " we": "105", "id ": "106", "th ": "107", " it": "108", "ce ": "109", " di": "110", ave: "111", "d h": "112", cou: "113", pro: "114", "ad ": "115", oll: "116", "ry ": "117", "d s": "118", "e m": "119", " so": "120", ill: "121", cti: "122", "te ": "123", tor: "124", eve: "125", "g t": "126", "it ": "127", " ch": "128", " de": "129", hav: "130", oul: "131", "ty ": "132", uld: "133", use: "134", " al": "135", are: "136", "ch ": "137", "me ": "138", out: "139", ove: "140", wit: "141", "ys ": "142", chi: "143", "t a": "144", ith: "145", oth: "146", " ab": "147", " te": "148", " wo": "149", "s s": "150", res: "151", "t w": "152", tin: "153", "e b": "154", "e h": "155", nce: "156", "t s": "157", "y t": "158", "e p": "159", ele: "160", hin: "161", "s i": "162", nte: "163", " li": "164", "le ": "165", " do": "166", aid: "167", hey: "168", "ne ": "169", "s w": "170", " as": "171", " fr": "172", " tr": "173", end: "174", sai: "175", " el": "176", " ne": "177", " su": "178", "'t ": "179", "ay ": "180", hou: "181", ive: "182", lec: "183", "n't": "184", " ye": "185", but: "186", "d o": "187", "o t": "188", "y o": "189", " ho": "190", " me": "191", "be ": "192", cal: "193", "e e": "194", had: "195", ple: "196", " at": "197", " bu": "198", " la": "199", "d b": "200", "s h": "201", say: "202", "t i": "203", " ar": "204", "e f": "205", ght: "206", hil: "207", igh: "208", int: "209", not: "210", ren: "211", " is": "212", " pa": "213", " sh": "214", ays: "215", com: "216", "n s": "217", "r a": "218", rin: "219", "y a": "220", " un": "221", "n c": "222", "om ": "223", thi: "224", " mi": "225", "by ": "226", "d i": "227", "e d": "228", "e n": "229", "t o": "230", " by": "231", "e r": "232", eri: "233", old: "234", ome: "235", whe: "236", yea: "237", " gr": "238", "ar ": "239", ity: "240", mpl: "241", oun: "242", one: "243", "ow ": "244", "r s": "245", "s f": "246", tat: "247", " ba": "248", " vo": "249", bou: "250", sam: "251", tim: "252", vot: "253", abo: "254", ant: "255", "ds ": "256", ial: "257", ine: "258", man: "259", men: "260", " or": "261", " po": "262", amp: "263", can: "264", der: "265", "e l": "266", les: "267", "ny ": "268", "ot ": "269", rec: "270", tes: "271", tho: "272", ica: "273", ild: "274", "ir ": "275", nde: "276", ose: "277", ous: "278", pre: "279", ste: "280", era: "281", per: "282", "r o": "283", red: "284", rie: "285", " bo": "286", " le": "287", ali: "288", ars: "289", ore: "290", ric: "291", "s m": "292", str: "293", " fa": "294", ess: "295", "ie ": "296", ist: "297", lat: "298", uri: "299" }, estonian: { "st ": "0", " ka": "1", "on ": "2", "ja ": "3", " va": "4", " on": "5", " ja": "6", " ko": "7", "se ": "8", ast: "9", "le ": "10", "es ": "11", "as ": "12", "is ": "13", "ud ": "14", " sa": "15", "da ": "16", "ga ": "17", " ta": "18", aja: "19", sta: "20", " ku": "21", " pe": "22", "a k": "23", est: "24", ist: "25", "ks ": "26", "ta ": "27", "al ": "28", ava: "29", "id ": "30", saa: "31", mis: "32", "te ": "33", val: "34", " et": "35", nud: "36", " te": "37", inn: "38", " se": "39", " tu": "40", "a v": "41", alu: "42", "e k": "43", ise: "44", "lu ": "45", "ma ": "46", mes: "47", " mi": "48", "et ": "49", iku: "50", lin: "51", "ad ": "52", "el ": "53", ime: "54", "ne ": "55", nna: "56", " ha": "57", " in": "58", " ke": "59", " v\xF5": "60", "a s": "61", "a t": "62", "ab ": "63", "e s": "64", esi: "65", " la": "66", " li": "67", "e v": "68", eks: "69", ema: "70", las: "71", les: "72", rju: "73", tle: "74", tsi: "75", tus: "76", upa: "77", use: "78", ust: "79", var: "80", " l\xE4": "81", ali: "82", arj: "83", "de ": "84", ete: "85", "i t": "86", iga: "87", ilm: "88", kui: "89", "li ": "90", tul: "91", " ei": "92", " me": "93", " s\xF5": "94", aal: "95", ata: "96", dus: "97", "ei ": "98", nik: "99", pea: "100", "s k": "101", "s o": "102", sal: "103", s\u00F5n: "104", ter: "105", "ul ": "106", v\u00F5i: "107", " el": "108", " ne": "109", "a j": "110", ate: "111", end: "112", "i k": "113", ita: "114", kar: "115", kor: "116", "l o": "117", "lt ": "118", maa: "119", oli: "120", sti: "121", vad: "122", \u00E4\u00E4n: "123", " ju": "124", " j\xE4": "125", " k\xFC": "126", " ma": "127", " po": "128", " \xFCt": "129", aas: "130", aks: "131", "at ": "132", "ed ": "133", eri: "134", hoi: "135", "i s": "136", "ka ": "137", "la ": "138", nni: "139", oid: "140", pai: "141", rit: "142", "us ": "143", \u00FCtl: "144", " aa": "145", " lo": "146", " to": "147", " ve": "148", "a e": "149", ada: "150", aid: "151", ami: "152", and: "153", dla: "154", "e j": "155", ega: "156", "gi ": "157", "gu ": "158", "i p": "159", idl: "160", "ik ": "161", ini: "162", jup: "163", kal: "164", kas: "165", kes: "166", koh: "167", "s e": "168", "s p": "169", sel: "170", sse: "171", "ui ": "172", " pi": "173", " si": "174", aru: "175", eda: "176", eva: "177", fil: "178", "i v": "179", ida: "180", ing: "181", l\u00E4\u00E4: "182", "me ": "183", "na ": "184", nda: "185", nim: "186", ole: "187", ots: "188", ris: "189", "s l": "190", sia: "191", "t p": "192", " en": "193", " mu": "194", " ol": "195", " p\xF5": "196", " su": "197", " v\xE4": "198", " \xFCh": "199", "a l": "200", "a p": "201", aga: "202", ale: "203", aps: "204", arv: "205", "e a": "206", ela: "207", ika: "208", lle: "209", loo: "210", mal: "211", pet: "212", "t k": "213", tee: "214", tis: "215", vat: "216", \u00E4ne: "217", \u00F5nn: "218", " es": "219", " fi": "220", " vi": "221", "a i": "222", "a o": "223", aab: "224", aap: "225", ala: "226", alt: "227", ama: "228", anu: "229", "e p": "230", "e t": "231", eal: "232", eli: "233", haa: "234", hin: "235", iva: "236", kon: "237", "ku ": "238", lik: "239", "lm ": "240", min: "241", "n t": "242", odu: "243", oon: "244", psa: "245", "ri ": "246", "si ": "247", stu: "248", "t e": "249", "t s": "250", "ti ": "251", ule: "252", uur: "253", vas: "254", vee: "255", " ki": "256", " ni": "257", " n\xE4": "258", " ra": "259", aig: "260", aka: "261", all: "262", atu: "263", "e e": "264", eis: "265", ers: "266", "i e": "267", "ii ": "268", iis: "269", "il ": "270", ima: "271", its: "272", kka: "273", kuh: "274", "l k": "275", lat: "276", maj: "277", ndu: "278", "ni ": "279", nii: "280", oma: "281", ool: "282", rso: "283", "ru ": "284", rva: "285", "s t": "286", sek: "287", son: "288", ste: "289", "t m": "290", taj: "291", tam: "292", ude: "293", uho: "294", vai: "295", " ag": "296", " os": "297", " pa": "298", " re": "299" }, farsi: { "\u0627\u0646 ": "0", "\u0627\u06CC ": "1", "\u0647 \u0627": "2", " \u0627\u064A": "3", " \u062F\u0631": "4", "\u0628\u0647 ": "5", " \u0628\u0631": "6", "\u062F\u0631 ": "7", \u0631\u0627\u0646: "8", " \u0628\u0647": "9", "\u06CC \u0627": "10", "\u0627\u0632 ": "11", "\u064A\u0646 ": "12", "\u0645\u06CC ": "13", " \u0627\u0632": "14", "\u062F\u0647 ": "15", "\u0633\u062A ": "16", \u0627\u0633\u062A: "17", " \u0627\u0633": "18", " \u06A9\u0647": "19", "\u06A9\u0647 ": "20", \u0627\u064A\u0631: "21", "\u0646\u062F ": "22", \u0627\u064A\u0646: "23", " \u0647\u0627": "24", \u064A\u0631\u0627: "25", "\u0648\u062F ": "26", " \u0631\u0627": "27", \u0647\u0627\u06CC: "28", " \u062E\u0648": "29", "\u062A\u0647 ": "30", "\u0631\u0627 ": "31", \u0631\u0627\u06CC: "32", "\u0631\u062F ": "33", "\u0646 \u0628": "34", \u06A9\u0631\u062F: "35", " \u0648 ": "36", " \u06A9\u0631": "37", "\u0627\u062A ": "38", \u0628\u0631\u0627: "39", "\u062F \u06A9": "40", \u0645\u0627\u0646: "41", "\u06CC \u062F": "42", " \u0627\u0646": "43", \u062E\u0648\u0627: "44", \u0634\u0648\u0631: "45", " \u0628\u0627": "46", "\u0646 \u0627": "47", " \u0633\u0627": "48", \u062A\u0645\u06CC: "49", "\u0631\u06CC ": "50", \u0627\u062A\u0645: "51", "\u0627 \u0627": "52", \u0648\u0627\u0647: "53", " \u0627\u062A": "54", " \u0639\u0631": "55", "\u0627\u0642 ": "56", "\u0631 \u0645": "57", \u0631\u0627\u0642: "58", \u0639\u0631\u0627: "59", "\u06CC \u0628": "60", " \u062A\u0627": "61", " \u062A\u0648": "62", "\u0627\u0631 ": "63", "\u0631 \u0627": "64", "\u0646 \u0645": "65", "\u0647 \u0628": "66", "\u0648\u0631 ": "67", "\u064A\u062F ": "68", "\u06CC \u06A9": "69", " \u0627\u0645": "70", " \u062F\u0627": "71", " \u06A9\u0646": "72", \u0627\u0647\u062F: "73", "\u0647\u062F ": "74", " \u0622\u0646": "75", " \u0645\u06CC": "76", " \u0646\u064A": "77", " \u06AF\u0641": "78", "\u062F \u0627": "79", \u06AF\u0641\u062A: "80", " \u06A9\u0634": "81", "\u0627 \u0628": "82", "\u0646\u06CC ": "83", "\u0647\u0627 ": "84", \u06A9\u0634\u0648: "85", " \u0631\u0648": "86", "\u062A \u06A9": "87", \u0646\u064A\u0648: "88", "\u0647 \u0645": "89", "\u0648\u06CC ": "90", "\u06CC \u062A": "91", " \u0634\u0648": "92", "\u0627\u0644 ": "93", \u062F\u0627\u0631: "94", "\u0645\u0647 ": "95", "\u0646 \u06A9": "96", "\u0647 \u062F": "97", "\u064A\u0647 ": "98", " \u0645\u0627": "99", \u0627\u0645\u0647: "100", "\u062F \u0628": "101", \u0632\u0627\u0631: "102", \u0648\u0631\u0627: "103", \u06AF\u0632\u0627: "104", " \u067E\u064A": "105", "\u0622\u0646 ": "106", \u0627\u0646\u062A: "107", "\u062A \u0627": "108", "\u0641\u062A ": "109", "\u0647 \u0646": "110", "\u06CC \u062E": "111", \u0627\u0645\u0627: "112", \u0628\u0627\u062A: "113", "\u0645\u0627 ": "114", \u0645\u0644\u0644: "115", \u0646\u0627\u0645: "116", "\u064A\u0631 ": "117", "\u06CC \u0645": "118", "\u06CC \u0647": "119", " \u0622\u0645": "120", " \u0627\u06CC": "121", " \u0645\u0646": "122", \u0627\u0646\u0633: "123", \u0627\u0646\u064A: "124", "\u062A \u062F": "125", \u0631\u062F\u0647: "126", \u0633\u0627\u0632: "127", "\u0646 \u062F": "128", "\u0646\u0647 ": "129", \u0648\u0631\u062F: "130", " \u0627\u0648": "131", " \u0628\u064A": "132", " \u0633\u0648": "133", " \u0634\u062F": "134", \u0627\u062F\u0647: "135", \u0627\u0646\u062F: "136", "\u0628\u0627 ": "137", "\u062A \u0628": "138", "\u0631 \u0628": "139", "\u0632 \u0627": "140", \u0632\u0645\u0627: "141", \u0633\u062A\u0647: "142", "\u0646 \u0631": "143", "\u0647 \u0633": "144", \u0648\u0627\u0646: "145", "\u0648\u0632 ": "146", "\u06CC \u0631": "147", "\u06CC \u0633": "148", " \u0647\u0633": "149", \u0627\u0628\u0627: "150", "\u0627\u0645 ": "151", \u0627\u0648\u0631: "152", \u062A\u062E\u0627: "153", \u062E\u0627\u0628: "154", \u062E\u0648\u062F: "155", "\u062F \u062F": "156", "\u062F\u0646 ": "157", \u0631\u0647\u0627: "158", \u0631\u0648\u0632: "159", \u0631\u06AF\u0632: "160", \u0646\u062A\u062E: "161", "\u0647 \u0634": "162", "\u0647 \u0647": "163", \u0647\u0633\u062A: "164", "\u064A\u062A ": "165", "\u064A\u0645 ": "166", " \u062F\u0648": "167", " \u062F\u064A": "168", " \u0645\u0648": "169", " \u0646\u0648": "170", " \u0647\u0645": "171", " \u06A9\u0627": "172", "\u0627\u062F ": "173", \u0627\u0631\u06CC: "174", \u0627\u0646\u06CC: "175", "\u0628\u0631 ": "176", \u0628\u0648\u062F: "177", "\u062A \u0647": "178", "\u062D \u0647": "179", \u062D\u0627\u0644: "180", "\u0631\u0634 ": "181", "\u0639\u0647 ": "182", "\u0644\u06CC ": "183", "\u0648\u0645 ": "184", \u0698\u0627\u0646: "185", " \u0633\u0644": "186", \u0622\u0645\u0631: "187", "\u0627\u062D ": "188", \u062A\u0648\u0633: "189", \u062F\u0627\u062F: "190", \u062F\u0627\u0645: "191", "\u0631 \u062F": "192", "\u0631\u0647 ": "193", \u0631\u064A\u06A9: "194", "\u0632\u06CC ": "195", \u0633\u0644\u0627: "196", \u0634\u0648\u062F: "197", \u0644\u0627\u062D: "198", \u0645\u0631\u064A: "199", \u0646\u0646\u062F: "200", "\u0647 \u0639": "201", \u064A\u0645\u0627: "202", \u064A\u06A9\u0627: "203", \u067E\u064A\u0645: "204", "\u06AF\u0631 ": "205", " \u0622\u0698": "206", " \u0627\u0644": "207", " \u0628\u0648": "208", " \u0645\u0642": "209", " \u0645\u0644": "210", " \u0648\u06CC": "211", \u0622\u0698\u0627: "212", \u0627\u0632\u0645: "213", \u0627\u0632\u06CC: "214", \u0628\u0627\u0631: "215", \u0628\u0631\u0646: "216", "\u0631 \u0622": "217", "\u0632 \u0633": "218", \u0633\u0639\u0647: "219", \u0634\u062A\u0647: "220", \u0645\u0627\u062A: "221", "\u0646 \u0622": "222", "\u0646 \u067E": "223", "\u0646\u0633 ": "224", "\u0647 \u06AF": "225", \u0648\u0633\u0639: "226", \u064A\u0627\u0646: "227", \u064A\u0648\u0645: "228", "\u06A9\u0627 ": "229", \u06A9\u0627\u0645: "230", \u06A9\u0646\u062F: "231", " \u062E\u0627": "232", " \u0633\u0631": "233", \u0622\u0648\u0631: "234", \u0627\u0631\u062F: "235", \u0627\u0642\u062F: "236", \u0627\u064A\u0645: "237", \u0627\u064A\u06CC: "238", \u0628\u0631\u06AF: "239", "\u062A \u0639": "240", "\u062A\u0646 ": "241", "\u062E\u062A ": "242", "\u062F \u0648": "243", "\u0631 \u062E": "244", "\u0631\u06A9 ": "245", \u0632\u064A\u0631: "246", \u0641\u062A\u0647: "247", \u0642\u062F\u0627: "248", "\u0644 \u062A": "249", \u0645\u064A\u0646: "250", "\u0646 \u06AF": "251", "\u0647 \u0622": "252", "\u0647 \u062E": "253", "\u0647 \u06A9": "254", \u0648\u0631\u06A9: "255", \u0648\u064A\u0648: "256", \u064A\u0648\u0631: "257", \u064A\u0648\u064A: "258", "\u064A\u06CC ": "259", "\u06A9 \u062A": "260", "\u06CC \u0634": "261", " \u0627\u0642": "262", " \u062D\u0627": "263", " \u062D\u0642": "264", " \u062F\u0633": "265", " \u0634\u06A9": "266", " \u0639\u0645": "267", " \u064A\u06A9": "268", "\u0627 \u062A": "269", "\u0627 \u062F": "270", \u0627\u0631\u062C: "271", \u0628\u064A\u0646: "272", "\u062A \u0645": "273", "\u062A \u0648": "274", \u062A\u0627\u064A: "275", \u062F\u0633\u062A: "276", "\u0631 \u062D": "277", "\u0631 \u0633": "278", \u0631\u0646\u0627: "279", "\u0632 \u0628": "280", \u0634\u06A9\u0627: "281", "\u0644\u0644 ": "282", "\u0645 \u06A9": "283", "\u0645\u0632 ": "284", \u0646\u062F\u0627: "285", \u0646\u0648\u0627: "286", "\u0648 \u0627": "287", \u0648\u0631\u0647: "288", "\u0648\u0646 ": "289", \u0648\u0646\u062F: "290", \u064A\u0645\u0632: "291", " \u0622\u0648": "292", " \u0627\u0639": "293", " \u0641\u0631": "294", " \u0645\u062A": "295", " \u0646\u0647": "296", " \u0647\u0631": "297", " \u0648\u0632": "298", " \u06AF\u0632": "299" }, finnish: { "en ": "0", "in ": "1", "an ": "2", "on ": "3", ist: "4", "ta ": "5", "ja ": "6", "n t": "7", "sa ": "8", sta: "9", aan: "10", "n p": "11", " on": "12", ssa: "13", tta: "14", "t\xE4 ": "15", " ka": "16", " pa": "17", "si ": "18", " ja": "19", "n k": "20", lla: "21", "\xE4n ": "22", een: "23", "n v": "24", ksi: "25", ett: "26", nen: "27", taa: "28", tt\u00E4: "29", " va": "30", ill: "31", itt: "32", " jo": "33", " ko": "34", "n s": "35", " tu": "36", "ia ": "37", " su": "38", "a p": "39", "aa ": "40", "la ": "41", lle: "42", "n m": "43", "le ": "44", tte: "45", "na ": "46", " ta": "47", " ve": "48", "at ": "49", " vi": "50", utt: "51", " sa": "52", ise: "53", sen: "54", " ku": "55", " n\xE4": "56", " p\xE4": "57", ste: "58", " ol": "59", "a t": "60", ais: "61", maa: "62", "ti ": "63", "a o": "64", oit: "65", p\u00E4\u00E4: "66", " pi": "67", "a v": "68", ala: "69", ine: "70", isi: "71", tel: "72", tti: "73", " si": "74", "a k": "75", all: "76", iin: "77", kin: "78", st\u00E4: "79", uom: "80", vii: "81", " ma": "82", " se": "83", en\u00E4: "84", " mu": "85", "a s": "86", est: "87", iss: "88", ll\u00E4: "89", lok: "90", "l\xE4 ": "91", "n j": "92", "n o": "93", toi: "94", ven: "95", ytt: "96", " li": "97", ain: "98", "et ": "99", ina: "100", "n a": "101", "n n": "102", oll: "103", plo: "104", ten: "105", ust: "106", \u00E4ll: "107", \u00E4\u00E4n: "108", " to": "109", den: "110", men: "111", oki: "112", suo: "113", "s\xE4 ": "114", t\u00E4\u00E4: "115", uks: "116", vat: "117", " al": "118", " ke": "119", " te": "120", "a e": "121", lii: "122", tai: "123", tei: "124", \u00E4is: "125", "\xE4\xE4 ": "126", " pl": "127", ell: "128", "i t": "129", ide: "130", ikk: "131", "ki ": "132", nta: "133", ova: "134", yst: "135", "yt ": "136", "\xE4 p": "137", \u00E4yt: "138", " ha": "139", " pe": "140", " t\xE4": "141", "a n": "142", aik: "143", "i p": "144", "i v": "145", nyt: "146", n\u00E4y: "147", pal: "148", tee: "149", "un ": "150", " me": "151", "a m": "152", ess: "153", kau: "154", pai: "155", stu: "156", "ut ": "157", voi: "158", " et": "159", "a h": "160", eis: "161", hte: "162", "i o": "163", iik: "164", ita: "165", jou: "166", mis: "167", nin: "168", nut: "169", sia: "170", ss\u00E4: "171", van: "172", " ty": "173", " yh": "174", aks: "175", ime: "176", loi: "177", "me ": "178", "n e": "179", "n h": "180", "n l": "181", oin: "182", ome: "183", ott: "184", ouk: "185", sit: "186", sti: "187", tet: "188", tie: "189", ukk: "190", "\xE4 k": "191", " ra": "192", " ti": "193", aja: "194", asi: "195", ent: "196", iga: "197", iig: "198", ite: "199", jan: "200", kaa: "201", kse: "202", laa: "203", lan: "204", "li ": "205", n\u00E4j: "206", ole: "207", tii: "208", usi: "209", \u00E4j\u00E4: "210", " ov": "211", "a a": "212", ant: "213", ava: "214", "ei ": "215", eri: "216", kan: "217", kku: "218", lai: "219", lis: "220", l\u00E4i: "221", mat: "222", ois: "223", pel: "224", sil: "225", sty: "226", taj: "227", tav: "228", ttu: "229", ty\u00F6: "230", y\u00F6s: "231", "\xE4 o": "232", " ai": "233", " pu": "234", "a j": "235", "a l": "236", aal: "237", arv: "238", ass: "239", ien: "240", imi: "241", imm: "242", it\u00E4: "243", "ka ": "244", kes: "245", kue: "246", lee: "247", lin: "248", llo: "249", one: "250", "ri ": "251", "t o": "252", "t p": "253", "tu ": "254", val: "255", vuo: "256", " ei": "257", " he": "258", " hy": "259", " my": "260", " vo": "261", ali: "262", alo: "263", ano: "264", ast: "265", att: "266", auk: "267", eli: "268", ely: "269", hti: "270", ika: "271", ken: "272", kki: "273", lys: "274", min: "275", my\u00F6: "276", oht: "277", oma: "278", tus: "279", umi: "280", yks: "281", "\xE4t ": "282", \u00E4\u00E4l: "283", "\xF6s ": "284", " ar": "285", " eu": "286", " hu": "287", " na": "288", aat: "289", alk: "290", alu: "291", ans: "292", arj: "293", enn: "294", han: "295", kuu: "296", "n y": "297", set: "298", sim: "299" }, french: { "es ": "0", " de": "1", "de ": "2", " le": "3", ent: "4", "le ": "5", "nt ": "6", "la ": "7", "s d": "8", " la": "9", ion: "10", "on ": "11", "re ": "12", " pa": "13", "e l": "14", "e d": "15", " l'": "16", "e p": "17", " co": "18", " pr": "19", tio: "20", "ns ": "21", " en": "22", "ne ": "23", que: "24", "r l": "25", les: "26", "ur ": "27", "en ": "28", ati: "29", "ue ": "30", " po": "31", " d'": "32", par: "33", " a ": "34", "et ": "35", "it ": "36", " qu": "37", men: "38", ons: "39", "te ": "40", " et": "41", "t d": "42", " re": "43", des: "44", " un": "45", "ie ": "46", "s l": "47", " su": "48", pou: "49", " au": "50", " \xE0 ": "51", con: "52", "er ": "53", " no": "54", ait: "55", "e c": "56", "se ": "57", "t\xE9 ": "58", "du ": "59", " du": "60", " d\xE9": "61", "ce ": "62", "e e": "63", "is ": "64", "n d": "65", "s a": "66", " so": "67", "e r": "68", "e s": "69", our: "70", res: "71", ssi: "72", eur: "73", " se": "74", eme: "75", est: "76", "us ": "77", sur: "78", ant: "79", iqu: "80", "s p": "81", une: "82", uss: "83", "l'a": "84", pro: "85", ter: "86", tre: "87", end: "88", "rs ": "89", " ce": "90", "e a": "91", "t p": "92", "un ": "93", " ma": "94", " ru": "95", " r\xE9": "96", ous: "97", ris: "98", rus: "99", sse: "100", ans: "101", "ar ": "102", com: "103", "e m": "104", ire: "105", nce: "106", nte: "107", "t l": "108", " av": "109", " mo": "110", " te": "111", "il ": "112", "me ": "113", ont: "114", ten: "115", "a p": "116", dan: "117", pas: "118", qui: "119", "s e": "120", "s s": "121", " in": "122", ist: "123", lle: "124", nou: "125", pr\u00E9: "126", "'un": "127", air: "128", "d'a": "129", "ir ": "130", "n e": "131", rop: "132", "ts ": "133", " da": "134", "a s": "135", "as ": "136", "au ": "137", den: "138", mai: "139", mis: "140", ori: "141", out: "142", rme: "143", sio: "144", tte: "145", "ux ": "146", "a d": "147", ien: "148", "n a": "149", ntr: "150", omm: "151", ort: "152", ouv: "153", "s c": "154", son: "155", tes: "156", ver: "157", \u00E8re: "158", " il": "159", " m ": "160", " sa": "161", " ve": "162", "a r": "163", ais: "164", ava: "165", "di ": "166", "n p": "167", sti: "168", ven: "169", " mi": "170", ain: "171", enc: "172", for: "173", it\u00E9: "174", lar: "175", oir: "176", rem: "177", ren: "178", rro: "179", r\u00E9s: "180", sie: "181", "t a": "182", tur: "183", " pe": "184", " to": "185", "d'u": "186", ell: "187", err: "188", ers: "189", ide: "190", ine: "191", iss: "192", mes: "193", por: "194", ran: "195", sit: "196", "st ": "197", "t r": "198", uti: "199", vai: "200", "\xE9 l": "201", \u00E9si: "202", " di": "203", " n'": "204", " \xE9t": "205", "a c": "206", ass: "207", "e t": "208", "in ": "209", nde: "210", pre: "211", rat: "212", "s m": "213", ste: "214", tai: "215", tch: "216", "ui ": "217", uro: "218", "\xE8s ": "219", " es": "220", " fo": "221", " tr": "222", "'ad": "223", app: "224", aux: "225", "e \xE0": "226", ett: "227", iti: "228", lit: "229", nal: "230", op\u00E9: "231", "r d": "232", "ra ": "233", rai: "234", ror: "235", "s r": "236", tat: "237", ut\u00E9: "238", "\xE0 l": "239", " af": "240", anc: "241", ara: "242", art: "243", bre: "244", ch\u00E9: "245", dre: "246", "e f": "247", ens: "248", lem: "249", "n r": "250", "n t": "251", ndr: "252", nne: "253", onn: "254", pos: "255", "s t": "256", tiq: "257", ure: "258", " tu": "259", ale: "260", and: "261", ave: "262", cla: "263", cou: "264", "e n": "265", emb: "266", ins: "267", jou: "268", mme: "269", rie: "270", r\u00E8s: "271", sem: "272", str: "273", "t i": "274", ues: "275", uni: "276", uve: "277", "\xE9 d": "278", "\xE9e ": "279", " ch": "280", " do": "281", " eu": "282", " fa": "283", " lo": "284", " ne": "285", " ra": "286", arl: "287", att: "288", "ec ": "289", ica: "290", "l a": "291", "l'o": "292", "l'\xE9": "293", mmi: "294", nta: "295", orm: "296", "ou ": "297", "r u": "298", rle: "299" }, german: { "en ": "0", "er ": "1", " de": "2", der: "3", "ie ": "4", " di": "5", die: "6", sch: "7", ein: "8", che: "9", ich: "10", den: "11", "in ": "12", "te ": "13", "ch ": "14", " ei": "15", ung: "16", "n d": "17", "nd ": "18", " be": "19", ver: "20", "es ": "21", " zu": "22", eit: "23", gen: "24", und: "25", " un": "26", " au": "27", " in": "28", cht: "29", "it ": "30", ten: "31", " da": "32", ent: "33", " ve": "34", and: "35", " ge": "36", ine: "37", " mi": "38", "r d": "39", hen: "40", "ng ": "41", nde: "42", " vo": "43", "e d": "44", ber: "45", men: "46", "ei ": "47", mit: "48", " st": "49", ter: "50", ren: "51", "t d": "52", " er": "53", ere: "54", "n s": "55", ste: "56", " se": "57", "e s": "58", "ht ": "59", des: "60", ist: "61", "ne ": "62", auf: "63", "e a": "64", isc: "65", "on ": "66", rte: "67", " re": "68", " we": "69", ges: "70", uch: "71", " f\xFC": "72", " so": "73", bei: "74", "e e": "75", nen: "76", "r s": "77", ach: "78", f\u00FCr: "79", ier: "80", par: "81", "\xFCr ": "82", " ha": "83", "as ": "84", ert: "85", " an": "86", " pa": "87", " sa": "88", " sp": "89", " wi": "90", for: "91", tag: "92", "zu ": "93", das: "94", rei: "95", "he ": "96", hre: "97", nte: "98", sen: "99", vor: "100", " sc": "101", ech: "102", etz: "103", hei: "104", lan: "105", "n a": "106", "pd ": "107", "st ": "108", sta: "109", ese: "110", lic: "111", " ab": "112", " si": "113", gte: "114", " wa": "115", iti: "116", kei: "117", "n e": "118", nge: "119", sei: "120", tra: "121", zen: "122", " im": "123", " la": "124", art: "125", "im ": "126", lle: "127", "n w": "128", rde: "129", rec: "130", set: "131", str: "132", tei: "133", tte: "134", " ni": "135", "e p": "136", ehe: "137", ers: "138", "g d": "139", nic: "140", von: "141", " al": "142", " pr": "143", "an ": "144", aus: "145", erf: "146", "r e": "147", tze: "148", t\u00FCr: "149", "uf ": "150", "ag ": "151", als: "152", "ar ": "153", chs: "154", end: "155", "ge ": "156", ige: "157", ion: "158", "ls ": "159", "n m": "160", ngs: "161", nis: "162", "nt ": "163", ord: "164", "s s": "165", sse: "166", " t\xFC": "167", ahl: "168", "e b": "169", ede: "170", "em ": "171", len: "172", "n i": "173", orm: "174", pro: "175", rke: "176", run: "177", "s d": "178", wah: "179", wer: "180", \u00FCrk: "181", " me": "182", age: "183", att: "184", ell: "185", est: "186", hat: "187", "n b": "188", oll: "189", raf: "190", "s a": "191", tsc: "192", " es": "193", " fo": "194", " gr": "195", " ja": "196", abe: "197", auc: "198", ben: "199", "e n": "200", ege: "201", lie: "202", "n u": "203", "r v": "204", "re ": "205", rit: "206", sag: "207", " am": "208", agt: "209", ahr: "210", bra: "211", "de ": "212", erd: "213", her: "214", ite: "215", "le ": "216", "n p": "217", "n v": "218", "or ": "219", rbe: "220", "rt ": "221", sic: "222", wie: "223", \u00FCbe: "224", " is": "225", " \xFCb": "226", cha: "227", chi: "228", "e f": "229", "e m": "230", eri: "231", ied: "232", mme: "233", ner: "234", "r a": "235", sti: "236", "t a": "237", "t s": "238", tis: "239", " ko": "240", arb: "241", "ds ": "242", gan: "243", "n z": "244", "r f": "245", "r w": "246", ran: "247", "se ": "248", "t i": "249", wei: "250", wir: "251", " br": "252", " np": "253", "am ": "254", bes: "255", "d d": "256", deu: "257", "e g": "258", "e k": "259", efo: "260", "et ": "261", eut: "262", fen: "263", hse: "264", lte: "265", "n r": "266", npd: "267", "r b": "268", rhe: "269", "t w": "270", "tz ": "271", " fr": "272", " ih": "273", " ke": "274", " ma": "275", ame: "276", ang: "277", "d s": "278", eil: "279", "el ": "280", era: "281", erh: "282", "h d": "283", "i d": "284", kan: "285", "n f": "286", "n l": "287", nts: "288", och: "289", rag: "290", "rd ": "291", spd: "292", spr: "293", tio: "294", " ar": "295", " en": "296", " ka": "297", ark: "298", ass: "299" }, hausa: { " da": "0", "da ": "1", "in ": "2", "an ": "3", "ya ": "4", " wa": "5", " ya": "6", "na ": "7", "ar ": "8", "a d": "9", " ma": "10", "wa ": "11", "a a": "12", "a k": "13", "a s": "14", " ta": "15", wan: "16", " a ": "17", " ba": "18", " ka": "19", "ta ": "20", "a y": "21", "n d": "22", " ha": "23", " na": "24", " su": "25", " sa": "26", kin: "27", "sa ": "28", ata: "29", " ko": "30", "a t": "31", "su ": "32", " ga": "33", "ai ": "34", " sh": "35", "a m": "36", uwa: "37", iya: "38", "ma ": "39", "a w": "40", asa: "41", yan: "42", "ka ": "43", ani: "44", shi: "45", "a b": "46", "a h": "47", "a c": "48", ama: "49", "ba ": "50", nan: "51", "n a": "52", " mu": "53", ana: "54", " yi": "55", "a g": "56", " za": "57", "i d": "58", " ku": "59", aka: "60", "yi ": "61", "n k": "62", ann: "63", "ke ": "64", tar: "65", " ci": "66", iki: "67", "n s": "68", "ko ": "69", " ra": "70", "ki ": "71", "ne ": "72", "a z": "73", mat: "74", hak: "75", nin: "76", "e d": "77", nna: "78", uma: "79", nda: "80", "a n": "81", ada: "82", cik: "83", "ni ": "84", rin: "85", una: "86", ara: "87", kum: "88", akk: "89", " ce": "90", " du": "91", man: "92", "n y": "93", nci: "94", sar: "95", aki: "96", awa: "97", "ci ": "98", kan: "99", kar: "100", ari: "101", "n m": "102", and: "103", "hi ": "104", "n t": "105", "ga ": "106", owa: "107", ash: "108", kam: "109", dan: "110", ewa: "111", nsa: "112", ali: "113", ami: "114", " ab": "115", " do": "116", anc: "117", "n r": "118", aya: "119", "i n": "120", sun: "121", uka: "122", " al": "123", " ne": "124", "a'a": "125", cew: "126", cin: "127", mas: "128", tak: "129", "un ": "130", aba: "131", kow: "132", "a r": "133", "ra ": "134", " ja": "135", " \u0199a": "136", "en ": "137", "r d": "138", sam: "139", tsa: "140", " ru": "141", "ce ": "142", "i a": "143", abi: "144", ida: "145", mut: "146", "n g": "147", "n j": "148", san: "149", "a \u0199": "150", har: "151", "on ": "152", "i m": "153", suk: "154", " ak": "155", " ji": "156", yar: "157", "'ya": "158", kwa: "159", min: "160", " 'y": "161", ane: "162", ban: "163", ins: "164", ruw: "165", "i k": "166", "n h": "167", " ad": "168", ake: "169", "n w": "170", sha: "171", utu: "172", " \u01B4a": "173", bay: "174", tan: "175", \u01B4an: "176", bin: "177", duk: "178", "e m": "179", "n n": "180", oka: "181", yin: "182", \u0257an: "183", " fa": "184", "a i": "185", kki: "186", "re ": "187", "za ": "188", ala: "189", asu: "190", han: "191", "i y": "192", mar: "193", ran: "194", \u0199as: "195", add: "196", ars: "197", gab: "198", ira: "199", mma: "200", "u d": "201", " ts": "202", abb: "203", abu: "204", aga: "205", gar: "206", "n b": "207", " \u0257a": "208", aci: "209", aik: "210", "am ": "211", dun: "212", "e s": "213", "i b": "214", "i w": "215", kas: "216", kok: "217", wam: "218", " am": "219", amf: "220", bba: "221", din: "222", fan: "223", gwa: "224", "i s": "225", wat: "226", ano: "227", are: "228", dai: "229", iri: "230", "ma'": "231", " la": "232", all: "233", dam: "234", ika: "235", "mi ": "236", she: "237", tum: "238", uni: "239", " an": "240", " ai": "241", " ke": "242", " ki": "243", dag: "244", mai: "245", mfa: "246", "no ": "247", nsu: "248", "o d": "249", sak: "250", "um ": "251", " bi": "252", " gw": "253", " kw": "254", jam: "255", yya: "256", "a j": "257", "fa ": "258", uta: "259", " hu": "260", "'a ": "261", ans: "262", a\u0257a: "263", dda: "264", hin: "265", niy: "266", "r s": "267", bat: "268", dar: "269", gan: "270", "i t": "271", nta: "272", oki: "273", omi: "274", sal: "275", "a l": "276", kac: "277", lla: "278", wad: "279", war: "280", amm: "281", dom: "282", "r m": "283", ras: "284", sai: "285", " lo": "286", ats: "287", hal: "288", kat: "289", "li ": "290", lok: "291", "n c": "292", nar: "293", tin: "294", afa: "295", bub: "296", "i g": "297", isa: "298", mak: "299" }, hawaiian: { " ka": "0", "na ": "1", " o ": "2", "ka ": "3", " ma": "4", " a ": "5", " la": "6", "a i": "7", "a m": "8", " i ": "9", "la ": "10", ana: "11", "ai ": "12", "ia ": "13", "a o": "14", "a k": "15", "a h": "16", "o k": "17", " ke": "18", "a a": "19", "i k": "20", " ho": "21", " ia": "22", "ua ": "23", " na": "24", " me": "25", "e k": "26", "e a": "27", "au ": "28", "ke ": "29", "ma ": "30", mai: "31", aku: "32", " ak": "33", ahi: "34", " ha": "35", " ko": "36", " e ": "37", "a l": "38", " no": "39", "me ": "40", "ku ": "41", aka: "42", kan: "43", "no ": "44", "i a": "45", "ho ": "46", "ou ": "47", " ai": "48", "i o": "49", "a p": "50", "o l": "51", "o a": "52", ama: "53", "a n": "54", " an": "55", "i m": "56", han: "57", "i i": "58", iho: "59", kou: "60", "ne ": "61", " ih": "62", "o i": "63", iki: "64", ona: "65", hoo: "66", "le ": "67", "e h": "68", " he": "69", ina: "70", " wa": "71", "ea ": "72", ako: "73", "u i": "74", kah: "75", "oe ": "76", "i l": "77", "u a": "78", " pa": "79", hoi: "80", "e i": "81", era: "82", "ko ": "83", "u m": "84", kua: "85", mak: "86", "oi ": "87", kai: "88", "i n": "89", "a e": "90", hin: "91", ane: "92", " ol": "93", "i h": "94", mea: "95", wah: "96", lak: "97", "e m": "98", "o n": "99", "u l": "100", ika: "101", "ki ": "102", "a w": "103", mal: "104", "hi ": "105", "e n": "106", "u o": "107", hik: "108", " ku": "109", "e l": "110", ele: "111", "ra ": "112", ber: "113", ine: "114", abe: "115", ain: "116", ala: "117", "lo ": "118", " po": "119", kon: "120", " ab": "121", ole: "122", "he ": "123", pau: "124", mah: "125", "va ": "126", ela: "127", kau: "128", nak: "129", " oe": "130", kei: "131", oia: "132", " ie": "133", ram: "134", " oi": "135", "oa ": "136", eho: "137", hov: "138", ieh: "139", ova: "140", " ua": "141", una: "142", ara: "143", "o s": "144", awa: "145", "o o": "146", nau: "147", "u n": "148", "wa ": "149", wai: "150", hel: "151", " ae": "152", " al": "153", "ae ": "154", "ta ": "155", aik: "156", " hi": "157", ale: "158", ila: "159", lel: "160", ali: "161", eik: "162", olo: "163", onu: "164", " lo": "165", aua: "166", "e o": "167", ola: "168", hon: "169", mam: "170", nan: "171", " au": "172", aha: "173", lau: "174", nua: "175", oho: "176", oma: "177", " ao": "178", "ii ": "179", alu: "180", ima: "181", mau: "182", ike: "183", apa: "184", elo: "185", lii: "186", poe: "187", aia: "188", noa: "189", " in": "190", "o m": "191", oka: "192", "'u ": "193", aho: "194", "ei ": "195", eka: "196", "ha ": "197", "lu ": "198", nei: "199", hol: "200", ino: "201", "o e": "202", ema: "203", iwa: "204", olu: "205", ada: "206", naa: "207", "pa ": "208", "u k": "209", ewa: "210", hua: "211", lam: "212", lua: "213", "o h": "214", ook: "215", "u h": "216", " li": "217", ahu: "218", amu: "219", "ui ": "220", " il": "221", " mo": "222", " se": "223", eia: "224", law: "225", " hu": "226", " ik": "227", ail: "228", "e p": "229", "li ": "230", lun: "231", uli: "232", "io ": "233", kik: "234", noh: "235", "u e": "236", " sa": "237", aaw: "238", awe: "239", ena: "240", hal: "241", kol: "242", lan: "243", " le": "244", " ne": "245", "a'u": "246", ilo: "247", kap: "248", oko: "249", "sa ": "250", " pe": "251", hop: "252", loa: "253", ope: "254", "pe ": "255", " ad": "256", " pu": "257", ahe: "258", aol: "259", "ia'": "260", lai: "261", loh: "262", "na'": "263", oom: "264", aau: "265", eri: "266", kul: "267", "we ": "268", ake: "269", kek: "270", laa: "271", "ri ": "272", iku: "273", kak: "274", lim: "275", nah: "276", ner: "277", nui: "278", ono: "279", "a u": "280", dam: "281", kum: "282", lok: "283", mua: "284", uma: "285", wal: "286", "wi ": "287", "'i ": "288", "a'i": "289", aan: "290", alo: "291", eta: "292", "mu ": "293", ohe: "294", "u p": "295", ula: "296", uwa: "297", " nu": "298", amo: "299" }, hindi: { "\u0947\u0902 ": "0", " \u0939\u0948": "1", \u092E\u0947\u0902: "2", " \u092E\u0947": "3", "\u0928\u0947 ": "4", "\u0915\u0940 ": "5", "\u0915\u0947 ": "6", "\u0939\u0948 ": "7", " \u0915\u0947": "8", " \u0915\u0940": "9", " \u0915\u094B": "10", "\u094B\u0902 ": "11", "\u0915\u094B ": "12", "\u093E \u0939": "13", " \u0915\u093E": "14", "\u0938\u0947 ": "15", "\u093E \u0915": "16", "\u0947 \u0915": "17", "\u0902 \u0915": "18", "\u092F\u093E ": "19", " \u0915\u093F": "20", " \u0938\u0947": "21", "\u0915\u093E ": "22", "\u0940 \u0915": "23", " \u0928\u0947": "24", " \u0914\u0930": "25", "\u0914\u0930 ": "26", "\u0928\u093E ": "27", "\u0915\u093F ": "28", "\u092D\u0940 ": "29", "\u0940 \u0938": "30", " \u091C\u093E": "31", " \u092A\u0930": "32", "\u093E\u0930 ": "33", " \u0915\u0930": "34", "\u0940 \u0939": "35", " \u0939\u094B": "36", "\u0939\u0940 ": "37", "\u093F\u092F\u093E": "38", " \u0907\u0938": "39", " \u0930\u0939": "40", "\u0930 \u0915": "41", "\u0941\u0928\u093E": "42", "\u0924\u093E ": "43", "\u093E\u0928 ": "44", "\u0947 \u0938": "45", " \u092D\u0940": "46", " \u0930\u093E": "47", "\u0947 \u0939": "48", " \u091A\u0941": "49", " \u092A\u093E": "50", "\u092A\u0930 ": "51", \u091A\u0941\u0928: "52", \u0928\u093E\u0935: "53", " \u0915\u0939": "54", \u092A\u094D\u0930: "55", " \u092D\u093E": "56", \u0930\u093E\u091C: "57", \u0939\u0948\u0902: "58", "\u093E \u0938": "59", "\u0948 \u0915": "60", "\u0948\u0902 ": "61", "\u0928\u0940 ": "62", "\u0932 \u0915": "63", "\u0940\u0902 ": "64", "\u093C\u0940 ": "65", "\u0925\u093E ": "66", "\u0930\u0940 ": "67", "\u093E\u0935 ": "68", "\u0947 \u092C": "69", " \u092A\u094D": "70", \u0915\u094D\u0937: "71", "\u092A\u093E ": "72", "\u0932\u0947 ": "73", " \u0926\u0947": "74", "\u0932\u093E ": "75", "\u0939\u093E ": "76", "\u093E\u091C\u092A": "77", " \u0925\u093E": "78", " \u0928\u0939": "79", "\u0907\u0938 ": "80", "\u0915\u0930 ": "81", \u091C\u092A\u093E: "82", \u0928\u0939\u0940: "83", \u092D\u093E\u091C: "84", \u092F\u094B\u0902: "85", "\u0930 \u0938": "86", \u0939\u0940\u0902: "87", " \u0905\u092E": "88", " \u092C\u093E": "89", " \u092E\u093E": "90", " \u0935\u093F": "91", \u0930\u0940\u0915: "92", "\u093F\u090F ": "93", "\u0947 \u092A": "94", "\u094D\u092F\u093E": "95", " \u0939\u0940": "96", "\u0902 \u092E": "97", \u0915\u093E\u0930: "98", "\u093E \u091C": "99", "\u0947 \u0932": "100", " \u0924\u093E": "101", " \u0926\u093F": "102", " \u0938\u093E": "103", " \u0939\u092E": "104", "\u093E \u0928": "105", "\u093E \u092E": "106", "\u093E\u0915\u093C": "107", "\u094D\u0924\u093E": "108", " \u090F\u0915": "109", " \u0938\u0902": "110", " \u0938\u094D": "111", \u0905\u092E\u0930: "112", \u0915\u093C\u0940: "113", \u0924\u093E\u091C: "114", \u092E\u0930\u0940: "115", \u0938\u094D\u0925: "116", "\u093E \u0925": "117", "\u093E\u0930\u094D": "118", " \u0939\u0941": "119", \u0907\u0930\u093E: "120", "\u090F\u0915 ": "121", "\u0928 \u0915": "122", "\u0930 \u092E": "123", \u0930\u093E\u0915: "124", "\u0940 \u091C": "125", "\u0940 \u0928": "126", " \u0907\u0930": "127", " \u0909\u0928": "128", " \u092A\u0939": "129", \u0915\u0939\u093E: "130", "\u0924\u0947 ": "131", "\u0947 \u0905": "132", " \u0924\u094B": "133", " \u0938\u0941": "134", "\u0924\u093F ": "135", "\u0924\u0940 ": "136", "\u0924\u094B ": "137", \u092E\u093F\u0932: "138", "\u093F\u0915 ": "139", "\u093F\u092F\u094B": "140", "\u094D\u0930\u0947": "141", " \u0905\u092A": "142", " \u092B\u093C": "143", " \u0932\u093F": "144", " \u0932\u094B": "145", " \u0938\u092E": "146", "\u092E \u0915": "147", \u0930\u094D\u091F: "148", "\u0939\u094B ": "149", "\u093E \u091A": "150", "\u093E\u0908 ": "151", "\u093E\u0928\u0947": "152", "\u093F\u0928 ": "153", "\u094D\u092F ": "154", " \u0909\u0938": "155", " \u0915\u093C": "156", " \u0938\u0915": "157", " \u0938\u0948": "158", "\u0902 \u092A": "159", "\u0902 \u0939": "160", "\u0917\u0940 ": "161", "\u0924 \u0915": "162", \u092E\u093E\u0928: "163", "\u0930 \u0928": "164", \u0937\u094D\u091F: "165", "\u0938 \u0915": "166", \u0938\u094D\u0924: "167", "\u093E\u0901 ": "168", "\u0940 \u092C": "169", "\u0940 \u092E": "170", "\u094D\u0930\u0940": "171", " \u0926\u094B": "172", " \u092E\u093F": "173", " \u092E\u0941": "174", " \u0932\u0947": "175", " \u0936\u093E": "176", "\u0902 \u0938": "177", \u091C\u093C\u093E: "178", \u0924\u094D\u0930: "179", "\u0925\u0940 ": "180", \u0932\u093F\u090F: "181", "\u0938\u0940 ": "182", "\u093C\u093E ": "183", "\u093C\u093E\u0930": "184", "\u093E\u0902\u0917": "185", "\u0947 \u0926": "186", "\u0947 \u092E": "187", "\u094D\u0935 ": "188", " \u0928\u093E": "189", " \u092C\u0928": "190", "\u0902\u0917\u094D": "191", \u0915\u093E\u0902: "192", "\u0917\u093E ": "193", \u0917\u094D\u0930: "194", "\u091C\u093E ": "195", \u091C\u094D\u092F: "196", "\u0926\u0940 ": "197", "\u0928 \u092E": "198", \u092A\u093E\u0930: "199", "\u092D\u093E ": "200", \u0930\u0939\u0940: "201", "\u0930\u0947 ": "202", \u0930\u0947\u0938: "203", "\u0932\u0940 ": "204", \u0938\u092D\u093E: "205", "\u093E \u0930": "206", "\u093E\u0932 ": "207", "\u0940 \u0905": "208", "\u0940\u0915\u0940": "209", "\u0947 \u0924": "210", "\u0947\u0936 ": "211", " \u0905\u0902": "212", " \u0924\u0915": "213", " \u092F\u093E": "214", "\u0908 \u0939": "215", \u0915\u0930\u0928: "216", "\u0924\u0915 ": "217", \u0926\u0947\u0936: "218", \u0935\u0930\u094D: "219", "\u093E\u092F\u093E": "220", "\u0940 \u092D": "221", "\u0947\u0938 ": "222", "\u094D\u0937 ": "223", " \u0917\u092F": "224", " \u091C\u093F": "225", " \u0925\u0940": "226", " \u092C\u0921": "227", " \u092F\u0939": "228", " \u0935\u093E": "229", "\u0902\u0924\u0930": "230", \u0905\u0902\u0924: "231", "\u0915\u093C ": "232", \u0917\u092F\u093E: "233", "\u091F\u0940 ": "234", \u0928\u093F\u0915: "235", \u0928\u094D\u0939: "236", \u092A\u0939\u0932: "237", \u092C\u0921\u093C: "238", \u092E\u093E\u0930: "239", "\u0930 \u092A": "240", \u0930\u0928\u0947: "241", "\u093E\u091C\u093C": "242", "\u093F \u0907": "243", "\u0940 \u0930": "244", "\u0947 \u091C": "245", "\u0947 \u0935": "246", "\u094D\u091F ": "247", "\u094D\u091F\u0940": "248", " \u0905\u092C": "249", " \u0932\u0917": "250", " \u0935\u0930": "251", " \u0938\u0940": "252", "\u0902 \u092D": "253", \u0909\u0928\u094D: "254", "\u0915 \u0915": "255", \u0915\u093F\u092F: "256", \u0926\u0947\u0916: "257", \u092A\u0942\u0930: "258", \u092B\u093C\u094D: "259", "\u092F\u0939 ": "260", \u092F\u093E\u0928: "261", \u0930\u093F\u0915: "262", \u0930\u093F\u092F: "263", \u0930\u094D\u0921: "264", \u0932\u0947\u0915: "265", \u0938\u0915\u0924: "266", \u0939\u094B\u0902: "267", \u0939\u094B\u0917: "268", "\u093E \u0905": "269", "\u093E \u0926": "270", "\u093E \u092A": "271", "\u093E\u0926 ": "272", "\u093E\u0930\u093E": "273", "\u093F\u0924 ": "274", "\u0940 \u0924": "275", "\u0940 \u092A": "276", "\u094B \u0915": "277", "\u094B \u0926": "278", " \u0924\u0947": "279", " \u0928\u093F": "280", " \u0938\u0930": "281", " \u0939\u093E": "282", "\u0902 \u0926": "283", \u0905\u092A\u0928: "284", \u091C\u093E\u0928: "285", "\u0924 \u092E": "286", \u0925\u093F\u0924: "287", \u092A\u0928\u0940: "288", \u092E\u0939\u0932: "289", "\u0930 \u0939": "290", \u0932\u094B\u0917: "291", "\u0935 \u0915": "292", \u0939\u0928\u093E: "293", "\u0939\u0932 ": "294", \u0939\u093E\u0901: "295", "\u093E\u091C\u094D": "296", "\u093E\u0928\u093E": "297", "\u093F\u0915\u094D": "298", "\u093F\u0938\u094D": "299" }, hungarian: { " a ": "0", " az": "1", " sz": "2", "az ": "3", " me": "4", "en ": "5", " el": "6", " ho": "7", "ek ": "8", "gy ": "9", "tt ": "10", ett: "11", sze: "12", " fe": "13", "\xE9s ": "14", " ki": "15", tet: "16", " be": "17", "et ": "18", ter: "19", " k\xF6": "20", " \xE9s": "21", hog: "22", meg: "23", ogy: "24", szt: "25", "te ": "26", "t a": "27", zet: "28", "a m": "29", nek: "30", "nt ": "31", s\u00E9g: "32", sz\u00E1: "33", "ak ": "34", " va": "35", "an ": "36", eze: "37", "ra ": "38", "ta ": "39", " mi": "40", int: "41", k\u00F6z: "42", " is": "43", esz: "44", fel: "45", min: "46", nak: "47", ors: "48", zer: "49", " te": "50", "a a": "51", "a k": "52", "is ": "53", " cs": "54", ele: "55", "er ": "56", men: "57", "si ": "58", tek: "59", "ti ": "60", " ne": "61", csa: "62", ent: "63", "z e": "64", "a t": "65", ala: "66", ere: "67", "es ": "68", lom: "69", lte: "70", mon: "71", ond: "72", rsz: "73", sza: "74", tte: "75", z\u00E1g: "76", \u00E1ny: "77", " fo": "78", " ma": "79", "ai ": "80", ben: "81", "el ": "82", ene: "83", "ik ": "84", jel: "85", t\u00E1s: "86", \u00E1ll: "87", " ha": "88", " le": "89", " \xE1l": "90", agy: "91", al\u00E1: "92", isz: "93", "y a": "94", zte: "95", "\xE1s ": "96", " al": "97", "e a": "98", egy: "99", ely: "100", for: "101", lat: "102", "lt ": "103", "n a": "104", oga: "105", "on ": "106", "re ": "107", "st ": "108", s\u00E1g: "109", "t m": "110", "\xE1n ": "111", "\xE9t ": "112", \u00FClt: "113", " je": "114", "gi ": "115", "k a": "116", k\u00FCl: "117", lam: "118", len: "119", l\u00E1s: "120", m\u00E1s: "121", "s k": "122", vez: "123", \u00E1so: "124", \u00F6z\u00F6: "125", " ta": "126", "a s": "127", "a v": "128", asz: "129", at\u00E1: "130", et\u0151: "131", kez: "132", let: "133", mag: "134", nem: "135", sz\u00E9: "136", "z m": "137", "\xE1t ": "138", \u00E9te: "139", \u00F6lt: "140", " de": "141", " gy": "142", " k\xE9": "143", " mo": "144", " v\xE1": "145", " \xE9r": "146", "a b": "147", "a f": "148", ami: "149", "at ": "150", ato: "151", att: "152", bef: "153", dta: "154", gya: "155", hat: "156", "i s": "157", las: "158", ndt: "159", "rt ": "160", szo: "161", "t k": "162", t\u00E1r: "163", t\u00E9s: "164", van: "165", \u00E1s\u00E1: "166", "\xF3l ": "167", " b\xE9": "168", " eg": "169", " or": "170", " p\xE1": "171", " p\xE9": "172", " ve": "173", ban: "174", eke: "175", ek\u00FC: "176", el\u0151: "177", erv: "178", ete: "179", fog: "180", "i a": "181", kis: "182", l\u00E1d: "183", nte: "184", nye: "185", nyi: "186", "ok ": "187", om\u00E1: "188", "os ": "189", r\u00E1n: "190", r\u00E1s: "191", sal: "192", "t e": "193", v\u00E1l: "194", yar: "195", \u00E1go: "196", \u00E1la: "197", \u00E9ge: "198", \u00E9ny: "199", \u00F6tt: "200", " t\xE1": "201", ad\u00F3: "202", elh: "203", fej: "204", het: "205", hoz: "206", ill: "207", j\u00E1r: "208", k\u00E9s: "209", llo: "210", "mi ": "211", "ny ": "212", ont: "213", ren: "214", res: "215", rin: "216", "s a": "217", "s e": "218", ssz: "219", "zt ": "220", " ez": "221", " ka": "222", " ke": "223", " ko": "224", " re": "225", "a h": "226", "a n": "227", den: "228", "d\xF3 ": "229", efo: "230", gad: "231", gat: "232", gye: "233", hel: "234", "k e": "235", ket: "236", les: "237", m\u00E1n: "238", nde: "239", nis: "240", ozz: "241", "t b": "242", "t i": "243", "t \xE9": "244", tat: "245", tos: "246", val: "247", "z o": "248", zak: "249", "\xE1d ": "250", \u00E1ly: "251", \u00E1ra: "252", \u00E9si: "253", \u00E9sz: "254", " ak": "255", " am": "256", " es": "257", " h\xE1": "258", " ny": "259", " t\xF6": "260", aka: "261", art: "262", at\u00F3: "263", azt: "264", bbe: "265", ber: "266", ci\u00F3: "267", cso: "268", "em ": "269", eti: "270", et\u00E9: "271", gal: "272", "i t": "273", ini: "274", ist: "275", "ja ": "276", ker: "277", "ki ": "278", kor: "279", koz: "280", "l \xE9": "281", lj\u00E1: "282", lye: "283", "n v": "284", "ni ": "285", p\u00E1l: "286", ror: "287", r\u00F3l: "288", r\u00FCl: "289", "s c": "290", "s p": "291", "s s": "292", "s v": "293", sok: "294", "t j": "295", "t t": "296", tar: "297", tel: "298", vat: "299" }, icelandic: { "a\xF0 ": "0", "um ": "1", " a\xF0": "2", "ir ": "3", "i\xF0 ": "4", "ur ": "5", " ve": "6", " \xED ": "7", "na ": "8", " \xE1 ": "9", " se": "10", " er": "11", " og": "12", "ar ": "13", "og ": "14", ver: "15", " mi": "16", inn: "17", "nn ": "18", " fy": "19", "er ": "20", fyr: "21", " ek": "22", " en": "23", " ha": "24", " he": "25", ekk: "26", " st": "27", "ki ": "28", "st ": "29", "\xF0i ": "30", " ba": "31", " me": "32", " vi": "33", "ig ": "34", rir: "35", yri: "36", " um": "37", "g f": "38", leg: "39", lei: "40", "ns ": "41", "\xF0 s": "42", " ei": "43", " \xFEa": "44", "in ": "45", kki: "46", "r h": "47", "r s": "48", egi: "49", ein: "50", "ga ": "51", ing: "52", "ra ": "53", sta: "54", " va": "55", " \xFEe": "56", ann: "57", "en ": "58", mil: "59", sem: "60", tj\u00F3: "61", ar\u00F0: "62", "di ": "63", eit: "64", haf: "65", ill: "66", ins: "67", ist: "68", llj: "69", ndi: "70", "r a": "71", "r e": "72", seg: "73", "un ": "74", var: "75", " bi": "76", " el": "77", " fo": "78", " ge": "79", " yf": "80", and: "81", aug: "82", bau: "83", big: "84", ega: "85", eld: "86", er\u00F0: "87", fir: "88", foo: "89", gin: "90", itt: "91", "n s": "92", ngi: "93", num: "94", "od ": "95", ood: "96", sin: "97", "ta ": "98", "tt ": "99", vi\u00F0: "100", yfi: "101", "\xF0 e": "102", "\xF0 f": "103", " hr": "104", " s\xE9": "105", " \xFEv": "106", "a e": "107", "a \xE1": "108", "em ": "109", "gi ": "110", "i f": "111", jar: "112", j\u00F3r: "113", lja: "114", "m e": "115", "r \xE1": "116", rei: "117", rst: "118", r\u00F0a: "119", r\u00F0i: "120", r\u00F0u: "121", stj: "122", und: "123", veg: "124", "v\xED ": "125", "\xF0 v": "126", \u00FEa\u00F0: "127", \u00FEv\u00ED: "128", " fj": "129", " ko": "130", " sl": "131", eik: "132", end: "133", ert: "134", ess: "135", fj\u00E1: "136", fur: "137", gir: "138", h\u00FAs: "139", j\u00E1r: "140", "n e": "141", "ri ": "142", tar: "143", "\xF0 \xFE": "144", \u00F0ar: "145", \u00F0ur: "146", \u00FEes: "147", " br": "148", " h\xFA": "149", " kr": "150", " le": "151", " up": "152", "a s": "153", egg: "154", "i s": "155", irt: "156", "ja ": "157", ki\u00F0: "158", len: "159", me\u00F0: "160", mik: "161", "n b": "162", nar: "163", nir: "164", nun: "165", "r f": "166", "r v": "167", ri\u00F0: "168", "rt ": "169", sti: "170", "t v": "171", "ti ": "172", una: "173", upp: "174", "\xF0a ": "175", \u00F3na: "176", " al": "177", " fr": "178", " gr": "179", "a v": "180", all: "181", "an ": "182", "da ": "183", ei\u00F0: "184", "e\xF0 ": "185", "fa ": "186", fra: "187", "g e": "188", ger: "189", gi\u00F0: "190", "gt ": "191", han: "192", hef: "193", hel: "194", her: "195", hra: "196", "i a": "197", "i e": "198", "i v": "199", "i \xFE": "200", iki: "201", j\u00F3n: "202", j\u00F6r: "203", "ka ": "204", kr\u00F3: "205", l\u00EDk: "206", "m h": "207", "n a": "208", nga: "209", "r l": "210", ram: "211", "ru ": "212", r\u00E1\u00F0: "213", r\u00F3n: "214", svo: "215", vin: "216", "\xED b": "217", "\xED h": "218", "\xF0 h": "219", "\xF0 k": "220", "\xF0 m": "221", \u00F6r\u00F0: "222", " af": "223", " fa": "224", " l\xED": "225", " r\xE1": "226", " sk": "227", " sv": "228", " te": "229", "a b": "230", "a f": "231", "a h": "232", "a k": "233", "a u": "234", afi: "235", agn: "236", arn: "237", ast: "238", ber: "239", efu: "240", enn: "241", erb: "242", erg: "243", "fi ": "244", "g a": "245", gar: "246", i\u00F0s: "247", ker: "248", kke: "249", lan: "250", lj\u00F3: "251", llt: "252", "ma ": "253", mi\u00F0: "254", "n v": "255", "n \xED": "256", nan: "257", nda: "258", ndu: "259", ni\u00F0: "260", nna: "261", nnu: "262", "nu ": "263", "r o": "264", rbe: "265", rgi: "266", sl\u00F6: "267", "s\xE9 ": "268", "t a": "269", "t h": "270", til: "271", tin: "272", ugu: "273", vil: "274", ygg: "275", "\xE1 s": "276", "\xF0 a": "277", "\xF0 b": "278", \u00F3rn: "279", \u00F6gn: "280", \u00F6ku: "281", " at": "282", " fi": "283", " f\xE9": "284", " ka": "285", " ma": "286", " no": "287", " sa": "288", " si": "289", " ti": "290", " \xE1k": "291", "a m": "292", "a t": "293", "a \xED": "294", "a \xFE": "295", afa: "296", afs: "297", ald: "298", arf: "299" }, indonesian: { "an ": "0", " me": "1", kan: "2", ang: "3", "ng ": "4", " pe": "5", men: "6", " di": "7", " ke": "8", " da": "9", " se": "10", eng: "11", " be": "12", nga: "13", nya: "14", " te": "15", "ah ": "16", ber: "17", aka: "18", " ya": "19", dan: "20", "di ": "21", yan: "22", "n p": "23", per: "24", "a m": "25", ita: "26", " pa": "27", "da ": "28", ata: "29", ada: "30", "ya ": "31", "ta ": "32", " in": "33", ala: "34", eri: "35", "ia ": "36", "a d": "37", "n k": "38", "am ": "39", "ga ": "40", "at ": "41", era: "42", "n d": "43", ter: "44", " ka": "45", "a p": "46", ari: "47", emb: "48", "n m": "49", "ri ": "50", " ba": "51", aan: "52", "ak ": "53", "ra ": "54", " it": "55", ara: "56", ela: "57", "ni ": "58", ali: "59", ran: "60", "ar ": "61", eru: "62", lah: "63", "a b": "64", asi: "65", awa: "66", eba: "67", gan: "68", "n b": "69", " ha": "70", ini: "71", mer: "72", " la": "73", " mi": "74", and: "75", ena: "76", wan: "77", " sa": "78", aha: "79", lam: "80", "n i": "81", nda: "82", " wa": "83", "a i": "84", dua: "85", "g m": "86", "mi ": "87", "n a": "88", rus: "89", tel: "90", yak: "91", " an": "92", dal: "93", "h d": "94", "i s": "95", ing: "96", min: "97", ngg: "98", tak: "99", ami: "100", beb: "101", den: "102", gat: "103", ian: "104", "ih ": "105", pad: "106", rga: "107", san: "108", "ua ": "109", " de": "110", "a t": "111", arg: "112", dar: "113", elu: "114", har: "115", "i k": "116", "i m": "117", "i p": "118", ika: "119", "in ": "120", iny: "121", itu: "122", mba: "123", "n t": "124", ntu: "125", pan: "126", pen: "127", sah: "128", tan: "129", "tu ": "130", "a k": "131", ban: "132", edu: "133", eka: "134", "g d": "135", "ka ": "136", ker: "137", nde: "138", nta: "139", ora: "140", usa: "141", " du": "142", " ma": "143", "a s": "144", "ai ": "145", ant: "146", bas: "147", end: "148", "i d": "149", ira: "150", kam: "151", lan: "152", "n s": "153", uli: "154", "al ": "155", apa: "156", ere: "157", ert: "158", lia: "159", mem: "160", rka: "161", "si ": "162", tal: "163", ung: "164", " ak": "165", "a a": "166", "a w": "167", ani: "168", ask: "169", ent: "170", gar: "171", haa: "172", "i i": "173", isa: "174", ked: "175", mbe: "176", ska: "177", tor: "178", uan: "179", "uk ": "180", uka: "181", " ad": "182", " to": "183", asa: "184", aya: "185", bag: "186", dia: "187", dun: "188", erj: "189", mas: "190", "na ": "191", rek: "192", rit: "193", sih: "194", "us ": "195", " bi": "196", "a h": "197", ama: "198", dib: "199", ers: "200", "g s": "201", han: "202", "ik ": "203", kem: "204", "ma ": "205", "n l": "206", nit: "207", "r b": "208", rja: "209", "sa ": "210", " ju": "211", " or": "212", " si": "213", " ti": "214", "a y": "215", aga: "216", any: "217", "as ": "218", cul: "219", eme: "220", emu: "221", eny: "222", epa: "223", erb: "224", erl: "225", "gi ": "226", "h m": "227", "i a": "228", kel: "229", "li ": "230", mel: "231", nia: "232", opa: "233", rta: "234", sia: "235", tah: "236", ula: "237", "un ": "238", unt: "239", " at": "240", " bu": "241", " pu": "242", " ta": "243", agi: "244", alu: "245", amb: "246", bah: "247", bis: "248", "er ": "249", "i t": "250", ibe: "251", "ir ": "252", "ja ": "253", "k m": "254", kar: "255", lai: "256", lal: "257", "lu ": "258", mpa: "259", ngk: "260", nja: "261", "or ": "262", "pa ": "263", pas: "264", pem: "265", rak: "266", rik: "267", seb: "268", tam: "269", tem: "270", top: "271", tuk: "272", uni: "273", war: "274", " al": "275", " ga": "276", " ge": "277", " ir": "278", " ja": "279", " mu": "280", " na": "281", " pr": "282", " su": "283", " un": "284", "ad ": "285", adi: "286", akt: "287", ann: "288", apo: "289", bel: "290", bul: "291", der: "292", ega: "293", eke: "294", ema: "295", emp: "296", ene: "297", enj: "298", esa: "299" }, italian: { " di": "0", "to ": "1", "la ": "2", " de": "3", "di ": "4", "no ": "5", " co": "6", "re ": "7", ion: "8", "e d": "9", " e ": "10", "le ": "11", del: "12", "ne ": "13", "ti ": "14", ell: "15", " la": "16", " un": "17", "ni ": "18", "i d": "19", per: "20", " pe": "21", ent: "22", " in": "23", one: "24", "he ": "25", "ta ": "26", zio: "27", che: "28", "o d": "29", "a d": "30", "na ": "31", ato: "32", "e s": "33", " so": "34", "i s": "35", lla: "36", "a p": "37", "li ": "38", "te ": "39", " al": "40", " ch": "41", "er ": "42", " pa": "43", " si": "44", con: "45", sta: "46", " pr": "47", "a c": "48", " se": "49", "el ": "50", "ia ": "51", "si ": "52", "e p": "53", " da": "54", "e i": "55", "i p": "56", ont: "57", ano: "58", "i c": "59", all: "60", azi: "61", nte: "62", "on ": "63", nti: "64", "o s": "65", " ri": "66", "i a": "67", "o a": "68", "un ": "69", " an": "70", are: "71", ari: "72", "e a": "73", "i e": "74", ita: "75", men: "76", "ri ": "77", " ca": "78", " il": "79", " no": "80", " po": "81", "a s": "82", ant: "83", "il ": "84", "in ": "85", "a l": "86", ati: "87", cia: "88", "e c": "89", "ro ": "90", ann: "91", est: "92", gli: "93", "t\xE0 ": "94", " qu": "95", "e l": "96", nta: "97", " a ": "98", com: "99", "o c": "100", "ra ": "101", " le": "102", " ne": "103", ali: "104", ere: "105", ist: "106", " ma": "107", " \xE8 ": "108", "io ": "109", lle: "110", "me ": "111", era: "112", ica: "113", ost: "114", pro: "115", tar: "116", una: "117", " pi": "118", "da ": "119", tat: "120", " mi": "121", att: "122", "ca ": "123", "mo ": "124", non: "125", par: "126", sti: "127", " fa": "128", " i ": "129", " re": "130", " su": "131", ess: "132", ini: "133", nto: "134", "o l": "135", ssi: "136", tto: "137", "a e": "138", ame: "139", col: "140", "ei ": "141", "ma ": "142", "o i": "143", "za ": "144", " st": "145", "a a": "146", ale: "147", anc: "148", ani: "149", "i m": "150", ian: "151", "o p": "152", oni: "153", sio: "154", tan: "155", tti: "156", " lo": "157", "i r": "158", oci: "159", oli: "160", ona: "161", ono: "162", tra: "163", " l ": "164", "a r": "165", eri: "166", ett: "167", "lo ": "168", nza: "169", que: "170", str: "171", ter: "172", tta: "173", " ba": "174", " li": "175", " te": "176", ass: "177", "e f": "178", enz: "179", for: "180", nno: "181", olo: "182", ori: "183", res: "184", tor: "185", " ci": "186", " vo": "187", "a i": "188", "al ": "189", chi: "190", "e n": "191", lia: "192", pre: "193", ria: "194", uni: "195", ver: "196", " sp": "197", imo: "198", "l a": "199", "l c": "200", ran: "201", sen: "202", soc: "203", tic: "204", " fi": "205", " mo": "206", "a n": "207", "ce ": "208", dei: "209", ggi: "210", gio: "211", iti: "212", "l s": "213", lit: "214", "ll ": "215", mon: "216", ola: "217", pac: "218", sim: "219", tit: "220", utt: "221", vol: "222", " ar": "223", " fo": "224", " ha": "225", " sa": "226", acc: "227", "e r": "228", ire: "229", man: "230", ntr: "231", rat: "232", sco: "233", tro: "234", tut: "235", "va ": "236", " do": "237", " gi": "238", " me": "239", " sc": "240", " tu": "241", " ve": "242", " vi": "243", "a m": "244", ber: "245", can: "246", cit: "247", "i l": "248", ier: "249", it\u00E0: "250", lli: "251", min: "252", "n p": "253", nat: "254", nda: "255", "o e": "256", "o f": "257", "o u": "258", ore: "259", oro: "260", ort: "261", sto: "262", ten: "263", tiv: "264", van: "265", art: "266", cco: "267", "ci ": "268", cos: "269", dal: "270", "e v": "271", "i i": "272", ila: "273", ino: "274", "l p": "275", "n c": "276", nit: "277", ole: "278", ome: "279", "po ": "280", rio: "281", "sa ": "282", " ce": "283", " es": "284", " tr": "285", "a b": "286", and: "287", ata: "288", der: "289", ens: "290", ers: "291", "gi ": "292", ial: "293", ina: "294", itt: "295", izi: "296", lan: "297", lor: "298", mil: "299" }, kazakh: { "\u0430\u043D ": "0", "\u0435\u043D ": "1", "\u044B\u04A3 ": "2", " \u049B\u0430": "3", " \u0431\u0430": "4", "\u0430\u0439 ": "5", \u043D\u0434\u0430: "6", "\u044B\u043D ": "7", " \u0441\u0430": "8", " \u0430\u043B": "9", "\u0434\u0456 ": "10", \u0430\u0440\u044B: "11", "\u0434\u044B ": "12", "\u044B\u043F ": "13", " \u043C\u04B1": "14", " \u0431\u0456": "15", \u0430\u0441\u044B: "16", "\u0434\u0430 ": "17", \u043D\u0430\u0439: "18", " \u0436\u0430": "19", \u043C\u04B1\u043D: "20", \u0441\u0442\u0430: "21", \u0493\u0430\u043D: "22", "\u043D \u0431": "23", \u04B1\u043D\u0430: "24", " \u0431\u043E": "25", \u043D\u044B\u04A3: "26", "\u0456\u043D ": "27", \u043B\u0430\u0440: "28", \u0441\u044B\u043D: "29", " \u0434\u0435": "30", \u0430\u0493\u0430: "31", \u0442\u0430\u043D: "32", " \u043A\u04E9": "33", \u0431\u0456\u0440: "34", "\u0435\u0440 ": "35", \u043C\u0435\u043D: "36", \u0430\u0437\u0430: "37", \u044B\u043D\u0434: "38", \u044B\u043D\u044B: "39", " \u043C\u0435": "40", \u0430\u043D\u0434: "41", \u0435\u0440\u0456: "42", \u0431\u043E\u043B: "43", \u0434\u044B\u04A3: "44", \u049B\u0430\u0437: "45", \u0430\u0442\u044B: "46", "\u0441\u044B ": "47", \u0442\u044B\u043D: "48", "\u0493\u044B ": "49", " \u043A\u0435": "50", "\u0430\u0440 ": "51", \u0437\u0430\u049B: "52", "\u044B\u049B ": "53", \u0430\u043B\u0430: "54", \u0430\u043B\u044B: "55", \u0430\u043D\u044B: "56", \u0430\u0440\u0430: "57", \u0430\u0493\u044B: "58", \u0433\u0435\u043D: "59", \u0442\u0430\u0440: "60", \u0442\u0435\u0440: "61", \u0442\u044B\u0440: "62", \u0430\u0439\u0434: "63", \u0430\u0440\u0434: "64", "\u0434\u0435 ": "65", "\u0493\u0430 ": "66", " \u049B\u043E": "67", \u0431\u0430\u0440: "68", "\u0456\u04A3 ": "69", \u049B\u0430\u043D: "70", " \u0431\u0435": "71", " \u049B\u044B": "72", \u0430\u049B\u0441: "73", \u0433\u0435\u0440: "74", \u0434\u0430\u043D: "75", \u0434\u0430\u0440: "76", \u043B\u044B\u049B: "77", \u043B\u0493\u0430: "78", \u044B\u043D\u0430: "79", "\u0456\u0440 ": "80", \u0456\u0440\u0456: "81", \u0493\u0430\u0441: "82", " \u0442\u0430": "83", "\u0430 \u0431": "84", "\u0433\u0456 ": "85", \u0435\u0434\u0456: "86", \u0435\u043B\u0435: "87", \u0439\u0434\u044B: "88", "\u043D \u043A": "89", "\u043D \u0442": "90", \u043E\u043B\u0430: "91", \u0440\u044B\u043D: "92", "\u0456\u043F ": "93", \u049B\u0441\u0442: "94", \u049B\u0442\u0430: "95", "\u04A3 \u0431": "96", " \u0430\u0439": "97", " \u043E\u043B": "98", " \u0441\u043E": "99", \u0430\u0439\u0442: "100", \u0434\u0430\u0493: "101", \u0438\u0433\u0435: "102", \u043B\u0435\u0440: "103", \u043B\u044B\u043F: "104", "\u043D \u0430": "105", "\u0456\u043A ": "106", \u0430\u049B\u0442: "107", \u0431\u0430\u0493: "108", \u043A\u0435\u043D: "109", "\u043D \u049B": "110", "\u043D\u044B ": "111", \u0440\u0433\u0435: "112", \u0440\u0493\u0430: "113", "\u044B\u0440 ": "114", " \u0430\u0440": "115", \u0430\u043B\u0493: "116", \u0430\u0441\u0430: "117", \u0431\u0430\u0441: "118", \u0431\u0435\u0440: "119", "\u0433\u0435 ": "120", \u0435\u0442\u0456: "121", "\u043D\u0430 ": "122", \u043D\u0434\u0435: "123", "\u043D\u0435 ": "124", \u043D\u0438\u0433: "125", \u0440\u0434\u044B: "126", "\u0440\u044B ": "127", \u0441\u0430\u0439: "128", " \u0430\u0443": "129", " \u043A\u04AF": "130", " \u043D\u0438": "131", " \u043E\u0442": "132", " \u04E9\u0437": "133", \u0430\u0443\u0434: "134", "\u0435\u043F ": "135", \u0438\u044F\u043B: "136", \u043B\u0442\u044B: "137", "\u043D \u0436": "138", "\u043D \u043E": "139", \u043E\u0441\u044B: "140", \u043E\u0442\u044B: "141", \u0440\u044B\u043F: "142", "\u0440\u0456 ": "143", \u0442\u043A\u0435: "144", "\u0442\u044B ": "145", "\u044B \u0431": "146", "\u044B \u0436": "147", \u044B\u043B\u044B: "148", \u044B\u0441\u044B: "149", "\u0456 \u0441": "150", \u049B\u0430\u0440: "151", " \u0431\u04B1": "152", " \u0434\u0430": "153", " \u0436\u0435": "154", " \u0442\u04B1": "155", " \u049B\u04B1": "156", \u0430\u0434\u044B: "157", \u0430\u0439\u043B: "158", "\u0430\u043F ": "159", \u0430\u0442\u0430: "160", \u0435\u043D\u0456: "161", \u0439\u043B\u0430: "162", "\u043D \u043C": "163", "\u043D \u0441": "164", \u043D\u0434\u044B: "165", \u043D\u0434\u0456: "166", "\u0440 \u043C": "167", \u0442\u0430\u0439: "168", \u0442\u0456\u043D: "169", "\u044B \u0442": "170", "\u044B\u0441 ": "171", \u0456\u043D\u0434: "172", " \u0431\u0438": "173", "\u0430 \u0436": "174", \u0430\u0443\u044B: "175", \u0434\u0435\u043F: "176", \u0434\u0456\u04A3: "177", \u0435\u043A\u0435: "178", \u0435\u0440\u0438: "179", \u0439\u044B\u043D: "180", \u043A\u0435\u043B: "181", \u043B\u0434\u044B: "182", "\u043C\u0430 ": "183", \u043D\u0430\u043D: "184", \u043E\u043D\u044B: "185", "\u043F \u0436": "186", "\u043F \u043E": "187", "\u0440 \u0431": "188", \u0440\u0438\u044F: "189", \u0440\u043B\u0430: "190", \u0443\u0434\u0430: "191", \u0448\u044B\u043B: "192", "\u044B \u0430": "193", \u044B\u049B\u0442: "194", "\u0456 \u0430": "195", "\u0456 \u0431": "196", "\u0456\u0437 ": "197", \u0456\u043B\u0456: "198", "\u04A3 \u049B": "199", " \u0430\u0441": "200", " \u0435\u043A": "201", " \u0436\u043E": "202", " \u043C\u04D9": "203", " \u043E\u0441": "204", " \u0440\u0435": "205", " \u0441\u0435": "206", \u0430\u043B\u0434: "207", \u0434\u0430\u043B: "208", \u0434\u0435\u0433: "209", \u0434\u0435\u0439: "210", "\u0435 \u0431": "211", "\u0435\u0442 ": "212", \u0436\u0430\u0441: "213", "\u0439 \u0431": "214", \u043B\u0430\u0443: "215", \u043B\u0434\u0430: "216", \u043C\u0435\u0442: "217", \u043D\u044B\u043D: "218", \u0441\u0430\u0440: "219", "\u0441\u0456 ": "220", "\u0442\u0456 ": "221", \u044B\u0440\u044B: "222", \u044B\u0442\u0430: "223", \u0456\u0441\u0456: "224", "\u04A3 \u0430": "225", \u04E9\u0442\u0435: "226", " \u0430\u0442": "227", " \u0435\u043B": "228", " \u0436\u04AF": "229", " \u043C\u0430": "230", " \u0442\u043E": "231", " \u0448\u044B": "232", "\u0430 \u0430": "233", \u0430\u043B\u0442: "234", \u0430\u043C\u0430: "235", \u0430\u0440\u043B: "236", \u0430\u0441\u0442: "237", \u0431\u04B1\u043B: "238", \u0434\u0430\u0439: "239", \u0434\u044B\u049B: "240", "\u0435\u043A ": "241", \u0435\u043B\u044C: "242", \u0435\u0441\u0456: "243", \u0437\u0434\u0456: "244", \u043A\u04E9\u0442: "245", \u043B\u0435\u043C: "246", "\u043B\u044C ": "247", "\u043D \u0435": "248", "\u043F \u0430": "249", "\u0440 \u0430": "250", \u0440\u0435\u0441: "251", "\u0441\u0430 ": "252", "\u0442\u0430 ": "253", \u0442\u0442\u0435: "254", \u0442\u04B1\u0440: "255", "\u0448\u044B ": "256", "\u044B \u0434": "257", "\u044B \u049B": "258", "\u044B\u0437 ": "259", \u049B\u044B\u0442: "260", " \u043A\u043E": "261", " \u043D\u0435": "262", " \u043E\u0439": "263", " \u043E\u0440": "264", " \u0441\u04B1": "265", " \u0442\u04AF": "266", \u0430\u043B\u044C: "267", \u0430\u0440\u0435: "268", \u0430\u0442\u0442: "269", \u0434\u0456\u0440: "270", "\u0435\u0432 ": "271", \u0435\u0433\u0456: "272", \u0435\u0434\u0430: "273", \u0435\u043A\u0456: "274", \u0435\u043B\u0434: "275", \u0435\u0440\u0433: "276", \u0435\u0440\u0434: "277", \u0438\u044F\u0434: "278", \u043A\u0435\u0440: "279", \u043A\u0435\u0442: "280", \u043B\u044B\u0441: "281", \u043B\u0456\u0441: "282", \u043C\u0435\u0434: "283", \u043C\u043F\u0438: "284", "\u043D \u0434": "285", "\u043D\u0456 ": "286", \u043D\u0456\u043D: "287", "\u043F \u0442": "288", \u043F\u0435\u043A: "289", \u0440\u0435\u043B: "290", \u0440\u0442\u0430: "291", \u0440\u0456\u043B: "292", \u0440\u0456\u043D: "293", \u0441\u0435\u043D: "294", \u0442\u0430\u043B: "295", \u0448\u0456\u043B: "296", "\u044B \u043A": "297", "\u044B \u043C": "298", \u044B\u0441\u0442: "299" }, kyrgyz: { "\u044B\u043D ": "0", "\u0430\u043D ": "1", " \u0436\u0430": "2", "\u0435\u043D ": "3", "\u0434\u0430 ": "4", " \u0442\u0430": "5", "\u0430\u0440 ": "6", "\u0438\u043D ": "7", " \u043A\u0430": "8", \u0430\u0440\u044B: "9", " \u0430\u043B": "10", " \u0431\u0430": "11", " \u0431\u0438": "12", \u043B\u0430\u0440: "13", " \u0431\u043E": "14", " \u043A\u044B": "15", \u0430\u043B\u0430: "16", "\u043D \u043A": "17", " \u0441\u0430": "18", \u043D\u0434\u0430: "19", \u0433\u0430\u043D: "20", \u0442\u0430\u0440: "21", " \u0434\u0435": "22", \u0430\u043D\u0434: "23", "\u043D \u0431": "24", " \u043A\u0435": "25", \u0430\u0440\u0434: "26", \u043C\u0435\u043D: "27", "\u043D \u0442": "28", \u0430\u0440\u0430: "29", \u043D\u044B\u043D: "30", " \u0434\u0430": "31", " \u043C\u0435": "32", \u043A\u044B\u0440: "33", " \u0447\u0435": "34", "\u043D \u0430": "35", "\u0440\u044B ": "36", " \u043A\u043E": "37", \u0433\u0435\u043D: "38", \u0434\u0430\u0440: "39", \u043A\u0435\u043D: "40", \u043A\u0442\u0430: "41", "\u0443\u0443 ": "42", \u0435\u043D\u0435: "43", \u0435\u0440\u0438: "44", " \u0448\u0430": "45", \u0430\u043B\u044B: "46", "\u0430\u0442 ": "47", "\u043D\u0430 ": "48", " \u043A\u04E9": "49", " \u044D\u043C": "50", \u0430\u0442\u044B: "51", \u0434\u0430\u043D: "52", \u0434\u0435\u043F: "53", \u0434\u044B\u043D: "54", "\u0435\u043F ": "55", \u043D\u0435\u043D: "56", \u0440\u044B\u043D: "57", " \u0431\u0435": "58", \u043A\u0430\u043D: "59", \u043B\u0443\u0443: "60", \u0440\u0433\u044B: "61", \u0442\u0430\u043D: "62", \u0448\u0430\u0439: "63", \u044B\u0440\u0433: "64", "\u04AF\u043D ": "65", " \u0430\u0440": "66", " \u043C\u0430": "67", \u0430\u0433\u044B: "68", \u0430\u043A\u0442: "69", \u0430\u043D\u044B: "70", "\u0433\u044B ": "71", \u0433\u044B\u0437: "72", "\u0434\u044B ": "73", \u0440\u0434\u0430: "74", "\u0430\u0439 ": "75", \u0431\u0438\u0440: "76", \u0431\u043E\u043B: "77", "\u0435\u0440 ": "78", "\u043D \u0441": "79", \u043D\u0434\u044B: "80", "\u0443\u043D ": "81", "\u0447\u0430 ": "82", \u044B\u043D\u0434: "83", "\u0430 \u043A": "84", \u0430\u0433\u0430: "85", \u0430\u0439\u043B: "86", \u0430\u043D\u0430: "87", "\u0430\u043F ": "88", "\u0433\u0430 ": "89", \u043B\u0433\u0435: "90", \u043D\u0447\u0430: "91", "\u043F \u043A": "92", \u0440\u0434\u044B: "93", \u0442\u0443\u0443: "94", \u044B\u043D\u044B: "95", " \u0430\u043D": "96", " \u04E9\u0437": "97", \u0430\u043C\u0430: "98", \u0430\u0442\u0430: "99", \u0434\u0438\u043D: "100", "\u0439\u0442 ": "101", \u043B\u0433\u0430: "102", \u043B\u043E\u043E: "103", "\u043E\u043E ": "104", "\u0440\u0438 ": "105", \u0442\u0438\u043D: "106", "\u044B\u0437 ": "107", "\u044B\u043F ": "108", \u04E9\u0440\u04AF: "109", " \u043F\u0430": "110", " \u044D\u043A": "111", "\u0430 \u0431": "112", \u0430\u043B\u0433: "113", \u0430\u0441\u044B: "114", \u0430\u0448\u0442: "115", \u0431\u0438\u0437: "116", \u043A\u0435\u043B: "117", \u043A\u0442\u0435: "118", \u0442\u0430\u043B: "119", " \u043D\u0435": "120", " \u0441\u0443": "121", \u0430\u043A\u044B: "122", \u0435\u043D\u0442: "123", \u0438\u043D\u0434: "124", "\u0438\u0440 ": "125", \u043A\u0430\u043B: "126", "\u043D \u0434": "127", \u043D\u0434\u0435: "128", \u043E\u0433\u043E: "129", \u043E\u043D\u0434: "130", \u043E\u044E\u043D: "131", "\u0440 \u0431": "132", "\u0440 \u043C": "133", \u0440\u0430\u043D: "134", \u0441\u0430\u043B: "135", \u0441\u0442\u0430: "136", "\u0441\u044B ": "137", \u0443\u0440\u0430: "138", \u044B\u0433\u044B: "139", " \u0430\u0448": "140", " \u043C\u0438": "141", " \u0441\u044B": "142", " \u0442\u0443": "143", "\u0430\u043B ": "144", \u0430\u0440\u0442: "145", \u0431\u043E\u0440: "146", \u0435\u043B\u0433: "147", \u0435\u043D\u0438: "148", "\u0435\u0442 ": "149", \u0436\u0430\u0442: "150", \u0439\u043B\u043E: "151", \u043A\u0430\u0440: "152", "\u043D \u043C": "153", \u043E\u0433\u0443: "154", "\u043F \u0430": "155", "\u043F \u0436": "156", "\u0440 \u044D": "157", \u0441\u044B\u043D: "158", "\u044B\u043A ": "159", \u044E\u043D\u0447: "160", " \u0431\u0443": "161", " \u0443\u0440": "162", "\u0430 \u0430": "163", "\u0430\u043A ": "164", \u0430\u043B\u0434: "165", \u0430\u043B\u0443: "166", \u0431\u0430\u0440: "167", \u0431\u0435\u0440: "168", \u0431\u043E\u044E: "169", "\u0433\u0435 ": "170", \u0434\u043E\u043D: "171", \u0435\u0433\u0438: "172", \u0435\u043A\u0442: "173", \u0435\u0444\u0442: "174", "\u0438\u0437 ": "175", \u043A\u0430\u0442: "176", \u043B\u0434\u044B: "177", "\u043D \u0447": "178", "\u043D \u044D": "179", "\u043D \u04E9": "180", \u043D\u0434\u043E: "181", \u043D\u0435\u0444: "182", "\u043E\u043D ": "183", \u0441\u0430\u0442: "184", \u0442\u043E\u0440: "185", "\u0442\u044B ": "186", \u0443\u0434\u0430: "187", "\u0443\u043B ": "188", \u0443\u043B\u0430: "189", \u0443\u0443\u0434: "190", "\u044B \u0431": "191", "\u044B \u0436": "192", "\u044B \u043A": "193", "\u044B\u043B ": "194", \u044B\u043D\u0430: "195", \u044D\u043A\u0435: "196", \u044F\u0441\u044B: "197", " \u0430\u0442": "198", " \u0434\u043E": "199", " \u0436\u044B": "200", " \u0441\u043E": "201", " \u0447\u044B": "202", \u0430\u0430\u0441: "203", \u0430\u0439\u0442: "204", \u0430\u0441\u0442: "205", \u0431\u0430\u0430: "206", \u0431\u0430\u0448: "207", \u0433\u0430\u0440: "208", \u0433\u044B\u043D: "209", "\u0434\u04E9 ": "210", "\u0435 \u0431": "211", "\u0435\u043A ": "212", \u0436\u044B\u043B: "213", "\u0438 \u0431": "214", "\u0438\u043A ": "215", \u0438\u044F\u0441: "216", \u043A\u044B\u0437: "217", \u043B\u0434\u0430: "218", \u043B\u044B\u043A: "219", \u043C\u0434\u0430: "220", "\u043D \u0436": "221", \u043D\u0434\u0438: "222", "\u043D\u0438 ": "223", \u043D\u0438\u043D: "224", \u043E\u0440\u0434: "225", \u0440\u0434\u043E: "226", \u0441\u0442\u043E: "227", "\u0442\u0430 ": "228", \u0442\u0435\u0440: "229", \u0442\u0442\u0438: "230", \u0442\u0443\u0440: "231", \u0442\u044B\u043D: "232", "\u0443\u043F ": "233", \u0443\u0448\u0443: "234", \u0444\u0442\u0438: "235", \u044B\u043A\u0442: "236", "\u04AF\u043F ": "237", "\u04E9\u043D ": "238", " \u0430\u0439": "239", " \u0431\u04AF": "240", " \u0438\u0447": "241", " \u0438\u0448": "242", " \u043C\u043E": "243", " \u043F\u0440": "244", " \u0440\u0435": "245", " \u04E9\u043A": "246", " \u04E9\u0442": "247", "\u0430 \u0434": "248", "\u0430 \u0443": "249", "\u0430 \u044D": "250", \u0430\u0439\u043C: "251", \u0430\u043C\u0434: "252", \u0430\u0442\u0442: "253", \u0431\u0435\u043A: "254", \u0431\u0443\u043B: "255", \u0433\u043E\u043B: "256", \u0434\u0435\u0433: "257", \u0435\u0433\u0435: "258", \u0435\u0439\u0442: "259", \u0435\u043B\u0435: "260", \u0435\u043D\u0434: "261", \u0436\u0430\u043A: "262", "\u0438 \u043A": "263", \u0438\u043D\u0438: "264", \u0438\u0440\u0438: "265", \u0439\u043C\u0430: "266", \u043A\u0442\u043E: "267", \u043B\u0438\u043A: "268", \u043C\u0430\u043A: "269", \u043C\u0435\u0441: "270", "\u043D \u0443": "271", "\u043D \u0448": "272", \u043D\u0442\u0442: "273", "\u043E\u043B ": "274", \u043E\u043B\u043E: "275", \u043F\u0430\u0440: "276", \u0440\u0430\u043A: "277", \u0440\u04AF\u04AF: "278", \u0441\u044B\u0440: "279", "\u0442\u0438 ": "280", \u0442\u0438\u043A: "281", \u0442\u0442\u0430: "282", \u0442\u04E9\u0440: "283", "\u0443 \u0436": "284", "\u0443 \u0441": "285", \u0448\u043A\u0430: "286", "\u044B \u043C": "287", \u044B\u0437\u044B: "288", \u044B\u043B\u0434: "289", \u044D\u043C\u0435: "290", \u04AF\u0440\u04AF: "291", \u04E9\u043B\u04AF: "292", \u04E9\u0442\u04E9: "293", " \u0436\u0435": "294", " \u0442\u04AF": "295", " \u044D\u043B": "296", " \u04E9\u043D": "297", "\u0430 \u0436": "298", \u0430\u0434\u044B: "299" }, latin: { "um ": "0", "us ": "1", "ut ": "2", "et ": "3", "is ": "4", " et": "5", " in": "6", " qu": "7", tur: "8", " pr": "9", est: "10", tio: "11", " au": "12", "am ": "13", "em ": "14", aut: "15", " di": "16", ent: "17", "in ": "18", dic: "19", "t e": "20", " es": "21", "ur ": "22", ati: "23", ion: "24", "st ": "25", " ut": "26", "ae ": "27", qua: "28", " de": "29", "nt ": "30", " su": "31", " si": "32", itu: "33", unt: "34", rum: "35", "ia ": "36", "es ": "37", ter: "38", " re": "39", nti: "40", rae: "41", "s e": "42", qui: "43", "io ": "44", pro: "45", "it ": "46", per: "47", ita: "48", one: "49", ici: "50", ius: "51", " co": "52", "t d": "53", bus: "54", pra: "55", "m e": "56", " no": "57", edi: "58", tia: "59", "ue ": "60", ibu: "61", " se": "62", " ad": "63", "er ": "64", " fi": "65", ili: "66", que: "67", "t i": "68", "de ": "69", oru: "70", " te": "71", ali: "72", " pe": "73", aed: "74", cit: "75", "m d": "76", "t s": "77", tat: "78", tem: "79", tis: "80", "t p": "81", sti: "82", "te ": "83", cum: "84", ere: "85", ium: "86", " ex": "87", rat: "88", "ta ": "89", con: "90", cti: "91", oni: "92", "ra ": "93", "s i": "94", " cu": "95", " sa": "96", eni: "97", nis: "98", nte: "99", eri: "100", omi: "101", "re ": "102", "s a": "103", min: "104", "os ": "105", "ti ": "106", uer: "107", " ma": "108", " ue": "109", "m s": "110", nem: "111", "t m": "112", " mo": "113", " po": "114", " ui": "115", gen: "116", ict: "117", "m i": "118", ris: "119", "s s": "120", "t a": "121", uae: "122", " do": "123", "m a": "124", "t c": "125", " ge": "126", "as ": "127", "e i": "128", "e p": "129", "ne ": "130", " ca": "131", ine: "132", quo: "133", "s p": "134", " al": "135", "e e": "136", ntu: "137", "ro ": "138", tri: "139", tus: "140", uit: "141", atu: "142", ini: "143", iqu: "144", "m p": "145", ost: "146", res: "147", ura: "148", " ac": "149", " fu": "150", "a e": "151", ant: "152", nes: "153", nim: "154", sun: "155", tra: "156", "e a": "157", "s d": "158", " pa": "159", " uo": "160", ecu: "161", " om": "162", " tu": "163", "ad ": "164", cut: "165", omn: "166", "s q": "167", " ei": "168", "ex ": "169", icu: "170", tor: "171", uid: "172", " ip": "173", " me": "174", "e s": "175", era: "176", eru: "177", iam: "178", ide: "179", ips: "180", " iu": "181", "a s": "182", "do ": "183", "e d": "184", eiu: "185", ica: "186", "im ": "187", "m c": "188", "m u": "189", tiu: "190", " ho": "191", cat: "192", ist: "193", nat: "194", "on ": "195", pti: "196", reg: "197", rit: "198", "s t": "199", sic: "200", spe: "201", " en": "202", " sp": "203", dis: "204", eli: "205", liq: "206", lis: "207", men: "208", mus: "209", num: "210", pos: "211", sio: "212", " an": "213", " gr": "214", abi: "215", acc: "216", ect: "217", "ri ": "218", uan: "219", " le": "220", ecc: "221", ete: "222", gra: "223", non: "224", "se ": "225", uen: "226", uis: "227", " fa": "228", " tr": "229", ate: "230", "e c": "231", fil: "232", "na ": "233", "ni ": "234", pul: "235", "s f": "236", "ui ": "237", "at ": "238", cce: "239", dam: "240", "i e": "241", ina: "242", leg: "243", nos: "244", ori: "245", pec: "246", rop: "247", sta: "248", uia: "249", ene: "250", iue: "251", iui: "252", siu: "253", "t t": "254", "t u": "255", tib: "256", tit: "257", " da": "258", " ne": "259", "a d": "260", and: "261", ege: "262", equ: "263", hom: "264", imu: "265", lor: "266", "m m": "267", mni: "268", ndo: "269", ner: "270", "o e": "271", "r e": "272", sit: "273", tum: "274", utu: "275", "a p": "276", bis: "277", bit: "278", cer: "279", cta: "280", dom: "281", fut: "282", "i s": "283", ign: "284", int: "285", mod: "286", ndu: "287", nit: "288", rib: "289", rti: "290", tas: "291", und: "292", " ab": "293", err: "294", ers: "295", ite: "296", iti: "297", "m t": "298", "o p": "299" }, latvian: { "as ": "0", " la": "1", " pa": "2", " ne": "3", "es ": "4", " un": "5", "un ": "6", " ka": "7", " va": "8", "ar ": "9", "s p": "10", " ar": "11", " vi": "12", "is ": "13", "ai ": "14", " no": "15", "ja ": "16", ija: "17", iem: "18", "em ": "19", "tu ": "20", tie: "21", vie: "22", lat: "23", aks: "24", ien: "25", kst: "26", ies: "27", "s a": "28", rak: "29", atv: "30", tvi: "31", " ja": "32", " pi": "33", "ka ": "34", " ir": "35", "ir ": "36", "ta ": "37", " sa": "38", "ts ": "39", " k\u0101": "40", "\u0101s ": "41", " ti": "42", "ot ": "43", "s n": "44", " ie": "45", " ta": "46", ar\u012B: "47", par: "48", pie: "49", " pr": "50", "k\u0101 ": "51", " at": "52", " ra": "53", "am ": "54", in\u0101: "55", "t\u0101 ": "56", " iz": "57", jas: "58", lai: "59", " na": "60", aut: "61", ie\u0161: "62", "s s": "63", " ap": "64", " ko": "65", " st": "66", iek: "67", iet: "68", jau: "69", "us ": "70", "r\u012B ": "71", tik: "72", \u012Bba: "73", "na ": "74", " ga": "75", cij: "76", "s i": "77", " uz": "78", jum: "79", "s v": "80", "ms ": "81", var: "82", " ku": "83", " ma": "84", "j\u0101 ": "85", sta: "86", "s u": "87", " t\u0101": "88", die: "89", kai: "90", kas: "91", ska: "92", " ci": "93", " da": "94", kur: "95", lie: "96", tas: "97", "a p": "98", est: "99", st\u0101: "100", \u0161an: "101", nes: "102", nie: "103", "s d": "104", "s m": "105", val: "106", " di": "107", " es": "108", " re": "109", "no ": "110", "to ": "111", umu: "112", vai: "113", "\u0161i ": "114", " v\u0113": "115", kum: "116", "nu ": "117", rie: "118", "s t": "119", "\u0101m ": "120", "ad ": "121", "et ": "122", "mu ": "123", "s l": "124", " be": "125", aud: "126", tur: "127", vij: "128", vi\u0146: "129", \u0101ju: "130", bas: "131", gad: "132", "i n": "133", ika: "134", "os ": "135", "a v": "136", not: "137", oti: "138", sts: "139", aik: "140", "u a": "141", "\u0101 a": "142", "\u0101k ": "143", " to": "144", ied: "145", stu: "146", "ti ": "147", "u p": "148", v\u0113l: "149", \u0101ci: "150", " \u0161o": "151", "gi ": "152", "ko ": "153", pro: "154", "s r": "155", t\u0101j: "156", "u s": "157", "u v": "158", vis: "159", aun: "160", "ks ": "161", str: "162", zin: "163", "a a": "164", ad\u012B: "165", "da ": "166", dar: "167", ena: "168", ici: "169", kra: "170", nas: "171", st\u012B: "172", "\u0161u ": "173", " m\u0113": "174", "a n": "175", eci: "176", "i s": "177", "ie ": "178", i\u0146a: "179", "ju ": "180", las: "181", "r t": "182", ums: "183", \u0161ie: "184", "bu ": "185", cit: "186", "i a": "187", ina: "188", "ma ": "189", pus: "190", "ra ": "191", " au": "192", " se": "193", " sl": "194", "a s": "195", ais: "196", e\u0161i: "197", iec: "198", iku: "199", p\u0101r: "200", "s b": "201", "s k": "202", sot: "203", \u0101d\u0101: "204", " in": "205", " li": "206", " tr": "207", ana: "208", eso: "209", ikr: "210", man: "211", "ne ": "212", "u k": "213", " tu": "214", "an ": "215", "av ": "216", bet: "217", b\u016Bt: "218", "im ": "219", isk: "220", l\u012Bd: "221", nav: "222", ras: "223", "ri ": "224", "s g": "225", sti: "226", \u012Bdz: "227", " ai": "228", arb: "229", cin: "230", das: "231", ent: "232", gal: "233", "i p": "234", lik: "235", "m\u0101 ": "236", nek: "237", pat: "238", r\u0113t: "239", "si ": "240", tra: "241", u\u0161i: "242", vei: "243", " br": "244", " pu": "245", " sk": "246", als: "247", ama: "248", edz: "249", eka: "250", e\u0161u: "251", ieg: "252", jis: "253", kam: "254", lst: "255", n\u0101k: "256", oli: "257", pre: "258", p\u0113c: "259", rot: "260", t\u0101s: "261", usi: "262", "\u0113l ": "263", "\u0113s ": "264", " bi": "265", " de": "266", " me": "267", " p\u0101": "268", "a i": "269", aid: "270", aj\u0101: "271", ikt: "272", kat: "273", lic: "274", lod: "275", "mi ": "276", "ni ": "277", pri: "278", r\u0101d: "279", r\u012Bg: "280", sim: "281", tr\u0101: "282", "u l": "283", uto: "284", "uz ": "285", "\u0113c ": "286", \u012Bt\u0101: "287", " ce": "288", " j\u0101": "289", " sv": "290", "a t": "291", aga: "292", aiz: "293", atu: "294", "ba ": "295", cie: "296", "du ": "297", dzi: "298", dz\u012B: "299" }, lithuanian: { "as ": "0", " pa": "1", " ka": "2", "ai ": "3", "us ": "4", "os ": "5", "is ": "6", " ne": "7", " ir": "8", "ir ": "9", "ti ": "10", " pr": "11", aus: "12", ini: "13", "s p": "14", pas: "15", "i\u0173 ": "16", " ta": "17", " vi": "18", iau: "19", " ko": "20", " su": "21", kai: "22", "o p": "23", usi: "24", " sa": "25", "vo ": "26", tai: "27", ali: "28", "t\u0173 ": "29", "io ": "30", "jo ": "31", "s k": "32", sta: "33", iai: "34", " bu": "35", " nu": "36", ius: "37", "mo ": "38", " po": "39", ien: "40", "s s": "41", tas: "42", " me": "43", uvo: "44", kad: "45", " i\u0161": "46", " la": "47", "to ": "48", ais: "49", "ie ": "50", kur: "51", uri: "52", " ku": "53", ijo: "54", \u010Dia: "55", "au ": "56", met: "57", "je ": "58", " va": "59", "ad ": "60", " ap": "61", and: "62", " gr": "63", " ti": "64", kal: "65", asi: "66", "i p": "67", i\u010Di: "68", "s i": "69", "s v": "70", ink: "71", "o n": "72", "\u0117s ": "73", buv: "74", "s a": "75", " ga": "76", aip: "77", avi: "78", mas: "79", pri: "80", tik: "81", " re": "82", etu: "83", jos: "84", " da": "85", ent: "86", oli: "87", par: "88", ant: "89", ara: "90", tar: "91", ama: "92", gal: "93", imo: "94", i\u0161k: "95", "o s": "96", " at": "97", " be": "98", " \u012F ": "99", min: "100", tin: "101", " tu": "102", "s n": "103", " jo": "104", dar: "105", "ip ": "106", rei: "107", " te": "108", d\u017Ei: "109", kas: "110", nin: "111", tei: "112", vie: "113", " li": "114", " se": "115", cij: "116", gar: "117", lai: "118", art: "119", lau: "120", ras: "121", "no ": "122", "o k": "123", "t\u0105 ": "124", " ar": "125", \u0117jo: "126", vi\u010D: "127", iga: "128", pra: "129", vis: "130", " na": "131", men: "132", oki: "133", ra\u0161: "134", "s t": "135", iet: "136", ika: "137", int: "138", kom: "139", tam: "140", aug: "141", avo: "142", rie: "143", "s b": "144", " st": "145", eim: "146", "ko ": "147", nus: "148", pol: "149", ria: "150", sau: "151", api: "152", "me ": "153", "ne ": "154", sik: "155", " \u0161i": "156", "i n": "157", "ia ": "158", ici: "159", oja: "160", sak: "161", sti: "162", "ui ": "163", ame: "164", lie: "165", "o t": "166", pie: "167", \u010Diu: "168", " di": "169", " pe": "170", gri: "171", ios: "172", lia: "173", lin: "174", "s d": "175", "s g": "176", "ta ": "177", uot: "178", " ja": "179", " u\u017E": "180", aut: "181", "i s": "182", ino: "183", "m\u0105 ": "184", oje: "185", rav: "186", d\u0117l: "187", nti: "188", "o a": "189", toj: "190", "\u0117l ": "191", " to": "192", " vy": "193", "ar ": "194", ina: "195", lic: "196", "o v": "197", sei: "198", "su ": "199", " mi": "200", " pi": "201", din: "202", "i\u0161 ": "203", lan: "204", "si ": "205", tus: "206", " ba": "207", asa: "208", ata: "209", kla: "210", omi: "211", tat: "212", " an": "213", " ji": "214", als: "215", ena: "216", "j\u0173 ": "217", nuo: "218", per: "219", rig: "220", "s m": "221", val: "222", yta: "223", \u010Dio: "224", " ra": "225", "i k": "226", lik: "227", net: "228", "n\u0117 ": "229", tis: "230", tuo: "231", yti: "232", "\u0119s ": "233", "\u0173 s": "234", ada: "235", ari: "236", "do ": "237", eik: "238", eis: "239", ist: "240", lst: "241", "ma ": "242", nes: "243", sav: "244", sio: "245", tau: "246", " ki": "247", aik: "248", aud: "249", ies: "250", ori: "251", "s r": "252", ska: "253", " ge": "254", ast: "255", eig: "256", "et ": "257", iam: "258", isa: "259", mis: "260", nam: "261", ome: "262", \u017Eia: "263", aba: "264", aul: "265", ikr: "266", "k\u0105 ": "267", nta: "268", "ra ": "269", tur: "270", " ma": "271", die: "272", "ei ": "273", "i t": "274", nas: "275", rin: "276", sto: "277", tie: "278", tuv: "279", vos: "280", "\u0173 p": "281", " d\u0117": "282", are: "283", ats: "284", en\u0117: "285", ili: "286", ima: "287", kar: "288", "ms ": "289", nia: "290", "r p": "291", rod: "292", "s l": "293", " o ": "294", "e p": "295", "es ": "296", ide: "297", "ik ": "298", "ja ": "299" }, macedonian: { "\u043D\u0430 ": "0", " \u043D\u0430": "1", "\u0442\u0430 ": "2", \u0430\u0442\u0430: "3", \u0438\u0458\u0430: "4", " \u043F\u0440": "5", "\u0442\u043E ": "6", "\u0458\u0430 ": "7", " \u0437\u0430": "8", "\u0430 \u043D": "9", " \u0438 ": "10", "\u0430 \u0441": "11", "\u0442\u0435 ": "12", \u0438\u0442\u0435: "13", " \u043A\u043E": "14", "\u043E\u0442 ": "15", " \u0434\u0435": "16", " \u043F\u043E": "17", "\u0430 \u0434": "18", "\u0432\u043E ": "19", "\u0437\u0430 ": "20", " \u0432\u043E": "21", " \u043E\u0434": "22", " \u0441\u0435": "23", " \u043D\u0435": "24", "\u0441\u0435 ": "25", " \u0434\u043E": "26", "\u0430 \u0432": "27", "\u043A\u0430 ": "28", \u0430\u045A\u0435: "29", "\u0430 \u043F": "30", "\u043E \u043F": "31", \u0443\u0432\u0430: "32", \u0446\u0438\u0458: "33", "\u0430 \u043E": "34", \u0438\u0446\u0438: "35", \u0435\u0442\u043E: "36", "\u043E \u043D": "37", \u0430\u043D\u0438: "38", "\u043D\u0438 ": "39", " \u0432\u043B": "40", \u0434\u0435\u043A: "41", \u0435\u043A\u0430: "42", \u045A\u0435\u0442: "43", "\u045C\u0435 ": "44", " \u0435 ": "45", "\u0430 \u0437": "46", "\u0430 \u0438": "47", "\u0430\u0442 ": "48", \u0432\u043B\u0430: "49", "\u0433\u043E ": "50", "\u0435 \u043D": "51", "\u043E\u0434 ": "52", \u043F\u0440\u0435: "53", " \u0433\u043E": "54", " \u0434\u0430": "55", " \u043C\u0430": "56", " \u0440\u0435": "57", " \u045C\u0435": "58", \u0430\u043B\u0438: "59", "\u0438 \u0434": "60", "\u0438 \u043D": "61", \u0438\u043E\u0442: "62", \u043D\u0430\u0442: "63", \u043E\u0432\u043E: "64", " \u043F\u0430": "65", " \u0440\u0430": "66", " \u0441\u043E": "67", \u043E\u0432\u0435: "68", \u043F\u0440\u0430: "69", \u0448\u0442\u043E: "70", "\u045A\u0435 ": "71", "\u0430 \u0435": "72", "\u0434\u0430 ": "73", \u0434\u0430\u0442: "74", \u0434\u043E\u043D: "75", "\u0435 \u0432": "76", "\u0435 \u0434": "77", "\u0435 \u0437": "78", "\u0435 \u0441": "79", \u043A\u043E\u043D: "80", \u043D\u0438\u0442: "81", "\u043D\u043E ": "82", \u043E\u043D\u0438: "83", \u043E\u0442\u043E: "84", \u043F\u0430\u0440: "85", \u043F\u0440\u0438: "86", \u0441\u0442\u0430: "87", "\u0442 \u043D": "88", " \u0448\u0442": "89", "\u0430 \u043A": "90", \u0430\u0446\u0438: "91", "\u0432\u0430 ": "92", \u0432\u0430\u045A: "93", "\u0435 \u043F": "94", \u0435\u043D\u0438: "95", "\u043B\u0430 ": "96", \u043B\u0430\u0434: "97", \u043C\u0430\u043A: "98", \u043D\u0435\u0441: "99", \u043D\u043E\u0441: "100", \u043F\u0440\u043E: "101", \u0440\u0435\u043D: "102", \u0458\u0430\u0442: "103", " \u0438\u043D": "104", " \u043C\u0435": "105", " \u0442\u043E": "106", "\u0430 \u0433": "107", "\u0430 \u043C": "108", "\u0430 \u0440": "109", \u0430\u043A\u0435: "110", \u0430\u043A\u043E: "111", \u0432\u043E\u0440: "112", \u0433\u043E\u0432: "113", \u0435\u0434\u043E: "114", \u0435\u043D\u0430: "115", "\u0438 \u0438": "116", \u0438\u0440\u0430: "117", \u043A\u0435\u0434: "118", "\u043D\u0435 ": "119", \u043D\u0438\u0446: "120", \u043D\u0438\u0458: "121", \u043E\u0441\u0442: "122", "\u0440\u0430 ": "123", \u0440\u0430\u0442: "124", \u0440\u0435\u0434: "125", \u0441\u043A\u0430: "126", \u0442\u0435\u043D: "127", " \u043A\u0430": "128", " \u0441\u043F": "129", " \u0458\u0430": "130", "\u0430 \u0442": "131", \u0430\u0434\u0435: "132", \u0430\u0440\u0442: "133", "\u0435 \u0433": "134", "\u0435 \u0438": "135", \u043A\u0430\u0442: "136", \u043B\u0430\u0441: "137", \u043D\u0438\u043E: "138", "\u043E \u0441": "139", "\u0440\u0438 ": "140", " \u0431\u0430": "141", " \u0431\u0438": "142", \u0430\u0432\u0430: "143", \u0430\u0442\u0435: "144", \u0432\u043D\u0438: "145", "\u0434 \u043D": "146", \u0434\u0435\u043D: "147", \u0434\u043E\u0432: "148", \u0434\u0440\u0436: "149", \u0434\u0443\u0432: "150", "\u0435 \u043E": "151", "\u0435\u043D ": "152", \u0435\u0440\u0435: "153", \u0435\u0440\u0438: "154", "\u0438 \u043F": "155", "\u0438 \u0441": "156", \u0438\u043D\u0430: "157", \u043A\u043E\u0458: "158", \u043D\u0446\u0438: "159", "\u043E \u043C": "160", "\u043E \u043E": "161", \u043E\u0434\u043D: "162", \u043F\u043E\u0440: "163", \u0441\u043A\u0438: "164", \u0441\u043F\u043E: "165", \u0441\u0442\u0432: "166", \u0441\u0442\u0438: "167", \u0442\u0432\u043E: "168", "\u0442\u0438 ": "169", " \u043E\u0431": "170", " \u043E\u0432": "171", "\u0430 \u0431": "172", \u0430\u043B\u043D: "173", \u0430\u0440\u0430: "174", \u0431\u0430\u0440: "175", "\u0435 \u043A": "176", "\u0435\u0434 ": "177", \u0435\u043D\u0442: "178", \u0435\u0453\u0443: "179", "\u0438 \u043E": "180", "\u0438\u0438 ": "181", \u043C\u0435\u0453: "182", "\u043E \u0434": "183", \u043E\u0458\u0430: "184", \u043F\u043E\u0442: "185", \u0440\u0430\u0437: "186", \u0440\u0430\u0448: "187", \u0441\u043F\u0440: "188", \u0441\u0442\u043E: "189", "\u0442 \u0434": "190", "\u0446\u0438 ": "191", " \u0431\u0435": "192", " \u0433\u0440": "193", " \u0434\u0440": "194", " \u0438\u0437": "195", " \u0441\u0442": "196", "\u0430\u0430 ": "197", \u0431\u0438\u0434: "198", \u0432\u0435\u0434: "199", \u0433\u043B\u0430: "200", \u0435\u043A\u043E: "201", \u0435\u043D\u0434: "202", \u0435\u0441\u0435: "203", \u0435\u0442\u0441: "204", \u0437\u0430\u0446: "205", "\u0438 \u0442": "206", \u0438\u0437\u0430: "207", \u0438\u043D\u0441: "208", \u0438\u0441\u0442: "209", "\u043A\u0438 ": "210", \u043A\u043E\u0432: "211", \u043A\u043E\u043B: "212", "\u043A\u0443 ": "213", \u043B\u0438\u0446: "214", "\u043E \u0437": "215", "\u043E \u0438": "216", \u043E\u0432\u0430: "217", \u043E\u043B\u043A: "218", \u043E\u0440\u0435: "219", \u043E\u0440\u0438: "220", \u043F\u043E\u0434: "221", \u0440\u0430\u045A: "222", \u0440\u0435\u0444: "223", \u0440\u0436\u0430: "224", \u0440\u043E\u0432: "225", \u0440\u0442\u0438: "226", "\u0441\u043E ": "227", \u0442\u043E\u0440: "228", \u0444\u0435\u0440: "229", \u0446\u0435\u043D: "230", \u0446\u0438\u0442: "231", " \u0430 ": "232", " \u0432\u0440": "233", " \u0433\u043B": "234", " \u0434\u043F": "235", " \u043C\u043E": "236", " \u043D\u0438": "237", " \u043D\u043E": "238", " \u043E\u043F": "239", " \u043E\u0442": "240", "\u0430 \u045C": "241", \u0430\u0431\u043E: "242", \u0430\u0434\u0430: "243", \u0430\u0441\u0430: "244", \u0430\u0448\u0430: "245", "\u0431\u0430 ": "246", \u0431\u043E\u0442: "247", \u0432\u0430\u0430: "248", \u0432\u0430\u0442: "249", \u0432\u043E\u0442: "250", "\u0433\u0438 ": "251", \u0433\u0440\u0430: "252", "\u0434\u0435 ": "253", \u0434\u0438\u043D: "254", \u0434\u0443\u043C: "255", \u0435\u0432\u0440: "256", \u0435\u0434\u0443: "257", \u0435\u043D\u043E: "258", \u0435\u0440\u0430: "259", "\u0435\u0441 ": "260", \u0435\u045A\u0435: "261", "\u0436\u0435 ": "262", \u0437\u0430\u043A: "263", "\u0438 \u0432": "264", \u0438\u043B\u0430: "265", \u0438\u0442\u0443: "266", \u043A\u043E\u0430: "267", \u043A\u043E\u0438: "268", \u043B\u0430\u043D: "269", \u043B\u043A\u0443: "270", \u043B\u043E\u0436: "271", \u043C\u043E\u0442: "272", \u043D\u0434\u0443: "273", \u043D\u0441\u0442: "274", "\u043E \u0432": "275", "\u043E\u0430 ": "276", \u043E\u0430\u043B: "277", \u043E\u0431\u0440: "278", "\u043E\u0432 ": "279", \u043E\u0432\u0438: "280", \u043E\u0432\u043D: "281", "\u043E\u0438 ": "282", "\u043E\u0440 ": "283", \u043E\u0440\u043C: "284", "\u043E\u0458 ": "285", \u0440\u0435\u0442: "286", \u0441\u0435\u0434: "287", "\u0441\u0442 ": "288", \u0442\u0435\u0440: "289", \u0442\u0438\u0458: "290", \u0442\u043E\u0430: "291", \u0444\u043E\u0440: "292", \u0446\u0438\u0438: "293", "\u0453\u0443 ": "294", " \u0430\u043B": "295", " \u0432\u0435": "296", " \u0432\u043C": "297", " \u0433\u0438": "298", " \u0434\u0443": "299" }, mongolian: { "\u044B\u043D ": "0", " \u0431\u0430": "1", "\u0439\u043D ": "2", \u0431\u0430\u0439: "3", \u0438\u0439\u043D: "4", \u0443\u0443\u043B: "5", " \u0443\u043B": "6", \u0443\u043B\u0441: "7", "\u0430\u043D ": "8", " \u0445\u0430": "9", \u043D\u0438\u0439: "10", "\u043D \u0445": "11", \u0433\u0430\u0430: "12", \u0441\u044B\u043D: "13", "\u0438\u0439 ": "14", \u043B\u0441\u044B: "15", " \u0431\u043E": "16", "\u0439 \u0431": "17", "\u044D\u043D ": "18", "\u0430\u0445 ": "19", \u0431\u043E\u043B: "20", "\u043E\u043B ": "21", "\u043D \u0431": "22", \u043E\u043B\u043E: "23", " \u0445\u044D": "24", \u043E\u043D\u0433: "25", \u0433\u043E\u043B: "26", \u0433\u0443\u0443: "27", \u043D\u0433\u043E: "28", "\u044B\u0433 ": "29", \u0436\u0438\u043B: "30", " \u043C\u043E": "31", \u043B\u0430\u0433: "32", \u043B\u043B\u0430: "33", \u043C\u043E\u043D: "34", " \u0442\u0454": "35", " \u0445\u0443": "36", \u0430\u0439\u0434: "37", "\u043D\u044B ": "38", "\u043E\u043D ": "39", \u0441\u0430\u043D: "40", \u0445\u0438\u0439: "41", " \u0430\u0436": "42", " \u043E\u0440": "43", "\u043B \u0443": "44", "\u043D \u0442": "45", \u0443\u043B\u0433: "46", \u0430\u0439\u0433: "47", \u0434\u043B\u044B: "48", "\u0439\u0433 ": "49", " \u0437\u0430": "50", \u0434\u044D\u0441: "51", "\u043D \u0430": "52", \u043D\u0434\u044D: "53", \u0443\u043B\u0430: "54", "\u044D\u044D ": "55", \u0430\u0433\u0430: "56", \u0438\u0439\u0433: "57", "v\u0439 ": "58", "\u0430\u0430 ": "59", "\u0439 \u0430": "60", \u043B\u044B\u043D: "61", "\u043D \u0437": "62", " \u0430\u044E": "63", " \u0437\u0454": "64", \u0430\u0430\u0440: "65", "\u0430\u0434 ": "66", "\u0430\u0440 ": "67", \u0433v\u0439: "68", \u0437\u0454\u0432: "69", \u0430\u0436\u0438: "70", "\u0430\u043B ": "71", \u0430\u044E\u0443: "72", "\u0433 \u0445": "73", \u043B\u0433v: "74", "\u043B\u0436 ": "75", \u0441\u043D\u0438: "76", \u044D\u0441\u043D: "77", \u044E\u0443\u043B: "78", \u0439\u0434\u043B: "79", \u043B\u044B\u0433: "80", \u043D\u0445\u0438: "81", \u0443\u0443\u0434: "82", \u0445\u0430\u043C: "83", " \u043D\u044D": "84", " \u0441\u0430": "85", \u0433\u0438\u0439: "86", \u043B\u0430\u0445: "87", \u043B\u0454\u043B: "88", \u0440\u0454\u043D: "89", \u0454\u0433\u0447: "90", " \u0442\u0430": "91", \u0438\u043B\u043B: "92", \u043B\u0438\u0439: "93", \u043B\u044D\u0445: "94", \u0440\u0438\u0439: "95", "\u044D\u0445 ": "96", " \u0435\u0440": "97", " \u044D\u0440": "98", \u0432\u043B\u0454: "99", \u0435\u0440\u0454: "100", \u0438\u0439\u043B: "101", \u043B\u043E\u043D: "102", \u043B\u0454\u0433: "103", \u0454\u0432\u043B: "104", \u0454\u043D\u0445: "105", " \u0445\u043E": "106", \u0430\u0440\u0438: "107", "\u0438\u0445 ": "108", \u0445\u0430\u043D: "109", "\u044D\u0440 ": "110", "\u0454\u043D ": "111", vv\u043B: "112", "\u0436 \u0431": "113", \u0442\u044D\u0439: "114", "\u0445 \u0445": "115", \u044D\u0440\u0445: "116", " v\u043D": "117", " \u043D\u044C": "118", v\u043D\u0434: "119", \u0430\u043B\u0442: "120", \u0439\u043B\u0454: "121", "\u043D\u044C ": "122", \u0442\u0454\u0440: "123", " \u0433\u0430": "124", " \u0441\u0443": "125", \u0430\u0430\u043D: "126", \u0434\u0430\u0430: "127", \u0438\u043B\u0446: "128", \u0439\u0433\u0443: "129", "\u043B \u0430": "130", \u043B\u0430\u0430: "131", "\u043D \u043D": "132", \u0440\u0443\u0443: "133", "\u044D\u0439 ": "134", " \u0442\u043E": "135", "\u043D \u0441": "136", \u0440\u0438\u043B: "137", \u0454\u0440\u0438: "138", \u0430\u0430\u0433: "139", "\u0433\u0447 ": "140", \u043B\u044D\u044D: "141", "\u043D \u043E": "142", \u0440\u044D\u0433: "143", \u0441\u0443\u0443: "144", \u044D\u0440\u044D: "145", \u0457\u0457\u043B: "146", " y\u043D": "147", " \u0431\u0443": "148", " \u0434\u044D": "149", " \u043E\u043B": "150", " \u0442\u0443": "151", " \u0448\u0438": "152", y\u043D\u0434: "153", \u0430\u0448\u0438: "154", "\u0433 \u0442": "155", "\u0438\u0433 ": "156", "\u0439\u043B ": "157", \u0445\u0430\u0440: "158", \u0448\u0438\u043D: "159", "\u044D\u0433 ": "160", "\u0454\u0440 ": "161", " \u0438\u0445": "162", " \u0445\u0454": "163", " \u0445\u0457": "164", "\u0430\u043C ": "165", \u0430\u043D\u0433: "166", "\u0438\u043D ": "167", \u0439\u0433\u0430: "168", \u043B\u0441\u0430: "169", "\u043D v": "170", "\u043D \u0435": "171", \u043D\u0430\u043B: "172", "\u043D\u0434 ": "173", \u0445\u0443\u0443: "174", \u0446\u0430\u0430: "175", "\u044D\u0434 ": "176", \u044D\u044D\u0440: "177", "\u0454\u043B ": "178", v\u0439\u043B: "179", \u0430\u0434\u0430: "180", \u0430\u0439\u043D: "181", \u0430\u043B\u0430: "182", \u0430\u043C\u0442: "183", \u0433\u0430\u0445: "184", "\u0434 \u0445": "185", \u0434\u0430\u043B: "186", \u0437\u0430\u0440: "187", "\u043B \u0431": "188", \u043B\u0430\u043D: "189", "\u043D \u0434": "190", \u0441\u044D\u043D: "191", \u0443\u043B\u043B: "192", "\u0445 \u0431": "193", \u0445\u044D\u0440: "194", " \u0431v": "195", " \u0434\u0430": "196", " \u0437\u043E": "197", v\u0440\u044D: "198", \u0430\u0430\u0434: "199", \u0433\u044D\u044D: "200", \u043B\u044D\u043D: "201", "\u043D \u0438": "202", "\u043D \u044D": "203", \u043D\u0433\u0430: "204", "\u043D\u044D ": "205", \u0442\u0430\u043B: "206", \u0442\u044B\u043D: "207", \u0445\u0443\u0440: "208", "\u044D\u043B ": "209", " \u043D\u0430": "210", " \u043D\u0438": "211", " \u043E\u043D": "212", v\u043B\u044D: "213", "\u0430\u0433 ": "214", "\u0430\u0436 ": "215", "\u0430\u0439 ": "216", \u0430\u0442\u0430: "217", \u0431\u0430\u0440: "218", "\u0433 \u0431": "219", \u0433\u0430\u0434: "220", \u0433\u0457\u0439: "221", "\u0439 \u0445": "222", "\u043B\u0442 ": "223", "\u043D \u043C": "224", "\u043D\u0430 ": "225", \u043E\u0440\u043E: "226", \u0443\u043B\u044C: "227", \u0447\u0438\u043D: "228", "\u044D\u0436 ": "229", \u044D\u043D\u044D: "230", \u044D\u044D\u0434: "231", "\u0457\u0439 ": "232", \u0457\u043B\u044D: "233", " \u0431\u0438": "234", " \u0442\u044D": "235", " \u044D\u043D": "236", \u0430\u043D\u044B: "237", \u0434\u0438\u0439: "238", \u0434\u044D\u044D: "239", \u043B\u0430\u043B: "240", \u043B\u0433\u0430: "241", "\u043B\u0434 ": "242", \u043B\u043E\u0433: "243", "\u043B\u044C ": "244", "\u043D \u0443": "245", "\u043D \u0457": "246", "\u0440 \u0431": "247", \u0440\u0430\u043B: "248", \u0441\u043E\u043D: "249", \u0442\u0430\u0439: "250", \u0443\u0434\u043B: "251", \u044D\u043B\u0442: "252", \u044D\u0440\u0433: "253", \u0454\u043B\u0454: "254", " v\u0439": "255", " \u0432 ": "256", " \u0433\u044D": "257", " \u0445v": "258", \u0430\u0440\u0430: "259", \u0431v\u0440: "260", "\u0434 \u043D": "261", "\u0434 \u043E": "262", "\u043B \u0445": "263", "\u043B\u0441 ": "264", \u043B\u0442\u044B: "265", "\u043D \u0433": "266", \u043D\u044D\u0433: "267", \u043E\u0433\u0442: "268", \u043E\u043B\u044B: "269", \u043E\u0451\u0440: "270", "\u0440 \u0442": "271", \u0440\u044D\u044D: "272", \u0442\u0430\u0432: "273", \u0442\u043E\u0433: "274", \u0443\u0443\u0440: "275", \u0445\u043E\u0451: "276", \u0445\u044D\u043B: "277", \u0445\u044D\u044D: "278", \u044D\u043B\u044D: "279", "\u0451\u0440 ": "280", " \u0430\u0432": "281", " \u0430\u0441": "282", " \u0430\u0448": "283", " \u0434\u0443": "284", " \u0441\u043E": "285", " \u0447\u0438": "286", " \u044D\u0432": "287", " \u0454\u0440": "288", \u0430\u0430\u043B: "289", \u0430\u043B\u0434: "290", \u0430\u043C\u0436: "291", \u0430\u043D\u0434: "292", \u0430\u0441\u0443: "293", \u0432\u044D\u0440: "294", "\u0433 \u0443": "295", \u0434\u0432\u044D: "296", \u0436vv: "297", \u043B\u0446\u0430: "298", \u043B\u044D\u043B: "299" }, nepali: { "\u0915\u094B ": "0", "\u0915\u093E ": "1", "\u092E\u093E ": "2", \u0939\u0930\u0941: "3", " \u0928\u0947": "4", \u0928\u0947\u092A: "5", \u092A\u093E\u0932: "6", "\u0947\u092A\u093E": "7", " \u0938\u092E": "8", "\u0932\u0947 ": "9", " \u092A\u094D": "10", \u092A\u094D\u0930: "11", \u0915\u093E\u0930: "12", "\u093E \u0938": "13", \u090F\u0915\u094B: "14", " \u092D\u090F": "15", " \u091B ": "16", " \u092D\u093E": "17", "\u094D\u0930\u092E": "18", " \u0917\u0930": "19", \u0930\u0941\u0915: "20", " \u0930 ": "21", \u092D\u093E\u0930: "22", "\u093E\u0930\u0924": "23", " \u0915\u093E": "24", " \u0935\u093F": "25", \u092D\u090F\u0915: "26", "\u093E\u0932\u0940": "27", "\u0932\u0940 ": "28", "\u093E \u092A": "29", "\u0940\u0939\u0930": "30", "\u093E\u0930\u094D": "31", "\u094B \u091B": "32", "\u0928\u093E ": "33", "\u0930\u0941 ": "34", "\u093E\u0932\u0915": "35", "\u094D\u092F\u093E": "36", " \u092C\u093E": "37", \u090F\u0915\u093E: "38", "\u0928\u0947 ": "39", \u0928\u094D\u0924: "40", "\u093E \u092C": "41", "\u093E\u0915\u094B": "42", "\u093E\u0930 ": "43", "\u093E \u092D": "44", "\u093E\u0939\u0930": "45", "\u094D\u0930\u094B": "46", \u0915\u094D\u0937: "47", "\u0928\u094D ": "48", "\u093E\u0930\u0940": "49", " \u0928\u093F": "50", "\u093E \u0928": "51", "\u0940 \u0938": "52", " \u0921\u0941": "53", \u0915\u094D\u0930: "54", \u091C\u0928\u093E: "55", "\u092F\u094B ": "56", "\u093E \u091B": "57", "\u0947\u0935\u093E": "58", "\u094D\u0924\u093E": "59", " \u0930\u093E": "60", \u0924\u094D\u092F: "61", \u0928\u094D\u0926: "62", \u0939\u0941\u0928: "63", "\u093E \u0915": "64", "\u093E\u092E\u093E": "65", "\u0940 \u0928": "66", "\u094D\u0926\u093E": "67", " \u0938\u0947": "68", \u091B\u0928\u094D: "69", \u092E\u094D\u092C: "70", \u0930\u094B\u0924: "71", \u0938\u0947\u0935: "72", \u0938\u094D\u0924: "73", \u0938\u094D\u0930: "74", "\u0947\u0915\u093E": "75", "\u094D\u0924 ": "76", " \u092C\u0940": "77", " \u0939\u0941": "78", \u0915\u094D\u0924: "79", \u0924\u094D\u0930: "80", "\u0930\u0924 ": "81", \u0930\u094D\u0928: "82", \u0930\u094D\u092F: "83", "\u093E \u0930": "84", "\u093E\u0915\u093E": "85", "\u0941\u0915\u094B": "86", " \u090F\u0915": "87", " \u0938\u0902": "88", " \u0938\u0941": "89", \u092C\u0940\u092C: "90", \u092C\u0940\u0938: "91", \u0932\u0915\u094B: "92", \u0938\u094D\u092F: "93", "\u0940\u092C\u0940": "94", "\u0940\u0938\u0940": "95", "\u0947\u0915\u094B": "96", "\u094B \u0938": "97", "\u094D\u092F\u0915": "98", " \u091B\u0928": "99", " \u091C\u0928": "100", " \u092C\u093F": "101", " \u092E\u0941": "102", " \u0938\u094D": "103", \u0917\u0930\u094D: "104", \u0924\u093E\u0939: "105", \u0928\u094D\u0927: "106", \u092C\u093E\u0930: "107", \u092E\u0928\u094D: "108", \u092E\u0938\u094D: "109", \u0930\u0941\u0932: "110", \u0932\u093E\u0908: "111", "\u093E \u0935": "112", "\u093E\u0908 ": "113", "\u093E\u0932 ": "114", "\u093F\u0915\u093E": "115", " \u0924\u094D": "116", " \u092E\u093E": "117", " \u092F\u0938": "118", " \u0930\u0941": "119", \u0924\u093E\u0915: "120", \u092C\u0928\u094D: "121", "\u0930 \u092C": "122", "\u0930\u0923 ": "123", \u0930\u0941\u092A: "124", \u0930\u0947\u0915: "125", \u0937\u094D\u091F: "126", \u0938\u092E\u094D: "127", "\u0938\u0940 ": "128", "\u093E\u090F\u0915": "129", "\u0941\u0915\u093E": "130", "\u0941\u0915\u094D": "131", " \u0905\u0927": "132", " \u0905\u0928": "133", " \u0924\u0925": "134", " \u0925\u093F": "135", " \u0926\u0947": "136", " \u092A\u0930": "137", " \u092C\u0948": "138", \u0924\u0925\u093E: "139", "\u0924\u093E ": "140", "\u0926\u093E ": "141", \u0926\u094D\u0926: "142", "\u0928\u0940 ": "143", \u092C\u093E\u091F: "144", \u092F\u0915\u094D: "145", "\u0930\u0940 ": "146", \u0930\u0940\u0939: "147", \u0930\u094D\u092E: "148", \u0932\u0915\u093E: "149", \u0938\u092E\u0938: "150", "\u093E \u0905": "151", "\u093E \u090F": "152", "\u093E\u091F ": "153", "\u093F\u092F ": "154", "\u094B \u092A": "155", "\u094B \u092E": "156", "\u094D\u0928 ": "157", "\u094D\u0928\u0947": "158", "\u094D\u0937\u093E": "159", " \u092A\u093E": "160", " \u092F\u094B": "161", " \u0939\u093E": "162", \u0905\u0927\u093F: "163", \u0921\u0941\u0935: "164", "\u0924 \u092D": "165", "\u0924 \u0938": "166", "\u0925\u093E ": "167", \u0927\u093F\u0915: "168", \u092A\u092E\u093E: "169", \u092C\u0948\u0920: "170", \u092E\u0941\u0926: "171", "\u092F\u093E ": "172", \u092F\u0941\u0915: "173", "\u0930 \u0928": "174", \u0930\u0924\u093F: "175", \u0935\u093E\u0928: "176", \u0938\u093E\u0930: "177", "\u093E \u0906": "178", "\u093E \u091C": "179", "\u093E \u0939": "180", "\u0941\u0926\u094D": "181", "\u0941\u092A\u092E": "182", "\u0941\u0932\u0947": "183", "\u0941\u0935\u093E": "184", "\u0948\u0920\u0915": "185", "\u094B \u092C": "186", "\u094D\u0924\u0930": "187", "\u094D\u092F ": "188", "\u094D\u092F\u0938": "189", " \u0915\u094D": "190", " \u092E\u0928": "191", " \u0930\u0939": "192", \u091A\u093E\u0930: "193", \u0924\u093F\u092F: "194", "\u0926\u0948 ": "195", \u0928\u093F\u0930: "196", "\u0928\u0941 ": "197", \u092A\u0930\u094D: "198", \u0930\u0915\u094D: "199", \u0930\u094D\u0926: "200", \u0938\u092E\u093E: "201", \u0938\u0941\u0930: "202", "\u093E\u0909\u0928": "203", "\u093E\u0928 ": "204", "\u093E\u0928\u092E": "205", "\u093E\u0930\u0923": "206", "\u093E\u0932\u0947": "207", "\u093F \u092C": "208", "\u093F\u092F\u094B": "209", "\u0941\u0928\u094D": "210", "\u0941\u0930\u0915": "211", "\u094D\u0924\u094D": "212", "\u094D\u092C\u0928": "213", "\u094D\u0930\u093E": "214", "\u094D\u0937 ": "215", " \u0906\u0930": "216", " \u091C\u0932": "217", " \u092C\u0947": "218", " \u092F\u093E": "219", " \u0938\u093E": "220", \u0906\u090F\u0915: "221", "\u090F\u0915 ": "222", \u0915\u0930\u094D: "223", \u091C\u0932\u0938: "224", \u0923\u0915\u093E: "225", "\u0924 \u0930": "226", \u0926\u094D\u0930: "227", \u0927\u093E\u0928: "228", "\u0927\u093F ": "229", \u0928\u0915\u093E: "230", \u0928\u092E\u093E: "231", "\u0928\u093F ": "232", \u092E\u092E\u093E: "233", "\u0930\u092E ": "234", \u0930\u0939\u0947: "235", \u0930\u093E\u091C: "236", \u0932\u0938\u094D: "237", "\u0932\u093E ": "238", \u0935\u093E\u0930: "239", \u0938\u0915\u093E: "240", \u0939\u093F\u0932: "241", \u0939\u0947\u0915: "242", "\u093E \u0924": "243", "\u093E\u0930\u0947": "244", "\u093F\u0928\u094D": "245", "\u093F\u0938\u094D": "246", "\u0947 \u0938": "247", "\u094B \u0928": "248", "\u094B \u0930": "249", "\u094B\u0924 ": "250", "\u094D\u0927\u093F": "251", "\u094D\u092E\u0940": "252", "\u094D\u0930\u0938": "253", " \u0926\u0941": "254", " \u092A\u0928": "255", " \u092C\u0924": "256", " \u092C\u0928": "257", " \u092D\u0928": "258", "\u0902\u092F\u0941": "259", \u0906\u0930\u092E: "260", "\u0916\u093F ": "261", \u0923\u094D\u0921: "262", \u0924\u0915\u093E: "263", \u0924\u093E\u0932: "264", "\u0926\u0940 ": "265", \u0926\u0947\u0916: "266", \u0928\u093F\u092F: "267", \u092A\u0928\u093F: "268", \u092A\u094D\u0924: "269", \u092C\u0924\u093E: "270", "\u092E\u0940 ": "271", \u092E\u094D\u092D: "272", "\u0930 \u0938": "273", \u0930\u092E\u094D: "274", \u0932\u092E\u093E: "275", \u0935\u093F\u0936: "276", \u0937\u093E\u0915: "277", \u0938\u0902\u092F: "278", "\u093E \u0921": "279", "\u093E \u092E": "280", "\u093E\u0928\u0915": "281", "\u093E\u0932\u092E": "282", "\u093F \u092D": "283", "\u093F\u0924 ": "284", "\u0940 \u092A": "285", "\u0940 \u0930": "286", "\u0941 \u092D": "287", "\u0941\u0928\u0947": "288", "\u0947 \u0917": "289", "\u0947\u0916\u093F": "290", "\u0947\u0930 ": "291", "\u094B \u092D": "292", "\u094B \u0935": "293", "\u094B \u0939": "294", "\u094D\u092D ": "295", "\u094D\u0930 ": "296", " \u0924\u093E": "297", " \u0928\u092E": "298", " \u0928\u093E": "299" }, norwegian: { "er ": "0", "en ": "1", "et ": "2", " de": "3", det: "4", " i ": "5", for: "6", "il ": "7", " fo": "8", " me": "9", ing: "10", "om ": "11", " ha": "12", " og": "13", ter: "14", " er": "15", " ti": "16", " st": "17", "og ": "18", til: "19", "ne ": "20", " vi": "21", "re ": "22", " en": "23", " se": "24", "te ": "25", "or ": "26", "de ": "27", kke: "28", "ke ": "29", "ar ": "30", "ng ": "31", "r s": "32", ene: "33", " so": "34", "e s": "35", der: "36", "an ": "37", som: "38", ste: "39", "at ": "40", "ed ": "41", "r i": "42", " av": "43", " in": "44", men: "45", " at": "46", " ko": "47", " p\xE5": "48", har: "49", " si": "50", ere: "51", "p\xE5 ": "52", nde: "53", and: "54", els: "55", ett: "56", tte: "57", lig: "58", "t s": "59", den: "60", "t i": "61", ikk: "62", med: "63", "n s": "64", "rt ": "65", ser: "66", ska: "67", "t e": "68", ker: "69", sen: "70", "av ": "71", ler: "72", "r a": "73", ten: "74", "e f": "75", "r e": "76", "r t": "77", ede: "78", "ig ": "79", " re": "80", han: "81", lle: "82", ner: "83", " bl": "84", " fr": "85", "le ": "86", " ve": "87", "e t": "88", lan: "89", mme: "90", nge: "91", " be": "92", " ik": "93", " om": "94", " \xE5 ": "95", ell: "96", sel: "97", sta: "98", ver: "99", " et": "100", " sk": "101", nte: "102", one: "103", ore: "104", "r d": "105", ske: "106", " an": "107", " la": "108", del: "109", gen: "110", nin: "111", "r f": "112", "r v": "113", "se ": "114", " po": "115", "ir ": "116", jon: "117", mer: "118", nen: "119", omm: "120", sjo: "121", " fl": "122", " sa": "123", ern: "124", kom: "125", "r m": "126", "r o": "127", ren: "128", vil: "129", ale: "130", "es ": "131", "n a": "132", "t f": "133", " le": "134", bli: "135", "e e": "136", "e i": "137", "e v": "138", het: "139", "ye ": "140", " ir": "141", "al ": "142", "e o": "143", ide: "144", iti: "145", lit: "146", nne: "147", ran: "148", "t o": "149", tal: "150", tat: "151", "tt ": "152", " ka": "153", ans: "154", asj: "155", "ge ": "156", inn: "157", kon: "158", lse: "159", pet: "160", "t d": "161", "vi ": "162", " ut": "163", ent: "164", eri: "165", oli: "166", "r p": "167", ret: "168", ris: "169", sto: "170", str: "171", "t a": "172", " ga": "173", all: "174", ape: "175", "g s": "176", ill: "177", ira: "178", kap: "179", "nn ": "180", opp: "181", "r h": "182", rin: "183", " br": "184", " op": "185", "e m": "186", ert: "187", ger: "188", ion: "189", kal: "190", lsk: "191", nes: "192", " gj": "193", " mi": "194", " pr": "195", ang: "196", "e h": "197", "e r": "198", elt: "199", enn: "200", "i s": "201", ist: "202", jen: "203", kan: "204", "lt ": "205", nal: "206", res: "207", tor: "208", ass: "209", dre: "210", "e b": "211", "e p": "212", mel: "213", "n t": "214", nse: "215", ort: "216", per: "217", reg: "218", sje: "219", "t p": "220", "t v": "221", " hv": "222", " n\xE5": "223", " va": "224", ann: "225", ato: "226", "e a": "227", est: "228", ise: "229", isk: "230", oil: "231", ord: "232", pol: "233", "ra ": "234", rak: "235", sse: "236", toi: "237", " gr": "238", "ak ": "239", "eg ": "240", ele: "241", "g a": "242", ige: "243", igh: "244", "m e": "245", "n f": "246", "n v": "247", ndr: "248", nsk: "249", rer: "250", "t m": "251", und: "252", var: "253", "\xE5r ": "254", " he": "255", " no": "256", " ny": "257", end: "258", ete: "259", fly: "260", "g i": "261", ghe: "262", ier: "263", ind: "264", int: "265", lin: "266", "n d": "267", "n p": "268", rne: "269", sak: "270", sie: "271", "t b": "272", tid: "273", " al": "274", " pa": "275", " tr": "276", "ag ": "277", dig: "278", "e d": "279", "e k": "280", ess: "281", hol: "282", "i d": "283", lag: "284", led: "285", "n e": "286", "n i": "287", "n o": "288", pri: "289", "r b": "290", "st ": "291", " fe": "292", " li": "293", " ry": "294", air: "295", ake: "296", "d s": "297", eas: "298", egi: "299" }, pashto: { " \u062F ": "0", "\u0627\u0624 ": "1", " \u0627\u0624": "2", "\u0646\u0648 ": "3", "\u06D0 \u062F": "4", "\u0631\u0647 ": "5", " \u067E\u0647": "6", "\u0646\u0647 ": "7", "\u0686\u06D0 ": "8", " \u0686\u06D0": "9", "\u067E\u0647 ": "10", "\u0647 \u062F": "11", "\u062A\u0647 ": "12", "\u0648 \u0627": "13", \u0648\u0646\u0648: "14", "\u0648 \u062F": "15", " \u0627\u0648": "16", \u0627\u0646\u0648: "17", \u0648\u0646\u0647: "18", "\u0647 \u06A9": "19", " \u062F\u0627": "20", "\u0647 \u0627": "21", "\u062F\u06D0 ": "22", "\u069A\u06D0 ": "23", " \u06A9\u06D0": "24", "\u0627\u0646 ": "25", "\u0644\u0648 ": "26", "\u0647\u0645 ": "27", "\u0648 \u0645": "28", \u06A9\u069A\u06D0: "29", "\u0647 \u0645": "30", "\u0649 \u0627": "31", " \u0646\u0648": "32", " \u062A\u0647": "33", " \u06A9\u069A": "34", \u0631\u0648\u0646: "35", "\u06A9\u06D0 ": "36", "\u062F\u0647 ": "37", "\u0644\u0647 ": "38", "\u0628\u0647 ": "39", "\u0631\u0648 ": "40", " \u0647\u0645": "41", "\u0647 \u0648": "42", "\u0648\u0649 ": "43", "\u0627\u0648 ": "44", \u062A\u0648\u0646: "45", "\u062F\u0627 ": "46", " \u06A9\u0648": "47", " \u06A9\u0693": "48", \u0642\u0627\u0645: "49", " \u062A\u0631": "50", \u0631\u0627\u0646: "51", "\u0647 \u067E": "52", "\u06D0 \u0648": "53", "\u06D0 \u067E": "54", " \u0628\u0647": "55", " \u062E\u0648": "56", "\u062A\u0648 ": "57", "\u062F \u062F": "58", "\u062F \u0627": "59", "\u0647 \u062A": "60", "\u0648 \u067E": "61", "\u064A\u0627 ": "62", " \u062E\u067E": "63", " \u062F\u0648": "64", " \u0631\u0627": "65", " \u0645\u0634": "66", " \u067E\u0631": "67", \u0627\u0631\u0648: "68", "\u0631\u06D0 ": "69", "\u0645 \u062F": "70", \u0645\u0634\u0631: "71", " \u0634\u0648": "72", " \u0648\u0631": "73", "\u0627\u0631 ": "74", "\u062F\u0649 ": "75", " \u0627\u062F": "76", " \u062F\u0649": "77", " \u0645\u0648": "78", "\u062F \u067E": "79", "\u0644\u064A ": "80", "\u0648 \u06A9": "81", " \u0645\u0642": "82", " \u064A\u0648": "83", "\u0624 \u062F": "84", \u062E\u067E\u0644: "85", \u0633\u0631\u0647: "86", "\u0647 \u0686": "87", "\u0648\u0631 ": "88", " \u062A\u0627": "89", " \u062F\u06D0": "90", " \u0631\u0648": "91", " \u0633\u0631": "92", " \u0645\u0644": "93", " \u06A9\u0627": "94", "\u0624 \u0627": "95", \u0627\u0631\u0647: "96", \u0628\u0631\u0648: "97", "\u0645\u0647 ": "98", "\u0647 \u0628": "99", "\u0648 \u062A": "100", \u067E\u069A\u062A: "101", " \u0628\u0627": "102", " \u062F\u063A": "103", " \u0642\u0628": "104", " \u0644\u0647": "105", " \u0648\u0627": "106", " \u067E\u0627": "107", " \u067E\u069A": "108", "\u062F \u0645": "109", "\u062F \u0647": "110", "\u0644\u06D0 ": "111", \u0645\u0627\u062A: "112", "\u0645\u0648 ": "113", "\u0647 \u0647": "114", "\u0648\u064A ": "115", "\u06D0 \u0628": "116", "\u06D0 \u06A9": "117", " \u062F\u0647": "118", " \u0642\u0627": "119", "\u0627\u0644 ": "120", \u0627\u0645\u0627: "121", "\u062F \u0646": "122", \u0642\u0628\u0631: "123", "\u0647 \u0646": "124", \u067E\u0627\u0631: "125", " \u0627\u062B": "126", " \u0628\u064A": "127", " \u0644\u0627": "128", " \u0644\u0631": "129", \u0627\u062B\u0627: "130", "\u062F \u062E": "131", \u062F\u0627\u0631: "132", \u0631\u064A\u062E: "133", \u0634\u0631\u0627: "134", \u0645\u0642\u0627: "135", "\u0646\u06CD ": "136", "\u0647 \u0631": "137", "\u0647 \u0644": "138", \u0648\u0644\u0648: "139", "\u064A\u0648 ": "140", \u06A9\u0648\u0645: "141", " \u062F\u062F": "142", " \u0644\u0648": "143", " \u0645\u062D": "144", " \u0645\u0631": "145", " \u0648\u0648": "146", \u0627\u062A\u0648: "147", \u0627\u0631\u064A: "148", \u0627\u0644\u0648: "149", \u0627\u0646\u062F: "150", \u062E\u0627\u0646: "151", "\u062F \u062A": "152", "\u0633\u06D0 ": "153", "\u0644\u0649 ": "154", \u0646\u0648\u0631: "155", "\u0648 \u0644": "156", "\u064A \u0686": "157", "\u0693\u064A ": "158", \u069A\u062A\u0648: "159", "\u06D0 \u0644": "160", " \u062C\u0648": "161", " \u0633\u064A": "162", "\u0627\u0645 ": "163", \u0628\u0627\u0646: "164", \u062A\u0627\u0631: "165", "\u062A\u0631 ": "166", \u062B\u0627\u0631: "167", "\u062E\u0648 ": "168", "\u062F\u0648 ": "169", "\u0631 \u06A9": "170", "\u0644 \u062F": "171", \u0645\u0648\u0646: "172", \u0646\u062F\u06D0: "173", "\u0648 \u0646": "174", "\u0648\u0644 ": "175", "\u0648\u0647 ": "176", "\u0649 \u0648": "177", "\u064A \u062F": "178", "\u06D0 \u0627": "179", "\u06D0 \u062A": "180", "\u06D0 \u064A": "181", " \u062D\u06A9": "182", " \u062E\u0628": "183", " \u0646\u0647": "184", " \u067E\u0648": "185", "\u0627 \u062F": "186", "\u062A\u06D0 ": "187", \u062C\u0648\u0693: "188", \u062D\u06A9\u0645: "189", \u062D\u06A9\u0648: "190", \u062E\u0628\u0631: "191", \u062F\u0627\u0646: "192", "\u0631 \u062F": "193", "\u063A\u0647 ": "194", \u0642\u0627\u0641: "195", \u0645\u062D\u06A9: "196", \u0648\u0627\u0644: "197", \u0648\u0645\u062A: "198", \u0648\u064A\u0644: "199", "\u0649 \u062F": "200", "\u0649 \u0645": "201", \u064A\u0631\u0647: "202", "\u067E\u0631 ": "203", \u06A9\u0648\u0644: "204", "\u06D0 \u0647": "205", " \u062A\u064A": "206", " \u062E\u0627": "207", " \u0648\u06A9": "208", " \u064A\u0627": "209", " \u0681\u0627": "210", "\u0624 \u0642": "211", \u0627\u0646\u06CD: "212", "\u0628\u0649 ": "213", "\u063A\u0648 ": "214", "\u0647 \u062E": "215", "\u0648 \u0628": "216", \u0648\u062F\u0627: "217", \u064A\u062F\u0648: "218", "\u0693\u06D0 ": "219", \u06A9\u0627\u0644: "220", " \u0628\u0631": "221", " \u0642\u062F": "222", " \u0645\u064A": "223", " \u0648\u064A": "224", " \u06A9\u0631": "225", "\u0624 \u0645": "226", "\u0627\u062A ": "227", \u0627\u064A\u064A: "228", "\u062A\u0649 ": "229", \u062A\u064A\u0627: "230", \u062A\u064A\u0631: "231", \u062E\u0648\u0627: "232", \u062F\u063A\u0648: "233", "\u062F\u0645 ": "234", \u062F\u064A\u0645: "235", "\u0631 \u0648": "236", \u0642\u062F\u064A: "237", "\u0645 \u062E": "238", \u0645\u0627\u0646: "239", "\u0645\u06D0 ": "240", \u0646\u064A\u0648: "241", "\u0646\u0696 ": "242", "\u0647 \u064A": "243", "\u0648 \u0633": "244", "\u0648 \u0686": "245", \u0648\u0627\u0646: "246", \u0648\u0631\u0648: "247", \u0648\u0646\u0696: "248", \u067E\u0648\u0631: "249", "\u0693\u0647 ": "250", "\u0693\u0648 ": "251", "\u06CD \u062F": "252", "\u06D0 \u0646": "253", " \u0627\u0647": "254", " \u0632\u064A": "255", " \u0633\u0648": "256", " \u0634\u064A": "257", " \u0647\u0631": "258", " \u0647\u063A": "259", " \u069A\u0627": "260", \u0627\u062A\u0644: "261", "\u0627\u0642 ": "262", \u0627\u0646\u064A: "263", \u0628\u0631\u064A: "264", "\u0628\u06D0 ": "265", "\u062A \u0627": "266", "\u062F \u0628": "267", "\u062F \u0633": "268", "\u0631 \u0645": "269", "\u0631\u0649 ": "270", \u0639\u0631\u0627: "271", \u0644\u0627\u0646: "272", "\u0645\u0649 ": "273", "\u0646\u0649 ": "274", "\u0648 \u062E": "275", "\u0648\u0626 ": "276", \u0648\u0631\u06A9: "277", \u0648\u0631\u06D0: "278", "\u0648\u0646 ": "279", \u0648\u06A9\u0693: "280", "\u0649 \u0686": "281", \u064A\u0645\u0647: "282", "\u064A\u06D0 ": "283", \u069A\u062A\u0646: "284", "\u06A9\u0647 ": "285", \u06A9\u0693\u064A: "286", "\u06D0 \u062E": "287", "\u06D2 \u0634": "288", " \u062A\u062D": "289", " \u062A\u0648": "290", " \u062F\u0631": "291", " \u062F\u067E": "292", " \u0635\u0648": "293", " \u0639\u0631": "294", " \u0648\u0644": "295", " \u064A\u0624": "296", " \u067E\u06C0": "297", " \u0685\u0648": "298", "\u0627 \u0627": "299" }, pidgin: { " de": "0", " we": "1", " di": "2", "di ": "3", dem: "4", "em ": "5", "ay ": "6", " sa": "7", "or ": "8", say: "9", "ke ": "10", "ey ": "11", " an": "12", " go": "13", " e ": "14", " to": "15", " ma": "16", "e d": "17", wey: "18", for: "19", "nd ": "20", "to ": "21", " be": "22", " fo": "23", ake: "24", "im ": "25", " pe": "26", "le ": "27", "go ": "28", "ll ": "29", "de ": "30", "e s": "31", "on ": "32", get: "33", ght: "34", igh: "35", " ri": "36", "et ": "37", rig: "38", " ge": "39", "y d": "40", " na": "41", mak: "42", "t t": "43", " no": "44", and: "45", tin: "46", ing: "47", eve: "48", "ri ": "49", " im": "50", " am": "51", " or": "52", "am ": "53", "be ": "54", " ev": "55", " ta": "56", "ht ": "57", "e w": "58", " li": "59", eri: "60", "ng ": "61", ver: "62", all: "63", "e f": "64", ers: "65", ntr: "66", ont: "67", " do": "68", "r d": "69", " ko": "70", " ti": "71", "an ": "72", kon: "73", per: "74", tri: "75", "y e": "76", rso: "77", son: "78", "no ": "79", ome: "80", "is ": "81", "do ": "82", "ne ": "83", one: "84", ion: "85", "m g": "86", "i k": "87", " al": "88", bod: "89", "i w": "90", odi: "91", " so": "92", " wo": "93", "o d": "94", "st ": "95", "t r": "96", " of": "97", aim: "98", "e g": "99", nai: "100", " co": "101", dis: "102", "me ": "103", "of ": "104", " wa": "105", "e t": "106", " ar": "107", "e l": "108", ike: "109", lik: "110", "t a": "111", wor: "112", alk: "113", ell: "114", eop: "115", "lk ": "116", opl: "117", peo: "118", ple: "119", "re ": "120", tal: "121", any: "122", "e a": "123", "o g": "124", art: "125", cle: "126", "i p": "127", icl: "128", rti: "129", the: "130", tic: "131", "we ": "132", "f d": "133", "in ": "134", " mu": "135", "e n": "136", "e o": "137", mus: "138", "n d": "139", "na ": "140", "o m": "141", ust: "142", wel: "143", "e e": "144", her: "145", "m d": "146", "nt ": "147", " fi": "148", "at ": "149", "e b": "150", "it ": "151", "m w": "152", "o t": "153", wan: "154", com: "155", "da ": "156", fit: "157", "m b": "158", "so ": "159", " fr": "160", "ce ": "161", "er ": "162", "o a": "163", " if": "164", " on": "165", ent: "166", "if ": "167", ind: "168", kin: "169", "l d": "170", man: "171", "o s": "172", " se": "173", "y a": "174", "y m": "175", " re": "176", "ee ": "177", "k a": "178", "t s": "179", "ve ": "180", "y w": "181", " ki": "182", eti: "183", men: "184", "ta ": "185", "y n": "186", "d t": "187", dey: "188", "e c": "189", "i o": "190", ibo: "191", "ld ": "192", "m t": "193", "n b": "194", "o b": "195", "ow ": "196", ree: "197", rio: "198", "t d": "199", " hu": "200", " su": "201", "en ": "202", hts: "203", ive: "204", "m n": "205", "n g": "206", "ny ": "207", oth: "208", "ts ": "209", " as": "210", " wh": "211", "as ": "212", gom: "213", hum: "214", "k s": "215", oda: "216", ork: "217", "se ": "218", uma: "219", "ut ": "220", " ba": "221", " ot": "222", ano: "223", "m a": "224", "m s": "225", nod: "226", "om ": "227", "r a": "228", "r i": "229", "rk ": "230", " fa": "231", " si": "232", " th": "233", "ad ": "234", "e m": "235", eac: "236", "m m": "237", "n w": "238", nob: "239", orl: "240", out: "241", own: "242", "r s": "243", "r w": "244", rib: "245", rld: "246", "s w": "247", ure: "248", "wn ": "249", " ow": "250", "a d": "251", bad: "252", "ch ": "253", fre: "254", "gs ": "255", "m k": "256", nce: "257", ngs: "258", "o f": "259", obo: "260", rea: "261", sur: "262", "y o": "263", " ab": "264", " un": "265", abo: "266", ach: "267", bou: "268", "d m": "269", dat: "270", "e p": "271", "g w": "272", hol: "273", "i m": "274", "i r": "275", "m f": "276", "m o": "277", "n o": "278", now: "279", "ry ": "280", "s a": "281", "t o": "282", tay: "283", wet: "284", " ag": "285", " bo": "286", " da": "287", " pr": "288", arr: "289", ati: "290", "d d": "291", "d p": "292", "i g": "293", "i t": "294", liv: "295", "ly ": "296", "n a": "297", "od ": "298", "ok ": "299" }, polish: { "ie ": "0", nie: "1", "em ": "2", " ni": "3", " po": "4", " pr": "5", dzi: "6", " na": "7", "\u017Ce ": "8", rze: "9", "na ": "10", \u0142em: "11", wie: "12", " w ": "13", " \u017Ce": "14", "go ": "15", " by": "16", prz: "17", owa: "18", "i\u0119 ": "19", " do": "20", " si": "21", owi: "22", " pa": "23", " za": "24", "ch ": "25", ego: "26", "a\u0142 ": "27", si\u0119: "28", "ej ": "29", wa\u0142: "30", "ym ": "31", ani: "32", a\u0142e: "33", "to ": "34", " i ": "35", " to": "36", " te": "37", "e p": "38", " je": "39", " z ": "40", czy: "41", by\u0142: "42", pan: "43", sta: "44", kie: "45", " ja": "46", "do ": "47", " ch": "48", " cz": "49", " wi": "50", ia\u0142: "51", "a p": "52", pow: "53", " mi": "54", "li ": "55", eni: "56", zie: "57", " ta": "58", " wa": "59", "\u0142o ": "60", "a\u0107 ": "61", "dy ": "62", "ak ": "63", "e w": "64", " a ": "65", " od": "66", " st": "67", nia: "68", rzy: "69", ied: "70", " kt": "71", odz: "72", cie: "73", cze: "74", "ia ": "75", iel: "76", kt\u00F3: "77", "o p": "78", t\u00F3r: "79", \u015Bci: "80", " sp": "81", " wy": "82", jak: "83", tak: "84", "zy ": "85", " mo": "86", a\u0142\u0119: "87", pro: "88", ski: "89", tem: "90", \u0142\u0119s: "91", " tr": "92", "e m": "93", jes: "94", "my ": "95", " ro": "96", edz: "97", eli: "98", iej: "99", " rz": "100", "a n": "101", ale: "102", "an ": "103", "e s": "104", est: "105", "le ": "106", "o s": "107", "i p": "108", "ki ": "109", " co": "110", ada: "111", czn: "112", "e t": "113", "e z": "114", ent: "115", "ny ": "116", pre: "117", rz\u0105: "118", "y s": "119", " ko": "120", " o ": "121", ach: "122", "am ": "123", "e n": "124", "o t": "125", oli: "126", pod: "127", zia: "128", " go": "129", " ka": "130", "by ": "131", ieg: "132", ier: "133", no\u015B: "134", roz: "135", spo: "136", ych: "137", z\u0105d: "138", " mn": "139", acz: "140", adz: "141", bie: "142", cho: "143", mni: "144", "o n": "145", ost: "146", pra: "147", "ze ": "148", "\u0142a ": "149", " so": "150", "a m": "151", cza: "152", iem: "153", "i\u0107 ": "154", obi: "155", "y\u0142 ": "156", y\u0142o: "157", " mu": "158", " m\xF3": "159", "a t": "160", acj: "161", "ci ": "162", "e b": "163", ich: "164", kan: "165", "mi ": "166", mie: "167", o\u015Bc: "168", row: "169", zen: "170", zyd: "171", " al": "172", " re": "173", "a w": "174", den: "175", edy: "176", "i\u0142 ": "177", "ko ": "178", "o w": "179", rac: "180", \u015Bmy: "181", " ma": "182", " ra": "183", " sz": "184", " ty": "185", "e j": "186", isk: "187", "ji ": "188", "ka ": "189", "m s": "190", "no ": "191", "o z": "192", rez: "193", "wa ": "194", "\xF3w ": "195", \u0142ow: "196", "\u015B\u0107 ": "197", " ob": "198", ech: "199", ecz: "200", ezy: "201", "i w": "202", "ja ": "203", kon: "204", m\u00F3w: "205", "ne ": "206", "ni ": "207", now: "208", nym: "209", pol: "210", pot: "211", yde: "212", " dl": "213", " sy": "214", "a s": "215", aki: "216", ali: "217", dla: "218", icz: "219", "ku ": "220", ocz: "221", "st ": "222", str: "223", szy: "224", trz: "225", wia: "226", "y p": "227", "za ": "228", " wt": "229", chc: "230", esz: "231", iec: "232", "im ": "233", "la ": "234", "o m": "235", "sa ": "236", wa\u0107: "237", "y n": "238", zac: "239", zec: "240", " gd": "241", "a z": "242", ard: "243", "co ": "244", dar: "245", "e r": "246", ien: "247", "m n": "248", "m w": "249", mia: "250", mo\u017C: "251", raw: "252", rdz: "253", tan: "254", ted: "255", teg: "256", wi\u0142: "257", wte: "258", "y z": "259", zna: "260", z\u0142o: "261", "a r": "262", awi: "263", bar: "264", cji: "265", cz\u0105: "266", dow: "267", "e\u017C ": "268", gdy: "269", iek: "270", "je ": "271", "o d": "272", ta\u0142: "273", wal: "274", wsz: "275", zed: "276", \u00F3wi: "277", \u0119sa: "278", " ba": "279", " lu": "280", " wo": "281", aln: "282", arn: "283", "ba ": "284", dzo: "285", "e c": "286", hod: "287", igi: "288", lig: "289", "m p": "290", my\u015B: "291", "o c": "292", oni: "293", rel: "294", sku: "295", ste: "296", "y w": "297", yst: "298", "z w": "299" }, portuguese: { "de ": "0", " de": "1", "os ": "2", "as ": "3", que: "4", " co": "5", "\xE3o ": "6", "o d": "7", " qu": "8", "ue ": "9", " a ": "10", "do ": "11", ent: "12", " se": "13", "a d": "14", "s d": "15", "e a": "16", "es ": "17", " pr": "18", "ra ": "19", "da ": "20", " es": "21", " pa": "22", "to ": "23", " o ": "24", "em ": "25", con: "26", "o p": "27", " do": "28", est: "29", nte: "30", \u00E7\u00E3o: "31", " da": "32", " re": "33", "ma ": "34", par: "35", " te": "36", ara: "37", ida: "38", " e ": "39", ade: "40", "is ": "41", " um": "42", " po": "43", "a a": "44", "a p": "45", dad: "46", "no ": "47", "te ": "48", " no": "49", a\u00E7\u00E3: "50", pro: "51", "al ": "52", com: "53", "e d": "54", "s a": "55", " as": "56", "a c": "57", "er ": "58", men: "59", "s e": "60", ais: "61", nto: "62", res: "63", "a s": "64", ado: "65", ist: "66", "s p": "67", tem: "68", "e c": "69", "e s": "70", "ia ": "71", "o s": "72", "o a": "73", "o c": "74", "e p": "75", sta: "76", "ta ": "77", tra: "78", ura: "79", " di": "80", " pe": "81", "ar ": "82", "e e": "83", ser: "84", uma: "85", mos: "86", "se ": "87", " ca": "88", "o e": "89", " na": "90", "a e": "91", des: "92", ont: "93", por: "94", " in": "95", " ma": "96", ect: "97", "o q": "98", ria: "99", "s c": "100", ste: "101", ver: "102", cia: "103", dos: "104", ica: "105", str: "106", " ao": "107", " em": "108", das: "109", "e t": "110", ito: "111", iza: "112", pre: "113", tos: "114", " n\xE3": "115", ada: "116", n\u00E3o: "117", ess: "118", eve: "119", "or ": "120", ran: "121", "s n": "122", "s t": "123", tur: "124", " ac": "125", " fa": "126", "a r": "127", ens: "128", eri: "129", "na ": "130", sso: "131", " si": "132", " \xE9 ": "133", bra: "134", esp: "135", "mo ": "136", nos: "137", "ro ": "138", "um ": "139", "a n": "140", "ao ": "141", ico: "142", liz: "143", min: "144", "o n": "145", ons: "146", pri: "147", ten: "148", tic: "149", \u00F5es: "150", " tr": "151", "a m": "152", aga: "153", "e n": "154", ili: "155", ime: "156", "m a": "157", nci: "158", nha: "159", nta: "160", spe: "161", tiv: "162", "am ": "163", ano: "164", arc: "165", ass: "166", cer: "167", "e o": "168", ece: "169", emo: "170", "ga ": "171", "o m": "172", rag: "173", "so ": "174", s\u00E3o: "175", " au": "176", " os": "177", " sa": "178", ali: "179", "ca ": "180", ema: "181", emp: "182", ici: "183", ido: "184", inh: "185", iss: "186", "l d": "187", "la ": "188", lic: "189", "m c": "190", mai: "191", onc: "192", pec: "193", ram: "194", "s q": "195", " ci": "196", " en": "197", " fo": "198", "a o": "199", ame: "200", car: "201", "co ": "202", der: "203", eir: "204", "ho ": "205", "io ": "206", "om ": "207", ora: "208", "r a": "209", sen: "210", ter: "211", " br": "212", " ex": "213", "a u": "214", cul: "215", dev: "216", "e u": "217", "ha ": "218", mpr: "219", nce: "220", oca: "221", ove: "222", rio: "223", "s o": "224", "sa ": "225", sem: "226", tes: "227", uni: "228", ven: "229", za\u00E7: "230", \u00E7\u00F5e: "231", " ad": "232", " al": "233", " an": "234", " mi": "235", " mo": "236", " ve": "237", " \xE0 ": "238", "a i": "239", "a q": "240", ala: "241", amo: "242", bli: "243", cen: "244", col: "245", cos: "246", cto: "247", "e m": "248", "e v": "249", ede: "250", g\u00E1s: "251", ias: "252", ita: "253", iva: "254", ndo: "255", "o t": "256", ore: "257", "r d": "258", ral: "259", rea: "260", "s f": "261", sid: "262", tro: "263", vel: "264", vid: "265", "\xE1s ": "266", " ap": "267", " ar": "268", " ce": "269", " ou": "270", " p\xFA": "271", " so": "272", " vi": "273", "a f": "274", act: "275", arr: "276", bil: "277", cam: "278", "e f": "279", "e i": "280", "el ": "281", for: "282", lem: "283", lid: "284", "lo ": "285", "m d": "286", mar: "287", nde: "288", "o o": "289", omo: "290", ort: "291", per: "292", p\u00FAb: "293", "r u": "294", rei: "295", rem: "296", ros: "297", rre: "298", ssi: "299" }, romanian: { " de": "0", " \xEEn": "1", "de ": "2", " a ": "3", "ul ": "4", " co": "5", "\xEEn ": "6", "re ": "7", "e d": "8", "ea ": "9", " di": "10", " pr": "11", "le ": "12", "\u015Fi ": "13", are: "14", "at ": "15", con: "16", "ui ": "17", " \u015Fi": "18", "i d": "19", "ii ": "20", " cu": "21", "e a": "22", lui: "23", ern: "24", "te ": "25", "cu ": "26", " la": "27", "a c": "28", "c\u0103 ": "29", din: "30", "e c": "31", "or ": "32", ulu: "33", "ne ": "34", ter: "35", "la ": "36", "s\u0103 ": "37", tat: "38", tre: "39", " ac": "40", " s\u0103": "41", est: "42", "st ": "43", "t\u0103 ": "44", " ca": "45", " ma": "46", " pe": "47", cur: "48", ist: "49", m\u00E2n: "50", "a d": "51", "i c": "52", nat: "53", " ce": "54", "i a": "55", "ia ": "56", "in ": "57", scu: "58", " mi": "59", ato: "60", a\u0163i: "61", "ie ": "62", " re": "63", " se": "64", "a a": "65", int: "66", ntr: "67", tru: "68", uri: "69", "\u0103 a": "70", " fo": "71", " pa": "72", ate: "73", ini: "74", tul: "75", ent: "76", min: "77", pre: "78", pro: "79", "a p": "80", "e p": "81", "e s": "82", "ei ": "83", "n\u0103 ": "84", par: "85", rna: "86", rul: "87", tor: "88", " in": "89", " ro": "90", " tr": "91", " un": "92", "al ": "93", ale: "94", art: "95", "ce ": "96", "e e": "97", "e \xEE": "98", fos: "99", ita: "100", nte: "101", om\u00E2: "102", ost: "103", rom: "104", "ru ": "105", str: "106", ver: "107", " ex": "108", " na": "109", "a f": "110", lor: "111", nis: "112", rea: "113", rit: "114", " al": "115", " eu": "116", " no": "117", ace: "118", cer: "119", ile: "120", nal: "121", pri: "122", "ri ": "123", sta: "124", ste: "125", \u0163ie: "126", " au": "127", " da": "128", " ju": "129", " po": "130", "ar ": "131", "au ": "132", ele: "133", ere: "134", eri: "135", ina: "136", "n a": "137", "n c": "138", res: "139", "se ": "140", "t a": "141", tea: "142", " c\u0103": "143", " do": "144", " fi": "145", "a s": "146", at\u0103: "147", com: "148", "e \u015F": "149", eur: "150", guv: "151", "i s": "152", ice: "153", ili: "154", "na ": "155", rec: "156", rep: "157", ril: "158", rne: "159", rti: "160", uro: "161", uve: "162", "\u0103 p": "163", " ar": "164", " o ": "165", " su": "166", " vi": "167", dec: "168", dre: "169", oar: "170", ons: "171", "pe ": "172", rii: "173", " ad": "174", " ge": "175", "a m": "176", "a r": "177", ain: "178", ali: "179", car: "180", cat: "181", ecu: "182", ene: "183", ept: "184", ext: "185", ilo: "186", "iu ": "187", "n p": "188", ori: "189", sec: "190", "u p": "191", une: "192", "\u0103 c": "193", \u015Fti: "194", \u0163ia: "195", " ch": "196", " gu": "197", "ai ": "198", ani: "199", cea: "200", "e f": "201", isc: "202", "l a": "203", lic: "204", liu: "205", mar: "206", nic: "207", "nt ": "208", nul: "209", ris: "210", "t c": "211", "t p": "212", tic: "213", tid: "214", "u a": "215", ucr: "216", " as": "217", " dr": "218", " fa": "219", " nu": "220", " pu": "221", " to": "222", cra: "223", dis: "224", en\u0163: "225", esc: "226", gen: "227", "it ": "228", ivi: "229", "l d": "230", "n d": "231", "nd ": "232", "nu ": "233", ond: "234", pen: "235", ral: "236", riv: "237", rte: "238", sti: "239", "t d": "240", "ta ": "241", "to ": "242", uni: "243", xte: "244", \u00E2nd: "245", \u00EEns: "246", "\u0103 s": "247", " bl": "248", " st": "249", " uc": "250", "a b": "251", "a i": "252", "a l": "253", air: "254", ast: "255", bla: "256", bri: "257", che: "258", duc: "259", dul: "260", "e m": "261", eas: "262", edi: "263", esp: "264", "i l": "265", "i p": "266", ica: "267", ic\u0103: "268", "ir ": "269", iun: "270", jud: "271", lai: "272", lul: "273", mai: "274", men: "275", "ni ": "276", pus: "277", put: "278", "ra ": "279", rai: "280", rop: "281", sil: "282", "ti ": "283", tra: "284", "u s": "285", "ua ": "286", ude: "287", urs: "288", "\xE2n ": "289", \u00EEnt: "290", "\u0163\u0103 ": "291", " lu": "292", " mo": "293", " s ": "294", " sa": "295", " sc": "296", "a u": "297", "an ": "298", atu: "299" }, russian: { " \u043D\u0430": "0", " \u043F\u0440": "1", "\u0442\u043E ": "2", " \u043D\u0435": "3", "\u043B\u0438 ": "4", " \u043F\u043E": "5", "\u043D\u043E ": "6", " \u0432 ": "7", "\u043D\u0430 ": "8", "\u0442\u044C ": "9", "\u043D\u0435 ": "10", " \u0438 ": "11", " \u043A\u043E": "12", "\u043E\u043C ": "13", \u043F\u0440\u043E: "14", " \u0442\u043E": "15", "\u0438\u0445 ": "16", " \u043A\u0430": "17", \u0430\u0442\u044C: "18", \u043E\u0442\u043E: "19", " \u0437\u0430": "20", "\u0438\u0435 ": "21", \u043E\u0432\u0430: "22", \u0442\u0435\u043B: "23", \u0442\u043E\u0440: "24", " \u0434\u0435": "25", "\u043E\u0439 ": "26", \u0441\u0442\u0438: "27", " \u043E\u0442": "28", "\u0430\u0445 ": "29", "\u043C\u0438 ": "30", \u0441\u0442\u0440: "31", " \u0431\u0435": "32", " \u0432\u043E": "33", " \u0440\u0430": "34", "\u0430\u044F ": "35", \u0432\u0430\u0442: "36", "\u0435\u0439 ": "37", "\u0435\u0442 ": "38", "\u0436\u0435 ": "39", \u0438\u0447\u0435: "40", "\u0438\u044F ": "41", "\u043E\u0432 ": "42", \u0441\u0442\u043E: "43", " \u043E\u0431": "44", \u0432\u0435\u0440: "45", "\u0433\u043E ": "46", "\u0438 \u0432": "47", "\u0438 \u043F": "48", "\u0438 \u0441": "49", "\u0438\u0438 ": "50", \u0438\u0441\u0442: "51", "\u043E \u0432": "52", \u043E\u0441\u0442: "53", \u0442\u0440\u0430: "54", " \u0442\u0435": "55", \u0435\u043B\u0438: "56", \u0435\u0440\u0435: "57", \u043A\u043E\u0442: "58", \u043B\u044C\u043D: "59", \u043D\u0438\u043A: "60", \u043D\u0442\u0438: "61", "\u043E \u0441": "62", \u0440\u043E\u0440: "63", \u0441\u0442\u0432: "64", \u0447\u0435\u0441: "65", " \u0431\u043E": "66", " \u0432\u0435": "67", " \u0434\u0430": "68", " \u0438\u043D": "69", " \u043D\u043E": "70", " \u0441 ": "71", " \u0441\u043E": "72", " \u0441\u043F": "73", " \u0441\u0442": "74", " \u0447\u0442": "75", \u0430\u043B\u0438: "76", \u0430\u043C\u0438: "77", \u0432\u0438\u0434: "78", \u0434\u0435\u0442: "79", "\u0435 \u043D": "80", \u0435\u043B\u044C: "81", \u0435\u0441\u043A: "82", \u0435\u0441\u0442: "83", \u0437\u0430\u043B: "84", "\u0438 \u043D": "85", \u0438\u0432\u0430: "86", \u043A\u043E\u043D: "87", \u043E\u0433\u043E: "88", \u043E\u0434\u043D: "89", \u043E\u0436\u043D: "90", \u043E\u043B\u044C: "91", \u043E\u0440\u0438: "92", \u0440\u043E\u0432: "93", \u0441\u043A\u043E: "94", "\u0441\u044F ": "95", \u0442\u0435\u0440: "96", \u0447\u0442\u043E: "97", " \u043C\u043E": "98", " \u0441\u0430": "99", " \u044D\u0442": "100", \u0430\u043D\u0442: "101", \u0432\u0441\u0435: "102", \u0435\u0440\u0440: "103", \u0435\u0441\u043B: "104", \u0438\u0434\u0435: "105", \u0438\u043D\u0430: "106", \u0438\u043D\u043E: "107", \u0438\u0440\u043E: "108", \u0438\u0442\u0435: "109", "\u043A\u0430 ": "110", "\u043A\u043E ": "111", \u043A\u043E\u043B: "112", \u043A\u043E\u043C: "113", "\u043B\u0430 ": "114", \u043D\u0438\u044F: "115", "\u043E \u0442": "116", \u043E\u043B\u043E: "117", \u0440\u0430\u043D: "118", \u0440\u0435\u0434: "119", "\u0441\u044C ": "120", \u0442\u0438\u0432: "121", \u0442\u0438\u0447: "122", "\u044B\u0445 ": "123", " \u0432\u0438": "124", " \u0432\u0441": "125", " \u0433\u043E": "126", " \u043C\u0430": "127", " \u0441\u043B": "128", \u0430\u043A\u043E: "129", \u0430\u043D\u0438: "130", \u0430\u0441\u0442: "131", \u0431\u0435\u0437: "132", \u0434\u0435\u043B: "133", "\u0435 \u0434": "134", "\u0435 \u043F": "135", "\u0435\u043C ": "136", \u0436\u043D\u043E: "137", "\u0438 \u0434": "138", \u0438\u043A\u0430: "139", \u043A\u0430\u0437: "140", \u043A\u0430\u043A: "141", "\u043A\u0438 ": "142", \u043D\u043E\u0441: "143", "\u043E \u043D": "144", \u043E\u043F\u0430: "145", \u043F\u0440\u0438: "146", \u0440\u0440\u043E: "147", \u0441\u043A\u0438: "148", "\u0442\u0438 ": "149", \u0442\u043E\u0432: "150", "\u044B\u0435 ": "151", " \u0432\u044B": "152", " \u0434\u043E": "153", " \u043C\u0435": "154", " \u043D\u0438": "155", " \u043E\u0434": "156", " \u0440\u043E": "157", " \u0441\u0432": "158", " \u0447\u0438": "159", "\u0430 \u043D": "160", \u0430\u0435\u0442: "161", \u0430\u0437\u0430: "162", \u0430\u0442\u0435: "163", \u0431\u0435\u0441: "164", "\u0432 \u043F": "165", "\u0432\u0430 ": "166", "\u0435 \u0432": "167", "\u0435 \u043C": "168", "\u0435 \u0441": "169", "\u0435\u0437 ": "170", \u0435\u043D\u0438: "171", "\u0437\u0430 ": "172", \u0437\u043D\u0430: "173", \u0438\u043D\u0438: "174", \u043A\u0430\u043C: "175", \u043A\u0430\u0445: "176", \u043A\u0442\u043E: "177", \u043B\u043E\u0432: "178", \u043C\u0435\u0440: "179", \u043C\u043E\u0436: "180", \u043D\u0430\u043B: "181", \u043D\u0438\u0446: "182", "\u043D\u044B ": "183", \u043D\u044B\u043C: "184", \u043E\u0440\u0430: "185", \u043E\u0440\u043E: "186", "\u043E\u0442 ": "187", \u043F\u043E\u0440: "188", \u0440\u0430\u0432: "189", \u0440\u0435\u0441: "190", \u0440\u0438\u0441: "191", \u0440\u043E\u0441: "192", \u0441\u043A\u0430: "193", "\u0442 \u043D": "194", \u0442\u043E\u043C: "195", \u0447\u0438\u0442: "196", \u0448\u043A\u043E: "197", " \u0431\u044B": "198", " \u043E ": "199", " \u0442\u0440": "200", " \u0443\u0436": "201", " \u0447\u0443": "202", " \u0448\u043A": "203", "\u0430 \u0431": "204", "\u0430 \u0432": "205", "\u0430 \u0440": "206", \u0430\u0431\u0438: "207", \u0430\u043B\u0430: "208", \u0430\u043B\u043E: "209", \u0430\u043B\u044C: "210", \u0430\u043D\u043D: "211", \u0430\u0442\u0438: "212", \u0431\u0438\u043D: "213", \u0432\u0435\u0441: "214", \u0432\u043D\u043E: "215", "\u0432\u043E ": "216", \u0432\u0448\u0438: "217", \u0434\u0430\u043B: "218", \u0434\u0430\u0442: "219", \u0434\u043D\u043E: "220", "\u0435 \u0437": "221", \u0435\u0433\u043E: "222", \u0435\u043B\u0435: "223", \u0435\u043D\u043D: "224", \u0435\u043D\u0442: "225", \u0435\u0442\u0435: "226", "\u0438 \u043E": "227", \u0438\u043B\u0438: "228", \u0438\u0441\u044C: "229", "\u0438\u0442 ": "230", \u0438\u0446\u0438: "231", \u043A\u043E\u0432: "232", \u043B\u0435\u043D: "233", \u043B\u044C\u043A: "234", \u043C\u0435\u043D: "235", "\u043C\u044B ": "236", \u043D\u0435\u0442: "237", "\u043D\u0438 ": "238", \u043D\u043D\u044B: "239", \u043D\u043E\u0433: "240", \u043D\u043E\u0439: "241", \u043D\u043E\u043C: "242", "\u043E \u043F": "243", \u043E\u0431\u043D: "244", \u043E\u0432\u0435: "245", \u043E\u0432\u043D: "246", \u043E\u0440\u044B: "247", \u043F\u0435\u0440: "248", "\u043F\u043E ": "249", \u043F\u0440\u0430: "250", \u043F\u0440\u0435: "251", \u0440\u0430\u0437: "252", \u0440\u043E\u043F: "253", "\u0440\u044B ": "254", "\u0441\u0435 ": "255", \u0441\u043B\u0438: "256", \u0441\u043E\u0432: "257", \u0442\u0440\u0435: "258", \u0442\u0441\u044F: "259", \u0443\u0440\u043E: "260", \u0446\u0435\u043B: "261", \u0447\u043D\u043E: "262", "\u044C \u0432": "263", \u044C\u043A\u043E: "264", \u044C\u043D\u043E: "265", \u044D\u0442\u043E: "266", "\u044E\u0442 ": "267", "\u044F \u043D": "268", " \u0430\u043D": "269", " \u0435\u0441": "270", " \u0436\u0435": "271", " \u0438\u0437": "272", " \u043A\u0442": "273", " \u043C\u0438": "274", " \u043C\u044B": "275", " \u043F\u0435": "276", " \u0441\u0435": "277", " \u0446\u0435": "278", "\u0430 \u043C": "279", "\u0430 \u043F": "280", "\u0430 \u0442": "281", \u0430\u0432\u0448: "282", \u0430\u0436\u0435: "283", "\u0430\u043A ": "284", "\u0430\u043B ": "285", \u0430\u043B\u0435: "286", \u0430\u043D\u0435: "287", \u0430\u0447\u0438: "288", \u0430\u044E\u0442: "289", \u0431\u043D\u0430: "290", \u0431\u043E\u043B: "291", "\u0431\u044B ": "292", "\u0432 \u0438": "293", "\u0432 \u0441": "294", \u0432\u0430\u043D: "295", \u0433\u0440\u0430: "296", \u0434\u0430\u0436: "297", \u0434\u0435\u043D: "298", "\u0435 \u043A": "299" }, serbian: { " \u043D\u0430": "0", " \u0458\u0435": "1", " \u043F\u043E": "2", "\u0458\u0435 ": "3", " \u0438 ": "4", " \u043D\u0435": "5", " \u043F\u0440": "6", "\u0433\u0430 ": "7", " \u0441\u0432": "8", "\u043E\u0433 ": "9", "\u0430 \u0441": "10", "\u0438\u0445 ": "11", "\u043D\u0430 ": "12", \u043A\u043E\u0458: "13", \u043E\u0433\u0430: "14", " \u0443 ": "15", "\u0430 \u043F": "16", "\u043D\u0435 ": "17", "\u043D\u0438 ": "18", "\u0442\u0438 ": "19", " \u0434\u0430": "20", "\u043E\u043C ": "21", " \u0432\u0435": "22", " \u0441\u0440": "23", "\u0438 \u0441": "24", \u0441\u043A\u043E: "25", " \u043E\u0431": "26", "\u0430 \u043D": "27", "\u0434\u0430 ": "28", "\u0435 \u043D": "29", "\u043D\u043E ": "30", \u043D\u043E\u0433: "31", "\u043E \u0458": "32", "\u043E\u0458 ": "33", " \u0437\u0430": "34", "\u0432\u0430 ": "35", "\u0435 \u0441": "36", "\u0438 \u043F": "37", "\u043C\u0430 ": "38", \u043D\u0438\u043A: "39", \u043E\u0431\u0440: "40", \u043E\u0432\u0430: "41", " \u043A\u043E": "42", "\u0430 \u0438": "43", \u0434\u0438\u0458: "44", "\u0435 \u043F": "45", "\u043A\u0430 ": "46", "\u043A\u043E ": "47", \u043A\u043E\u0433: "48", \u043E\u0441\u0442: "49", \u0441\u0432\u0435: "50", \u0441\u0442\u0432: "51", \u0441\u0442\u0438: "52", \u0442\u0440\u0430: "53", \u0435\u0434\u0438: "54", \u0438\u043C\u0430: "55", \u043F\u043E\u043A: "56", \u043F\u0440\u0430: "57", \u0440\u0430\u0437: "58", "\u0442\u0435 ": "59", " \u0431\u043E": "60", " \u0432\u0438": "61", " \u0441\u0430": "62", \u0430\u0432\u043E: "63", \u0431\u0440\u0430: "64", \u0433\u043E\u0441: "65", "\u0435 \u0438": "66", \u0435\u043B\u0438: "67", \u0435\u043D\u0438: "68", "\u0437\u0430 ": "69", \u0438\u043A\u0438: "70", "\u0438\u043E ": "71", \u043F\u0440\u0435: "72", \u0440\u0430\u0432: "73", \u0440\u0430\u0434: "74", "\u0443 \u0441": "75", "\u0458\u0443 ": "76", "\u045A\u0430 ": "77", " \u0431\u0438": "78", " \u0434\u043E": "79", " \u0441\u0442": "80", \u0430\u0441\u0442: "81", \u0431\u043E\u0458: "82", \u0435\u0431\u043E: "83", "\u0438 \u043D": "84", "\u0438\u043C ": "85", "\u043A\u0443 ": "86", \u043B\u0430\u043D: "87", \u043D\u0435\u0431: "88", \u043E\u0432\u043E: "89", \u043E\u0433\u043E: "90", \u043E\u0441\u043B: "91", \u043E\u0458\u0448: "92", \u043F\u0435\u0434: "93", \u0441\u0442\u0440: "94", \u0447\u0430\u0441: "95", " \u0433\u043E": "96", " \u043A\u0440": "97", " \u043C\u043E": "98", " \u0447\u043B": "99", "\u0430 \u043C": "100", "\u0430 \u043E": "101", \u0430\u043A\u043E: "102", \u0430\u0447\u0430: "103", \u0432\u0435\u043B: "104", \u0432\u0435\u0442: "105", \u0432\u043E\u0433: "106", \u0435\u0434\u0430: "107", \u0438\u0441\u0442: "108", \u0438\u0442\u0438: "109", \u0438\u0458\u0435: "110", \u043E\u043A\u043E: "111", \u0441\u043B\u043E: "112", \u0441\u0440\u0431: "113", \u0447\u043B\u0430: "114", " \u0431\u0435": "115", " \u043E\u0441": "116", " \u043E\u0442": "117", " \u0440\u0435": "118", " \u0441\u0435": "119", "\u0430 \u0432": "120", "\u0430\u043D ": "121", \u0431\u043E\u0433: "122", \u0431\u0440\u043E: "123", \u0432\u0435\u043D: "124", \u0433\u0440\u0430: "125", "\u0435 \u043E": "126", \u0438\u043A\u0430: "127", \u0438\u0458\u0430: "128", \u043A\u0438\u0445: "129", \u043A\u043E\u043C: "130", "\u043B\u0438 ": "131", "\u043D\u0443 ": "132", \u043E\u0442\u0430: "133", \u043E\u0458\u043D: "134", \u043F\u043E\u0434: "135", \u0440\u0431\u0441: "136", \u0440\u0435\u0434: "137", \u0440\u043E\u0458: "138", "\u0441\u0430 ": "139", \u0441\u043D\u0438: "140", \u0442\u0430\u0447: "141", \u0442\u0432\u0430: "142", "\u0458\u0430 ": "143", "\u0458\u0438 ": "144", " \u043A\u0430": "145", " \u043E\u0432": "146", " \u0442\u0440": "147", "\u0430 \u0458": "148", \u0430\u0432\u0438: "149", "\u0430\u0437 ": "150", \u0430\u043D\u043E: "151", \u0431\u0438\u043E: "152", \u0432\u0438\u043A: "153", "\u0432\u043E ": "154", \u0433\u043E\u0432: "155", \u0434\u043D\u0438: "156", "\u0435 \u0447": "157", \u0435\u0433\u043E: "158", "\u0438 \u043E": "159", \u0438\u0432\u0430: "160", \u0438\u0432\u043E: "161", "\u0438\u043A ": "162", \u0438\u043D\u0435: "163", \u0438\u043D\u0438: "164", \u0438\u043F\u0435: "165", \u043A\u0438\u043F: "166", \u043B\u0438\u043A: "167", "\u043B\u043E ": "168", \u043D\u0430\u0448: "169", \u043D\u043E\u0441: "170", "\u043E \u0442": "171", "\u043E\u0434 ": "172", \u043E\u0434\u0438: "173", \u043E\u043D\u0430: "174", \u043E\u0458\u0438: "175", \u043F\u043E\u0447: "176", \u043F\u0440\u043E: "177", "\u0440\u0430 ": "178", \u0440\u0438\u0441: "179", \u0440\u043E\u0434: "180", \u0440\u0441\u0442: "181", "\u0441\u0435 ": "182", \u0441\u043F\u043E: "183", \u0441\u0442\u0430: "184", \u0442\u0438\u045B: "185", "\u0443 \u0434": "186", "\u0443 \u043D": "187", "\u0443 \u043E": "188", \u0447\u0438\u043D: "189", "\u0448\u0430 ": "190", \u0458\u0435\u0434: "191", \u0458\u043D\u0438: "192", "\u045B\u0435 ": "193", " \u043C ": "194", " \u043C\u0435": "195", " \u043D\u0438": "196", " \u043E\u043D": "197", " \u043F\u0430": "198", " \u0441\u043B": "199", " \u0442\u0435": "200", "\u0430 \u0443": "201", \u0430\u0432\u0430: "202", \u0430\u0432\u0435: "203", \u0430\u0432\u043D: "204", \u0430\u043D\u0430: "205", "\u0430\u043E ": "206", \u0430\u0442\u0438: "207", \u0430\u0446\u0438: "208", \u0430\u0458\u0443: "209", \u0430\u045A\u0430: "210", \u0431\u0441\u043A: "211", \u0432\u043E\u0440: "212", \u0432\u043E\u0441: "213", \u0432\u0441\u043A: "214", \u0434\u0438\u043D: "215", "\u0435 \u0443": "216", \u0435\u0434\u043D: "217", \u0435\u0437\u0438: "218", \u0435\u043A\u0430: "219", \u0435\u043D\u043E: "220", \u0435\u0442\u043E: "221", \u0435\u045A\u0430: "222", \u0436\u0438\u0432: "223", "\u0438 \u0433": "224", "\u0438 \u0438": "225", "\u0438 \u043A": "226", "\u0438 \u0442": "227", \u0438\u043A\u0443: "228", \u0438\u0447\u043A: "229", "\u043A\u0438 ": "230", \u043A\u0440\u0441: "231", "\u043B\u0430 ": "232", \u043B\u0430\u0432: "233", \u043B\u0438\u0442: "234", "\u043C\u0435 ": "235", \u043C\u0435\u043D: "236", \u043D\u0430\u0446: "237", "\u043E \u043D": "238", "\u043E \u043F": "239", "\u043E \u0443": "240", \u043E\u0434\u043D: "241", \u043E\u043B\u0438: "242", \u043E\u0440\u043D: "243", \u043E\u0441\u043D: "244", \u043E\u0441\u043F: "245", \u043E\u0447\u0435: "246", \u043F\u0441\u043A: "247", \u0440\u0435\u0447: "248", \u0440\u043F\u0441: "249", \u0441\u0432\u043E: "250", \u0441\u043A\u0438: "251", \u0441\u043B\u0430: "252", \u0441\u0440\u043F: "253", "\u0441\u0443 ": "254", "\u0442\u0430 ": "255", \u0442\u0430\u0432: "256", \u0442\u0432\u0435: "257", "\u0443 \u0431": "258", \u0458\u0435\u0437: "259", "\u045B\u0438 ": "260", " \u0435\u043D": "261", " \u0436\u0438": "262", " \u0438\u043C": "263", " \u043C\u0443": "264", " \u043E\u0434": "265", " \u0441\u0443": "266", " \u0442\u0430": "267", " \u0445\u0440": "268", " \u0447\u0430": "269", " \u0448\u0442": "270", " \u045A\u0435": "271", "\u0430 \u0434": "272", "\u0430 \u0437": "273", "\u0430 \u043A": "274", "\u0430 \u0442": "275", \u0430\u0434\u0443: "276", \u0430\u043B\u043E: "277", \u0430\u043D\u0438: "278", \u0430\u0441\u043E: "279", \u0432\u0430\u043D: "280", \u0432\u0430\u0447: "281", \u0432\u0430\u045A: "282", \u0432\u0435\u0434: "283", "\u0432\u0438 ": "284", \u0432\u043D\u043E: "285", \u0432\u043E\u0442: "286", \u0432\u043E\u0458: "287", "\u0432\u0443 ": "288", \u0434\u043E\u0431: "289", \u0434\u0440\u0443: "290", \u0434\u0441\u0435: "291", "\u0434\u0443 ": "292", "\u0435 \u0431": "293", "\u0435 \u0434": "294", "\u0435 \u043C": "295", "\u0435\u043C ": "296", \u0435\u043C\u0430: "297", \u0435\u043D\u0442: "298", \u0435\u043D\u0446: "299" }, slovak: { " pr": "0", " po": "1", " ne": "2", " a ": "3", "ch ": "4", " na": "5", " je": "6", "n\xED ": "7", "je ": "8", " do": "9", "na ": "10", ova: "11", " v ": "12", "to ": "13", "ho ": "14", "ou ": "15", " to": "16", ick: "17", ter: "18", "\u017Ee ": "19", " st": "20", " za": "21", ost: "22", \u00FDch: "23", " se": "24", pro: "25", " te": "26", "e s": "27", " \u017Ee": "28", "a p": "29", " kt": "30", pre: "31", " by": "32", " o ": "33", "se ": "34", kon: "35", " p\u0159": "36", "a s": "37", "n\xE9 ": "38", "n\u011B ": "39", sti: "40", ako: "41", ist: "42", "mu ": "43", ame: "44", ent: "45", "ky ": "46", "la ": "47", pod: "48", " ve": "49", " ob": "50", "om ": "51", vat: "52", " ko": "53", sta: "54", "em ": "55", "le ": "56", "a v": "57", "by ": "58", "e p": "59", "ko ": "60", eri: "61", kte: "62", "sa ": "63", \u00E9ho: "64", "e v": "65", mer: "66", tel: "67", " ak": "68", " sv": "69", " z\xE1": "70", hla: "71", las: "72", "lo ": "73", " ta": "74", "a n": "75", "ej ": "76", "li ": "77", "ne ": "78", " sa": "79", "ak ": "80", ani: "81", ate: "82", "ia ": "83", sou: "84", " so": "85", en\u00ED: "86", "ie ": "87", " re": "88", "ce ": "89", "e n": "90", ori: "91", tic: "92", " vy": "93", "a t": "94", "k\xE9 ": "95", nos: "96", "o s": "97", str: "98", "ti ": "99", uje: "100", " sp": "101", lov: "102", "o p": "103", oli: "104", ov\u00E1: "105", " n\xE1": "106", ale: "107", den: "108", "e o": "109", "ku ": "110", val: "111", " am": "112", " ro": "113", " si": "114", nie: "115", pol: "116", tra: "117", " al": "118", ali: "119", "o v": "120", tor: "121", " mo": "122", " ni": "123", "ci ": "124", "o n": "125", "\xEDm ": "126", " le": "127", " pa": "128", " s ": "129", "al ": "130", ati: "131", ero: "132", ove: "133", rov: "134", v\u00E1n: "135", \u00EDch: "136", " ja": "137", " z ": "138", ck\u00E9: "139", "e z": "140", " od": "141", byl: "142", "de ": "143", dob: "144", nep: "145", pra: "146", ric: "147", spo: "148", tak: "149", " v\u0161": "150", "a a": "151", "e t": "152", lit: "153", "me ": "154", nej: "155", "no ": "156", n\u00FDc: "157", "o t": "158", "a j": "159", "e a": "160", "en ": "161", est: "162", "j\xED ": "163", "mi ": "164", slo: "165", st\u00E1: "166", "u v": "167", for: "168", nou: "169", pos: "170", p\u0159e: "171", "si ": "172", tom: "173", " vl": "174", "a z": "175", "ly ": "176", orm: "177", ris: "178", "za ": "179", z\u00E1k: "180", " k ": "181", "at ": "182", ck\u00FD: "183", dno: "184", dos: "185", "dy ": "186", jak: "187", kov: "188", "ny ": "189", res: "190", ror: "191", sto: "192", van: "193", " op": "194", "da ": "195", "do ": "196", "e j": "197", hod: "198", len: "199", "n\xFD ": "200", "o z": "201", poz: "202", pri: "203", ran: "204", "u s": "205", " ab": "206", "aj ": "207", ast: "208", "it ": "209", kto: "210", "o o": "211", oby: "212", odo: "213", "u p": "214", "va ": "215", \u00E1n\u00ED: "216", "\xED p": "217", "\xFDm ": "218", " in": "219", " mi": "220", "a\u0165 ": "221", dov: "222", "ka ": "223", nsk: "224", \u00E1ln: "225", " an": "226", " bu": "227", " sl": "228", " tr": "229", "e m": "230", ech: "231", edn: "232", "i n": "233", k\u00FDc: "234", n\u00EDc: "235", "ov ": "236", p\u0159\u00ED: "237", "\xED a": "238", " aj": "239", " bo": "240", "a d": "241", ide: "242", "o a": "243", "o d": "244", och: "245", pov: "246", svo: "247", "\xE9 s": "248", " kd": "249", " vo": "250", " v\xFD": "251", bud: "252", ich: "253", "il ": "254", ili: "255", "ni ": "256", n\u00EDm: "257", "od ": "258", osl: "259", ouh: "260", rav: "261", roz: "262", "st ": "263", stv: "264", "tu ": "265", "u a": "266", v\u00E1l: "267", "y s": "268", "\xED s": "269", "\xED v": "270", " hl": "271", " li": "272", " me": "273", "a m": "274", "e b": "275", "h s": "276", "i p": "277", "i s": "278", iti: "279", l\u00E1d: "280", nem: "281", nov: "282", opo: "283", uhl: "284", eno: "285", ens: "286", men: "287", nes: "288", obo: "289", "te ": "290", ved: "291", vl\u00E1: "292", "y n": "293", " ma": "294", " mu": "295", " v\xE1": "296", bez: "297", byv: "298", cho: "299" }, slovene: { "je ": "0", " pr": "1", " po": "2", " je": "3", " v ": "4", " za": "5", " na": "6", pre: "7", "da ": "8", " da": "9", "ki ": "10", "ti ": "11", "ja ": "12", "ne ": "13", " in": "14", "in ": "15", "li ": "16", "no ": "17", "na ": "18", "ni ": "19", " bi": "20", "jo ": "21", " ne": "22", nje: "23", "e p": "24", "i p": "25", pri: "26", "o p": "27", red: "28", " do": "29", anj: "30", "em ": "31", "ih ": "32", " bo": "33", " ki": "34", " iz": "35", " se": "36", " so": "37", "al ": "38", " de": "39", "e v": "40", "i s": "41", "ko ": "42", bil: "43", ira: "44", ove: "45", " br": "46", " ob": "47", "e b": "48", "i n": "49", ova: "50", "se ": "51", "za ": "52", "la ": "53", " ja": "54", ati: "55", "so ": "56", ter: "57", " ta": "58", "a s": "59", del: "60", "e d": "61", " dr": "62", " od": "63", "a n": "64", "ar ": "65", jal: "66", "ji ": "67", rit: "68", " ka": "69", " ko": "70", " pa": "71", "a b": "72", ani: "73", "e s": "74", "er ": "75", ili: "76", lov: "77", "o v": "78", tov: "79", " ir": "80", " ni": "81", " vo": "82", "a j": "83", "bi ": "84", bri: "85", iti: "86", let: "87", "o n": "88", tan: "89", "\u0161e ": "90", " le": "91", " te": "92", eni: "93", eri: "94", ita: "95", kat: "96", por: "97", pro: "98", ali: "99", "ke ": "100", oli: "101", "ov ": "102", pra: "103", "ri ": "104", uar: "105", "ve ": "106", " to": "107", "a i": "108", "a v": "109", ako: "110", arj: "111", ate: "112", "di ": "113", "do ": "114", "ga ": "115", "le ": "116", "lo ": "117", mer: "118", "o s": "119", oda: "120", oro: "121", pod: "122", " ma": "123", " mo": "124", " si": "125", "a p": "126", bod: "127", "e n": "128", ega: "129", "ju ": "130", "ka ": "131", lje: "132", rav: "133", "ta ": "134", "a o": "135", "e t": "136", "e z": "137", "i d": "138", "i v": "139", ila: "140", lit: "141", nih: "142", odo: "143", sti: "144", "to ": "145", var: "146", ved: "147", vol: "148", " la": "149", " no": "150", " vs": "151", "a d": "152", agu: "153", aja: "154", dej: "155", dnj: "156", eda: "157", gov: "158", gua: "159", jag: "160", jem: "161", kon: "162", "ku ": "163", nij: "164", omo: "165", o\u010Di: "166", pov: "167", rak: "168", rja: "169", sta: "170", tev: "171", "a t": "172", "aj ": "173", "ed ": "174", eja: "175", ent: "176", "ev ": "177", "i i": "178", "i o": "179", ijo: "180", ist: "181", ost: "182", ske: "183", str: "184", " ra": "185", " s ": "186", " tr": "187", " \u0161e": "188", arn: "189", "bo ": "190", dr\u017E: "191", "i j": "192", ilo: "193", izv: "194", jen: "195", lja: "196", nsk: "197", "o d": "198", "o i": "199", "om ": "200", ora: "201", ovo: "202", raz: "203", r\u017Ea: "204", tak: "205", "va ": "206", ven: "207", \u017Eav: "208", " me": "209", " \u010De": "210", ame: "211", avi: "212", "e i": "213", "e o": "214", eka: "215", gre: "216", "i t": "217", ija: "218", "il ": "219", ite: "220", kra: "221", lju: "222", mor: "223", nik: "224", "o t": "225", obi: "226", odn: "227", ran: "228", "re ": "229", sto: "230", stv: "231", udi: "232", "v i": "233", van: "234", " am": "235", " sp": "236", " st": "237", " tu": "238", " ve": "239", " \u017Ee": "240", ajo: "241", ale: "242", apo: "243", dal: "244", dru: "245", "e j": "246", edn: "247", ejo: "248", elo: "249", est: "250", etj: "251", eva: "252", iji: "253", "ik ": "254", "im ": "255", itv: "256", mob: "257", nap: "258", nek: "259", pol: "260", pos: "261", rat: "262", ski: "263", ti\u010D: "264", tom: "265", ton: "266", tra: "267", tud: "268", tve: "269", "v b": "270", vil: "271", vse: "272", \u010Dit: "273", " av": "274", " gr": "275", "a z": "276", ans: "277", ast: "278", avt: "279", dan: "280", "e m": "281", eds: "282", for: "283", "i z": "284", kot: "285", "mi ": "286", nim: "287", "o b": "288", "o o": "289", "od ": "290", odl: "291", oiz: "292", "ot ": "293", par: "294", pot: "295", rje: "296", roi: "297", tem: "298", val: "299" }, somali: { "ka ": "0", "ay ": "1", "da ": "2", " ay": "3", aal: "4", "oo ": "5", aan: "6", " ka": "7", "an ": "8", "in ": "9", " in": "10", ada: "11", maa: "12", aba: "13", " so": "14", ali: "15", bad: "16", add: "17", soo: "18", " na": "19", aha: "20", "ku ": "21", "ta ": "22", " wa": "23", "yo ": "24", "a s": "25", oma: "26", yaa: "27", " ba": "28", " ku": "29", " la": "30", " oo": "31", iya: "32", sha: "33", "a a": "34", dda: "35", nab: "36", nta: "37", " da": "38", " ma": "39", nka: "40", "uu ": "41", "y i": "42", aya: "43", "ha ": "44", raa: "45", " dh": "46", " qa": "47", "a k": "48", ala: "49", baa: "50", doo: "51", had: "52", liy: "53", oom: "54", " ha": "55", " sh": "56", "a d": "57", "a i": "58", "a n": "59", aar: "60", "ee ": "61", "ey ": "62", "y k": "63", "ya ": "64", " ee": "65", " iy": "66", "aa ": "67", aaq: "68", gaa: "69", lam: "70", " bu": "71", "a b": "72", "a m": "73", "ad ": "74", aga: "75", ama: "76", iyo: "77", "la ": "78", "a c": "79", "a l": "80", een: "81", int: "82", she: "83", wax: "84", yee: "85", " si": "86", " uu": "87", "a h": "88", aas: "89", alk: "90", dha: "91", "gu ": "92", hee: "93", "ii ": "94", ira: "95", mad: "96", "o a": "97", "o k": "98", qay: "99", " ah": "100", " ca": "101", " wu": "102", ank: "103", ash: "104", axa: "105", eed: "106", "en ": "107", "ga ": "108", haa: "109", "n a": "110", "n s": "111", naa: "112", nay: "113", "o d": "114", taa: "115", "u b": "116", uxu: "117", wux: "118", xuu: "119", " ci": "120", " do": "121", " ho": "122", " ta": "123", "a g": "124", "a u": "125", ana: "126", ayo: "127", dhi: "128", iin: "129", lag: "130", lin: "131", lka: "132", "o i": "133", san: "134", "u s": "135", una: "136", uun: "137", " ga": "138", " xa": "139", " xu": "140", aab: "141", abt: "142", "aq ": "143", aqa: "144", ara: "145", arl: "146", caa: "147", cir: "148", eeg: "149", eel: "150", isa: "151", kal: "152", lah: "153", ney: "154", qaa: "155", rla: "156", sad: "157", sii: "158", "u d": "159", wad: "160", " ad": "161", " ar": "162", " di": "163", " jo": "164", " ra": "165", " sa": "166", " u ": "167", " yi": "168", "a j": "169", "a q": "170", aad: "171", aat: "172", aay: "173", "ah ": "174", ale: "175", amk: "176", ari: "177", "as ": "178", aye: "179", bus: "180", dal: "181", ddu: "182", dii: "183", "du ": "184", duu: "185", "ed ": "186", ege: "187", gey: "188", hay: "189", hii: "190", ida: "191", ine: "192", joo: "193", laa: "194", lay: "195", mar: "196", mee: "197", "n b": "198", "n d": "199", "n m": "200", "no ": "201", "o b": "202", "o l": "203", oog: "204", oon: "205", rga: "206", "sh ": "207", sid: "208", "u q": "209", unk: "210", ush: "211", "xa ": "212", "y d": "213", " bi": "214", " gu": "215", " is": "216", " ke": "217", " lo": "218", " me": "219", " mu": "220", " qo": "221", " ug": "222", "a e": "223", "a o": "224", "a w": "225", adi: "226", ado: "227", agu: "228", "al ": "229", ant: "230", ark: "231", asa: "232", awi: "233", bta: "234", bul: "235", "d a": "236", dag: "237", dan: "238", "do ": "239", "e s": "240", gal: "241", gay: "242", guu: "243", "h e": "244", hal: "245", iga: "246", ihi: "247", iri: "248", iye: "249", ken: "250", lad: "251", lid: "252", lsh: "253", mag: "254", mun: "255", "n h": "256", "n i": "257", "na ": "258", "o n": "259", "o w": "260", ood: "261", oor: "262", ora: "263", qab: "264", qor: "265", rab: "266", rit: "267", rta: "268", "s o": "269", sab: "270", ska: "271", "to ": "272", "u a": "273", "u h": "274", "u u": "275", "ud ": "276", ugu: "277", uls: "278", uud: "279", waa: "280", xus: "281", "y b": "282", "y q": "283", "y s": "284", yad: "285", yay: "286", yih: "287", " aa": "288", " bo": "289", " br": "290", " go": "291", " ji": "292", " mi": "293", " of": "294", " ti": "295", " um": "296", " wi": "297", " xo": "298", "a x": "299" }, spanish: { " de": "0", "de ": "1", " la": "2", "os ": "3", "la ": "4", "el ": "5", "es ": "6", " qu": "7", " co": "8", "e l": "9", "as ": "10", que: "11", " el": "12", "ue ": "13", "en ": "14", ent: "15", " en": "16", " se": "17", nte: "18", res: "19", con: "20", est: "21", " es": "22", "s d": "23", " lo": "24", " pr": "25", los: "26", " y ": "27", "do ": "28", "\xF3n ": "29", i\u00F3n: "30", " un": "31", ci\u00F3: "32", del: "33", "o d": "34", " po": "35", "a d": "36", aci: "37", sta: "38", "te ": "39", ado: "40", pre: "41", "to ": "42", par: "43", "a e": "44", "a l": "45", "ra ": "46", "al ": "47", "e e": "48", "se ": "49", pro: "50", "ar ": "51", "ia ": "52", "o e": "53", " re": "54", ida: "55", dad: "56", tra: "57", por: "58", "s p": "59", " a ": "60", "a p": "61", ara: "62", cia: "63", " pa": "64", com: "65", "no ": "66", " di": "67", " in": "68", ien: "69", "n l": "70", "ad ": "71", ant: "72", "e s": "73", men: "74", "a c": "75", "on ": "76", "un ": "77", las: "78", nci: "79", " tr": "80", cio: "81", ier: "82", nto: "83", tiv: "84", "n d": "85", "n e": "86", "or ": "87", "s c": "88", enc: "89", ern: "90", "io ": "91", "a s": "92", ici: "93", "s e": "94", " ma": "95", dos: "96", "e a": "97", "e c": "98", emp: "99", ica: "100", ivo: "101", "l p": "102", "n c": "103", "r e": "104", "ta ": "105", ter: "106", "e d": "107", esa: "108", "ez ": "109", mpr: "110", "o a": "111", "s a": "112", " ca": "113", " su": "114", ion: "115", " cu": "116", " ju": "117", "an ": "118", "da ": "119", ene: "120", ero: "121", "na ": "122", rec: "123", "ro ": "124", tar: "125", " al": "126", " an": "127", bie: "128", "e p": "129", "er ": "130", "l c": "131", "n p": "132", omp: "133", ten: "134", " em": "135", ist: "136", nes: "137", nta: "138", "o c": "139", "so ": "140", tes: "141", era: "142", "l d": "143", "l m": "144", les: "145", ntr: "146", "o s": "147", ore: "148", "r\xE1 ": "149", "s q": "150", "s y": "151", sto: "152", "a a": "153", "a r": "154", ari: "155", des: "156", "e q": "157", ivi: "158", lic: "159", "lo ": "160", "n a": "161", one: "162", ora: "163", per: "164", pue: "165", "r l": "166", "re ": "167", ren: "168", una: "169", "\xEDa ": "170", ada: "171", cas: "172", ere: "173", ide: "174", min: "175", "n s": "176", ndo: "177", ran: "178", rno: "179", " ac": "180", " ex": "181", " go": "182", " no": "183", "a t": "184", aba: "185", ble: "186", ece: "187", ect: "188", "l a": "189", "l g": "190", lid: "191", nsi: "192", ons: "193", rac: "194", rio: "195", str: "196", uer: "197", ust: "198", " ha": "199", " le": "200", " mi": "201", " mu": "202", " ob": "203", " pe": "204", " pu": "205", " so": "206", "a i": "207", ale: "208", "ca ": "209", cto: "210", "e i": "211", "e u": "212", eso: "213", fer: "214", fic: "215", gob: "216", "jo ": "217", "ma ": "218", mpl: "219", "o p": "220", obi: "221", "s m": "222", "sa ": "223", sep: "224", ste: "225", sti: "226", tad: "227", tod: "228", "y s": "229", " ci": "230", and: "231", ces: "232", "c\xF3 ": "233", dor: "234", "e m": "235", eci: "236", eco: "237", esi: "238", int: "239", iza: "240", "l e": "241", lar: "242", mie: "243", ner: "244", orc: "245", rci: "246", ria: "247", tic: "248", tor: "249", " as": "250", " si": "251", "ce ": "252", den: "253", "e r": "254", "e t": "255", end: "256", eri: "257", esp: "258", ial: "259", ido: "260", ina: "261", inc: "262", mit: "263", "o l": "264", ome: "265", pli: "266", ras: "267", "s t": "268", sid: "269", sup: "270", tab: "271", uen: "272", ues: "273", ura: "274", "vo ": "275", vor: "276", " sa": "277", " ti": "278", abl: "279", ali: "280", aso: "281", ast: "282", cor: "283", cti: "284", cue: "285", div: "286", duc: "287", ens: "288", eti: "289", imi: "290", ini: "291", lec: "292", "o q": "293", oce: "294", ort: "295", ral: "296", rma: "297", roc: "298", rod: "299" }, swahili: { " wa": "0", "wa ": "1", "a k": "2", "a m": "3", " ku": "4", " ya": "5", "a w": "6", "ya ": "7", "ni ": "8", " ma": "9", "ka ": "10", "a u": "11", "na ": "12", "za ": "13", "ia ": "14", " na": "15", ika: "16", "ma ": "17", ali: "18", "a n": "19", " am": "20", ili: "21", kwa: "22", " kw": "23", ini: "24", " ha": "25", ame: "26", ana: "27", "i n": "28", " za": "29", "a h": "30", ema: "31", "i m": "32", "i y": "33", kuw: "34", "la ": "35", "o w": "36", "a y": "37", ata: "38", sem: "39", " la": "40", ati: "41", chi: "42", "i w": "43", uwa: "44", aki: "45", "li ": "46", eka: "47", ira: "48", " nc": "49", "a s": "50", iki: "51", kat: "52", nch: "53", " ka": "54", " ki": "55", "a b": "56", aji: "57", amb: "58", "ra ": "59", "ri ": "60", rik: "61", ada: "62", mat: "63", mba: "64", mes: "65", "yo ": "66", "zi ": "67", "da ": "68", "hi ": "69", "i k": "70", "ja ": "71", kut: "72", tek: "73", wan: "74", " bi": "75", "a a": "76", aka: "77", "ao ": "78", asi: "79", cha: "80", ese: "81", eza: "82", "ke ": "83", moj: "84", oja: "85", " hi": "86", "a z": "87", end: "88", "ha ": "89", "ji ": "90", "mu ": "91", shi: "92", wat: "93", " bw": "94", ake: "95", ara: "96", "bw ": "97", "i h": "98", imb: "99", tik: "100", wak: "101", wal: "102", " hu": "103", " mi": "104", " mk": "105", " ni": "106", " ra": "107", " um": "108", "a l": "109", ate: "110", esh: "111", ina: "112", ish: "113", kim: "114", "o k": "115", " ir": "116", "a i": "117", ala: "118", ani: "119", "aq ": "120", azi: "121", hin: "122", "i a": "123", idi: "124", ima: "125", ita: "126", rai: "127", raq: "128", sha: "129", " ms": "130", " se": "131", afr: "132", ama: "133", ano: "134", "ea ": "135", ele: "136", fri: "137", "go ": "138", "i i": "139", ifa: "140", iwa: "141", iyo: "142", kus: "143", lia: "144", lio: "145", maj: "146", mku: "147", "no ": "148", tan: "149", uli: "150", uta: "151", wen: "152", " al": "153", "a j": "154", aad: "155", aid: "156", ari: "157", awa: "158", "ba ": "159", "fa ": "160", nde: "161", nge: "162", nya: "163", "o y": "164", "u w": "165", "ua ": "166", umo: "167", waz: "168", "ye ": "169", " ut": "170", " vi": "171", "a d": "172", "a t": "173", aif: "174", "di ": "175", ere: "176", ing: "177", kin: "178", nda: "179", "o n": "180", "oa ": "181", tai: "182", toa: "183", usa: "184", uto: "185", was: "186", yak: "187", "zo ": "188", " ji": "189", " mw": "190", "a p": "191", aia: "192", amu: "193", ang: "194", bik: "195", "bo ": "196", del: "197", "e w": "198", ene: "199", eng: "200", ich: "201", iri: "202", iti: "203", ito: "204", "ki ": "205", kir: "206", "ko ": "207", kuu: "208", mar: "209", mbo: "210", mil: "211", ngi: "212", ngo: "213", "o l": "214", ong: "215", "si ": "216", "ta ": "217", tak: "218", "u y": "219", umu: "220", usi: "221", "uu ": "222", wam: "223", " af": "224", " ba": "225", " li": "226", " si": "227", " zi": "228", "a v": "229", ami: "230", atu: "231", awi: "232", eri: "233", fan: "234", fur: "235", ger: "236", "i z": "237", isi: "238", izo: "239", lea: "240", mbi: "241", mwa: "242", nye: "243", "o h": "244", "o m": "245", oni: "246", rez: "247", saa: "248", ser: "249", sin: "250", tat: "251", tis: "252", "tu ": "253", uin: "254", uki: "255", "ur ": "256", "wi ": "257", yar: "258", " da": "259", " en": "260", " mp": "261", " ny": "262", " ta": "263", " ul": "264", " we": "265", "a c": "266", "a f": "267", ais: "268", apo: "269", ayo: "270", bar: "271", dhi: "272", "e a": "273", eke: "274", eny: "275", eon: "276", hai: "277", han: "278", hiy: "279", hur: "280", "i s": "281", imw: "282", kal: "283", kwe: "284", lak: "285", lam: "286", mak: "287", msa: "288", "ne ": "289", ngu: "290", "ru ": "291", sal: "292", swa: "293", "te ": "294", "ti ": "295", uku: "296", uma: "297", una: "298", uru: "299" }, swedish: { "en ": "0", " de": "1", "et ": "2", "er ": "3", "tt ": "4", "om ": "5", f\u00F6r: "6", "ar ": "7", "de ": "8", att: "9", " f\xF6": "10", ing: "11", " in": "12", " at": "13", " i ": "14", det: "15", "ch ": "16", "an ": "17", gen: "18", " an": "19", "t s": "20", som: "21", "te ": "22", " oc": "23", ter: "24", " ha": "25", lle: "26", och: "27", " sk": "28", " so": "29", "ra ": "30", "r a": "31", " me": "32", var: "33", nde: "34", "\xE4r ": "35", " ko": "36", "on ": "37", ans: "38", int: "39", "n s": "40", "na ": "41", " en": "42", " fr": "43", " p\xE5": "44", " st": "45", " va": "46", and: "47", nte: "48", "p\xE5 ": "49", ska: "50", "ta ": "51", " vi": "52", der: "53", \u00E4ll: "54", \u00F6rs: "55", " om": "56", "da ": "57", kri: "58", "ka ": "59", nst: "60", " ho": "61", "as ": "62", st\u00E4: "63", "r d": "64", "t f": "65", upp: "66", " be": "67", nge: "68", "r s": "69", tal: "70", t\u00E4l: "71", "\xF6r ": "72", " av": "73", ger: "74", ill: "75", "ng ": "76", "e s": "77", ekt: "78", ade: "79", era: "80", ers: "81", har: "82", "ll ": "83", lld: "84", rin: "85", rna: "86", s\u00E4k: "87", und: "88", inn: "89", lig: "90", "ns ": "91", " ma": "92", " pr": "93", " up": "94", age: "95", "av ": "96", iva: "97", kti: "98", lda: "99", orn: "100", son: "101", "ts ": "102", tta: "103", \u00E4kr: "104", " sj": "105", " ti": "106", avt: "107", ber: "108", els: "109", eta: "110", kol: "111", men: "112", "n d": "113", "t k": "114", vta: "115", "\xE5r ": "116", juk: "117", man: "118", "n f": "119", nin: "120", "r i": "121", rs\u00E4: "122", sju: "123", sso: "124", " \xE4r": "125", "a s": "126", ach: "127", "ag ": "128", bac: "129", den: "130", ett: "131", fte: "132", hor: "133", nba: "134", oll: "135", rnb: "136", ste: "137", til: "138", " ef": "139", " si": "140", "a a": "141", "e h": "142", "ed ": "143", eft: "144", "ga ": "145", "ig ": "146", "it ": "147", ler: "148", med: "149", "n i": "150", "nd ": "151", "s\xE5 ": "152", tiv: "153", " bl": "154", " et": "155", " fi": "156", " s\xE4": "157", "at ": "158", des: "159", "e a": "160", gar: "161", get: "162", lan: "163", lss: "164", ost: "165", "r b": "166", "r e": "167", "re ": "168", ret: "169", sta: "170", "t i": "171", " ge": "172", " he": "173", " re": "174", "a f": "175", all: "176", bos: "177", ets: "178", lek: "179", let: "180", ner: "181", nna: "182", nne: "183", "r f": "184", rit: "185", "s s": "186", sen: "187", sto: "188", tor: "189", vav: "190", ygg: "191", " ka": "192", " s\xE5": "193", " tr": "194", " ut": "195", "ad ": "196", "al ": "197", are: "198", "e o": "199", gon: "200", kom: "201", "n a": "202", "n h": "203", nga: "204", "r h": "205", ren: "206", "t d": "207", tag: "208", tar: "209", tre: "210", \u00E4tt: "211", " f\xE5": "212", " h\xE4": "213", " se": "214", "a d": "215", "a i": "216", "a p": "217", ale: "218", ann: "219", ara: "220", byg: "221", "gt ": "222", han: "223", igt: "224", kan: "225", "la ": "226", "n o": "227", nom: "228", nsk: "229", omm: "230", "r k": "231", "r p": "232", "r v": "233", "s f": "234", "s k": "235", "t a": "236", "t p": "237", ver: "238", " bo": "239", " br": "240", " ku": "241", " n\xE5": "242", "a b": "243", "a e": "244", del: "245", ens: "246", "es ": "247", fin: "248", ige: "249", "m s": "250", "n p": "251", n\u00E5g: "252", "or ": "253", "r o": "254", rbe: "255", "rs ": "256", "rt ": "257", "s a": "258", "s n": "259", skr: "260", "t o": "261", ten: "262", tio: "263", ven: "264", " al": "265", " ja": "266", " p ": "267", " r ": "268", " sa": "269", "a h": "270", bet: "271", cke: "272", dra: "273", "e f": "274", "e i": "275", eda: "276", eno: "277", er\u00E4: "278", ess: "279", ion: "280", jag: "281", "m f": "282", "ne ": "283", nns: "284", pro: "285", "r t": "286", rar: "287", riv: "288", r\u00E4t: "289", "t e": "290", "t t": "291", ust: "292", vad: "293", \u00F6re: "294", " ar": "295", " by": "296", " kr": "297", " mi": "298", arb: "299" }, tagalog: { "ng ": "0", ang: "1", " na": "2", " sa": "3", "an ": "4", nan: "5", "sa ": "6", "na ": "7", " ma": "8", " ca": "9", "ay ": "10", "n g": "11", " an": "12", ong: "13", " ga": "14", "at ": "15", " pa": "16", ala: "17", " si": "18", "a n": "19", "ga ": "20", "g n": "21", "g m": "22", ito: "23", "g c": "24", man: "25", san: "26", "g s": "27", ing: "28", "to ": "29", ila: "30", ina: "31", " di": "32", " ta": "33", aga: "34", iya: "35", aca: "36", "g t": "37", " at": "38", aya: "39", ama: "40", lan: "41", "a a": "42", qui: "43", "a c": "44", "a s": "45", nag: "46", " ba": "47", "g i": "48", tan: "49", "'t ": "50", " cu": "51", aua: "52", "g p": "53", " ni": "54", "os ": "55", "'y ": "56", "a m": "57", " n ": "58", "la ": "59", " la": "60", "o n": "61", yan: "62", " ay": "63", usa: "64", cay: "65", "on ": "66", "ya ": "67", " it": "68", "al ": "69", apa: "70", ata: "71", "t n": "72", uan: "73", aha: "74", asa: "75", pag: "76", " gu": "77", "g l": "78", "di ": "79", mag: "80", aba: "81", "g a": "82", ara: "83", "a p": "84", "in ": "85", ana: "86", "it ": "87", "si ": "88", cus: "89", "g b": "90", uin: "91", "a t": "92", "as ": "93", "n n": "94", hin: "95", " hi": "96", "a't": "97", ali: "98", " bu": "99", gan: "100", uma: "101", "a d": "102", agc: "103", aqu: "104", "g d": "105", " tu": "106", aon: "107", ari: "108", cas: "109", "i n": "110", niy: "111", pin: "112", "a i": "113", gca: "114", siy: "115", "a'y": "116", yao: "117", "ag ": "118", "ca ": "119", han: "120", ili: "121", pan: "122", sin: "123", ual: "124", "n s": "125", nam: "126", " lu": "127", can: "128", dit: "129", gui: "130", "y n": "131", gal: "132", hat: "133", nal: "134", " is": "135", bag: "136", fra: "137", " fr": "138", " su": "139", "a l": "140", " co": "141", ani: "142", " bi": "143", " da": "144", alo: "145", isa: "146", ita: "147", may: "148", "o s": "149", sil: "150", una: "151", " in": "152", " pi": "153", "l n": "154", nil: "155", "o a": "156", pat: "157", sac: "158", "t s": "159", " ua": "160", agu: "161", ail: "162", bin: "163", dal: "164", "g h": "165", ndi: "166", oon: "167", "ua ": "168", " ha": "169", ind: "170", ran: "171", "s n": "172", tin: "173", ulo: "174", eng: "175", "g f": "176", ini: "177", lah: "178", "lo ": "179", rai: "180", rin: "181", ton: "182", "g u": "183", inu: "184", lon: "185", "o'y": "186", "t a": "187", " ar": "188", "a b": "189", "ad ": "190", bay: "191", cal: "192", gya: "193", ile: "194", mat: "195", "n a": "196", pau: "197", "ra ": "198", tay: "199", "y m": "200", ant: "201", ban: "202", "i m": "203", nas: "204", nay: "205", "no ": "206", sti: "207", " ti": "208", ags: "209", "g g": "210", "ta ": "211", uit: "212", uno: "213", " ib": "214", " ya": "215", "a u": "216", abi: "217", ati: "218", cap: "219", "ig ": "220", "is ": "221", "la'": "222", " do": "223", " pu": "224", api: "225", ayo: "226", gos: "227", gul: "228", lal: "229", tag: "230", til: "231", tun: "232", "y c": "233", "y s": "234", yon: "235", ano: "236", bur: "237", iba: "238", isi: "239", lam: "240", nac: "241", nat: "242", "ni ": "243", nto: "244", "od ": "245", "pa ": "246", rgo: "247", urg: "248", " m ": "249", adr: "250", ast: "251", cag: "252", gay: "253", gsi: "254", "i p": "255", ino: "256", len: "257", lin: "258", "m g": "259", mar: "260", nah: "261", "to'": "262", " de": "263", "a h": "264", cat: "265", cau: "266", con: "267", iqu: "268", lac: "269", mab: "270", min: "271", "og ": "272", par: "273", sal: "274", " za": "275", "ao ": "276", doo: "277", ipi: "278", nod: "279", nte: "280", uha: "281", ula: "282", " re": "283", ill: "284", lit: "285", mac: "286", nit: "287", "o't": "288", "or ": "289", ora: "290", sum: "291", "y p": "292", " al": "293", " mi": "294", " um": "295", aco: "296", ada: "297", agd: "298", cab: "299" }, turkish: { lar: "0", "en ": "1", ler: "2", "an ": "3", "in ": "4", " bi": "5", " ya": "6", eri: "7", "de ": "8", " ka": "9", "ir ": "10", ar\u0131: "11", " ba": "12", " de": "13", " ha": "14", "\u0131n ": "15", ara: "16", bir: "17", " ve": "18", " sa": "19", ile: "20", "le ": "21", nde: "22", "da ": "23", " bu": "24", ana: "25", ini: "26", \u0131n\u0131: "27", "er ": "28", "ve ": "29", " y\u0131": "30", lma: "31", y\u0131l: "32", " ol": "33", "ar ": "34", "n b": "35", nda: "36", aya: "37", "li ": "38", as\u0131: "39", " ge": "40", ind: "41", "n k": "42", esi: "43", lan: "44", nla: "45", "ak ": "46", an\u0131: "47", eni: "48", "ni ": "49", "n\u0131 ": "50", r\u0131n: "51", san: "52", " ko": "53", " ye": "54", maz: "55", ba\u015F: "56", ili: "57", rin: "58", al\u0131: "59", "az ": "60", hal: "61", \u0131nd: "62", " da": "63", " g\xFC": "64", ele: "65", \u0131lm: "66", \u0131\u011F\u0131: "67", eki: "68", g\u00FCn: "69", "i b": "70", i\u00E7i: "71", den: "72", kar: "73", "si ": "74", " il": "75", "e y": "76", "na ": "77", yor: "78", "ek ": "79", "n s": "80", " i\xE7": "81", "bu ": "82", "e b": "83", "im ": "84", "ki ": "85", len: "86", "ri ": "87", s\u0131n: "88", " so": "89", "\xFCn ": "90", " ta": "91", nin: "92", i\u011Fi: "93", tan: "94", yan: "95", " si": "96", nat: "97", n\u0131n: "98", kan: "99", "r\u0131 ": "100", \u00E7in: "101", "\u011F\u0131 ": "102", eli: "103", "n a": "104", "\u0131r ": "105", " an": "106", ine: "107", "n y": "108", ola: "109", " ar": "110", "al ": "111", "e s": "112", lik: "113", "n d": "114", sin: "115", " al": "116", " d\xFC": "117", anl: "118", "ne ": "119", "ya ": "120", "\u0131m ": "121", \u0131na: "122", " be": "123", ada: "124", ala: "125", ama: "126", ilm: "127", "or ": "128", "s\u0131 ": "129", yen: "130", " me": "131", at\u0131: "132", "di ": "133", eti: "134", ken: "135", "la ": "136", "l\u0131 ": "137", oru: "138", " g\xF6": "139", " in": "140", and: "141", "e d": "142", men: "143", "un ": "144", \u00F6ne: "145", "a d": "146", "at ": "147", "e a": "148", "e g": "149", yar: "150", " ku": "151", ay\u0131: "152", dan: "153", edi: "154", iri: "155", \u00FCn\u00FC: "156", "\u011Fi ": "157", \u0131l\u0131: "158", eme: "159", e\u011Fi: "160", "i k": "161", "i y": "162", \u0131la: "163", " \xE7a": "164", "a y": "165", alk: "166", "d\u0131 ": "167", ede: "168", "el ": "169", nd\u0131: "170", "ra ": "171", \u00FCne: "172", " s\xFC": "173", d\u0131r: "174", "e k": "175", ere: "176", "ik ": "177", imi: "178", i\u015Fi: "179", mas: "180", "n h": "181", s\u00FCr: "182", yle: "183", " ad": "184", " fi": "185", " gi": "186", " se": "187", "a k": "188", arl: "189", a\u015F\u0131: "190", iyo: "191", kla: "192", l\u0131\u011F: "193", nem: "194", ney: "195", rme: "196", ste: "197", "t\u0131 ": "198", unl: "199", ver: "200", " s\u0131": "201", " te": "202", " to": "203", "a s": "204", a\u015Fk: "205", ekl: "206", end: "207", kal: "208", li\u011F: "209", min: "210", t\u0131r: "211", ulu: "212", unu: "213", yap: "214", "ye ": "215", "\u0131 i": "216", \u015Fka: "217", \u015Ft\u0131: "218", " b\xFC": "219", " ke": "220", " ki": "221", ard: "222", art: "223", a\u015Fa: "224", "n i": "225", ndi: "226", "ti ": "227", top: "228", "\u0131 b": "229", " va": "230", " \xF6n": "231", aki: "232", cak: "233", "ey ": "234", fil: "235", isi: "236", kle: "237", kur: "238", man: "239", nce: "240", nle: "241", nun: "242", rak: "243", "\u0131k ": "244", " en": "245", " yo": "246", "a g": "247", lis: "248", mak: "249", "n g": "250", tir: "251", yas: "252", " i\u015F": "253", " y\xF6": "254", ale: "255", bil: "256", bul: "257", "et ": "258", "i d": "259", iye: "260", kil: "261", "ma ": "262", "n e": "263", "n t": "264", "nu ": "265", olu: "266", rla: "267", "te ": "268", y\u00F6n: "269", \u00E7\u0131k: "270", " ay": "271", " m\xFC": "272", " \xE7o": "273", " \xE7\u0131": "274", "a a": "275", "a b": "276", ata: "277", der: "278", gel: "279", "i g": "280", "i i": "281", ill: "282", ist: "283", ld\u0131: "284", "lu ": "285", mek: "286", mle: "287", "n \xE7": "288", onu: "289", opl: "290", ran: "291", rat: "292", rd\u0131: "293", rke: "294", siy: "295", son: "296", "ta ": "297", t\u00E7\u0131: "298", t\u0131n: "299" }, ukrainian: { " \u043D\u0430": "0", " \u0437\u0430": "1", \u043D\u043D\u044F: "2", "\u043D\u044F ": "3", "\u043D\u0430 ": "4", " \u043F\u0440": "5", \u043E\u0433\u043E: "6", "\u0433\u043E ": "7", \u0441\u044C\u043A: "8", " \u043F\u043E": "9", " \u0443 ": "10", \u0432\u0456\u0434: "11", \u0435\u0440\u0435: "12", " \u043C\u0456": "13", " \u043D\u0435": "14", "\u0438\u0445 ": "15", "\u0442\u044C ": "16", \u043F\u0435\u0440: "17", " \u0432\u0456": "18", "\u0456\u0432 ": "19", " \u043F\u0435": "20", " \u0449\u043E": "21", \u043B\u044C\u043D: "22", "\u043C\u0438 ": "23", "\u043D\u0456 ": "24", "\u043D\u0435 ": "25", "\u0442\u0438 ": "26", \u0430\u0442\u0438: "27", \u0435\u043D\u043D: "28", \u043C\u0456\u0441: "29", \u043F\u0440\u0430: "30", \u0443\u0432\u0430: "31", \u043D\u0438\u043A: "32", \u043F\u0440\u043E: "33", \u0440\u0430\u0432: "34", \u0456\u0432\u043D: "35", " \u0442\u0430": "36", \u0431\u0443\u0434: "37", \u0432\u043B\u0456: "38", \u0440\u0456\u0432: "39", " \u043A\u043E": "40", " \u0440\u0456": "41", \u0430\u043B\u044C: "42", "\u043D\u043E ": "43", \u043E\u043C\u0443: "44", "\u0449\u043E ": "45", " \u0432\u0438": "46", "\u043C\u0443 ": "47", \u0440\u0435\u0432: "48", "\u0441\u044F ": "49", \u0456\u043D\u043D: "50", " \u0434\u043E": "51", " \u0443\u043F": "52", \u0430\u0432\u043B: "53", \u0430\u043D\u043D: "54", \u043A\u043E\u043C: "55", "\u043B\u0438 ": "56", \u043B\u0456\u043D: "57", \u043D\u043E\u0433: "58", \u0443\u043F\u0440: "59", " \u0431\u0443": "60", " \u0437 ": "61", " \u0440\u043E": "62", "\u0437\u0430 ": "63", "\u0438 \u043D": "64", \u043D\u043E\u0432: "65", \u043E\u0440\u043E: "66", \u043E\u0441\u0442: "67", \u0441\u0442\u0430: "68", "\u0442\u0456 ": "69", \u044E\u0442\u044C: "70", " \u043C\u043E": "71", " \u043D\u0456": "72", " \u044F\u043A": "73", \u0431\u043E\u0440: "74", "\u0432\u0430 ": "75", \u0432\u0430\u043D: "76", \u0435\u043D\u044C: "77", "\u0438 \u043F": "78", "\u043D\u044C ": "79", \u043E\u0432\u0456: "80", \u0440\u043E\u043D: "81", \u0441\u0442\u0456: "82", "\u0442\u0430 ": "83", "\u0443 \u0432": "84", \u044C\u043A\u043E: "85", \u0456\u0441\u0442: "86", " \u0432 ": "87", " \u0440\u0435": "88", "\u0434\u043E ": "89", "\u0435 \u043F": "90", \u0437\u0430\u0431: "91", "\u0438\u0439 ": "92", \u043D\u0441\u044C: "93", "\u043E \u0432": "94", "\u043E \u043F": "95", \u043F\u0440\u0438: "96", "\u0456 \u043F": "97", " \u043A\u0443": "98", " \u043F\u0456": "99", " \u0441\u043F": "100", "\u0430 \u043F": "101", \u0430\u0431\u043E: "102", \u0430\u043D\u0441: "103", \u0430\u0446\u0456: "104", \u0432\u0430\u0442: "105", \u0432\u043D\u0438: "106", "\u0438 \u0432": "107", \u0438\u043C\u0438: "108", "\u043A\u0430 ": "109", \u043D\u0435\u043D: "110", \u043D\u0456\u0447: "111", \u043E\u043D\u0430: "112", "\u043E\u0457 ": "113", \u043F\u043E\u0432: "114", \u044C\u043A\u0438: "115", \u044C\u043D\u043E: "116", \u0456\u0437\u043D: "117", \u0456\u0447\u043D: "118", " \u0430\u0432": "119", " \u043C\u0430": "120", " \u043E\u0440": "121", " \u0441\u0443": "122", " \u0447\u0438": "123", " \u0456\u043D": "124", "\u0430 \u0437": "125", "\u0430\u043C ": "126", "\u0430\u0454 ": "127", \u0432\u043D\u0435: "128", \u0432\u0442\u043E: "129", \u0434\u043E\u043C: "130", \u0435\u043D\u0442: "131", \u0436\u0438\u0442: "132", \u0437\u043D\u0438: "133", "\u0438\u043C ": "134", \u0438\u0442\u043B: "135", "\u043B\u0430 ": "136", \u043D\u0438\u0445: "137", \u043D\u0438\u0446: "138", \u043E\u0432\u0430: "139", \u043E\u0432\u0438: "140", "\u043E\u043C ": "141", \u043F\u043E\u0440: "142", \u0442\u044C\u0441: "143", "\u0443 \u0440": "144", \u044C\u0441\u044F: "145", \u0456\u0434\u043E: "146", \u0456\u043B\u044C: "147", \u0456\u0441\u044C: "148", " \u0432\u0430": "149", " \u0434\u0456": "150", " \u0436\u0438": "151", " \u0447\u0435": "152", " \u0456 ": "153", "\u0430 \u0432": "154", "\u0430 \u043D": "155", \u0430\u043B\u0438: "156", \u0432\u0435\u0437: "157", \u0432\u043D\u043E: "158", \u0435\u0432\u0435: "159", \u0435\u0437\u0435: "160", \u0437\u0435\u043D: "161", \u0438\u0446\u0442: "162", "\u043A\u0438 ": "163", \u043A\u0438\u0445: "164", \u043A\u043E\u043D: "165", "\u043A\u0443 ": "166", \u043B\u0430\u0441: "167", "\u043B\u044F ": "168", \u043C\u043E\u0436: "169", \u043D\u0430\u0447: "170", \u043D\u0438\u043C: "171", \u043D\u043E\u0457: "172", "\u043E \u0431": "173", \u043E\u0432\u0443: "174", \u043E\u0434\u0438: "175", "\u043E\u044E ": "176", "\u0440\u043E ": "177", \u0440\u043E\u043A: "178", \u0441\u043D\u043E: "179", \u0441\u043F\u043E: "180", \u0442\u0430\u043A: "181", \u0442\u0432\u0430: "182", "\u0442\u0443 ": "183", "\u0443 \u043F": "184", \u0446\u0442\u0432: "185", \u044C\u043D\u0438: "186", "\u044F \u0437": "187", "\u0456 \u043C": "188", "\u0456\u0457 ": "189", " \u0432\u0441": "190", " \u0433\u0440": "191", " \u0434\u0435": "192", " \u043D\u043E": "193", " \u043F\u0430": "194", " \u0441\u0435": "195", " \u0443\u043A": "196", " \u0457\u0445": "197", "\u0430 \u043E": "198", \u0430\u0432\u0442: "199", \u0430\u0441\u0442: "200", \u0430\u044E\u0442: "201", \u0432\u0430\u0440: "202", \u0434\u0435\u043D: "203", "\u0434\u0438 ": "204", "\u0434\u0443 ": "205", \u0437\u043D\u0430: "206", "\u0438 \u0437": "207", \u0438\u043A\u043E: "208", \u0438\u0441\u044F: "209", \u0438\u0442\u0438: "210", \u043A\u043E\u0433: "211", \u043C\u0435\u043D: "212", \u043D\u043E\u043C: "213", "\u043D\u0443 ": "214", "\u043E \u043D": "215", "\u043E \u0441": "216", \u043E\u0431\u0443: "217", \u043E\u0432\u043E: "218", \u043F\u043B\u0430: "219", \u0440\u0430\u043D: "220", \u0440\u0438\u0432: "221", \u0440\u043E\u0431: "222", \u0441\u043A\u0430: "223", \u0442\u0430\u043D: "224", \u0442\u0438\u043C: "225", \u0442\u0438\u0441: "226", "\u0442\u043E ": "227", \u0442\u0440\u0430: "228", \u0443\u0434\u043E: "229", \u0447\u0438\u043D: "230", \u0447\u043D\u0438: "231", "\u0456 \u0432": "232", "\u0456\u044E ": "233", " \u0430 ": "234", " \u0432\u043E": "235", " \u0434\u0430": "236", " \u043A\u0432": "237", " \u043C\u0435": "238", " \u043E\u0431": "239", " \u0441\u043A": "240", " \u0442\u0438": "241", " \u0444\u0456": "242", " \u0454 ": "243", "\u0430 \u0440": "244", "\u0430 \u0441": "245", "\u0430 \u0443": "246", "\u0430\u043A ": "247", \u0430\u043D\u0456: "248", \u0430\u0440\u0442: "249", \u0430\u0441\u043D: "250", "\u0432 \u0443": "251", \u0432\u0438\u043A: "252", \u0432\u0456\u0437: "253", \u0434\u043E\u0432: "254", \u0434\u043F\u043E: "255", \u0434\u0456\u0432: "256", \u0435\u0432\u0456: "257", \u0435\u043D\u0441: "258", "\u0436\u0435 ": "259", "\u0438 \u043C": "260", "\u0438 \u0441": "261", \u0438\u043A\u0430: "262", \u0438\u0447\u043D: "263", "\u043A\u0456 ": "264", \u043A\u0456\u0432: "265", \u043C\u0456\u0436: "266", \u043D\u0430\u043D: "267", \u043D\u043E\u0441: "268", "\u043E \u0443": "269", \u043E\u0431\u043B: "270", \u043E\u0434\u043D: "271", "\u043E\u043A ": "272", \u043E\u043B\u043E: "273", \u043E\u0442\u0440: "274", \u0440\u0435\u043D: "275", \u0440\u0438\u043C: "276", \u0440\u043E\u0437: "277", "\u0441\u044C ": "278", "\u0441\u0456 ": "279", \u0442\u043B\u0430: "280", \u0442\u0456\u0432: "281", "\u0443 \u0437": "282", \u0443\u0433\u043E: "283", \u0443\u0434\u0456: "284", "\u0447\u0438 ": "285", "\u0448\u0435 ": "286", "\u044F \u043D": "287", "\u044F \u0443": "288", \u0456\u0434\u043F: "289", "\u0456\u0439 ": "290", \u0456\u043D\u0430: "291", "\u0456\u044F ": "292", " \u043A\u0430": "293", " \u043D\u0438": "294", " \u043E\u0441": "295", " \u0441\u0438": "296", " \u0442\u043E": "297", " \u0442\u0440": "298", " \u0443\u0433": "299" }, urdu: { "\u06CC\u06BA ": "0", " \u06A9\u06CC": "1", "\u06A9\u06D2 ": "2", " \u06A9\u06D2": "3", "\u0646\u06D2 ": "4", " \u06A9\u06C1": "5", "\u06D2 \u06A9": "6", "\u06A9\u06CC ": "7", \u0645\u06CC\u06BA: "8", " \u0645\u06CC": "9", "\u06C1\u06D2 ": "10", "\u0648\u06BA ": "11", "\u06A9\u06C1 ": "12", " \u06C1\u06D2": "13", "\u0627\u0646 ": "14", \u06C1\u06CC\u06BA: "15", "\u0648\u0631 ": "16", " \u06A9\u0648": "17", "\u06CC\u0627 ": "18", " \u0627\u0646": "19", " \u0646\u06D2": "20", "\u0633\u06D2 ": "21", " \u0633\u06D2": "22", " \u06A9\u0631": "23", \u0633\u062A\u0627: "24", " \u0627\u0648": "25", \u0627\u0648\u0631: "26", \u062A\u0627\u0646: "27", "\u0631 \u06A9": "28", "\u06CC \u06A9": "29", " \u0627\u0633": "30", "\u06D2 \u0627": "31", " \u067E\u0627": "32", " \u06C1\u0648": "33", " \u067E\u0631": "34", "\u0631\u0641 ": "35", " \u06A9\u0627": "36", "\u0627 \u06A9": "37", "\u06CC \u0627": "38", " \u06C1\u06CC": "39", "\u062F\u0631 ": "40", "\u06A9\u0648 ": "41", " \u0627\u06CC": "42", "\u06BA \u06A9": "43", " \u0645\u0634": "44", " \u0645\u0644": "45", "\u0627\u062A ": "46", \u0635\u062F\u0631: "47", \u0627\u06A9\u0633: "48", \u0634\u0631\u0641: "49", \u0645\u0634\u0631: "50", \u067E\u0627\u06A9: "51", \u06A9\u0633\u062A: "52", "\u06CC \u0645": "53", " \u062F\u06CC": "54", " \u0635\u062F": "55", " \u06CC\u06C1": "56", "\u0627 \u06C1": "57", "\u0646 \u06A9": "58", \u0648\u0627\u0644: "59", "\u06CC\u06C1 ": "60", "\u06D2 \u0648": "61", " \u0628\u06BE": "62", " \u062F\u0648": "63", "\u0627\u0633 ": "64", "\u0631 \u0627": "65", \u0646\u06C1\u06CC: "66", "\u06A9\u0627 ": "67", "\u06D2 \u0633": "68", "\u0626\u06CC ": "69", "\u06C1 \u0627": "70", "\u06CC\u062A ": "71", "\u06D2 \u06C1": "72", "\u062A \u06A9": "73", " \u0633\u0627": "74", "\u0644\u06D2 ": "75", "\u06C1\u0627 ": "76", "\u06D2 \u0628": "77", " \u0648\u0627": "78", "\u0627\u0631 ": "79", "\u0646\u06CC ": "80", \u06A9\u06C1\u0627: "81", "\u06CC \u06C1": "82", "\u06D2 \u0645": "83", " \u0633\u06CC": "84", " \u0644\u06CC": "85", \u0627\u0646\u06C1: "86", \u0627\u0646\u06CC: "87", "\u0631 \u0645": "88", "\u0631 \u067E": "89", \u0631\u06CC\u062A: "90", "\u0646 \u0645": "91", "\u06BE\u0627 ": "92", "\u06CC\u0631 ": "93", " \u062C\u0627": "94", " \u062C\u0646": "95", "\u0626\u06D2 ": "96", "\u067E\u0631 ": "97", "\u06BA \u0646": "98", "\u06C1 \u06A9": "99", "\u06CC \u0648": "100", "\u06D2 \u062F": "101", " \u062A\u0648": "102", " \u062A\u06BE": "103", " \u06AF\u06CC": "104", \u0627\u06CC\u06A9: "105", "\u0644 \u06A9": "106", "\u0646\u0627 ": "107", "\u06A9\u0631 ": "108", "\u06BA \u0645": "109", "\u06CC\u06A9 ": "110", " \u0628\u0627": "111", "\u0627 \u062A": "112", "\u062F\u06CC ": "113", "\u0646 \u0633": "114", \u06A9\u06CC\u0627: "115", \u06CC\u0648\u06BA: "116", "\u06D2 \u062C": "117", "\u0627\u0644 ": "118", "\u062A\u0648 ": "119", "\u06BA \u0627": "120", "\u06D2 \u067E": "121", " \u0686\u0627": "122", "\u0627\u0645 ": "123", \u0628\u06BE\u06CC: "124", "\u062A\u06CC ": "125", "\u062A\u06D2 ": "126", \u062F\u0648\u0633: "127", "\u0633 \u06A9": "128", \u0645\u0644\u06A9: "129", "\u0646 \u0627": "130", \u06C1\u0648\u0631: "131", "\u06CC\u06D2 ": "132", " \u0645\u0648": "133", " \u0648\u06A9": "134", \u0627\u0626\u06CC: "135", \u0627\u0631\u062A: "136", \u0627\u0644\u06D2: "137", \u0628\u06BE\u0627: "138", \u0631\u062F\u06CC: "139", "\u0631\u06CC ": "140", "\u0648\u06C1 ": "141", \u0648\u06CC\u0632: "142", "\u06BA \u062F": "143", "\u06BE\u06CC ": "144", "\u06CC \u0633": "145", " \u0631\u06C1": "146", " \u0645\u0646": "147", " \u0646\u06C1": "148", " \u0648\u0631": "149", " \u0648\u06C1": "150", " \u06C1\u0646": "151", "\u0627 \u0627": "152", \u0627\u0633\u062A: "153", "\u062A \u0627": "154", "\u062A \u067E": "155", "\u062F \u06A9": "156", "\u0632 \u0645": "157", "\u0646\u062F ": "158", \u0648\u0631\u062F: "159", \u0648\u06A9\u0644: "160", "\u06AF\u06CC ": "161", \u06AF\u06CC\u0627: "162", "\u06C1 \u067E": "163", "\u06CC\u0632 ": "164", "\u06D2 \u062A": "165", " \u0627\u0639": "166", " \u0627\u067E": "167", " \u062C\u0633": "168", " \u062C\u0645": "169", " \u062C\u0648": "170", " \u0633\u0631": "171", \u0627\u067E\u0646: "172", \u0627\u06A9\u062B: "173", \u062A\u06BE\u0627: "174", \u062B\u0631\u06CC: "175", \u062F\u06CC\u0627: "176", "\u0631 \u062F": "177", "\u0631\u062A ": "178", \u0631\u0648\u06CC: "179", "\u0633\u06CC ": "180", \u0645\u0644\u0627: "181", \u0646\u062F\u0648: "182", \u0648\u0633\u062A: "183", \u067E\u0631\u0648: "184", \u0686\u0627\u06C1: "185", \u06A9\u062B\u0631: "186", \u06A9\u0644\u0627: "187", "\u06C1 \u06C1": "188", \u06C1\u0646\u062F: "189", "\u06C1\u0648 ": "190", "\u06D2 \u0644": "191", " \u0627\u06A9": "192", " \u062F\u0627": "193", " \u0633\u0646": "194", " \u0648\u0632": "195", " \u067E\u06CC": "196", "\u0627 \u0686": "197", "\u0627\u0621 ": "198", \u0627\u062A\u06BE: "199", \u0627\u0642\u0627: "200", "\u0627\u06C1 ": "201", "\u062A\u06BE ": "202", "\u062F\u0648 ": "203", "\u0631 \u0628": "204", \u0631\u0648\u0627: "205", "\u0631\u06D2 ": "206", \u0633\u0627\u062A: "207", "\u0641 \u06A9": "208", \u0642\u0627\u062A: "209", "\u0644\u0627 ": "210", \u0644\u0627\u0621: "211", "\u0645 \u0645": "212", "\u0645 \u06A9": "213", "\u0645\u0646 ": "214", \u0646\u0648\u06BA: "215", "\u0648 \u0627": "216", \u06A9\u0631\u0646: "217", "\u06BA \u06C1": "218", \u06BE\u0627\u0631: "219", \u06C1\u0648\u0626: "220", "\u06C1\u06CC ": "221", "\u06CC\u0634 ": "222", " \u0627\u0645": "223", " \u0644\u0627": "224", " \u0645\u0633": "225", " \u067E\u0648": "226", " \u067E\u06C1": "227", \u0627\u0646\u06D2: "228", "\u062A \u0645": "229", "\u062A \u06C1": "230", "\u062C \u06A9": "231", \u062F\u0648\u0646: "232", \u0632\u06CC\u0631: "233", "\u0633 \u0633": "234", "\u0634 \u06A9": "235", "\u0641 \u0646": "236", "\u0644 \u06C1": "237", \u0644\u0627\u0642: "238", "\u0644\u06CC ": "239", \u0648\u0631\u06CC: "240", \u0648\u0632\u06CC: "241", \u0648\u0646\u0648: "242", \u06A9\u06BE\u0646: "243", "\u06AF\u0627 ": "244", "\u06BA \u0633": "245", "\u06BA \u06AF": "246", \u06BE\u0646\u06D2: "247", "\u06BE\u06D2 ": "248", "\u06C1 \u0628": "249", "\u06C1 \u062C": "250", "\u06C1\u0631 ": "251", "\u06CC \u0622": "252", "\u06CC \u067E": "253", " \u062D\u0627": "254", " \u0648\u0641": "255", " \u06AF\u0627": "256", "\u0627 \u062C": "257", "\u0627 \u06AF": "258", "\u0627\u062F ": "259", \u0627\u062F\u06CC: "260", \u0627\u0639\u0638: "261", \u0627\u06C1\u062A: "262", "\u062C\u0633 ": "263", \u062C\u0645\u06C1: "264", "\u062C\u0648 ": "265", "\u0631 \u0633": "266", "\u0631 \u06C1": "267", \u0631\u0646\u06D2: "268", "\u0633 \u0645": "269", "\u0633\u0627 ": "270", \u0633\u0646\u062F: "271", \u0633\u0646\u06AF: "272", "\u0638\u0645 ": "273", \u0639\u0638\u0645: "274", "\u0644 \u0645": "275", \u0644\u06CC\u06D2: "276", "\u0645\u0644 ": "277", \u0645\u0648\u06C1: "278", \u0645\u06C1\u0648: "279", \u0646\u06AF\u06BE: "280", "\u0648 \u0635": "281", \u0648\u0631\u0679: "282", \u0648\u06C1\u0646: "283", "\u06A9\u0646 ": "284", "\u06AF\u06BE ": "285", "\u06AF\u06D2 ": "286", "\u06BA \u062C": "287", "\u06BA \u0648": "288", "\u06BA \u06CC": "289", "\u06C1 \u062F": "290", "\u06C1\u0646 ": "291", \u06C1\u0648\u06BA: "292", "\u06D2 \u062D": "293", "\u06D2 \u06AF": "294", "\u06D2 \u06CC": "295", " \u0627\u06AF": "296", " \u0628\u0639": "297", " \u0631\u0648": "298", " \u0634\u0627": "299" }, uzbek: { "\u0430\u043D ": "0", \u0433\u0430\u043D: "1", \u043B\u0430\u0440: "2", "\u0433\u0430 ": "3", "\u043D\u0433 ": "4", \u0438\u043D\u0433: "5", \u043D\u0438\u043D: "6", "\u0434\u0430 ": "7", "\u043D\u0438 ": "8", \u0438\u0434\u0430: "9", \u0430\u0440\u0438: "10", \u0438\u0433\u0430: "11", \u0438\u043D\u0438: "12", "\u0430\u0440 ": "13", "\u0434\u0438 ": "14", " \u0431\u0438": "15", \u0430\u043D\u0438: "16", " \u0431\u043E": "17", \u0434\u0430\u043D: "18", \u043B\u0433\u0430: "19", " \u04B3\u0430": "20", " \u0432\u0430": "21", " \u0441\u0430": "22", "\u0433\u0438 ": "23", \u0438\u043B\u0430: "24", "\u043D \u0431": "25", "\u0438 \u0431": "26", " \u043A\u045E": "27", " \u0442\u0430": "28", "\u0438\u0440 ": "29", " \u043C\u0430": "30", \u0430\u0433\u0430: "31", \u0430\u043B\u0430: "32", \u0431\u0438\u0440: "33", "\u0440\u0438 ": "34", \u0442\u0433\u0430: "35", \u043B\u0430\u043D: "36", \u043B\u0438\u043A: "37", "\u0430 \u043A": "38", \u0430\u0433\u0438: "39", \u0430\u0442\u0438: "40", "\u0442\u0430 ": "41", \u0430\u0434\u0438: "42", \u0434\u0430\u0433: "43", \u0440\u0433\u0430: "44", " \u0439\u0438": "45", " \u043C\u0438": "46", " \u043F\u0430": "47", " \u0431\u045E": "48", " \u049B\u0430": "49", " \u049B\u0438": "50", "\u0430 \u0431": "51", \u0438\u043B\u043B: "52", "\u043B\u0438 ": "53", \u0430\u0441\u0438: "54", "\u0438 \u0442": "55", "\u0438\u043A ": "56", \u0438\u043B\u0438: "57", \u043B\u043B\u0430: "58", \u0430\u0440\u0434: "59", \u0432\u0447\u0438: "60", "\u0432\u0430 ": "61", "\u0438\u0431 ": "62", \u0438\u0440\u0438: "63", \u043B\u0438\u0433: "64", \u043D\u0433\u0430: "65", \u0440\u0430\u043D: "66", " \u043A\u0435": "67", " \u045E\u0437": "68", "\u0430 \u0441": "69", \u0430\u0445\u0442: "70", \u0431\u045E\u043B: "71", \u0438\u0433\u0438: "72", \u043A\u045E\u0440: "73", \u0440\u0434\u0430: "74", \u0440\u043D\u0438: "75", "\u0441\u0430 ": "76", " \u0431\u0435": "77", " \u0431\u0443": "78", " \u0434\u0430": "79", " \u0436\u0430": "80", "\u0430 \u0442": "81", \u0430\u0437\u0438: "82", \u0435\u0440\u0438: "83", "\u0438 \u0430": "84", \u0438\u043B\u0433: "85", \u0439\u0438\u043B: "86", \u043C\u0430\u043D: "87", \u043F\u0430\u0445: "88", \u0440\u0438\u0434: "89", "\u0442\u0438 ": "90", \u0443\u0432\u0447: "91", \u0445\u0442\u0430: "92", " \u043D\u0435": "93", " \u0441\u043E": "94", " \u0443\u0447": "95", \u0430\u0439\u0442: "96", \u043B\u043B\u0438: "97", \u0442\u043B\u0430: "98", " \u0430\u0439": "99", " \u0444\u0440": "100", " \u044D\u0442": "101", " \u04B3\u043E": "102", "\u0430 \u049B": "103", \u0430\u043B\u0438: "104", \u0430\u0440\u043E: "105", \u0431\u0435\u0440: "106", \u0431\u0438\u043B: "107", \u0431\u043E\u0440: "108", \u0438\u043C\u0438: "109", \u0438\u0441\u0442: "110", "\u043E\u043D ": "111", \u0440\u0438\u043D: "112", \u0442\u0435\u0440: "113", \u0442\u0438\u043B: "114", "\u0443\u043D ": "115", \u0444\u0440\u0430: "116", \u049B\u0438\u043B: "117", " \u0431\u0430": "118", " \u043E\u043B": "119", \u0430\u043D\u0441: "120", \u0435\u0444\u0442: "121", \u0437\u0438\u0440: "122", \u043A\u0430\u0442: "123", \u043C\u0438\u043B: "124", \u043D\u0435\u0444: "125", \u0441\u0430\u0433: "126", "\u0447\u0438 ": "127", \u045E\u0440\u0430: "128", " \u043D\u0430": "129", " \u0442\u0435": "130", " \u044D\u043D": "131", "\u0430 \u044D": "132", "\u0430\u043C ": "133", \u0430\u0440\u043D: "134", "\u0430\u0442 ": "135", "\u0438\u0448 ": "136", "\u043C\u0430 ": "137", \u043D\u043B\u0430: "138", \u0440\u043B\u0438: "139", \u0447\u0438\u043B: "140", \u0448\u0433\u0430: "141", " \u0438\u0448": "142", " \u043C\u0443": "143", " \u045E\u049B": "144", \u0430\u0440\u0430: "145", \u0432\u0430\u0437: "146", "\u0438 \u0443": "147", "\u0438\u049B ": "148", \u043C\u043E\u049B: "149", \u0440\u0438\u043C: "150", \u0443\u0447\u0443: "151", \u0447\u0443\u043D: "152", "\u0448\u0438 ": "153", \u044D\u043D\u0433: "154", \u049B\u0443\u0432: "155", \u04B3\u0430\u043C: "156", " \u0441\u045E": "157", " \u0448\u0438": "158", \u0431\u0430\u0440: "159", \u0431\u0435\u043A: "160", \u0434\u0430\u043C: "161", "\u0438 \u04B3": "162", \u0438\u0448\u0438: "163", \u043B\u0430\u0434: "164", \u043E\u043B\u0438: "165", \u043E\u043B\u043B: "166", \u043E\u0440\u0438: "167", \u043E\u049B\u0434: "168", "\u0440 \u0431": "169", "\u0440\u0430 ": "170", \u0440\u043B\u0430: "171", \u0443\u043D\u0438: "172", "\u0444\u0442 ": "173", \u045E\u043B\u0433: "174", \u045E\u049B\u0443: "175", " \u0434\u0435": "176", " \u043A\u0430": "177", " \u049B\u045E": "178", "\u0430 \u045E": "179", \u0430\u0431\u0430: "180", \u0430\u043C\u043C: "181", \u0430\u0442\u043B: "182", "\u0431 \u043A": "183", \u0431\u043E\u0448: "184", \u0437\u0431\u0435: "185", "\u0438 \u0432": "186", "\u0438\u043C ": "187", "\u0438\u043D ": "188", \u0438\u0448\u043B: "189", \u043B\u0430\u0431: "190", \u043B\u0435\u0439: "191", \u043C\u0438\u043D: "192", "\u043D \u0434": "193", \u043D\u0434\u0430: "194", "\u043E\u049B ": "195", "\u0440 \u043C": "196", \u0440\u0438\u043B: "197", \u0441\u0438\u0434: "198", \u0442\u0430\u043B: "199", \u0442\u0430\u043D: "200", \u0442\u0438\u0434: "201", \u0442\u043E\u043D: "202", \u045E\u0437\u0431: "203", " \u0430\u043C": "204", " \u043A\u0438": "205", "\u0430 \u04B3": "206", \u0430\u043D\u0433: "207", \u0430\u043D\u0434: "208", \u0430\u0440\u0442: "209", \u0430\u0451\u0442: "210", \u0434\u0438\u0440: "211", \u0435\u043D\u0442: "212", "\u0438 \u0434": "213", "\u0438 \u043C": "214", "\u0438 \u043E": "215", "\u0438 \u044D": "216", \u0438\u0440\u043E: "217", \u0439\u0442\u0438: "218", \u043D\u0441\u0443: "219", \u043E\u0434\u0438: "220", "\u043E\u0440 ": "221", "\u0441\u0438 ": "222", \u0442\u0438\u0448: "223", \u0442\u043E\u0431: "224", \u044D\u0442\u0438: "225", \u049B\u0430\u0440: "226", \u049B\u0434\u0430: "227", " \u0431\u043B": "228", " \u0433\u0435": "229", " \u0434\u043E": "230", " \u0434\u0443": "231", " \u043D\u043E": "232", " \u043F\u0440": "233", " \u0440\u0430": "234", " \u0444\u043E": "235", " \u049B\u043E": "236", "\u0430 \u043C": "237", "\u0430 \u043E": "238", \u0430\u0439\u0434: "239", \u0430\u043B\u043E: "240", \u0430\u043C\u0430: "241", \u0431\u043B\u0435: "242", "\u0433 \u043D": "243", \u0434\u043E\u043B: "244", \u0435\u0439\u0440: "245", "\u0435\u043A ": "246", \u0435\u0440\u0433: "247", \u0436\u0430\u0440: "248", \u0437\u0438\u0434: "249", "\u0438 \u043A": "250", "\u0438 \u0444": "251", "\u0438\u0439 ": "252", \u0438\u043B\u043E: "253", \u043B\u0434\u0438: "254", \u043B\u0438\u0431: "255", \u043B\u0438\u043D: "256", "\u043C\u0438 ": "257", \u043C\u043C\u0430: "258", "\u043D \u0432": "259", "\u043D \u043A": "260", "\u043D \u045E": "261", "\u043D \u04B3": "262", \u043E\u0437\u0438: "263", \u043E\u0440\u0430: "264", \u043E\u0441\u0438: "265", \u0440\u0430\u0441: "266", \u0440\u0438\u0448: "267", \u0440\u043A\u0430: "268", \u0440\u043E\u049B: "269", \u0441\u0442\u043E: "270", \u0442\u0438\u043D: "271", \u0445\u0430\u0442: "272", \u0448\u0438\u0440: "273", " \u0430\u0432": "274", " \u0440\u045E": "275", " \u0442\u0443": "276", " \u045E\u0442": "277", "\u0430 \u043F": "278", \u0430\u0432\u0442: "279", \u0430\u0434\u0430: "280", \u0430\u0437\u0430: "281", \u0430\u043D\u043B: "282", "\u0431 \u0431": "283", \u0431\u043E\u0439: "284", "\u0431\u0443 ": "285", \u0432\u0442\u043E: "286", "\u0433 \u044D": "287", \u0433\u0438\u043D: "288", \u0434\u0430\u0440: "289", \u0434\u0435\u043D: "290", \u0434\u0443\u043D: "291", \u0438\u0434\u0435: "292", \u0438\u043E\u043D: "293", \u0438\u0440\u043B: "294", \u0438\u0448\u0433: "295", \u0439\u0445\u0430: "296", \u043A\u0435\u043B: "297", \u043A\u045E\u043F: "298", \u043B\u0438\u043E: "299" }, vietnamese: { "ng ": "0", " th": "1", " ch": "2", "g t": "3", " nh": "4", \u00F4ng: "5", " kh": "6", " tr": "7", "nh ": "8", " c\xF4": "9", c\u00F4n: "10", " ty": "11", "ty ": "12", "i t": "13", "n t": "14", " ng": "15", "\u1EA1i ": "16", " ti": "17", "ch ": "18", "y l": "19", "\u1EC1n ": "20", " \u0111\u01B0": "21", "hi ": "22", " g\u1EDF": "23", g\u1EDFi: "24", i\u1EC1n: "25", ti\u1EC1: "26", "\u1EDFi ": "27", " gi": "28", " le": "29", " vi": "30", cho: "31", "ho ": "32", kh\u00E1: "33", " v\xE0": "34", h\u00E1c: "35", " ph": "36", "am ": "37", h\u00E0n: "38", \u00E1ch: "39", "\xF4i ": "40", "i n": "41", \u01B0\u1EE3c: "42", "\u1EE3c ": "43", " t\xF4": "44", ch\u00FA: "45", i\u1EC7t: "46", t\u00F4i: "47", "\xEAn ": "48", \u00FAng: "49", "\u1EC7t ": "50", " c\xF3": "51", "c t": "52", "c\xF3 ": "53", h\u00FAn: "54", vi\u1EC7: "55", \u0111\u01B0\u1EE3: "56", " na": "57", "g c": "58", "i c": "59", "n c": "60", "n n": "61", "t n": "62", "v\xE0 ": "63", "n l": "64", "n \u0111": "65", \u00E0ng: "66", "\xE1c ": "67", "\u1EA5t ": "68", "h l": "69", nam: "70", "\xE2n ": "71", "\u0103m ": "72", " h\xE0": "73", " l\xE0": "74", " n\u0103": "75", " qu": "76", " t\u1EA1": "77", "g m": "78", n\u0103m: "79", t\u1EA1i: "80", "\u1EDBi ": "81", " l\u1EB9": "82", "ay ": "83", "e g": "84", "h h": "85", "i v": "86", "i \u0111": "87", "le ": "88", "l\u1EB9 ": "89", "\u1EC1u ": "90", "\u1EDDi ": "91", h\u00E2n: "92", nhi: "93", "t t": "94", " c\u1EE7": "95", " m\u1ED9": "96", " v\u1EC1": "97", " \u0111i": "98", "an ": "99", c\u1EE7a: "100", "l\xE0 ": "101", m\u1ED9t: "102", "v\u1EC1 ": "103", \u00E0nh: "104", "\u1EBFt ": "105", "\u1ED9t ": "106", "\u1EE7a ": "107", " bi": "108", " c\xE1": "109", "a c": "110", anh: "111", c\u00E1c: "112", "h c": "113", i\u1EC1u: "114", "m t": "115", "\u1EC7n ": "116", " ho": "117", "'s ": "118", ave: "119", "e's": "120", "el ": "121", "g n": "122", "le'": "123", "n v": "124", "o c": "125", rav: "126", "s t": "127", thi: "128", tra: "129", vel: "130", "\u1EADn ": "131", "\u1EBFn ": "132", " ba": "133", " cu": "134", " sa": "135", " \u0111\xF3": "136", " \u0111\u1EBF": "137", "c c": "138", chu: "139", hi\u1EC1: "140", huy: "141", khi: "142", nh\u00E2: "143", nh\u01B0: "144", ong: "145", ron: "146", thu: "147", th\u01B0: "148", tro: "149", "y c": "150", "\xE0y ": "151", \u0111\u1EBFn: "152", \u01B0\u1EDDi: "153", \u01B0\u1EDDn: "154", "\u1EC1 v": "155", \u1EDDng: "156", " v\u1EDB": "157", cu\u1ED9: "158", "g \u0111": "159", i\u1EBFt: "160", i\u1EC7n: "161", ng\u00E0: "162", "o t": "163", "u c": "164", u\u1ED9c: "165", v\u1EDBi: "166", "\xE0 c": "167", "\xE0i ": "168", \u01A1ng: "169", \u01B0\u01A1n: "170", "\u1EA3i ": "171", "\u1ED9c ": "172", "\u1EE9c ": "173", " an": "174", " l\u1EAD": "175", " ra": "176", " s\u1EBD": "177", " s\u1ED1": "178", " t\u1ED5": "179", "a k": "180", bi\u1EBF: "181", "c n": "182", "c \u0111": "183", ch\u1EE9: "184", "g v": "185", gia: "186", g\u00E0y: "187", h\u00E1n: "188", h\u00F4n: "189", "h\u01B0 ": "190", h\u1EE9c: "191", "i g": "192", "i h": "193", "i k": "194", "i p": "195", i\u00EAn: "196", kh\u00F4: "197", l\u1EADp: "198", "n k": "199", "ra ": "200", r\u00EAn: "201", "s\u1EBD ": "202", "t c": "203", th\u00E0: "204", tr\u00EA: "205", "t\u1ED5 ": "206", "u n": "207", "y t": "208", \u00ECnh: "209", "\u1EA5y ": "210", "\u1EADp ": "211", "\u1ED5 c": "212", " m\xE1": "213", " \u0111\u1EC3": "214", "ai ": "215", "c s": "216", g\u01B0\u1EDD: "217", "h v": "218", hoa: "219", ho\u1EA1: "220", inh: "221", "m n": "222", m\u00E1y: "223", "n g": "224", ng\u01B0: "225", nh\u1EAD: "226", "o n": "227", "oa ": "228", o\u00E0n: "229", "p c": "230", "s\u1ED1 ": "231", "t \u0111": "232", "y v": "233", "\xE0o ": "234", "\xE1y ": "235", "\u0103n ": "236", "\u0111\xF3 ": "237", "\u0111\u1EC3 ": "238", \u01B0\u1EDBc: "239", "\u1EA7n ": "240", "\u1EC3n ": "241", "\u1EDBc ": "242", " b\xE1": "243", " c\u01A1": "244", " c\u1EA3": "245", " c\u1EA7": "246", " h\u1ECD": "247", " k\u1EF3": "248", " li": "249", " m\u1EA1": "250", " s\u1EDF": "251", " t\u1EB7": "252", " v\xE9": "253", " v\u1EE5": "254", " \u0111\u1EA1": "255", "a \u0111": "256", bay: "257", "c\u01A1 ": "258", "g s": "259", han: "260", h\u01B0\u01A1: "261", "i s": "262", "k\u1EF3 ": "263", "m c": "264", "n m": "265", "n p": "266", "o b": "267", o\u1EA1i: "268", qua: "269", "s\u1EDF ": "270", tha: "271", th\u00E1: "272", t\u1EB7n: "273", v\u00E0o: "274", "v\xE9 ": "275", "v\u1EE5 ": "276", "y b": "277", "\xE0n ": "278", \u00E1ng: "279", "\u01A1 s": "280", "\u1EA7u ": "281", "\u1EADt ": "282", \u1EB7ng: "283", "\u1ECDc ": "284", "\u1EDF t": "285", \u1EEFng: "286", " du": "287", " lu": "288", " ta": "289", " to": "290", " t\u1EEB": "291", " \u1EDF ": "292", "a v": "293", "ao ": "294", "c v": "295", "c\u1EA3 ": "296", "du ": "297", "g l": "298", gi\u1EA3: "299" }, welsh: { "yn ": "0", "dd ": "1", " yn": "2", " y ": "3", ydd: "4", eth: "5", "th ": "6", " i ": "7", aet: "8", "d y": "9", "ch ": "10", "od ": "11", "ol ": "12", edd: "13", " ga": "14", " gw": "15", "'r ": "16", "au ": "17", ddi: "18", "ad ": "19", " cy": "20", " gy": "21", " ei": "22", " o ": "23", iad: "24", "yr ": "25", "an ": "26", bod: "27", wed: "28", " bo": "29", " dd": "30", "el ": "31", "n y": "32", " am": "33", "di ": "34", edi: "35", "on ": "36", " we": "37", " ym": "38", " ar": "39", " rh": "40", odd: "41", " ca": "42", " ma": "43", ael: "44", oed: "45", dae: "46", "n a": "47", dda: "48", "er ": "49", "h y": "50", all: "51", "ei ": "52", " ll": "53", "am ": "54", "eu ": "55", fod: "56", fyd: "57", "l y": "58", "n g": "59", wyn: "60", "d a": "61", "i g": "62", mae: "63", neu: "64", "os ": "65", " ne": "66", "d i": "67", dod: "68", dol: "69", "n c": "70", "r h": "71", wyd: "72", wyr: "73", "ai ": "74", "ar ": "75", "in ": "76", rth: "77", " fy": "78", " he": "79", " me": "80", " yr": "81", "'n ": "82", dia: "83", est: "84", "h c": "85", hai: "86", "i d": "87", "id ": "88", "r y": "89", "y b": "90", " dy": "91", " ha": "92", ada: "93", "i b": "94", "n i": "95", ote: "96", rot: "97", tes: "98", "y g": "99", "yd ": "100", " ad": "101", " mr": "102", " un": "103", cyn: "104", dau: "105", ddy: "106", edo: "107", "i c": "108", "i w": "109", ith: "110", lae: "111", lla: "112", "nd ": "113", oda: "114", ryd: "115", tho: "116", " a ": "117", " dr": "118", aid: "119", ain: "120", ddo: "121", dyd: "122", fyn: "123", gyn: "124", hol: "125", "io ": "126", "o a": "127", wch: "128", wyb: "129", ybo: "130", ych: "131", " br": "132", " by": "133", " di": "134", " fe": "135", " na": "136", " o'": "137", " pe": "138", art: "139", byd: "140", dro: "141", gal: "142", "l e": "143", lai: "144", "mr ": "145", "n n": "146", "r a": "147", rhy: "148", "wn ": "149", ynn: "150", " on": "151", " r ": "152", cae: "153", "d g": "154", "d o": "155", "d w": "156", gan: "157", gwy: "158", "n d": "159", "n f": "160", "n o": "161", ned: "162", "ni ": "163", "o'r": "164", "r d": "165", "ud ": "166", wei: "167", wrt: "168", " an": "169", " cw": "170", " da": "171", " ni": "172", " pa": "173", " pr": "174", " wy": "175", "d e": "176", dai: "177", dim: "178", eud: "179", gwa: "180", idd: "181", "im ": "182", iri: "183", lwy: "184", "n b": "185", nol: "186", "r o": "187", rwy: "188", " ch": "189", " er": "190", " fo": "191", " ge": "192", " hy": "193", " i'": "194", " ro": "195", " sa": "196", " tr": "197", bob: "198", cwy: "199", cyf: "200", dio: "201", dyn: "202", eit: "203", hel: "204", hyn: "205", ich: "206", "ll ": "207", mdd: "208", "n r": "209", ond: "210", pro: "211", "r c": "212", "r g": "213", red: "214", rha: "215", "u a": "216", "u c": "217", "u y": "218", "y c": "219", ymd: "220", ymr: "221", "yw ": "222", " ac": "223", " be": "224", " bl": "225", " co": "226", " os": "227", adw: "228", "ae ": "229", "af ": "230", "d p": "231", efn: "232", eic: "233", "en ": "234", eol: "235", "es ": "236", fer: "237", gel: "238", "h g": "239", hod: "240", ied: "241", "ir ": "242", laf: "243", "n h": "244", "na ": "245", nyd: "246", odo: "247", ofy: "248", rdd: "249", rie: "250", ros: "251", stw: "252", twy: "253", yda: "254", yng: "255", " at": "256", " de": "257", " go": "258", " id": "259", " oe": "260", " \xE2 ": "261", "'ch": "262", "ac ": "263", ach: "264", "ae'": "265", "al ": "266", "bl ": "267", "d c": "268", "d l": "269", dan: "270", dde: "271", ddw: "272", dir: "273", dla: "274", "ed ": "275", ela: "276", ell: "277", ene: "278", ewn: "279", gyd: "280", hau: "281", hyw: "282", "i a": "283", "i f": "284", iol: "285", ion: "286", "l a": "287", "l i": "288", lia: "289", med: "290", mon: "291", "n s": "292", "no ": "293", obl: "294", ola: "295", ref: "296", "rn ": "297", thi: "298", "un ": "299" } }, "trigram-unicodemap": { "Basic Latin": { albanian: 661, azeri: 653, bengali: 1, cebuano: 750, croatian: 733, czech: 652, danish: 734, dutch: 741, english: 723, estonian: 739, finnish: 743, french: 733, german: 750, hausa: 752, hawaiian: 751, hungarian: 693, icelandic: 662, indonesian: 776, italian: 741, latin: 764, latvian: 693, lithuanian: 738, mongolian: 19, norwegian: 742, pidgin: 702, polish: 701, portuguese: 726, romanian: 714, slovak: 677, slovene: 740, somali: 755, spanish: 749, swahili: 770, swedish: 717, tagalog: 767, turkish: 673, vietnamese: 503, welsh: 728 }, "Latin-1 Supplement": { albanian: 68, azeri: 10, czech: 51, danish: 13, estonian: 19, finnish: 39, french: 21, german: 8, hungarian: 72, icelandic: 80, italian: 3, norwegian: 5, polish: 6, portuguese: 18, romanian: 9, slovak: 37, spanish: 6, swedish: 26, turkish: 25, vietnamese: 56, welsh: 1 }, "[Malformatted]": { albanian: 68, arabic: 724, azeri: 109, bengali: 1472, bulgarian: 750, croatian: 10, czech: 78, danish: 13, estonian: 19, farsi: 706, finnish: 39, french: 21, german: 8, hausa: 8, hindi: 1386, hungarian: 74, icelandic: 80, italian: 3, kazakh: 767, kyrgyz: 767, latvian: 56, lithuanian: 30, macedonian: 755, mongolian: 743, nepali: 1514, norwegian: 5, pashto: 677, polish: 45, portuguese: 18, romanian: 31, russian: 759, serbian: 757, slovak: 45, slovene: 10, spanish: 6, swedish: 26, turkish: 87, ukrainian: 748, urdu: 682, uzbek: 773, vietnamese: 289, welsh: 1 }, Arabic: { arabic: 724, farsi: 706, pashto: 677, urdu: 682 }, "Latin Extended-B": { azeri: 73, hausa: 8, vietnamese: 19 }, "Latin Extended-A": { azeri: 25, croatian: 10, czech: 27, hungarian: 2, latvian: 56, lithuanian: 30, polish: 39, romanian: 22, slovak: 8, slovene: 10, turkish: 62, vietnamese: 20 }, "Combining Diacritical Marks": { azeri: 1 }, Bengali: { bengali: 714 }, Gujarati: { bengali: 16 }, Gurmukhi: { bengali: 6 }, Cyrillic: { bulgarian: 750, kazakh: 767, kyrgyz: 767, macedonian: 755, mongolian: 743, russian: 759, serbian: 757, ukrainian: 748, uzbek: 773 }, Devanagari: { hindi: 693, nepali: 757 }, "Latin Extended Additional": { vietnamese: 97 } } };
  }
});

// node_modules/languagedetect/data/unicode_blocks.json
var require_unicode_blocks = __commonJS({
  "node_modules/languagedetect/data/unicode_blocks.json"(exports2, module2) {
    module2.exports = [["0x0000", "0x007F", "Basic Latin"], ["0x0080", "0x00FF", "Latin-1 Supplement"], ["0x0100", "0x017F", "Latin Extended-A"], ["0x0180", "0x024F", "Latin Extended-B"], ["0x0250", "0x02AF", "IPA Extensions"], ["0x02B0", "0x02FF", "Spacing Modifier Letters"], ["0x0300", "0x036F", "Combining Diacritical Marks"], ["0x0370", "0x03FF", "Greek and Coptic"], ["0x0400", "0x04FF", "Cyrillic"], ["0x0500", "0x052F", "Cyrillic Supplement"], ["0x0530", "0x058F", "Armenian"], ["0x0590", "0x05FF", "Hebrew"], ["0x0600", "0x06FF", "Arabic"], ["0x0700", "0x074F", "Syriac"], ["0x0750", "0x077F", "Arabic Supplement"], ["0x0780", "0x07BF", "Thaana"], ["0x0900", "0x097F", "Devanagari"], ["0x0980", "0x09FF", "Bengali"], ["0x0A00", "0x0A7F", "Gurmukhi"], ["0x0A80", "0x0AFF", "Gujarati"], ["0x0B00", "0x0B7F", "Oriya"], ["0x0B80", "0x0BFF", "Tamil"], ["0x0C00", "0x0C7F", "Telugu"], ["0x0C80", "0x0CFF", "Kannada"], ["0x0D00", "0x0D7F", "Malayalam"], ["0x0D80", "0x0DFF", "Sinhala"], ["0x0E00", "0x0E7F", "Thai"], ["0x0E80", "0x0EFF", "Lao"], ["0x0F00", "0x0FFF", "Tibetan"], ["0x1000", "0x109F", "Myanmar"], ["0x10A0", "0x10FF", "Georgian"], ["0x1100", "0x11FF", "Hangul Jamo"], ["0x1200", "0x137F", "Ethiopic"], ["0x1380", "0x139F", "Ethiopic Supplement"], ["0x13A0", "0x13FF", "Cherokee"], ["0x1400", "0x167F", "Unified Canadian Aboriginal Syllabics"], ["0x1680", "0x169F", "Ogham"], ["0x16A0", "0x16FF", "Runic"], ["0x1700", "0x171F", "Tagalog"], ["0x1720", "0x173F", "Hanunoo"], ["0x1740", "0x175F", "Buhid"], ["0x1760", "0x177F", "Tagbanwa"], ["0x1780", "0x17FF", "Khmer"], ["0x1800", "0x18AF", "Mongolian"], ["0x1900", "0x194F", "Limbu"], ["0x1950", "0x197F", "Tai Le"], ["0x1980", "0x19DF", "New Tai Lue"], ["0x19E0", "0x19FF", "Khmer Symbols"], ["0x1A00", "0x1A1F", "Buginese"], ["0x1D00", "0x1D7F", "Phonetic Extensions"], ["0x1D80", "0x1DBF", "Phonetic Extensions Supplement"], ["0x1DC0", "0x1DFF", "Combining Diacritical Marks Supplement"], ["0x1E00", "0x1EFF", "Latin Extended Additional"], ["0x1F00", "0x1FFF", "Greek Extended"], ["0x2000", "0x206F", "General Punctuation"], ["0x2070", "0x209F", "Superscripts and Subscripts"], ["0x20A0", "0x20CF", "Currency Symbols"], ["0x20D0", "0x20FF", "Combining Diacritical Marks for Symbols"], ["0x2100", "0x214F", "Letterlike Symbols"], ["0x2150", "0x218F", "Number Forms"], ["0x2190", "0x21FF", "Arrows"], ["0x2200", "0x22FF", "Mathematical Operators"], ["0x2300", "0x23FF", "Miscellaneous Technical"], ["0x2400", "0x243F", "Control Pictures"], ["0x2440", "0x245F", "Optical Character Recognition"], ["0x2460", "0x24FF", "Enclosed Alphanumerics"], ["0x2500", "0x257F", "Box Drawing"], ["0x2580", "0x259F", "Block Elements"], ["0x25A0", "0x25FF", "Geometric Shapes"], ["0x2600", "0x26FF", "Miscellaneous Symbols"], ["0x2700", "0x27BF", "Dingbats"], ["0x27C0", "0x27EF", "Miscellaneous Mathematical Symbols-A"], ["0x27F0", "0x27FF", "Supplemental Arrows-A"], ["0x2800", "0x28FF", "Braille Patterns"], ["0x2900", "0x297F", "Supplemental Arrows-B"], ["0x2980", "0x29FF", "Miscellaneous Mathematical Symbols-B"], ["0x2A00", "0x2AFF", "Supplemental Mathematical Operators"], ["0x2B00", "0x2BFF", "Miscellaneous Symbols and Arrows"], ["0x2C00", "0x2C5F", "Glagolitic"], ["0x2C80", "0x2CFF", "Coptic"], ["0x2D00", "0x2D2F", "Georgian Supplement"], ["0x2D30", "0x2D7F", "Tifinagh"], ["0x2D80", "0x2DDF", "Ethiopic Extended"], ["0x2E00", "0x2E7F", "Supplemental Punctuation"], ["0x2E80", "0x2EFF", "CJK Radicals Supplement"], ["0x2F00", "0x2FDF", "Kangxi Radicals"], ["0x2FF0", "0x2FFF", "Ideographic Description Characters"], ["0x3000", "0x303F", "CJK Symbols and Punctuation"], ["0x3040", "0x309F", "Hiragana"], ["0x30A0", "0x30FF", "Katakana"], ["0x3100", "0x312F", "Bopomofo"], ["0x3130", "0x318F", "Hangul Compatibility Jamo"], ["0x3190", "0x319F", "Kanbun"], ["0x31A0", "0x31BF", "Bopomofo Extended"], ["0x31C0", "0x31EF", "CJK Strokes"], ["0x31F0", "0x31FF", "Katakana Phonetic Extensions"], ["0x3200", "0x32FF", "Enclosed CJK Letters and Months"], ["0x3300", "0x33FF", "CJK Compatibility"], ["0x3400", "0x4DBF", "CJK Unified Ideographs Extension A"], ["0x4DC0", "0x4DFF", "Yijing Hexagram Symbols"], ["0x4E00", "0x9FFF", "CJK Unified Ideographs"], ["0xA000", "0xA48F", "Yi Syllables"], ["0xA490", "0xA4CF", "Yi Radicals"], ["0xA700", "0xA71F", "Modifier Tone Letters"], ["0xA800", "0xA82F", "Syloti Nagri"], ["0xAC00", "0xD7AF", "Hangul Syllables"], ["0xD800", "0xDB7F", "High Surrogates"], ["0xDB80", "0xDBFF", "High Private Use Surrogates"], ["0xDC00", "0xDFFF", "Low Surrogates"], ["0xE000", "0xF8FF", "Private Use Area"], ["0xF900", "0xFAFF", "CJK Compatibility Ideographs"], ["0xFB00", "0xFB4F", "Alphabetic Presentation Forms"], ["0xFB50", "0xFDFF", "Arabic Presentation Forms-A"], ["0xFE00", "0xFE0F", "Variation Selectors"], ["0xFE10", "0xFE1F", "Vertical Forms"], ["0xFE20", "0xFE2F", "Combining Half Marks"], ["0xFE30", "0xFE4F", "CJK Compatibility Forms"], ["0xFE50", "0xFE6F", "Small Form Variants"], ["0xFE70", "0xFEFF", "Arabic Presentation Forms-B"], ["0xFF00", "0xFFEF", "Halfwidth and Fullwidth Forms"], ["0xFFF0", "0xFFFF", "Specials"], ["0x10000", "0x1007F", "Linear B Syllabary"], ["0x10080", "0x100FF", "Linear B Ideograms"], ["0x10100", "0x1013F", "Aegean Numbers"], ["0x10140", "0x1018F", "Ancient Greek Numbers"], ["0x10300", "0x1032F", "Old Italic"], ["0x10330", "0x1034F", "Gothic"], ["0x10380", "0x1039F", "Ugaritic"], ["0x103A0", "0x103DF", "Old Persian"], ["0x10400", "0x1044F", "Deseret"], ["0x10450", "0x1047F", "Shavian"], ["0x10480", "0x104AF", "Osmanya"], ["0x10800", "0x1083F", "Cypriot Syllabary"], ["0x10A00", "0x10A5F", "Kharoshthi"], ["0x1D000", "0x1D0FF", "Byzantine Musical Symbols"], ["0x1D100", "0x1D1FF", "Musical Symbols"], ["0x1D200", "0x1D24F", "Ancient Greek Musical Notation"], ["0x1D300", "0x1D35F", "Tai Xuan Jing Symbols"], ["0x1D400", "0x1D7FF", "Mathematical Alphanumeric Symbols"], ["0x20000", "0x2A6DF", "CJK Unified Ideographs Extension B"], ["0x2F800", "0x2FA1F", "CJK Compatibility Ideographs Supplement"], ["0xE0000", "0xE007F", "Tags"], ["0xE0100", "0xE01EF", "Variation Selectors Supplement"], ["0xF0000", "0xFFFFF", "Supplementary Private Use Area-A"], ["0x100000", "0x10FFFF", "Supplementary Private Use Area-B"]];
  }
});

// node_modules/languagedetect/lib/Parser.js
var require_Parser = __commonJS({
  "node_modules/languagedetect/lib/Parser.js"(exports2, module2) {
    var dbUnicodeBlocks = require_unicode_blocks();
    var Parser = module2.exports = function(string) {
      this.threshold = 300;
      this.trigramRanks = {};
      this.compileTrigram = true;
      this.compileUnicode = true;
      this.unicodeSkipAscii = true;
      this.unicodeBlocks = {};
      this.trigramPadStart = false;
      this.trigram = {};
      this.string = string ? string.replace(/[~!@#$%^&*()_|+\-=?;:",.<>\{\}\[\]\\\/]/g, " ") : "";
    };
    Parser.prototype = {
      /**
       * turn on/off padding the beginning of the sample string
       *
       * @access  public
       * @param   bool   true for on, false for off
       */
      setPadStart: function(bool) {
        this.trigramPadStart = bool || true;
      },
      /**
       * Returns the trigram ranks for the text sample
       *
       * @access  public
       * @return  array   trigram ranks in the text sample
       */
      getTrigramRanks: function() {
        return this.trigramRanks;
      },
      getBlockCount: function() {
        return dbUnicodeBlocks.length;
      },
      getUnicodeBlocks: function() {
        return this.unicodeBlocks;
      },
      /**
       * Executes the parsing operation
       *
       * Be sure to call the set*() functions to set options and the
       * prepare*() functions first to tell it what kind of data to compute
       *
       * Afterwards the get*() functions can be used to access the compiled
       * information.
       *
       * @access public
       */
      analyze: function() {
        var len = this.string.length, byteCounter = 0, a2 = " ", b = " ", dropone, c2;
        if (this.compileUnicode) {
          var blocksCount = dbUnicodeBlocks.length;
        }
        if (this.compileTrigram) {
          a2 = " ";
          b = " ";
          if (!this.trigramPadStart) {
            a2 = this.string.charAt(byteCounter++).toLowerCase();
            if (a2 != " ") {
              b = this.string.charAt(byteCounter).toLowerCase();
              dropone = " " + a2 + b;
            }
            byteCounter = 0;
            a2 = " ";
            b = " ";
          }
        }
        var skippedCount = 0;
        var unicodeChars = {};
        while (byteCounter < len) {
          c2 = this.string.charAt(byteCounter++).toLowerCase();
          if (this.compileTrigram) {
            if (!(b == " " && (a2 == " " || c2 == " "))) {
              var abc = a2 + b + c2;
              this.trigram[abc] = this.trigram[abc] ? this.trigram[abc] += 1 : 1;
            }
            a2 = b;
            b = c2;
          }
          if (this.compileUnicode) {
            var charCode = c2.charCodeAt(0);
            if (this.unicodeSkipAscii && c2.match(/[a-z ]/i) && (charCode < 65 || charCode > 122 || charCode > 90 && charCode < 97) && c2 != "'") {
              skippedCount++;
              continue;
            }
            unicodeChars[c2] = unicodeChars[c2] ? unicodeChars[c2] += 1 : 1;
          }
        }
        this.unicodeBlocks = {};
        if (this.compileUnicode) {
          var keys = Object.keys(unicodeChars), keysLength = keys.length;
          for (var i = keysLength; i--; ) {
            var unicode = keys[i].charCodeAt(0), count = unicodeChars[keys[i]], search = this.unicodeBlockName(unicode, blocksCount), blockName = search != -1 ? search[2] : "[Malformatted]";
            this.unicodeBlocks[blockName] = this.unicodeBlocks[blockName] ? this.unicodeBlocks[blockName] += count : count;
          }
        }
        if (this.compileTrigram) {
          if (b != " ") {
            var ab = a2 + b + " ";
            this.trigram[ab] = this.trigram[ab] ? this.trigram[ab] += 1 : 1;
          }
          if (typeof dropone != "undefined" && this.trigram[dropone] == 1) {
            delete this.trigram[dropone];
          }
          if (this.trigram && Object.keys(this.trigram).length > 0) {
            this.trigramRanks = this.arrRank(this.trigram);
          } else {
            this.trigramRanks = {};
          }
        }
      },
      /**
       * Sorts an array by value breaking ties alphabetically
       *
       * @access private
       * @param arr the array to sort
       */
      bubleSort: function(arr) {
        var combined = [];
        for (var key in arr) {
          combined.push([key, arr[key]]);
        }
        combined = combined.sort(this.sortFunc);
        var replacement = {};
        var length = combined.length;
        for (var i = 0; i < length; i++) {
          replacement[combined[i][0]] = combined[i][1];
        }
        return replacement;
      },
      /**
       * Converts a set of trigrams from frequencies to ranks
       *
       * Thresholds (cuts off) the list at $this->_threshold
       *
       * @access  protected
       * @param   arr     array of trgram
       * @return  object  ranks of trigrams
       */
      arrRank: function(arr) {
        arr = this.bubleSort(arr);
        var rank = {}, i = 0;
        for (var key in arr) {
          rank[key] = i++;
          if (i >= this.threshold) {
            break;
          }
        }
        return rank;
      },
      /**
       * Sort function used by bubble sort
       *
       * Callback function for usort().
       *
       * @access   private
       * @param    a    first param passed by usort()
       * @param    b    second param passed by usort()
       * @return   int  1 if $a is greater, -1 if not
       *
       * @see      bubleSort()
       */
      sortFunc: function(a2, b) {
        var aKey = a2[0], aValue = a2[1], bKey = b[0], bValue = b[1];
        if (aValue == bValue) {
          return aKey.localeCompare(bKey);
        } else {
          return aValue > bValue ? -1 : 1;
        }
      },
      unicodeBlockName: function(unicode, blockCount) {
        if (unicode <= dbUnicodeBlocks[0][1]) {
          return dbUnicodeBlocks[0];
        }
        var high = blockCount ? blockCount - 1 : dbUnicodeBlocks.length, low = 1, mid;
        while (low <= high) {
          mid = Math.floor((low + high) / 2);
          if (unicode < dbUnicodeBlocks[mid][0]) {
            high = mid - 1;
          } else if (unicode > dbUnicodeBlocks[mid][1]) {
            low = mid + 1;
          } else {
            return dbUnicodeBlocks[mid];
          }
        }
        return -1;
      }
    };
  }
});

// node_modules/languagedetect/lib/ISO639.js
var require_ISO639 = __commonJS({
  "node_modules/languagedetect/lib/ISO639.js"(exports2, module2) {
    var Languages = module2.exports = {
      getCode2: function(lang3) {
        return Languages.nameToCode2[String(lang3).toLowerCase()] || null;
      },
      getCode3: function(lang3) {
        return Languages.nameToCode3[String(lang3).toLowerCase()] || null;
      },
      getName2: function(code) {
        return Languages.code2ToName[String(code).toLowerCase()] || null;
      },
      getName3: function(code) {
        return Languages.code3ToName[String(code).toLowerCase()] || null;
      },
      nameToCode2: {
        "albanian": "sq",
        "arabic": "ar",
        "azeri": "az",
        "bengali": "bn",
        "bulgarian": "bg",
        "cebuano": null,
        "croatian": "hr",
        "czech": "cs",
        "danish": "da",
        "dutch": "nl",
        "english": "en",
        "estonian": "et",
        "farsi": "fa",
        "finnish": "fi",
        "french": "fr",
        "german": "de",
        "hausa": "ha",
        "hawaiian": null,
        "hindi": "hi",
        "hungarian": "hu",
        "icelandic": "is",
        "indonesian": "id",
        "italian": "it",
        "kazakh": "kk",
        "kyrgyz": "ky",
        "latin": "la",
        "latvian": "lv",
        "lithuanian": "lt",
        "macedonian": "mk",
        "mongolian": "mn",
        "nepali": "ne",
        "norwegian": "no",
        "pashto": "ps",
        "pidgin": null,
        "polish": "pl",
        "portuguese": "pt",
        "romanian": "ro",
        "russian": "ru",
        "serbian": "sr",
        "slovak": "sk",
        "slovene": "sl",
        "somali": "so",
        "spanish": "es",
        "swahili": "sw",
        "swedish": "sv",
        "tagalog": "tl",
        "turkish": "tr",
        "ukrainian": "uk",
        "urdu": "ur",
        "uzbek": "uz",
        "vietnamese": "vi",
        "welsh": "cy"
      },
      nameToCode3: {
        "albanian": "sqi",
        "arabic": "ara",
        "azeri": "aze",
        "bengali": "ben",
        "bulgarian": "bul",
        "cebuano": "ceb",
        "croatian": "hrv",
        "czech": "ces",
        "danish": "dan",
        "dutch": "nld",
        "english": "eng",
        "estonian": "est",
        "farsi": "fas",
        "finnish": "fin",
        "french": "fra",
        "german": "deu",
        "hausa": "hau",
        "hawaiian": "haw",
        "hindi": "hin",
        "hungarian": "hun",
        "icelandic": "isl",
        "indonesian": "ind",
        "italian": "ita",
        "kazakh": "kaz",
        "kyrgyz": "kir",
        "latin": "lat",
        "latvian": "lav",
        "lithuanian": "lit",
        "macedonian": "mkd",
        "mongolian": "mon",
        "nepali": "nep",
        "norwegian": "nor",
        "pashto": "pus",
        "pidgin": "crp",
        "polish": "pol",
        "portuguese": "por",
        "romanian": "ron",
        "russian": "rus",
        "serbian": "srp",
        "slovak": "slk",
        "slovene": "slv",
        "somali": "som",
        "spanish": "spa",
        "swahili": "swa",
        "swedish": "swe",
        "tagalog": "tgl",
        "turkish": "tur",
        "ukrainian": "ukr",
        "urdu": "urd",
        "uzbek": "uzb",
        "vietnamese": "vie",
        "welsh": "cym"
      },
      code2ToName: {
        "ar": "arabic",
        "az": "azeri",
        "bg": "bulgarian",
        "bn": "bengali",
        "cs": "czech",
        "cy": "welsh",
        "da": "danish",
        "de": "german",
        "en": "english",
        "es": "spanish",
        "et": "estonian",
        "fa": "farsi",
        "fi": "finnish",
        "fr": "french",
        "ha": "hausa",
        "hi": "hindi",
        "hr": "croatian",
        "hu": "hungarian",
        "id": "indonesian",
        "is": "icelandic",
        "it": "italian",
        "kk": "kazakh",
        "ky": "kyrgyz",
        "la": "latin",
        "lt": "lithuanian",
        "lv": "latvian",
        "mk": "macedonian",
        "mn": "mongolian",
        "ne": "nepali",
        "nl": "dutch",
        "no": "norwegian",
        "pl": "polish",
        "ps": "pashto",
        "pt": "portuguese",
        "ro": "romanian",
        "ru": "russian",
        "sk": "slovak",
        "sl": "slovene",
        "so": "somali",
        "sq": "albanian",
        "sr": "serbian",
        "sv": "swedish",
        "sw": "swahili",
        "tl": "tagalog",
        "tr": "turkish",
        "uk": "ukrainian",
        "ur": "urdu",
        "uz": "uzbek",
        "vi": "vietnamese"
      },
      code3ToName: {
        "ara": "arabic",
        "aze": "azeri",
        "ben": "bengali",
        "bul": "bulgarian",
        "ceb": "cebuano",
        "ces": "czech",
        "crp": "pidgin",
        "cym": "welsh",
        "dan": "danish",
        "deu": "german",
        "eng": "english",
        "est": "estonian",
        "fas": "farsi",
        "fin": "finnish",
        "fra": "french",
        "hau": "hausa",
        "haw": "hawaiian",
        "hin": "hindi",
        "hrv": "croatian",
        "hun": "hungarian",
        "ind": "indonesian",
        "isl": "icelandic",
        "ita": "italian",
        "kaz": "kazakh",
        "kir": "kyrgyz",
        "lat": "latin",
        "lav": "latvian",
        "lit": "lithuanian",
        "mkd": "macedonian",
        "mon": "mongolian",
        "nep": "nepali",
        "nld": "dutch",
        "nor": "norwegian",
        "pol": "polish",
        "por": "portuguese",
        "pus": "pashto",
        "rom": "romanian",
        "rus": "russian",
        "slk": "slovak",
        "slv": "slovene",
        "som": "somali",
        "spa": "spanish",
        "sqi": "albanian",
        "srp": "serbian",
        "swa": "swahili",
        "swe": "swedish",
        "tgl": "tagalog",
        "tur": "turkish",
        "ukr": "ukrainian",
        "urd": "urdu",
        "uzb": "uzbek",
        "vie": "vietnamese"
      }
    };
  }
});

// node_modules/languagedetect/lib/LanguageDetect.js
var require_LanguageDetect = __commonJS({
  "node_modules/languagedetect/lib/LanguageDetect.js"(exports2, module2) {
    var dbLang = require_lang();
    var Parser = require_Parser();
    var ISO639 = require_ISO639();
    var LanguageDetect2 = module2.exports = function(languageType) {
      this.langDb = {};
      this.threshold = 300;
      this.useUnicodeNarrowing = true;
      this.langDb = dbLang["trigram"];
      this.unicodeMap = dbLang["trigram-unicodemap"];
      this.languageType = languageType || null;
    };
    LanguageDetect2.prototype = {
      /**
       * Returns the number of languages that this object can detect
       *
       * @access public
       * @return int the number of languages
       */
      getLanguageCount: function() {
        return this.getLanguages().length;
      },
      setLanguageType: function(type2) {
        return this.languageType = type2;
      },
      /**
       * Returns the list of detectable languages
       *
       * @access public
       * @return object the names of the languages known to this object
       */
      getLanguages: function() {
        return Object.keys(this.langDb);
      },
      /**
       * Calculates a linear rank-order distance statistic between two sets of
       * ranked trigrams
       *
       * Sums the differences in rank for each trigram. If the trigram does not
       * appear in both, consider it a difference of $this->_threshold.
       *
       * This distance measure was proposed by Cavnar & Trenkle (1994). Despite
       * its simplicity it has been shown to be highly accurate for language
       * identification tasks.
       *
       * @access  private
       * @param   arr1  the reference set of trigram ranks
       * @param   arr2  the target set of trigram ranks
       * @return  int   the sum of the differences between the ranks of
       *                the two trigram sets
       */
      distance: function(arr1, arr2) {
        var me = this, sumdist = 0, keys = Object.keys(arr2), i;
        for (i = keys.length; i--; ) {
          sumdist += arr1[keys[i]] ? Math.abs(arr2[keys[i]] - arr1[keys[i]]) : me.threshold;
        }
        return sumdist;
      },
      /**
       * Normalizes the score returned by _distance()
       *
       * Different if perl compatible or not
       *
       * @access  private
       * @param   score       the score from _distance()
       * @param   baseCount   the number of trigrams being considered
       * @return  number      the normalized score
       *
       * @see     distance()
       */
      normalizeScore: function(score, baseCount) {
        return 1 - score / (baseCount || this.threshold) / this.threshold;
      },
      /**
       * Detects the closeness of a sample of text to the known languages
       *
       * Calculates the statistical difference between the text and
       * the trigrams for each language, normalizes the score then
       * returns results for all languages in sorted order
       *
       * If perl compatible, the score is 300-0, 0 being most similar.
       * Otherwise, it's 0-1 with 1 being most similar.
       *
       * The $sample text should be at least a few sentences in length;
       * should be ascii-7 or utf8 encoded, if another and the mbstring extension
       * is present it will try to detect and convert. However, experience has
       * shown that mb_detect_encoding() *does not work very well* with at least
       * some types of encoding.
       *
       * @access  public
       * @param   sample  a sample of text to compare.
       * @param   limit  if specified, return an array of the most likely
       *                  $limit languages and their scores.
       * @return  Array   sorted array of language scores, blank array if no
       *                  useable text was found, or PEAR_Error if error
       *                  with the object setup
       *
       * @see     distance()
       */
      detect: function(sample, limit) {
        var me = this, scores = [];
        limit = +limit || 0;
        if (sample == "" || String(sample).length < 3)
          return [];
        var sampleObj = new Parser(sample);
        sampleObj.setPadStart(true);
        sampleObj.analyze();
        var trigramFreqs = sampleObj.getTrigramRanks(), trigramCount = Object.keys(trigramFreqs).length;
        if (trigramCount == 0)
          return [];
        var keys = [], i, lang3;
        if (this.useUnicodeNarrowing) {
          var blocks = sampleObj.getUnicodeBlocks(), languages = Object.keys(blocks), keysLength = languages.length;
          for (i = keysLength; i--; ) {
            if (this.unicodeMap[languages[i]]) {
              for (lang3 in this.unicodeMap[languages[i]]) {
                if (!~keys.indexOf(lang3))
                  keys.push(lang3);
              }
            }
          }
        } else {
          keys = me.getLanguages();
        }
        for (i = keys.length; i--; ) {
          var score = me.normalizeScore(me.distance(me.langDb[keys[i]], trigramFreqs), trigramCount);
          if (score)
            scores.push([keys[i], score]);
        }
        scores.sort(function(a2, b) {
          return b[1] - a2[1];
        });
        var scoresLength = scores.length;
        if (!scoresLength)
          return [];
        switch (me.languageType) {
          case "iso2":
            for (i = scoresLength; i--; ) {
              scores[i][0] = ISO639.getCode2(scores[i][0]);
            }
            break;
          case "iso3":
            for (i = scoresLength; i--; ) {
              scores[i][0] = ISO639.getCode3(scores[i][0]);
            }
            break;
        }
        return limit > 0 ? scores.slice(0, limit) : scores;
      }
    };
  }
});

// node_modules/languagedetect/index.js
var require_languagedetect = __commonJS({
  "node_modules/languagedetect/index.js"(exports2, module2) {
    module2.exports = require_LanguageDetect();
  }
});

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ScGraphView
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// node_modules/d3-array/src/ascending.js
function ascending(a2, b) {
  return a2 == null || b == null ? NaN : a2 < b ? -1 : a2 > b ? 1 : a2 >= b ? 0 : NaN;
}

// node_modules/d3-array/src/descending.js
function descending(a2, b) {
  return a2 == null || b == null ? NaN : b < a2 ? -1 : b > a2 ? 1 : b >= a2 ? 0 : NaN;
}

// node_modules/d3-array/src/bisector.js
function bisector(f) {
  let compare1, compare2, delta;
  if (f.length !== 2) {
    compare1 = ascending;
    compare2 = (d, x3) => ascending(f(d), x3);
    delta = (d, x3) => f(d) - x3;
  } else {
    compare1 = f === ascending || f === descending ? f : zero;
    compare2 = f;
    delta = f;
  }
  function left(a2, x3, lo = 0, hi = a2.length) {
    if (lo < hi) {
      if (compare1(x3, x3) !== 0)
        return hi;
      do {
        const mid = lo + hi >>> 1;
        if (compare2(a2[mid], x3) < 0)
          lo = mid + 1;
        else
          hi = mid;
      } while (lo < hi);
    }
    return lo;
  }
  function right(a2, x3, lo = 0, hi = a2.length) {
    if (lo < hi) {
      if (compare1(x3, x3) !== 0)
        return hi;
      do {
        const mid = lo + hi >>> 1;
        if (compare2(a2[mid], x3) <= 0)
          lo = mid + 1;
        else
          hi = mid;
      } while (lo < hi);
    }
    return lo;
  }
  function center(a2, x3, lo = 0, hi = a2.length) {
    const i = left(a2, x3, lo, hi - 1);
    return i > lo && delta(a2[i - 1], x3) > -delta(a2[i], x3) ? i - 1 : i;
  }
  return { left, center, right };
}
function zero() {
  return 0;
}

// node_modules/d3-array/src/number.js
function number(x3) {
  return x3 === null ? NaN : +x3;
}

// node_modules/d3-array/src/bisect.js
var ascendingBisect = bisector(ascending);
var bisectRight = ascendingBisect.right;
var bisectLeft = ascendingBisect.left;
var bisectCenter = bisector(number).center;
var bisect_default = bisectRight;

// node_modules/d3-array/src/ticks.js
var e10 = Math.sqrt(50);
var e5 = Math.sqrt(10);
var e2 = Math.sqrt(2);
function tickSpec(start2, stop, count) {
  const step = (stop - start2) / Math.max(0, count), power = Math.floor(Math.log10(step)), error = step / Math.pow(10, power), factor = error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1;
  let i1, i2, inc;
  if (power < 0) {
    inc = Math.pow(10, -power) / factor;
    i1 = Math.round(start2 * inc);
    i2 = Math.round(stop * inc);
    if (i1 / inc < start2)
      ++i1;
    if (i2 / inc > stop)
      --i2;
    inc = -inc;
  } else {
    inc = Math.pow(10, power) * factor;
    i1 = Math.round(start2 / inc);
    i2 = Math.round(stop / inc);
    if (i1 * inc < start2)
      ++i1;
    if (i2 * inc > stop)
      --i2;
  }
  if (i2 < i1 && 0.5 <= count && count < 2)
    return tickSpec(start2, stop, count * 2);
  return [i1, i2, inc];
}
function ticks(start2, stop, count) {
  stop = +stop, start2 = +start2, count = +count;
  if (!(count > 0))
    return [];
  if (start2 === stop)
    return [start2];
  const reverse = stop < start2, [i1, i2, inc] = reverse ? tickSpec(stop, start2, count) : tickSpec(start2, stop, count);
  if (!(i2 >= i1))
    return [];
  const n = i2 - i1 + 1, ticks2 = new Array(n);
  if (reverse) {
    if (inc < 0)
      for (let i = 0; i < n; ++i)
        ticks2[i] = (i2 - i) / -inc;
    else
      for (let i = 0; i < n; ++i)
        ticks2[i] = (i2 - i) * inc;
  } else {
    if (inc < 0)
      for (let i = 0; i < n; ++i)
        ticks2[i] = (i1 + i) / -inc;
    else
      for (let i = 0; i < n; ++i)
        ticks2[i] = (i1 + i) * inc;
  }
  return ticks2;
}
function tickIncrement(start2, stop, count) {
  stop = +stop, start2 = +start2, count = +count;
  return tickSpec(start2, stop, count)[2];
}
function tickStep(start2, stop, count) {
  stop = +stop, start2 = +start2, count = +count;
  const reverse = stop < start2, inc = reverse ? tickIncrement(stop, start2, count) : tickIncrement(start2, stop, count);
  return (reverse ? -1 : 1) * (inc < 0 ? 1 / -inc : inc);
}

// node_modules/d3-dispatch/src/dispatch.js
var noop = { value: () => {
} };
function dispatch() {
  for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {
    if (!(t = arguments[i] + "") || t in _ || /[\s.]/.test(t))
      throw new Error("illegal type: " + t);
    _[t] = [];
  }
  return new Dispatch(_);
}
function Dispatch(_) {
  this._ = _;
}
function parseTypenames(typenames, types) {
  return typenames.trim().split(/^|\s+/).map(function(t) {
    var name = "", i = t.indexOf(".");
    if (i >= 0)
      name = t.slice(i + 1), t = t.slice(0, i);
    if (t && !types.hasOwnProperty(t))
      throw new Error("unknown type: " + t);
    return { type: t, name };
  });
}
Dispatch.prototype = dispatch.prototype = {
  constructor: Dispatch,
  on: function(typename, callback) {
    var _ = this._, T = parseTypenames(typename + "", _), t, i = -1, n = T.length;
    if (arguments.length < 2) {
      while (++i < n)
        if ((t = (typename = T[i]).type) && (t = get(_[t], typename.name)))
          return t;
      return;
    }
    if (callback != null && typeof callback !== "function")
      throw new Error("invalid callback: " + callback);
    while (++i < n) {
      if (t = (typename = T[i]).type)
        _[t] = set(_[t], typename.name, callback);
      else if (callback == null)
        for (t in _)
          _[t] = set(_[t], typename.name, null);
    }
    return this;
  },
  copy: function() {
    var copy2 = {}, _ = this._;
    for (var t in _)
      copy2[t] = _[t].slice();
    return new Dispatch(copy2);
  },
  call: function(type2, that) {
    if ((n = arguments.length - 2) > 0)
      for (var args = new Array(n), i = 0, n, t; i < n; ++i)
        args[i] = arguments[i + 2];
    if (!this._.hasOwnProperty(type2))
      throw new Error("unknown type: " + type2);
    for (t = this._[type2], i = 0, n = t.length; i < n; ++i)
      t[i].value.apply(that, args);
  },
  apply: function(type2, that, args) {
    if (!this._.hasOwnProperty(type2))
      throw new Error("unknown type: " + type2);
    for (var t = this._[type2], i = 0, n = t.length; i < n; ++i)
      t[i].value.apply(that, args);
  }
};
function get(type2, name) {
  for (var i = 0, n = type2.length, c2; i < n; ++i) {
    if ((c2 = type2[i]).name === name) {
      return c2.value;
    }
  }
}
function set(type2, name, callback) {
  for (var i = 0, n = type2.length; i < n; ++i) {
    if (type2[i].name === name) {
      type2[i] = noop, type2 = type2.slice(0, i).concat(type2.slice(i + 1));
      break;
    }
  }
  if (callback != null)
    type2.push({ name, value: callback });
  return type2;
}
var dispatch_default = dispatch;

// node_modules/d3-selection/src/namespaces.js
var xhtml = "http://www.w3.org/1999/xhtml";
var namespaces_default = {
  svg: "http://www.w3.org/2000/svg",
  xhtml,
  xlink: "http://www.w3.org/1999/xlink",
  xml: "http://www.w3.org/XML/1998/namespace",
  xmlns: "http://www.w3.org/2000/xmlns/"
};

// node_modules/d3-selection/src/namespace.js
function namespace_default(name) {
  var prefix = name += "", i = prefix.indexOf(":");
  if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns")
    name = name.slice(i + 1);
  return namespaces_default.hasOwnProperty(prefix) ? { space: namespaces_default[prefix], local: name } : name;
}

// node_modules/d3-selection/src/creator.js
function creatorInherit(name) {
  return function() {
    var document2 = this.ownerDocument, uri = this.namespaceURI;
    return uri === xhtml && document2.documentElement.namespaceURI === xhtml ? document2.createElement(name) : document2.createElementNS(uri, name);
  };
}
function creatorFixed(fullname) {
  return function() {
    return this.ownerDocument.createElementNS(fullname.space, fullname.local);
  };
}
function creator_default(name) {
  var fullname = namespace_default(name);
  return (fullname.local ? creatorFixed : creatorInherit)(fullname);
}

// node_modules/d3-selection/src/selector.js
function none() {
}
function selector_default(selector) {
  return selector == null ? none : function() {
    return this.querySelector(selector);
  };
}

// node_modules/d3-selection/src/selection/select.js
function select_default(select) {
  if (typeof select !== "function")
    select = selector_default(select);
  for (var groups = this._groups, m2 = groups.length, subgroups = new Array(m2), j = 0; j < m2; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
        if ("__data__" in node)
          subnode.__data__ = node.__data__;
        subgroup[i] = subnode;
      }
    }
  }
  return new Selection(subgroups, this._parents);
}

// node_modules/d3-selection/src/array.js
function array(x3) {
  return x3 == null ? [] : Array.isArray(x3) ? x3 : Array.from(x3);
}

// node_modules/d3-selection/src/selectorAll.js
function empty() {
  return [];
}
function selectorAll_default(selector) {
  return selector == null ? empty : function() {
    return this.querySelectorAll(selector);
  };
}

// node_modules/d3-selection/src/selection/selectAll.js
function arrayAll(select) {
  return function() {
    return array(select.apply(this, arguments));
  };
}
function selectAll_default(select) {
  if (typeof select === "function")
    select = arrayAll(select);
  else
    select = selectorAll_default(select);
  for (var groups = this._groups, m2 = groups.length, subgroups = [], parents = [], j = 0; j < m2; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        subgroups.push(select.call(node, node.__data__, i, group));
        parents.push(node);
      }
    }
  }
  return new Selection(subgroups, parents);
}

// node_modules/d3-selection/src/matcher.js
function matcher_default(selector) {
  return function() {
    return this.matches(selector);
  };
}
function childMatcher(selector) {
  return function(node) {
    return node.matches(selector);
  };
}

// node_modules/d3-selection/src/selection/selectChild.js
var find = Array.prototype.find;
function childFind(match) {
  return function() {
    return find.call(this.children, match);
  };
}
function childFirst() {
  return this.firstElementChild;
}
function selectChild_default(match) {
  return this.select(match == null ? childFirst : childFind(typeof match === "function" ? match : childMatcher(match)));
}

// node_modules/d3-selection/src/selection/selectChildren.js
var filter = Array.prototype.filter;
function children() {
  return Array.from(this.children);
}
function childrenFilter(match) {
  return function() {
    return filter.call(this.children, match);
  };
}
function selectChildren_default(match) {
  return this.selectAll(match == null ? children : childrenFilter(typeof match === "function" ? match : childMatcher(match)));
}

// node_modules/d3-selection/src/selection/filter.js
function filter_default(match) {
  if (typeof match !== "function")
    match = matcher_default(match);
  for (var groups = this._groups, m2 = groups.length, subgroups = new Array(m2), j = 0; j < m2; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
        subgroup.push(node);
      }
    }
  }
  return new Selection(subgroups, this._parents);
}

// node_modules/d3-selection/src/selection/sparse.js
function sparse_default(update) {
  return new Array(update.length);
}

// node_modules/d3-selection/src/selection/enter.js
function enter_default() {
  return new Selection(this._enter || this._groups.map(sparse_default), this._parents);
}
function EnterNode(parent, datum2) {
  this.ownerDocument = parent.ownerDocument;
  this.namespaceURI = parent.namespaceURI;
  this._next = null;
  this._parent = parent;
  this.__data__ = datum2;
}
EnterNode.prototype = {
  constructor: EnterNode,
  appendChild: function(child) {
    return this._parent.insertBefore(child, this._next);
  },
  insertBefore: function(child, next) {
    return this._parent.insertBefore(child, next);
  },
  querySelector: function(selector) {
    return this._parent.querySelector(selector);
  },
  querySelectorAll: function(selector) {
    return this._parent.querySelectorAll(selector);
  }
};

// node_modules/d3-selection/src/constant.js
function constant_default(x3) {
  return function() {
    return x3;
  };
}

// node_modules/d3-selection/src/selection/data.js
function bindIndex(parent, group, enter, update, exit, data) {
  var i = 0, node, groupLength = group.length, dataLength = data.length;
  for (; i < dataLength; ++i) {
    if (node = group[i]) {
      node.__data__ = data[i];
      update[i] = node;
    } else {
      enter[i] = new EnterNode(parent, data[i]);
    }
  }
  for (; i < groupLength; ++i) {
    if (node = group[i]) {
      exit[i] = node;
    }
  }
}
function bindKey(parent, group, enter, update, exit, data, key) {
  var i, node, nodeByKeyValue = /* @__PURE__ */ new Map(), groupLength = group.length, dataLength = data.length, keyValues = new Array(groupLength), keyValue;
  for (i = 0; i < groupLength; ++i) {
    if (node = group[i]) {
      keyValues[i] = keyValue = key.call(node, node.__data__, i, group) + "";
      if (nodeByKeyValue.has(keyValue)) {
        exit[i] = node;
      } else {
        nodeByKeyValue.set(keyValue, node);
      }
    }
  }
  for (i = 0; i < dataLength; ++i) {
    keyValue = key.call(parent, data[i], i, data) + "";
    if (node = nodeByKeyValue.get(keyValue)) {
      update[i] = node;
      node.__data__ = data[i];
      nodeByKeyValue.delete(keyValue);
    } else {
      enter[i] = new EnterNode(parent, data[i]);
    }
  }
  for (i = 0; i < groupLength; ++i) {
    if ((node = group[i]) && nodeByKeyValue.get(keyValues[i]) === node) {
      exit[i] = node;
    }
  }
}
function datum(node) {
  return node.__data__;
}
function data_default(value, key) {
  if (!arguments.length)
    return Array.from(this, datum);
  var bind = key ? bindKey : bindIndex, parents = this._parents, groups = this._groups;
  if (typeof value !== "function")
    value = constant_default(value);
  for (var m2 = groups.length, update = new Array(m2), enter = new Array(m2), exit = new Array(m2), j = 0; j < m2; ++j) {
    var parent = parents[j], group = groups[j], groupLength = group.length, data = arraylike(value.call(parent, parent && parent.__data__, j, parents)), dataLength = data.length, enterGroup = enter[j] = new Array(dataLength), updateGroup = update[j] = new Array(dataLength), exitGroup = exit[j] = new Array(groupLength);
    bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);
    for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {
      if (previous = enterGroup[i0]) {
        if (i0 >= i1)
          i1 = i0 + 1;
        while (!(next = updateGroup[i1]) && ++i1 < dataLength)
          ;
        previous._next = next || null;
      }
    }
  }
  update = new Selection(update, parents);
  update._enter = enter;
  update._exit = exit;
  return update;
}
function arraylike(data) {
  return typeof data === "object" && "length" in data ? data : Array.from(data);
}

// node_modules/d3-selection/src/selection/exit.js
function exit_default() {
  return new Selection(this._exit || this._groups.map(sparse_default), this._parents);
}

// node_modules/d3-selection/src/selection/join.js
function join_default(onenter, onupdate, onexit) {
  var enter = this.enter(), update = this, exit = this.exit();
  if (typeof onenter === "function") {
    enter = onenter(enter);
    if (enter)
      enter = enter.selection();
  } else {
    enter = enter.append(onenter + "");
  }
  if (onupdate != null) {
    update = onupdate(update);
    if (update)
      update = update.selection();
  }
  if (onexit == null)
    exit.remove();
  else
    onexit(exit);
  return enter && update ? enter.merge(update).order() : update;
}

// node_modules/d3-selection/src/selection/merge.js
function merge_default(context) {
  var selection2 = context.selection ? context.selection() : context;
  for (var groups0 = this._groups, groups1 = selection2._groups, m0 = groups0.length, m1 = groups1.length, m2 = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m2; ++j) {
    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group0[i] || group1[i]) {
        merge[i] = node;
      }
    }
  }
  for (; j < m0; ++j) {
    merges[j] = groups0[j];
  }
  return new Selection(merges, this._parents);
}

// node_modules/d3-selection/src/selection/order.js
function order_default() {
  for (var groups = this._groups, j = -1, m2 = groups.length; ++j < m2; ) {
    for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0; ) {
      if (node = group[i]) {
        if (next && node.compareDocumentPosition(next) ^ 4)
          next.parentNode.insertBefore(node, next);
        next = node;
      }
    }
  }
  return this;
}

// node_modules/d3-selection/src/selection/sort.js
function sort_default(compare) {
  if (!compare)
    compare = ascending2;
  function compareNode(a2, b) {
    return a2 && b ? compare(a2.__data__, b.__data__) : !a2 - !b;
  }
  for (var groups = this._groups, m2 = groups.length, sortgroups = new Array(m2), j = 0; j < m2; ++j) {
    for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        sortgroup[i] = node;
      }
    }
    sortgroup.sort(compareNode);
  }
  return new Selection(sortgroups, this._parents).order();
}
function ascending2(a2, b) {
  return a2 < b ? -1 : a2 > b ? 1 : a2 >= b ? 0 : NaN;
}

// node_modules/d3-selection/src/selection/call.js
function call_default() {
  var callback = arguments[0];
  arguments[0] = this;
  callback.apply(null, arguments);
  return this;
}

// node_modules/d3-selection/src/selection/nodes.js
function nodes_default() {
  return Array.from(this);
}

// node_modules/d3-selection/src/selection/node.js
function node_default() {
  for (var groups = this._groups, j = 0, m2 = groups.length; j < m2; ++j) {
    for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {
      var node = group[i];
      if (node)
        return node;
    }
  }
  return null;
}

// node_modules/d3-selection/src/selection/size.js
function size_default() {
  let size = 0;
  for (const node of this)
    ++size;
  return size;
}

// node_modules/d3-selection/src/selection/empty.js
function empty_default() {
  return !this.node();
}

// node_modules/d3-selection/src/selection/each.js
function each_default(callback) {
  for (var groups = this._groups, j = 0, m2 = groups.length; j < m2; ++j) {
    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
      if (node = group[i])
        callback.call(node, node.__data__, i, group);
    }
  }
  return this;
}

// node_modules/d3-selection/src/selection/attr.js
function attrRemove(name) {
  return function() {
    this.removeAttribute(name);
  };
}
function attrRemoveNS(fullname) {
  return function() {
    this.removeAttributeNS(fullname.space, fullname.local);
  };
}
function attrConstant(name, value) {
  return function() {
    this.setAttribute(name, value);
  };
}
function attrConstantNS(fullname, value) {
  return function() {
    this.setAttributeNS(fullname.space, fullname.local, value);
  };
}
function attrFunction(name, value) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null)
      this.removeAttribute(name);
    else
      this.setAttribute(name, v);
  };
}
function attrFunctionNS(fullname, value) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null)
      this.removeAttributeNS(fullname.space, fullname.local);
    else
      this.setAttributeNS(fullname.space, fullname.local, v);
  };
}
function attr_default(name, value) {
  var fullname = namespace_default(name);
  if (arguments.length < 2) {
    var node = this.node();
    return fullname.local ? node.getAttributeNS(fullname.space, fullname.local) : node.getAttribute(fullname);
  }
  return this.each((value == null ? fullname.local ? attrRemoveNS : attrRemove : typeof value === "function" ? fullname.local ? attrFunctionNS : attrFunction : fullname.local ? attrConstantNS : attrConstant)(fullname, value));
}

// node_modules/d3-selection/src/window.js
function window_default(node) {
  return node.ownerDocument && node.ownerDocument.defaultView || node.document && node || node.defaultView;
}

// node_modules/d3-selection/src/selection/style.js
function styleRemove(name) {
  return function() {
    this.style.removeProperty(name);
  };
}
function styleConstant(name, value, priority) {
  return function() {
    this.style.setProperty(name, value, priority);
  };
}
function styleFunction(name, value, priority) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null)
      this.style.removeProperty(name);
    else
      this.style.setProperty(name, v, priority);
  };
}
function style_default(name, value, priority) {
  return arguments.length > 1 ? this.each((value == null ? styleRemove : typeof value === "function" ? styleFunction : styleConstant)(name, value, priority == null ? "" : priority)) : styleValue(this.node(), name);
}
function styleValue(node, name) {
  return node.style.getPropertyValue(name) || window_default(node).getComputedStyle(node, null).getPropertyValue(name);
}

// node_modules/d3-selection/src/selection/property.js
function propertyRemove(name) {
  return function() {
    delete this[name];
  };
}
function propertyConstant(name, value) {
  return function() {
    this[name] = value;
  };
}
function propertyFunction(name, value) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null)
      delete this[name];
    else
      this[name] = v;
  };
}
function property_default(name, value) {
  return arguments.length > 1 ? this.each((value == null ? propertyRemove : typeof value === "function" ? propertyFunction : propertyConstant)(name, value)) : this.node()[name];
}

// node_modules/d3-selection/src/selection/classed.js
function classArray(string) {
  return string.trim().split(/^|\s+/);
}
function classList(node) {
  return node.classList || new ClassList(node);
}
function ClassList(node) {
  this._node = node;
  this._names = classArray(node.getAttribute("class") || "");
}
ClassList.prototype = {
  add: function(name) {
    var i = this._names.indexOf(name);
    if (i < 0) {
      this._names.push(name);
      this._node.setAttribute("class", this._names.join(" "));
    }
  },
  remove: function(name) {
    var i = this._names.indexOf(name);
    if (i >= 0) {
      this._names.splice(i, 1);
      this._node.setAttribute("class", this._names.join(" "));
    }
  },
  contains: function(name) {
    return this._names.indexOf(name) >= 0;
  }
};
function classedAdd(node, names) {
  var list = classList(node), i = -1, n = names.length;
  while (++i < n)
    list.add(names[i]);
}
function classedRemove(node, names) {
  var list = classList(node), i = -1, n = names.length;
  while (++i < n)
    list.remove(names[i]);
}
function classedTrue(names) {
  return function() {
    classedAdd(this, names);
  };
}
function classedFalse(names) {
  return function() {
    classedRemove(this, names);
  };
}
function classedFunction(names, value) {
  return function() {
    (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);
  };
}
function classed_default(name, value) {
  var names = classArray(name + "");
  if (arguments.length < 2) {
    var list = classList(this.node()), i = -1, n = names.length;
    while (++i < n)
      if (!list.contains(names[i]))
        return false;
    return true;
  }
  return this.each((typeof value === "function" ? classedFunction : value ? classedTrue : classedFalse)(names, value));
}

// node_modules/d3-selection/src/selection/text.js
function textRemove() {
  this.textContent = "";
}
function textConstant(value) {
  return function() {
    this.textContent = value;
  };
}
function textFunction(value) {
  return function() {
    var v = value.apply(this, arguments);
    this.textContent = v == null ? "" : v;
  };
}
function text_default(value) {
  return arguments.length ? this.each(value == null ? textRemove : (typeof value === "function" ? textFunction : textConstant)(value)) : this.node().textContent;
}

// node_modules/d3-selection/src/selection/html.js
function htmlRemove() {
  this.innerHTML = "";
}
function htmlConstant(value) {
  return function() {
    this.innerHTML = value;
  };
}
function htmlFunction(value) {
  return function() {
    var v = value.apply(this, arguments);
    this.innerHTML = v == null ? "" : v;
  };
}
function html_default(value) {
  return arguments.length ? this.each(value == null ? htmlRemove : (typeof value === "function" ? htmlFunction : htmlConstant)(value)) : this.node().innerHTML;
}

// node_modules/d3-selection/src/selection/raise.js
function raise() {
  if (this.nextSibling)
    this.parentNode.appendChild(this);
}
function raise_default() {
  return this.each(raise);
}

// node_modules/d3-selection/src/selection/lower.js
function lower() {
  if (this.previousSibling)
    this.parentNode.insertBefore(this, this.parentNode.firstChild);
}
function lower_default() {
  return this.each(lower);
}

// node_modules/d3-selection/src/selection/append.js
function append_default(name) {
  var create2 = typeof name === "function" ? name : creator_default(name);
  return this.select(function() {
    return this.appendChild(create2.apply(this, arguments));
  });
}

// node_modules/d3-selection/src/selection/insert.js
function constantNull() {
  return null;
}
function insert_default(name, before) {
  var create2 = typeof name === "function" ? name : creator_default(name), select = before == null ? constantNull : typeof before === "function" ? before : selector_default(before);
  return this.select(function() {
    return this.insertBefore(create2.apply(this, arguments), select.apply(this, arguments) || null);
  });
}

// node_modules/d3-selection/src/selection/remove.js
function remove() {
  var parent = this.parentNode;
  if (parent)
    parent.removeChild(this);
}
function remove_default() {
  return this.each(remove);
}

// node_modules/d3-selection/src/selection/clone.js
function selection_cloneShallow() {
  var clone = this.cloneNode(false), parent = this.parentNode;
  return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
}
function selection_cloneDeep() {
  var clone = this.cloneNode(true), parent = this.parentNode;
  return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
}
function clone_default(deep) {
  return this.select(deep ? selection_cloneDeep : selection_cloneShallow);
}

// node_modules/d3-selection/src/selection/datum.js
function datum_default(value) {
  return arguments.length ? this.property("__data__", value) : this.node().__data__;
}

// node_modules/d3-selection/src/selection/on.js
function contextListener(listener) {
  return function(event) {
    listener.call(this, event, this.__data__);
  };
}
function parseTypenames2(typenames) {
  return typenames.trim().split(/^|\s+/).map(function(t) {
    var name = "", i = t.indexOf(".");
    if (i >= 0)
      name = t.slice(i + 1), t = t.slice(0, i);
    return { type: t, name };
  });
}
function onRemove(typename) {
  return function() {
    var on = this.__on;
    if (!on)
      return;
    for (var j = 0, i = -1, m2 = on.length, o; j < m2; ++j) {
      if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {
        this.removeEventListener(o.type, o.listener, o.options);
      } else {
        on[++i] = o;
      }
    }
    if (++i)
      on.length = i;
    else
      delete this.__on;
  };
}
function onAdd(typename, value, options) {
  return function() {
    var on = this.__on, o, listener = contextListener(value);
    if (on)
      for (var j = 0, m2 = on.length; j < m2; ++j) {
        if ((o = on[j]).type === typename.type && o.name === typename.name) {
          this.removeEventListener(o.type, o.listener, o.options);
          this.addEventListener(o.type, o.listener = listener, o.options = options);
          o.value = value;
          return;
        }
      }
    this.addEventListener(typename.type, listener, options);
    o = { type: typename.type, name: typename.name, value, listener, options };
    if (!on)
      this.__on = [o];
    else
      on.push(o);
  };
}
function on_default(typename, value, options) {
  var typenames = parseTypenames2(typename + ""), i, n = typenames.length, t;
  if (arguments.length < 2) {
    var on = this.node().__on;
    if (on)
      for (var j = 0, m2 = on.length, o; j < m2; ++j) {
        for (i = 0, o = on[j]; i < n; ++i) {
          if ((t = typenames[i]).type === o.type && t.name === o.name) {
            return o.value;
          }
        }
      }
    return;
  }
  on = value ? onAdd : onRemove;
  for (i = 0; i < n; ++i)
    this.each(on(typenames[i], value, options));
  return this;
}

// node_modules/d3-selection/src/selection/dispatch.js
function dispatchEvent(node, type2, params) {
  var window2 = window_default(node), event = window2.CustomEvent;
  if (typeof event === "function") {
    event = new event(type2, params);
  } else {
    event = window2.document.createEvent("Event");
    if (params)
      event.initEvent(type2, params.bubbles, params.cancelable), event.detail = params.detail;
    else
      event.initEvent(type2, false, false);
  }
  node.dispatchEvent(event);
}
function dispatchConstant(type2, params) {
  return function() {
    return dispatchEvent(this, type2, params);
  };
}
function dispatchFunction(type2, params) {
  return function() {
    return dispatchEvent(this, type2, params.apply(this, arguments));
  };
}
function dispatch_default2(type2, params) {
  return this.each((typeof params === "function" ? dispatchFunction : dispatchConstant)(type2, params));
}

// node_modules/d3-selection/src/selection/iterator.js
function* iterator_default() {
  for (var groups = this._groups, j = 0, m2 = groups.length; j < m2; ++j) {
    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
      if (node = group[i])
        yield node;
    }
  }
}

// node_modules/d3-selection/src/selection/index.js
var root = [null];
function Selection(groups, parents) {
  this._groups = groups;
  this._parents = parents;
}
function selection() {
  return new Selection([[document.documentElement]], root);
}
function selection_selection() {
  return this;
}
Selection.prototype = selection.prototype = {
  constructor: Selection,
  select: select_default,
  selectAll: selectAll_default,
  selectChild: selectChild_default,
  selectChildren: selectChildren_default,
  filter: filter_default,
  data: data_default,
  enter: enter_default,
  exit: exit_default,
  join: join_default,
  merge: merge_default,
  selection: selection_selection,
  order: order_default,
  sort: sort_default,
  call: call_default,
  nodes: nodes_default,
  node: node_default,
  size: size_default,
  empty: empty_default,
  each: each_default,
  attr: attr_default,
  style: style_default,
  property: property_default,
  classed: classed_default,
  text: text_default,
  html: html_default,
  raise: raise_default,
  lower: lower_default,
  append: append_default,
  insert: insert_default,
  remove: remove_default,
  clone: clone_default,
  datum: datum_default,
  on: on_default,
  dispatch: dispatch_default2,
  [Symbol.iterator]: iterator_default
};
var selection_default = selection;

// node_modules/d3-selection/src/select.js
function select_default2(selector) {
  return typeof selector === "string" ? new Selection([[document.querySelector(selector)]], [document.documentElement]) : new Selection([[selector]], root);
}

// node_modules/d3-selection/src/sourceEvent.js
function sourceEvent_default(event) {
  let sourceEvent;
  while (sourceEvent = event.sourceEvent)
    event = sourceEvent;
  return event;
}

// node_modules/d3-selection/src/pointer.js
function pointer_default(event, node) {
  event = sourceEvent_default(event);
  if (node === void 0)
    node = event.currentTarget;
  if (node) {
    var svg = node.ownerSVGElement || node;
    if (svg.createSVGPoint) {
      var point = svg.createSVGPoint();
      point.x = event.clientX, point.y = event.clientY;
      point = point.matrixTransform(node.getScreenCTM().inverse());
      return [point.x, point.y];
    }
    if (node.getBoundingClientRect) {
      var rect = node.getBoundingClientRect();
      return [event.clientX - rect.left - node.clientLeft, event.clientY - rect.top - node.clientTop];
    }
  }
  return [event.pageX, event.pageY];
}

// node_modules/d3-drag/src/noevent.js
var nonpassive = { passive: false };
var nonpassivecapture = { capture: true, passive: false };
function nopropagation(event) {
  event.stopImmediatePropagation();
}
function noevent_default(event) {
  event.preventDefault();
  event.stopImmediatePropagation();
}

// node_modules/d3-drag/src/nodrag.js
function nodrag_default(view) {
  var root2 = view.document.documentElement, selection2 = select_default2(view).on("dragstart.drag", noevent_default, nonpassivecapture);
  if ("onselectstart" in root2) {
    selection2.on("selectstart.drag", noevent_default, nonpassivecapture);
  } else {
    root2.__noselect = root2.style.MozUserSelect;
    root2.style.MozUserSelect = "none";
  }
}
function yesdrag(view, noclick) {
  var root2 = view.document.documentElement, selection2 = select_default2(view).on("dragstart.drag", null);
  if (noclick) {
    selection2.on("click.drag", noevent_default, nonpassivecapture);
    setTimeout(function() {
      selection2.on("click.drag", null);
    }, 0);
  }
  if ("onselectstart" in root2) {
    selection2.on("selectstart.drag", null);
  } else {
    root2.style.MozUserSelect = root2.__noselect;
    delete root2.__noselect;
  }
}

// node_modules/d3-drag/src/constant.js
var constant_default2 = (x3) => () => x3;

// node_modules/d3-drag/src/event.js
function DragEvent(type2, {
  sourceEvent,
  subject,
  target,
  identifier,
  active,
  x: x3,
  y: y3,
  dx,
  dy,
  dispatch: dispatch2
}) {
  Object.defineProperties(this, {
    type: { value: type2, enumerable: true, configurable: true },
    sourceEvent: { value: sourceEvent, enumerable: true, configurable: true },
    subject: { value: subject, enumerable: true, configurable: true },
    target: { value: target, enumerable: true, configurable: true },
    identifier: { value: identifier, enumerable: true, configurable: true },
    active: { value: active, enumerable: true, configurable: true },
    x: { value: x3, enumerable: true, configurable: true },
    y: { value: y3, enumerable: true, configurable: true },
    dx: { value: dx, enumerable: true, configurable: true },
    dy: { value: dy, enumerable: true, configurable: true },
    _: { value: dispatch2 }
  });
}
DragEvent.prototype.on = function() {
  var value = this._.on.apply(this._, arguments);
  return value === this._ ? this : value;
};

// node_modules/d3-drag/src/drag.js
function defaultFilter(event) {
  return !event.ctrlKey && !event.button;
}
function defaultContainer() {
  return this.parentNode;
}
function defaultSubject(event, d) {
  return d == null ? { x: event.x, y: event.y } : d;
}
function defaultTouchable() {
  return navigator.maxTouchPoints || "ontouchstart" in this;
}
function drag_default() {
  var filter2 = defaultFilter, container = defaultContainer, subject = defaultSubject, touchable = defaultTouchable, gestures = {}, listeners = dispatch_default("start", "drag", "end"), active = 0, mousedownx, mousedowny, mousemoving, touchending, clickDistance2 = 0;
  function drag(selection2) {
    selection2.on("mousedown.drag", mousedowned).filter(touchable).on("touchstart.drag", touchstarted).on("touchmove.drag", touchmoved, nonpassive).on("touchend.drag touchcancel.drag", touchended).style("touch-action", "none").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
  }
  function mousedowned(event, d) {
    if (touchending || !filter2.call(this, event, d))
      return;
    var gesture = beforestart(this, container.call(this, event, d), event, d, "mouse");
    if (!gesture)
      return;
    select_default2(event.view).on("mousemove.drag", mousemoved, nonpassivecapture).on("mouseup.drag", mouseupped, nonpassivecapture);
    nodrag_default(event.view);
    nopropagation(event);
    mousemoving = false;
    mousedownx = event.clientX;
    mousedowny = event.clientY;
    gesture("start", event);
  }
  function mousemoved(event) {
    noevent_default(event);
    if (!mousemoving) {
      var dx = event.clientX - mousedownx, dy = event.clientY - mousedowny;
      mousemoving = dx * dx + dy * dy > clickDistance2;
    }
    gestures.mouse("drag", event);
  }
  function mouseupped(event) {
    select_default2(event.view).on("mousemove.drag mouseup.drag", null);
    yesdrag(event.view, mousemoving);
    noevent_default(event);
    gestures.mouse("end", event);
  }
  function touchstarted(event, d) {
    if (!filter2.call(this, event, d))
      return;
    var touches = event.changedTouches, c2 = container.call(this, event, d), n = touches.length, i, gesture;
    for (i = 0; i < n; ++i) {
      if (gesture = beforestart(this, c2, event, d, touches[i].identifier, touches[i])) {
        nopropagation(event);
        gesture("start", event, touches[i]);
      }
    }
  }
  function touchmoved(event) {
    var touches = event.changedTouches, n = touches.length, i, gesture;
    for (i = 0; i < n; ++i) {
      if (gesture = gestures[touches[i].identifier]) {
        noevent_default(event);
        gesture("drag", event, touches[i]);
      }
    }
  }
  function touchended(event) {
    var touches = event.changedTouches, n = touches.length, i, gesture;
    if (touchending)
      clearTimeout(touchending);
    touchending = setTimeout(function() {
      touchending = null;
    }, 500);
    for (i = 0; i < n; ++i) {
      if (gesture = gestures[touches[i].identifier]) {
        nopropagation(event);
        gesture("end", event, touches[i]);
      }
    }
  }
  function beforestart(that, container2, event, d, identifier, touch) {
    var dispatch2 = listeners.copy(), p = pointer_default(touch || event, container2), dx, dy, s;
    if ((s = subject.call(that, new DragEvent("beforestart", {
      sourceEvent: event,
      target: drag,
      identifier,
      active,
      x: p[0],
      y: p[1],
      dx: 0,
      dy: 0,
      dispatch: dispatch2
    }), d)) == null)
      return;
    dx = s.x - p[0] || 0;
    dy = s.y - p[1] || 0;
    return function gesture(type2, event2, touch2) {
      var p0 = p, n;
      switch (type2) {
        case "start":
          gestures[identifier] = gesture, n = active++;
          break;
        case "end":
          delete gestures[identifier], --active;
        case "drag":
          p = pointer_default(touch2 || event2, container2), n = active;
          break;
      }
      dispatch2.call(
        type2,
        that,
        new DragEvent(type2, {
          sourceEvent: event2,
          subject: s,
          target: drag,
          identifier,
          active: n,
          x: p[0] + dx,
          y: p[1] + dy,
          dx: p[0] - p0[0],
          dy: p[1] - p0[1],
          dispatch: dispatch2
        }),
        d
      );
    };
  }
  drag.filter = function(_) {
    return arguments.length ? (filter2 = typeof _ === "function" ? _ : constant_default2(!!_), drag) : filter2;
  };
  drag.container = function(_) {
    return arguments.length ? (container = typeof _ === "function" ? _ : constant_default2(_), drag) : container;
  };
  drag.subject = function(_) {
    return arguments.length ? (subject = typeof _ === "function" ? _ : constant_default2(_), drag) : subject;
  };
  drag.touchable = function(_) {
    return arguments.length ? (touchable = typeof _ === "function" ? _ : constant_default2(!!_), drag) : touchable;
  };
  drag.on = function() {
    var value = listeners.on.apply(listeners, arguments);
    return value === listeners ? drag : value;
  };
  drag.clickDistance = function(_) {
    return arguments.length ? (clickDistance2 = (_ = +_) * _, drag) : Math.sqrt(clickDistance2);
  };
  return drag;
}

// node_modules/d3-color/src/define.js
function define_default(constructor, factory, prototype) {
  constructor.prototype = factory.prototype = prototype;
  prototype.constructor = constructor;
}
function extend(parent, definition) {
  var prototype = Object.create(parent.prototype);
  for (var key in definition)
    prototype[key] = definition[key];
  return prototype;
}

// node_modules/d3-color/src/color.js
function Color() {
}
var darker = 0.7;
var brighter = 1 / darker;
var reI = "\\s*([+-]?\\d+)\\s*";
var reN = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*";
var reP = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*";
var reHex = /^#([0-9a-f]{3,8})$/;
var reRgbInteger = new RegExp(`^rgb\\(${reI},${reI},${reI}\\)$`);
var reRgbPercent = new RegExp(`^rgb\\(${reP},${reP},${reP}\\)$`);
var reRgbaInteger = new RegExp(`^rgba\\(${reI},${reI},${reI},${reN}\\)$`);
var reRgbaPercent = new RegExp(`^rgba\\(${reP},${reP},${reP},${reN}\\)$`);
var reHslPercent = new RegExp(`^hsl\\(${reN},${reP},${reP}\\)$`);
var reHslaPercent = new RegExp(`^hsla\\(${reN},${reP},${reP},${reN}\\)$`);
var named = {
  aliceblue: 15792383,
  antiquewhite: 16444375,
  aqua: 65535,
  aquamarine: 8388564,
  azure: 15794175,
  beige: 16119260,
  bisque: 16770244,
  black: 0,
  blanchedalmond: 16772045,
  blue: 255,
  blueviolet: 9055202,
  brown: 10824234,
  burlywood: 14596231,
  cadetblue: 6266528,
  chartreuse: 8388352,
  chocolate: 13789470,
  coral: 16744272,
  cornflowerblue: 6591981,
  cornsilk: 16775388,
  crimson: 14423100,
  cyan: 65535,
  darkblue: 139,
  darkcyan: 35723,
  darkgoldenrod: 12092939,
  darkgray: 11119017,
  darkgreen: 25600,
  darkgrey: 11119017,
  darkkhaki: 12433259,
  darkmagenta: 9109643,
  darkolivegreen: 5597999,
  darkorange: 16747520,
  darkorchid: 10040012,
  darkred: 9109504,
  darksalmon: 15308410,
  darkseagreen: 9419919,
  darkslateblue: 4734347,
  darkslategray: 3100495,
  darkslategrey: 3100495,
  darkturquoise: 52945,
  darkviolet: 9699539,
  deeppink: 16716947,
  deepskyblue: 49151,
  dimgray: 6908265,
  dimgrey: 6908265,
  dodgerblue: 2003199,
  firebrick: 11674146,
  floralwhite: 16775920,
  forestgreen: 2263842,
  fuchsia: 16711935,
  gainsboro: 14474460,
  ghostwhite: 16316671,
  gold: 16766720,
  goldenrod: 14329120,
  gray: 8421504,
  green: 32768,
  greenyellow: 11403055,
  grey: 8421504,
  honeydew: 15794160,
  hotpink: 16738740,
  indianred: 13458524,
  indigo: 4915330,
  ivory: 16777200,
  khaki: 15787660,
  lavender: 15132410,
  lavenderblush: 16773365,
  lawngreen: 8190976,
  lemonchiffon: 16775885,
  lightblue: 11393254,
  lightcoral: 15761536,
  lightcyan: 14745599,
  lightgoldenrodyellow: 16448210,
  lightgray: 13882323,
  lightgreen: 9498256,
  lightgrey: 13882323,
  lightpink: 16758465,
  lightsalmon: 16752762,
  lightseagreen: 2142890,
  lightskyblue: 8900346,
  lightslategray: 7833753,
  lightslategrey: 7833753,
  lightsteelblue: 11584734,
  lightyellow: 16777184,
  lime: 65280,
  limegreen: 3329330,
  linen: 16445670,
  magenta: 16711935,
  maroon: 8388608,
  mediumaquamarine: 6737322,
  mediumblue: 205,
  mediumorchid: 12211667,
  mediumpurple: 9662683,
  mediumseagreen: 3978097,
  mediumslateblue: 8087790,
  mediumspringgreen: 64154,
  mediumturquoise: 4772300,
  mediumvioletred: 13047173,
  midnightblue: 1644912,
  mintcream: 16121850,
  mistyrose: 16770273,
  moccasin: 16770229,
  navajowhite: 16768685,
  navy: 128,
  oldlace: 16643558,
  olive: 8421376,
  olivedrab: 7048739,
  orange: 16753920,
  orangered: 16729344,
  orchid: 14315734,
  palegoldenrod: 15657130,
  palegreen: 10025880,
  paleturquoise: 11529966,
  palevioletred: 14381203,
  papayawhip: 16773077,
  peachpuff: 16767673,
  peru: 13468991,
  pink: 16761035,
  plum: 14524637,
  powderblue: 11591910,
  purple: 8388736,
  rebeccapurple: 6697881,
  red: 16711680,
  rosybrown: 12357519,
  royalblue: 4286945,
  saddlebrown: 9127187,
  salmon: 16416882,
  sandybrown: 16032864,
  seagreen: 3050327,
  seashell: 16774638,
  sienna: 10506797,
  silver: 12632256,
  skyblue: 8900331,
  slateblue: 6970061,
  slategray: 7372944,
  slategrey: 7372944,
  snow: 16775930,
  springgreen: 65407,
  steelblue: 4620980,
  tan: 13808780,
  teal: 32896,
  thistle: 14204888,
  tomato: 16737095,
  turquoise: 4251856,
  violet: 15631086,
  wheat: 16113331,
  white: 16777215,
  whitesmoke: 16119285,
  yellow: 16776960,
  yellowgreen: 10145074
};
define_default(Color, color, {
  copy(channels) {
    return Object.assign(new this.constructor(), this, channels);
  },
  displayable() {
    return this.rgb().displayable();
  },
  hex: color_formatHex,
  // Deprecated! Use color.formatHex.
  formatHex: color_formatHex,
  formatHex8: color_formatHex8,
  formatHsl: color_formatHsl,
  formatRgb: color_formatRgb,
  toString: color_formatRgb
});
function color_formatHex() {
  return this.rgb().formatHex();
}
function color_formatHex8() {
  return this.rgb().formatHex8();
}
function color_formatHsl() {
  return hslConvert(this).formatHsl();
}
function color_formatRgb() {
  return this.rgb().formatRgb();
}
function color(format2) {
  var m2, l;
  format2 = (format2 + "").trim().toLowerCase();
  return (m2 = reHex.exec(format2)) ? (l = m2[1].length, m2 = parseInt(m2[1], 16), l === 6 ? rgbn(m2) : l === 3 ? new Rgb(m2 >> 8 & 15 | m2 >> 4 & 240, m2 >> 4 & 15 | m2 & 240, (m2 & 15) << 4 | m2 & 15, 1) : l === 8 ? rgba(m2 >> 24 & 255, m2 >> 16 & 255, m2 >> 8 & 255, (m2 & 255) / 255) : l === 4 ? rgba(m2 >> 12 & 15 | m2 >> 8 & 240, m2 >> 8 & 15 | m2 >> 4 & 240, m2 >> 4 & 15 | m2 & 240, ((m2 & 15) << 4 | m2 & 15) / 255) : null) : (m2 = reRgbInteger.exec(format2)) ? new Rgb(m2[1], m2[2], m2[3], 1) : (m2 = reRgbPercent.exec(format2)) ? new Rgb(m2[1] * 255 / 100, m2[2] * 255 / 100, m2[3] * 255 / 100, 1) : (m2 = reRgbaInteger.exec(format2)) ? rgba(m2[1], m2[2], m2[3], m2[4]) : (m2 = reRgbaPercent.exec(format2)) ? rgba(m2[1] * 255 / 100, m2[2] * 255 / 100, m2[3] * 255 / 100, m2[4]) : (m2 = reHslPercent.exec(format2)) ? hsla(m2[1], m2[2] / 100, m2[3] / 100, 1) : (m2 = reHslaPercent.exec(format2)) ? hsla(m2[1], m2[2] / 100, m2[3] / 100, m2[4]) : named.hasOwnProperty(format2) ? rgbn(named[format2]) : format2 === "transparent" ? new Rgb(NaN, NaN, NaN, 0) : null;
}
function rgbn(n) {
  return new Rgb(n >> 16 & 255, n >> 8 & 255, n & 255, 1);
}
function rgba(r, g, b, a2) {
  if (a2 <= 0)
    r = g = b = NaN;
  return new Rgb(r, g, b, a2);
}
function rgbConvert(o) {
  if (!(o instanceof Color))
    o = color(o);
  if (!o)
    return new Rgb();
  o = o.rgb();
  return new Rgb(o.r, o.g, o.b, o.opacity);
}
function rgb(r, g, b, opacity) {
  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
}
function Rgb(r, g, b, opacity) {
  this.r = +r;
  this.g = +g;
  this.b = +b;
  this.opacity = +opacity;
}
define_default(Rgb, rgb, extend(Color, {
  brighter(k) {
    k = k == null ? brighter : Math.pow(brighter, k);
    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
  },
  darker(k) {
    k = k == null ? darker : Math.pow(darker, k);
    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
  },
  rgb() {
    return this;
  },
  clamp() {
    return new Rgb(clampi(this.r), clampi(this.g), clampi(this.b), clampa(this.opacity));
  },
  displayable() {
    return -0.5 <= this.r && this.r < 255.5 && (-0.5 <= this.g && this.g < 255.5) && (-0.5 <= this.b && this.b < 255.5) && (0 <= this.opacity && this.opacity <= 1);
  },
  hex: rgb_formatHex,
  // Deprecated! Use color.formatHex.
  formatHex: rgb_formatHex,
  formatHex8: rgb_formatHex8,
  formatRgb: rgb_formatRgb,
  toString: rgb_formatRgb
}));
function rgb_formatHex() {
  return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}`;
}
function rgb_formatHex8() {
  return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}${hex((isNaN(this.opacity) ? 1 : this.opacity) * 255)}`;
}
function rgb_formatRgb() {
  const a2 = clampa(this.opacity);
  return `${a2 === 1 ? "rgb(" : "rgba("}${clampi(this.r)}, ${clampi(this.g)}, ${clampi(this.b)}${a2 === 1 ? ")" : `, ${a2})`}`;
}
function clampa(opacity) {
  return isNaN(opacity) ? 1 : Math.max(0, Math.min(1, opacity));
}
function clampi(value) {
  return Math.max(0, Math.min(255, Math.round(value) || 0));
}
function hex(value) {
  value = clampi(value);
  return (value < 16 ? "0" : "") + value.toString(16);
}
function hsla(h, s, l, a2) {
  if (a2 <= 0)
    h = s = l = NaN;
  else if (l <= 0 || l >= 1)
    h = s = NaN;
  else if (s <= 0)
    h = NaN;
  return new Hsl(h, s, l, a2);
}
function hslConvert(o) {
  if (o instanceof Hsl)
    return new Hsl(o.h, o.s, o.l, o.opacity);
  if (!(o instanceof Color))
    o = color(o);
  if (!o)
    return new Hsl();
  if (o instanceof Hsl)
    return o;
  o = o.rgb();
  var r = o.r / 255, g = o.g / 255, b = o.b / 255, min2 = Math.min(r, g, b), max2 = Math.max(r, g, b), h = NaN, s = max2 - min2, l = (max2 + min2) / 2;
  if (s) {
    if (r === max2)
      h = (g - b) / s + (g < b) * 6;
    else if (g === max2)
      h = (b - r) / s + 2;
    else
      h = (r - g) / s + 4;
    s /= l < 0.5 ? max2 + min2 : 2 - max2 - min2;
    h *= 60;
  } else {
    s = l > 0 && l < 1 ? 0 : h;
  }
  return new Hsl(h, s, l, o.opacity);
}
function hsl(h, s, l, opacity) {
  return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
}
function Hsl(h, s, l, opacity) {
  this.h = +h;
  this.s = +s;
  this.l = +l;
  this.opacity = +opacity;
}
define_default(Hsl, hsl, extend(Color, {
  brighter(k) {
    k = k == null ? brighter : Math.pow(brighter, k);
    return new Hsl(this.h, this.s, this.l * k, this.opacity);
  },
  darker(k) {
    k = k == null ? darker : Math.pow(darker, k);
    return new Hsl(this.h, this.s, this.l * k, this.opacity);
  },
  rgb() {
    var h = this.h % 360 + (this.h < 0) * 360, s = isNaN(h) || isNaN(this.s) ? 0 : this.s, l = this.l, m2 = l + (l < 0.5 ? l : 1 - l) * s, m1 = 2 * l - m2;
    return new Rgb(
      hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),
      hsl2rgb(h, m1, m2),
      hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),
      this.opacity
    );
  },
  clamp() {
    return new Hsl(clamph(this.h), clampt(this.s), clampt(this.l), clampa(this.opacity));
  },
  displayable() {
    return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && (0 <= this.l && this.l <= 1) && (0 <= this.opacity && this.opacity <= 1);
  },
  formatHsl() {
    const a2 = clampa(this.opacity);
    return `${a2 === 1 ? "hsl(" : "hsla("}${clamph(this.h)}, ${clampt(this.s) * 100}%, ${clampt(this.l) * 100}%${a2 === 1 ? ")" : `, ${a2})`}`;
  }
}));
function clamph(value) {
  value = (value || 0) % 360;
  return value < 0 ? value + 360 : value;
}
function clampt(value) {
  return Math.max(0, Math.min(1, value || 0));
}
function hsl2rgb(h, m1, m2) {
  return (h < 60 ? m1 + (m2 - m1) * h / 60 : h < 180 ? m2 : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60 : m1) * 255;
}

// node_modules/d3-interpolate/src/basis.js
function basis(t1, v0, v1, v2, v3) {
  var t2 = t1 * t1, t3 = t2 * t1;
  return ((1 - 3 * t1 + 3 * t2 - t3) * v0 + (4 - 6 * t2 + 3 * t3) * v1 + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2 + t3 * v3) / 6;
}
function basis_default(values) {
  var n = values.length - 1;
  return function(t) {
    var i = t <= 0 ? t = 0 : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n), v1 = values[i], v2 = values[i + 1], v0 = i > 0 ? values[i - 1] : 2 * v1 - v2, v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;
    return basis((t - i / n) * n, v0, v1, v2, v3);
  };
}

// node_modules/d3-interpolate/src/basisClosed.js
function basisClosed_default(values) {
  var n = values.length;
  return function(t) {
    var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n), v0 = values[(i + n - 1) % n], v1 = values[i % n], v2 = values[(i + 1) % n], v3 = values[(i + 2) % n];
    return basis((t - i / n) * n, v0, v1, v2, v3);
  };
}

// node_modules/d3-interpolate/src/constant.js
var constant_default3 = (x3) => () => x3;

// node_modules/d3-interpolate/src/color.js
function linear(a2, d) {
  return function(t) {
    return a2 + t * d;
  };
}
function exponential(a2, b, y3) {
  return a2 = Math.pow(a2, y3), b = Math.pow(b, y3) - a2, y3 = 1 / y3, function(t) {
    return Math.pow(a2 + t * b, y3);
  };
}
function gamma(y3) {
  return (y3 = +y3) === 1 ? nogamma : function(a2, b) {
    return b - a2 ? exponential(a2, b, y3) : constant_default3(isNaN(a2) ? b : a2);
  };
}
function nogamma(a2, b) {
  var d = b - a2;
  return d ? linear(a2, d) : constant_default3(isNaN(a2) ? b : a2);
}

// node_modules/d3-interpolate/src/rgb.js
var rgb_default = function rgbGamma(y3) {
  var color2 = gamma(y3);
  function rgb2(start2, end) {
    var r = color2((start2 = rgb(start2)).r, (end = rgb(end)).r), g = color2(start2.g, end.g), b = color2(start2.b, end.b), opacity = nogamma(start2.opacity, end.opacity);
    return function(t) {
      start2.r = r(t);
      start2.g = g(t);
      start2.b = b(t);
      start2.opacity = opacity(t);
      return start2 + "";
    };
  }
  rgb2.gamma = rgbGamma;
  return rgb2;
}(1);
function rgbSpline(spline) {
  return function(colors) {
    var n = colors.length, r = new Array(n), g = new Array(n), b = new Array(n), i, color2;
    for (i = 0; i < n; ++i) {
      color2 = rgb(colors[i]);
      r[i] = color2.r || 0;
      g[i] = color2.g || 0;
      b[i] = color2.b || 0;
    }
    r = spline(r);
    g = spline(g);
    b = spline(b);
    color2.opacity = 1;
    return function(t) {
      color2.r = r(t);
      color2.g = g(t);
      color2.b = b(t);
      return color2 + "";
    };
  };
}
var rgbBasis = rgbSpline(basis_default);
var rgbBasisClosed = rgbSpline(basisClosed_default);

// node_modules/d3-interpolate/src/numberArray.js
function numberArray_default(a2, b) {
  if (!b)
    b = [];
  var n = a2 ? Math.min(b.length, a2.length) : 0, c2 = b.slice(), i;
  return function(t) {
    for (i = 0; i < n; ++i)
      c2[i] = a2[i] * (1 - t) + b[i] * t;
    return c2;
  };
}
function isNumberArray(x3) {
  return ArrayBuffer.isView(x3) && !(x3 instanceof DataView);
}

// node_modules/d3-interpolate/src/array.js
function genericArray(a2, b) {
  var nb = b ? b.length : 0, na = a2 ? Math.min(nb, a2.length) : 0, x3 = new Array(na), c2 = new Array(nb), i;
  for (i = 0; i < na; ++i)
    x3[i] = value_default(a2[i], b[i]);
  for (; i < nb; ++i)
    c2[i] = b[i];
  return function(t) {
    for (i = 0; i < na; ++i)
      c2[i] = x3[i](t);
    return c2;
  };
}

// node_modules/d3-interpolate/src/date.js
function date_default(a2, b) {
  var d = new Date();
  return a2 = +a2, b = +b, function(t) {
    return d.setTime(a2 * (1 - t) + b * t), d;
  };
}

// node_modules/d3-interpolate/src/number.js
function number_default(a2, b) {
  return a2 = +a2, b = +b, function(t) {
    return a2 * (1 - t) + b * t;
  };
}

// node_modules/d3-interpolate/src/object.js
function object_default(a2, b) {
  var i = {}, c2 = {}, k;
  if (a2 === null || typeof a2 !== "object")
    a2 = {};
  if (b === null || typeof b !== "object")
    b = {};
  for (k in b) {
    if (k in a2) {
      i[k] = value_default(a2[k], b[k]);
    } else {
      c2[k] = b[k];
    }
  }
  return function(t) {
    for (k in i)
      c2[k] = i[k](t);
    return c2;
  };
}

// node_modules/d3-interpolate/src/string.js
var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g;
var reB = new RegExp(reA.source, "g");
function zero2(b) {
  return function() {
    return b;
  };
}
function one(b) {
  return function(t) {
    return b(t) + "";
  };
}
function string_default(a2, b) {
  var bi = reA.lastIndex = reB.lastIndex = 0, am, bm, bs, i = -1, s = [], q = [];
  a2 = a2 + "", b = b + "";
  while ((am = reA.exec(a2)) && (bm = reB.exec(b))) {
    if ((bs = bm.index) > bi) {
      bs = b.slice(bi, bs);
      if (s[i])
        s[i] += bs;
      else
        s[++i] = bs;
    }
    if ((am = am[0]) === (bm = bm[0])) {
      if (s[i])
        s[i] += bm;
      else
        s[++i] = bm;
    } else {
      s[++i] = null;
      q.push({ i, x: number_default(am, bm) });
    }
    bi = reB.lastIndex;
  }
  if (bi < b.length) {
    bs = b.slice(bi);
    if (s[i])
      s[i] += bs;
    else
      s[++i] = bs;
  }
  return s.length < 2 ? q[0] ? one(q[0].x) : zero2(b) : (b = q.length, function(t) {
    for (var i2 = 0, o; i2 < b; ++i2)
      s[(o = q[i2]).i] = o.x(t);
    return s.join("");
  });
}

// node_modules/d3-interpolate/src/value.js
function value_default(a2, b) {
  var t = typeof b, c2;
  return b == null || t === "boolean" ? constant_default3(b) : (t === "number" ? number_default : t === "string" ? (c2 = color(b)) ? (b = c2, rgb_default) : string_default : b instanceof color ? rgb_default : b instanceof Date ? date_default : isNumberArray(b) ? numberArray_default : Array.isArray(b) ? genericArray : typeof b.valueOf !== "function" && typeof b.toString !== "function" || isNaN(b) ? object_default : number_default)(a2, b);
}

// node_modules/d3-interpolate/src/round.js
function round_default(a2, b) {
  return a2 = +a2, b = +b, function(t) {
    return Math.round(a2 * (1 - t) + b * t);
  };
}

// node_modules/d3-interpolate/src/transform/decompose.js
var degrees = 180 / Math.PI;
var identity = {
  translateX: 0,
  translateY: 0,
  rotate: 0,
  skewX: 0,
  scaleX: 1,
  scaleY: 1
};
function decompose_default(a2, b, c2, d, e, f) {
  var scaleX, scaleY, skewX;
  if (scaleX = Math.sqrt(a2 * a2 + b * b))
    a2 /= scaleX, b /= scaleX;
  if (skewX = a2 * c2 + b * d)
    c2 -= a2 * skewX, d -= b * skewX;
  if (scaleY = Math.sqrt(c2 * c2 + d * d))
    c2 /= scaleY, d /= scaleY, skewX /= scaleY;
  if (a2 * d < b * c2)
    a2 = -a2, b = -b, skewX = -skewX, scaleX = -scaleX;
  return {
    translateX: e,
    translateY: f,
    rotate: Math.atan2(b, a2) * degrees,
    skewX: Math.atan(skewX) * degrees,
    scaleX,
    scaleY
  };
}

// node_modules/d3-interpolate/src/transform/parse.js
var svgNode;
function parseCss(value) {
  const m2 = new (typeof DOMMatrix === "function" ? DOMMatrix : WebKitCSSMatrix)(value + "");
  return m2.isIdentity ? identity : decompose_default(m2.a, m2.b, m2.c, m2.d, m2.e, m2.f);
}
function parseSvg(value) {
  if (value == null)
    return identity;
  if (!svgNode)
    svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
  svgNode.setAttribute("transform", value);
  if (!(value = svgNode.transform.baseVal.consolidate()))
    return identity;
  value = value.matrix;
  return decompose_default(value.a, value.b, value.c, value.d, value.e, value.f);
}

// node_modules/d3-interpolate/src/transform/index.js
function interpolateTransform(parse, pxComma, pxParen, degParen) {
  function pop(s) {
    return s.length ? s.pop() + " " : "";
  }
  function translate(xa, ya, xb, yb, s, q) {
    if (xa !== xb || ya !== yb) {
      var i = s.push("translate(", null, pxComma, null, pxParen);
      q.push({ i: i - 4, x: number_default(xa, xb) }, { i: i - 2, x: number_default(ya, yb) });
    } else if (xb || yb) {
      s.push("translate(" + xb + pxComma + yb + pxParen);
    }
  }
  function rotate(a2, b, s, q) {
    if (a2 !== b) {
      if (a2 - b > 180)
        b += 360;
      else if (b - a2 > 180)
        a2 += 360;
      q.push({ i: s.push(pop(s) + "rotate(", null, degParen) - 2, x: number_default(a2, b) });
    } else if (b) {
      s.push(pop(s) + "rotate(" + b + degParen);
    }
  }
  function skewX(a2, b, s, q) {
    if (a2 !== b) {
      q.push({ i: s.push(pop(s) + "skewX(", null, degParen) - 2, x: number_default(a2, b) });
    } else if (b) {
      s.push(pop(s) + "skewX(" + b + degParen);
    }
  }
  function scale(xa, ya, xb, yb, s, q) {
    if (xa !== xb || ya !== yb) {
      var i = s.push(pop(s) + "scale(", null, ",", null, ")");
      q.push({ i: i - 4, x: number_default(xa, xb) }, { i: i - 2, x: number_default(ya, yb) });
    } else if (xb !== 1 || yb !== 1) {
      s.push(pop(s) + "scale(" + xb + "," + yb + ")");
    }
  }
  return function(a2, b) {
    var s = [], q = [];
    a2 = parse(a2), b = parse(b);
    translate(a2.translateX, a2.translateY, b.translateX, b.translateY, s, q);
    rotate(a2.rotate, b.rotate, s, q);
    skewX(a2.skewX, b.skewX, s, q);
    scale(a2.scaleX, a2.scaleY, b.scaleX, b.scaleY, s, q);
    a2 = b = null;
    return function(t) {
      var i = -1, n = q.length, o;
      while (++i < n)
        s[(o = q[i]).i] = o.x(t);
      return s.join("");
    };
  };
}
var interpolateTransformCss = interpolateTransform(parseCss, "px, ", "px)", "deg)");
var interpolateTransformSvg = interpolateTransform(parseSvg, ", ", ")", ")");

// node_modules/d3-interpolate/src/zoom.js
var epsilon2 = 1e-12;
function cosh(x3) {
  return ((x3 = Math.exp(x3)) + 1 / x3) / 2;
}
function sinh(x3) {
  return ((x3 = Math.exp(x3)) - 1 / x3) / 2;
}
function tanh(x3) {
  return ((x3 = Math.exp(2 * x3)) - 1) / (x3 + 1);
}
var zoom_default = function zoomRho(rho, rho2, rho4) {
  function zoom(p0, p1) {
    var ux0 = p0[0], uy0 = p0[1], w0 = p0[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2], dx = ux1 - ux0, dy = uy1 - uy0, d2 = dx * dx + dy * dy, i, S;
    if (d2 < epsilon2) {
      S = Math.log(w1 / w0) / rho;
      i = function(t) {
        return [
          ux0 + t * dx,
          uy0 + t * dy,
          w0 * Math.exp(rho * t * S)
        ];
      };
    } else {
      var d1 = Math.sqrt(d2), b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1), b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
      S = (r1 - r0) / rho;
      i = function(t) {
        var s = t * S, coshr0 = cosh(r0), u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s + r0) - sinh(r0));
        return [
          ux0 + u * dx,
          uy0 + u * dy,
          w0 * coshr0 / cosh(rho * s + r0)
        ];
      };
    }
    i.duration = S * 1e3 * rho / Math.SQRT2;
    return i;
  }
  zoom.rho = function(_) {
    var _1 = Math.max(1e-3, +_), _2 = _1 * _1, _4 = _2 * _2;
    return zoomRho(_1, _2, _4);
  };
  return zoom;
}(Math.SQRT2, 2, 4);

// node_modules/d3-timer/src/timer.js
var frame = 0;
var timeout = 0;
var interval = 0;
var pokeDelay = 1e3;
var taskHead;
var taskTail;
var clockLast = 0;
var clockNow = 0;
var clockSkew = 0;
var clock = typeof performance === "object" && performance.now ? performance : Date;
var setFrame = typeof window === "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function(f) {
  setTimeout(f, 17);
};
function now() {
  return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);
}
function clearNow() {
  clockNow = 0;
}
function Timer() {
  this._call = this._time = this._next = null;
}
Timer.prototype = timer.prototype = {
  constructor: Timer,
  restart: function(callback, delay, time) {
    if (typeof callback !== "function")
      throw new TypeError("callback is not a function");
    time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);
    if (!this._next && taskTail !== this) {
      if (taskTail)
        taskTail._next = this;
      else
        taskHead = this;
      taskTail = this;
    }
    this._call = callback;
    this._time = time;
    sleep();
  },
  stop: function() {
    if (this._call) {
      this._call = null;
      this._time = Infinity;
      sleep();
    }
  }
};
function timer(callback, delay, time) {
  var t = new Timer();
  t.restart(callback, delay, time);
  return t;
}
function timerFlush() {
  now();
  ++frame;
  var t = taskHead, e;
  while (t) {
    if ((e = clockNow - t._time) >= 0)
      t._call.call(void 0, e);
    t = t._next;
  }
  --frame;
}
function wake() {
  clockNow = (clockLast = clock.now()) + clockSkew;
  frame = timeout = 0;
  try {
    timerFlush();
  } finally {
    frame = 0;
    nap();
    clockNow = 0;
  }
}
function poke() {
  var now2 = clock.now(), delay = now2 - clockLast;
  if (delay > pokeDelay)
    clockSkew -= delay, clockLast = now2;
}
function nap() {
  var t0, t1 = taskHead, t2, time = Infinity;
  while (t1) {
    if (t1._call) {
      if (time > t1._time)
        time = t1._time;
      t0 = t1, t1 = t1._next;
    } else {
      t2 = t1._next, t1._next = null;
      t1 = t0 ? t0._next = t2 : taskHead = t2;
    }
  }
  taskTail = t0;
  sleep(time);
}
function sleep(time) {
  if (frame)
    return;
  if (timeout)
    timeout = clearTimeout(timeout);
  var delay = time - clockNow;
  if (delay > 24) {
    if (time < Infinity)
      timeout = setTimeout(wake, time - clock.now() - clockSkew);
    if (interval)
      interval = clearInterval(interval);
  } else {
    if (!interval)
      clockLast = clock.now(), interval = setInterval(poke, pokeDelay);
    frame = 1, setFrame(wake);
  }
}

// node_modules/d3-timer/src/timeout.js
function timeout_default(callback, delay, time) {
  var t = new Timer();
  delay = delay == null ? 0 : +delay;
  t.restart((elapsed) => {
    t.stop();
    callback(elapsed + delay);
  }, delay, time);
  return t;
}

// node_modules/d3-transition/src/transition/schedule.js
var emptyOn = dispatch_default("start", "end", "cancel", "interrupt");
var emptyTween = [];
var CREATED = 0;
var SCHEDULED = 1;
var STARTING = 2;
var STARTED = 3;
var RUNNING = 4;
var ENDING = 5;
var ENDED = 6;
function schedule_default(node, name, id2, index2, group, timing) {
  var schedules = node.__transition;
  if (!schedules)
    node.__transition = {};
  else if (id2 in schedules)
    return;
  create(node, id2, {
    name,
    index: index2,
    // For context during callback.
    group,
    // For context during callback.
    on: emptyOn,
    tween: emptyTween,
    time: timing.time,
    delay: timing.delay,
    duration: timing.duration,
    ease: timing.ease,
    timer: null,
    state: CREATED
  });
}
function init(node, id2) {
  var schedule = get2(node, id2);
  if (schedule.state > CREATED)
    throw new Error("too late; already scheduled");
  return schedule;
}
function set2(node, id2) {
  var schedule = get2(node, id2);
  if (schedule.state > STARTED)
    throw new Error("too late; already running");
  return schedule;
}
function get2(node, id2) {
  var schedule = node.__transition;
  if (!schedule || !(schedule = schedule[id2]))
    throw new Error("transition not found");
  return schedule;
}
function create(node, id2, self2) {
  var schedules = node.__transition, tween;
  schedules[id2] = self2;
  self2.timer = timer(schedule, 0, self2.time);
  function schedule(elapsed) {
    self2.state = SCHEDULED;
    self2.timer.restart(start2, self2.delay, self2.time);
    if (self2.delay <= elapsed)
      start2(elapsed - self2.delay);
  }
  function start2(elapsed) {
    var i, j, n, o;
    if (self2.state !== SCHEDULED)
      return stop();
    for (i in schedules) {
      o = schedules[i];
      if (o.name !== self2.name)
        continue;
      if (o.state === STARTED)
        return timeout_default(start2);
      if (o.state === RUNNING) {
        o.state = ENDED;
        o.timer.stop();
        o.on.call("interrupt", node, node.__data__, o.index, o.group);
        delete schedules[i];
      } else if (+i < id2) {
        o.state = ENDED;
        o.timer.stop();
        o.on.call("cancel", node, node.__data__, o.index, o.group);
        delete schedules[i];
      }
    }
    timeout_default(function() {
      if (self2.state === STARTED) {
        self2.state = RUNNING;
        self2.timer.restart(tick, self2.delay, self2.time);
        tick(elapsed);
      }
    });
    self2.state = STARTING;
    self2.on.call("start", node, node.__data__, self2.index, self2.group);
    if (self2.state !== STARTING)
      return;
    self2.state = STARTED;
    tween = new Array(n = self2.tween.length);
    for (i = 0, j = -1; i < n; ++i) {
      if (o = self2.tween[i].value.call(node, node.__data__, self2.index, self2.group)) {
        tween[++j] = o;
      }
    }
    tween.length = j + 1;
  }
  function tick(elapsed) {
    var t = elapsed < self2.duration ? self2.ease.call(null, elapsed / self2.duration) : (self2.timer.restart(stop), self2.state = ENDING, 1), i = -1, n = tween.length;
    while (++i < n) {
      tween[i].call(node, t);
    }
    if (self2.state === ENDING) {
      self2.on.call("end", node, node.__data__, self2.index, self2.group);
      stop();
    }
  }
  function stop() {
    self2.state = ENDED;
    self2.timer.stop();
    delete schedules[id2];
    for (var i in schedules)
      return;
    delete node.__transition;
  }
}

// node_modules/d3-transition/src/interrupt.js
function interrupt_default(node, name) {
  var schedules = node.__transition, schedule, active, empty2 = true, i;
  if (!schedules)
    return;
  name = name == null ? null : name + "";
  for (i in schedules) {
    if ((schedule = schedules[i]).name !== name) {
      empty2 = false;
      continue;
    }
    active = schedule.state > STARTING && schedule.state < ENDING;
    schedule.state = ENDED;
    schedule.timer.stop();
    schedule.on.call(active ? "interrupt" : "cancel", node, node.__data__, schedule.index, schedule.group);
    delete schedules[i];
  }
  if (empty2)
    delete node.__transition;
}

// node_modules/d3-transition/src/selection/interrupt.js
function interrupt_default2(name) {
  return this.each(function() {
    interrupt_default(this, name);
  });
}

// node_modules/d3-transition/src/transition/tween.js
function tweenRemove(id2, name) {
  var tween0, tween1;
  return function() {
    var schedule = set2(this, id2), tween = schedule.tween;
    if (tween !== tween0) {
      tween1 = tween0 = tween;
      for (var i = 0, n = tween1.length; i < n; ++i) {
        if (tween1[i].name === name) {
          tween1 = tween1.slice();
          tween1.splice(i, 1);
          break;
        }
      }
    }
    schedule.tween = tween1;
  };
}
function tweenFunction(id2, name, value) {
  var tween0, tween1;
  if (typeof value !== "function")
    throw new Error();
  return function() {
    var schedule = set2(this, id2), tween = schedule.tween;
    if (tween !== tween0) {
      tween1 = (tween0 = tween).slice();
      for (var t = { name, value }, i = 0, n = tween1.length; i < n; ++i) {
        if (tween1[i].name === name) {
          tween1[i] = t;
          break;
        }
      }
      if (i === n)
        tween1.push(t);
    }
    schedule.tween = tween1;
  };
}
function tween_default(name, value) {
  var id2 = this._id;
  name += "";
  if (arguments.length < 2) {
    var tween = get2(this.node(), id2).tween;
    for (var i = 0, n = tween.length, t; i < n; ++i) {
      if ((t = tween[i]).name === name) {
        return t.value;
      }
    }
    return null;
  }
  return this.each((value == null ? tweenRemove : tweenFunction)(id2, name, value));
}
function tweenValue(transition2, name, value) {
  var id2 = transition2._id;
  transition2.each(function() {
    var schedule = set2(this, id2);
    (schedule.value || (schedule.value = {}))[name] = value.apply(this, arguments);
  });
  return function(node) {
    return get2(node, id2).value[name];
  };
}

// node_modules/d3-transition/src/transition/interpolate.js
function interpolate_default(a2, b) {
  var c2;
  return (typeof b === "number" ? number_default : b instanceof color ? rgb_default : (c2 = color(b)) ? (b = c2, rgb_default) : string_default)(a2, b);
}

// node_modules/d3-transition/src/transition/attr.js
function attrRemove2(name) {
  return function() {
    this.removeAttribute(name);
  };
}
function attrRemoveNS2(fullname) {
  return function() {
    this.removeAttributeNS(fullname.space, fullname.local);
  };
}
function attrConstant2(name, interpolate, value1) {
  var string00, string1 = value1 + "", interpolate0;
  return function() {
    var string0 = this.getAttribute(name);
    return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
  };
}
function attrConstantNS2(fullname, interpolate, value1) {
  var string00, string1 = value1 + "", interpolate0;
  return function() {
    var string0 = this.getAttributeNS(fullname.space, fullname.local);
    return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
  };
}
function attrFunction2(name, interpolate, value) {
  var string00, string10, interpolate0;
  return function() {
    var string0, value1 = value(this), string1;
    if (value1 == null)
      return void this.removeAttribute(name);
    string0 = this.getAttribute(name);
    string1 = value1 + "";
    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
  };
}
function attrFunctionNS2(fullname, interpolate, value) {
  var string00, string10, interpolate0;
  return function() {
    var string0, value1 = value(this), string1;
    if (value1 == null)
      return void this.removeAttributeNS(fullname.space, fullname.local);
    string0 = this.getAttributeNS(fullname.space, fullname.local);
    string1 = value1 + "";
    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
  };
}
function attr_default2(name, value) {
  var fullname = namespace_default(name), i = fullname === "transform" ? interpolateTransformSvg : interpolate_default;
  return this.attrTween(name, typeof value === "function" ? (fullname.local ? attrFunctionNS2 : attrFunction2)(fullname, i, tweenValue(this, "attr." + name, value)) : value == null ? (fullname.local ? attrRemoveNS2 : attrRemove2)(fullname) : (fullname.local ? attrConstantNS2 : attrConstant2)(fullname, i, value));
}

// node_modules/d3-transition/src/transition/attrTween.js
function attrInterpolate(name, i) {
  return function(t) {
    this.setAttribute(name, i.call(this, t));
  };
}
function attrInterpolateNS(fullname, i) {
  return function(t) {
    this.setAttributeNS(fullname.space, fullname.local, i.call(this, t));
  };
}
function attrTweenNS(fullname, value) {
  var t0, i0;
  function tween() {
    var i = value.apply(this, arguments);
    if (i !== i0)
      t0 = (i0 = i) && attrInterpolateNS(fullname, i);
    return t0;
  }
  tween._value = value;
  return tween;
}
function attrTween(name, value) {
  var t0, i0;
  function tween() {
    var i = value.apply(this, arguments);
    if (i !== i0)
      t0 = (i0 = i) && attrInterpolate(name, i);
    return t0;
  }
  tween._value = value;
  return tween;
}
function attrTween_default(name, value) {
  var key = "attr." + name;
  if (arguments.length < 2)
    return (key = this.tween(key)) && key._value;
  if (value == null)
    return this.tween(key, null);
  if (typeof value !== "function")
    throw new Error();
  var fullname = namespace_default(name);
  return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value));
}

// node_modules/d3-transition/src/transition/delay.js
function delayFunction(id2, value) {
  return function() {
    init(this, id2).delay = +value.apply(this, arguments);
  };
}
function delayConstant(id2, value) {
  return value = +value, function() {
    init(this, id2).delay = value;
  };
}
function delay_default(value) {
  var id2 = this._id;
  return arguments.length ? this.each((typeof value === "function" ? delayFunction : delayConstant)(id2, value)) : get2(this.node(), id2).delay;
}

// node_modules/d3-transition/src/transition/duration.js
function durationFunction(id2, value) {
  return function() {
    set2(this, id2).duration = +value.apply(this, arguments);
  };
}
function durationConstant(id2, value) {
  return value = +value, function() {
    set2(this, id2).duration = value;
  };
}
function duration_default(value) {
  var id2 = this._id;
  return arguments.length ? this.each((typeof value === "function" ? durationFunction : durationConstant)(id2, value)) : get2(this.node(), id2).duration;
}

// node_modules/d3-transition/src/transition/ease.js
function easeConstant(id2, value) {
  if (typeof value !== "function")
    throw new Error();
  return function() {
    set2(this, id2).ease = value;
  };
}
function ease_default(value) {
  var id2 = this._id;
  return arguments.length ? this.each(easeConstant(id2, value)) : get2(this.node(), id2).ease;
}

// node_modules/d3-transition/src/transition/easeVarying.js
function easeVarying(id2, value) {
  return function() {
    var v = value.apply(this, arguments);
    if (typeof v !== "function")
      throw new Error();
    set2(this, id2).ease = v;
  };
}
function easeVarying_default(value) {
  if (typeof value !== "function")
    throw new Error();
  return this.each(easeVarying(this._id, value));
}

// node_modules/d3-transition/src/transition/filter.js
function filter_default2(match) {
  if (typeof match !== "function")
    match = matcher_default(match);
  for (var groups = this._groups, m2 = groups.length, subgroups = new Array(m2), j = 0; j < m2; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
        subgroup.push(node);
      }
    }
  }
  return new Transition(subgroups, this._parents, this._name, this._id);
}

// node_modules/d3-transition/src/transition/merge.js
function merge_default2(transition2) {
  if (transition2._id !== this._id)
    throw new Error();
  for (var groups0 = this._groups, groups1 = transition2._groups, m0 = groups0.length, m1 = groups1.length, m2 = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m2; ++j) {
    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group0[i] || group1[i]) {
        merge[i] = node;
      }
    }
  }
  for (; j < m0; ++j) {
    merges[j] = groups0[j];
  }
  return new Transition(merges, this._parents, this._name, this._id);
}

// node_modules/d3-transition/src/transition/on.js
function start(name) {
  return (name + "").trim().split(/^|\s+/).every(function(t) {
    var i = t.indexOf(".");
    if (i >= 0)
      t = t.slice(0, i);
    return !t || t === "start";
  });
}
function onFunction(id2, name, listener) {
  var on0, on1, sit = start(name) ? init : set2;
  return function() {
    var schedule = sit(this, id2), on = schedule.on;
    if (on !== on0)
      (on1 = (on0 = on).copy()).on(name, listener);
    schedule.on = on1;
  };
}
function on_default2(name, listener) {
  var id2 = this._id;
  return arguments.length < 2 ? get2(this.node(), id2).on.on(name) : this.each(onFunction(id2, name, listener));
}

// node_modules/d3-transition/src/transition/remove.js
function removeFunction(id2) {
  return function() {
    var parent = this.parentNode;
    for (var i in this.__transition)
      if (+i !== id2)
        return;
    if (parent)
      parent.removeChild(this);
  };
}
function remove_default2() {
  return this.on("end.remove", removeFunction(this._id));
}

// node_modules/d3-transition/src/transition/select.js
function select_default3(select) {
  var name = this._name, id2 = this._id;
  if (typeof select !== "function")
    select = selector_default(select);
  for (var groups = this._groups, m2 = groups.length, subgroups = new Array(m2), j = 0; j < m2; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
        if ("__data__" in node)
          subnode.__data__ = node.__data__;
        subgroup[i] = subnode;
        schedule_default(subgroup[i], name, id2, i, subgroup, get2(node, id2));
      }
    }
  }
  return new Transition(subgroups, this._parents, name, id2);
}

// node_modules/d3-transition/src/transition/selectAll.js
function selectAll_default2(select) {
  var name = this._name, id2 = this._id;
  if (typeof select !== "function")
    select = selectorAll_default(select);
  for (var groups = this._groups, m2 = groups.length, subgroups = [], parents = [], j = 0; j < m2; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        for (var children2 = select.call(node, node.__data__, i, group), child, inherit2 = get2(node, id2), k = 0, l = children2.length; k < l; ++k) {
          if (child = children2[k]) {
            schedule_default(child, name, id2, k, children2, inherit2);
          }
        }
        subgroups.push(children2);
        parents.push(node);
      }
    }
  }
  return new Transition(subgroups, parents, name, id2);
}

// node_modules/d3-transition/src/transition/selection.js
var Selection2 = selection_default.prototype.constructor;
function selection_default2() {
  return new Selection2(this._groups, this._parents);
}

// node_modules/d3-transition/src/transition/style.js
function styleNull(name, interpolate) {
  var string00, string10, interpolate0;
  return function() {
    var string0 = styleValue(this, name), string1 = (this.style.removeProperty(name), styleValue(this, name));
    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : interpolate0 = interpolate(string00 = string0, string10 = string1);
  };
}
function styleRemove2(name) {
  return function() {
    this.style.removeProperty(name);
  };
}
function styleConstant2(name, interpolate, value1) {
  var string00, string1 = value1 + "", interpolate0;
  return function() {
    var string0 = styleValue(this, name);
    return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
  };
}
function styleFunction2(name, interpolate, value) {
  var string00, string10, interpolate0;
  return function() {
    var string0 = styleValue(this, name), value1 = value(this), string1 = value1 + "";
    if (value1 == null)
      string1 = value1 = (this.style.removeProperty(name), styleValue(this, name));
    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
  };
}
function styleMaybeRemove(id2, name) {
  var on0, on1, listener0, key = "style." + name, event = "end." + key, remove2;
  return function() {
    var schedule = set2(this, id2), on = schedule.on, listener = schedule.value[key] == null ? remove2 || (remove2 = styleRemove2(name)) : void 0;
    if (on !== on0 || listener0 !== listener)
      (on1 = (on0 = on).copy()).on(event, listener0 = listener);
    schedule.on = on1;
  };
}
function style_default2(name, value, priority) {
  var i = (name += "") === "transform" ? interpolateTransformCss : interpolate_default;
  return value == null ? this.styleTween(name, styleNull(name, i)).on("end.style." + name, styleRemove2(name)) : typeof value === "function" ? this.styleTween(name, styleFunction2(name, i, tweenValue(this, "style." + name, value))).each(styleMaybeRemove(this._id, name)) : this.styleTween(name, styleConstant2(name, i, value), priority).on("end.style." + name, null);
}

// node_modules/d3-transition/src/transition/styleTween.js
function styleInterpolate(name, i, priority) {
  return function(t) {
    this.style.setProperty(name, i.call(this, t), priority);
  };
}
function styleTween(name, value, priority) {
  var t, i0;
  function tween() {
    var i = value.apply(this, arguments);
    if (i !== i0)
      t = (i0 = i) && styleInterpolate(name, i, priority);
    return t;
  }
  tween._value = value;
  return tween;
}
function styleTween_default(name, value, priority) {
  var key = "style." + (name += "");
  if (arguments.length < 2)
    return (key = this.tween(key)) && key._value;
  if (value == null)
    return this.tween(key, null);
  if (typeof value !== "function")
    throw new Error();
  return this.tween(key, styleTween(name, value, priority == null ? "" : priority));
}

// node_modules/d3-transition/src/transition/text.js
function textConstant2(value) {
  return function() {
    this.textContent = value;
  };
}
function textFunction2(value) {
  return function() {
    var value1 = value(this);
    this.textContent = value1 == null ? "" : value1;
  };
}
function text_default2(value) {
  return this.tween("text", typeof value === "function" ? textFunction2(tweenValue(this, "text", value)) : textConstant2(value == null ? "" : value + ""));
}

// node_modules/d3-transition/src/transition/textTween.js
function textInterpolate(i) {
  return function(t) {
    this.textContent = i.call(this, t);
  };
}
function textTween(value) {
  var t0, i0;
  function tween() {
    var i = value.apply(this, arguments);
    if (i !== i0)
      t0 = (i0 = i) && textInterpolate(i);
    return t0;
  }
  tween._value = value;
  return tween;
}
function textTween_default(value) {
  var key = "text";
  if (arguments.length < 1)
    return (key = this.tween(key)) && key._value;
  if (value == null)
    return this.tween(key, null);
  if (typeof value !== "function")
    throw new Error();
  return this.tween(key, textTween(value));
}

// node_modules/d3-transition/src/transition/transition.js
function transition_default() {
  var name = this._name, id0 = this._id, id1 = newId();
  for (var groups = this._groups, m2 = groups.length, j = 0; j < m2; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        var inherit2 = get2(node, id0);
        schedule_default(node, name, id1, i, group, {
          time: inherit2.time + inherit2.delay + inherit2.duration,
          delay: 0,
          duration: inherit2.duration,
          ease: inherit2.ease
        });
      }
    }
  }
  return new Transition(groups, this._parents, name, id1);
}

// node_modules/d3-transition/src/transition/end.js
function end_default() {
  var on0, on1, that = this, id2 = that._id, size = that.size();
  return new Promise(function(resolve, reject) {
    var cancel = { value: reject }, end = { value: function() {
      if (--size === 0)
        resolve();
    } };
    that.each(function() {
      var schedule = set2(this, id2), on = schedule.on;
      if (on !== on0) {
        on1 = (on0 = on).copy();
        on1._.cancel.push(cancel);
        on1._.interrupt.push(cancel);
        on1._.end.push(end);
      }
      schedule.on = on1;
    });
    if (size === 0)
      resolve();
  });
}

// node_modules/d3-transition/src/transition/index.js
var id = 0;
function Transition(groups, parents, name, id2) {
  this._groups = groups;
  this._parents = parents;
  this._name = name;
  this._id = id2;
}
function transition(name) {
  return selection_default().transition(name);
}
function newId() {
  return ++id;
}
var selection_prototype = selection_default.prototype;
Transition.prototype = transition.prototype = {
  constructor: Transition,
  select: select_default3,
  selectAll: selectAll_default2,
  selectChild: selection_prototype.selectChild,
  selectChildren: selection_prototype.selectChildren,
  filter: filter_default2,
  merge: merge_default2,
  selection: selection_default2,
  transition: transition_default,
  call: selection_prototype.call,
  nodes: selection_prototype.nodes,
  node: selection_prototype.node,
  size: selection_prototype.size,
  empty: selection_prototype.empty,
  each: selection_prototype.each,
  on: on_default2,
  attr: attr_default2,
  attrTween: attrTween_default,
  style: style_default2,
  styleTween: styleTween_default,
  text: text_default2,
  textTween: textTween_default,
  remove: remove_default2,
  tween: tween_default,
  delay: delay_default,
  duration: duration_default,
  ease: ease_default,
  easeVarying: easeVarying_default,
  end: end_default,
  [Symbol.iterator]: selection_prototype[Symbol.iterator]
};

// node_modules/d3-ease/src/cubic.js
function cubicInOut(t) {
  return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;
}

// node_modules/d3-transition/src/selection/transition.js
var defaultTiming = {
  time: null,
  // Set on use.
  delay: 0,
  duration: 250,
  ease: cubicInOut
};
function inherit(node, id2) {
  var timing;
  while (!(timing = node.__transition) || !(timing = timing[id2])) {
    if (!(node = node.parentNode)) {
      throw new Error(`transition ${id2} not found`);
    }
  }
  return timing;
}
function transition_default2(name) {
  var id2, timing;
  if (name instanceof Transition) {
    id2 = name._id, name = name._name;
  } else {
    id2 = newId(), (timing = defaultTiming).time = now(), name = name == null ? null : name + "";
  }
  for (var groups = this._groups, m2 = groups.length, j = 0; j < m2; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        schedule_default(node, name, id2, i, group, timing || inherit(node, id2));
      }
    }
  }
  return new Transition(groups, this._parents, name, id2);
}

// node_modules/d3-transition/src/selection/index.js
selection_default.prototype.interrupt = interrupt_default2;
selection_default.prototype.transition = transition_default2;

// node_modules/d3-brush/src/brush.js
var { abs, max, min } = Math;
function number1(e) {
  return [+e[0], +e[1]];
}
function number2(e) {
  return [number1(e[0]), number1(e[1])];
}
var X = {
  name: "x",
  handles: ["w", "e"].map(type),
  input: function(x3, e) {
    return x3 == null ? null : [[+x3[0], e[0][1]], [+x3[1], e[1][1]]];
  },
  output: function(xy) {
    return xy && [xy[0][0], xy[1][0]];
  }
};
var Y = {
  name: "y",
  handles: ["n", "s"].map(type),
  input: function(y3, e) {
    return y3 == null ? null : [[e[0][0], +y3[0]], [e[1][0], +y3[1]]];
  },
  output: function(xy) {
    return xy && [xy[0][1], xy[1][1]];
  }
};
var XY = {
  name: "xy",
  handles: ["n", "w", "e", "s", "nw", "ne", "sw", "se"].map(type),
  input: function(xy) {
    return xy == null ? null : number2(xy);
  },
  output: function(xy) {
    return xy;
  }
};
function type(t) {
  return { type: t };
}

// node_modules/d3-force/src/center.js
function center_default(x3, y3) {
  var nodes, strength = 1;
  if (x3 == null)
    x3 = 0;
  if (y3 == null)
    y3 = 0;
  function force() {
    var i, n = nodes.length, node, sx = 0, sy = 0;
    for (i = 0; i < n; ++i) {
      node = nodes[i], sx += node.x, sy += node.y;
    }
    for (sx = (sx / n - x3) * strength, sy = (sy / n - y3) * strength, i = 0; i < n; ++i) {
      node = nodes[i], node.x -= sx, node.y -= sy;
    }
  }
  force.initialize = function(_) {
    nodes = _;
  };
  force.x = function(_) {
    return arguments.length ? (x3 = +_, force) : x3;
  };
  force.y = function(_) {
    return arguments.length ? (y3 = +_, force) : y3;
  };
  force.strength = function(_) {
    return arguments.length ? (strength = +_, force) : strength;
  };
  return force;
}

// node_modules/d3-quadtree/src/add.js
function add_default(d) {
  const x3 = +this._x.call(null, d), y3 = +this._y.call(null, d);
  return add(this.cover(x3, y3), x3, y3, d);
}
function add(tree, x3, y3, d) {
  if (isNaN(x3) || isNaN(y3))
    return tree;
  var parent, node = tree._root, leaf = { data: d }, x0 = tree._x0, y0 = tree._y0, x1 = tree._x1, y1 = tree._y1, xm, ym, xp, yp, right, bottom, i, j;
  if (!node)
    return tree._root = leaf, tree;
  while (node.length) {
    if (right = x3 >= (xm = (x0 + x1) / 2))
      x0 = xm;
    else
      x1 = xm;
    if (bottom = y3 >= (ym = (y0 + y1) / 2))
      y0 = ym;
    else
      y1 = ym;
    if (parent = node, !(node = node[i = bottom << 1 | right]))
      return parent[i] = leaf, tree;
  }
  xp = +tree._x.call(null, node.data);
  yp = +tree._y.call(null, node.data);
  if (x3 === xp && y3 === yp)
    return leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree;
  do {
    parent = parent ? parent[i] = new Array(4) : tree._root = new Array(4);
    if (right = x3 >= (xm = (x0 + x1) / 2))
      x0 = xm;
    else
      x1 = xm;
    if (bottom = y3 >= (ym = (y0 + y1) / 2))
      y0 = ym;
    else
      y1 = ym;
  } while ((i = bottom << 1 | right) === (j = (yp >= ym) << 1 | xp >= xm));
  return parent[j] = node, parent[i] = leaf, tree;
}
function addAll(data) {
  var d, i, n = data.length, x3, y3, xz = new Array(n), yz = new Array(n), x0 = Infinity, y0 = Infinity, x1 = -Infinity, y1 = -Infinity;
  for (i = 0; i < n; ++i) {
    if (isNaN(x3 = +this._x.call(null, d = data[i])) || isNaN(y3 = +this._y.call(null, d)))
      continue;
    xz[i] = x3;
    yz[i] = y3;
    if (x3 < x0)
      x0 = x3;
    if (x3 > x1)
      x1 = x3;
    if (y3 < y0)
      y0 = y3;
    if (y3 > y1)
      y1 = y3;
  }
  if (x0 > x1 || y0 > y1)
    return this;
  this.cover(x0, y0).cover(x1, y1);
  for (i = 0; i < n; ++i) {
    add(this, xz[i], yz[i], data[i]);
  }
  return this;
}

// node_modules/d3-quadtree/src/cover.js
function cover_default(x3, y3) {
  if (isNaN(x3 = +x3) || isNaN(y3 = +y3))
    return this;
  var x0 = this._x0, y0 = this._y0, x1 = this._x1, y1 = this._y1;
  if (isNaN(x0)) {
    x1 = (x0 = Math.floor(x3)) + 1;
    y1 = (y0 = Math.floor(y3)) + 1;
  } else {
    var z = x1 - x0 || 1, node = this._root, parent, i;
    while (x0 > x3 || x3 >= x1 || y0 > y3 || y3 >= y1) {
      i = (y3 < y0) << 1 | x3 < x0;
      parent = new Array(4), parent[i] = node, node = parent, z *= 2;
      switch (i) {
        case 0:
          x1 = x0 + z, y1 = y0 + z;
          break;
        case 1:
          x0 = x1 - z, y1 = y0 + z;
          break;
        case 2:
          x1 = x0 + z, y0 = y1 - z;
          break;
        case 3:
          x0 = x1 - z, y0 = y1 - z;
          break;
      }
    }
    if (this._root && this._root.length)
      this._root = node;
  }
  this._x0 = x0;
  this._y0 = y0;
  this._x1 = x1;
  this._y1 = y1;
  return this;
}

// node_modules/d3-quadtree/src/data.js
function data_default2() {
  var data = [];
  this.visit(function(node) {
    if (!node.length)
      do
        data.push(node.data);
      while (node = node.next);
  });
  return data;
}

// node_modules/d3-quadtree/src/extent.js
function extent_default(_) {
  return arguments.length ? this.cover(+_[0][0], +_[0][1]).cover(+_[1][0], +_[1][1]) : isNaN(this._x0) ? void 0 : [[this._x0, this._y0], [this._x1, this._y1]];
}

// node_modules/d3-quadtree/src/quad.js
function quad_default(node, x0, y0, x1, y1) {
  this.node = node;
  this.x0 = x0;
  this.y0 = y0;
  this.x1 = x1;
  this.y1 = y1;
}

// node_modules/d3-quadtree/src/find.js
function find_default(x3, y3, radius) {
  var data, x0 = this._x0, y0 = this._y0, x1, y1, x22, y22, x32 = this._x1, y32 = this._y1, quads = [], node = this._root, q, i;
  if (node)
    quads.push(new quad_default(node, x0, y0, x32, y32));
  if (radius == null)
    radius = Infinity;
  else {
    x0 = x3 - radius, y0 = y3 - radius;
    x32 = x3 + radius, y32 = y3 + radius;
    radius *= radius;
  }
  while (q = quads.pop()) {
    if (!(node = q.node) || (x1 = q.x0) > x32 || (y1 = q.y0) > y32 || (x22 = q.x1) < x0 || (y22 = q.y1) < y0)
      continue;
    if (node.length) {
      var xm = (x1 + x22) / 2, ym = (y1 + y22) / 2;
      quads.push(
        new quad_default(node[3], xm, ym, x22, y22),
        new quad_default(node[2], x1, ym, xm, y22),
        new quad_default(node[1], xm, y1, x22, ym),
        new quad_default(node[0], x1, y1, xm, ym)
      );
      if (i = (y3 >= ym) << 1 | x3 >= xm) {
        q = quads[quads.length - 1];
        quads[quads.length - 1] = quads[quads.length - 1 - i];
        quads[quads.length - 1 - i] = q;
      }
    } else {
      var dx = x3 - +this._x.call(null, node.data), dy = y3 - +this._y.call(null, node.data), d2 = dx * dx + dy * dy;
      if (d2 < radius) {
        var d = Math.sqrt(radius = d2);
        x0 = x3 - d, y0 = y3 - d;
        x32 = x3 + d, y32 = y3 + d;
        data = node.data;
      }
    }
  }
  return data;
}

// node_modules/d3-quadtree/src/remove.js
function remove_default3(d) {
  if (isNaN(x3 = +this._x.call(null, d)) || isNaN(y3 = +this._y.call(null, d)))
    return this;
  var parent, node = this._root, retainer, previous, next, x0 = this._x0, y0 = this._y0, x1 = this._x1, y1 = this._y1, x3, y3, xm, ym, right, bottom, i, j;
  if (!node)
    return this;
  if (node.length)
    while (true) {
      if (right = x3 >= (xm = (x0 + x1) / 2))
        x0 = xm;
      else
        x1 = xm;
      if (bottom = y3 >= (ym = (y0 + y1) / 2))
        y0 = ym;
      else
        y1 = ym;
      if (!(parent = node, node = node[i = bottom << 1 | right]))
        return this;
      if (!node.length)
        break;
      if (parent[i + 1 & 3] || parent[i + 2 & 3] || parent[i + 3 & 3])
        retainer = parent, j = i;
    }
  while (node.data !== d)
    if (!(previous = node, node = node.next))
      return this;
  if (next = node.next)
    delete node.next;
  if (previous)
    return next ? previous.next = next : delete previous.next, this;
  if (!parent)
    return this._root = next, this;
  next ? parent[i] = next : delete parent[i];
  if ((node = parent[0] || parent[1] || parent[2] || parent[3]) && node === (parent[3] || parent[2] || parent[1] || parent[0]) && !node.length) {
    if (retainer)
      retainer[j] = node;
    else
      this._root = node;
  }
  return this;
}
function removeAll(data) {
  for (var i = 0, n = data.length; i < n; ++i)
    this.remove(data[i]);
  return this;
}

// node_modules/d3-quadtree/src/root.js
function root_default() {
  return this._root;
}

// node_modules/d3-quadtree/src/size.js
function size_default2() {
  var size = 0;
  this.visit(function(node) {
    if (!node.length)
      do
        ++size;
      while (node = node.next);
  });
  return size;
}

// node_modules/d3-quadtree/src/visit.js
function visit_default(callback) {
  var quads = [], q, node = this._root, child, x0, y0, x1, y1;
  if (node)
    quads.push(new quad_default(node, this._x0, this._y0, this._x1, this._y1));
  while (q = quads.pop()) {
    if (!callback(node = q.node, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1) && node.length) {
      var xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;
      if (child = node[3])
        quads.push(new quad_default(child, xm, ym, x1, y1));
      if (child = node[2])
        quads.push(new quad_default(child, x0, ym, xm, y1));
      if (child = node[1])
        quads.push(new quad_default(child, xm, y0, x1, ym));
      if (child = node[0])
        quads.push(new quad_default(child, x0, y0, xm, ym));
    }
  }
  return this;
}

// node_modules/d3-quadtree/src/visitAfter.js
function visitAfter_default(callback) {
  var quads = [], next = [], q;
  if (this._root)
    quads.push(new quad_default(this._root, this._x0, this._y0, this._x1, this._y1));
  while (q = quads.pop()) {
    var node = q.node;
    if (node.length) {
      var child, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1, xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;
      if (child = node[0])
        quads.push(new quad_default(child, x0, y0, xm, ym));
      if (child = node[1])
        quads.push(new quad_default(child, xm, y0, x1, ym));
      if (child = node[2])
        quads.push(new quad_default(child, x0, ym, xm, y1));
      if (child = node[3])
        quads.push(new quad_default(child, xm, ym, x1, y1));
    }
    next.push(q);
  }
  while (q = next.pop()) {
    callback(q.node, q.x0, q.y0, q.x1, q.y1);
  }
  return this;
}

// node_modules/d3-quadtree/src/x.js
function defaultX(d) {
  return d[0];
}
function x_default(_) {
  return arguments.length ? (this._x = _, this) : this._x;
}

// node_modules/d3-quadtree/src/y.js
function defaultY(d) {
  return d[1];
}
function y_default(_) {
  return arguments.length ? (this._y = _, this) : this._y;
}

// node_modules/d3-quadtree/src/quadtree.js
function quadtree(nodes, x3, y3) {
  var tree = new Quadtree(x3 == null ? defaultX : x3, y3 == null ? defaultY : y3, NaN, NaN, NaN, NaN);
  return nodes == null ? tree : tree.addAll(nodes);
}
function Quadtree(x3, y3, x0, y0, x1, y1) {
  this._x = x3;
  this._y = y3;
  this._x0 = x0;
  this._y0 = y0;
  this._x1 = x1;
  this._y1 = y1;
  this._root = void 0;
}
function leaf_copy(leaf) {
  var copy2 = { data: leaf.data }, next = copy2;
  while (leaf = leaf.next)
    next = next.next = { data: leaf.data };
  return copy2;
}
var treeProto = quadtree.prototype = Quadtree.prototype;
treeProto.copy = function() {
  var copy2 = new Quadtree(this._x, this._y, this._x0, this._y0, this._x1, this._y1), node = this._root, nodes, child;
  if (!node)
    return copy2;
  if (!node.length)
    return copy2._root = leaf_copy(node), copy2;
  nodes = [{ source: node, target: copy2._root = new Array(4) }];
  while (node = nodes.pop()) {
    for (var i = 0; i < 4; ++i) {
      if (child = node.source[i]) {
        if (child.length)
          nodes.push({ source: child, target: node.target[i] = new Array(4) });
        else
          node.target[i] = leaf_copy(child);
      }
    }
  }
  return copy2;
};
treeProto.add = add_default;
treeProto.addAll = addAll;
treeProto.cover = cover_default;
treeProto.data = data_default2;
treeProto.extent = extent_default;
treeProto.find = find_default;
treeProto.remove = remove_default3;
treeProto.removeAll = removeAll;
treeProto.root = root_default;
treeProto.size = size_default2;
treeProto.visit = visit_default;
treeProto.visitAfter = visitAfter_default;
treeProto.x = x_default;
treeProto.y = y_default;

// node_modules/d3-force/src/constant.js
function constant_default5(x3) {
  return function() {
    return x3;
  };
}

// node_modules/d3-force/src/jiggle.js
function jiggle_default(random) {
  return (random() - 0.5) * 1e-6;
}

// node_modules/d3-force/src/collide.js
function x(d) {
  return d.x + d.vx;
}
function y(d) {
  return d.y + d.vy;
}
function collide_default(radius) {
  var nodes, radii, random, strength = 1, iterations = 1;
  if (typeof radius !== "function")
    radius = constant_default5(radius == null ? 1 : +radius);
  function force() {
    var i, n = nodes.length, tree, node, xi, yi, ri, ri2;
    for (var k = 0; k < iterations; ++k) {
      tree = quadtree(nodes, x, y).visitAfter(prepare);
      for (i = 0; i < n; ++i) {
        node = nodes[i];
        ri = radii[node.index], ri2 = ri * ri;
        xi = node.x + node.vx;
        yi = node.y + node.vy;
        tree.visit(apply);
      }
    }
    function apply(quad, x0, y0, x1, y1) {
      var data = quad.data, rj = quad.r, r = ri + rj;
      if (data) {
        if (data.index > node.index) {
          var x3 = xi - data.x - data.vx, y3 = yi - data.y - data.vy, l = x3 * x3 + y3 * y3;
          if (l < r * r) {
            if (x3 === 0)
              x3 = jiggle_default(random), l += x3 * x3;
            if (y3 === 0)
              y3 = jiggle_default(random), l += y3 * y3;
            l = (r - (l = Math.sqrt(l))) / l * strength;
            node.vx += (x3 *= l) * (r = (rj *= rj) / (ri2 + rj));
            node.vy += (y3 *= l) * r;
            data.vx -= x3 * (r = 1 - r);
            data.vy -= y3 * r;
          }
        }
        return;
      }
      return x0 > xi + r || x1 < xi - r || y0 > yi + r || y1 < yi - r;
    }
  }
  function prepare(quad) {
    if (quad.data)
      return quad.r = radii[quad.data.index];
    for (var i = quad.r = 0; i < 4; ++i) {
      if (quad[i] && quad[i].r > quad.r) {
        quad.r = quad[i].r;
      }
    }
  }
  function initialize() {
    if (!nodes)
      return;
    var i, n = nodes.length, node;
    radii = new Array(n);
    for (i = 0; i < n; ++i)
      node = nodes[i], radii[node.index] = +radius(node, i, nodes);
  }
  force.initialize = function(_nodes, _random) {
    nodes = _nodes;
    random = _random;
    initialize();
  };
  force.iterations = function(_) {
    return arguments.length ? (iterations = +_, force) : iterations;
  };
  force.strength = function(_) {
    return arguments.length ? (strength = +_, force) : strength;
  };
  force.radius = function(_) {
    return arguments.length ? (radius = typeof _ === "function" ? _ : constant_default5(+_), initialize(), force) : radius;
  };
  return force;
}

// node_modules/d3-force/src/link.js
function index(d) {
  return d.index;
}
function find2(nodeById, nodeId) {
  var node = nodeById.get(nodeId);
  if (!node)
    throw new Error("node not found: " + nodeId);
  return node;
}
function link_default(links2) {
  var id2 = index, strength = defaultStrength, strengths, distance = constant_default5(30), distances, nodes, count, bias, random, iterations = 1;
  if (links2 == null)
    links2 = [];
  function defaultStrength(link) {
    return 1 / Math.min(count[link.source.index], count[link.target.index]);
  }
  function force(alpha) {
    for (var k = 0, n = links2.length; k < iterations; ++k) {
      for (var i = 0, link, source, target, x3, y3, l, b; i < n; ++i) {
        link = links2[i], source = link.source, target = link.target;
        x3 = target.x + target.vx - source.x - source.vx || jiggle_default(random);
        y3 = target.y + target.vy - source.y - source.vy || jiggle_default(random);
        l = Math.sqrt(x3 * x3 + y3 * y3);
        l = (l - distances[i]) / l * alpha * strengths[i];
        x3 *= l, y3 *= l;
        target.vx -= x3 * (b = bias[i]);
        target.vy -= y3 * b;
        source.vx += x3 * (b = 1 - b);
        source.vy += y3 * b;
      }
    }
  }
  function initialize() {
    if (!nodes)
      return;
    var i, n = nodes.length, m2 = links2.length, nodeById = new Map(nodes.map((d, i2) => [id2(d, i2, nodes), d])), link;
    for (i = 0, count = new Array(n); i < m2; ++i) {
      link = links2[i], link.index = i;
      if (typeof link.source !== "object")
        link.source = find2(nodeById, link.source);
      if (typeof link.target !== "object")
        link.target = find2(nodeById, link.target);
      count[link.source.index] = (count[link.source.index] || 0) + 1;
      count[link.target.index] = (count[link.target.index] || 0) + 1;
    }
    for (i = 0, bias = new Array(m2); i < m2; ++i) {
      link = links2[i], bias[i] = count[link.source.index] / (count[link.source.index] + count[link.target.index]);
    }
    strengths = new Array(m2), initializeStrength();
    distances = new Array(m2), initializeDistance();
  }
  function initializeStrength() {
    if (!nodes)
      return;
    for (var i = 0, n = links2.length; i < n; ++i) {
      strengths[i] = +strength(links2[i], i, links2);
    }
  }
  function initializeDistance() {
    if (!nodes)
      return;
    for (var i = 0, n = links2.length; i < n; ++i) {
      distances[i] = +distance(links2[i], i, links2);
    }
  }
  force.initialize = function(_nodes, _random) {
    nodes = _nodes;
    random = _random;
    initialize();
  };
  force.links = function(_) {
    return arguments.length ? (links2 = _, initialize(), force) : links2;
  };
  force.id = function(_) {
    return arguments.length ? (id2 = _, force) : id2;
  };
  force.iterations = function(_) {
    return arguments.length ? (iterations = +_, force) : iterations;
  };
  force.strength = function(_) {
    return arguments.length ? (strength = typeof _ === "function" ? _ : constant_default5(+_), initializeStrength(), force) : strength;
  };
  force.distance = function(_) {
    return arguments.length ? (distance = typeof _ === "function" ? _ : constant_default5(+_), initializeDistance(), force) : distance;
  };
  return force;
}

// node_modules/d3-force/src/lcg.js
var a = 1664525;
var c = 1013904223;
var m = 4294967296;
function lcg_default() {
  let s = 1;
  return () => (s = (a * s + c) % m) / m;
}

// node_modules/d3-force/src/simulation.js
function x2(d) {
  return d.x;
}
function y2(d) {
  return d.y;
}
var initialRadius = 10;
var initialAngle = Math.PI * (3 - Math.sqrt(5));
function simulation_default(nodes) {
  var simulation, alpha = 1, alphaMin = 1e-3, alphaDecay = 1 - Math.pow(alphaMin, 1 / 300), alphaTarget = 0, velocityDecay = 0.6, forces = /* @__PURE__ */ new Map(), stepper = timer(step), event = dispatch_default("tick", "end"), random = lcg_default();
  if (nodes == null)
    nodes = [];
  function step() {
    tick();
    event.call("tick", simulation);
    if (alpha < alphaMin) {
      stepper.stop();
      event.call("end", simulation);
    }
  }
  function tick(iterations) {
    var i, n = nodes.length, node;
    if (iterations === void 0)
      iterations = 1;
    for (var k = 0; k < iterations; ++k) {
      alpha += (alphaTarget - alpha) * alphaDecay;
      forces.forEach(function(force) {
        force(alpha);
      });
      for (i = 0; i < n; ++i) {
        node = nodes[i];
        if (node.fx == null)
          node.x += node.vx *= velocityDecay;
        else
          node.x = node.fx, node.vx = 0;
        if (node.fy == null)
          node.y += node.vy *= velocityDecay;
        else
          node.y = node.fy, node.vy = 0;
      }
    }
    return simulation;
  }
  function initializeNodes() {
    for (var i = 0, n = nodes.length, node; i < n; ++i) {
      node = nodes[i], node.index = i;
      if (node.fx != null)
        node.x = node.fx;
      if (node.fy != null)
        node.y = node.fy;
      if (isNaN(node.x) || isNaN(node.y)) {
        var radius = initialRadius * Math.sqrt(0.5 + i), angle = i * initialAngle;
        node.x = radius * Math.cos(angle);
        node.y = radius * Math.sin(angle);
      }
      if (isNaN(node.vx) || isNaN(node.vy)) {
        node.vx = node.vy = 0;
      }
    }
  }
  function initializeForce(force) {
    if (force.initialize)
      force.initialize(nodes, random);
    return force;
  }
  initializeNodes();
  return simulation = {
    tick,
    restart: function() {
      return stepper.restart(step), simulation;
    },
    stop: function() {
      return stepper.stop(), simulation;
    },
    nodes: function(_) {
      return arguments.length ? (nodes = _, initializeNodes(), forces.forEach(initializeForce), simulation) : nodes;
    },
    alpha: function(_) {
      return arguments.length ? (alpha = +_, simulation) : alpha;
    },
    alphaMin: function(_) {
      return arguments.length ? (alphaMin = +_, simulation) : alphaMin;
    },
    alphaDecay: function(_) {
      return arguments.length ? (alphaDecay = +_, simulation) : +alphaDecay;
    },
    alphaTarget: function(_) {
      return arguments.length ? (alphaTarget = +_, simulation) : alphaTarget;
    },
    velocityDecay: function(_) {
      return arguments.length ? (velocityDecay = 1 - _, simulation) : 1 - velocityDecay;
    },
    randomSource: function(_) {
      return arguments.length ? (random = _, forces.forEach(initializeForce), simulation) : random;
    },
    force: function(name, _) {
      return arguments.length > 1 ? (_ == null ? forces.delete(name) : forces.set(name, initializeForce(_)), simulation) : forces.get(name);
    },
    find: function(x3, y3, radius) {
      var i = 0, n = nodes.length, dx, dy, d2, node, closest;
      if (radius == null)
        radius = Infinity;
      else
        radius *= radius;
      for (i = 0; i < n; ++i) {
        node = nodes[i];
        dx = x3 - node.x;
        dy = y3 - node.y;
        d2 = dx * dx + dy * dy;
        if (d2 < radius)
          closest = node, radius = d2;
      }
      return closest;
    },
    on: function(name, _) {
      return arguments.length > 1 ? (event.on(name, _), simulation) : event.on(name);
    }
  };
}

// node_modules/d3-force/src/manyBody.js
function manyBody_default() {
  var nodes, node, random, alpha, strength = constant_default5(-30), strengths, distanceMin2 = 1, distanceMax2 = Infinity, theta2 = 0.81;
  function force(_) {
    var i, n = nodes.length, tree = quadtree(nodes, x2, y2).visitAfter(accumulate);
    for (alpha = _, i = 0; i < n; ++i)
      node = nodes[i], tree.visit(apply);
  }
  function initialize() {
    if (!nodes)
      return;
    var i, n = nodes.length, node2;
    strengths = new Array(n);
    for (i = 0; i < n; ++i)
      node2 = nodes[i], strengths[node2.index] = +strength(node2, i, nodes);
  }
  function accumulate(quad) {
    var strength2 = 0, q, c2, weight = 0, x3, y3, i;
    if (quad.length) {
      for (x3 = y3 = i = 0; i < 4; ++i) {
        if ((q = quad[i]) && (c2 = Math.abs(q.value))) {
          strength2 += q.value, weight += c2, x3 += c2 * q.x, y3 += c2 * q.y;
        }
      }
      quad.x = x3 / weight;
      quad.y = y3 / weight;
    } else {
      q = quad;
      q.x = q.data.x;
      q.y = q.data.y;
      do
        strength2 += strengths[q.data.index];
      while (q = q.next);
    }
    quad.value = strength2;
  }
  function apply(quad, x1, _, x22) {
    if (!quad.value)
      return true;
    var x3 = quad.x - node.x, y3 = quad.y - node.y, w = x22 - x1, l = x3 * x3 + y3 * y3;
    if (w * w / theta2 < l) {
      if (l < distanceMax2) {
        if (x3 === 0)
          x3 = jiggle_default(random), l += x3 * x3;
        if (y3 === 0)
          y3 = jiggle_default(random), l += y3 * y3;
        if (l < distanceMin2)
          l = Math.sqrt(distanceMin2 * l);
        node.vx += x3 * quad.value * alpha / l;
        node.vy += y3 * quad.value * alpha / l;
      }
      return true;
    } else if (quad.length || l >= distanceMax2)
      return;
    if (quad.data !== node || quad.next) {
      if (x3 === 0)
        x3 = jiggle_default(random), l += x3 * x3;
      if (y3 === 0)
        y3 = jiggle_default(random), l += y3 * y3;
      if (l < distanceMin2)
        l = Math.sqrt(distanceMin2 * l);
    }
    do
      if (quad.data !== node) {
        w = strengths[quad.data.index] * alpha / l;
        node.vx += x3 * w;
        node.vy += y3 * w;
      }
    while (quad = quad.next);
  }
  force.initialize = function(_nodes, _random) {
    nodes = _nodes;
    random = _random;
    initialize();
  };
  force.strength = function(_) {
    return arguments.length ? (strength = typeof _ === "function" ? _ : constant_default5(+_), initialize(), force) : strength;
  };
  force.distanceMin = function(_) {
    return arguments.length ? (distanceMin2 = _ * _, force) : Math.sqrt(distanceMin2);
  };
  force.distanceMax = function(_) {
    return arguments.length ? (distanceMax2 = _ * _, force) : Math.sqrt(distanceMax2);
  };
  force.theta = function(_) {
    return arguments.length ? (theta2 = _ * _, force) : Math.sqrt(theta2);
  };
  return force;
}

// node_modules/d3-format/src/formatDecimal.js
function formatDecimal_default(x3) {
  return Math.abs(x3 = Math.round(x3)) >= 1e21 ? x3.toLocaleString("en").replace(/,/g, "") : x3.toString(10);
}
function formatDecimalParts(x3, p) {
  if ((i = (x3 = p ? x3.toExponential(p - 1) : x3.toExponential()).indexOf("e")) < 0)
    return null;
  var i, coefficient = x3.slice(0, i);
  return [
    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
    +x3.slice(i + 1)
  ];
}

// node_modules/d3-format/src/exponent.js
function exponent_default(x3) {
  return x3 = formatDecimalParts(Math.abs(x3)), x3 ? x3[1] : NaN;
}

// node_modules/d3-format/src/formatGroup.js
function formatGroup_default(grouping, thousands) {
  return function(value, width) {
    var i = value.length, t = [], j = 0, g = grouping[0], length = 0;
    while (i > 0 && g > 0) {
      if (length + g + 1 > width)
        g = Math.max(1, width - length);
      t.push(value.substring(i -= g, i + g));
      if ((length += g + 1) > width)
        break;
      g = grouping[j = (j + 1) % grouping.length];
    }
    return t.reverse().join(thousands);
  };
}

// node_modules/d3-format/src/formatNumerals.js
function formatNumerals_default(numerals) {
  return function(value) {
    return value.replace(/[0-9]/g, function(i) {
      return numerals[+i];
    });
  };
}

// node_modules/d3-format/src/formatSpecifier.js
var re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;
function formatSpecifier(specifier) {
  if (!(match = re.exec(specifier)))
    throw new Error("invalid format: " + specifier);
  var match;
  return new FormatSpecifier({
    fill: match[1],
    align: match[2],
    sign: match[3],
    symbol: match[4],
    zero: match[5],
    width: match[6],
    comma: match[7],
    precision: match[8] && match[8].slice(1),
    trim: match[9],
    type: match[10]
  });
}
formatSpecifier.prototype = FormatSpecifier.prototype;
function FormatSpecifier(specifier) {
  this.fill = specifier.fill === void 0 ? " " : specifier.fill + "";
  this.align = specifier.align === void 0 ? ">" : specifier.align + "";
  this.sign = specifier.sign === void 0 ? "-" : specifier.sign + "";
  this.symbol = specifier.symbol === void 0 ? "" : specifier.symbol + "";
  this.zero = !!specifier.zero;
  this.width = specifier.width === void 0 ? void 0 : +specifier.width;
  this.comma = !!specifier.comma;
  this.precision = specifier.precision === void 0 ? void 0 : +specifier.precision;
  this.trim = !!specifier.trim;
  this.type = specifier.type === void 0 ? "" : specifier.type + "";
}
FormatSpecifier.prototype.toString = function() {
  return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (this.width === void 0 ? "" : Math.max(1, this.width | 0)) + (this.comma ? "," : "") + (this.precision === void 0 ? "" : "." + Math.max(0, this.precision | 0)) + (this.trim ? "~" : "") + this.type;
};

// node_modules/d3-format/src/formatTrim.js
function formatTrim_default(s) {
  out:
    for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {
      switch (s[i]) {
        case ".":
          i0 = i1 = i;
          break;
        case "0":
          if (i0 === 0)
            i0 = i;
          i1 = i;
          break;
        default:
          if (!+s[i])
            break out;
          if (i0 > 0)
            i0 = 0;
          break;
      }
    }
  return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;
}

// node_modules/d3-format/src/formatPrefixAuto.js
var prefixExponent;
function formatPrefixAuto_default(x3, p) {
  var d = formatDecimalParts(x3, p);
  if (!d)
    return x3 + "";
  var coefficient = d[0], exponent = d[1], i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1, n = coefficient.length;
  return i === n ? coefficient : i > n ? coefficient + new Array(i - n + 1).join("0") : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i) : "0." + new Array(1 - i).join("0") + formatDecimalParts(x3, Math.max(0, p + i - 1))[0];
}

// node_modules/d3-format/src/formatRounded.js
function formatRounded_default(x3, p) {
  var d = formatDecimalParts(x3, p);
  if (!d)
    return x3 + "";
  var coefficient = d[0], exponent = d[1];
  return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1) : coefficient + new Array(exponent - coefficient.length + 2).join("0");
}

// node_modules/d3-format/src/formatTypes.js
var formatTypes_default = {
  "%": (x3, p) => (x3 * 100).toFixed(p),
  "b": (x3) => Math.round(x3).toString(2),
  "c": (x3) => x3 + "",
  "d": formatDecimal_default,
  "e": (x3, p) => x3.toExponential(p),
  "f": (x3, p) => x3.toFixed(p),
  "g": (x3, p) => x3.toPrecision(p),
  "o": (x3) => Math.round(x3).toString(8),
  "p": (x3, p) => formatRounded_default(x3 * 100, p),
  "r": formatRounded_default,
  "s": formatPrefixAuto_default,
  "X": (x3) => Math.round(x3).toString(16).toUpperCase(),
  "x": (x3) => Math.round(x3).toString(16)
};

// node_modules/d3-format/src/identity.js
function identity_default(x3) {
  return x3;
}

// node_modules/d3-format/src/locale.js
var map = Array.prototype.map;
var prefixes = ["y", "z", "a", "f", "p", "n", "\xB5", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y"];
function locale_default(locale2) {
  var group = locale2.grouping === void 0 || locale2.thousands === void 0 ? identity_default : formatGroup_default(map.call(locale2.grouping, Number), locale2.thousands + ""), currencyPrefix = locale2.currency === void 0 ? "" : locale2.currency[0] + "", currencySuffix = locale2.currency === void 0 ? "" : locale2.currency[1] + "", decimal = locale2.decimal === void 0 ? "." : locale2.decimal + "", numerals = locale2.numerals === void 0 ? identity_default : formatNumerals_default(map.call(locale2.numerals, String)), percent = locale2.percent === void 0 ? "%" : locale2.percent + "", minus = locale2.minus === void 0 ? "\u2212" : locale2.minus + "", nan = locale2.nan === void 0 ? "NaN" : locale2.nan + "";
  function newFormat(specifier) {
    specifier = formatSpecifier(specifier);
    var fill = specifier.fill, align = specifier.align, sign = specifier.sign, symbol = specifier.symbol, zero3 = specifier.zero, width = specifier.width, comma = specifier.comma, precision = specifier.precision, trim = specifier.trim, type2 = specifier.type;
    if (type2 === "n")
      comma = true, type2 = "g";
    else if (!formatTypes_default[type2])
      precision === void 0 && (precision = 12), trim = true, type2 = "g";
    if (zero3 || fill === "0" && align === "=")
      zero3 = true, fill = "0", align = "=";
    var prefix = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type2) ? "0" + type2.toLowerCase() : "", suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type2) ? percent : "";
    var formatType = formatTypes_default[type2], maybeSuffix = /[defgprs%]/.test(type2);
    precision = precision === void 0 ? 6 : /[gprs]/.test(type2) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));
    function format2(value) {
      var valuePrefix = prefix, valueSuffix = suffix, i, n, c2;
      if (type2 === "c") {
        valueSuffix = formatType(value) + valueSuffix;
        value = "";
      } else {
        value = +value;
        var valueNegative = value < 0 || 1 / value < 0;
        value = isNaN(value) ? nan : formatType(Math.abs(value), precision);
        if (trim)
          value = formatTrim_default(value);
        if (valueNegative && +value === 0 && sign !== "+")
          valueNegative = false;
        valuePrefix = (valueNegative ? sign === "(" ? sign : minus : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;
        valueSuffix = (type2 === "s" ? prefixes[8 + prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign === "(" ? ")" : "");
        if (maybeSuffix) {
          i = -1, n = value.length;
          while (++i < n) {
            if (c2 = value.charCodeAt(i), 48 > c2 || c2 > 57) {
              valueSuffix = (c2 === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
              value = value.slice(0, i);
              break;
            }
          }
        }
      }
      if (comma && !zero3)
        value = group(value, Infinity);
      var length = valuePrefix.length + value.length + valueSuffix.length, padding = length < width ? new Array(width - length + 1).join(fill) : "";
      if (comma && zero3)
        value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";
      switch (align) {
        case "<":
          value = valuePrefix + value + valueSuffix + padding;
          break;
        case "=":
          value = valuePrefix + padding + value + valueSuffix;
          break;
        case "^":
          value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);
          break;
        default:
          value = padding + valuePrefix + value + valueSuffix;
          break;
      }
      return numerals(value);
    }
    format2.toString = function() {
      return specifier + "";
    };
    return format2;
  }
  function formatPrefix2(specifier, value) {
    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)), e = Math.max(-8, Math.min(8, Math.floor(exponent_default(value) / 3))) * 3, k = Math.pow(10, -e), prefix = prefixes[8 + e / 3];
    return function(value2) {
      return f(k * value2) + prefix;
    };
  }
  return {
    format: newFormat,
    formatPrefix: formatPrefix2
  };
}

// node_modules/d3-format/src/defaultLocale.js
var locale;
var format;
var formatPrefix;
defaultLocale({
  thousands: ",",
  grouping: [3],
  currency: ["$", ""]
});
function defaultLocale(definition) {
  locale = locale_default(definition);
  format = locale.format;
  formatPrefix = locale.formatPrefix;
  return locale;
}

// node_modules/d3-format/src/precisionFixed.js
function precisionFixed_default(step) {
  return Math.max(0, -exponent_default(Math.abs(step)));
}

// node_modules/d3-format/src/precisionPrefix.js
function precisionPrefix_default(step, value) {
  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent_default(value) / 3))) * 3 - exponent_default(Math.abs(step)));
}

// node_modules/d3-format/src/precisionRound.js
function precisionRound_default(step, max2) {
  step = Math.abs(step), max2 = Math.abs(max2) - step;
  return Math.max(0, exponent_default(max2) - exponent_default(step)) + 1;
}

// node_modules/d3-scale/src/init.js
function initRange(domain, range) {
  switch (arguments.length) {
    case 0:
      break;
    case 1:
      this.range(domain);
      break;
    default:
      this.range(range).domain(domain);
      break;
  }
  return this;
}

// node_modules/d3-scale/src/constant.js
function constants(x3) {
  return function() {
    return x3;
  };
}

// node_modules/d3-scale/src/number.js
function number3(x3) {
  return +x3;
}

// node_modules/d3-scale/src/continuous.js
var unit = [0, 1];
function identity2(x3) {
  return x3;
}
function normalize(a2, b) {
  return (b -= a2 = +a2) ? function(x3) {
    return (x3 - a2) / b;
  } : constants(isNaN(b) ? NaN : 0.5);
}
function clamper(a2, b) {
  var t;
  if (a2 > b)
    t = a2, a2 = b, b = t;
  return function(x3) {
    return Math.max(a2, Math.min(b, x3));
  };
}
function bimap(domain, range, interpolate) {
  var d0 = domain[0], d1 = domain[1], r0 = range[0], r1 = range[1];
  if (d1 < d0)
    d0 = normalize(d1, d0), r0 = interpolate(r1, r0);
  else
    d0 = normalize(d0, d1), r0 = interpolate(r0, r1);
  return function(x3) {
    return r0(d0(x3));
  };
}
function polymap(domain, range, interpolate) {
  var j = Math.min(domain.length, range.length) - 1, d = new Array(j), r = new Array(j), i = -1;
  if (domain[j] < domain[0]) {
    domain = domain.slice().reverse();
    range = range.slice().reverse();
  }
  while (++i < j) {
    d[i] = normalize(domain[i], domain[i + 1]);
    r[i] = interpolate(range[i], range[i + 1]);
  }
  return function(x3) {
    var i2 = bisect_default(domain, x3, 1, j) - 1;
    return r[i2](d[i2](x3));
  };
}
function copy(source, target) {
  return target.domain(source.domain()).range(source.range()).interpolate(source.interpolate()).clamp(source.clamp()).unknown(source.unknown());
}
function transformer() {
  var domain = unit, range = unit, interpolate = value_default, transform2, untransform, unknown, clamp = identity2, piecewise, output, input;
  function rescale() {
    var n = Math.min(domain.length, range.length);
    if (clamp !== identity2)
      clamp = clamper(domain[0], domain[n - 1]);
    piecewise = n > 2 ? polymap : bimap;
    output = input = null;
    return scale;
  }
  function scale(x3) {
    return x3 == null || isNaN(x3 = +x3) ? unknown : (output || (output = piecewise(domain.map(transform2), range, interpolate)))(transform2(clamp(x3)));
  }
  scale.invert = function(y3) {
    return clamp(untransform((input || (input = piecewise(range, domain.map(transform2), number_default)))(y3)));
  };
  scale.domain = function(_) {
    return arguments.length ? (domain = Array.from(_, number3), rescale()) : domain.slice();
  };
  scale.range = function(_) {
    return arguments.length ? (range = Array.from(_), rescale()) : range.slice();
  };
  scale.rangeRound = function(_) {
    return range = Array.from(_), interpolate = round_default, rescale();
  };
  scale.clamp = function(_) {
    return arguments.length ? (clamp = _ ? true : identity2, rescale()) : clamp !== identity2;
  };
  scale.interpolate = function(_) {
    return arguments.length ? (interpolate = _, rescale()) : interpolate;
  };
  scale.unknown = function(_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };
  return function(t, u) {
    transform2 = t, untransform = u;
    return rescale();
  };
}
function continuous() {
  return transformer()(identity2, identity2);
}

// node_modules/d3-scale/src/tickFormat.js
function tickFormat(start2, stop, count, specifier) {
  var step = tickStep(start2, stop, count), precision;
  specifier = formatSpecifier(specifier == null ? ",f" : specifier);
  switch (specifier.type) {
    case "s": {
      var value = Math.max(Math.abs(start2), Math.abs(stop));
      if (specifier.precision == null && !isNaN(precision = precisionPrefix_default(step, value)))
        specifier.precision = precision;
      return formatPrefix(specifier, value);
    }
    case "":
    case "e":
    case "g":
    case "p":
    case "r": {
      if (specifier.precision == null && !isNaN(precision = precisionRound_default(step, Math.max(Math.abs(start2), Math.abs(stop)))))
        specifier.precision = precision - (specifier.type === "e");
      break;
    }
    case "f":
    case "%": {
      if (specifier.precision == null && !isNaN(precision = precisionFixed_default(step)))
        specifier.precision = precision - (specifier.type === "%") * 2;
      break;
    }
  }
  return format(specifier);
}

// node_modules/d3-scale/src/linear.js
function linearish(scale) {
  var domain = scale.domain;
  scale.ticks = function(count) {
    var d = domain();
    return ticks(d[0], d[d.length - 1], count == null ? 10 : count);
  };
  scale.tickFormat = function(count, specifier) {
    var d = domain();
    return tickFormat(d[0], d[d.length - 1], count == null ? 10 : count, specifier);
  };
  scale.nice = function(count) {
    if (count == null)
      count = 10;
    var d = domain();
    var i0 = 0;
    var i1 = d.length - 1;
    var start2 = d[i0];
    var stop = d[i1];
    var prestep;
    var step;
    var maxIter = 10;
    if (stop < start2) {
      step = start2, start2 = stop, stop = step;
      step = i0, i0 = i1, i1 = step;
    }
    while (maxIter-- > 0) {
      step = tickIncrement(start2, stop, count);
      if (step === prestep) {
        d[i0] = start2;
        d[i1] = stop;
        return domain(d);
      } else if (step > 0) {
        start2 = Math.floor(start2 / step) * step;
        stop = Math.ceil(stop / step) * step;
      } else if (step < 0) {
        start2 = Math.ceil(start2 * step) / step;
        stop = Math.floor(stop * step) / step;
      } else {
        break;
      }
      prestep = step;
    }
    return scale;
  };
  return scale;
}
function linear2() {
  var scale = continuous();
  scale.copy = function() {
    return copy(scale, linear2());
  };
  initRange.apply(scale, arguments);
  return linearish(scale);
}

// node_modules/d3-zoom/src/constant.js
var constant_default6 = (x3) => () => x3;

// node_modules/d3-zoom/src/event.js
function ZoomEvent(type2, {
  sourceEvent,
  target,
  transform: transform2,
  dispatch: dispatch2
}) {
  Object.defineProperties(this, {
    type: { value: type2, enumerable: true, configurable: true },
    sourceEvent: { value: sourceEvent, enumerable: true, configurable: true },
    target: { value: target, enumerable: true, configurable: true },
    transform: { value: transform2, enumerable: true, configurable: true },
    _: { value: dispatch2 }
  });
}

// node_modules/d3-zoom/src/transform.js
function Transform(k, x3, y3) {
  this.k = k;
  this.x = x3;
  this.y = y3;
}
Transform.prototype = {
  constructor: Transform,
  scale: function(k) {
    return k === 1 ? this : new Transform(this.k * k, this.x, this.y);
  },
  translate: function(x3, y3) {
    return x3 === 0 & y3 === 0 ? this : new Transform(this.k, this.x + this.k * x3, this.y + this.k * y3);
  },
  apply: function(point) {
    return [point[0] * this.k + this.x, point[1] * this.k + this.y];
  },
  applyX: function(x3) {
    return x3 * this.k + this.x;
  },
  applyY: function(y3) {
    return y3 * this.k + this.y;
  },
  invert: function(location) {
    return [(location[0] - this.x) / this.k, (location[1] - this.y) / this.k];
  },
  invertX: function(x3) {
    return (x3 - this.x) / this.k;
  },
  invertY: function(y3) {
    return (y3 - this.y) / this.k;
  },
  rescaleX: function(x3) {
    return x3.copy().domain(x3.range().map(this.invertX, this).map(x3.invert, x3));
  },
  rescaleY: function(y3) {
    return y3.copy().domain(y3.range().map(this.invertY, this).map(y3.invert, y3));
  },
  toString: function() {
    return "translate(" + this.x + "," + this.y + ") scale(" + this.k + ")";
  }
};
var identity3 = new Transform(1, 0, 0);
transform.prototype = Transform.prototype;
function transform(node) {
  while (!node.__zoom)
    if (!(node = node.parentNode))
      return identity3;
  return node.__zoom;
}

// node_modules/d3-zoom/src/noevent.js
function nopropagation3(event) {
  event.stopImmediatePropagation();
}
function noevent_default3(event) {
  event.preventDefault();
  event.stopImmediatePropagation();
}

// node_modules/d3-zoom/src/zoom.js
function defaultFilter2(event) {
  return (!event.ctrlKey || event.type === "wheel") && !event.button;
}
function defaultExtent() {
  var e = this;
  if (e instanceof SVGElement) {
    e = e.ownerSVGElement || e;
    if (e.hasAttribute("viewBox")) {
      e = e.viewBox.baseVal;
      return [[e.x, e.y], [e.x + e.width, e.y + e.height]];
    }
    return [[0, 0], [e.width.baseVal.value, e.height.baseVal.value]];
  }
  return [[0, 0], [e.clientWidth, e.clientHeight]];
}
function defaultTransform() {
  return this.__zoom || identity3;
}
function defaultWheelDelta(event) {
  return -event.deltaY * (event.deltaMode === 1 ? 0.05 : event.deltaMode ? 1 : 2e-3) * (event.ctrlKey ? 10 : 1);
}
function defaultTouchable2() {
  return navigator.maxTouchPoints || "ontouchstart" in this;
}
function defaultConstrain(transform2, extent, translateExtent) {
  var dx0 = transform2.invertX(extent[0][0]) - translateExtent[0][0], dx1 = transform2.invertX(extent[1][0]) - translateExtent[1][0], dy0 = transform2.invertY(extent[0][1]) - translateExtent[0][1], dy1 = transform2.invertY(extent[1][1]) - translateExtent[1][1];
  return transform2.translate(
    dx1 > dx0 ? (dx0 + dx1) / 2 : Math.min(0, dx0) || Math.max(0, dx1),
    dy1 > dy0 ? (dy0 + dy1) / 2 : Math.min(0, dy0) || Math.max(0, dy1)
  );
}
function zoom_default2() {
  var filter2 = defaultFilter2, extent = defaultExtent, constrain = defaultConstrain, wheelDelta = defaultWheelDelta, touchable = defaultTouchable2, scaleExtent = [0, Infinity], translateExtent = [[-Infinity, -Infinity], [Infinity, Infinity]], duration = 250, interpolate = zoom_default, listeners = dispatch_default("start", "zoom", "end"), touchstarting, touchfirst, touchending, touchDelay = 500, wheelDelay = 150, clickDistance2 = 0, tapDistance = 10;
  function zoom(selection2) {
    selection2.property("__zoom", defaultTransform).on("wheel.zoom", wheeled, { passive: false }).on("mousedown.zoom", mousedowned).on("dblclick.zoom", dblclicked).filter(touchable).on("touchstart.zoom", touchstarted).on("touchmove.zoom", touchmoved).on("touchend.zoom touchcancel.zoom", touchended).style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
  }
  zoom.transform = function(collection, transform2, point, event) {
    var selection2 = collection.selection ? collection.selection() : collection;
    selection2.property("__zoom", defaultTransform);
    if (collection !== selection2) {
      schedule(collection, transform2, point, event);
    } else {
      selection2.interrupt().each(function() {
        gesture(this, arguments).event(event).start().zoom(null, typeof transform2 === "function" ? transform2.apply(this, arguments) : transform2).end();
      });
    }
  };
  zoom.scaleBy = function(selection2, k, p, event) {
    zoom.scaleTo(selection2, function() {
      var k0 = this.__zoom.k, k1 = typeof k === "function" ? k.apply(this, arguments) : k;
      return k0 * k1;
    }, p, event);
  };
  zoom.scaleTo = function(selection2, k, p, event) {
    zoom.transform(selection2, function() {
      var e = extent.apply(this, arguments), t0 = this.__zoom, p0 = p == null ? centroid(e) : typeof p === "function" ? p.apply(this, arguments) : p, p1 = t0.invert(p0), k1 = typeof k === "function" ? k.apply(this, arguments) : k;
      return constrain(translate(scale(t0, k1), p0, p1), e, translateExtent);
    }, p, event);
  };
  zoom.translateBy = function(selection2, x3, y3, event) {
    zoom.transform(selection2, function() {
      return constrain(this.__zoom.translate(
        typeof x3 === "function" ? x3.apply(this, arguments) : x3,
        typeof y3 === "function" ? y3.apply(this, arguments) : y3
      ), extent.apply(this, arguments), translateExtent);
    }, null, event);
  };
  zoom.translateTo = function(selection2, x3, y3, p, event) {
    zoom.transform(selection2, function() {
      var e = extent.apply(this, arguments), t = this.__zoom, p0 = p == null ? centroid(e) : typeof p === "function" ? p.apply(this, arguments) : p;
      return constrain(identity3.translate(p0[0], p0[1]).scale(t.k).translate(
        typeof x3 === "function" ? -x3.apply(this, arguments) : -x3,
        typeof y3 === "function" ? -y3.apply(this, arguments) : -y3
      ), e, translateExtent);
    }, p, event);
  };
  function scale(transform2, k) {
    k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], k));
    return k === transform2.k ? transform2 : new Transform(k, transform2.x, transform2.y);
  }
  function translate(transform2, p0, p1) {
    var x3 = p0[0] - p1[0] * transform2.k, y3 = p0[1] - p1[1] * transform2.k;
    return x3 === transform2.x && y3 === transform2.y ? transform2 : new Transform(transform2.k, x3, y3);
  }
  function centroid(extent2) {
    return [(+extent2[0][0] + +extent2[1][0]) / 2, (+extent2[0][1] + +extent2[1][1]) / 2];
  }
  function schedule(transition2, transform2, point, event) {
    transition2.on("start.zoom", function() {
      gesture(this, arguments).event(event).start();
    }).on("interrupt.zoom end.zoom", function() {
      gesture(this, arguments).event(event).end();
    }).tween("zoom", function() {
      var that = this, args = arguments, g = gesture(that, args).event(event), e = extent.apply(that, args), p = point == null ? centroid(e) : typeof point === "function" ? point.apply(that, args) : point, w = Math.max(e[1][0] - e[0][0], e[1][1] - e[0][1]), a2 = that.__zoom, b = typeof transform2 === "function" ? transform2.apply(that, args) : transform2, i = interpolate(a2.invert(p).concat(w / a2.k), b.invert(p).concat(w / b.k));
      return function(t) {
        if (t === 1)
          t = b;
        else {
          var l = i(t), k = w / l[2];
          t = new Transform(k, p[0] - l[0] * k, p[1] - l[1] * k);
        }
        g.zoom(null, t);
      };
    });
  }
  function gesture(that, args, clean) {
    return !clean && that.__zooming || new Gesture(that, args);
  }
  function Gesture(that, args) {
    this.that = that;
    this.args = args;
    this.active = 0;
    this.sourceEvent = null;
    this.extent = extent.apply(that, args);
    this.taps = 0;
  }
  Gesture.prototype = {
    event: function(event) {
      if (event)
        this.sourceEvent = event;
      return this;
    },
    start: function() {
      if (++this.active === 1) {
        this.that.__zooming = this;
        this.emit("start");
      }
      return this;
    },
    zoom: function(key, transform2) {
      if (this.mouse && key !== "mouse")
        this.mouse[1] = transform2.invert(this.mouse[0]);
      if (this.touch0 && key !== "touch")
        this.touch0[1] = transform2.invert(this.touch0[0]);
      if (this.touch1 && key !== "touch")
        this.touch1[1] = transform2.invert(this.touch1[0]);
      this.that.__zoom = transform2;
      this.emit("zoom");
      return this;
    },
    end: function() {
      if (--this.active === 0) {
        delete this.that.__zooming;
        this.emit("end");
      }
      return this;
    },
    emit: function(type2) {
      var d = select_default2(this.that).datum();
      listeners.call(
        type2,
        this.that,
        new ZoomEvent(type2, {
          sourceEvent: this.sourceEvent,
          target: zoom,
          type: type2,
          transform: this.that.__zoom,
          dispatch: listeners
        }),
        d
      );
    }
  };
  function wheeled(event, ...args) {
    if (!filter2.apply(this, arguments))
      return;
    var g = gesture(this, args).event(event), t = this.__zoom, k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], t.k * Math.pow(2, wheelDelta.apply(this, arguments)))), p = pointer_default(event);
    if (g.wheel) {
      if (g.mouse[0][0] !== p[0] || g.mouse[0][1] !== p[1]) {
        g.mouse[1] = t.invert(g.mouse[0] = p);
      }
      clearTimeout(g.wheel);
    } else if (t.k === k)
      return;
    else {
      g.mouse = [p, t.invert(p)];
      interrupt_default(this);
      g.start();
    }
    noevent_default3(event);
    g.wheel = setTimeout(wheelidled, wheelDelay);
    g.zoom("mouse", constrain(translate(scale(t, k), g.mouse[0], g.mouse[1]), g.extent, translateExtent));
    function wheelidled() {
      g.wheel = null;
      g.end();
    }
  }
  function mousedowned(event, ...args) {
    if (touchending || !filter2.apply(this, arguments))
      return;
    var currentTarget = event.currentTarget, g = gesture(this, args, true).event(event), v = select_default2(event.view).on("mousemove.zoom", mousemoved, true).on("mouseup.zoom", mouseupped, true), p = pointer_default(event, currentTarget), x0 = event.clientX, y0 = event.clientY;
    nodrag_default(event.view);
    nopropagation3(event);
    g.mouse = [p, this.__zoom.invert(p)];
    interrupt_default(this);
    g.start();
    function mousemoved(event2) {
      noevent_default3(event2);
      if (!g.moved) {
        var dx = event2.clientX - x0, dy = event2.clientY - y0;
        g.moved = dx * dx + dy * dy > clickDistance2;
      }
      g.event(event2).zoom("mouse", constrain(translate(g.that.__zoom, g.mouse[0] = pointer_default(event2, currentTarget), g.mouse[1]), g.extent, translateExtent));
    }
    function mouseupped(event2) {
      v.on("mousemove.zoom mouseup.zoom", null);
      yesdrag(event2.view, g.moved);
      noevent_default3(event2);
      g.event(event2).end();
    }
  }
  function dblclicked(event, ...args) {
    if (!filter2.apply(this, arguments))
      return;
    var t0 = this.__zoom, p0 = pointer_default(event.changedTouches ? event.changedTouches[0] : event, this), p1 = t0.invert(p0), k1 = t0.k * (event.shiftKey ? 0.5 : 2), t1 = constrain(translate(scale(t0, k1), p0, p1), extent.apply(this, args), translateExtent);
    noevent_default3(event);
    if (duration > 0)
      select_default2(this).transition().duration(duration).call(schedule, t1, p0, event);
    else
      select_default2(this).call(zoom.transform, t1, p0, event);
  }
  function touchstarted(event, ...args) {
    if (!filter2.apply(this, arguments))
      return;
    var touches = event.touches, n = touches.length, g = gesture(this, args, event.changedTouches.length === n).event(event), started, i, t, p;
    nopropagation3(event);
    for (i = 0; i < n; ++i) {
      t = touches[i], p = pointer_default(t, this);
      p = [p, this.__zoom.invert(p), t.identifier];
      if (!g.touch0)
        g.touch0 = p, started = true, g.taps = 1 + !!touchstarting;
      else if (!g.touch1 && g.touch0[2] !== p[2])
        g.touch1 = p, g.taps = 0;
    }
    if (touchstarting)
      touchstarting = clearTimeout(touchstarting);
    if (started) {
      if (g.taps < 2)
        touchfirst = p[0], touchstarting = setTimeout(function() {
          touchstarting = null;
        }, touchDelay);
      interrupt_default(this);
      g.start();
    }
  }
  function touchmoved(event, ...args) {
    if (!this.__zooming)
      return;
    var g = gesture(this, args).event(event), touches = event.changedTouches, n = touches.length, i, t, p, l;
    noevent_default3(event);
    for (i = 0; i < n; ++i) {
      t = touches[i], p = pointer_default(t, this);
      if (g.touch0 && g.touch0[2] === t.identifier)
        g.touch0[0] = p;
      else if (g.touch1 && g.touch1[2] === t.identifier)
        g.touch1[0] = p;
    }
    t = g.that.__zoom;
    if (g.touch1) {
      var p0 = g.touch0[0], l0 = g.touch0[1], p1 = g.touch1[0], l1 = g.touch1[1], dp = (dp = p1[0] - p0[0]) * dp + (dp = p1[1] - p0[1]) * dp, dl = (dl = l1[0] - l0[0]) * dl + (dl = l1[1] - l0[1]) * dl;
      t = scale(t, Math.sqrt(dp / dl));
      p = [(p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2];
      l = [(l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2];
    } else if (g.touch0)
      p = g.touch0[0], l = g.touch0[1];
    else
      return;
    g.zoom("touch", constrain(translate(t, p, l), g.extent, translateExtent));
  }
  function touchended(event, ...args) {
    if (!this.__zooming)
      return;
    var g = gesture(this, args).event(event), touches = event.changedTouches, n = touches.length, i, t;
    nopropagation3(event);
    if (touchending)
      clearTimeout(touchending);
    touchending = setTimeout(function() {
      touchending = null;
    }, touchDelay);
    for (i = 0; i < n; ++i) {
      t = touches[i];
      if (g.touch0 && g.touch0[2] === t.identifier)
        delete g.touch0;
      else if (g.touch1 && g.touch1[2] === t.identifier)
        delete g.touch1;
    }
    if (g.touch1 && !g.touch0)
      g.touch0 = g.touch1, delete g.touch1;
    if (g.touch0)
      g.touch0[1] = this.__zoom.invert(g.touch0[0]);
    else {
      g.end();
      if (g.taps === 2) {
        t = pointer_default(t, this);
        if (Math.hypot(touchfirst[0] - t[0], touchfirst[1] - t[1]) < tapDistance) {
          var p = select_default2(this).on("dblclick.zoom");
          if (p)
            p.apply(this, arguments);
        }
      }
    }
  }
  zoom.wheelDelta = function(_) {
    return arguments.length ? (wheelDelta = typeof _ === "function" ? _ : constant_default6(+_), zoom) : wheelDelta;
  };
  zoom.filter = function(_) {
    return arguments.length ? (filter2 = typeof _ === "function" ? _ : constant_default6(!!_), zoom) : filter2;
  };
  zoom.touchable = function(_) {
    return arguments.length ? (touchable = typeof _ === "function" ? _ : constant_default6(!!_), zoom) : touchable;
  };
  zoom.extent = function(_) {
    return arguments.length ? (extent = typeof _ === "function" ? _ : constant_default6([[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]]), zoom) : extent;
  };
  zoom.scaleExtent = function(_) {
    return arguments.length ? (scaleExtent[0] = +_[0], scaleExtent[1] = +_[1], zoom) : [scaleExtent[0], scaleExtent[1]];
  };
  zoom.translateExtent = function(_) {
    return arguments.length ? (translateExtent[0][0] = +_[0][0], translateExtent[1][0] = +_[1][0], translateExtent[0][1] = +_[0][1], translateExtent[1][1] = +_[1][1], zoom) : [[translateExtent[0][0], translateExtent[0][1]], [translateExtent[1][0], translateExtent[1][1]]];
  };
  zoom.constrain = function(_) {
    return arguments.length ? (constrain = _, zoom) : constrain;
  };
  zoom.duration = function(_) {
    return arguments.length ? (duration = +_, zoom) : duration;
  };
  zoom.interpolate = function(_) {
    return arguments.length ? (interpolate = _, zoom) : interpolate;
  };
  zoom.on = function() {
    var value = listeners.on.apply(listeners, arguments);
    return value === listeners ? zoom : value;
  };
  zoom.clickDistance = function(_) {
    return arguments.length ? (clickDistance2 = (_ = +_) * _, zoom) : Math.sqrt(clickDistance2);
  };
  zoom.tapDistance = function(_) {
    return arguments.length ? (tapDistance = +_, zoom) : tapDistance;
  };
  return zoom;
}

// apiClient.ts
var import_wikipedia = __toESM(require_dist());
var isMobile = false;
if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(
  navigator.userAgent
)) {
  isMobile = true;
}
function __minimizeUrl(url) {
  return url == null ? void 0 : url.replace(/\n\s*/g, "");
}
var restApiLang = "en";
function RestApiBase() {
  return `https://${restApiLang}.wikipedia.org/api/rest_v1`;
}
var lang = "en";
var getUrlSuggest = (query) => __minimizeUrl(`
  https://${lang}.wikipedia.org/w/api.php
  ?action=opensearch
  &format=json
  &formatversion=2
  &search=${query}
  &namespace=0
  &limit=10
  &origin=*`);
async function suggestCustom(query) {
  const apiEndpoint = getUrlSuggest(query);
  console.log("api endpoint:", apiEndpoint);
  console.log("encoded url:", encodeURI(query));
  const fetchSearch = await (await fetch(apiEndpoint)).json();
  console.log("fetchSearch:", fetchSearch);
  const [, titles, , links2] = fetchSearch;
  const res = [];
  for (let i = 0; i < titles.length; i++) {
    const chunks = links2[i].split("/");
    res.push({ title: titles[i], normalized: chunks[chunks.length - 1] });
  }
  return res;
}
async function page(query) {
  const resPage = await import_wikipedia.default.page(query, {
    autoSuggest: true,
    redirect: false
  });
  return resPage;
}
async function getSummary(query) {
  const endpoint = RestApiBase() + "/page/summary/" + query;
  const summary2 = await (await fetch(endpoint)).json();
  return summary2;
}
async function getResponse(query) {
  const endpoint = RestApiBase() + "/page/related/" + query;
  const related2 = await (await fetch(endpoint)).json();
  return related2.pages;
}
function getItem(item) {
  const {
    description,
    pageid,
    extract_html,
    originalimage,
    thumbnail,
    content_urls
  } = item;
  const page_url = isMobile ? content_urls.mobile.page : content_urls.desktop.page;
  const data = {
    description,
    pageid,
    extract_html,
    originalimage,
    thumbnail,
    page_url
  };
  return { id: item.titles.normalized, data };
}
function setLang(language) {
  restApiLang = language;
}
function getLang() {
  return restApiLang;
}
var apiClient = {
  // suggest,
  page,
  suggestCustom,
  getSummary,
  getResponse,
  getItem,
  getLang,
  // languages,
  // loadLangs,
  setLang
};

// view.ts
var import_obsidian = require("obsidian");
var SearchView = class extends import_obsidian.ItemView {
  constructor(plugin, leaf, url, title) {
    super(leaf);
    this.plugin = plugin;
    this.url = url;
    this.title = title;
  }
  async onOpen() {
    this.frame = document.createElement("iframe");
    this.frame.addClass(`soi-site`);
    this.frame.setAttr("style", "height: 100%; width:100%");
    this.frame.setAttr("src", this.url);
    this.frame.setAttr("tabindex", "0");
    this.containerEl.children[1].appendChild(this.frame);
  }
  getDisplayText() {
    return `Wiki: ${this.title}`;
  }
  getViewType() {
    return "Search on Internet";
  }
};

// lang.ts
var LanguageDetect = require_languagedetect();
var lngDetector = new LanguageDetect();
function detectLanguage(text) {
  const result2 = lngDetector.detect(text, 1);
  const languageMap = {
    "portuguese": "pt",
    "english": "en"
  };
  if (result2.length > 0) {
    const [language] = result2[0];
    return languageMap[language] || "en";
  }
  return null;
}
var lang2 = {
  detectLanguage
};

// main.ts
var DEFAULT_NETWORK_SETTINGS = {
  relevanceScoreThreshold: 0.5,
  nodeSize: 4,
  linkThickness: 0.3,
  repelForce: 400,
  linkForce: 0.4,
  linkDistance: 70,
  centerForce: 0.1,
  textFadeThreshold: 1.1,
  minLinkThickness: 0.3,
  maxLinkThickness: 0.6,
  maxLabelCharacters: 18,
  linkLabelSize: 7,
  nodeLabelSize: 6,
  connectionType: "block",
  noteFillColor: "#7c8594",
  blockFillColor: "#926ec9",
  wikiFillColor: "#145da0",
  language: "en"
};
var ScGraphItemView = class extends import_obsidian2.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    this.connectionType = "block";
    this.relevanceScoreThreshold = 0.5;
    this.nodeSize = 4;
    this.linkThickness = 0.3;
    this.repelForce = 400;
    this.linkForce = 0.4;
    this.linkDistance = 70;
    this.centerForce = 0.3;
    this.textFadeThreshold = 1.1;
    this.minScore = 1;
    this.maxScore = 0;
    this.minNodeSize = 3;
    this.maxNodeSize = 6;
    this.minLinkThickness = 0.3;
    this.maxLinkThickness = 0.6;
    this.isCtrlPressed = false;
    this.isAltPressed = false;
    this.isDragging = false;
    this.isChangingConnectionType = true;
    this.maxLabelCharacters = 18;
    this.linkLabelSize = 7;
    this.nodeLabelSize = 6;
    this.blockFillColor = "#926ec9";
    this.noteFillColor = "#7c8594";
    this.wikiFillColor = "#145da0";
    this.language = "en";
    this.startX = 0;
    this.startY = 0;
    this.nodes = [];
    this.links = [];
    this.connections = [];
    this.centerHighlighted = false;
    this.dragging = false;
    this.highlightedNodeId = "-1";
    this.currentNoteChanging = false;
    this.isFiltering = false;
    this.settingsMade = false;
    this.currentNoteKey = "";
    this.isHovering = false;
    this.plugin = plugin;
    this.relevanceScoreThreshold = this.plugin.settings.relevanceScoreThreshold;
    this.nodeSize = this.plugin.settings.nodeSize;
    this.linkThickness = this.plugin.settings.linkThickness;
    this.repelForce = this.plugin.settings.repelForce;
    this.linkForce = this.plugin.settings.linkForce;
    this.linkDistance = this.plugin.settings.linkDistance;
    this.centerForce = this.plugin.settings.centerForce;
    this.textFadeThreshold = this.plugin.settings.textFadeThreshold;
    this.minLinkThickness = this.plugin.settings.minLinkThickness;
    this.maxLinkThickness = this.plugin.settings.maxLinkThickness;
    this.maxLabelCharacters = this.plugin.settings.maxLabelCharacters;
    this.linkLabelSize = this.plugin.settings.linkLabelSize;
    this.nodeLabelSize = this.plugin.settings.nodeLabelSize;
    this.connectionType = this.plugin.settings.connectionType;
    this.noteFillColor = this.plugin.settings.noteFillColor;
    this.blockFillColor = this.plugin.settings.blockFillColor;
    this.wikiFillColor = this.plugin.settings.wikiFillColor;
    this.language = this.plugin.settings.language;
  }
  getViewType() {
    return "smart-connections-visualizer";
  }
  getDisplayText() {
    return "Smart connections visualizer";
  }
  getIcon() {
    return "git-fork";
  }
  updateNodeAppearance() {
    this.nodeSelection.transition().duration(500).attr("fill", (d) => d.fill).attr("stroke", (d) => d.selected ? "blanchedalmond" : d.highlighted ? "#d46ebe" : "transparent").attr("stroke-width", (d) => d.selected ? 1.5 : d.highlighted ? 0.3 : 0).attr("opacity", (d) => this.getNodeOpacity(d));
  }
  // getNodeFill(d: any) {
  // 	if (d.id === this.centralNode.id) return '#7c8594';
  // 	if (d.highlighted && !d.selected) return '#d46ebe';
  // 	return d.group === 'note' ? '#7c8594' : '#926ec9';
  // }
  getNodeOpacity(d) {
    if (d.id === this.centralNode.id)
      return 1;
    if (d.selected)
      return 1;
    if (d.highlighted)
      return 0.8;
    return this.isHovering ? 0.1 : 1;
  }
  toggleNodeSelection(nodeId) {
    const node = this.nodeSelection.data().find((d) => d.id === nodeId);
    if (node) {
      node.selected = !node.selected;
      if (!node.selected) {
        node.highlighted = false;
      }
      this.updateNodeAppearance();
    }
  }
  clearSelections() {
    this.nodeSelection.each((d) => {
      d.selected = false;
      d.highlighted = false;
    });
    this.updateNodeAppearance();
  }
  highlightNode(node) {
    if (node.id === this.centralNode.id) {
      this.centerHighlighted = true;
    }
    this.highlightedNodeId = node.id;
    this.nodeSelection.each((d) => {
      if (d.id !== this.centralNode.id) {
        d.highlighted = d.id === node.id || this.validatedLinks.some((link) => link.source.id === node.id && link.target.id === d.id || link.target.id === node.id && link.source.id === d.id);
      }
    });
    this.updateNodeAppearance();
    this.updateLinkAppearance(node);
    this.updateLabelAppearance(node);
    this.updateLinkLabelAppearance(node);
  }
  updateHighlight(d, node) {
    if (d.id !== this.centralNode.id) {
      d.highlighted = d.id === node.id || this.validatedLinks.some((link) => link.source.id === node.id && link.target.id === d.id || link.target.id === node.id && link.source.id === d.id);
    }
  }
  updateLinkAppearance(node) {
    this.linkSelection.transition().duration(500).attr("opacity", (d) => d.source.id === node.id || d.target.id === node.id ? 1 : 0.1);
  }
  updateLabelAppearance(node) {
    this.labelSelection.transition().duration(500).attr("opacity", (d) => this.getLabelOpacity(d, node)).text((d) => d.id === this.highlightedNodeId ? this.formatLabel(d.name, false) : this.formatLabel(d.name, true));
  }
  getLabelOpacity(d, node) {
    if (!node) {
      return 1;
    }
    return d.id === node.id || this.validatedLinks.some((link) => link.source.id === node.id && link.target.id === d.id) || d.id == this.centralNode.id ? 1 : 0.1;
  }
  updateLinkLabelAppearance(node) {
    this.linkLabelSelection.transition().duration(500).attr("opacity", (d) => {
      return d.source.id === node.id || d.target.id === node.id ? 1 : 0;
    });
  }
  unhighlightNode(node) {
    this.highlightedNodeId = "-1";
    this.nodeSelection.each((d) => {
      if (d.id !== this.centralNode.id)
        d.highlighted = false;
    });
    this.updateNodeAppearance();
    this.resetLinkAppearance();
    this.resetLabelAppearance();
    this.resetLinkLabelAppearance();
    this.updateLabelAppearance(null);
  }
  resetLinkAppearance() {
    this.linkSelection.transition().duration(500).attr("opacity", 1);
  }
  resetLabelAppearance() {
    this.labelSelection.transition().duration(500).attr("opacity", 1).text((d) => this.formatLabel(d.name, true));
  }
  resetLinkLabelAppearance() {
    this.linkLabelSelection.transition().duration(500).attr("opacity", 0);
  }
  formatLabel(path, truncate = true) {
    let label = this.extractLabel(path);
    return truncate ? this.truncateLabel(label) : label;
  }
  extractLabel(path) {
    let label = path;
    if (path && path.includes("#")) {
      const parts = path.split("#");
      let lastPart = parts[parts.length - 1];
      if (lastPart === "" || /^\{\d+\}$/.test(lastPart)) {
        lastPart = parts[parts.length - 2] + "#" + lastPart;
      }
      if (lastPart.includes("/")) {
        lastPart = lastPart.split("/").pop() || lastPart;
      }
      label = lastPart;
    } else if (path) {
      label = path.split("/").pop() || label;
    } else {
      return "";
    }
    label = label.replace(/[\[\]]/g, "").replace(/\.[^/#]+#(?=\{\d+\}$)/, "").replace(/\.[^/.]+$/, "");
    return label;
  }
  truncateLabel(label) {
    return label.length > this.maxLabelCharacters ? label.slice(0, this.maxLabelCharacters) + "..." : label;
  }
  get env() {
    var _a, _b;
    return (_b = (_a = window.SmartSearch) == null ? void 0 : _a.main) == null ? void 0 : _b.env;
  }
  get smartNotes() {
    var _a, _b, _c, _d;
    return (_d = (_c = (_b = (_a = window.SmartSearch) == null ? void 0 : _a.main) == null ? void 0 : _b.env) == null ? void 0 : _c.smart_sources) == null ? void 0 : _d.items;
  }
  async onOpen() {
    this.contentEl.createEl("h2", { text: "Smart Visualizer" });
    this.contentEl.createEl("p", { text: "Waiting for Smart Connections to load..." });
    setTimeout(() => {
      this.render();
    }, 500);
  }
  async render() {
    var _a;
    while (!((_a = this.env) == null ? void 0 : _a.entities_loaded)) {
      await new Promise((resolve) => setTimeout(resolve, 2e3));
    }
    this.contentEl.empty();
    this.initializeVariables();
    if (Object.keys(this.smartNotes).length === 0) {
      return;
    }
    this.setupSettingsMenu();
    this.setupSVG();
    this.addEventListeners();
    this.watchForNoteChanges();
    const currentNodeChange = this.app.workspace.getActiveFile();
    if (currentNodeChange && !this.currentNoteChanging) {
      this.currentNoteKey = currentNodeChange.path;
      this.currentNoteChanging = true;
      this.render();
      return;
    }
    await this.updateVisualization();
  }
  async waitForSmartNotes() {
    var _a;
    const maxRetries = 10;
    const delay = 2e3;
    for (let attempt = 0; attempt < maxRetries; attempt++) {
      if ((_a = this.env) == null ? void 0 : _a.entities_loaded) {
        return;
      }
      await new Promise((resolve) => setTimeout(resolve, delay));
    }
    console.error("Smart notes did not load in time");
    this.contentEl.createEl("p", { text: "Failed to load Smart Connections." });
  }
  initializeVariables() {
    this.minScore = 1;
    this.maxScore = 0;
  }
  setupSVG() {
    const width = this.contentEl.clientWidth;
    const height = this.contentEl.clientHeight;
    const svg = select_default2(this.contentEl).append("svg").attr("width", "100%").attr("height", "98%").attr("viewBox", `${width / 4} ${height / 4} ${width / 2} ${height / 2}`).attr("preserveAspectRatio", "xMidYMid meet").call(zoom_default2().scaleExtent([0.1, 10]).on("zoom", (event) => {
      svgGroup.attr("transform", event.transform);
      this.updateLabelOpacity(event.transform.k);
    }));
    svg.append("defs").append("marker").attr("id", "arrowhead").attr("orient", "auto").attr("markerWidth", 10).attr("markerHeight", 10).attr("refX", 5).attr("refY", 2.5).append("polygon").attr("points", "0,0 10,5 0,10").attr("fill", "#999");
    const svgGroup = svg.append("g");
    svgGroup.append("g").attr("class", "smart-connections-visualizer-links");
    svgGroup.append("g").attr("class", "smart-connections-visualizer-node-labels");
    svgGroup.append("g").attr("class", "smart-connections-visualizer-link-labels");
    svgGroup.append("g").attr("class", "smart-connections-visualizer-nodes");
    this.svgGroup = svgGroup;
    this.svg = svg;
  }
  getSVGDimensions() {
    const width = this.contentEl.clientWidth || this.contentEl.getBoundingClientRect().width;
    const height = this.contentEl.clientHeight || this.contentEl.getBoundingClientRect().height;
    return { width, height };
  }
  createSVG(width, height) {
    return select_default2(this.contentEl).append("svg").attr("width", "100%").attr("height", "98%").attr("viewBox", `0 0 ${width} ${height}`).attr("preserveAspectRatio", "xMidYMid meet").style("background", "#2d3039").call(zoom_default2().scaleExtent([0.1, 10]).on("zoom", this.onZoom.bind(this)));
  }
  createSVGGroup(svg) {
    return svg.append("g");
  }
  onZoom(event) {
    select_default2("g").attr("transform", event.transform);
    this.updateLabelOpacity(event.transform.k);
  }
  initializeSimulation(width, height) {
    this.simulation = simulation_default().force("center", center_default(width / 2, height / 2).strength(this.centerForce)).force("charge", manyBody_default().strength(-this.repelForce)).force("link", link_default().id((d) => d.id).distance((d) => this.linkDistanceScale(d.score)).strength(this.linkForce)).force("collide", collide_default().radius(this.nodeSize + 3).strength(0.7)).on("tick", this.simulationTickHandler.bind(this));
    this.simulation.force("labels", this.avoidLabelCollisions.bind(this));
  }
  renderLegend() {
    if (this.validatedLinks.length === 0) {
      return;
    }
    const types = ["block", "note"];
    const counts = types.map((type2) => this.nodes.filter((node) => node.group === type2 && node.id !== this.centralNode.id).length);
    let colors = { "block": DEFAULT_NETWORK_SETTINGS.blockFillColor, "note": DEFAULT_NETWORK_SETTINGS.noteFillColor, "wiki": DEFAULT_NETWORK_SETTINGS.wikiFillColor };
    for (let node of this.nodes) {
      if (colors[node.group]) {
        colors[node.group] = node.fill;
      }
    }
    const tableContainer = this.contentEl.createEl("div", { cls: "smart-connections-visualizer-legend-container" });
    const header = tableContainer.createEl("div", { cls: "smart-connections-visualizer-legend-header" });
    ["Connection Type", "Count", "Color"].forEach((headerTitle) => {
      switch (headerTitle) {
        case "Connection Type":
          header.createEl("div", { text: headerTitle, cls: "smart-connections-visualizer-variable-col" });
          break;
        case "Count":
          header.createEl("div", { text: headerTitle, cls: "smart-connections-visualizer-count-col" });
          break;
        case "Color":
          header.createEl("div", { text: headerTitle, cls: "smart-connections-visualizer-color-col" });
          break;
        default:
          header.createEl("div", { text: headerTitle, cls: "smart-connections-visualizer-variable-col" });
          break;
      }
    });
    types.forEach((type2, index2) => {
      if (counts[index2] > 0) {
        const row = tableContainer.createEl("div", { cls: "smart-connections-visualizer-legend-row" });
        row.createEl("div", { text: this.capitalizeFirstLetter(type2), cls: "smart-connections-visualizer-variable-col" });
        row.createEl("div", { text: `${counts[index2]}`, cls: "smart-connections-visualizer-count-col" });
        const colorCell = row.createEl("div", { cls: "smart-connections-visualizer-color-col" });
        const colorPicker = colorCell.createEl("input", { type: "color", value: colors[type2], cls: "smart-connections-visualizer-legend-color-picker" });
        colorPicker.addEventListener("change", (e) => this.updateNodeColors(type2, e.target.value));
      }
    });
  }
  capitalizeFirstLetter(str) {
    if (!str)
      return str;
    console.log("string: ", str);
    return str.charAt(0).toUpperCase() + str.slice(1);
  }
  updateNodeColors(type2, color2) {
    if (type2 === "note" && color2 !== this.noteFillColor) {
      this.noteFillColor = color2;
      this.plugin.settings.noteFillColor = color2;
      this.plugin.saveSettings();
    }
    if (type2 === "block" && color2 !== this.blockFillColor) {
      this.blockFillColor = color2;
      this.plugin.settings.blockFillColor = color2;
      this.plugin.saveSettings();
    }
    if (type2 === "wiki" && color2 !== this.wikiFillColor) {
      this.wikiFillColor = color2;
      this.plugin.settings.wikiFillColor = color2;
      this.plugin.saveSettings();
    }
    this.nodes.forEach((node) => {
      if (node.group === type2) {
        node.fill = color2;
      }
    });
    this.updateNodeFill();
  }
  updateNodeFill() {
    this.nodeSelection.attr("fill", (d) => d.fill);
  }
  // Ensure node labels dont collide with any elements
  avoidLabelCollisions() {
    const padding = 5;
    return (alpha) => {
      const quadtree2 = quadtree().x((d) => d.x).y((d) => d.y).addAll(this.labelSelection.data());
      this.labelSelection.each((d) => {
        const radius = d.radius + padding;
        const nx1 = d.x - radius, nx2 = d.x + radius, ny1 = d.y - radius, ny2 = d.y + radius;
        quadtree2.visit((quad, x1, y1, x22, y22) => {
          if ("data" in quad && quad.data && quad.data !== d) {
            let x3 = d.x - quad.data.x, y3 = d.y - quad.data.y, l = Math.sqrt(x3 * x3 + y3 * y3), r = radius + quad.data.radius;
            if (l < r) {
              l = (l - r) / l * alpha;
              d.x -= x3 *= l;
              d.y -= y3 *= l;
              quad.data.x += x3;
              quad.data.y += y3;
            }
          }
          return x1 > nx2 || x22 < nx1 || y1 > ny2 || y22 < ny1;
        });
      });
    };
  }
  addEventListeners() {
    this.setupSVGEventListeners();
    this.setupKeyboardEventListeners();
  }
  setupSVGEventListeners() {
    select_default2("svg").on("mousedown", this.onMouseDown.bind(this)).on("mousemove", this.onMouseMove.bind(this)).on("mouseup", this.onMouseUp.bind(this)).on("click", this.onSVGClick.bind(this));
  }
  // TODO: Add back in when ready for multiselect
  onMouseDown(event) {
  }
  onMouseMove(event) {
  }
  onMouseUp() {
  }
  onSVGClick(event) {
    if (!event.defaultPrevented && !event.ctrlKey)
      this.clearSelections();
  }
  setupKeyboardEventListeners() {
    document.addEventListener("keydown", this.onKeyDown.bind(this));
    document.addEventListener("keyup", this.onKeyUp.bind(this));
  }
  // TODO:: Add back when ready for multiselect
  onKeyDown(event) {
  }
  onKeyUp(event) {
  }
  setupSettingsMenu() {
    const existingIcon = this.contentEl.querySelector(".smart-connections-visualizer-settings-icon");
    if (existingIcon) {
      existingIcon.remove();
    }
    const existingDropdownMenu = this.contentEl.querySelector(".sc-visualizer-dropdown-menu");
    if (existingDropdownMenu) {
      existingDropdownMenu.remove();
    }
    this.createSettingsIcon();
    this.createDropdownMenu();
    this.setupAccordionHeaders();
    this.setupSettingsEventListeners();
  }
  createDropdownMenu() {
    const dropdownMenu = this.contentEl.createEl("div", { cls: "sc-visualizer-dropdown-menu" });
    this.buildDropdownMenuContent(dropdownMenu);
  }
  buildDropdownMenuContent(dropdownMenu) {
    const menuHeader = dropdownMenu.createEl("div", { cls: "smart-connections-visualizer-menu-header" });
    const refreshIcon = this.createRefreshIcon();
    refreshIcon.classList.add("smart-connections-visualizer-icon");
    refreshIcon.setAttribute("id", "smart-connections-visualizer-refresh-icon");
    menuHeader.appendChild(refreshIcon);
    const xIcon = this.createNewXIcon();
    xIcon.classList.add("smart-connections-visualizer-icon");
    xIcon.setAttribute("id", "smart-connections-visualizer-close-icon");
    menuHeader.appendChild(xIcon);
    this.addAccordionItem(dropdownMenu, "Filters", this.getFiltersContent.bind(this));
    this.addAccordionItem(dropdownMenu, "Display", this.getDisplayContent.bind(this));
    this.addAccordionItem(dropdownMenu, "Forces", this.getForcesContent.bind(this));
  }
  addAccordionItem(parent, title, buildContent) {
    const accordionItem = parent.createEl("div", { cls: "smart-connections-visualizer-accordion-item" });
    const header = accordionItem.createEl("div", { cls: "smart-connections-visualizer-accordion-header" });
    const arrowIcon = header.createEl("span", { cls: "smart-connections-visualizer-arrow-icon" });
    arrowIcon.appendChild(this.createRightArrow());
    header.createEl("span", { text: title });
    const accordionContent = accordionItem.createEl("div", { cls: "smart-connections-visualizer-accordion-content" });
    buildContent(accordionContent);
  }
  getFiltersContent(parent) {
    const sliderContainerLang = parent.createEl("div", { cls: "smart-connections-visualizer-slider-container" });
    sliderContainerLang.createEl("h2", { text: "Language Settings" });
    new import_obsidian2.Setting(sliderContainerLang).setName("Select Language").setDesc("Choose your preferred language").addDropdown((dropDown) => {
      dropDown.addOption("en", "English");
      dropDown.addOption("pt", "Portuguese");
      dropDown.setValue(this.plugin.settings.language);
      dropDown.onChange(async (value) => {
        this.plugin.settings.language = value;
        apiClient.setLang(value);
        this.updateVisualization();
        await this.plugin.saveSettings();
      });
    });
    const sliderContainer1 = parent.createEl("div", { cls: "smart-connections-visualizer-slider-container" });
    sliderContainer1.createEl("label", {
      text: `Min relevance: ${(this.relevanceScoreThreshold * 100).toFixed(0)}%`,
      attr: { id: "smart-connections-visualizer-scoreThresholdLabel", for: "smart-connections-visualizer-scoreThreshold" }
    });
    const relevanceSlider = sliderContainer1.createEl("input", {
      attr: {
        type: "range",
        id: "smart-connections-visualizer-scoreThreshold",
        class: "smart-connections-visualizer-slider",
        name: "scoreThreshold",
        min: "0",
        max: "0.99",
        step: "0.01"
      }
    });
    relevanceSlider.value = this.relevanceScoreThreshold.toString();
    parent.createEl("label", { text: "Connection type:", cls: "smart-connections-visualizer-settings-item-content-label" });
    const radioContainer = parent.createEl("div", { cls: "smart-connections-visualizer-radio-container" });
    const radioBlockLabel = radioContainer.createEl("label");
    const blockRadio = radioBlockLabel.createEl("input", {
      attr: {
        type: "radio",
        name: "connectionType",
        value: "block"
      }
    });
    blockRadio.checked = this.connectionType === "block";
    radioBlockLabel.appendText(" Block");
    const radioNoteLabel = radioContainer.createEl("label");
    const noteRadio = radioNoteLabel.createEl("input", {
      attr: {
        type: "radio",
        name: "connectionType",
        value: "note"
      }
    });
    noteRadio.checked = this.connectionType === "note";
    radioNoteLabel.appendText(" Note");
    const radioBothLabel = radioContainer.createEl("label");
    const bothRadio = radioBothLabel.createEl("input", {
      attr: {
        type: "radio",
        name: "connectionType",
        value: "both"
      }
    });
    bothRadio.checked = this.connectionType === "both";
    radioBothLabel.appendText(" Both");
  }
  getDisplayContent(parent) {
    const displaySettings = [
      { id: "smart-connections-visualizer-nodeSize", label: "Node size", value: this.nodeSize, min: 1, max: 15, step: 0.01 },
      { id: "smart-connections-visualizer-maxLabelCharacters", label: "Max label characters", value: this.maxLabelCharacters, min: 1, max: 50, step: 1 },
      { id: "smart-connections-visualizer-linkLabelSize", label: "Link label size", value: this.linkLabelSize, min: 1, max: 15, step: 0.01 },
      { id: "smart-connections-visualizer-nodeLabelSize", label: "Node label size", value: this.nodeLabelSize, min: 1, max: 26, step: 1 },
      { id: "smart-connections-visualizer-minLinkThickness", label: "Min link thickness", value: this.minLinkThickness, min: 0.1, max: 10, step: 0.01 },
      { id: "smart-connections-visualizer-maxLinkThickness", label: "Max link thickness", value: this.maxLinkThickness, min: 0.1, max: 10, step: 0.01 },
      { id: "smart-connections-visualizer-fadeThreshold", label: "Text fade threshold", value: this.textFadeThreshold, min: 0.1, max: 10, step: 0.01 }
    ];
    displaySettings.forEach((setting) => {
      const sliderContainer = parent.createEl("div", { cls: "smart-connections-visualizer-slider-container" });
      sliderContainer.createEl("label", { text: `${setting.label}: ${setting.value}`, attr: { id: `${setting.id}Label`, for: setting.id } });
      sliderContainer.createEl("input", { attr: { type: "range", id: setting.id, class: "smart-connections-visualizer-slider", name: setting.id, min: `${setting.min}`, max: `${setting.max}`, value: `${setting.value}`, step: `${setting.step}` } });
    });
  }
  getForcesContent(parent) {
    const forcesSettings = [
      { id: "smart-connections-visualizer-repelForce", label: "Repel force", value: this.repelForce, min: 0, max: 1500, step: 1 },
      { id: "smart-connections-visualizer-linkForce", label: "Link force", value: this.linkForce, min: 0, max: 1, step: 0.01 },
      { id: "smart-connections-visualizer-linkDistance", label: "Link distance", value: this.linkDistance, min: 1, max: 200, step: 1 }
    ];
    forcesSettings.forEach((setting) => {
      const sliderContainer = parent.createEl("div", { cls: "smart-connections-visualizer-slider-container" });
      sliderContainer.createEl("label", { text: `${setting.label}: ${setting.value}`, attr: { id: `${setting.id}Label`, for: setting.id } });
      sliderContainer.createEl("input", { attr: { type: "range", id: setting.id, class: "smart-connections-visualizer-slider", name: setting.id, min: `${setting.min}`, max: `${setting.max}`, value: `${setting.value}`, step: `${setting.step}` } });
    });
  }
  toggleDropdownMenu() {
    const dropdownMenu = document.querySelector(".sc-visualizer-dropdown-menu");
    if (dropdownMenu) {
      dropdownMenu.classList.toggle("visible");
    } else {
      console.error("Dropdown menu element not found");
    }
  }
  setupAccordionHeaders() {
    const accordionHeaders = document.querySelectorAll(".smart-connections-visualizer-accordion-header");
    accordionHeaders.forEach((header) => header.addEventListener("click", this.toggleAccordionContent.bind(this)));
  }
  toggleAccordionContent(event) {
    const content2 = event.currentTarget.nextElementSibling;
    const arrowIcon = event.currentTarget.querySelector(".smart-connections-visualizer-arrow-icon");
    if (content2 && arrowIcon) {
      content2.classList.toggle("show");
      arrowIcon.innerHTML = "";
      arrowIcon.appendChild(content2.classList.contains("show") ? this.createDropdownArrow() : this.createRightArrow());
    }
  }
  createDropdownArrow() {
    const svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
    svg.setAttribute("class", "smart-connections-visualizer-dropdown-indicator");
    svg.setAttribute("viewBox", "0 0 16 16");
    svg.setAttribute("fill", "currentColor");
    const path = document.createElementNS("http://www.w3.org/2000/svg", "path");
    path.setAttribute("fill-rule", "evenodd");
    path.setAttribute("d", "M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z");
    svg.appendChild(path);
    return svg;
  }
  createRightArrow() {
    const svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
    svg.setAttribute("class", "smart-connections-visualizer-dropdown-indicator");
    svg.setAttribute("viewBox", "0 0 16 16");
    svg.setAttribute("fill", "currentColor");
    const path = document.createElementNS("http://www.w3.org/2000/svg", "path");
    path.setAttribute("fill-rule", "evenodd");
    path.setAttribute("d", "M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708z");
    svg.appendChild(path);
    return svg;
  }
  createSettingsIcon() {
    const settingsIcon = this.contentEl.createEl("div", {
      cls: ["smart-connections-visualizer-settings-icon"],
      attr: { "aria-label": "Open graph settings" }
    });
    const svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
    svg.setAttribute("width", "24");
    svg.setAttribute("height", "24");
    svg.setAttribute("viewBox", "0 0 24 24");
    svg.setAttribute("fill", "none");
    svg.setAttribute("stroke", "currentColor");
    svg.setAttribute("stroke-width", "2");
    svg.setAttribute("stroke-linecap", "round");
    svg.setAttribute("stroke-linejoin", "round");
    svg.setAttribute("class", "smart-connections-visualizer-svg-icon smart-connections-visualizer-lucide-settings");
    const path = document.createElementNS("http://www.w3.org/2000/svg", "path");
    path.setAttribute("d", "M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 1 1.72v.51a2 2 0 0 1-1 1.74l-.15.09a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.39a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1-1-1.74v-.5a2 2 0 0 1 1-1.74l.15-.09a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z");
    svg.appendChild(path);
    const circle = document.createElementNS("http://www.w3.org/2000/svg", "circle");
    circle.setAttribute("cx", "12");
    circle.setAttribute("cy", "12");
    circle.setAttribute("r", "3");
    svg.appendChild(circle);
    settingsIcon.appendChild(svg);
    settingsIcon.addEventListener("click", this.toggleDropdownMenu);
  }
  createRefreshIcon() {
    const refreshIcon = this.contentEl.createEl("div", { cls: "smart-connections-visualizer-refresh-icon" });
    const svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
    svg.setAttribute("width", "24");
    svg.setAttribute("height", "24");
    svg.setAttribute("viewBox", "0 0 24 24");
    svg.setAttribute("fill", "none");
    svg.setAttribute("stroke", "currentColor");
    svg.setAttribute("stroke-width", "2");
    svg.setAttribute("stroke-linecap", "round");
    svg.setAttribute("stroke-linejoin", "round");
    svg.setAttribute("class", "smart-connections-visualizer-svg-icon smart-connections-visualizer-lucide-rotate-ccw");
    const path1 = document.createElementNS("http://www.w3.org/2000/svg", "path");
    path1.setAttribute("d", "M3 12a9 9 0 1 0 9-9 9.75 9.75 0 0 0-6.74 2.74L3 8");
    svg.appendChild(path1);
    const path2 = document.createElementNS("http://www.w3.org/2000/svg", "path");
    path2.setAttribute("d", "M3 3v5h5");
    svg.appendChild(path2);
    refreshIcon.appendChild(svg);
    return refreshIcon;
  }
  createNewXIcon() {
    const xIcon = this.contentEl.createEl("div", { cls: "smart-connections-visualizer-x-icon" });
    const svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
    svg.setAttribute("width", "24");
    svg.setAttribute("height", "24");
    svg.setAttribute("viewBox", "0 0 24 24");
    svg.setAttribute("fill", "none");
    svg.setAttribute("stroke", "currentColor");
    svg.setAttribute("stroke-width", "2");
    svg.setAttribute("stroke-linecap", "round");
    svg.setAttribute("stroke-linejoin", "round");
    svg.setAttribute("class", "smart-connections-visualizer-svg-icon smart-connections-visualizer-lucide-x");
    const path1 = document.createElementNS("http://www.w3.org/2000/svg", "path");
    path1.setAttribute("d", "M18 6 6 18");
    svg.appendChild(path1);
    const path2 = document.createElementNS("http://www.w3.org/2000/svg", "path");
    path2.setAttribute("d", "m6 6 12 12");
    svg.appendChild(path2);
    xIcon.appendChild(svg);
    return xIcon;
  }
  setupSettingsEventListeners() {
    this.setupScoreThresholdSlider();
    this.setupNodeSizeSlider();
    this.setupLineThicknessSlider();
    this.setupCenterForceSlider();
    this.setupRepelForceSlider();
    this.setupLinkForceSlider();
    this.setupLinkDistanceSlider();
    this.setupFadeThresholdSlider();
    this.setupMinLinkThicknessSlider();
    this.setupMaxLinkThicknessSlider();
    this.setupConnectionTypeRadios();
    this.setupMaxLabelCharactersSlider();
    this.setupLinkLabelSizeSlider();
    this.setupNodeLabelSizeSlider();
    this.setupCloseIcon();
    this.setupRefreshIcon();
  }
  setupScoreThresholdSlider() {
    const scoreThresholdSlider = document.getElementById("smart-connections-visualizer-scoreThreshold");
    if (scoreThresholdSlider) {
      scoreThresholdSlider.addEventListener("input", (event) => this.updateScoreThreshold(event));
      const debouncedUpdate = (0, import_obsidian2.debounce)(async (event) => {
        await this.updateVisualization(parseFloat(event.target.value));
      }, 500, true);
      scoreThresholdSlider.addEventListener("input", debouncedUpdate);
    }
  }
  updateScoreThreshold(event) {
    const newScoreThreshold = parseFloat(event.target.value);
    const label = document.getElementById("smart-connections-visualizer-scoreThresholdLabel");
    this.plugin.settings.relevanceScoreThreshold = newScoreThreshold;
    this.plugin.saveSettings();
    if (label)
      label.textContent = `Min relevance: ${(newScoreThreshold * 100).toFixed(0)}%`;
  }
  setupNodeSizeSlider() {
    const nodeSizeSlider = document.getElementById("smart-connections-visualizer-nodeSize");
    if (nodeSizeSlider) {
      nodeSizeSlider.addEventListener("input", (event) => this.updateNodeSize(event));
    }
  }
  updateNodeSize(event) {
    const newNodeSize = parseFloat(event.target.value);
    const label = document.getElementById("smart-connections-visualizer-nodeSizeLabel");
    if (label)
      label.textContent = `Node size: ${newNodeSize}`;
    this.plugin.settings.nodeSize = newNodeSize;
    this.plugin.saveSettings();
    this.nodeSize = newNodeSize;
    this.updateNodeSizes();
  }
  setupLineThicknessSlider() {
    const lineThicknessSlider = document.getElementById("smart-connections-visualizer-lineThickness");
    if (lineThicknessSlider) {
      lineThicknessSlider.addEventListener("input", (event) => this.updateLineThickness(event));
    }
  }
  updateLineThickness(event) {
    const newLineThickness = parseFloat(event.target.value);
    const label = document.getElementById("lineThicknessLabel");
    if (label)
      label.textContent = `Line thickness: ${newLineThickness}`;
    this.plugin.settings.linkThickness = newLineThickness;
    this.plugin.saveSettings();
    this.linkThickness = newLineThickness;
    this.updateLinkThickness();
  }
  setupCenterForceSlider() {
    const centerForceSlider = document.getElementById("smart-connections-visualizer-centerForce");
    if (centerForceSlider) {
      centerForceSlider.addEventListener("input", (event) => this.updateCenterForce(event));
    }
  }
  updateCenterForce(event) {
    const newCenterForce = parseFloat(event.target.value);
    const label = document.getElementById("centerForceLabel");
    if (label)
      label.textContent = `Center force: ${newCenterForce}`;
    this.plugin.settings.centerForce = newCenterForce;
    this.plugin.saveSettings();
    this.centerForce = newCenterForce;
    this.updateSimulationForces();
  }
  setupRepelForceSlider() {
    const repelForceSlider = document.getElementById("smart-connections-visualizer-repelForce");
    if (repelForceSlider) {
      repelForceSlider.addEventListener("input", (event) => this.updateRepelForce(event));
    }
  }
  updateRepelForce(event) {
    const newRepelForce = parseFloat(event.target.value);
    const label = document.getElementById("smart-connections-visualizer-repelForceLabel");
    if (label)
      label.textContent = `Repel force: ${newRepelForce}`;
    this.repelForce = newRepelForce;
    this.plugin.settings.repelForce = newRepelForce;
    this.plugin.saveSettings();
    this.updateSimulationForces();
  }
  setupLinkForceSlider() {
    const linkForceSlider = document.getElementById("smart-connections-visualizer-linkForce");
    if (linkForceSlider) {
      linkForceSlider.addEventListener("input", (event) => this.updateLinkForce(event));
    }
  }
  updateLinkForce(event) {
    const newLinkForce = parseFloat(event.target.value);
    const label = document.getElementById("smart-connections-visualizer-linkForceLabel");
    if (label)
      label.textContent = `Link force: ${newLinkForce}`;
    this.linkForce = newLinkForce;
    this.plugin.settings.linkForce = newLinkForce;
    this.plugin.saveSettings();
    this.updateSimulationForces();
  }
  setupLinkDistanceSlider() {
    const linkDistanceSlider = document.getElementById("smart-connections-visualizer-linkDistance");
    if (linkDistanceSlider) {
      linkDistanceSlider.addEventListener("input", (event) => this.updateLinkDistance(event));
    }
  }
  updateLinkDistance(event) {
    const newLinkDistance = parseFloat(event.target.value);
    const label = document.getElementById("smart-connections-visualizer-linkDistanceLabel");
    if (label)
      label.textContent = `Link distance: ${newLinkDistance}`;
    this.linkDistance = newLinkDistance;
    this.plugin.settings.linkDistance = newLinkDistance;
    this.plugin.saveSettings();
    this.updateSimulationForces();
  }
  setupFadeThresholdSlider() {
    const fadeThresholdSlider = document.getElementById("smart-connections-visualizer-fadeThreshold");
    if (fadeThresholdSlider) {
      fadeThresholdSlider.addEventListener("input", (event) => {
        this.updateFadeThreshold(event);
        this.updateLabelOpacity(transform(select_default2("svg").node()).k);
      });
    }
  }
  updateFadeThreshold(event) {
    const newFadeThreshold = parseFloat(event.target.value);
    const label = document.getElementById("smart-connections-visualizer-fadeThresholdLabel");
    if (label)
      label.textContent = `Text fade threshold: ${newFadeThreshold}`;
    this.textFadeThreshold = newFadeThreshold;
    this.plugin.settings.textFadeThreshold = newFadeThreshold;
    this.plugin.saveSettings();
  }
  setupMinLinkThicknessSlider() {
    const minLinkThicknessSlider = document.getElementById("smart-connections-visualizer-minLinkThickness");
    if (minLinkThicknessSlider) {
      minLinkThicknessSlider.addEventListener("input", (event) => this.updateMinLinkThickness(event));
    }
  }
  updateMinLinkThickness(event) {
    const newMinLinkThickness = parseFloat(event.target.value);
    const label = document.getElementById("smart-connections-visualizer-minLinkThicknessLabel");
    if (label)
      label.textContent = `Min link thickness: ${newMinLinkThickness}`;
    this.minLinkThickness = newMinLinkThickness;
    this.plugin.settings.minLinkThickness = newMinLinkThickness;
    this.plugin.saveSettings();
    this.updateLinkThickness();
  }
  setupMaxLinkThicknessSlider() {
    const maxLinkThicknessSlider = document.getElementById("smart-connections-visualizer-maxLinkThickness");
    if (maxLinkThicknessSlider) {
      maxLinkThicknessSlider.addEventListener("input", (event) => this.updateMaxLinkThickness(event));
    }
  }
  updateMaxLinkThickness(event) {
    const newMaxLinkThickness = parseFloat(event.target.value);
    const label = document.getElementById("smart-connections-visualizer-maxLinkThicknessLabel");
    if (label)
      label.textContent = `Max link thickness: ${newMaxLinkThickness}`;
    this.maxLinkThickness = newMaxLinkThickness;
    this.plugin.settings.maxLinkThickness = newMaxLinkThickness;
    this.plugin.saveSettings();
    this.updateLinkThickness();
  }
  setupConnectionTypeRadios() {
    const connectionTypeRadios = document.querySelectorAll('input[name="connectionType"]');
    connectionTypeRadios.forEach((radio) => radio.addEventListener("change", (event) => this.updateConnectionType(event)));
  }
  async updateConnectionType(event) {
    this.connectionType = event.target.value;
    this.isChangingConnectionType = true;
    this.plugin.settings.connectionType = this.connectionType;
    this.plugin.saveSettings();
    await this.updateVisualization();
  }
  setupMaxLabelCharactersSlider() {
    const maxLabelCharactersSlider = document.getElementById("smart-connections-visualizer-maxLabelCharacters");
    if (maxLabelCharactersSlider) {
      maxLabelCharactersSlider.addEventListener("input", (event) => this.updateMaxLabelCharacters(event));
    }
  }
  updateMaxLabelCharacters(event) {
    const newMaxLabelCharacters = parseInt(event.target.value, 10);
    const label = document.getElementById("smart-connections-visualizer-maxLabelCharactersLabel");
    if (label)
      label.textContent = `Max Label Characters: ${newMaxLabelCharacters}`;
    this.maxLabelCharacters = newMaxLabelCharacters;
    this.updateNodeLabels();
  }
  setupLinkLabelSizeSlider() {
    const linkLabelSizeSlider = document.getElementById("smart-connections-visualizer-linkLabelSize");
    if (linkLabelSizeSlider) {
      linkLabelSizeSlider.addEventListener("input", (event) => this.updateLinkLabelSize(event));
    }
  }
  updateLinkLabelSize(event) {
    const newLinkLabelSize = parseFloat(event.target.value);
    const label = document.getElementById("smart-connections-visualizer-linkLabelSizeLabel");
    if (label)
      label.textContent = `Link Label Size: ${newLinkLabelSize}`;
    this.linkLabelSize = newLinkLabelSize;
    this.updateLinkLabelSizes();
  }
  setupNodeLabelSizeSlider() {
    const nodeLabelSizeSlider = document.getElementById("smart-connections-visualizer-nodeLabelSize");
    if (nodeLabelSizeSlider) {
      nodeLabelSizeSlider.addEventListener("input", (event) => this.updateNodeLabelSize(event));
    }
  }
  updateNodeLabelSize(event) {
    const newNodeLabelSize = parseFloat(event.target.value);
    const label = document.getElementById("smart-connections-visualizer-nodeLabelSizeLabel");
    if (label)
      label.textContent = `Node Label Size: ${newNodeLabelSize}`;
    this.nodeLabelSize = newNodeLabelSize;
    this.updateNodeLabelSizes();
  }
  // Updated setupCloseIcon method
  setupCloseIcon() {
    const closeIcon = document.getElementById("smart-connections-visualizer-close-icon");
    if (closeIcon)
      closeIcon.addEventListener("click", () => this.toggleDropdownMenu());
  }
  closeDropdownMenu() {
    const dropdownMenu = document.querySelector(".sc-visualizer-dropdown-menu");
    if (dropdownMenu)
      dropdownMenu.classList.remove("open");
  }
  setupRefreshIcon() {
    const refreshIcon = document.getElementById("smart-connections-visualizer-refresh-icon");
    if (refreshIcon)
      refreshIcon.addEventListener("click", async () => await this.resetToDefault());
  }
  async resetToDefault() {
    this.relevanceScoreThreshold = DEFAULT_NETWORK_SETTINGS.relevanceScoreThreshold;
    this.nodeSize = DEFAULT_NETWORK_SETTINGS.nodeSize;
    this.linkThickness = DEFAULT_NETWORK_SETTINGS.lineThickness;
    this.repelForce = DEFAULT_NETWORK_SETTINGS.repelForce;
    this.linkForce = DEFAULT_NETWORK_SETTINGS.linkForce;
    this.linkDistance = DEFAULT_NETWORK_SETTINGS.linkDistance;
    this.centerForce = DEFAULT_NETWORK_SETTINGS.centerForce;
    this.textFadeThreshold = DEFAULT_NETWORK_SETTINGS.textFadeThreshold;
    this.minLinkThickness = DEFAULT_NETWORK_SETTINGS.minLinkThickness;
    this.maxLinkThickness = DEFAULT_NETWORK_SETTINGS.maxLinkThickness;
    this.maxLabelCharacters = DEFAULT_NETWORK_SETTINGS.maxLabelCharacters;
    this.linkLabelSize = DEFAULT_NETWORK_SETTINGS.linkLabelSize;
    this.nodeLabelSize = DEFAULT_NETWORK_SETTINGS.nodeLabelSize;
    this.connectionType = DEFAULT_NETWORK_SETTINGS.connectionType;
    this.noteFillColor = DEFAULT_NETWORK_SETTINGS.noteFillColor;
    this.blockFillColor = DEFAULT_NETWORK_SETTINGS.blockFillColor;
    this.wikiFillColor = DEFAULT_NETWORK_SETTINGS.wikiFillColor;
    this.language = DEFAULT_NETWORK_SETTINGS.language;
    this.plugin.settings.relevanceScoreThreshold = DEFAULT_NETWORK_SETTINGS.relevanceScoreThreshold;
    this.plugin.settings.nodeSize = DEFAULT_NETWORK_SETTINGS.nodeSize;
    this.plugin.settings.linkThickness = DEFAULT_NETWORK_SETTINGS.lineThickness;
    this.plugin.settings.repelForce = DEFAULT_NETWORK_SETTINGS.repelForce;
    this.plugin.settings.linkForce = DEFAULT_NETWORK_SETTINGS.linkForce;
    this.plugin.settings.linkDistance = DEFAULT_NETWORK_SETTINGS.linkDistance;
    this.plugin.settings.centerForce = DEFAULT_NETWORK_SETTINGS.centerForce;
    this.plugin.settings.textFadeThreshold = DEFAULT_NETWORK_SETTINGS.textFadeThreshold;
    this.plugin.settings.minLinkThickness = DEFAULT_NETWORK_SETTINGS.minLinkThickness;
    this.plugin.settings.maxLinkThickness = DEFAULT_NETWORK_SETTINGS.maxLinkThickness;
    this.plugin.settings.maxLabelCharacters = DEFAULT_NETWORK_SETTINGS.maxLabelCharacters;
    this.plugin.settings.linkLabelSize = DEFAULT_NETWORK_SETTINGS.linkLabelSize;
    this.plugin.settings.nodeLabelSize = DEFAULT_NETWORK_SETTINGS.nodeLabelSize;
    this.plugin.settings.connectionType = DEFAULT_NETWORK_SETTINGS.connectionType;
    this.plugin.settings.noteFillColor = DEFAULT_NETWORK_SETTINGS.noteFillColor;
    this.plugin.settings.blockFillColor = DEFAULT_NETWORK_SETTINGS.blockFillColor;
    this.plugin.settings.wikiFillColor = DEFAULT_NETWORK_SETTINGS.wikiFillColor;
    this.plugin.saveSettings();
    this.updateLabelsToDefaults();
    this.updateSliders();
    this.updateNodeSizes();
    this.updateLinkThickness();
    this.updateSimulationForces();
    await this.updateVisualization(this.relevanceScoreThreshold);
  }
  updateLabelsToDefaults() {
    const labels = {
      "smart-connections-visualizer-scoreThresholdLabel": `Min relevance: ${(this.relevanceScoreThreshold * 100).toFixed(0)}%`,
      "smart-connections-visualizer-nodeSizeLabel": `Node size: ${this.nodeSize}`,
      "smart-connections-visualizer-maxLabelCharactersLabel": `Max label characters: ${this.maxLabelCharacters}`,
      "smart-connections-visualizer-linkLabelSizeLabel": `Link label size: ${this.linkLabelSize}`,
      "smart-connections-visualizer-smart-connections-visualizer-nodeLabelSizeLabel": `Node label size: ${this.nodeLabelSize}`,
      "smart-connections-visualizer-minLinkThicknessLabel": `Min link thickness: ${this.minLinkThickness}`,
      "smart-connections-visualizer-maxLinkThicknessLabel": `Max link thickness: ${this.maxLinkThickness}`,
      "smart-connections-visualizer-fadeThresholdLabel": `Text fade threshold: ${this.textFadeThreshold}`,
      "smart-connections-visualizer-repelForceLabel": `Repel force: ${this.repelForce}`,
      "smart-connections-visualizer-linkForceLabel": `Link force: ${this.linkForce}`,
      "smart-connections-visualizer-linkDistanceLabel": `Link distance: ${this.linkDistance}`
    };
    for (const [id2, text] of Object.entries(labels)) {
      const label = document.getElementById(id2);
      if (label) {
        label.textContent = text;
      }
    }
  }
  updateSliders() {
    const scoreThresholdSlider = document.getElementById("smart-connections-visualizer-scoreThreshold");
    const nodeSizeSlider = document.getElementById("smart-connections-visualizer-nodeSize");
    const repelForceSlider = document.getElementById("smart-connections-visualizer-repelForce");
    const linkForceSlider = document.getElementById("smart-connections-visualizer-linkForce");
    const linkDistanceSlider = document.getElementById("smart-connections-visualizer-linkDistance");
    const fadeThresholdSlider = document.getElementById("smart-connections-visualizer-fadeThreshold");
    const minLinkThicknessSlider = document.getElementById("smart-connections-visualizer-minLinkThickness");
    const maxLinkThicknessSlider = document.getElementById("smart-connections-visualizer-maxLinkThickness");
    const maxLabelCharactersSlider = document.getElementById("smart-connections-visualizer-maxLabelCharacters");
    const linkLabelSizeSlider = document.getElementById("smart-connections-visualizer-linkLabelSize");
    const nodeLabelSizeSlider = document.getElementById("smart-connections-visualizer-nodeLabelSize");
    scoreThresholdSlider.value = `${this.relevanceScoreThreshold}`;
    nodeSizeSlider.value = `${this.nodeSize}`;
    repelForceSlider.value = `${this.repelForce}`;
    linkForceSlider.value = `${this.linkForce}`;
    linkDistanceSlider.value = `${this.linkDistance}`;
    fadeThresholdSlider.value = `${this.textFadeThreshold}`;
    minLinkThicknessSlider.value = `${this.minLinkThickness}`;
    maxLinkThicknessSlider.value = `${this.maxLinkThickness}`;
    maxLabelCharactersSlider.value = `${this.maxLabelCharacters}`;
    linkLabelSizeSlider.value = `${this.linkLabelSize}`;
    nodeLabelSizeSlider.value = `${this.nodeLabelSize}`;
  }
  watchForNoteChanges() {
    this.app.workspace.on("file-open", (file) => {
      if (file && this.currentNoteKey !== file.path && !this.isHovering && this.containerEl.children[1].checkVisibility()) {
        this.currentNoteKey = file.path;
        this.currentNoteChanging = true;
        this.render();
      }
    });
    let lastLeaf;
    this.registerEvent(
      this.app.workspace.on("active-leaf-change", async (leaf) => {
        var _a, _b, _c;
        const existingLeaf = this.app.workspace.getLeavesOfType("smart-connections-visualizer")[0];
        if (existingLeaf) {
          const l = existingLeaf.view;
          const leafName = ((_b = (_a = leaf == null ? void 0 : leaf.view) == null ? void 0 : _a.file) == null ? void 0 : _b.path) || ((_c = leaf == null ? void 0 : leaf.view) == null ? void 0 : _c.title);
          if (leafName && this.currentNoteKey != leafName && !this.isHovering && this.containerEl.children[1].checkVisibility()) {
            return this.updateVisualization(this.relevanceScoreThreshold, leafName);
          }
        }
      })
    );
  }
  async updateVisualization(newScoreThreshold, nodeName) {
    var _a;
    if (this.updatingVisualization && !this.isChangingConnectionType) {
      this.updatingVisualization = false;
      this.currentNoteChanging = false;
      return;
    }
    this.isChangingConnectionType = false;
    if (newScoreThreshold !== void 0) {
      this.relevanceScoreThreshold = newScoreThreshold;
    }
    await this.updateConnections(nodeName);
    const filteredConnections = this.connections.filter((connection) => connection.score >= this.relevanceScoreThreshold);
    const visibleNodes = /* @__PURE__ */ new Set();
    filteredConnections.forEach((connection) => {
      visibleNodes.add(connection.source);
      visibleNodes.add(connection.target);
    });
    visibleNodes.add((_a = this.centralNote) == null ? void 0 : _a.key);
    const nodesData = Array.from(visibleNodes).map((id2) => {
      const node = this.nodes.find((node2) => node2.id === id2);
      return node ? node : null;
    }).filter(Boolean);
    if (!nodesData.some((node) => node.id === this.centralNote.key)) {
      const centralNode = this.nodes.find((node) => node.id === this.centralNote.key);
      if (centralNode) {
        nodesData.push(centralNode);
      }
    }
    nodesData.forEach((node) => {
      if (!node.x || !node.y) {
        console.warn(`Node with invalid position: ${node.id}`);
        node.x = Math.random() * 1e3;
        node.y = Math.random() * 1e3;
      }
    });
    this.validatedLinks = filteredConnections.filter((link) => {
      const sourceNode = nodesData.find((node) => node.id === link.source);
      const targetNode = nodesData.find((node) => node.id === link.target);
      if (!sourceNode || !targetNode) {
      }
      return sourceNode && targetNode;
    });
    if (nodesData.length === 0 || this.validatedLinks.length === 0) {
      this.updatingVisualization = false;
      console.warn("No nodes or links to display after filtering. Aborting update.");
      new import_obsidian2.Notice("No nodes or links to display after filtering. Adjust filter settings");
      this.nodeSelection = this.svgGroup.select("g.smart-connections-visualizer-nodes").selectAll("circle").data([]).exit().remove();
      this.linkSelection = this.svgGroup.select("g.smart-connections-visualizer-links").selectAll("line").data([]).exit().remove();
      this.linkLabelSelection = this.svgGroup.select("g.smart-connections-visualizer-link-labels").selectAll("text").data([]).exit().remove();
      this.labelSelection = this.svgGroup.select("g.smart-connections-visualizer-node-labels").selectAll("text").data([]).exit().remove();
      return;
    }
    this.updateNodeAndLinkSelection(nodesData);
    if (!this.simulation || this.currentNoteChanging || this.isFiltering) {
      const { width, height } = this.getSVGDimensions();
      this.initializeSimulation(width, height);
      this.currentNoteChanging = false;
      this.isFiltering = false;
    }
    this.simulation.nodes(nodesData).on("tick", this.simulationTickHandler.bind(this));
    this.simulation.force("link").links(this.validatedLinks).distance((d) => this.linkDistanceScale(d.score));
    this.simulation.alpha(1).restart();
    setTimeout(() => {
      this.simulation.alphaTarget(0);
    }, 1e3);
    this.updatingVisualization = false;
  }
  simulationTickHandler() {
    this.nodeSelection.attr("cx", (d) => d.x).attr("cy", (d) => d.y).style("cursor", "pointer");
    this.linkSelection.attr("x1", (d) => d.source.x || 0).attr("y1", (d) => d.source.y || 0).style("cursor", "pointer").attr("x2", (d) => d.target.x || 0).attr("y2", (d) => d.target.y || 0);
    this.linkLabelSelection.attr("x", (d) => (d.source.x + d.target.x) / 2).attr("y", (d) => (d.source.y + d.target.y) / 2);
    this.labelSelection.attr("x", (d) => d.x).attr("y", (d) => d.y);
  }
  async getWikiNodes(node) {
    var _a, _b, _c;
    if (!node)
      return;
    const title = ((_a = node == null ? void 0 : node.item) == null ? void 0 : _a.name) || node;
    let titleName = (_c = (_b = title == null ? void 0 : title.split("/")) == null ? void 0 : _b.pop()) == null ? void 0 : _c.replace(".md", "");
    let titleLang = lang2.detectLanguage(titleName);
    apiClient.setLang(titleLang);
    let res = await apiClient.getResponse(titleName).then((content2) => content2).catch((e) => console.info(e));
    if (!res) {
      const aliases = this.getAliases(title);
      for (const alias of aliases) {
        let titleLang2 = lang2.detectLanguage(alias);
        apiClient.setLang(titleLang2);
        res = await apiClient.getResponse(alias).then((content2) => content2).catch((e) => console.info(e));
        if (res !== null) {
          break;
        }
      }
    }
    if (!res) {
      return [];
    }
    const noteConnections = res == null ? void 0 : res.map((l) => {
      var _a2, _b2;
      return {
        item: {
          url: (_b2 = (_a2 = l == null ? void 0 : l.content_urls) == null ? void 0 : _a2.desktop) == null ? void 0 : _b2.page,
          title: `${l == null ? void 0 : l.normalizedtitle}.md`,
          key: `${l == null ? void 0 : l.normalizedtitle}.md`,
          fill: this.wikiFillColor,
          id: `${l == null ? void 0 : l.normalizedtitle}.md`,
          type: "wiki"
        },
        score: 1
      };
    });
    return noteConnections;
  }
  async updateConnections(nodeName) {
    this.nodes = [];
    this.links = [];
    this.connections = [];
    this.minScore = 1;
    this.maxScore = 0;
    let currentNoteKey = nodeName || this.currentNoteKey;
    if (!currentNoteKey)
      return;
    this.centralNote = this.smartNotes[currentNoteKey] || {
      url: `https://en.wikipedia.org/wiki/${nodeName}`,
      title: nodeName,
      key: nodeName,
      id: nodeName,
      type: "wiki"
    };
    this.currentNoteKey = this.centralNote.key;
    let originalCentral = this.noteConnections || [];
    if (this.centralNote && this.centralNote.find_connections) {
      this.noteConnections = [];
      this.noteConnections = this.centralNote.find_connections().filter(
        (connection) => connection.score >= this.relevanceScoreThreshold && !(connection.item instanceof this.env.item_types.SmartBlock)
      );
      const ideasLenght = 5;
      const nSlice = this.noteConnections.length > ideasLenght ? ideasLenght : this.noteConnections.length;
      const promises = this.noteConnections.slice(0, nSlice).map(async (n) => {
        var _a, _b;
        const source = (_b = (_a = n == null ? void 0 : n.item) == null ? void 0 : _a.data) == null ? void 0 : _b.path;
        const wikiNodes = await this.getWikiNodes(n);
        return wikiNodes == null ? void 0 : wikiNodes.map((node) => {
          return {
            ...node,
            // Spread the existing properties of the node
            source
            // Add or update the source property
          };
        });
      });
      const wikiConnections = await this.getWikiNodes(this.centralNote.key);
      const wikiConnections2 = await Promise.all(promises);
      this.addCentralNode();
      const connections = [this.noteConnections, wikiConnections, wikiConnections2.flat()];
      const flatConnections = [].concat(...connections);
      this.addFilteredConnections(flatConnections);
    } else {
      const wikiConnections = await this.getWikiNodes(this.centralNote.key);
      this.addCentralNode();
      this.addFilteredConnections(originalCentral.concat(wikiConnections));
    }
    const isValid = this.validateGraphData(this.nodes, this.links);
    if (!isValid)
      console.error("Graph data validation failed.");
  }
  getAliases(source) {
    var _a, _b;
    try {
      const file = this.app.vault.getAbstractFileByPath(source);
      const metadata = (_a = this.app.metadataCache) == null ? void 0 : _a.getFileCache(file);
      return ((_b = metadata == null ? void 0 : metadata.frontmatter) == null ? void 0 : _b.aliases) || [];
    } catch (error) {
      return [];
    }
  }
  addCentralNode() {
    var _a, _b, _c, _d;
    if (this.centralNote.key && this.centralNote.key.trim() !== "" && !this.nodes.some((node) => node.id === this.centralNote.key)) {
      const svg = this.svg.node();
      const { width, height } = svg.getBoundingClientRect();
      this.nodes.push({
        id: (_b = (_a = this.centralNote.key) == null ? void 0 : _a.split("/")) == null ? void 0 : _b.pop(),
        name: this.centralNote.key,
        group: "note",
        x: width / 2,
        y: height / 2,
        fx: null,
        fy: null,
        fill: ((_c = this == null ? void 0 : this.centralNote) == null ? void 0 : _c.type) === "wiki" ? this.wikiFillColor : this.noteFillColor,
        selected: false,
        highlighted: false,
        type: (_d = this.centralNote) == null ? void 0 : _d.type
      });
      this.centralNode = this.nodes[this.nodes.length - 1];
    } else {
      console.error(`Central node not found or already exists: ${this.centralNote.key}`);
    }
  }
  addFilteredConnections(noteConnections) {
    const filteredConnections = noteConnections.filter((connection) => {
      var _a;
      if (this.connectionType === "both") {
        return true;
      } else {
        return this.connectionType === "block" === connection.item instanceof this.env.item_types.SmartBlock || ((_a = connection == null ? void 0 : connection.item) == null ? void 0 : _a.type) === "wiki";
      }
    });
    filteredConnections.forEach((connection, index2) => {
      if (connection && connection.item && connection.item.key) {
        const connectionId = connection.item.key;
        this.addConnectionNode(connectionId, connection);
        this.addConnectionLink(connectionId, connection);
      } else {
        console.warn(`Skipping invalid connection at index ${index2}:`, connection);
      }
    });
    this.nodes = this.nodes.sort((a2, b) => {
      const nameA = a2.id.toUpperCase();
      const nameB = b.id.toUpperCase();
      if (nameA < nameB)
        return -1;
      if (nameA > nameB)
        return 1;
      return 0;
    });
    this.links = this.links.sort((a2, b) => {
      var _a, _b, _c, _d;
      const nameA = (_b = (_a = a2.target) == null ? void 0 : _a.split("/")) == null ? void 0 : _b.pop().toUpperCase();
      const nameB = (_d = (_c = b.target) == null ? void 0 : _c.split("/")) == null ? void 0 : _d.pop().toUpperCase();
      if (nameA < nameB)
        return -1;
      if (nameA > nameB)
        return 1;
      return 0;
    });
  }
  addConnectionNode(connectionId, connection) {
    var _a, _b, _c, _d;
    if (!this.nodes.some((node) => {
      var _a2;
      return node.id === ((_a2 = connectionId == null ? void 0 : connectionId.split("/")) == null ? void 0 : _a2.pop());
    })) {
      this.nodes.push({
        // id: connectionId,
        id: (_a = connectionId == null ? void 0 : connectionId.split("/")) == null ? void 0 : _a.pop(),
        name: connectionId,
        group: connection.item instanceof this.env.item_types.SmartBlock ? "block" : "note",
        x: Math.random() * 1e3,
        y: Math.random() * 1e3,
        fx: null,
        fy: null,
        fill: connection.item.fill ? connection.item.fill : connection.item instanceof this.env.item_types.SmartBlock ? this.blockFillColor : ((_b = connection == null ? void 0 : connection.item) == null ? void 0 : _b.type) === "wiki" ? this.wikiFillColor : this.noteFillColor,
        selected: false,
        highlighted: false,
        type: (_c = connection == null ? void 0 : connection.item) == null ? void 0 : _c.type,
        url: (_d = connection == null ? void 0 : connection.item) == null ? void 0 : _d.url
      });
    } else {
      const node = this.nodes.find((node2) => node2.id === connectionId);
      node.type = "";
      node.fill = "#FF0000";
    }
  }
  addConnectionLink(connectionId, connection) {
    var _a, _b, _c, _d, _e, _f, _g;
    let sourceID = (connection == null ? void 0 : connection.source) || this.centralNote.key;
    sourceID = (_a = sourceID == null ? void 0 : sourceID.split("/")) == null ? void 0 : _a.pop();
    const sourceNode = this.nodes.find((node) => node.id === sourceID);
    const targetNode = this.nodes.find((node) => {
      var _a2;
      return node.id === connectionId || node.id === ((_a2 = connectionId == null ? void 0 : connectionId.split("/")) == null ? void 0 : _a2.pop());
    });
    if (!sourceNode) {
      console.error(`Source node not found: ${sourceID}`);
      return;
    }
    if (!targetNode) {
      console.error(`Target node not found: ${connectionId}`);
      return;
    }
    this.links.push({
      source: (_c = (_b = sourceNode == null ? void 0 : sourceNode.id) == null ? void 0 : _b.split("/")) == null ? void 0 : _c.pop(),
      target: (_d = connectionId == null ? void 0 : connectionId.split("/")) == null ? void 0 : _d.pop(),
      value: connection.score || 0
    });
    this.connections.push({
      source: (_f = (_e = sourceNode == null ? void 0 : sourceNode.id) == null ? void 0 : _e.split("/")) == null ? void 0 : _f.pop(),
      target: (_g = connectionId == null ? void 0 : connectionId.split("/")) == null ? void 0 : _g.pop(),
      score: connection.score || 0
    });
    this.updateScoreRange(connection.score);
  }
  updateScoreRange(score) {
    if (score > this.maxScore)
      this.maxScore = score;
    if (score < this.minScore)
      this.minScore = score;
  }
  validateGraphData(nodes, links2) {
    const nodeIds = new Set(nodes.map((node) => node.id));
    let isValid = true;
    links2.forEach((link, index2) => {
      if (!nodeIds.has(link.source)) {
        console.error(`Link at index ${index2} has an invalid source: ${link.source}`);
        isValid = false;
      }
      if (!nodeIds.has(link.target)) {
        console.error(`Link at index ${index2} has an invalid target: ${link.target}`);
        isValid = false;
      }
    });
    nodes.forEach((node, index2) => {
      if (!node.hasOwnProperty("id") || !node.hasOwnProperty("name") || !node.hasOwnProperty("group")) {
        console.error(`Node at index ${index2} is missing required properties: ${JSON.stringify(node)}`);
        isValid = false;
      }
    });
    return isValid;
  }
  updateNodeAndLinkSelection(nodesData) {
    const svgGroup = this.svgGroup;
    this.linkSelection = svgGroup.select("g.smart-connections-visualizer-links").selectAll("line").data(this.validatedLinks, (d) => `${d.source}-${d.target}`).attr("marker-end", "url(#arrowhead)").join(
      (enter) => this.enterLink(enter),
      (update) => this.updateLink(update),
      (exit) => exit.remove()
    );
    this.linkLabelSelection = svgGroup.select("g.smart-connections-visualizer-link-labels").selectAll("text").data(this.validatedLinks, (d) => `${d.source.id}-${d.target.id}`).join(
      (enter) => this.enterLinkLabel(enter),
      (update) => this.updateLinkLabel(update),
      (exit) => exit.remove()
    );
    this.labelSelection = svgGroup.select("g.smart-connections-visualizer-node-labels").selectAll("text").data(nodesData, (d) => d.id).join(
      (enter) => this.enterLabel(enter),
      (update) => this.updateLabel(update),
      (exit) => exit.remove()
    ).attr("x", (d) => d.x).attr("y", (d) => d.y);
    this.nodeSelection = svgGroup.select("g.smart-connections-visualizer-nodes").selectAll("circle").data(nodesData, (d) => {
      return d.id;
    }).join(
      (enter) => this.enterNode(enter),
      (update) => this.updateNode(update),
      (exit) => exit.remove()
    );
  }
  enterNode(enter) {
    const that = this;
    return enter.append("circle").attr("class", "smart-connections-visualizer-node").attr("r", (d) => d.id === this.centralNode.id ? this.nodeSize + 2 : this.nodeSize).attr("fill", (d) => d.fill).attr("stroke", (d) => d.selected ? "blanchedalmond" : "transparent").attr("stroke-width", (d) => d.selected ? 1.5 : 0.3).attr("opacity", 1).attr("cursor", "pointer").call(drag_default().on("start", this.onDragStart.bind(this)).on("drag", this.onDrag.bind(this)).on("end", this.onDragEnd.bind(this))).on("click", this.onNodeClick.bind(this)).on("mouseover", this.onNodeMouseOver.bind(this)).on("mouseout", this.onNodeMouseOut.bind(this));
  }
  updateNode(update) {
    return update.attr("r", (d) => d.id === this.centralNode.id ? this.nodeSize + 2 : this.nodeSize).attr("fill", (d) => d.selected ? "#f3ee5d" : d.fill).attr("stroke", (d) => d.selected ? "blanchedalmond" : "transparent").attr("stroke-width", (d) => d.selected ? 1.5 : 0.3);
  }
  onDragStart(event, d) {
    if (!event.active)
      this.simulation.alphaTarget(0.3).restart();
    this.dragging = true;
    d.fx = d.x;
    d.fy = d.y;
  }
  onDrag(event, d) {
    if (this.isHovering)
      this.isHovering = false;
    d.fx = event.x;
    d.fy = event.y;
  }
  onDragEnd(event, d) {
    if (!event.active)
      this.simulation.alphaTarget(0);
    d.fx = null;
    d.fy = null;
    this.dragging = false;
  }
  async openSearch(node) {
    var _a, _b;
    const newTitle = `Search: ${node == null ? void 0 : node.name}`;
    const leaf = this.app.workspace.activeLeaf;
    if (leaf && leaf.view instanceof SearchView) {
      leaf.view.frame.setAttr("src", node == null ? void 0 : node.url);
      leaf.view.url = node == null ? void 0 : node.url;
      (_b = (_a = this.app.workspace) == null ? void 0 : _a.activeLeaf) == null ? void 0 : _b.setViewState({
        type: leaf.view.getViewType(),
        active: true,
        state: { viewTitle: newTitle }
        // Pass the new title in state
      });
      this.app.workspace.setActiveLeaf(leaf);
    } else {
      const newLeaf = this.app.workspace.getLeaf(true);
      const view = new SearchView(this, newLeaf, node == null ? void 0 : node.url, node == null ? void 0 : node.name);
      await newLeaf.open(view);
      await newLeaf.setViewState({
        type: view.getViewType(),
        active: true,
        state: { viewTitle: newTitle }
        // Set initial title for the new view
      });
      this.app.workspace.setActiveLeaf(newLeaf);
    }
  }
  async onNodeClick(event, d) {
    if (d.id === this.centralNode.id)
      return;
    if ((d == null ? void 0 : d.type) === "wiki")
      await this.openSearch(d);
    else
      this.env.plugin.open_note(d.id, event);
    await this.updateVisualization(this.relevanceScoreThreshold, d == null ? void 0 : d.name);
    event.stopPropagation();
  }
  onNodeMouseOver(event, d) {
    if (this.dragging)
      return;
    if (d.id === this.centralNode.id)
      return;
    this.isHovering = true;
    this.highlightNode(d);
    this.updateLinkLabelAppearance(d);
    this.app.workspace.trigger("hover-link", {
      event,
      source: "D3",
      hoverParent: event.currentTarget.parentElement,
      targetEl: event.currentTarget,
      linktext: d.id
    });
  }
  onNodeMouseOut(event, d) {
    if (this.dragging)
      return;
    this.isHovering = false;
    this.centerHighlighted = false;
    this.unhighlightNode(d);
    this.updateLinkLabelAppearance({ id: null });
  }
  updateLinkLabelPositions() {
    this.linkLabelSelection.attr("x", (d) => (d.source.x + d.target.x) / 2).attr("y", (d) => (d.source.y + d.target.y) / 2);
  }
  updateLinkSelection(svgGroup) {
    return svgGroup.select("g.links").selectAll("line").data(this.validatedLinks, (d) => `${d.source}-${d.target}`).attr("marker-end", "url(#arrowhead)").style("cursor", "pointer").join(
      (enter) => this.enterLink(enter),
      (update) => this.updateLink(update),
      (exit) => exit.remove()
    );
  }
  enterLink(enter) {
    return enter.append("line").attr("class", "smart-connections-visualizer-link").attr("stroke", "#4c7787").attr("stroke-width", (d) => this.getLinkStrokeWidth(d)).attr("stroke-opacity", 1).attr("opacity", 1);
  }
  updateLink(update) {
    return update.attr("stroke", "#4c7787").attr("stroke-width", (d) => this.getLinkStrokeWidth(d));
  }
  getLinkStrokeWidth(d) {
    return linear2().domain([this.minScore, this.maxScore]).range([this.minLinkThickness, this.maxLinkThickness])(d.score);
  }
  updateLinkLabelSelection(svgGroup) {
    return svgGroup.append("g").attr("class", "smart-connections-visualizer-link-labels").selectAll("text").data(this.validatedLinks, (d) => `${d.source.id}-${d.target.id}`).attr("marker-end", "url(#arrowhead)").join(
      (enter) => this.enterLinkLabel(enter),
      (update) => this.updateLinkLabel(update),
      (exit) => exit.remove()
    );
  }
  enterLinkLabel(enter) {
    return enter.append("text").attr("class", "smart-connections-visualizer-link-label").attr("font-size", this.linkLabelSize).attr("fill", "#bbb").attr("opacity", 0).attr("x", (d) => d.x).attr("y", (d) => d.y).text((d) => (d.score * 100).toFixed(1) + "%");
  }
  updateLinkLabel(update) {
    return update.text((d) => (d.score * 100).toFixed(1)).attr("x", (d) => d.x).attr("y", (d) => d.y);
  }
  enterLabel(enter) {
    return enter.append("text").attr("class", "smart-connections-visualizer-label").attr("dx", 0).attr("font-size", this.nodeLabelSize).attr("dy", 12).attr("text-anchor", "middle").attr("fill", "#bbb").attr("data-id", (d) => d.id).attr("opacity", 1).attr("x", (d) => d.x).attr("y", (d) => d.y).text((d) => this.formatLabel(d.name));
  }
  updateLabel(update) {
    return update.attr("dx", 0).attr("data-id", (d) => d.id).attr("text-anchor", "middle").text((d) => d.id === this.highlightedNodeId ? this.formatLabel(d.name, false) : this.formatLabel(d.name, true)).attr("fill", "#bbb").attr("font-size", this.nodeLabelSize).attr("x", (d) => d.x).attr("y", (d) => d.y).attr("opacity", 1);
  }
  updateNodeSizes() {
    this.nodeSelection.attr("r", (d) => d.id === this.centralNode.id ? this.nodeSize + 3 : this.nodeSize);
  }
  updateLinkThickness() {
    const linkStrokeScale = linear2().domain([this.minScore, this.maxScore]).range([this.minLinkThickness, this.maxLinkThickness]);
    this.linkSelection.attr("stroke-width", (d) => linkStrokeScale(d.score));
  }
  updateSimulationForces() {
    if (!this.simulation) {
      console.error("Simulation not initialized");
      return;
    }
    this.simulation.force("charge", manyBody_default().strength(-this.repelForce)).force("link", link_default(this.validatedLinks).id((d) => d.id).distance((d) => this.linkDistanceScale(d.score)).strength(this.linkForce));
    this.simulation.alphaTarget(0.3).restart();
    setTimeout(() => {
      this.simulation.alphaTarget(0);
    }, 1e3);
  }
  normalizeScore(score) {
    if (this.minScore === this.maxScore) {
      return 0.5;
    }
    return (score - this.minScore) / (this.maxScore - this.minScore);
  }
  linkDistanceScale(score) {
    return linear2().domain([0, 1]).range([this.linkDistance * 2, this.linkDistance / 2])(this.normalizeScore(score));
  }
  updateLabelOpacity(zoomLevel) {
    const maxOpacity = 1;
    const minOpacity = 0;
    const minZoom = 0.1;
    const maxZoom = this.textFadeThreshold;
    let newOpacity = (zoomLevel - minZoom) / (maxZoom - minZoom);
    if (zoomLevel <= minZoom)
      newOpacity = minOpacity;
    if (zoomLevel >= maxZoom)
      newOpacity = maxOpacity;
    newOpacity = Math.max(minOpacity, Math.min(maxOpacity, newOpacity));
    if (this.labelSelection) {
      this.labelSelection.transition().duration(300).attr("opacity", newOpacity);
    }
  }
  updateNodeLabels() {
    this.labelSelection.attr("font-size", this.nodeLabelSize).text((d) => this.formatLabel(d.name, true));
  }
  updateLinkLabelSizes() {
    if (this.linkLabelSelection) {
      this.linkLabelSelection.attr("font-size", this.linkLabelSize);
    }
  }
  updateNodeLabelSizes() {
    this.labelSelection.attr("font-size", this.nodeLabelSize);
  }
  updateNodeLabelOpacity(zoomLevel) {
    const maxOpacity = 1;
    const minOpacity = 0;
    const minZoom = 0.1;
    const maxZoom = this.textFadeThreshold;
    let newOpacity = (zoomLevel - minZoom) / (maxZoom - minZoom);
    if (zoomLevel <= minZoom)
      newOpacity = minOpacity;
    if (zoomLevel >= maxZoom)
      newOpacity = maxOpacity;
    newOpacity = Math.max(minOpacity, Math.min(maxOpacity, newOpacity));
    this.labelSelection.transition().duration(300).attr("opacity", newOpacity);
  }
  startBoxSelection(event) {
    if (!this.isCtrlPressed)
      return;
    this.isDragging = true;
    const [x3, y3] = pointer_default(event);
    this.selectionBox = select_default2("svg").append("rect").attr("class", "smart-connections-visualizer-selection-box").attr("x", x3).attr("y", y3).attr("width", 0).attr("height", 0).attr("stroke", "#00f").attr("stroke-width", 1).attr("fill", "rgba(0, 0, 255, 0.3)");
    this.startX = x3;
    this.startY = y3;
  }
  updateBoxSelection(event) {
    if (!this.isDragging)
      return;
    const [x3, y3] = pointer_default(event);
    const newWidth = x3 - this.startX;
    const newHeight = y3 - this.startY;
    this.selectionBox.attr("width", Math.abs(newWidth)).attr("height", Math.abs(newHeight)).attr("x", Math.min(x3, this.startX)).attr("y", Math.min(y3, this.startY));
    this.updateNodeSelectionInBox(newWidth, newHeight);
    this.updateNodeAppearance();
  }
  updateNodeSelectionInBox(newWidth, newHeight) {
    const endX = this.startX + newWidth;
    const endY = this.startY + newHeight;
    const transformedStartX = Math.min(this.startX, endX);
    const transformedStartY = Math.min(this.startY, endY);
    const transformedEndX = Math.max(this.startX, endX);
    const transformedEndY = Math.max(this.startY, endY);
    const transform2 = transform(select_default2("svg").node());
    const zoomedStartX = (transformedStartX - transform2.x) / transform2.k;
    const zoomedStartY = (transformedStartY - transform2.y) / transform2.k;
    const zoomedEndX = (transformedEndX - transform2.x) / transform2.k;
    const zoomedEndY = (transformedEndY - transform2.y) / transform2.k;
    this.nodeSelection.each((d) => {
      const nodeX = d.x;
      const nodeY = d.y;
      d.selected = nodeX >= zoomedStartX && nodeX <= zoomedEndX && nodeY >= zoomedStartY && nodeY <= zoomedEndY;
    });
  }
  endBoxSelection() {
    if (!this.isDragging)
      return;
    this.isDragging = false;
    this.selectionBox.remove();
  }
  // TODO:: Add back in when ready for toolti
  // showTooltip(event: any, d: any) {
  // 	const tooltip = d3.select('.tooltip');
  // 	tooltip.text(d.name)
  // 		.style('visibility', 'visible');
  // 	const [x, y] = d3.pointer(event);
  // 	tooltip.style('top', `${y + 10}px`)
  // 		.style('left', `${x + 10}px`);
  // }
  // hideTooltip() {
  // 	const tooltip = d3.select('.tooltip');
  // 	tooltip.style('visibility', 'hidden');
  // }
};
var ScGraphView = class extends import_obsidian2.Plugin {
  async onload() {
    await this.loadSettings();
    this.registerView("smart-connections-visualizer", (leaf) => new ScGraphItemView(leaf, this));
    this.registerHoverLinkSource("smart-connections-visualizer", {
      display: "Smart connections visualizer hover link source",
      defaultMod: true
    });
    this.addRibbonIcon("git-fork", "Open smart connections visualizer", (evt) => {
      const existingLeaf = this.app.workspace.getLeavesOfType("smart-connections-visualizer")[0];
      if (existingLeaf) {
        this.app.workspace.setActiveLeaf(existingLeaf);
      } else {
        let leaf = this.app.workspace.getLeaf(true);
        leaf.setViewState({
          type: "smart-connections-visualizer",
          active: true
        });
      }
    });
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_NETWORK_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  onunload() {
  }
};
//# sourceMappingURL=data:application/json;base64,
